!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!x[e]||!_[e])return;for(var n in _[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(p[n]=t[n]);0==--g&&0===v&&A()}(e,n),t&&t(e,n)};var n,i=!0,r="b6e773ac4a17283de50c",o=1e4,a={},s=[],l=[];function u(e){var t=C[e];if(!t)return j;var i=function(i){return t.hot.active?(C[i]?-1===C[i].parents.indexOf(e)&&C[i].parents.push(e):(s=[e],n=i),-1===t.children.indexOf(i)&&t.children.push(i)):(console.warn("[HMR] unexpected require("+i+") from disposed module "+e),s=[]),j(i)},r=function(e){return{configurable:!0,enumerable:!0,get:function(){return j[e]},set:function(t){j[e]=t}}};for(var o in j)Object.prototype.hasOwnProperty.call(j,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(i,o,r(o));return i.e=function(e){return"ready"===d&&h("prepare"),v++,j.e(e).then(t,function(e){throw t(),e});function t(){v--,"prepare"===d&&(y[e]||S(e),0===v&&0===g&&A())}},i.t=function(e,t){return 1&t&&(e=i(e)),j.t(e,-2&t)},i}var c=[],d="idle";function h(e){d=e;for(var t=0;t<c.length;t++)c[t].call(null,e)}var f,p,m,g=0,v=0,y={},_={},x={};function b(e){return+e+""===e?+e:e}function w(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return i=e,h("check"),function(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var i=new XMLHttpRequest,o=j.p+""+r+".hot-update.json";i.open("GET",o,!0),i.timeout=e,i.send(null)}catch(e){return n(e)}i.onreadystatechange=function(){if(4===i.readyState)if(0===i.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===i.status)t();else if(200!==i.status&&304!==i.status)n(new Error("Manifest request to "+o+" failed."));else{try{var e=JSON.parse(i.responseText)}catch(e){return void n(e)}t(e)}}})}(o).then(function(e){if(!e)return h("idle"),null;_={},y={},x=e.c,m=e.h,h("prepare");var t=new Promise(function(e,t){f={resolve:e,reject:t}});p={};return S(0),"prepare"===d&&0===v&&0===g&&A(),t})}function S(e){x[e]?(_[e]=!0,g++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=j.p+""+e+"."+r+".hot-update.js",t.appendChild(n)}(e)):y[e]=!0}function A(){h("ready");var e=f;if(f=null,e)if(i)Promise.resolve().then(function(){return T(i)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in p)Object.prototype.hasOwnProperty.call(p,n)&&t.push(b(n));e.resolve(t)}}function T(t){if("ready"!==d)throw new Error("apply() is only allowed in ready status");var n,i,o,l,u;function c(e){for(var t=[e],n={},i=t.slice().map(function(e){return{chain:[e],id:e}});i.length>0;){var r=i.pop(),o=r.id,a=r.chain;if((l=C[o])&&!l.hot._selfAccepted){if(l.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:o};if(l.hot._main)return{type:"unaccepted",chain:a,moduleId:o};for(var s=0;s<l.parents.length;s++){var u=l.parents[s],c=C[u];if(c){if(c.hot._declinedDependencies[o])return{type:"declined",chain:a.concat([u]),moduleId:o,parentId:u};-1===t.indexOf(u)&&(c.hot._acceptedDependencies[o]?(n[u]||(n[u]=[]),f(n[u],[o])):(delete n[u],t.push(u),i.push({chain:a.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var i=t[n];-1===e.indexOf(i)&&e.push(i)}}t=t||{};var g={},v=[],y={},_=function(){console.warn("[HMR] unexpected require("+S.moduleId+") to disposed module")};for(var w in p)if(Object.prototype.hasOwnProperty.call(p,w)){var S;u=b(w);var A=!1,T=!1,M=!1,k="";switch((S=p[w]?c(u):{type:"disposed",moduleId:w}).chain&&(k="\nUpdate propagation: "+S.chain.join(" -> ")),S.type){case"self-declined":t.onDeclined&&t.onDeclined(S),t.ignoreDeclined||(A=new Error("Aborted because of self decline: "+S.moduleId+k));break;case"declined":t.onDeclined&&t.onDeclined(S),t.ignoreDeclined||(A=new Error("Aborted because of declined dependency: "+S.moduleId+" in "+S.parentId+k));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(S),t.ignoreUnaccepted||(A=new Error("Aborted because "+u+" is not accepted"+k));break;case"accepted":t.onAccepted&&t.onAccepted(S),T=!0;break;case"disposed":t.onDisposed&&t.onDisposed(S),M=!0;break;default:throw new Error("Unexception type "+S.type)}if(A)return h("abort"),Promise.reject(A);if(T)for(u in y[u]=p[u],f(v,S.outdatedModules),S.outdatedDependencies)Object.prototype.hasOwnProperty.call(S.outdatedDependencies,u)&&(g[u]||(g[u]=[]),f(g[u],S.outdatedDependencies[u]));M&&(f(v,[S.moduleId]),y[u]=_)}var D,I=[];for(i=0;i<v.length;i++)u=v[i],C[u]&&C[u].hot._selfAccepted&&I.push({module:u,errorHandler:C[u].hot._selfAccepted});h("dispose"),Object.keys(x).forEach(function(e){!1===x[e]&&function(e){delete installedChunks[e]}(e)});for(var P,z,E=v.slice();E.length>0;)if(u=E.pop(),l=C[u]){var O={},L=l.hot._disposeHandlers;for(o=0;o<L.length;o++)(n=L[o])(O);for(a[u]=O,l.hot.active=!1,delete C[u],delete g[u],o=0;o<l.children.length;o++){var R=C[l.children[o]];R&&((D=R.parents.indexOf(u))>=0&&R.parents.splice(D,1))}}for(u in g)if(Object.prototype.hasOwnProperty.call(g,u)&&(l=C[u]))for(z=g[u],o=0;o<z.length;o++)P=z[o],(D=l.children.indexOf(P))>=0&&l.children.splice(D,1);for(u in h("apply"),r=m,y)Object.prototype.hasOwnProperty.call(y,u)&&(e[u]=y[u]);var N=null;for(u in g)if(Object.prototype.hasOwnProperty.call(g,u)&&(l=C[u])){z=g[u];var B=[];for(i=0;i<z.length;i++)if(P=z[i],n=l.hot._acceptedDependencies[P]){if(-1!==B.indexOf(n))continue;B.push(n)}for(i=0;i<B.length;i++){n=B[i];try{n(z)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:z[i],error:e}),t.ignoreErrored||N||(N=e)}}}for(i=0;i<I.length;i++){var H=I[i];u=H.module,s=[u];try{j(u)}catch(e){if("function"==typeof H.errorHandler)try{H.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),t.ignoreErrored||N||(N=n),N||(N=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||N||(N=e)}}return N?(h("fail"),Promise.reject(N)):(h("idle"),new Promise(function(e){e(v)}))}var C={};function j(t){if(C[t])return C[t].exports;var i=C[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var i=0;i<e.length;i++)t._acceptedDependencies[e[i]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:w,apply:T,status:function(e){if(!e)return d;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var t=c.indexOf(e);t>=0&&c.splice(t,1)},data:a[e]};return n=void 0,t}(t),parents:(l=s,s=[],l),children:[]};return e[t].call(i.exports,i,i.exports,u(t)),i.l=!0,i.exports}j.m=e,j.c=C,j.d=function(e,t,n){j.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},j.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},j.t=function(e,t){if(1&t&&(e=j(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(j.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)j.d(n,i,function(t){return e[t]}.bind(null,i));return n},j.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return j.d(t,"a",t),t},j.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},j.p="",j.h=function(){return r},u("./src/index.js")(j.s="./src/index.js")}({"./node_modules/css-loader/index.js!./src/iconfont/iconfont.css":function(e,t,n){var i=n("./node_modules/css-loader/lib/url/escape.js");(e.exports=n("./node_modules/css-loader/lib/css-base.js")(!1)).push([e.i,'\n@font-face {font-family: "iconfont";\n  src: url('+i(n("./src/iconfont/iconfont.eot?t=1532577317622"))+"); /* IE9*/\n  src: url("+i(n("./src/iconfont/iconfont.eot?t=1532577317622"))+"#iefix) format('embedded-opentype'), \n  url('data:application/x-font-woff;charset=utf-8;base64,d09GRgABAAAAAAWsAAsAAAAACEAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAADMAAABCsP6z7U9TLzIAAAE8AAAARAAAAFZW7kkBY21hcAAAAYAAAABlAAABnNDUb+pnbHlmAAAB6AAAAb4AAAH8zHB5UWhlYWQAAAOoAAAALwAAADYSHhJAaGhlYQAAA9gAAAAcAAAAJAfeA4VobXR4AAAD9AAAABAAAAAQD+kAAGxvY2EAAAQEAAAACgAAAAoBdADAbWF4cAAABBAAAAAfAAAAIAETAF1uYW1lAAAEMAAAAUUAAAJtPlT+fXBvc3QAAAV4AAAAMQAAAEWNMHS9eJxjYGRgYOBikGPQYWB0cfMJYeBgYGGAAJAMY05meiJQDMoDyrGAaQ4gZoOIAgCKIwNPAHicY2Bk/sU4gYGVgYOpk+kMAwNDP4RmfM1gxMjBwMDEwMrMgBUEpLmmMDgwVDwXZW7438AQw9zA0AAUZgTJAQAlpQyEeJzFkMENwCAIRT9iG216dYsemw7UU0dwY8awgF6cwG+ewA8RA4ANACuXEgH6QDC96pL7jMP9iEfrpCdorJKltDZlJvKO5Fmwl2nHMtG60bNOv+9R2b7rQL8ouWN7ldIB/0i7D/MAAAB4nC2QTWsTYRDHn5ntvsVk0zz7vptN9i371MYuuO6mSE3iG11aPAQ8ebBUcmvRaw8VyaGCiAdPnkUEv0QPfpSKfglBVp+2DsN/GOYHM/MnIiF/fwjngkN0skFuk8dkQQhIY4g1DCBiZY5jMCPRtA1NYAmL5CTOhSnYsWRYxaTMbEmWuqDBAO5ExYTlyKAqZ7gDhRUAuL73lI76VPgILYcN3jb7+AXMYdLvzraavVtzowh15aRNqUvpB0USRQVxravBS9tSRbUlNV/FrmeeD2/iENou854864Q+ffGufBWMbBVgtQLdD7Vv857X4/nas3TqyusdxfE6SWrAya8bjt4Osp+Eh3Alh7woxCBb/M8ZbA/ANhPdkOJsCuWksMxRUuXANJDNhEuPzyOO9XKA97hbVbvw+xPtU55AnuPRYnGMR34KkPp4/6rio6oGqKtlc6FRqq0u5fOSY3i8WHKs+X6NA8f5Cdz/P8IhXpCMN3xxxmYwhf8XGNalvbIGAdjXBs+hzIR8rd5OUz/Eg7o+wDhg8c5dK0A5sfCelwqcJthfb8nOg+yUAxw73Xhoqy3qqJvumWi6ofvGGf8DZiFK0gAAeJxjYGRgYABi5b9OmvH8Nl8ZuFkYQOB6fboqgv7/kIWBWQLI5WBgAokCAAW1CQkAeJxjYGRgYG7438AQw8IAAkCSkQEVsAAARwoCbQQAAAAD6QAABAAAAAQAAAAAAAAAAHYAwAD+AAB4nGNgZGBgYGEIZGBlAAEmIOYCQgaG/2A+AwAREgFxAHicZY9NTsMwEIVf+gekEqqoYIfkBWIBKP0Rq25YVGr3XXTfpk6bKokjx63UA3AejsAJOALcgDvwSCebNpbH37x5Y08A3OAHHo7fLfeRPVwyO3INF7gXrlN/EG6QX4SbaONVuEX9TdjHM6bCbXRheYPXuGL2hHdhDx18CNdwjU/hOvUv4Qb5W7iJO/wKt9Dx6sI+5l5XuI1HL/bHVi+cXqnlQcWhySKTOb+CmV7vkoWt0uqca1vEJlODoF9JU51pW91T7NdD5yIVWZOqCas6SYzKrdnq0AUb5/JRrxeJHoQm5Vhj/rbGAo5xBYUlDowxQhhkiMro6DtVZvSvsUPCXntWPc3ndFsU1P9zhQEC9M9cU7qy0nk6T4E9XxtSdXQrbsuelDSRXs1JErJCXta2VELqATZlV44RelzRiT8oZ0j/AAlabsgAAAB4nGNgYoAALgbsgIWRiZGZkYWRlYGxgjMnPzk7Pi0zJ4e7IDW/ICcVzGZgAAB9owjqAAAA') format('woff'),\n  url("+i(n("./src/iconfont/iconfont.ttf?t=1532577317622"))+") format('truetype'), \n  url("+i(n("./src/iconfont/iconfont.svg?t=1532577317622"))+'#iconfont) format(\'svg\'); /* iOS 4.1- */\n}\n\n.iconfont {\n    display: inline-block;\n    text-align: center;\n  font-family:"iconfont" !important;\n  font-size:22px;\n  font-style:normal;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.icon-lock_fill:before { content: "\\E709"; }\n\n.icon-people_fill:before { content: "\\E715"; }\n\n',""])},"./node_modules/css-loader/index.js!./src/index.css":function(e,t,n){var i=n("./node_modules/css-loader/lib/url/escape.js");(e.exports=n("./node_modules/css-loader/lib/css-base.js")(!1)).push([e.i,"html,body {\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    min-height: 500px;\r\n    min-width: 770px;\r\n}\r\ndiv,p,header,img,input,form,i,button {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n#login>div {\r\n    max-width: 400px;\r\n    height: auto;\r\n    min-height: 300px;\r\n    padding: 30px;\r\n    margin: 50px auto auto;\r\n    border-radius: 2px;\r\n}\r\n.mainlogo {\r\n    width: 100%;\r\n    max-height: 110px;\r\n    margin: 0 auto 40px;\r\n    background-image: url("+i(n("./src/logo.svg"))+");\r\n    display: block;\r\n    background-repeat: no-repeat;\r\n    background-size: contain;\r\n    background-position: center;\r\n    max-width: 60%;\r\n    padding-bottom: 50%;\r\n}\r\n.input-group {\r\n    position: relative;\r\n    display: table;\r\n    border-collapse: separate;\r\n    width: 80%;\r\n    margin: 0 auto 16px;\r\n}\r\n.input-group-addon {\r\n    display: table-cell;\r\n    width: 1%;\r\n    white-space: nowrap;\r\n    vertical-align: middle;\r\n    font-weight: 400;\r\n    color: #333;\r\n    text-align: center;\r\n    background-color: #E5E7E7;\r\n    border: 1px solid #E5E7E7;\r\n    height: 28px;\r\n    padding: 9px 16px;\r\n    font-size: 17px;\r\n    line-height: 1.3333333;\r\n    border-radius: 2px;\r\n}\r\n.input-group-addon:first-child {\r\n    border-bottom-right-radius: 0;\r\n    border-top-right-radius: 0;\r\n    border-right: 0;\r\n}\r\n.input-group .form-control {\r\n    margin-left: -1px;\r\n    display: table-cell;\r\n    height: 28px;\r\n    padding: 9px 16px;\r\n    font-size: 17px;\r\n    line-height: 1.3333333;\r\n    border-radius: 2px;\r\n    position: relative;\r\n    z-index: 2;\r\n    float: left;\r\n    width: 100%;\r\n    margin-bottom: 0;\r\n    border: 2px solid #E5E7E7;\r\n}\r\n.btn {\r\n    padding: 9px 16px;\r\n    font-size: 17px;\r\n    line-height: 1.3333333;\r\n    border-radius: 0;\r\n    -webkit-box-shadow: inset 0 -4px 0 rgba(0,0,0,.1);\r\n    box-shadow: inset 0 -4px 0 rgba(0,0,0,.1);\r\n    height: 43px;\r\n    color: #fff;\r\n    background-color: #06a0e0;\r\n    font-weight: 400;\r\n    cursor: pointer;\r\n    border: 1px solid transparent;\r\n    margin: 0 40px;\r\n    text-align: center;\r\n    white-space: nowrap;\r\n    vertical-align: middle;\r\n    width: 89%;\r\n}\r\n#content,#login,#loading {\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n    position: absolute;\r\n    top: 0;\r\n}\r\n#content {\r\n    background-color: #0f0f0f;\r\n}\r\n#loading {\r\n    background-image: url("+i(n("./src/load.gif"))+");\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    background-color: #dee1e2;\r\n}\r\nheader {\r\n    text-indent: 30px;\r\n    z-index: 1;\r\n    position: absolute;\r\n    color: #9acfea;\r\n    background-color: #1b6d85;\r\n    width: 100%;\r\n    height: 40px;\r\n    line-height: 40px;\r\n}\r\n#map {\r\n    position: absolute;\r\n    height: 100%;\r\n    width: 100%;\r\n    left: -20%;\r\n}\r\n#pie {\r\n    padding-top: 40px;\r\n    height: 100%;\r\n    width: 50%;\r\n    position: absolute;\r\n    right: 0;\r\n    background: -webkit-linear-gradient(left, rgba(0,0,0,0.1) , rgba(0,0,0,1)); /* Safari 5.1 - 6.0 */\r\n    background: -o-linear-gradient(right, rgba(0,0,0,0.1) , rgba(0,0,0,1)); /* Opera 11.1 - 12.0 */\r\n    background: -moz-linear-gradient(right, rgba(0,0,0,0.1) , rgba(0,0,0,1)); /* Firefox 3.6 - 15 */\r\n    background: linear-gradient(to right, rgba(0,0,0,0.1) , rgba(0,0,0,1)); /* 标准的语法 */\r\n}\r\n\r\n#pie>div {\r\n    height: 40%;\r\n    width: 60%;\r\n    margin: 2% auto;\r\n}",""])},"./node_modules/css-loader/lib/css-base.js":function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var r=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(i),o=i.sources.map(function(e){return"/*# sourceURL="+i.sourceRoot+e+" */"});return[n].concat(o).concat([r]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var i={},r=0;r<this.length;r++){var o=this[r][0];"number"==typeof o&&(i[o]=!0)}for(r=0;r<e.length;r++){var a=e[r];"number"==typeof a[0]&&i[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},"./node_modules/css-loader/lib/url/escape.js":function(e,t){e.exports=function(e){return"string"!=typeof e?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),/["'() \t\n]/.test(e)?'"'+e.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':e)}},"./node_modules/echarts/lib/CoordinateSystem.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r={};function o(){this._coordinateSystems=[]}o.prototype={constructor:o,create:function(e,t){var n=[];i.each(r,function(i,r){var o=i.create(e,t);n=n.concat(o||[])}),this._coordinateSystems=n},update:function(e,t){i.each(this._coordinateSystems,function(n){n.update&&n.update(e,t)})},getCoordinateSystems:function(){return this._coordinateSystems.slice()}},o.register=function(e,t){r[e]=t},o.get=function(e){return r[e]};var a=o;e.exports=a},"./node_modules/echarts/lib/ExtensionAPI.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=["getDom","getZr","getWidth","getHeight","getDevicePixelRatio","dispatchAction","isDisposed","on","off","getDataURL","getConnectedDataURL","getModel","getOption","getViewOfComponentModel","getViewOfSeriesModel"];var o=function(e){i.each(r,function(t){this[t]=i.bind(e[t],e)},this)};e.exports=o},"./node_modules/echarts/lib/action/createDataSelectAction.js":function(e,t,n){var i=n("./node_modules/echarts/lib/echarts.js"),r=n("./node_modules/zrender/lib/core/util.js");e.exports=function(e,t){r.each(t,function(t){t.update="updateView",i.registerAction(t,function(n,i){var r={};return i.eachComponent({mainType:"series",subType:e,query:n},function(e){e[t.method]&&e[t.method](n.name,n.dataIndex);var i=e.getData();i.each(function(t){var n=i.getName(t);r[n]=e.isSelected(n)||!1})}),{name:n.name,selected:r}})})}},"./node_modules/echarts/lib/chart/helper/createListFromArray.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/data/List.js"),o=n("./node_modules/echarts/lib/data/helper/createDimensions.js"),a=n("./node_modules/echarts/lib/data/helper/sourceType.js").SOURCE_FORMAT_ORIGINAL,s=n("./node_modules/echarts/lib/data/helper/dimensionHelper.js").getDimensionTypeByAxis,l=n("./node_modules/echarts/lib/util/model.js").getDataItemValue,u=n("./node_modules/echarts/lib/CoordinateSystem.js"),c=n("./node_modules/echarts/lib/model/referHelper.js").getCoordSysDefineBySeries,d=n("./node_modules/echarts/lib/data/Source.js"),h=n("./node_modules/echarts/lib/data/helper/dataStackHelper.js").enableDataStack;var f=function(e,t,n){n=n||{},d.isInstance(e)||(e=d.seriesDataToSource(e));var f,p=t.get("coordinateSystem"),m=u.get(p),g=c(t);g&&(f=i.map(g.coordSysDims,function(e){var t={name:e},n=g.axisMap.get(e);if(n){var i=n.get("type");t.type=s(i)}return t})),f||(f=m&&(m.getDimensionsInfo?m.getDimensionsInfo():m.dimensions.slice())||["x","y"]);var v,y,_=o(e,{coordDimensions:f,generateCoord:n.generateCoord});g&&i.each(_,function(e,t){var n=e.coordDim,i=g.categoryAxisMap.get(n);i&&(null==v&&(v=t),e.ordinalMeta=i.getOrdinalMeta()),null!=e.otherDims.itemName&&(y=!0)}),y||null==v||(_[v].otherDims.itemName=0);var x=h(t,_),b=new r(_,t);b.setCalculationInfo(x);var w=null!=v&&function(e){if(e.sourceFormat===a){var t=function(e){for(var t=0;t<e.length&&null==e[t];)t++;return e[t]}(e.data||[]);return null!=t&&!i.isArray(l(t))}}(e)?function(e,t,n,i){return i===v?n:this.defaultDimValueGetter(e,t,n,i)}:null;return b.hasItemOption=!1,b.initData(e,null,w),b};e.exports=f},"./node_modules/echarts/lib/chart/helper/createListSimply.js":function(e,t,n){var i=n("./node_modules/echarts/lib/data/helper/createDimensions.js"),r=n("./node_modules/echarts/lib/data/List.js"),o=n("./node_modules/zrender/lib/core/util.js"),a=o.extend,s=o.isArray;e.exports=function(e,t,n){t=s(t)&&{coordDimensions:t}||a({},t);var o=e.getSource(),l=i(o,t),u=new r(l,e);return u.initData(o,n),u}},"./node_modules/echarts/lib/chart/helper/createRenderPlanner.js":function(e,t,n){var i=n("./node_modules/echarts/lib/util/model.js").makeInner;e.exports=function(){var e=i();return function(t){var n=e(t),i=t.pipelineContext,r=n.large,o=n.progressiveRender,a=n.large=i.large,s=n.progressiveRender=i.progressiveRender;return!!(r^a||o^s)&&"reset"}}},"./node_modules/echarts/lib/chart/pie.js":function(e,t,n){var i=n("./node_modules/echarts/lib/echarts.js"),r=n("./node_modules/zrender/lib/core/util.js");n("./node_modules/echarts/lib/chart/pie/PieSeries.js"),n("./node_modules/echarts/lib/chart/pie/PieView.js");var o=n("./node_modules/echarts/lib/action/createDataSelectAction.js"),a=n("./node_modules/echarts/lib/visual/dataColor.js"),s=n("./node_modules/echarts/lib/chart/pie/pieLayout.js"),l=n("./node_modules/echarts/lib/processor/dataFilter.js");o("pie",[{type:"pieToggleSelect",event:"pieselectchanged",method:"toggleSelected"},{type:"pieSelect",event:"pieselected",method:"select"},{type:"pieUnSelect",event:"pieunselected",method:"unSelect"}]),i.registerVisual(a("pie")),i.registerLayout(r.curry(s,"pie")),i.registerProcessor(l("pie"))},"./node_modules/echarts/lib/chart/pie/PieSeries.js":function(e,t,n){var i=n("./node_modules/echarts/lib/echarts.js"),r=n("./node_modules/echarts/lib/chart/helper/createListSimply.js"),o=n("./node_modules/zrender/lib/core/util.js"),a=n("./node_modules/echarts/lib/util/model.js"),s=n("./node_modules/echarts/lib/util/number.js").getPercentWithPrecision,l=n("./node_modules/echarts/lib/component/helper/selectableMixin.js"),u=n("./node_modules/echarts/lib/data/helper/dataProvider.js").retrieveRawAttr,c=i.extendSeriesModel({type:"series.pie",init:function(e){c.superApply(this,"init",arguments),this.legendDataProvider=function(){return this.getRawData()},this.updateSelectedMap(this._createSelectableList()),this._defaultLabelLine(e)},mergeOption:function(e){c.superCall(this,"mergeOption",e),this.updateSelectedMap(this._createSelectableList())},getInitialData:function(e,t){return r(this,["value"])},_createSelectableList:function(){for(var e=this.getRawData(),t=e.mapDimension("value"),n=[],i=0,r=e.count();i<r;i++)n.push({name:e.getName(i),value:e.get(t,i),selected:u(e,i,"selected")});return n},getDataParams:function(e){var t=this.getData(),n=c.superCall(this,"getDataParams",e),i=[];return t.each(t.mapDimension("value"),function(e){i.push(e)}),n.percent=s(i,e,t.hostModel.get("percentPrecision")),n.$vars.push("percent"),n},_defaultLabelLine:function(e){a.defaultEmphasis(e,"labelLine",["show"]);var t=e.labelLine,n=e.emphasis.labelLine;t.show=t.show&&e.label.show,n.show=n.show&&e.emphasis.label.show},defaultOption:{zlevel:0,z:2,legendHoverLink:!0,hoverAnimation:!0,center:["50%","50%"],radius:[0,"75%"],clockwise:!0,startAngle:90,minAngle:0,selectedOffset:10,hoverOffset:10,avoidLabelOverlap:!0,percentPrecision:2,stillShowZeroSum:!0,label:{rotate:!1,show:!0,position:"outer"},labelLine:{show:!0,length:15,length2:15,smooth:!1,lineStyle:{width:1,type:"solid"}},itemStyle:{borderWidth:1},animationType:"expansion",animationEasing:"cubicOut"}});o.mixin(c,l);var d=c;e.exports=d},"./node_modules/echarts/lib/chart/pie/PieView.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/util/graphic.js"),o=n("./node_modules/echarts/lib/view/Chart.js");function a(e,t,n,i){var r=t.getData(),o=this.dataIndex,a=r.getName(o),l=t.get("selectedOffset");i.dispatchAction({type:"pieToggleSelect",from:e,name:a,seriesId:t.id}),r.each(function(e){s(r.getItemGraphicEl(e),r.getItemLayout(e),t.isSelected(r.getName(e)),l,n)})}function s(e,t,n,i,r){var o=(t.startAngle+t.endAngle)/2,a=Math.cos(o),s=Math.sin(o),l=n?i:0,u=[a*l,s*l];r?e.animate().when(200,{position:u}).start("bounceOut"):e.attr("position",u)}function l(e,t){r.Group.call(this);var n=new r.Sector({z2:2}),i=new r.Polyline,o=new r.Text;function a(){i.ignore=i.hoverIgnore,o.ignore=o.hoverIgnore}function s(){i.ignore=i.normalIgnore,o.ignore=o.normalIgnore}this.add(n),this.add(i),this.add(o),this.updateData(e,t,!0),this.on("emphasis",a).on("normal",s).on("mouseover",a).on("mouseout",s)}var u=l.prototype;u.updateData=function(e,t,n){var o=this.childAt(0),a=e.hostModel,l=e.getItemModel(t),u=e.getItemLayout(t),c=i.extend({},u);(c.label=null,n)?(o.setShape(c),"scale"===a.getShallow("animationType")?(o.shape.r=u.r0,r.initProps(o,{shape:{r:u.r}},a,t)):(o.shape.endAngle=u.startAngle,r.updateProps(o,{shape:{endAngle:u.endAngle}},a,t))):r.updateProps(o,{shape:c},a,t);var d=e.getItemVisual(t,"color");o.useStyle(i.defaults({lineJoin:"bevel",fill:d},l.getModel("itemStyle").getItemStyle())),o.hoverStyle=l.getModel("emphasis.itemStyle").getItemStyle();var h=l.getShallow("cursor");function f(){o.stopAnimation(!0),o.animateTo({shape:{r:u.r+a.get("hoverOffset")}},300,"elasticOut")}function p(){o.stopAnimation(!0),o.animateTo({shape:{r:u.r}},300,"elasticOut")}h&&o.attr("cursor",h),s(this,e.getItemLayout(t),a.isSelected(null,t),a.get("selectedOffset"),a.get("animation")),o.off("mouseover").off("mouseout").off("emphasis").off("normal"),l.get("hoverAnimation")&&a.isAnimationEnabled()&&o.on("mouseover",f).on("mouseout",p).on("emphasis",f).on("normal",p),this._updateLabel(e,t),r.setHoverStyle(this)},u._updateLabel=function(e,t){var n=this.childAt(1),i=this.childAt(2),o=e.hostModel,a=e.getItemModel(t),s=e.getItemLayout(t).label,l=e.getItemVisual(t,"color");r.updateProps(n,{shape:{points:s.linePoints||[[s.x,s.y],[s.x,s.y],[s.x,s.y]]}},o,t),r.updateProps(i,{style:{x:s.x,y:s.y}},o,t),i.attr({rotation:s.rotation,origin:[s.x,s.y],z2:10});var u=a.getModel("label"),c=a.getModel("emphasis.label"),d=a.getModel("labelLine"),h=a.getModel("emphasis.labelLine");l=e.getItemVisual(t,"color");r.setLabelStyle(i.style,i.hoverStyle={},u,c,{labelFetcher:e.hostModel,labelDataIndex:t,defaultText:e.getName(t),autoColor:l,useInsideStyle:!!s.inside},{textAlign:s.textAlign,textVerticalAlign:s.verticalAlign,opacity:e.getItemVisual(t,"opacity")}),i.ignore=i.normalIgnore=!u.get("show"),i.hoverIgnore=!c.get("show"),n.ignore=n.normalIgnore=!d.get("show"),n.hoverIgnore=!h.get("show"),n.setStyle({stroke:l,opacity:e.getItemVisual(t,"opacity")}),n.setStyle(d.getModel("lineStyle").getLineStyle()),n.hoverStyle=h.getModel("lineStyle").getLineStyle();var f=d.get("smooth");f&&!0===f&&(f=.4),n.setShape({smooth:f})},i.inherits(l,r.Group);var c=o.extend({type:"pie",init:function(){var e=new r.Group;this._sectorGroup=e},render:function(e,t,n,r){if(!r||r.from!==this.uid){var o=e.getData(),s=this._data,u=this.group,c=t.get("animation"),d=!s,h=e.get("animationType"),f=i.curry(a,this.uid,e,c,n),p=e.get("selectedMode");if(o.diff(s).add(function(e){var t=new l(o,e);d&&"scale"!==h&&t.eachChild(function(e){e.stopAnimation(!0)}),p&&t.on("click",f),o.setItemGraphicEl(e,t),u.add(t)}).update(function(e,t){var n=s.getItemGraphicEl(t);n.updateData(o,e),n.off("click"),p&&n.on("click",f),u.add(n),o.setItemGraphicEl(e,n)}).remove(function(e){var t=s.getItemGraphicEl(e);u.remove(t)}).execute(),c&&d&&o.count()>0&&"scale"!==h){var m=o.getItemLayout(0),g=Math.max(n.getWidth(),n.getHeight())/2,v=i.bind(u.removeClipPath,u);u.setClipPath(this._createClipPath(m.cx,m.cy,g,m.startAngle,m.clockwise,v,e))}this._data=o}},dispose:function(){},_createClipPath:function(e,t,n,i,o,a,s){var l=new r.Sector({shape:{cx:e,cy:t,r0:0,r:n,startAngle:i,endAngle:i,clockwise:o}});return r.initProps(l,{shape:{endAngle:i+(o?1:-1)*Math.PI*2}},s,a),l},containPoint:function(e,t){var n=t.getData().getItemLayout(0);if(n){var i=e[0]-n.cx,r=e[1]-n.cy,o=Math.sqrt(i*i+r*r);return o<=n.r&&o>=n.r0}}});e.exports=c},"./node_modules/echarts/lib/chart/pie/labelLayout.js":function(e,t,n){var i=n("./node_modules/zrender/lib/contain/text.js");function r(e,t,n,i,r,o,a){function s(t,n,i,r){for(var o=t;o<n;o++)if(e[o].y+=i,o>t&&o+1<n&&e[o+1].y>e[o].y+e[o].height)return void l(o,i/2);l(n-1,i/2)}function l(t,n){for(var i=t;i>=0&&(e[i].y-=n,!(i>0&&e[i].y>e[i-1].y+e[i-1].height));i--);}function u(e,t,n,i,r,o){for(var a=t?Number.MAX_VALUE:0,s=0,l=e.length;s<l;s++)if("center"!==e[s].position){var u=Math.abs(e[s].y-i),c=e[s].len,d=e[s].len2,h=u<r+c?Math.sqrt((r+c+d)*(r+c+d)-u*u):Math.abs(e[s].x-n);t&&h>=a&&(h=a-10),!t&&h<=a&&(h=a+10),e[s].x=n+h*o,a=h}}e.sort(function(e,t){return e.y-t.y});for(var c,d=0,h=e.length,f=[],p=[],m=0;m<h;m++)(c=e[m].y-d)<0&&s(m,h,-c),d=e[m].y+e[m].height;a-d<0&&l(h-1,d-a);for(m=0;m<h;m++)e[m].y>=n?p.push(e[m]):f.push(e[m]);u(f,!1,t,n,i,r),u(p,!0,t,n,i,r)}e.exports=function(e,t,n,o){var a,s,l=e.getData(),u=[],c=!1;l.each(function(n){var r,o,d,h,f=l.getItemLayout(n),p=l.getItemModel(n),m=p.getModel("label"),g=m.get("position")||p.get("emphasis.label.position"),v=p.getModel("labelLine"),y=v.get("length"),_=v.get("length2"),x=(f.startAngle+f.endAngle)/2,b=Math.cos(x),w=Math.sin(x);a=f.cx,s=f.cy;var S="inside"===g||"inner"===g;if("center"===g)r=f.cx,o=f.cy,h="center";else{var A=(S?(f.r+f.r0)/2*b:f.r*b)+a,T=(S?(f.r+f.r0)/2*w:f.r*w)+s;if(r=A+3*b,o=T+3*w,!S){var C=A+b*(y+t-f.r),j=T+w*(y+t-f.r),M=C+(b<0?-1:1)*_;r=M+(b<0?-5:5),o=j,d=[[A,T],[C,j],[M,j]]}h=S?"center":b>0?"left":"right"}var k=m.getFont(),D=m.get("rotate")?b<0?-x+Math.PI:-x:0,I=e.getFormattedLabel(n,"normal")||l.getName(n),P=i.getBoundingRect(I,k,h,"top");c=!!D,f.label={x:r,y:o,position:g,height:P.height,len:y,len2:_,linePoints:d,textAlign:h,verticalAlign:"middle",rotation:D,inside:S},S||u.push(f.label)}),!c&&e.get("avoidLabelOverlap")&&function(e,t,n,i,o,a){for(var s=[],l=[],u=0;u<e.length;u++)e[u].x<t?s.push(e[u]):l.push(e[u]);for(r(l,t,n,i,1,0,a),r(s,t,n,i,-1,0,a),u=0;u<e.length;u++){var c=e[u].linePoints;if(c){var d=c[1][0]-c[2][0];e[u].x<t?c[2][0]=e[u].x+3:c[2][0]=e[u].x-3,c[1][1]=c[2][1]=e[u].y,c[1][0]=c[2][0]+d}}}(u,a,s,t,0,o)}},"./node_modules/echarts/lib/chart/pie/pieLayout.js":function(e,t,n){var i=n("./node_modules/echarts/lib/util/number.js"),r=i.parsePercent,o=i.linearMap,a=n("./node_modules/echarts/lib/chart/pie/labelLayout.js"),s=n("./node_modules/zrender/lib/core/util.js"),l=2*Math.PI,u=Math.PI/180;e.exports=function(e,t,n,i){t.eachSeriesByType(e,function(e){var t=e.getData(),i=t.mapDimension("value"),c=e.get("center"),d=e.get("radius");s.isArray(d)||(d=[0,d]),s.isArray(c)||(c=[c,c]);var h=n.getWidth(),f=n.getHeight(),p=Math.min(h,f),m=r(c[0],h),g=r(c[1],f),v=r(d[0],p/2),y=r(d[1],p/2),_=-e.get("startAngle")*u,x=e.get("minAngle")*u,b=0;t.each(i,function(e){!isNaN(e)&&b++});var w=t.getSum(i),S=Math.PI/(w||b)*2,A=e.get("clockwise"),T=e.get("roseType"),C=e.get("stillShowZeroSum"),j=t.getDataExtent(i);j[0]=0;var M=l,k=0,D=_,I=A?1:-1;if(t.each(i,function(e,n){var i;if(isNaN(e))t.setItemLayout(n,{angle:NaN,startAngle:NaN,endAngle:NaN,clockwise:A,cx:m,cy:g,r0:v,r:T?NaN:y});else{(i="area"!==T?0===w&&C?S:e*S:l/b)<x?(i=x,M-=x):k+=e;var r=D+I*i;t.setItemLayout(n,{angle:i,startAngle:D,endAngle:r,clockwise:A,cx:m,cy:g,r0:v,r:T?o(e,j,[v,y]):y}),D=r}}),M<l&&b)if(M<=.001){var P=l/b;t.each(i,function(e,n){if(!isNaN(e)){var i=t.getItemLayout(n);i.angle=P,i.startAngle=_+I*n*P,i.endAngle=_+I*(n+1)*P}})}else S=M/k,D=_,t.each(i,function(e,n){if(!isNaN(e)){var i=t.getItemLayout(n),r=i.angle===x?x:e*S;i.startAngle=D,i.endAngle=D+I*r,D+=I*r}});a(e,y,h,f)})}},"./node_modules/echarts/lib/component/axis/AxisBuilder.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=i.retrieve,o=i.defaults,a=i.extend,s=i.each,l=n("./node_modules/echarts/lib/util/format.js"),u=n("./node_modules/echarts/lib/util/graphic.js"),c=n("./node_modules/echarts/lib/model/Model.js"),d=n("./node_modules/echarts/lib/util/number.js"),h=d.isRadianAroundZero,f=d.remRadian,p=n("./node_modules/echarts/lib/util/symbol.js").createSymbol,m=n("./node_modules/zrender/lib/core/matrix.js"),g=n("./node_modules/zrender/lib/core/vector.js").applyTransform,v=Math.PI;function y(e){var t={componentType:e.mainType};return t[e.mainType+"Index"]=e.componentIndex,t}var _=function(e,t){this.opt=t,this.axisModel=e,o(t,{labelOffset:0,nameDirection:1,tickDirection:1,labelDirection:1,silent:!0}),this.group=new u.Group;var n=new u.Group({position:t.position.slice(),rotation:t.rotation});n.updateTransform(),this._transform=n.transform,this._dumbGroup=n};_.prototype={constructor:_,hasBuilder:function(e){return!!x[e]},add:function(e){x[e].call(this)},getGroup:function(){return this.group}};var x={axisLine:function(){var e=this.opt,t=this.axisModel;if(t.get("axisLine.show")){var n=this.axisModel.axis.getExtent(),i=this._transform,r=[n[0],0],o=[n[1],0];i&&(g(r,r,i),g(o,o,i));var l=a({lineCap:"round"},t.getModel("axisLine.lineStyle").getLineStyle());this.group.add(new u.Line(u.subPixelOptimizeLine({anid:"line",shape:{x1:r[0],y1:r[1],x2:o[0],y2:o[1]},style:l,strokeContainThreshold:e.strokeContainThreshold||5,silent:!0,z2:1})));var c=t.get("axisLine.symbol"),d=t.get("axisLine.symbolSize"),h=t.get("axisLine.symbolOffset")||0;if("number"==typeof h&&(h=[h,h]),null!=c){"string"==typeof c&&(c=[c,c]),"string"!=typeof d&&"number"!=typeof d||(d=[d,d]);var f=d[0],m=d[1];s([{rotate:e.rotation+Math.PI/2,offset:h[0],r:0},{rotate:e.rotation-Math.PI/2,offset:h[1],r:Math.sqrt((r[0]-o[0])*(r[0]-o[0])+(r[1]-o[1])*(r[1]-o[1]))}],function(t,n){if("none"!==c[n]&&null!=c[n]){var i=p(c[n],-f/2,-m/2,f,m,l.stroke,!0),o=t.r+t.offset,a=[r[0]+o*Math.cos(e.rotation),r[1]-o*Math.sin(e.rotation)];i.attr({rotation:t.rotate,position:a,silent:!0}),this.group.add(i)}},this)}}},axisTickLabel:function(){var e=this.axisModel,t=this.opt,n=function(e,t,n){var i=t.axis;if(!t.get("axisTick.show")||i.scale.isBlank())return;for(var r=t.getModel("axisTick"),a=r.getModel("lineStyle"),s=r.get("length"),l=i.getTicksCoords(),c=[],d=[],h=e._transform,f=[],p=0;p<l.length;p++){var m=l[p].coord;c[0]=m,c[1]=0,d[0]=m,d[1]=n.tickDirection*s,h&&(g(c,c,h),g(d,d,h));var v=new u.Line(u.subPixelOptimizeLine({anid:"tick_"+l[p].tickValue,shape:{x1:c[0],y1:c[1],x2:d[0],y2:d[1]},style:o(a.getLineStyle(),{stroke:t.get("axisLine.lineStyle.color")}),z2:2,silent:!0}));e.group.add(v),f.push(v)}return f}(this,e,t);!function(e,t,n){var i=e.get("axisLabel.showMinLabel"),r=e.get("axisLabel.showMaxLabel");t=t||[],n=n||[];var o=t[0],a=t[1],s=t[t.length-1],l=t[t.length-2],u=n[0],c=n[1],d=n[n.length-1],h=n[n.length-2];!1===i?(S(o),S(u)):A(o,a)&&(i?(S(a),S(c)):(S(o),S(u)));!1===r?(S(s),S(d)):A(l,s)&&(r?(S(l),S(h)):(S(s),S(d)))}(e,function(e,t,n){var i=t.axis;if(!r(n.axisLabelShow,t.get("axisLabel.show"))||i.scale.isBlank())return;var o=t.getModel("axisLabel"),a=o.get("margin"),l=i.getViewLabels(),d=(r(n.labelRotate,o.get("rotate"))||0)*v/180,h=b(n.rotation,d,n.labelDirection),f=t.getCategories(!0),p=[],m=w(t),g=t.get("triggerEvent");return s(l,function(r,s){var l=r.tickValue,d=r.formattedLabel,v=r.rawLabel,_=o;f&&f[l]&&f[l].textStyle&&(_=new c(f[l].textStyle,o,t.ecModel));var x=_.getTextColor()||t.get("axisLine.lineStyle.color"),b=[i.dataToCoord(l),n.labelOffset+n.labelDirection*a],w=new u.Text({anid:"label_"+l,position:b,rotation:h.rotation,silent:m,z2:10});u.setTextStyle(w.style,_,{text:d,textAlign:_.getShallow("align",!0)||h.textAlign,textVerticalAlign:_.getShallow("verticalAlign",!0)||_.getShallow("baseline",!0)||h.textVerticalAlign,textFill:"function"==typeof x?x("category"===i.type?v:"value"===i.type?l+"":l,s):x}),g&&(w.eventData=y(t),w.eventData.targetType="axisLabel",w.eventData.value=v),e._dumbGroup.add(w),w.updateTransform(),p.push(w),e.group.add(w),w.decomposeTransform()}),p}(this,e,t),n)},axisName:function(){var e=this.opt,t=this.axisModel,n=r(e.axisName,t.get("name"));if(n){var i,o,s=t.get("nameLocation"),c=e.nameDirection,d=t.getModel("nameTextStyle"),p=t.get("nameGap")||0,m=this.axisModel.axis.getExtent(),g=m[0]>m[1]?-1:1,_=["start"===s?m[0]-g*p:"end"===s?m[1]+g*p:(m[0]+m[1])/2,T(s)?e.labelOffset+c*p:0],x=t.get("nameRotate");null!=x&&(x=x*v/180),T(s)?i=b(e.rotation,null!=x?x:e.rotation,c):(i=function(e,t,n,i){var r,o,a=f(n-e.rotation),s=i[0]>i[1],l="start"===t&&!s||"start"!==t&&s;h(a-v/2)?(o=l?"bottom":"top",r="center"):h(a-1.5*v)?(o=l?"top":"bottom",r="center"):(o="middle",r=a<1.5*v&&a>v/2?l?"left":"right":l?"right":"left");return{rotation:a,textAlign:r,textVerticalAlign:o}}(e,s,x||0,m),null!=(o=e.axisNameAvailableWidth)&&(o=Math.abs(o/Math.sin(i.rotation)),!isFinite(o)&&(o=null)));var S=d.getFont(),A=t.get("nameTruncate",!0)||{},C=A.ellipsis,j=r(e.nameTruncateMaxWidth,A.maxWidth,o),M=null!=C&&null!=j?l.truncateText(n,j,S,C,{minChar:2,placeholder:A.placeholder}):n,k=t.get("tooltip",!0),D=t.mainType,I={componentType:D,name:n,$vars:["name"]};I[D+"Index"]=t.componentIndex;var P=new u.Text({anid:"name",__fullText:n,__truncatedText:M,position:_,rotation:i.rotation,silent:w(t),z2:1,tooltip:k&&k.show?a({content:n,formatter:function(){return n},formatterParams:I},k):null});u.setTextStyle(P.style,d,{text:M,textFont:S,textFill:d.getTextColor()||t.get("axisLine.lineStyle.color"),textAlign:i.textAlign,textVerticalAlign:i.textVerticalAlign}),t.get("triggerEvent")&&(P.eventData=y(t),P.eventData.targetType="axisName",P.eventData.name=n),this._dumbGroup.add(P),P.updateTransform(),this.group.add(P),P.decomposeTransform()}}},b=_.innerTextLayout=function(e,t,n){var i,r,o=f(t-e);return h(o)?(r=n>0?"top":"bottom",i="center"):h(o-v)?(r=n>0?"bottom":"top",i="center"):(r="middle",i=o>0&&o<v?n>0?"right":"left":n>0?"left":"right"),{rotation:o,textAlign:i,textVerticalAlign:r}};function w(e){var t=e.get("tooltip");return e.get("silent")||!(e.get("triggerEvent")||t&&t.show)}function S(e){e&&(e.ignore=!0)}function A(e,t,n){var i=e&&e.getBoundingRect().clone(),r=t&&t.getBoundingRect().clone();if(i&&r){var o=m.identity([]);return m.rotate(o,o,-e.rotation),i.applyTransform(m.mul([],o,e.getLocalTransform())),r.applyTransform(m.mul([],o,t.getLocalTransform())),i.intersect(r)}}function T(e){return"middle"===e||"center"===e}var C=_;e.exports=C},"./node_modules/echarts/lib/component/axis/AxisView.js":function(e,t,n){n("./node_modules/echarts/lib/config.js").__DEV__;var i=n("./node_modules/echarts/lib/echarts.js"),r=n("./node_modules/echarts/lib/component/axisPointer/modelHelper.js"),o=i.extendComponentView({type:"axis",_axisPointer:null,axisPointerClass:null,render:function(e,t,n,i){this.axisPointerClass&&r.fixValue(e),o.superApply(this,"render",arguments),a(this,e,t,n,i,!0)},updateAxisPointer:function(e,t,n,i,r){a(this,e,t,n,i,!1)},remove:function(e,t){var n=this._axisPointer;n&&n.remove(t),o.superApply(this,"remove",arguments)},dispose:function(e,t){s(this,t),o.superApply(this,"dispose",arguments)}});function a(e,t,n,i,a,l){var u=o.getAxisPointerClass(e.axisPointerClass);if(u){var c=r.getAxisPointerModel(t);c?(e._axisPointer||(e._axisPointer=new u)).render(t,c,i,l):s(e,i)}}function s(e,t,n){var i=e._axisPointer;i&&i.dispose(t,n),e._axisPointer=null}var l=[];o.registerAxisPointerClass=function(e,t){l[e]=t},o.getAxisPointerClass=function(e){return e&&l[e]};var u=o;e.exports=u},"./node_modules/echarts/lib/component/axisPointer.js":function(e,t,n){var i=n("./node_modules/echarts/lib/echarts.js"),r=n("./node_modules/zrender/lib/core/util.js"),o=n("./node_modules/echarts/lib/component/axisPointer/modelHelper.js"),a=n("./node_modules/echarts/lib/component/axisPointer/axisTrigger.js");n("./node_modules/echarts/lib/component/axisPointer/AxisPointerModel.js"),n("./node_modules/echarts/lib/component/axisPointer/AxisPointerView.js"),n("./node_modules/echarts/lib/component/axisPointer/CartesianAxisPointer.js"),i.registerPreprocessor(function(e){if(e){(!e.axisPointer||0===e.axisPointer.length)&&(e.axisPointer={});var t=e.axisPointer.link;t&&!r.isArray(t)&&(e.axisPointer.link=[t])}}),i.registerProcessor(i.PRIORITY.PROCESSOR.STATISTIC,function(e,t){e.getComponent("axisPointer").coordSysAxesInfo=o.collect(e,t)}),i.registerAction({type:"updateAxisPointer",event:"updateAxisPointer",update:":updateAxisPointer"},a)},"./node_modules/echarts/lib/component/axisPointer/AxisPointerModel.js":function(e,t,n){var i=n("./node_modules/echarts/lib/echarts.js").extendComponentModel({type:"axisPointer",coordSysAxesInfo:null,defaultOption:{show:"auto",triggerOn:null,zlevel:0,z:50,type:"line",snap:!1,triggerTooltip:!0,value:null,status:null,link:[],animation:null,animationDurationUpdate:200,lineStyle:{color:"#aaa",width:1,type:"solid"},shadowStyle:{color:"rgba(150,150,150,0.3)"},label:{show:!0,formatter:null,precision:"auto",margin:3,color:"#fff",padding:[5,7,5,7],backgroundColor:"auto",borderColor:null,borderWidth:0,shadowBlur:3,shadowColor:"#aaa"},handle:{show:!1,icon:"M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7v-1.2h6.6z M13.3,22H6.7v-1.2h6.6z M13.3,19.6H6.7v-1.2h6.6z",size:45,margin:50,color:"#333",shadowBlur:3,shadowColor:"#aaa",shadowOffsetX:0,shadowOffsetY:2,throttle:40}}});e.exports=i},"./node_modules/echarts/lib/component/axisPointer/AxisPointerView.js":function(e,t,n){var i=n("./node_modules/echarts/lib/echarts.js"),r=n("./node_modules/echarts/lib/component/axisPointer/globalListener.js"),o=i.extendComponentView({type:"axisPointer",render:function(e,t,n){var i=t.getComponent("tooltip"),o=e.get("triggerOn")||i&&i.get("triggerOn")||"mousemove|click";r.register("axisPointer",n,function(e,t,n){"none"!==o&&("leave"===e||o.indexOf(e)>=0)&&n({type:"updateAxisPointer",currTrigger:e,x:t&&t.offsetX,y:t&&t.offsetY})})},remove:function(e,t){r.unregister(t.getZr(),"axisPointer"),o.superApply(this._model,"remove",arguments)},dispose:function(e,t){r.unregister("axisPointer",t),o.superApply(this._model,"dispose",arguments)}}),a=o;e.exports=a},"./node_modules/echarts/lib/component/axisPointer/BaseAxisPointer.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/util/clazz.js"),o=n("./node_modules/echarts/lib/util/graphic.js"),a=n("./node_modules/echarts/lib/component/axisPointer/modelHelper.js"),s=n("./node_modules/zrender/lib/core/event.js"),l=n("./node_modules/echarts/lib/util/throttle.js"),u=(0,n("./node_modules/echarts/lib/util/model.js").makeInner)(),c=i.clone,d=i.bind;function h(){}function f(e,t,n,r){(function e(t,n){if(i.isObject(t)&&i.isObject(n)){var r=!0;return i.each(n,function(n,i){r=r&&e(t[i],n)}),!!r}return t===n})(u(n).lastProp,r)||(u(n).lastProp=r,t?o.updateProps(n,r,e):(n.stopAnimation(),n.attr(r)))}function p(e,t){e[t.get("label.show")?"show":"hide"]()}function m(e){return{position:e.position.slice(),rotation:e.rotation||0}}function g(e,t,n){var i=t.get("z"),r=t.get("zlevel");e&&e.traverse(function(e){"group"!==e.type&&(null!=i&&(e.z=i),null!=r&&(e.zlevel=r),e.silent=n)})}h.prototype={_group:null,_lastGraphicKey:null,_handle:null,_dragging:!1,_lastValue:null,_lastStatus:null,_payloadInfo:null,animationThreshold:15,render:function(e,t,n,r){var a=t.get("value"),s=t.get("status");if(this._axisModel=e,this._axisPointerModel=t,this._api=n,r||this._lastValue!==a||this._lastStatus!==s){this._lastValue=a,this._lastStatus=s;var l=this._group,u=this._handle;if(!s||"hide"===s)return l&&l.hide(),void(u&&u.hide());l&&l.show(),u&&u.show();var c={};this.makeElOption(c,a,e,t,n);var d=c.graphicKey;d!==this._lastGraphicKey&&this.clear(n),this._lastGraphicKey=d;var h=this._moveAnimation=this.determineAnimation(e,t);if(l){var p=i.curry(f,t,h);this.updatePointerEl(l,c,p,t),this.updateLabelEl(l,c,p,t)}else l=this._group=new o.Group,this.createPointerEl(l,c,e,t),this.createLabelEl(l,c,e,t),n.getZr().add(l);g(l,t,!0),this._renderHandle(a)}},remove:function(e){this.clear(e)},dispose:function(e){this.clear(e)},determineAnimation:function(e,t){var n=t.get("animation"),i=e.axis,r="category"===i.type,o=t.get("snap");if(!o&&!r)return!1;if("auto"===n||null==n){var s=this.animationThreshold;if(r&&i.getBandWidth()>s)return!0;if(o){var l=a.getAxisInfo(e).seriesDataCount,u=i.getExtent();return Math.abs(u[0]-u[1])/l>s}return!1}return!0===n},makeElOption:function(e,t,n,i,r){},createPointerEl:function(e,t,n,i){var r=t.pointer;if(r){var a=u(e).pointerEl=new o[r.type](c(t.pointer));e.add(a)}},createLabelEl:function(e,t,n,i){if(t.label){var r=u(e).labelEl=new o.Rect(c(t.label));e.add(r),p(r,i)}},updatePointerEl:function(e,t,n){var i=u(e).pointerEl;i&&(i.setStyle(t.pointer.style),n(i,{shape:t.pointer.shape}))},updateLabelEl:function(e,t,n,i){var r=u(e).labelEl;r&&(r.setStyle(t.label.style),n(r,{shape:t.label.shape,position:t.label.position}),p(r,i))},_renderHandle:function(e){if(!this._dragging&&this.updateHandleTransform){var t,n=this._axisPointerModel,r=this._api.getZr(),a=this._handle,u=n.getModel("handle"),c=n.get("status");if(!u.get("show")||!c||"hide"===c)return a&&r.remove(a),void(this._handle=null);this._handle||(t=!0,a=this._handle=o.createIcon(u.get("icon"),{cursor:"move",draggable:!0,onmousemove:function(e){s.stop(e.event)},onmousedown:d(this._onHandleDragMove,this,0,0),drift:d(this._onHandleDragMove,this),ondragend:d(this._onHandleDragEnd,this)}),r.add(a)),g(a,n,!1);a.setStyle(u.getItemStyle(null,["color","borderColor","borderWidth","opacity","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY"]));var h=u.get("size");i.isArray(h)||(h=[h,h]),a.attr("scale",[h[0]/2,h[1]/2]),l.createOrUpdate(this,"_doDispatchAxisPointer",u.get("throttle")||0,"fixRate"),this._moveHandleToValue(e,t)}},_moveHandleToValue:function(e,t){f(this._axisPointerModel,!t&&this._moveAnimation,this._handle,m(this.getHandleTransform(e,this._axisModel,this._axisPointerModel)))},_onHandleDragMove:function(e,t){var n=this._handle;if(n){this._dragging=!0;var i=this.updateHandleTransform(m(n),[e,t],this._axisModel,this._axisPointerModel);this._payloadInfo=i,n.stopAnimation(),n.attr(m(i)),u(n).lastProp=null,this._doDispatchAxisPointer()}},_doDispatchAxisPointer:function(){if(this._handle){var e=this._payloadInfo,t=this._axisModel;this._api.dispatchAction({type:"updateAxisPointer",x:e.cursorPoint[0],y:e.cursorPoint[1],tooltipOption:e.tooltipOption,axesInfo:[{axisDim:t.axis.dim,axisIndex:t.componentIndex}]})}},_onHandleDragEnd:function(e){if(this._dragging=!1,this._handle){var t=this._axisPointerModel.get("value");this._moveHandleToValue(t),this._api.dispatchAction({type:"hideTip"})}},getHandleTransform:null,updateHandleTransform:null,clear:function(e){this._lastValue=null,this._lastStatus=null;var t=e.getZr(),n=this._group,i=this._handle;t&&n&&(this._lastGraphicKey=null,n&&t.remove(n),i&&t.remove(i),this._group=null,this._handle=null,this._payloadInfo=null)},doClear:function(){},buildLabel:function(e,t,n){return{x:e[n=n||0],y:e[1-n],width:t[n],height:t[1-n]}}},h.prototype.constructor=h,r.enableClassExtend(h);var v=h;e.exports=v},"./node_modules/echarts/lib/component/axisPointer/CartesianAxisPointer.js":function(e,t,n){var i=n("./node_modules/echarts/lib/util/graphic.js"),r=n("./node_modules/echarts/lib/component/axisPointer/BaseAxisPointer.js"),o=n("./node_modules/echarts/lib/component/axisPointer/viewHelper.js"),a=n("./node_modules/echarts/lib/coord/cartesian/cartesianAxisHelper.js"),s=n("./node_modules/echarts/lib/component/axis/AxisView.js"),l=r.extend({makeElOption:function(e,t,n,i,r){var s=n.axis,l=s.grid,d=i.get("type"),h=u(l,s).getOtherAxis(s).getGlobalExtent(),f=s.toGlobalCoord(s.dataToCoord(t,!0));if(d&&"none"!==d){var p=o.buildElStyle(i),m=c[d](s,f,h,p);m.style=p,e.graphicKey=m.type,e.pointer=m}var g=a.layout(l.model,n);o.buildCartesianSingleLabelElOption(t,e,g,n,i,r)},getHandleTransform:function(e,t,n){var i=a.layout(t.axis.grid.model,t,{labelInside:!1});return i.labelMargin=n.get("handle.margin"),{position:o.getTransformedPosition(t.axis,e,i),rotation:i.rotation+(i.labelDirection<0?Math.PI:0)}},updateHandleTransform:function(e,t,n,i){var r=n.axis,o=r.grid,a=r.getGlobalExtent(!0),s=u(o,r).getOtherAxis(r).getGlobalExtent(),l="x"===r.dim?0:1,c=e.position;c[l]+=t[l],c[l]=Math.min(a[1],c[l]),c[l]=Math.max(a[0],c[l]);var d=(s[1]+s[0])/2,h=[d,d];h[l]=c[l];return{position:c,rotation:e.rotation,cursorPoint:h,tooltipOption:[{verticalAlign:"middle"},{align:"center"}][l]}}});function u(e,t){var n={};return n[t.dim+"AxisIndex"]=t.index,e.getCartesian(n)}var c={line:function(e,t,n,r){var a=o.makeLineShape([t,n[0]],[t,n[1]],d(e));return i.subPixelOptimizeLine({shape:a,style:r}),{type:"Line",shape:a}},shadow:function(e,t,n,i){var r=Math.max(1,e.getBandWidth()),a=n[1]-n[0];return{type:"Rect",shape:o.makeRectShape([t-r/2,n[0]],[r,a],d(e))}}};function d(e){return"x"===e.dim?0:1}s.registerAxisPointerClass("CartesianAxisPointer",l);var h=l;e.exports=h},"./node_modules/echarts/lib/component/axisPointer/axisTrigger.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/util/model.js").makeInner,o=n("./node_modules/echarts/lib/component/axisPointer/modelHelper.js"),a=n("./node_modules/echarts/lib/component/axisPointer/findPointFromSeries.js"),s=i.each,l=i.curry,u=r();function c(e,t,n,r,o){var a=e.axis;if(!a.scale.isBlank()&&a.containData(t))if(e.involveSeries){var l=function(e,t){var n=t.axis,i=n.dim,r=e,o=[],a=Number.MAX_VALUE,l=-1;return s(t.seriesModels,function(t,u){var c,d,h=t.getData().mapDimension(i,!0);if(t.getAxisTooltipData){var f=t.getAxisTooltipData(h,e,n);d=f.dataIndices,c=f.nestestValue}else{if(!(d=t.getData().indicesOfNearest(h[0],e,"category"===n.type?.5:null)).length)return;c=t.getData().get(h[0],d[0])}if(null!=c&&isFinite(c)){var p=e-c,m=Math.abs(p);m<=a&&((m<a||p>=0&&l<0)&&(a=m,l=p,r=c,o.length=0),s(d,function(e){o.push({seriesIndex:t.seriesIndex,dataIndexInside:e,dataIndex:t.getData().getRawIndex(e)})}))}}),{payloadBatch:o,snapToValue:r}}(t,e),u=l.payloadBatch,c=l.snapToValue;u[0]&&null==o.seriesIndex&&i.extend(o,u[0]),!r&&e.snap&&a.containData(c)&&null!=c&&(t=c),n.showPointer(e,t,u,o),n.showTooltip(e,l,c)}else n.showPointer(e,t)}function d(e,t,n,i){e[t.key]={value:n,payloadBatch:i}}function h(e,t,n,i){var r=n.payloadBatch,a=t.axis,s=a.model,l=t.axisPointerModel;if(t.triggerTooltip&&r.length){var u=t.coordSys.model,c=o.makeKey(u),d=e.map[c];d||(d=e.map[c]={coordSysId:u.id,coordSysIndex:u.componentIndex,coordSysType:u.type,coordSysMainType:u.mainType,dataByAxis:[]},e.list.push(d)),d.dataByAxis.push({axisDim:a.dim,axisIndex:s.componentIndex,axisType:s.type,axisId:s.id,value:i,valueLabelOpt:{precision:l.get("label.precision"),formatter:l.get("label.formatter")},seriesDataIndices:r.slice()})}}function f(e){var t=e.axis.model,n={},i=n.axisDim=e.axis.dim;return n.axisIndex=n[i+"AxisIndex"]=t.componentIndex,n.axisName=n[i+"AxisName"]=t.name,n.axisId=n[i+"AxisId"]=t.id,n}function p(e){return!e||null==e[0]||isNaN(e[0])||null==e[1]||isNaN(e[1])}e.exports=function(e,t,n){var r=e.currTrigger,o=[e.x,e.y],m=e,g=e.dispatchAction||i.bind(n.dispatchAction,n),v=t.getComponent("axisPointer").coordSysAxesInfo;if(v){p(o)&&(o=a({seriesIndex:m.seriesIndex,dataIndex:m.dataIndex},t).point);var y=p(o),_=m.axesInfo,x=v.axesInfo,b="leave"===r||p(o),w={},S={},A={list:[],map:{}},T={showPointer:l(d,S),showTooltip:l(h,A)};s(v.coordSysMap,function(e,t){var n=y||e.containPoint(o);s(v.coordSysAxesInfo[t],function(e,t){var i=e.axis,r=function(e,t){for(var n=0;n<(e||[]).length;n++){var i=e[n];if(t.axis.dim===i.axisDim&&t.axis.model.componentIndex===i.axisIndex)return i}}(_,e);if(!b&&n&&(!_||r)){var a=r&&r.value;null!=a||y||(a=i.pointToData(o)),null!=a&&c(e,a,T,!1,w)}})});var C={};return s(x,function(e,t){var n=e.linkGroup;n&&!S[t]&&s(n.axesInfo,function(t,i){var r=S[i];if(t!==e&&r){var o=r.value;n.mapper&&(o=e.axis.scale.parse(n.mapper(o,f(t),f(e)))),C[e.key]=o}})}),s(C,function(e,t){c(x[t],e,T,!0,w)}),function(e,t,n){var i=n.axesInfo=[];s(t,function(t,n){var r=t.axisPointerModel.option,o=e[n];o?(!t.useHandle&&(r.status="show"),r.value=o.value,r.seriesDataIndices=(o.payloadBatch||[]).slice()):!t.useHandle&&(r.status="hide"),"show"===r.status&&i.push({axisDim:t.axis.dim,axisIndex:t.axis.model.componentIndex,value:r.value})})}(S,x,w),function(e,t,n,i){if(!p(t)&&e.list.length){var r=((e.list[0].dataByAxis[0]||{}).seriesDataIndices||[])[0]||{};i({type:"showTip",escapeConnect:!0,x:t[0],y:t[1],tooltipOption:n.tooltipOption,position:n.position,dataIndexInside:r.dataIndexInside,dataIndex:r.dataIndex,seriesIndex:r.seriesIndex,dataByCoordSys:e.list})}else i({type:"hideTip"})}(A,o,e,g),function(e,t,n){var r=n.getZr(),o=u(r).axisPointerLastHighlights||{},a=u(r).axisPointerLastHighlights={};s(e,function(e,t){var n=e.axisPointerModel.option;"show"===n.status&&s(n.seriesDataIndices,function(e){var t=e.seriesIndex+" | "+e.dataIndex;a[t]=e})});var l=[],c=[];i.each(o,function(e,t){!a[t]&&c.push(e)}),i.each(a,function(e,t){!o[t]&&l.push(e)}),c.length&&n.dispatchAction({type:"downplay",escapeConnect:!0,batch:c}),l.length&&n.dispatchAction({type:"highlight",escapeConnect:!0,batch:l})}(x,0,n),w}}},"./node_modules/echarts/lib/component/axisPointer/findPointFromSeries.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/util/model.js");e.exports=function(e,t){var n,o=[],a=e.seriesIndex;if(null==a||!(n=t.getSeriesByIndex(a)))return{point:[]};var s=n.getData(),l=r.queryDataIndex(s,e);if(null==l||l<0||i.isArray(l))return{point:[]};var u=s.getItemGraphicEl(l),c=n.coordinateSystem;if(n.getTooltipPosition)o=n.getTooltipPosition(l)||[];else if(c&&c.dataToPoint)o=c.dataToPoint(s.getValues(i.map(c.dimensions,function(e){return s.mapDimension(e)}),l,!0))||[];else if(u){var d=u.getBoundingRect().clone();d.applyTransform(u.transform),o=[d.x+d.width/2,d.y+d.height/2]}return{point:o,el:u}}},"./node_modules/echarts/lib/component/axisPointer/globalListener.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/zrender/lib/core/env.js"),o=(0,n("./node_modules/echarts/lib/util/model.js").makeInner)(),a=i.each;function s(e,t,n){e.handler("leave",null,n)}function l(e,t,n,i){t.handler(e,n,i)}t.register=function(e,t,n){if(!r.node){var u=t.getZr();o(u).records||(o(u).records={}),function(e,t){function n(n,i){e.on(n,function(n){var r=function(e){var t={showTip:[],hideTip:[]},n=function(i){var r=t[i.type];r?r.push(i):(i.dispatchAction=n,e.dispatchAction(i))};return{dispatchAction:n,pendings:t}}(t);a(o(e).records,function(e){e&&i(e,n,r.dispatchAction)}),function(e,t){var n,i=e.showTip.length,r=e.hideTip.length;i?n=e.showTip[i-1]:r&&(n=e.hideTip[r-1]),n&&(n.dispatchAction=null,t.dispatchAction(n))}(r.pendings,t)})}o(e).initialized||(o(e).initialized=!0,n("click",i.curry(l,"click")),n("mousemove",i.curry(l,"mousemove")),n("globalout",s))}(u,t),(o(u).records[e]||(o(u).records[e]={})).handler=n}},t.unregister=function(e,t){if(!r.node){var n=t.getZr();(o(n).records||{})[e]&&(o(n).records[e]=null)}}},"./node_modules/echarts/lib/component/axisPointer/modelHelper.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/model/Model.js"),o=i.each,a=i.curry;function s(e,t){return"all"===e||i.isArray(e)&&i.indexOf(e,t)>=0||e===t}function l(e){var t=(e.ecModel.getComponent("axisPointer")||{}).coordSysAxesInfo;return t&&t.axesInfo[c(e)]}function u(e){return!!e.get("handle.show")}function c(e){return e.type+"||"+e.id}t.collect=function(e,t){var n={axesInfo:{},seriesInvolved:!1,coordSysAxesInfo:{},coordSysMap:{}};return function(e,t,n){var l=t.getComponent("tooltip"),d=t.getComponent("axisPointer"),h=d.get("link",!0)||[],f=[];o(n.getCoordinateSystems(),function(n){if(n.axisPointerEnabled){var p=c(n.model),m=e.coordSysAxesInfo[p]={};e.coordSysMap[p]=n;var g=n.model,v=g.getModel("tooltip",l);if(o(n.getAxes(),a(b,!1,null)),n.getTooltipAxes&&l&&v.get("show")){var y="axis"===v.get("trigger"),_="cross"===v.get("axisPointer.type"),x=n.getTooltipAxes(v.get("axisPointer.axis"));(y||_)&&o(x.baseAxes,a(b,!_||"cross",y)),_&&o(x.otherAxes,a(b,"cross",!1))}}function b(a,l,p){var g=p.model.getModel("axisPointer",d),y=g.get("show");if(y&&("auto"!==y||a||u(g))){null==l&&(l=g.get("triggerTooltip"));var _=(g=a?function(e,t,n,a,s,l){var u=t.getModel("axisPointer"),c={};o(["type","snap","lineStyle","shadowStyle","label","animation","animationDurationUpdate","animationEasingUpdate","z"],function(e){c[e]=i.clone(u.get(e))}),c.snap="category"!==e.type&&!!l,"cross"===u.get("type")&&(c.type="line");var d=c.label||(c.label={});if(null==d.show&&(d.show=!1),"cross"===s){var h=u.get("label.show");if(d.show=null==h||h,!l){var f=c.lineStyle=u.get("crossStyle");f&&i.defaults(d,f.textStyle)}}return e.model.getModel("axisPointer",new r(c,n,a))}(p,v,d,t,a,l):g).get("snap"),x=c(p.model),b=l||_||"category"===p.type,w=e.axesInfo[x]={key:x,axis:p,coordSys:n,axisPointerModel:g,triggerTooltip:l,involveSeries:b,snap:_,useHandle:u(g),seriesModels:[]};m[x]=w,e.seriesInvolved|=b;var S=function(e,t){for(var n=t.model,i=t.dim,r=0;r<e.length;r++){var o=e[r]||{};if(s(o[i+"AxisId"],n.id)||s(o[i+"AxisIndex"],n.componentIndex)||s(o[i+"AxisName"],n.name))return r}}(h,p);if(null!=S){var A=f[S]||(f[S]={axesInfo:{}});A.axesInfo[x]=w,A.mapper=h[S].mapper,w.linkGroup=A}}}})}(n,e,t),n.seriesInvolved&&function(e,t){t.eachSeries(function(t){var n=t.coordinateSystem,i=t.get("tooltip.trigger",!0),r=t.get("tooltip.show",!0);n&&"none"!==i&&!1!==i&&"item"!==i&&!1!==r&&!1!==t.get("axisPointer.show",!0)&&o(e.coordSysAxesInfo[c(n.model)],function(e){var i=e.axis;n.getAxis(i.dim)===i&&(e.seriesModels.push(t),null==e.seriesDataCount&&(e.seriesDataCount=0),e.seriesDataCount+=t.getData().count())})},this)}(n,e),n},t.fixValue=function(e){var t=l(e);if(t){var n=t.axisPointerModel,i=t.axis.scale,r=n.option,o=n.get("status"),a=n.get("value");null!=a&&(a=i.parse(a));var s=u(n);null==o&&(r.status=s?"show":"hide");var c=i.getExtent().slice();c[0]>c[1]&&c.reverse(),(null==a||a>c[1])&&(a=c[1]),a<c[0]&&(a=c[0]),r.value=a,s&&(r.status=t.axis.scale.isBlank()?"hide":"show")}},t.getAxisInfo=l,t.getAxisPointerModel=function(e){var t=l(e);return t&&t.axisPointerModel},t.makeKey=c},"./node_modules/echarts/lib/component/axisPointer/viewHelper.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/util/graphic.js"),o=n("./node_modules/zrender/lib/contain/text.js"),a=n("./node_modules/echarts/lib/util/format.js"),s=n("./node_modules/zrender/lib/core/matrix.js"),l=n("./node_modules/echarts/lib/coord/axisHelper.js"),u=n("./node_modules/echarts/lib/component/axis/AxisBuilder.js");function c(e,t,n,i,r){var s=d(n.get("value"),t.axis,t.ecModel,n.get("seriesDataIndices"),{precision:n.get("label.precision"),formatter:n.get("label.formatter")}),l=n.getModel("label"),u=a.normalizeCssArray(l.get("padding")||0),c=l.getFont(),h=o.getBoundingRect(s,c),f=r.position,p=h.width+u[1]+u[3],m=h.height+u[0]+u[2],g=r.align;"right"===g&&(f[0]-=p),"center"===g&&(f[0]-=p/2);var v=r.verticalAlign;"bottom"===v&&(f[1]-=m),"middle"===v&&(f[1]-=m/2),function(e,t,n,i){var r=i.getWidth(),o=i.getHeight();e[0]=Math.min(e[0]+t,r)-t,e[1]=Math.min(e[1]+n,o)-n,e[0]=Math.max(e[0],0),e[1]=Math.max(e[1],0)}(f,p,m,i);var y=l.get("backgroundColor");y&&"auto"!==y||(y=t.get("axisLine.lineStyle.color")),e.label={shape:{x:0,y:0,width:p,height:m,r:l.get("borderRadius")},position:f.slice(),style:{text:s,textFont:c,textFill:l.getTextColor(),textPosition:"inside",fill:y,stroke:l.get("borderColor")||"transparent",lineWidth:l.get("borderWidth")||0,shadowBlur:l.get("shadowBlur"),shadowColor:l.get("shadowColor"),shadowOffsetX:l.get("shadowOffsetX"),shadowOffsetY:l.get("shadowOffsetY")},z2:10}}function d(e,t,n,r,o){e=t.scale.parse(e);var a=t.scale.getLabel(e,{precision:o.precision}),s=o.formatter;if(s){var u={value:l.getAxisRawValue(t,e),seriesData:[]};i.each(r,function(e){var t=n.getSeriesByIndex(e.seriesIndex),i=e.dataIndexInside,r=t&&t.getDataParams(i);r&&u.seriesData.push(r)}),i.isString(s)?a=s.replace("{value}",a):i.isFunction(s)&&(a=s(u))}return a}function h(e,t,n){var i=s.create();return s.rotate(i,i,n.rotation),s.translate(i,i,n.position),r.applyTransform([e.dataToCoord(t),(n.labelOffset||0)+(n.labelDirection||1)*(n.labelMargin||0)],i)}t.buildElStyle=function(e){var t,n=e.get("type"),i=e.getModel(n+"Style");return"line"===n?(t=i.getLineStyle()).fill=null:"shadow"===n&&((t=i.getAreaStyle()).stroke=null),t},t.buildLabelElOption=c,t.getValueLabel=d,t.getTransformedPosition=h,t.buildCartesianSingleLabelElOption=function(e,t,n,i,r,o){var a=u.innerTextLayout(n.rotation,0,n.labelDirection);n.labelMargin=r.get("label.margin"),c(t,i,r,o,{position:h(i.axis,e,n),align:a.textAlign,verticalAlign:a.textVerticalAlign})},t.makeLineShape=function(e,t,n){return{x1:e[n=n||0],y1:e[1-n],x2:t[n],y2:t[1-n]}},t.makeRectShape=function(e,t,n){return{x:e[n=n||0],y:e[1-n],width:t[n],height:t[1-n]}},t.makeSectorShape=function(e,t,n,i,r,o){return{cx:e,cy:t,r0:n,r:i,startAngle:r,endAngle:o,clockwise:!0}}},"./node_modules/echarts/lib/component/dataset.js":function(e,t,n){var i=n("./node_modules/echarts/lib/model/Component.js"),r=n("./node_modules/echarts/lib/view/Component.js"),o=n("./node_modules/echarts/lib/data/helper/sourceHelper.js").detectSourceFormat,a=n("./node_modules/echarts/lib/data/helper/sourceType.js").SERIES_LAYOUT_BY_COLUMN;i.extend({type:"dataset",defaultOption:{seriesLayoutBy:a,sourceHeader:null,dimensions:null,source:null},optionUpdated:function(){o(this)}}),r.extend({type:"dataset"})},"./node_modules/echarts/lib/component/helper/listComponent.js":function(e,t,n){var i=n("./node_modules/echarts/lib/util/layout.js"),r=i.getLayoutRect,o=i.box,a=i.positionElement,s=n("./node_modules/echarts/lib/util/format.js"),l=n("./node_modules/echarts/lib/util/graphic.js");t.layout=function(e,t,n){var i=t.getBoxLayoutParams(),s=t.get("padding"),l={width:n.getWidth(),height:n.getHeight()},u=r(i,l,s);o(t.get("orient"),e,t.get("itemGap"),u.width,u.height),a(e,i,l,s)},t.makeBackground=function(e,t){var n=s.normalizeCssArray(t.get("padding")),i=t.getItemStyle(["color","opacity"]);return i.fill=t.get("backgroundColor"),e=new l.Rect({shape:{x:e.x-n[3],y:e.y-n[0],width:e.width+n[1]+n[3],height:e.height+n[0]+n[2],r:t.get("borderRadius")},style:i,silent:!0,z2:-1})}},"./node_modules/echarts/lib/component/helper/selectableMixin.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r={updateSelectedMap:function(e){this._targetList=i.isArray(e)?e.slice():[],this._selectTargetMap=i.reduce(e||[],function(e,t){return e.set(t.name,t),e},i.createHashMap())},select:function(e,t){var n=null!=t?this._targetList[t]:this._selectTargetMap.get(e);"single"===this.get("selectedMode")&&this._selectTargetMap.each(function(e){e.selected=!1}),n&&(n.selected=!0)},unSelect:function(e,t){var n=null!=t?this._targetList[t]:this._selectTargetMap.get(e);n&&(n.selected=!1)},toggleSelected:function(e,t){var n=null!=t?this._targetList[t]:this._selectTargetMap.get(e);if(null!=n)return this[n.selected?"unSelect":"select"](e,t),n.selected},isSelected:function(e,t){var n=null!=t?this._targetList[t]:this._selectTargetMap.get(e);return n&&n.selected}};e.exports=r},"./node_modules/echarts/lib/component/legend.js":function(e,t,n){var i=n("./node_modules/echarts/lib/echarts.js");n("./node_modules/echarts/lib/component/legend/LegendModel.js"),n("./node_modules/echarts/lib/component/legend/legendAction.js"),n("./node_modules/echarts/lib/component/legend/LegendView.js");var r=n("./node_modules/echarts/lib/component/legend/legendFilter.js"),o=n("./node_modules/echarts/lib/model/Component.js");i.registerProcessor(r),o.registerSubTypeDefaulter("legend",function(){return"plain"})},"./node_modules/echarts/lib/component/legend/LegendModel.js":function(e,t,n){var i=n("./node_modules/echarts/lib/echarts.js"),r=n("./node_modules/zrender/lib/core/util.js"),o=n("./node_modules/echarts/lib/model/Model.js"),a=n("./node_modules/echarts/lib/util/model.js").isNameSpecified,s=i.extendComponentModel({type:"legend.plain",dependencies:["series"],layoutMode:{type:"box",ignoreSize:!0},init:function(e,t,n){this.mergeDefaultAndTheme(e,n),e.selected=e.selected||{}},mergeOption:function(e){s.superCall(this,"mergeOption",e)},optionUpdated:function(){this._updateData(this.ecModel);var e=this._data;if(e[0]&&"single"===this.get("selectedMode")){for(var t=!1,n=0;n<e.length;n++){var i=e[n].get("name");if(this.isSelected(i)){this.select(i),t=!0;break}}!t&&this.select(e[0].get("name"))}},_updateData:function(e){var t=[],n=[];e.eachRawSeries(function(i){var r,o=i.name;if(n.push(o),i.legendDataProvider){var s=i.legendDataProvider(),l=s.mapArray(s.getName);e.isSeriesFiltered(i)||(n=n.concat(l)),l.length?t=t.concat(l):r=!0}else r=!0;r&&a(i)&&t.push(i.name)}),this._availableNames=n;var i=this.get("data")||t,s=r.map(i,function(e){return"string"!=typeof e&&"number"!=typeof e||(e={name:e}),new o(e,this,this.ecModel)},this);this._data=s},getData:function(){return this._data},select:function(e){var t=this.option.selected;if("single"===this.get("selectedMode")){var n=this._data;r.each(n,function(e){t[e.get("name")]=!1})}t[e]=!0},unSelect:function(e){"single"!==this.get("selectedMode")&&(this.option.selected[e]=!1)},toggleSelected:function(e){var t=this.option.selected;t.hasOwnProperty(e)||(t[e]=!0),this[t[e]?"unSelect":"select"](e)},isSelected:function(e){var t=this.option.selected;return!(t.hasOwnProperty(e)&&!t[e])&&r.indexOf(this._availableNames,e)>=0},defaultOption:{zlevel:0,z:4,show:!0,orient:"horizontal",left:"center",top:0,align:"auto",backgroundColor:"rgba(0,0,0,0)",borderColor:"#ccc",borderRadius:0,borderWidth:0,padding:5,itemGap:10,itemWidth:25,itemHeight:14,inactiveColor:"#ccc",textStyle:{color:"#333"},selectedMode:!0,tooltip:{show:!1}}}),l=s;e.exports=l},"./node_modules/echarts/lib/component/legend/LegendView.js":function(e,t,n){n("./node_modules/echarts/lib/config.js").__DEV__;var i=n("./node_modules/echarts/lib/echarts.js"),r=n("./node_modules/zrender/lib/core/util.js"),o=n("./node_modules/echarts/lib/util/symbol.js").createSymbol,a=n("./node_modules/echarts/lib/util/graphic.js"),s=n("./node_modules/echarts/lib/component/helper/listComponent.js").makeBackground,l=n("./node_modules/echarts/lib/util/layout.js"),u=r.curry,c=r.each,d=a.Group,h=i.extendComponentView({type:"legend.plain",newlineDisabled:!1,init:function(){this.group.add(this._contentGroup=new d),this._backgroundEl},getContentGroup:function(){return this._contentGroup},render:function(e,t,n){if(this.resetInner(),e.get("show",!0)){var i=e.get("align");i&&"auto"!==i||(i="right"===e.get("left")&&"vertical"===e.get("orient")?"right":"left"),this.renderInner(i,e,t,n);var o=e.getBoxLayoutParams(),a={width:n.getWidth(),height:n.getHeight()},u=e.get("padding"),c=l.getLayoutRect(o,a,u),d=this.layoutInner(e,i,c),h=l.getLayoutRect(r.defaults({width:d.width,height:d.height},o),a,u);this.group.attr("position",[h.x-d.x,h.y-d.y]),this.group.add(this._backgroundEl=s(d,e))}},resetInner:function(){this.getContentGroup().removeAll(),this._backgroundEl&&this.group.remove(this._backgroundEl)},renderInner:function(e,t,n,i){var o=this.getContentGroup(),a=r.createHashMap(),s=t.get("selectedMode"),l=[];n.eachRawSeries(function(e){!e.get("legendHoverLink")&&l.push(e.id)}),c(t.getData(),function(r,c){var h=r.get("name");if(this.newlineDisabled||""!==h&&"\n"!==h){var g=n.getSeriesByName(h)[0];if(!a.get(h))if(g){var v=g.getData(),y=v.getVisual("color");"function"==typeof y&&(y=y(g.getDataParams(0)));var _=v.getVisual("legendSymbol")||"roundRect",x=v.getVisual("symbol");this._createItem(h,c,r,t,_,x,e,y,s).on("click",u(f,h,i)).on("mouseover",u(p,g,null,i,l)).on("mouseout",u(m,g,null,i,l)),a.set(h,!0)}else n.eachRawSeries(function(n){if(!a.get(h)&&n.legendDataProvider){var o=n.legendDataProvider(),d=o.indexOfName(h);if(d<0)return;var g=o.getItemVisual(d,"color");this._createItem(h,c,r,t,"roundRect",null,e,g,s).on("click",u(f,h,i)).on("mouseover",u(p,n,h,i,l)).on("mouseout",u(m,n,h,i,l)),a.set(h,!0)}},this)}else o.add(new d({newline:!0}))},this)},_createItem:function(e,t,n,i,s,l,u,c,h){var f=i.get("itemWidth"),p=i.get("itemHeight"),m=i.get("inactiveColor"),g=i.get("symbolKeepAspect"),v=i.isSelected(e),y=new d,_=n.getModel("textStyle"),x=n.get("icon"),b=n.getModel("tooltip"),w=b.parentModel;if(s=x||s,y.add(o(s,0,0,f,p,v?c:m,null==g||g)),!x&&l&&(l!==s||"none"==l)){var S=.8*p;"none"===l&&(l="circle"),y.add(o(l,(f-S)/2,(p-S)/2,S,S,v?c:m,null==g||g))}var A="left"===u?f+5:-5,T=u,C=i.get("formatter"),j=e;"string"==typeof C&&C?j=C.replace("{name}",null!=e?e:""):"function"==typeof C&&(j=C(e)),y.add(new a.Text({style:a.setTextStyle({},_,{text:j,x:A,y:p/2,textFill:v?_.getTextColor():m,textAlign:T,textVerticalAlign:"middle"})}));var M=new a.Rect({shape:y.getBoundingRect(),invisible:!0,tooltip:b.get("show")?r.extend({content:e,formatter:w.get("formatter",!0)||function(){return e},formatterParams:{componentType:"legend",legendIndex:i.componentIndex,name:e,$vars:["name"]}},b.option):null});return y.add(M),y.eachChild(function(e){e.silent=!0}),M.silent=!h,this.getContentGroup().add(y),a.setHoverStyle(y),y.__legendDataIndex=t,y},layoutInner:function(e,t,n){var i=this.getContentGroup();l.box(e.get("orient"),i,e.get("itemGap"),n.width,n.height);var r=i.getBoundingRect();return i.attr("position",[-r.x,-r.y]),this.group.getBoundingRect()}});function f(e,t){t.dispatchAction({type:"legendToggleSelect",name:e})}function p(e,t,n,i){var r=n.getZr().storage.getDisplayList()[0];r&&r.useHoverLayer||n.dispatchAction({type:"highlight",seriesName:e.name,name:t,excludeSeriesId:i})}function m(e,t,n,i){var r=n.getZr().storage.getDisplayList()[0];r&&r.useHoverLayer||n.dispatchAction({type:"downplay",seriesName:e.name,name:t,excludeSeriesId:i})}e.exports=h},"./node_modules/echarts/lib/component/legend/legendAction.js":function(e,t,n){var i=n("./node_modules/echarts/lib/echarts.js"),r=n("./node_modules/zrender/lib/core/util.js");function o(e,t,n){var i,o={},a="toggleSelected"===e;return n.eachComponent("legend",function(n){a&&null!=i?n[i?"select":"unSelect"](t.name):(n[e](t.name),i=n.isSelected(t.name));var s=n.getData();r.each(s,function(e){var t=e.get("name");if("\n"!==t&&""!==t){var i=n.isSelected(t);o.hasOwnProperty(t)?o[t]=o[t]&&i:o[t]=i}})}),{name:t.name,selected:o}}i.registerAction("legendToggleSelect","legendselectchanged",r.curry(o,"toggleSelected")),i.registerAction("legendSelect","legendselected",r.curry(o,"select")),i.registerAction("legendUnSelect","legendunselected",r.curry(o,"unSelect"))},"./node_modules/echarts/lib/component/legend/legendFilter.js":function(e,t){e.exports=function(e){var t=e.findComponents({mainType:"legend"});t&&t.length&&e.filterSeries(function(e){for(var n=0;n<t.length;n++)if(!t[n].isSelected(e.name))return!1;return!0})}},"./node_modules/echarts/lib/component/title.js":function(e,t,n){var i=n("./node_modules/echarts/lib/echarts.js"),r=n("./node_modules/echarts/lib/util/graphic.js"),o=n("./node_modules/echarts/lib/util/layout.js").getLayoutRect;i.extendComponentModel({type:"title",layoutMode:{type:"box",ignoreSize:!0},defaultOption:{zlevel:0,z:6,show:!0,text:"",target:"blank",subtext:"",subtarget:"blank",left:0,top:0,backgroundColor:"rgba(0,0,0,0)",borderColor:"#ccc",borderWidth:0,padding:5,itemGap:10,textStyle:{fontSize:18,fontWeight:"bolder",color:"#333"},subtextStyle:{color:"#aaa"}}}),i.extendComponentView({type:"title",render:function(e,t,n){if(this.group.removeAll(),e.get("show")){var i=this.group,a=e.getModel("textStyle"),s=e.getModel("subtextStyle"),l=e.get("textAlign"),u=e.get("textBaseline"),c=new r.Text({style:r.setTextStyle({},a,{text:e.get("text"),textFill:a.getTextColor()},{disableBox:!0}),z2:10}),d=c.getBoundingRect(),h=e.get("subtext"),f=new r.Text({style:r.setTextStyle({},s,{text:h,textFill:s.getTextColor(),y:d.height+e.get("itemGap"),textVerticalAlign:"top"},{disableBox:!0}),z2:10}),p=e.get("link"),m=e.get("sublink");c.silent=!p,f.silent=!m,p&&c.on("click",function(){window.open(p,"_"+e.get("target"))}),m&&f.on("click",function(){window.open(m,"_"+e.get("subtarget"))}),i.add(c),h&&i.add(f);var g=i.getBoundingRect(),v=e.getBoxLayoutParams();v.width=g.width,v.height=g.height;var y=o(v,{width:n.getWidth(),height:n.getHeight()},e.get("padding"));l||("middle"===(l=e.get("left")||e.get("right"))&&(l="center"),"right"===l?y.x+=y.width:"center"===l&&(y.x+=y.width/2)),u||("center"===(u=e.get("top")||e.get("bottom"))&&(u="middle"),"bottom"===u?y.y+=y.height:"middle"===u&&(y.y+=y.height/2),u=u||"top"),i.attr("position",[y.x,y.y]);var _={textAlign:l,textVerticalAlign:u};c.setStyle(_),f.setStyle(_),g=i.getBoundingRect();var x=y.margin,b=e.getItemStyle(["color","opacity"]);b.fill=e.get("backgroundColor");var w=new r.Rect({shape:{x:g.x-x[3],y:g.y-x[0],width:g.width+x[1]+x[3],height:g.height+x[0]+x[2],r:e.get("borderRadius")},style:b,silent:!0});r.subPixelOptimizeRect(w),i.add(w)}}})},"./node_modules/echarts/lib/component/tooltip.js":function(e,t,n){var i=n("./node_modules/echarts/lib/echarts.js");n("./node_modules/echarts/lib/component/axisPointer.js"),n("./node_modules/echarts/lib/component/tooltip/TooltipModel.js"),n("./node_modules/echarts/lib/component/tooltip/TooltipView.js"),i.registerAction({type:"showTip",event:"showTip",update:"tooltip:manuallyShowTip"},function(){}),i.registerAction({type:"hideTip",event:"hideTip",update:"tooltip:manuallyHideTip"},function(){})},"./node_modules/echarts/lib/component/tooltip/TooltipContent.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/zrender/lib/tool/color.js"),o=n("./node_modules/zrender/lib/core/event.js"),a=n("./node_modules/zrender/lib/core/env.js"),s=n("./node_modules/echarts/lib/util/format.js"),l=i.each,u=s.toCamelCase,c=["","-webkit-","-moz-","-o-"];function d(e){var t=[],n=e.get("transitionDuration"),o=e.get("backgroundColor"),d=e.getModel("textStyle"),h=e.get("padding");return n&&t.push(function(e){var t="left "+e+"s cubic-bezier(0.23, 1, 0.32, 1),top "+e+"s cubic-bezier(0.23, 1, 0.32, 1)";return i.map(c,function(e){return e+"transition:"+t}).join(";")}(n)),o&&(a.canvasSupported?t.push("background-Color:"+o):(t.push("background-Color:#"+r.toHex(o)),t.push("filter:alpha(opacity=70)"))),l(["width","color","radius"],function(n){var i="border-"+n,r=u(i),o=e.get(r);null!=o&&t.push(i+":"+o+("color"===n?"":"px"))}),t.push(function(e){var t=[],n=e.get("fontSize"),i=e.getTextColor();return i&&t.push("color:"+i),t.push("font:"+e.getFont()),n&&t.push("line-height:"+Math.round(3*n/2)+"px"),l(["decoration","align"],function(n){var i=e.get(n);i&&t.push("text-"+n+":"+i)}),t.join(";")}(d)),null!=h&&t.push("padding:"+s.normalizeCssArray(h).join("px ")+"px"),t.join(";")+";"}function h(e,t){if(a.wxa)return null;var n=document.createElement("div"),i=this._zr=t.getZr();this.el=n,this._x=t.getWidth()/2,this._y=t.getHeight()/2,e.appendChild(n),this._container=e,this._show=!1,this._hideTimeout;var r=this;n.onmouseenter=function(){r._enterable&&(clearTimeout(r._hideTimeout),r._show=!0),r._inContent=!0},n.onmousemove=function(t){if(t=t||window.event,!r._enterable){var n=i.handler;o.normalizeEvent(e,t,!0),n.dispatch("mousemove",t)}},n.onmouseleave=function(){r._enterable&&r._show&&r.hideLater(r._hideDelay),r._inContent=!1}}h.prototype={constructor:h,_enterable:!0,update:function(){var e=this._container,t=e.currentStyle||document.defaultView.getComputedStyle(e),n=e.style;"absolute"!==n.position&&"absolute"!==t.position&&(n.position="relative")},show:function(e){clearTimeout(this._hideTimeout);var t=this.el;t.style.cssText="position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;"+d(e)+";left:"+this._x+"px;top:"+this._y+"px;"+(e.get("extraCssText")||""),t.style.display=t.innerHTML?"block":"none",this._show=!0},setContent:function(e){this.el.innerHTML=null==e?"":e},setEnterable:function(e){this._enterable=e},getSize:function(){var e=this.el;return[e.clientWidth,e.clientHeight]},moveTo:function(e,t){var n,i=this._zr;i&&i.painter&&(n=i.painter.getViewportRootOffset())&&(e+=n.offsetLeft,t+=n.offsetTop);var r=this.el.style;r.left=e+"px",r.top=t+"px",this._x=e,this._y=t},hide:function(){this.el.style.display="none",this._show=!1},hideLater:function(e){!this._show||this._inContent&&this._enterable||(e?(this._hideDelay=e,this._show=!1,this._hideTimeout=setTimeout(i.bind(this.hide,this),e)):this.hide())},isShow:function(){return this._show}};var f=h;e.exports=f},"./node_modules/echarts/lib/component/tooltip/TooltipModel.js":function(e,t,n){var i=n("./node_modules/echarts/lib/echarts.js").extendComponentModel({type:"tooltip",dependencies:["axisPointer"],defaultOption:{zlevel:0,z:8,show:!0,showContent:!0,trigger:"item",triggerOn:"mousemove|click",alwaysShowContent:!1,displayMode:"single",confine:!1,showDelay:0,hideDelay:100,transitionDuration:.4,enterable:!1,backgroundColor:"rgba(50,50,50,0.7)",borderColor:"#333",borderRadius:4,borderWidth:0,padding:5,extraCssText:"",axisPointer:{type:"line",axis:"auto",animation:"auto",animationDurationUpdate:200,animationEasingUpdate:"exponentialOut",crossStyle:{color:"#999",width:1,type:"dashed",textStyle:{}}},textStyle:{color:"#fff",fontSize:14}}});e.exports=i},"./node_modules/echarts/lib/component/tooltip/TooltipView.js":function(e,t,n){var i=n("./node_modules/echarts/lib/echarts.js"),r=n("./node_modules/zrender/lib/core/util.js"),o=n("./node_modules/zrender/lib/core/env.js"),a=n("./node_modules/echarts/lib/component/tooltip/TooltipContent.js"),s=n("./node_modules/echarts/lib/util/format.js"),l=n("./node_modules/echarts/lib/util/number.js"),u=n("./node_modules/echarts/lib/util/graphic.js"),c=n("./node_modules/echarts/lib/component/axisPointer/findPointFromSeries.js"),d=n("./node_modules/echarts/lib/util/layout.js"),h=n("./node_modules/echarts/lib/model/Model.js"),f=n("./node_modules/echarts/lib/component/axisPointer/globalListener.js"),p=n("./node_modules/echarts/lib/coord/axisHelper.js"),m=n("./node_modules/echarts/lib/component/axisPointer/viewHelper.js"),g=r.bind,v=r.each,y=l.parsePercent,_=new u.Rect({shape:{x:-1,y:-1,width:2,height:2}}),x=i.extendComponentView({type:"tooltip",init:function(e,t){if(!o.node){var n=new a(t.getDom(),t);this._tooltipContent=n}},render:function(e,t,n){if(!o.node&&!o.wxa){this.group.removeAll(),this._tooltipModel=e,this._ecModel=t,this._api=n,this._lastDataByCoordSys=null,this._alwaysShowContent=e.get("alwaysShowContent");var i=this._tooltipContent;i.update(),i.setEnterable(e.get("enterable")),this._initGlobalListener(),this._keepShow()}},_initGlobalListener:function(){var e=this._tooltipModel.get("triggerOn");f.register("itemTooltip",this._api,g(function(t,n,i){"none"!==e&&(e.indexOf(t)>=0?this._tryShow(n,i):"leave"===t&&this._hide(i))},this))},_keepShow:function(){var e=this._tooltipModel,t=this._ecModel,n=this._api;if(null!=this._lastX&&null!=this._lastY&&"none"!==e.get("triggerOn")){var i=this;clearTimeout(this._refreshUpdateTimeout),this._refreshUpdateTimeout=setTimeout(function(){i.manuallyShowTip(e,t,n,{x:i._lastX,y:i._lastY})})}},manuallyShowTip:function(e,t,n,i){if(i.from!==this.uid&&!o.node){var r=w(i,n);this._ticket="";var a=i.dataByCoordSys;if(i.tooltip&&null!=i.x&&null!=i.y){var s=_;s.position=[i.x,i.y],s.update(),s.tooltip=i.tooltip,this._tryShow({offsetX:i.x,offsetY:i.y,target:s},r)}else if(a)this._tryShow({offsetX:i.x,offsetY:i.y,position:i.position,event:{},dataByCoordSys:i.dataByCoordSys,tooltipOption:i.tooltipOption},r);else if(null!=i.seriesIndex){if(this._manuallyAxisShowTip(e,t,n,i))return;var l=c(i,t),u=l.point[0],d=l.point[1];null!=u&&null!=d&&this._tryShow({offsetX:u,offsetY:d,position:i.position,target:l.el,event:{}},r)}else null!=i.x&&null!=i.y&&(n.dispatchAction({type:"updateAxisPointer",x:i.x,y:i.y}),this._tryShow({offsetX:i.x,offsetY:i.y,position:i.position,target:n.getZr().findHover(i.x,i.y).target,event:{}},r))}},manuallyHideTip:function(e,t,n,i){var r=this._tooltipContent;!this._alwaysShowContent&&this._tooltipModel&&r.hideLater(this._tooltipModel.get("hideDelay")),this._lastX=this._lastY=null,i.from!==this.uid&&this._hide(w(i,n))},_manuallyAxisShowTip:function(e,t,n,i){var r=i.seriesIndex,o=i.dataIndex,a=t.getComponent("axisPointer").coordSysAxesInfo;if(null!=r&&null!=o&&null!=a){var s=t.getSeriesByIndex(r);if(s)if("axis"===(e=b([s.getData().getItemModel(o),s,(s.coordinateSystem||{}).model,e])).get("trigger"))return n.dispatchAction({type:"updateAxisPointer",seriesIndex:r,dataIndex:o,position:i.position}),!0}},_tryShow:function(e,t){var n=e.target;if(this._tooltipModel){this._lastX=e.offsetX,this._lastY=e.offsetY;var i=e.dataByCoordSys;i&&i.length?this._showAxisTooltip(i,e):n&&null!=n.dataIndex?(this._lastDataByCoordSys=null,this._showSeriesItemTooltip(e,n,t)):n&&n.tooltip?(this._lastDataByCoordSys=null,this._showComponentItemTooltip(e,n,t)):(this._lastDataByCoordSys=null,this._hide(t))}},_showOrMove:function(e,t){var n=e.get("showDelay");t=r.bind(t,this),clearTimeout(this._showTimout),n>0?this._showTimout=setTimeout(t,n):t()},_showAxisTooltip:function(e,t){var n=this._ecModel,i=this._tooltipModel,o=[t.offsetX,t.offsetY],a=[],l=[],u=b([t.tooltipOption,i]);v(e,function(e){v(e.dataByAxis,function(e){var t=n.getComponent(e.axisDim+"Axis",e.axisIndex),i=e.value,o=[];if(t&&null!=i){var u=m.getValueLabel(i,t.axis,n,e.seriesDataIndices,e.valueLabelOpt);r.each(e.seriesDataIndices,function(r){var a=n.getSeriesByIndex(r.seriesIndex),s=r.dataIndexInside,c=a&&a.getDataParams(s);c.axisDim=e.axisDim,c.axisIndex=e.axisIndex,c.axisType=e.axisType,c.axisId=e.axisId,c.axisValue=p.getAxisRawValue(t.axis,i),c.axisValueLabel=u,c&&(l.push(c),o.push(a.formatTooltip(s,!0)))});var c=u;a.push((c?s.encodeHTML(c)+"<br />":"")+o.join("<br />"))}})},this),a.reverse(),a=a.join("<br /><br />");var c=t.position;this._showOrMove(u,function(){this._updateContentNotChangedOnAxis(e)?this._updatePosition(u,c,o[0],o[1],this._tooltipContent,l):this._showTooltipContent(u,a,l,Math.random(),o[0],o[1],c)})},_showSeriesItemTooltip:function(e,t,n){var i=this._ecModel,r=t.seriesIndex,o=i.getSeriesByIndex(r),a=t.dataModel||o,s=t.dataIndex,l=t.dataType,u=a.getData(),c=b([u.getItemModel(s),a,o&&(o.coordinateSystem||{}).model,this._tooltipModel]),d=c.get("trigger");if(null==d||"item"===d){var h=a.getDataParams(s,l),f=a.formatTooltip(s,!1,l),p="item_"+a.name+"_"+s;this._showOrMove(c,function(){this._showTooltipContent(c,f,h,p,e.offsetX,e.offsetY,e.position,e.target)}),n({type:"showTip",dataIndexInside:s,dataIndex:u.getRawIndex(s),seriesIndex:r,from:this.uid})}},_showComponentItemTooltip:function(e,t,n){var i=t.tooltip;if("string"==typeof i){i={content:i,formatter:i}}var r=new h(i,this._tooltipModel,this._ecModel),o=r.get("content"),a=Math.random();this._showOrMove(r,function(){this._showTooltipContent(r,o,r.get("formatterParams")||{},a,e.offsetX,e.offsetY,e.position,t)}),n({type:"showTip",from:this.uid})},_showTooltipContent:function(e,t,n,i,r,o,a,l){if(this._ticket="",e.get("showContent")&&e.get("show")){var u=this._tooltipContent,c=e.get("formatter");a=a||e.get("position");var d=t;if(c&&"string"==typeof c)d=s.formatTpl(c,n,!0);else if("function"==typeof c){var h=g(function(t,i){t===this._ticket&&(u.setContent(i),this._updatePosition(e,a,r,o,u,n,l))},this);this._ticket=i,d=c(n,i,h)}u.setContent(d),u.show(e),this._updatePosition(e,a,r,o,u,n,l)}},_updatePosition:function(e,t,n,i,o,a,s){var l=this._api.getWidth(),u=this._api.getHeight();t=t||e.get("position");var c=o.getSize(),h=e.get("align"),f=e.get("verticalAlign"),p=s&&s.getBoundingRect().clone();if(s&&p.applyTransform(s.transform),"function"==typeof t&&(t=t([n,i],a,o.el,p,{viewSize:[l,u],contentSize:c.slice()})),r.isArray(t))n=y(t[0],l),i=y(t[1],u);else if(r.isObject(t)){t.width=c[0],t.height=c[1];var m=d.getLayoutRect(t,{width:l,height:u});n=m.x,i=m.y,h=null,f=null}else if("string"==typeof t&&s){var g=function(e,t,n){var i=n[0],r=n[1],o=0,a=0,s=t.width,l=t.height;switch(e){case"inside":o=t.x+s/2-i/2,a=t.y+l/2-r/2;break;case"top":o=t.x+s/2-i/2,a=t.y-r-5;break;case"bottom":o=t.x+s/2-i/2,a=t.y+l+5;break;case"left":o=t.x-i-5,a=t.y+l/2-r/2;break;case"right":o=t.x+s+5,a=t.y+l/2-r/2}return[o,a]}(t,p,c);n=g[0],i=g[1]}else{g=function(e,t,n,i,r,o,a){var s=S(n),l=s.width,u=s.height;null!=o&&(e+l+o>i?e-=l+o:e+=o);null!=a&&(t+u+a>r?t-=u+a:t+=a);return[e,t]}(n,i,o.el,l,u,h?null:20,f?null:20);n=g[0],i=g[1]}if(h&&(n-=A(h)?c[0]/2:"right"===h?c[0]:0),f&&(i-=A(f)?c[1]/2:"bottom"===f?c[1]:0),e.get("confine")){g=function(e,t,n,i,r){var o=S(n),a=o.width,s=o.height;return e=Math.min(e+a,i)-a,t=Math.min(t+s,r)-s,e=Math.max(e,0),t=Math.max(t,0),[e,t]}(n,i,o.el,l,u);n=g[0],i=g[1]}o.moveTo(n,i)},_updateContentNotChangedOnAxis:function(e){var t=this._lastDataByCoordSys,n=!!t&&t.length===e.length;return n&&v(t,function(t,i){var r=t.dataByAxis||{},o=(e[i]||{}).dataByAxis||[];(n&=r.length===o.length)&&v(r,function(e,t){var i=o[t]||{},r=e.seriesDataIndices||[],a=i.seriesDataIndices||[];(n&=e.value===i.value&&e.axisType===i.axisType&&e.axisId===i.axisId&&r.length===a.length)&&v(r,function(e,t){var i=a[t];n&=e.seriesIndex===i.seriesIndex&&e.dataIndex===i.dataIndex})})}),this._lastDataByCoordSys=e,!!n},_hide:function(e){this._lastDataByCoordSys=null,e({type:"hideTip",from:this.uid})},dispose:function(e,t){o.node||o.wxa||(this._tooltipContent.hide(),f.unregister("itemTooltip",t))}});function b(e){for(var t=e.pop();e.length;){var n=e.pop();n&&(h.isInstance(n)&&(n=n.get("tooltip",!0)),"string"==typeof n&&(n={formatter:n}),t=new h(n,t,t.ecModel))}return t}function w(e,t){return e.dispatchAction||r.bind(t.dispatchAction,t)}function S(e){var t=e.clientWidth,n=e.clientHeight;if(document.defaultView&&document.defaultView.getComputedStyle){var i=document.defaultView.getComputedStyle(e);i&&(t+=parseInt(i.paddingLeft,10)+parseInt(i.paddingRight,10)+parseInt(i.borderLeftWidth,10)+parseInt(i.borderRightWidth,10),n+=parseInt(i.paddingTop,10)+parseInt(i.paddingBottom,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10))}return{width:t,height:n}}function A(e){return"center"===e||"middle"===e}e.exports=x},"./node_modules/echarts/lib/config.js":function(e,t,n){(function(e){var n;"undefined"!=typeof window?n=window.__DEV__:void 0!==e&&(n=e.__DEV__),void 0===n&&(n=!0);var i=n;t.__DEV__=i}).call(this,n("./node_modules/webpack/buildin/global.js"))},"./node_modules/echarts/lib/coord/Axis.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=i.each,o=i.map,a=n("./node_modules/echarts/lib/util/number.js"),s=a.linearMap,l=a.getPixelPrecision,u=n("./node_modules/echarts/lib/coord/axisTickLabelBuilder.js"),c=u.createAxisTicks,d=u.createAxisLabels,h=u.calculateCategoryInterval,f=[0,1],p=function(e,t,n){this.dim=e,this.scale=t,this._extent=n||[0,0],this.inverse=!1,this.onBand=!1};function m(e,t){var n=(e[1]-e[0])/t/2;e[0]+=n,e[1]-=n}p.prototype={constructor:p,contain:function(e){var t=this._extent,n=Math.min(t[0],t[1]),i=Math.max(t[0],t[1]);return e>=n&&e<=i},containData:function(e){return this.contain(this.dataToCoord(e))},getExtent:function(){return this._extent.slice()},getPixelPrecision:function(e){return l(e||this.scale.getExtent(),this._extent)},setExtent:function(e,t){var n=this._extent;n[0]=e,n[1]=t},dataToCoord:function(e,t){var n=this._extent,i=this.scale;return e=i.normalize(e),this.onBand&&"ordinal"===i.type&&m(n=n.slice(),i.count()),s(e,f,n,t)},coordToData:function(e,t){var n=this._extent,i=this.scale;this.onBand&&"ordinal"===i.type&&m(n=n.slice(),i.count());var r=s(e,n,f,t);return this.scale.scale(r)},pointToData:function(e,t){},getTicksCoords:function(e){var t=(e=e||{}).tickModel||this.getTickModel(),n=c(this,t),i=n.ticks,a=o(i,function(e){return{coord:this.dataToCoord(e),tickValue:e}},this),s=t.get("alignWithLabel");return function(e,t,n,i,o){var a=t.length;if(!e.onBand||i||!a)return;var s,l=e.getExtent();if(1===a)t[0].coord=l[0],s=t[1]={coord:l[0]};else{var u=t[1].coord-t[0].coord;r(t,function(e){e.coord-=u/2;var t=t||0;t%2>0&&(e.coord-=u/(2*(t+1)))}),s={coord:t[a-1].coord+u},t.push(s)}var c=l[0]>l[1];d(t[0].coord,l[0])&&(o?t[0].coord=l[0]:t.shift());o&&d(l[0],t[0].coord)&&t.unshift({coord:l[0]});d(l[1],s.coord)&&(o?s.coord=l[1]:t.pop());o&&d(s.coord,l[1])&&t.push({coord:l[1]});function d(e,t){return c?e>t:e<t}}(this,a,n.tickCategoryInterval,s,e.clamp),a},getViewLabels:function(){return d(this).labels},getLabelModel:function(){return this.model.getModel("axisLabel")},getTickModel:function(){return this.model.getModel("axisTick")},getBandWidth:function(){var e=this._extent,t=this.scale.getExtent(),n=t[1]-t[0]+(this.onBand?1:0);0===n&&(n=1);var i=Math.abs(e[1]-e[0]);return Math.abs(i)/n},isHorizontal:null,getRotate:null,calculateCategoryInterval:function(){return h(this)}};var g=p;e.exports=g},"./node_modules/echarts/lib/coord/axisHelper.js":function(e,t,n){n("./node_modules/echarts/lib/config.js").__DEV__;var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/scale/Ordinal.js"),o=n("./node_modules/echarts/lib/scale/Interval.js"),a=n("./node_modules/echarts/lib/scale/Scale.js"),s=n("./node_modules/echarts/lib/util/number.js"),l=n("./node_modules/echarts/lib/layout/barGrid.js"),u=l.prepareLayoutBarSeries,c=l.makeColumnLayout,d=l.retrieveColumnLayout,h=n("./node_modules/zrender/lib/core/BoundingRect.js");function f(e,t){var n,r,o,a=e.type,l=t.getMin(),h=t.getMax(),f=null!=l,p=null!=h,m=e.getExtent();"ordinal"===a?n=t.getCategories().length:(r=t.get("boundaryGap"),i.isArray(r)||(r=[r||0,r||0]),"boolean"==typeof r[0]&&(r=[0,0]),r[0]=s.parsePercent(r[0],1),r[1]=s.parsePercent(r[1],1),o=m[1]-m[0]||Math.abs(m[0])),null==l&&(l="ordinal"===a?n?0:NaN:m[0]-r[0]*o),null==h&&(h="ordinal"===a?n?n-1:NaN:m[1]+r[1]*o),"dataMin"===l?l=m[0]:"function"==typeof l&&(l=l({min:m[0],max:m[1]})),"dataMax"===h?h=m[1]:"function"==typeof h&&(h=h({min:m[0],max:m[1]})),(null==l||!isFinite(l))&&(l=NaN),(null==h||!isFinite(h))&&(h=NaN),e.setBlank(i.eqNaN(l)||i.eqNaN(h)||"ordinal"===a&&!e.getOrdinalMeta().categories.length),t.getNeedCrossZero()&&(l>0&&h>0&&!f&&(l=0),l<0&&h<0&&!p&&(h=0));var g=t.ecModel;if(g&&"time"===a){var v,y=u("bar",g);if(i.each(y,function(e){v|=e.getBaseAxis()===t.axis}),v){var _=c(y),x=function(e,t,n,r){var o=n.axis.getExtent(),a=o[1]-o[0],s=d(r,n.axis);if(void 0===s)return{min:e,max:t};var l=1/0;i.each(s,function(e){l=Math.min(e.offset,l)});var u=-1/0;i.each(s,function(e){u=Math.max(e.offset+e.width,u)}),l=Math.abs(l),u=Math.abs(u);var c=l+u,h=t-e,f=h/(1-(l+u)/a)-h;return{min:e-=f*(l/c),max:t+=f*(u/c)}}(l,h,t,_);l=x.min,h=x.max}}return[l,h]}function p(e){var t=e.getLabelModel().get("formatter"),n="category"===e.type?e.scale.getExtent()[0]:null;return"string"==typeof t?t=function(e){return function(t){return e.replace("{value}",null!=t?t:"")}}(t):"function"==typeof t?function(i,r){return null!=n&&(r=i-n),t(m(e,i),r)}:function(t){return e.scale.getLabel(t)}}function m(e,t){return"category"===e.type?e.scale.getLabel(t):t}function g(e,t){var n=t*Math.PI/180,i=e.plain(),r=i.width,o=i.height,a=r*Math.cos(n)+o*Math.sin(n),s=r*Math.sin(n)+o*Math.cos(n);return new h(i.x,i.y,a,s)}n("./node_modules/echarts/lib/scale/Time.js"),n("./node_modules/echarts/lib/scale/Log.js"),t.getScaleExtent=f,t.niceScaleExtent=function(e,t){var n=f(e,t),i=null!=t.getMin(),r=null!=t.getMax(),o=t.get("splitNumber");"log"===e.type&&(e.base=t.get("logBase"));var a=e.type;e.setExtent(n[0],n[1]),e.niceExtent({splitNumber:o,fixMin:i,fixMax:r,minInterval:"interval"===a||"time"===a?t.get("minInterval"):null,maxInterval:"interval"===a||"time"===a?t.get("maxInterval"):null});var s=t.get("interval");null!=s&&e.setInterval&&e.setInterval(s)},t.createScaleByModel=function(e,t){if(t=t||e.get("type"))switch(t){case"category":return new r(e.getOrdinalMeta?e.getOrdinalMeta():e.getCategories(),[1/0,-1/0]);case"value":return new o;default:return(a.getClass(t)||o).create(e)}},t.ifAxisCrossZero=function(e){var t=e.scale.getExtent(),n=t[0],i=t[1];return!(n>0&&i>0||n<0&&i<0)},t.makeLabelFormatter=p,t.getAxisRawValue=m,t.estimateLabelUnionRect=function(e){var t=e.model,n=e.scale;if(t.get("axisLabel.show")&&!n.isBlank()){var i,r,o="category"===e.type,a=n.getExtent();r=o?n.count():(i=n.getTicks()).length;var s,l=e.getLabelModel(),u=p(e),c=1;r>40&&(c=Math.ceil(r/40));for(var d=0;d<r;d+=c){var h=u(i?i[d]:a[0]+d),f=g(l.getTextRect(h),l.get("rotate")||0);s?s.union(f):s=f}return s}}},"./node_modules/echarts/lib/coord/axisModelCommonMixin.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=(n("./node_modules/echarts/lib/coord/axisHelper.js"),{getMin:function(e){var t=this.option,n=e||null==t.rangeStart?t.min:t.rangeStart;return this.axis&&null!=n&&"dataMin"!==n&&"function"!=typeof n&&!i.eqNaN(n)&&(n=this.axis.scale.parse(n)),n},getMax:function(e){var t=this.option,n=e||null==t.rangeEnd?t.max:t.rangeEnd;return this.axis&&null!=n&&"dataMax"!==n&&"function"!=typeof n&&!i.eqNaN(n)&&(n=this.axis.scale.parse(n)),n},getNeedCrossZero:function(){var e=this.option;return null==e.rangeStart&&null==e.rangeEnd&&!e.scale},getCoordSysModel:i.noop,setRange:function(e,t){this.option.rangeStart=e,this.option.rangeEnd=t},resetRange:function(){this.option.rangeStart=this.option.rangeEnd=null}});e.exports=r},"./node_modules/echarts/lib/coord/axisTickLabelBuilder.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/zrender/lib/contain/text.js"),o=n("./node_modules/echarts/lib/util/model.js").makeInner,a=n("./node_modules/echarts/lib/coord/axisHelper.js").makeLabelFormatter,s=o();function l(e,t){var n,r=u(e,"labels"),o=p(t),a=c(r,o);return a||d(r,o,{labels:i.isFunction(o)?f(e,o):h(e,n="auto"===o?function(e){var t=s(e).autoInterval;return null!=t?t:s(e).autoInterval=e.calculateCategoryInterval()}(e):o),labelCategoryInterval:n})}function u(e,t){return s(e)[t]||(s(e)[t]=[])}function c(e,t){for(var n=0;n<e.length;n++)if(e[n].key===t)return e[n].value}function d(e,t,n){return e.push({key:t,value:n}),n}function h(e,t,n){var i=a(e),r=e.scale,o=r.getExtent(),s=e.getLabelModel(),l=[],u=Math.max((t||0)+1,1),c=o[0],d=r.count();0!==c&&u>1&&d/u>2&&(c=Math.round(Math.ceil(c/u)*u));var h=s.get("showMinLabel"),f=s.get("showMaxLabel");h&&c!==o[0]&&m(o[0]);for(var p=c;p<=o[1];p+=u)m(p);function m(e){l.push(n?e:{formattedLabel:i(e),rawLabel:r.getLabel(e),tickValue:e})}return f&&p!==o[1]&&m(o[1]),l}function f(e,t,n){var r=e.scale,o=a(e),s=[];return i.each(r.getTicks(),function(e){var i=r.getLabel(e);t(e,i)&&s.push(n?e:{formattedLabel:o(e),rawLabel:i,tickValue:e})}),s}function p(e){var t=e.get("interval");return null==t?"auto":t}t.createAxisLabels=function(e){return"category"===e.type?function(e){var t=e.getLabelModel(),n=l(e,t);return!t.get("show")||e.scale.isBlank()?{labels:[],labelCategoryInterval:n.labelCategoryInterval}:n}(e):function(e){var t=e.scale.getTicks(),n=a(e);return{labels:i.map(t,function(t,i){return{formattedLabel:n(t,i),rawLabel:e.scale.getLabel(t),tickValue:t}})}}(e)},t.createAxisTicks=function(e,t){return"category"===e.type?function(e,t){var n,r,o=u(e,"ticks"),a=p(t),s=c(o,a);if(s)return s;if(t.get("show")&&!e.scale.isBlank()||(n=[]),i.isFunction(a))n=f(e,a,!0);else if("auto"===a){var m=l(e,e.getLabelModel());r=m.labelCategoryInterval,n=i.map(m.labels,function(e){return e.tickValue})}else n=h(e,r=a,!0);return d(o,a,{ticks:n,tickCategoryInterval:r})}(e,t):{ticks:e.scale.getTicks()}},t.calculateCategoryInterval=function(e){var t=function(e){var t=e.getLabelModel();return{axisRotate:e.getRotate?e.getRotate():e.isHorizontal&&!e.isHorizontal()?90:0,labelRotate:t.get("rotate")||0,font:t.getFont()}}(e),n=a(e),i=(t.axisRotate-t.labelRotate)/180*Math.PI,o=e.scale,l=o.getExtent(),u=o.count();if(l[1]-l[0]<1)return 0;var c=1;u>40&&(c=Math.max(1,Math.floor(u/40)));for(var d=l[0],h=e.dataToCoord(d+1)-e.dataToCoord(d),f=Math.abs(h*Math.cos(i)),p=Math.abs(h*Math.sin(i)),m=0,g=0;d<=l[1];d+=c){var v,y,_=r.getBoundingRect(n(d),t.font,"center","top");v=1.3*_.width,y=1.3*_.height,m=Math.max(m,v,7),g=Math.max(g,y,7)}var x=m/f,b=g/p;isNaN(x)&&(x=1/0),isNaN(b)&&(b=1/0);var w=Math.max(0,Math.floor(Math.min(x,b))),S=s(e.model),A=S.lastAutoInterval,T=S.lastTickCount;return null!=A&&null!=T&&Math.abs(A-w)<=1&&Math.abs(T-u)<=1&&A>w?w=A:(S.lastTickCount=u,S.lastAutoInterval=w),w}},"./node_modules/echarts/lib/coord/cartesian/cartesianAxisHelper.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js");t.layout=function(e,t,n){n=n||{};var r=e.coordinateSystem,o=t.axis,a={},s=o.getAxesOnZeroOf()[0],l=o.position,u=s?"onZero":l,c=o.dim,d=r.getRect(),h=[d.x,d.x+d.width,d.y,d.y+d.height],f={left:0,right:1,top:0,bottom:1,onZero:2},p=t.get("offset")||0,m="x"===c?[h[2]-p,h[3]+p]:[h[0]-p,h[1]+p];if(s){var g=s.toGlobalCoord(s.dataToCoord(0));m[f.onZero]=Math.max(Math.min(g,m[1]),m[0])}a.position=["y"===c?m[f[u]]:h[0],"x"===c?m[f[u]]:h[3]],a.rotation=Math.PI/2*("x"===c?0:1),a.labelDirection=a.tickDirection=a.nameDirection={top:-1,bottom:1,left:-1,right:1}[l],a.labelOffset=s?m[f[l]]-m[f.onZero]:0,t.get("axisTick.inside")&&(a.tickDirection=-a.tickDirection),i.retrieve(n.labelInside,t.get("axisLabel.inside"))&&(a.labelDirection=-a.labelDirection);var v=t.get("axisLabel.rotate");return a.labelRotate="top"===u?-v:v,a.z2=1,a}},"./node_modules/echarts/lib/coord/geo/Region.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/BoundingRect.js"),r=n("./node_modules/zrender/lib/core/bbox.js"),o=n("./node_modules/zrender/lib/core/vector.js"),a=n("./node_modules/zrender/lib/contain/polygon.js");function s(e,t,n){if(this.name=e,this.geometries=t,n)n=[n[0],n[1]];else{var i=this.getBoundingRect();n=[i.x+i.width/2,i.y+i.height/2]}this.center=n}s.prototype={constructor:s,properties:null,getBoundingRect:function(){var e=this._rect;if(e)return e;for(var t=Number.MAX_VALUE,n=[t,t],a=[-t,-t],s=[],l=[],u=this.geometries,c=0;c<u.length;c++)if("polygon"===u[c].type){var d=u[c].exterior;r.fromPoints(d,s,l),o.min(n,n,s),o.max(a,a,l)}return 0===c&&(n[0]=n[1]=a[0]=a[1]=0),this._rect=new i(n[0],n[1],a[0]-n[0],a[1]-n[1])},contain:function(e){var t=this.getBoundingRect(),n=this.geometries;if(!t.contain(e[0],e[1]))return!1;e:for(var i=0,r=n.length;i<r;i++)if("polygon"===n[i].type){var o=n[i].exterior,s=n[i].interiors;if(a.contain(o,e[0],e[1])){for(var l=0;l<(s?s.length:0);l++)if(a.contain(s[l]))continue e;return!0}}return!1},transformTo:function(e,t,n,r){var a=this.getBoundingRect(),s=a.width/a.height;n?r||(r=n/s):n=s*r;for(var l=new i(e,t,n,r),u=a.calculateTransform(l),c=this.geometries,d=0;d<c.length;d++)if("polygon"===c[d].type){for(var h=c[d].exterior,f=c[d].interiors,p=0;p<h.length;p++)o.applyTransform(h[p],h[p],u);for(var m=0;m<(f?f.length:0);m++)for(p=0;p<f[m].length;p++)o.applyTransform(f[m][p],f[m][p],u)}(a=this._rect).copy(l),this.center=[a.x+a.width/2,a.y+a.height/2]}};var l=s;e.exports=l},"./node_modules/echarts/lib/coord/geo/parseGeoJson.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/coord/geo/Region.js");function o(e,t,n){for(var i=[],r=t[0],o=t[1],a=0;a<e.length;a+=2){var s=e.charCodeAt(a)-64,l=e.charCodeAt(a+1)-64;s=s>>1^-(1&s),l=l>>1^-(1&l),r=s+=r,o=l+=o,i.push([s/n,l/n])}return i}e.exports=function(e){return function(e){if(!e.UTF8Encoding)return e;var t=e.UTF8Scale;null==t&&(t=1024);for(var n=e.features,i=0;i<n.length;i++)for(var r=n[i].geometry,a=r.coordinates,s=r.encodeOffsets,l=0;l<a.length;l++){var u=a[l];if("Polygon"===r.type)a[l]=o(u,s[l],t);else if("MultiPolygon"===r.type)for(var c=0;c<u.length;c++){var d=u[c];u[c]=o(d,s[l][c],t)}}e.UTF8Encoding=!1}(e),i.map(i.filter(e.features,function(e){return e.geometry&&e.properties&&e.geometry.coordinates.length>0}),function(e){var t=e.properties,n=e.geometry,o=n.coordinates,a=[];"Polygon"===n.type&&a.push({type:"polygon",exterior:o[0],interiors:o.slice(1)}),"MultiPolygon"===n.type&&i.each(o,function(e){e[0]&&a.push({type:"polygon",exterior:e[0],interiors:e.slice(1)})});var s=new r(t.name,a,t.cp);return s.properties=t,s})}},"./node_modules/echarts/lib/data/DataDiffer.js":function(e,t){function n(e){return e}function i(e,t,i,r,o){this._old=e,this._new=t,this._oldKeyGetter=i||n,this._newKeyGetter=r||n,this.context=o}function r(e,t,n,i,r){for(var o=0;o<e.length;o++){var a="_ec_"+r[i](e[o],o),s=t[a];null==s?(n.push(a),t[a]=o):(s.length||(t[a]=s=[s]),s.push(o))}}i.prototype={constructor:i,add:function(e){return this._add=e,this},update:function(e){return this._update=e,this},remove:function(e){return this._remove=e,this},execute:function(){var e=this._old,t=this._new,n={},i=[],o=[];for(r(e,{},i,"_oldKeyGetter",this),r(t,n,o,"_newKeyGetter",this),a=0;a<e.length;a++){if(null!=(l=n[s=i[a]]))(c=l.length)?(1===c&&(n[s]=null),l=l.unshift()):n[s]=null,this._update&&this._update(l,a);else this._remove&&this._remove(a)}for(var a=0;a<o.length;a++){var s=o[a];if(n.hasOwnProperty(s)){var l;if(null==(l=n[s]))continue;if(l.length)for(var u=0,c=l.length;u<c;u++)this._add&&this._add(l[u]);else this._add&&this._add(l)}}}};var o=i;e.exports=o},"./node_modules/echarts/lib/data/List.js":function(e,t,n){n("./node_modules/echarts/lib/config.js").__DEV__;var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/model/Model.js"),o=n("./node_modules/echarts/lib/data/DataDiffer.js"),a=n("./node_modules/echarts/lib/data/Source.js"),s=n("./node_modules/echarts/lib/data/helper/dataProvider.js"),l=s.defaultDimValueGetters,u=s.DefaultDataProvider,c=n("./node_modules/echarts/lib/data/helper/dimensionHelper.js").summarizeDimensions,d=i.isObject,h="e\0\0",f={float:"undefined"==typeof Float64Array?Array:Float64Array,int:"undefined"==typeof Int32Array?Array:Int32Array,ordinal:Array,number:Array,time:Array},p="undefined"==typeof Uint32Array?Array:Uint32Array,m="undefined"==typeof Uint16Array?Array:Uint16Array;function g(e){return e._rawCount>65535?p:m}function v(e){var t=e.constructor;return t===Array?e.slice():new t(e)}var y=["hasItemOption","_nameList","_idList","_invertedIndicesMap","_rawData","_chunkSize","_chunkCount","_dimValueGetter","_count","_rawCount","_nameDimIdx","_idDimIdx"],_=["_extent","_approximateExtent","_rawExtent"];function x(e,t){i.each(y.concat(t.__wrappedMethods||[]),function(n){t.hasOwnProperty(n)&&(e[n]=t[n])}),e.__wrappedMethods=t.__wrappedMethods,i.each(_,function(n){e[n]=i.clone(t[n])}),e._calculationInfo=i.extend(t._calculationInfo)}var b=function(e,t){e=e||["x","y"];for(var n={},r=[],o={},a=0;a<e.length;a++){var s=e[a];i.isString(s)&&(s={name:s});var l=s.name;s.type=s.type||"float",s.coordDim||(s.coordDim=l,s.coordDimIndex=0),s.otherDims=s.otherDims||{},r.push(l),n[l]=s,s.index=a,s.createInvertedIndices&&(o[l]=[])}this.dimensions=r,this._dimensionInfos=n,this.hostModel=t,this.dataType,this._indices=null,this._count=0,this._rawCount=0,this._storage={},this._nameList=[],this._idList=[],this._optionModels=[],this._visual={},this._layout={},this._itemVisuals=[],this.hasItemVisual={},this._itemLayouts=[],this._graphicEls=[],this._chunkSize=1e5,this._chunkCount=0,this._rawData,this._rawExtent={},this._extent={},this._approximateExtent={},this._dimensionsSummary=c(this),this._invertedIndicesMap=o,this._calculationInfo={}},w=b.prototype;function S(e,t,n){var i;if(null!=t){var r=e._chunkSize,o=Math.floor(n/r),a=n%r,s=e.dimensions[t],l=e._storage[s][o];if(l){i=l[a];var u=e._dimensionInfos[s].ordinalMeta;u&&u.categories.length&&(i=u.categories[i])}}return i}function A(e){return e}function T(e){return e<this._count&&e>=0?this._indices[e]:-1}function C(e,t){var n=e._idList[t];return null==n&&(n=S(e,e._idDimIdx,t)),null==n&&(n=h+t),n}function j(e){return i.isArray(e)||(e=[e]),e}function M(e,t){var n=e.dimensions,r=new b(i.map(n,e.getDimensionInfo,e),e.hostModel);x(r,e);for(var o=r._storage={},a=e._storage,s=0;s<n.length;s++){var l=n[s];a[l]&&(i.indexOf(t,l)>=0?(o[l]=k(a[l]),r._rawExtent[l]=D(),r._extent[l]=null):o[l]=a[l])}return r}function k(e){for(var t=new Array(e.length),n=0;n<e.length;n++)t[n]=v(e[n]);return t}function D(){return[1/0,-1/0]}w.type="list",w.hasItemOption=!0,w.getDimension=function(e){return isNaN(e)||(e=this.dimensions[e]||e),e},w.getDimensionInfo=function(e){return this._dimensionInfos[this.getDimension(e)]},w.getDimensionsOnCoord=function(){return this._dimensionsSummary.dataDimsOnCoord.slice()},w.mapDimension=function(e,t){var n=this._dimensionsSummary;if(null==t)return n.encodeFirstDimNotExtra[e];var i=n.encode[e];return!0===t?(i||[]).slice():i&&i[t]},w.initData=function(e,t,n){(a.isInstance(e)||i.isArrayLike(e))&&(e=new u(e,this.dimensions.length)),this._rawData=e,this._storage={},this._indices=null,this._nameList=t||[],this._idList=[],this._nameRepeatCount={},n||(this.hasItemOption=!1),this.defaultDimValueGetter=l[this._rawData.getSource().sourceFormat],this._dimValueGetter=n=n||this.defaultDimValueGetter,this._rawExtent={},this._initDataFromProvider(0,e.count()),e.pure&&(this.hasItemOption=!1)},w.getProvider=function(){return this._rawData},w.appendData=function(e){var t=this._rawData,n=this.count();t.appendData(e);var i=t.count();t.persistent||(i+=n),this._initDataFromProvider(n,i)},w._initDataFromProvider=function(e,t){if(!(e>=t)){for(var n,r=this._chunkSize,o=this._rawData,a=this._storage,s=this.dimensions,l=s.length,u=this._dimensionInfos,c=this._nameList,d=this._idList,h=this._rawExtent,m=this._nameRepeatCount={},g=this._chunkCount,v=g-1,y=0;y<l;y++){h[k=s[y]]||(h[k]=D());var _=u[k];0===_.otherDims.itemName&&(n=this._nameDimIdx=y),0===_.otherDims.itemId&&(this._idDimIdx=y);var x=f[_.type];a[k]||(a[k]=[]);var b=a[k][v];if(b&&b.length<r){for(var w=new x(Math.min(t-v*r,r)),S=0;S<b.length;S++)w[S]=b[S];a[k][v]=w}for(var A=g*r;A<t;A+=r)a[k].push(new x(Math.min(t-A,r)));this._chunkCount=a[k].length}for(var T=new Array(l),C=e;C<t;C++){T=o.getItem(C,T);var j=Math.floor(C/r),M=C%r;for(A=0;A<l;A++){var k,I=a[k=s[A]][j],P=this._dimValueGetter(T,k,C,A);I[M]=P;var z=h[k];P<z[0]&&(z[0]=P),P>z[1]&&(z[1]=P)}if(!o.pure){var E=c[C];if(T&&null==E)if(null!=T.name)c[C]=E=T.name;else if(null!=n){var O=s[n],L=a[O][j];if(L){E=L[M];var R=u[O].ordinalMeta;R&&R.categories.length&&(E=R.categories[E])}}var N=null==T?null:T.id;null==N&&null!=E&&(m[E]=m[E]||0,N=E,m[E]>0&&(N+="__ec__"+m[E]),m[E]++),null!=N&&(d[C]=N)}}!o.persistent&&o.clean&&o.clean(),this._rawCount=this._count=t,this._extent={},function(e){var t=e._invertedIndicesMap;i.each(t,function(n,i){var r=e._dimensionInfos[i],o=r.ordinalMeta;if(o){n=t[i]=new p(o.categories.length);for(var a=0;a<n.length;a++)n[a]=NaN;for(var a=0;a<e._count;a++)n[e.get(i,a)]=a}})}(this)}},w.count=function(){return this._count},w.getIndices=function(){var e=this._indices;if(e){var t=e.constructor,n=this._count;if(t===Array){r=new t(n);for(var i=0;i<n;i++)r[i]=e[i]}else r=new t(e.buffer,0,n)}else{var r=new(t=g(this))(this.count());for(i=0;i<r.length;i++)r[i]=i}return r},w.get=function(e,t){if(!(t>=0&&t<this._count))return NaN;var n=this._storage;if(!n[e])return NaN;t=this.getRawIndex(t);var i=Math.floor(t/this._chunkSize),r=t%this._chunkSize;return n[e][i][r]},w.getByRawIndex=function(e,t){if(!(t>=0&&t<this._rawCount))return NaN;var n=this._storage[e];if(!n)return NaN;var i=Math.floor(t/this._chunkSize),r=t%this._chunkSize;return n[i][r]},w._getFast=function(e,t){var n=Math.floor(t/this._chunkSize),i=t%this._chunkSize;return this._storage[e][n][i]},w.getValues=function(e,t){var n=[];i.isArray(e)||(t=e,e=this.dimensions);for(var r=0,o=e.length;r<o;r++)n.push(this.get(e[r],t));return n},w.hasValue=function(e){for(var t=this._dimensionsSummary.dataDimsOnCoord,n=this._dimensionInfos,i=0,r=t.length;i<r;i++)if("ordinal"!==n[t[i]].type&&isNaN(this.get(t[i],e)))return!1;return!0},w.getDataExtent=function(e){e=this.getDimension(e);var t=this._storage[e],n=D();if(!t)return n;var i,r=this.count();if(!this._indices)return this._rawExtent[e].slice();if(i=this._extent[e])return i.slice();for(var o=(i=n)[0],a=i[1],s=0;s<r;s++){var l=this._getFast(e,this.getRawIndex(s));l<o&&(o=l),l>a&&(a=l)}return i=[o,a],this._extent[e]=i,i},w.getApproximateExtent=function(e){return e=this.getDimension(e),this._approximateExtent[e]||this.getDataExtent(e)},w.setApproximateExtent=function(e,t){t=this.getDimension(t),this._approximateExtent[t]=e.slice()},w.getCalculationInfo=function(e){return this._calculationInfo[e]},w.setCalculationInfo=function(e,t){d(e)?i.extend(this._calculationInfo,e):this._calculationInfo[e]=t},w.getSum=function(e){var t=0;if(this._storage[e])for(var n=0,i=this.count();n<i;n++){var r=this.get(e,n);isNaN(r)||(t+=r)}return t},w.getMedian=function(e){var t=[];this.each(e,function(e,n){isNaN(e)||t.push(e)});var n=[].concat(t).sort(function(e,t){return e-t}),i=this.count();return 0===i?0:i%2==1?n[(i-1)/2]:(n[i/2]+n[i/2-1])/2},w.rawIndexOf=function(e,t){var n=(e&&this._invertedIndicesMap[e])[t];return null==n||isNaN(n)?-1:n},w.indexOfName=function(e){for(var t=0,n=this.count();t<n;t++)if(this.getName(t)===e)return t;return-1},w.indexOfRawIndex=function(e){if(!this._indices)return e;if(e>=this._rawCount||e<0)return-1;var t=this._indices,n=t[e];if(null!=n&&n<this._count&&n===e)return e;for(var i=0,r=this._count-1;i<=r;){var o=(i+r)/2|0;if(t[o]<e)i=o+1;else{if(!(t[o]>e))return o;r=o-1}}return-1},w.indicesOfNearest=function(e,t,n){var i=[];if(!this._storage[e])return i;null==n&&(n=1/0);for(var r=Number.MAX_VALUE,o=-1,a=0,s=this.count();a<s;a++){var l=t-this.get(e,a),u=Math.abs(l);l<=n&&u<=r&&((u<r||l>=0&&o<0)&&(r=u,o=l,i.length=0),i.push(a))}return i},w.getRawIndex=A,w.getRawDataItem=function(e){if(this._rawData.persistent)return this._rawData.getItem(this.getRawIndex(e));for(var t=[],n=0;n<this.dimensions.length;n++){var i=this.dimensions[n];t.push(this.get(i,e))}return t},w.getName=function(e){var t=this.getRawIndex(e);return this._nameList[t]||S(this,this._nameDimIdx,t)||""},w.getId=function(e){return C(this,this.getRawIndex(e))},w.each=function(e,t,n,r){"use strict";if(this._count){"function"==typeof e&&(r=n,n=t,t=e,e=[]),n=n||r||this;for(var o=(e=i.map(j(e),this.getDimension,this)).length,a=0;a<this.count();a++)switch(o){case 0:t.call(n,a);break;case 1:t.call(n,this.get(e[0],a),a);break;case 2:t.call(n,this.get(e[0],a),this.get(e[1],a),a);break;default:for(var s=0,l=[];s<o;s++)l[s]=this.get(e[s],a);l[s]=a,t.apply(n,l)}}},w.filterSelf=function(e,t,n,r){"use strict";if(this._count){"function"==typeof e&&(r=n,n=t,t=e,e=[]),n=n||r||this,e=i.map(j(e),this.getDimension,this);for(var o=this.count(),a=new(g(this))(o),s=[],l=e.length,u=0,c=e[0],d=0;d<o;d++){var h,f=this.getRawIndex(d);if(0===l)h=t.call(n,d);else if(1===l){var p=this._getFast(c,f);h=t.call(n,p,d)}else{for(var m=0;m<l;m++)s[m]=this._getFast(c,f);s[m]=d,h=t.apply(n,s)}h&&(a[u++]=f)}return u<o&&(this._indices=a),this._count=u,this._extent={},this.getRawIndex=this._indices?T:A,this}},w.selectRange=function(e){"use strict";if(this._count){var t=[];for(var n in e)e.hasOwnProperty(n)&&t.push(n);var i=t.length;if(i){var r=this.count(),o=new(g(this))(r),a=0,s=t[0],l=e[s][0],u=e[s][1],c=!1;if(!this._indices){var d=0;if(1===i){for(var h=this._storage[t[0]],f=0;f<this._chunkCount;f++)for(var p=h[f],m=Math.min(this._count-f*this._chunkSize,this._chunkSize),v=0;v<m;v++){((w=p[v])>=l&&w<=u||isNaN(w))&&(o[a++]=d),d++}c=!0}else if(2===i){h=this._storage[s];var y=this._storage[t[1]],_=e[t[1]][0],x=e[t[1]][1];for(f=0;f<this._chunkCount;f++){p=h[f];var b=y[f];for(m=Math.min(this._count-f*this._chunkSize,this._chunkSize),v=0;v<m;v++){var w=p[v],S=b[v];(w>=l&&w<=u||isNaN(w))&&(S>=_&&S<=x||isNaN(S))&&(o[a++]=d),d++}}c=!0}}if(!c)if(1===i)for(v=0;v<r;v++){var C=this.getRawIndex(v);((w=this._getFast(s,C))>=l&&w<=u||isNaN(w))&&(o[a++]=C)}else for(v=0;v<r;v++){var j=!0;for(C=this.getRawIndex(v),f=0;f<i;f++){var M=t[f];((w=this._getFast(n,C))<e[M][0]||w>e[M][1])&&(j=!1)}j&&(o[a++]=this.getRawIndex(v))}return a<r&&(this._indices=o),this._count=a,this._extent={},this.getRawIndex=this._indices?T:A,this}}},w.mapArray=function(e,t,n,i){"use strict";"function"==typeof e&&(i=n,n=t,t=e,e=[]),n=n||i||this;var r=[];return this.each(e,function(){r.push(t&&t.apply(this,arguments))},n),r},w.map=function(e,t,n,r){"use strict";n=n||r||this;var o=M(this,e=i.map(j(e),this.getDimension,this));o._indices=this._indices,o.getRawIndex=o._indices?T:A;for(var a=o._storage,s=[],l=this._chunkSize,u=e.length,c=this.count(),d=[],h=o._rawExtent,f=0;f<c;f++){for(var p=0;p<u;p++)d[p]=this.get(e[p],f);d[u]=f;var m=t&&t.apply(n,d);if(null!=m){"object"!=typeof m&&(s[0]=m,m=s);for(var g=this.getRawIndex(f),v=Math.floor(g/l),y=g%l,_=0;_<m.length;_++){var x=e[_],b=m[_],w=h[x],S=a[x];S&&(S[v][y]=b),b<w[0]&&(w[0]=b),b>w[1]&&(w[1]=b)}}}return o},w.downSample=function(e,t,n,i){for(var r=M(this,[e]),o=r._storage,a=[],s=Math.floor(1/t),l=o[e],u=this.count(),c=this._chunkSize,d=r._rawExtent[e],h=new(g(this))(u),f=0,p=0;p<u;p+=s){s>u-p&&(s=u-p,a.length=s);for(var m=0;m<s;m++){var v=this.getRawIndex(p+m),y=Math.floor(v/c),_=v%c;a[m]=l[y][_]}var x=n(a),b=this.getRawIndex(Math.min(p+i(a,x)||0,u-1)),w=b%c;l[Math.floor(b/c)][w]=x,x<d[0]&&(d[0]=x),x>d[1]&&(d[1]=x),h[f++]=b}return r._count=f,r._indices=h,r.getRawIndex=T,r},w.getItemModel=function(e){var t=this.hostModel;return new r(this.getRawDataItem(e),t,t&&t.ecModel)},w.diff=function(e){var t=this;return new o(e?e.getIndices():[],this.getIndices(),function(t){return C(e,t)},function(e){return C(t,e)})},w.getVisual=function(e){var t=this._visual;return t&&t[e]},w.setVisual=function(e,t){if(d(e))for(var n in e)e.hasOwnProperty(n)&&this.setVisual(n,e[n]);else this._visual=this._visual||{},this._visual[e]=t},w.setLayout=function(e,t){if(d(e))for(var n in e)e.hasOwnProperty(n)&&this.setLayout(n,e[n]);else this._layout[e]=t},w.getLayout=function(e){return this._layout[e]},w.getItemLayout=function(e){return this._itemLayouts[e]},w.setItemLayout=function(e,t,n){this._itemLayouts[e]=n?i.extend(this._itemLayouts[e]||{},t):t},w.clearItemLayouts=function(){this._itemLayouts.length=0},w.getItemVisual=function(e,t,n){var i=this._itemVisuals[e],r=i&&i[t];return null!=r||n?r:this.getVisual(t)},w.setItemVisual=function(e,t,n){var i=this._itemVisuals[e]||{},r=this.hasItemVisual;if(this._itemVisuals[e]=i,d(t))for(var o in t)t.hasOwnProperty(o)&&(i[o]=t[o],r[o]=!0);else i[t]=n,r[t]=!0},w.clearAllVisual=function(){this._visual={},this._itemVisuals=[],this.hasItemVisual={}};var I=function(e){e.seriesIndex=this.seriesIndex,e.dataIndex=this.dataIndex,e.dataType=this.dataType};w.setItemGraphicEl=function(e,t){var n=this.hostModel;t&&(t.dataIndex=e,t.dataType=this.dataType,t.seriesIndex=n&&n.seriesIndex,"group"===t.type&&t.traverse(I,t)),this._graphicEls[e]=t},w.getItemGraphicEl=function(e){return this._graphicEls[e]},w.eachItemGraphicEl=function(e,t){i.each(this._graphicEls,function(n,i){n&&e&&e.call(t,n,i)})},w.cloneShallow=function(e){if(!e){var t=i.map(this.dimensions,this.getDimensionInfo,this);e=new b(t,this.hostModel)}if(e._storage=this._storage,x(e,this),this._indices){var n=this._indices.constructor;e._indices=new n(this._indices)}else e._indices=null;return e.getRawIndex=e._indices?T:A,e},w.wrapMethod=function(e,t){var n=this[e];"function"==typeof n&&(this.__wrappedMethods=this.__wrappedMethods||[],this.__wrappedMethods.push(e),this[e]=function(){var e=n.apply(this,arguments);return t.apply(this,[e].concat(i.slice(arguments)))})},w.TRANSFERABLE_METHODS=["cloneShallow","downSample","map"],w.CHANGABLE_METHODS=["filterSelf","selectRange"];var P=b;e.exports=P},"./node_modules/echarts/lib/data/OrdinalMeta.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=i.createHashMap,o=i.isObject,a=i.map;function s(e){this.categories=e.categories||[],this._needCollect=e.needCollect,this._deduplication=e.deduplication,this._map}s.createByAxisModel=function(e){var t=e.option,n=t.data,i=n&&a(n,c);return new s({categories:i,needCollect:!i,deduplication:!1!==t.dedplication})};var l=s.prototype;function u(e){return e._map||(e._map=r(e.categories))}function c(e){return o(e)&&null!=e.value?e.value:e+""}l.getOrdinal=function(e){return u(this).get(e)},l.parseAndCollect=function(e){var t,n=this._needCollect;if("string"!=typeof e&&!n)return e;if(n&&!this._deduplication)return t=this.categories.length,this.categories[t]=e,t;var i=u(this);return null==(t=i.get(e))&&(n?(t=this.categories.length,this.categories[t]=e,i.set(e,t)):t=NaN),t};var d=s;e.exports=d},"./node_modules/echarts/lib/data/Source.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=i.createHashMap,o=i.isTypedArray,a=n("./node_modules/echarts/lib/util/clazz.js").enableClassCheck,s=n("./node_modules/echarts/lib/data/helper/sourceType.js"),l=s.SOURCE_FORMAT_ORIGINAL,u=s.SERIES_LAYOUT_BY_COLUMN,c=s.SOURCE_FORMAT_UNKNOWN,d=s.SOURCE_FORMAT_TYPED_ARRAY,h=s.SOURCE_FORMAT_KEYED_COLUMNS;function f(e){this.fromDataset=e.fromDataset,this.data=e.data||(e.sourceFormat===h?{}:[]),this.sourceFormat=e.sourceFormat||c,this.seriesLayoutBy=e.seriesLayoutBy||u,this.dimensionsDefine=e.dimensionsDefine,this.encodeDefine=e.encodeDefine&&r(e.encodeDefine),this.startIndex=e.startIndex||0,this.dimensionsDetectCount=e.dimensionsDetectCount}f.seriesDataToSource=function(e){return new f({data:e,sourceFormat:o(e)?d:l,fromDataset:!1})},a(f);var p=f;e.exports=p},"./node_modules/echarts/lib/data/helper/completeDimensions.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=i.createHashMap,o=i.each,a=i.isString,s=i.defaults,l=i.extend,u=i.isObject,c=i.clone,d=n("./node_modules/echarts/lib/util/model.js").normalizeToArray,h=n("./node_modules/echarts/lib/data/helper/sourceHelper.js").guessOrdinal,f=n("./node_modules/echarts/lib/data/Source.js"),p=n("./node_modules/echarts/lib/data/helper/dimensionHelper.js").OTHER_DIMENSIONS;function m(e,t,n){if(n||null!=t.get(e)){for(var i=0;null!=t.get(e+i);)i++;e+=i}return t.set(e,!0),e}var g=function(e,t,n){f.isInstance(t)||(t=f.seriesDataToSource(t)),n=n||{},e=(e||[]).slice();for(var i=(n.dimsDef||[]).slice(),g=r(n.encodeDef),v=r(),y=r(),_=[],x=function(e,t,n,i){var r=Math.max(e.dimensionsDetectCount||1,t.length,n.length,i||0);return o(t,function(e){var t=e.dimsDef;t&&(r=Math.max(r,t.length))}),r}(t,e,i,n.dimCount),b=0;b<x;b++){var w=i[b]=l({},u(i[b])?i[b]:{name:i[b]}),S=w.name,A=_[b]={otherDims:{}};null!=S&&null==v.get(S)&&(A.name=A.displayName=S,v.set(S,b)),null!=w.type&&(A.type=w.type),null!=w.displayName&&(A.displayName=w.displayName)}g.each(function(e,t){e=d(e).slice();var n=g.set(t,[]);o(e,function(e,i){a(e)&&(e=v.get(e)),null!=e&&e<x&&(n[i]=e,C(_[e],t,i))})});var T=0;function C(e,t,n){null!=p.get(t)?e.otherDims[t]=n:(e.coordDim=t,e.coordDimIndex=n,y.set(t,!0))}o(e,function(e,t){var n,i,r;if(a(e))n=e,e={};else{n=e.name;var l=e.ordinalMeta;e.ordinalMeta=null,(e=c(e)).ordinalMeta=l,i=e.dimsDef,r=e.otherDims,e.name=e.coordDim=e.coordDimIndex=e.dimsDef=e.otherDims=null}var h=d(g.get(n));if(!h.length)for(var f=0;f<(i&&i.length||1);f++){for(;T<_.length&&null!=_[T].coordDim;)T++;T<_.length&&h.push(T++)}o(h,function(t,o){var a=_[t];if(C(s(a,e),n,o),null==a.name&&i){var l=i[o];!u(l)&&(l={name:l}),a.name=a.displayName=l.name,a.defaultTooltip=l.defaultTooltip}r&&s(a.otherDims,r)})});var j=n.generateCoord,M=n.generateCoordCount,k=null!=M;M=j?M||1:0;for(var D=j||"value",I=0;I<x;I++)null==(A=_[I]=_[I]||{}).coordDim&&(A.coordDim=m(D,y,k),A.coordDimIndex=0,(!j||M<=0)&&(A.isExtraCoord=!0),M--),null==A.name&&(A.name=m(A.coordDim,v)),null==A.type&&h(t,I,A.name)&&(A.type="ordinal");return _};e.exports=g},"./node_modules/echarts/lib/data/helper/createDimensions.js":function(e,t,n){var i=n("./node_modules/echarts/lib/data/helper/completeDimensions.js");e.exports=function(e,t){return i((t=t||{}).coordDimensions||[],e,{dimsDef:t.dimensionsDefine||e.dimensionsDefine,encodeDef:t.encodeDefine||e.encodeDefine,dimCount:t.dimensionsCount,generateCoord:t.generateCoord,generateCoordCount:t.generateCoordCount})}},"./node_modules/echarts/lib/data/helper/dataProvider.js":function(e,t,n){n("./node_modules/echarts/lib/config.js").__DEV__;var i=n("./node_modules/zrender/lib/core/util.js"),r=(i.isTypedArray,i.extend),o=(i.assert,i.each),a=i.isObject,s=n("./node_modules/echarts/lib/util/model.js"),l=s.getDataItemValue,u=s.isDataItemOption,c=n("./node_modules/echarts/lib/util/number.js").parseDate,d=n("./node_modules/echarts/lib/data/Source.js"),h=n("./node_modules/echarts/lib/data/helper/sourceType.js"),f=h.SOURCE_FORMAT_TYPED_ARRAY,p=h.SOURCE_FORMAT_ARRAY_ROWS,m=h.SOURCE_FORMAT_ORIGINAL,g=h.SOURCE_FORMAT_OBJECT_ROWS;function v(e,t){d.isInstance(e)||(e=d.seriesDataToSource(e)),this._source=e;var n=this._data=e.data,i=e.sourceFormat;i===f&&(this._offset=0,this._dimSize=t,this._data=n);var o=_[i===p?i+"_"+e.seriesLayoutBy:i];r(this,o)}var y=v.prototype;y.pure=!1,y.persistent=!0,y.getSource=function(){return this._source};var _={arrayRows_column:{pure:!0,count:function(){return Math.max(0,this._data.length-this._source.startIndex)},getItem:function(e){return this._data[e+this._source.startIndex]},appendData:w},arrayRows_row:{pure:!0,count:function(){var e=this._data[0];return e?Math.max(0,e.length-this._source.startIndex):0},getItem:function(e){e+=this._source.startIndex;for(var t=[],n=this._data,i=0;i<n.length;i++){var r=n[i];t.push(r?r[e]:null)}return t},appendData:function(){throw new Error('Do not support appendData when set seriesLayoutBy: "row".')}},objectRows:{pure:!0,count:x,getItem:b,appendData:w},keyedColumns:{pure:!0,count:function(){var e=this._source.dimensionsDefine[0].name,t=this._data[e];return t?t.length:0},getItem:function(e){for(var t=[],n=this._source.dimensionsDefine,i=0;i<n.length;i++){var r=this._data[n[i].name];t.push(r?r[e]:null)}return t},appendData:function(e){var t=this._data;o(e,function(e,n){for(var i=t[n]||(t[n]=[]),r=0;r<(e||[]).length;r++)i.push(e[r])})}},original:{count:x,getItem:b,appendData:w},typedArray:{persistent:!1,pure:!0,count:function(){return this._data?this._data.length/this._dimSize:0},getItem:function(e,t){e-=this._offset,t=t||[];for(var n=this._dimSize*e,i=0;i<this._dimSize;i++)t[i]=this._data[n+i];return t},appendData:function(e){this._data=e},clean:function(){this._offset+=this.count(),this._data=null}}};function x(){return this._data.length}function b(e){return this._data[e]}function w(e){for(var t=0;t<e.length;t++)this._data.push(e[t])}var S={arrayRows:A,objectRows:function(e,t,n,i){return null!=n?e[i]:e},keyedColumns:A,original:function(e,t,n,i){var r=l(e);return null!=n&&r instanceof Array?r[n]:r},typedArray:A};function A(e,t,n,i){return null!=n?e[n]:e}var T={arrayRows:C,objectRows:function(e,t,n,i){return j(e[t],this._dimensionInfos[t])},keyedColumns:C,original:function(e,t,n,i){var r=e&&(null==e.value?e:e.value);return!this._rawData.pure&&u(e)&&(this.hasItemOption=!0),j(r instanceof Array?r[i]:r,this._dimensionInfos[t])},typedArray:function(e,t,n,i){return e[i]}};function C(e,t,n,i){return j(e[i],this._dimensionInfos[t])}function j(e,t){var n=t&&t.type;if("ordinal"===n){var i=t&&t.ordinalMeta;return i?i.parseAndCollect(e):e}return"time"===n&&"number"!=typeof e&&null!=e&&"-"!==e&&(e=+c(e)),null==e||""===e?NaN:+e}t.DefaultDataProvider=v,t.defaultDimValueGetters=T,t.retrieveRawValue=function(e,t,n){if(e){var i=e.getRawDataItem(t);if(null!=i){var r,o,a=e.getProvider().getSource().sourceFormat,s=e.getDimensionInfo(n);return s&&(r=s.name,o=s.index),S[a](i,t,o,r)}}},t.retrieveRawAttr=function(e,t,n){if(e){var i=e.getProvider().getSource().sourceFormat;if(i===m||i===g){var r=e.getRawDataItem(t);return i!==m||a(r)||(r=null),r?r[n]:void 0}}}},"./node_modules/echarts/lib/data/helper/dataStackHelper.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=i.each,o=i.isString;function a(e,t){return!!t&&t===e.getCalculationInfo("stackedDimension")}t.enableDataStack=function(e,t,n){var i,a,s,l,u=(n=n||{}).byIndex,c=n.stackedCoordDimension,d=!(!e||!e.get("stack"));if(r(t,function(e,n){o(e)&&(t[n]=e={name:e}),d&&!e.isExtraCoord&&(u||i||!e.ordinalMeta||(i=e),a||"ordinal"===e.type||"time"===e.type||c&&c!==e.coordDim||(a=e))}),!a||u||i||(u=!0),a){s="__\0ecstackresult",l="__\0ecstackedover",i&&(i.createInvertedIndices=!0);var h=a.coordDim,f=a.type,p=0;r(t,function(e){e.coordDim===h&&p++}),t.push({name:s,coordDim:h,coordDimIndex:p,type:f,isExtraCoord:!0,isCalculationCoord:!0}),p++,t.push({name:l,coordDim:l,coordDimIndex:p,type:f,isExtraCoord:!0,isCalculationCoord:!0})}return{stackedDimension:a&&a.name,stackedByDimension:i&&i.name,isStackedByIndex:u,stackedOverDimension:l,stackResultDimension:s}},t.isDimensionStacked=a,t.getStackedDimension=function(e,t){return a(e,t)?e.getCalculationInfo("stackResultDimension"):t}},"./node_modules/echarts/lib/data/helper/dimensionHelper.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=i.each,o=i.createHashMap,a=(i.assert,n("./node_modules/echarts/lib/config.js").__DEV__,o(["tooltip","label","itemName","itemId","seriesName"]));t.OTHER_DIMENSIONS=a,t.summarizeDimensions=function(e){var t={},n=t.encode={},i=o(),s=[],l=[];r(e.dimensions,function(t){var r=e.getDimensionInfo(t),o=r.coordDim;if(o){var u=n[o];n.hasOwnProperty(o)||(u=n[o]=[]),u[r.coordDimIndex]=t,r.isExtraCoord||(i.set(o,1),function(e){return!("ordinal"===e||"time"===e)}(r.type)&&(s[0]=t)),r.defaultTooltip&&l.push(t)}a.each(function(e,t){var i=n[t];n.hasOwnProperty(t)||(i=n[t]=[]);var o=r.otherDims[t];null!=o&&!1!==o&&(i[o]=r.name)})});var u=[],c={};i.each(function(e,t){var i=n[t];c[t]=i[0],u=u.concat(i)}),t.dataDimsOnCoord=u,t.encodeFirstDimNotExtra=c;var d=n.label;d&&d.length&&(s=d.slice());var h=n.tooltip;return h&&h.length?l=h.slice():l.length||(l=s.slice()),n.defaultedLabel=s,n.defaultedTooltip=l,t},t.getDimensionTypeByAxis=function(e){return"category"===e?"ordinal":"time"===e?"time":"float"}},"./node_modules/echarts/lib/data/helper/sourceHelper.js":function(e,t,n){n("./node_modules/echarts/lib/config.js").__DEV__;var i=n("./node_modules/echarts/lib/util/model.js"),r=i.makeInner,o=i.getDataItemValue,a=n("./node_modules/echarts/lib/model/referHelper.js").getCoordSysDefineBySeries,s=n("./node_modules/zrender/lib/core/util.js"),l=s.createHashMap,u=s.each,c=s.map,d=s.isArray,h=s.isString,f=s.isObject,p=s.isTypedArray,m=s.isArrayLike,g=s.extend,v=(s.assert,n("./node_modules/echarts/lib/data/Source.js")),y=n("./node_modules/echarts/lib/data/helper/sourceType.js"),_=y.SOURCE_FORMAT_ORIGINAL,x=y.SOURCE_FORMAT_ARRAY_ROWS,b=y.SOURCE_FORMAT_OBJECT_ROWS,w=y.SOURCE_FORMAT_KEYED_COLUMNS,S=y.SOURCE_FORMAT_UNKNOWN,A=y.SOURCE_FORMAT_TYPED_ARRAY,T=y.SERIES_LAYOUT_BY_ROW,C=r();function j(e){if(e){var t=l();return c(e,function(e,n){if(null==(e=g({},f(e)?e:{name:e})).name)return e;e.name+="",null==e.displayName&&(e.displayName=e.name);var i=t.get(e.name);return i?e.name+="-"+i.count++:t.set(e.name,{count:1}),e})}}function M(e,t,n,i){if(null==i&&(i=1/0),t===T)for(var r=0;r<n.length&&r<i;r++)e(n[r]?n[r][0]:null,r);else{var o=n[0]||[];for(r=0;r<o.length&&r<i;r++)e(o[r],r)}}function k(e,t,n,i,r,a){var s,l;if(p(e))return!1;if(i&&(l=i[a],l=f(l)?l.name:l),t===x)if(n===T){for(var u=e[a],c=0;c<(u||[]).length&&c<5;c++)if(null!=(s=y(u[r+c])))return s}else for(c=0;c<e.length&&c<5;c++){var m=e[r+c];if(m&&null!=(s=y(m[a])))return s}else if(t===b){if(!l)return;for(c=0;c<e.length&&c<5;c++){if((g=e[c])&&null!=(s=y(g[l])))return s}}else if(t===w){if(!l)return;if(!(u=e[l])||p(u))return!1;for(c=0;c<u.length&&c<5;c++)if(null!=(s=y(u[c])))return s}else if(t===_)for(c=0;c<e.length&&c<5;c++){var g=e[c],v=o(g);if(!d(v))return!1;if(null!=(s=y(v[a])))return s}function y(e){return(null==e||!isFinite(e)||""===e)&&(!(!h(e)||"-"===e)||void 0)}return!1}t.detectSourceFormat=function(e){var t=e.option.source,n=S;if(p(t))n=A;else if(d(t))for(var i=0,r=t.length;i<r;i++){var o=t[i];if(null!=o){if(d(o)){n=x;break}if(f(o)){n=b;break}}}else if(f(t)){for(var a in t)if(t.hasOwnProperty(a)&&m(t[a])){n=w;break}}else if(null!=t)throw new Error("Invalid data");C(e).sourceFormat=n},t.getSource=function(e){return C(e).source},t.resetSourceDefaulter=function(e){C(e).datasetMap=l()},t.prepareSource=function(e){var t=e.option,n=t.data,i=p(n)?A:_,r=!1,s=t.seriesLayoutBy,c=t.sourceHeader,m=t.dimensions,g=function(e){var t=e.option;if(!t.data)return e.ecModel.getComponent("dataset",t.datasetIndex||0)}(e);if(g){var y=g.option;n=y.source,i=C(g).sourceFormat,r=!0,s=s||y.seriesLayoutBy,null==c&&(c=y.sourceHeader),m=m||y.dimensions}var S=function(e,t,n,i,r){if(!e)return{dimensionsDefine:j(r)};var a,s,l,c;if(t===x)"auto"===i||null==i?M(function(e){null!=e&&"-"!==e&&(h(e)?null==s&&(s=1):s=0)},n,e,10):s=i?1:0,r||1!==s||(r=[],M(function(e,t){r[t]=null!=e?e:""},n,e)),a=r?r.length:n===T?e.length:e[0]?e[0].length:null;else if(t===b)r||(r=function(e){for(var t,n=0;n<e.length&&!(t=e[n++]););if(t){var i=[];return u(t,function(e,t){i.push(t)}),i}}(e),l=!0);else if(t===w)r||(r=[],l=!0,u(e,function(e,t){r.push(t)}));else if(t===_){var p=o(e[0]);a=d(p)&&p.length||1}return l&&u(r,function(e,t){"name"===(f(e)?e.name:e)&&(c=t)}),{startIndex:s,dimensionsDefine:j(r),dimensionsDetectCount:a,potentialNameDimIndex:c}}(n,i,s,c,m),D=t.encode;!D&&g&&(D=function(e,t,n,i,r,o){var s=a(e),c={},d=[],h=[],f=e.subType,p=l(["pie","map","funnel"]),m=l(["line","bar","pictorialBar","scatter","effectScatter","candlestick","boxplot"]);if(s&&null!=m.get(f)){var g=e.ecModel,v=C(g).datasetMap,y=t.uid+"_"+r,_=v.get(y)||v.set(y,{categoryWayDim:1,valueWayDim:0});u(s.coordSysDims,function(e){if(null==s.firstCategoryDimIndex){var t=_.valueWayDim++;c[e]=t,h.push(t)}else if(s.categoryAxisMap.get(e))c[e]=0,d.push(0);else{var t=_.categoryWayDim++;c[e]=t,h.push(t)}})}else if(null!=p.get(f)){for(var x,b=0;b<5&&null==x;b++)k(n,i,r,o.dimensionsDefine,o.startIndex,b)||(x=b);if(null!=x){c.value=x;var w=o.potentialNameDimIndex||Math.max(x-1,0);h.push(w),d.push(w)}}return d.length&&(c.itemName=d),h.length&&(c.seriesName=h),c}(e,g,n,i,s,S)),C(e).source=new v({data:n,fromDataset:r,seriesLayoutBy:s,sourceFormat:i,dimensionsDefine:S.dimensionsDefine,startIndex:S.startIndex,dimensionsDetectCount:S.dimensionsDetectCount,encodeDefine:D})},t.guessOrdinal=function(e,t){return k(e.data,e.sourceFormat,e.seriesLayoutBy,e.dimensionsDefine,e.startIndex,t)}},"./node_modules/echarts/lib/data/helper/sourceType.js":function(e,t){t.SOURCE_FORMAT_ORIGINAL="original",t.SOURCE_FORMAT_ARRAY_ROWS="arrayRows",t.SOURCE_FORMAT_OBJECT_ROWS="objectRows",t.SOURCE_FORMAT_KEYED_COLUMNS="keyedColumns",t.SOURCE_FORMAT_UNKNOWN="unknown",t.SOURCE_FORMAT_TYPED_ARRAY="typedArray",t.SERIES_LAYOUT_BY_COLUMN="column",t.SERIES_LAYOUT_BY_ROW="row"},"./node_modules/echarts/lib/echarts.js":function(e,t,n){n("./node_modules/echarts/lib/config.js").__DEV__;var i=n("./node_modules/zrender/lib/zrender.js"),r=n("./node_modules/zrender/lib/core/util.js"),o=n("./node_modules/zrender/lib/tool/color.js"),a=n("./node_modules/zrender/lib/core/env.js"),s=n("./node_modules/zrender/lib/core/timsort.js"),l=n("./node_modules/zrender/lib/mixin/Eventful.js"),u=n("./node_modules/echarts/lib/model/Global.js"),c=n("./node_modules/echarts/lib/ExtensionAPI.js"),d=n("./node_modules/echarts/lib/CoordinateSystem.js"),h=n("./node_modules/echarts/lib/model/OptionManager.js"),f=n("./node_modules/echarts/lib/preprocessor/backwardCompat.js"),p=n("./node_modules/echarts/lib/processor/dataStack.js"),m=n("./node_modules/echarts/lib/model/Component.js"),g=n("./node_modules/echarts/lib/model/Series.js"),v=n("./node_modules/echarts/lib/view/Component.js"),y=n("./node_modules/echarts/lib/view/Chart.js"),_=n("./node_modules/echarts/lib/util/graphic.js"),x=n("./node_modules/echarts/lib/util/model.js"),b=n("./node_modules/echarts/lib/util/throttle.js").throttle,w=n("./node_modules/echarts/lib/visual/seriesColor.js"),S=n("./node_modules/echarts/lib/visual/aria.js"),A=n("./node_modules/echarts/lib/loading/default.js"),T=n("./node_modules/echarts/lib/stream/Scheduler.js"),C=n("./node_modules/echarts/lib/theme/light.js"),j=n("./node_modules/echarts/lib/theme/dark.js");n("./node_modules/echarts/lib/component/dataset.js");var M=r.assert,k=r.each,D=r.isFunction,I=r.isObject,P=m.parseClassType,z=1e3,E=1e3,O=3e3,L={PROCESSOR:{FILTER:z,STATISTIC:5e3},VISUAL:{LAYOUT:E,GLOBAL:2e3,CHART:O,COMPONENT:4e3,BRUSH:5e3}},R="__flagInMainProcess",N="__optionUpdated",B=/^[a-zA-Z0-9_]+$/;function H(e){return function(t,n,i){t=t&&t.toLowerCase(),l.prototype[e].call(this,t,n,i)}}function F(){l.call(this)}function W(e,t,n){n=n||{},"string"==typeof t&&(t=de[t]),this.id,this.group,this._dom=e;var o=this._zr=i.init(e,{renderer:n.renderer||"canvas",devicePixelRatio:n.devicePixelRatio,width:n.width,height:n.height});this._throttledZrFlush=b(r.bind(o.flush,o),17),(t=r.clone(t))&&f(t,!0),this._theme=t,this._chartsViews=[],this._chartsMap={},this._componentsViews=[],this._componentsMap={},this._coordSysMgr=new d;var a=this._api=function(e){var t=e._coordSysMgr;return r.extend(new c(e),{getCoordinateSystems:r.bind(t.getCoordinateSystems,t),getComponentByElement:function(t){for(;t;){var n=t.__ecComponentInfo;if(null!=n)return e._model.getComponent(n.mainType,n.index);t=t.parent}}})}(this);function u(e,t){return e.__prio-t.__prio}s(ce,u),s(se,u),this._scheduler=new T(this,a,se,ce),l.call(this),this._messageCenter=new F,this._initEvents(),this.resize=r.bind(this.resize,this),this._pendingActions=[],o.animation.on("frame",this._onframe,this),function(e,t){e.on("rendered",function(){t.trigger("rendered"),!e.animation.isFinished()||t[N]||t._scheduler.unfinished||t._pendingActions.length||t.trigger("finished")})}(o,this),r.setAsPrimitive(this)}F.prototype.on=H("on"),F.prototype.off=H("off"),F.prototype.one=H("one"),r.mixin(F,l);var V=W.prototype;function q(e,t,n){var i,r=this._model,o=this._coordSysMgr.getCoordinateSystems();t=x.parseFinder(r,t);for(var a=0;a<o.length;a++){var s=o[a];if(s[e]&&null!=(i=s[e](r,t,n)))return i}}V._onframe=function(){if(!this._disposed){var e=this._scheduler;if(this[N]){var t=this[N].silent;this[R]=!0,G(this),U.update.call(this),this[R]=!1,this[N]=!1,Z.call(this,t),Q.call(this,t)}else if(e.unfinished){var n=1,i=this._model,r=this._api;e.unfinished=!1;do{var o=+new Date;e.performSeriesTasks(i),e.performDataProcessorTasks(i),X(this,i),e.performVisualTasks(i),te(this,this._model,r,"remain"),n-=+new Date-o}while(n>0&&e.unfinished);e.unfinished||this._zr.flush()}}},V.getDom=function(){return this._dom},V.getZr=function(){return this._zr},V.setOption=function(e,t,n){var i;if(I(t)&&(n=t.lazyUpdate,i=t.silent,t=t.notMerge),this[R]=!0,!this._model||t){var r=new h(this._api),o=this._theme,a=this._model=new u(null,null,o,r);a.scheduler=this._scheduler,a.init(null,null,o,r)}this._model.setOption(e,le),n?(this[N]={silent:i},this[R]=!1):(G(this),U.update.call(this),this._zr.flush(),this[N]=!1,this[R]=!1,Z.call(this,i),Q.call(this,i))},V.setTheme=function(){console.log("ECharts#setTheme() is DEPRECATED in ECharts 3.0")},V.getModel=function(){return this._model},V.getOption=function(){return this._model&&this._model.getOption()},V.getWidth=function(){return this._zr.getWidth()},V.getHeight=function(){return this._zr.getHeight()},V.getDevicePixelRatio=function(){return this._zr.painter.dpr||window.devicePixelRatio||1},V.getRenderedCanvas=function(e){if(a.canvasSupported)return(e=e||{}).pixelRatio=e.pixelRatio||1,e.backgroundColor=e.backgroundColor||this._model.get("backgroundColor"),this._zr.painter.getRenderedCanvas(e)},V.getSvgDataUrl=function(){if(a.svgSupported){var e=this._zr,t=e.storage.getDisplayList();return r.each(t,function(e){e.stopAnimation(!0)}),e.painter.pathToDataUrl()}},V.getDataURL=function(e){var t=(e=e||{}).excludeComponents,n=this._model,i=[],r=this;k(t,function(e){n.eachComponent({mainType:e},function(e){var t=r._componentsMap[e.__viewId];t.group.ignore||(i.push(t),t.group.ignore=!0)})});var o="svg"===this._zr.painter.getType()?this.getSvgDataUrl():this.getRenderedCanvas(e).toDataURL("image/"+(e&&e.type||"png"));return k(i,function(e){e.group.ignore=!1}),o},V.getConnectedDataURL=function(e){if(a.canvasSupported){var t=this.group,n=Math.min,o=Math.max;if(pe[t]){var s=1/0,l=1/0,u=-1/0,c=-1/0,d=[],h=e&&e.pixelRatio||1;r.each(fe,function(i,a){if(i.group===t){var h=i.getRenderedCanvas(r.clone(e)),f=i.getDom().getBoundingClientRect();s=n(f.left,s),l=n(f.top,l),u=o(f.right,u),c=o(f.bottom,c),d.push({dom:h,left:f.left,top:f.top})}});var f=(u*=h)-(s*=h),p=(c*=h)-(l*=h),m=r.createCanvas();m.width=f,m.height=p;var g=i.init(m);return k(d,function(e){var t=new _.Image({style:{x:e.left*h-s,y:e.top*h-l,image:e.dom}});g.add(t)}),g.refreshImmediately(),m.toDataURL("image/"+(e&&e.type||"png"))}return this.getDataURL(e)}},V.convertToPixel=r.curry(q,"convertToPixel"),V.convertFromPixel=r.curry(q,"convertFromPixel"),V.containPixel=function(e,t){var n,i=this._model;return e=x.parseFinder(i,e),r.each(e,function(e,i){i.indexOf("Models")>=0&&r.each(e,function(e){var r=e.coordinateSystem;if(r&&r.containPoint)n|=!!r.containPoint(t);else if("seriesModels"===i){var o=this._chartsMap[e.__viewId];o&&o.containPoint&&(n|=o.containPoint(t,e))}},this)},this),!!n},V.getVisual=function(e,t){var n=this._model,i=(e=x.parseFinder(n,e,{defaultMainType:"series"})).seriesModel.getData(),r=e.hasOwnProperty("dataIndexInside")?e.dataIndexInside:e.hasOwnProperty("dataIndex")?i.indexOfRawIndex(e.dataIndex):null;return null!=r?i.getItemVisual(r,t):i.getVisual(t)},V.getViewOfComponentModel=function(e){return this._componentsMap[e.__viewId]},V.getViewOfSeriesModel=function(e){return this._chartsMap[e.__viewId]};var U={prepareAndUpdate:function(e){G(this),U.update.call(this,e)},update:function(e){var t=this._model,n=this._api,i=this._zr,r=this._coordSysMgr,s=this._scheduler;if(t){s.restoreData(t,e),s.performSeriesTasks(t),r.create(t,n),s.performDataProcessorTasks(t,e),X(this,t),r.update(t,n),J(t),s.performVisualTasks(t,e),ee(this,t,n,e);var l=t.get("backgroundColor")||"transparent";if(a.canvasSupported)i.setBackgroundColor(l);else{var u=o.parse(l);l=o.stringify(u,"rgb"),0===u[3]&&(l="transparent")}ne(t,n)}},updateTransform:function(e){var t=this._model,n=this,i=this._api;if(t){var o=[];t.eachComponent(function(r,a){var s=n.getViewOfComponentModel(a);if(s&&s.__alive)if(s.updateTransform){var l=s.updateTransform(a,t,i,e);l&&l.update&&o.push(s)}else o.push(s)});var a=r.createHashMap();t.eachSeries(function(r){var o=n._chartsMap[r.__viewId];if(o.updateTransform){var s=o.updateTransform(r,t,i,e);s&&s.update&&a.set(r.uid,1)}else a.set(r.uid,1)}),J(t),this._scheduler.performVisualTasks(t,e,{setDirty:!0,dirtyMap:a}),te(n,t,i,e,a),ne(t,this._api)}},updateView:function(e){var t=this._model;t&&(y.markUpdateMethod(e,"updateView"),J(t),this._scheduler.performVisualTasks(t,e,{setDirty:!0}),ee(this,this._model,this._api,e),ne(t,this._api))},updateVisual:function(e){U.update.call(this,e)},updateLayout:function(e){U.update.call(this,e)}};function G(e){var t=e._model,n=e._scheduler;n.restorePipelines(t),n.prepareStageTasks(),K(e,"component",t,n),K(e,"chart",t,n),n.plan()}function Y(e,t,n,i,o){var a=e._model;if(i){var s={};s[i+"Id"]=n[i+"Id"],s[i+"Index"]=n[i+"Index"],s[i+"Name"]=n[i+"Name"];var l={mainType:i,query:s};o&&(l.subType=o);var u=n.excludeSeriesId;null!=u&&(u=r.createHashMap(x.normalizeToArray(u))),a&&a.eachComponent(l,function(t){u&&null!=u.get(t.id)||c(e["series"===i?"_chartsMap":"_componentsMap"][t.__viewId])},e)}else k(e._componentsViews.concat(e._chartsViews),c);function c(i){i&&i.__alive&&i[t]&&i[t](i.__model,a,e._api,n)}}function X(e,t){var n=e._chartsMap,i=e._scheduler;t.eachSeries(function(e){i.updateStreamModes(e,n[e.__viewId])})}function $(e,t){var n=e.type,i=e.escapeConnect,o=oe[n],a=o.actionInfo,s=(a.update||"update").split(":"),l=s.pop();s=null!=s[0]&&P(s[0]),this[R]=!0;var u=[e],c=!1;e.batch&&(c=!0,u=r.map(e.batch,function(t){return(t=r.defaults(r.extend({},t),e)).batch=null,t}));var d,h=[],f="highlight"===n||"downplay"===n;k(u,function(e){(d=(d=o.action(e,this._model,this._api))||r.extend({},e)).type=a.event||d.type,h.push(d),f?Y(this,l,e,"series"):s&&Y(this,l,e,s.main,s.sub)},this),"none"===l||f||s||(this[N]?(G(this),U.update.call(this,e),this[N]=!1):U[l].call(this,e)),d=c?{type:a.event||n,escapeConnect:i,batch:h}:h[0],this[R]=!1,!t&&this._messageCenter.trigger(d.type,d)}function Z(e){for(var t=this._pendingActions;t.length;){var n=t.shift();$.call(this,n,e)}}function Q(e){!e&&this.trigger("updated")}function K(e,t,n,i){for(var r="component"===t,o=r?e._componentsViews:e._chartsViews,a=r?e._componentsMap:e._chartsMap,s=e._zr,l=e._api,u=0;u<o.length;u++)o[u].__alive=!1;function c(e){var t="_ec_"+e.id+"_"+e.type,u=a[t];if(!u){var c=P(e.type);(u=new(r?v.getClass(c.main,c.sub):y.getClass(c.sub))).init(n,l),a[t]=u,o.push(u),s.add(u.group)}e.__viewId=u.__id=t,u.__alive=!0,u.__model=e,u.group.__ecComponentInfo={mainType:e.mainType,index:e.componentIndex},!r&&i.prepareView(u,e,n,l)}r?n.eachComponent(function(e,t){"series"!==e&&c(t)}):n.eachSeries(c);for(u=0;u<o.length;){var d=o[u];d.__alive?u++:(!r&&d.renderTask.dispose(),s.remove(d.group),d.dispose(n,l),o.splice(u,1),delete a[d.__id],d.__id=d.group.__ecComponentInfo=null)}}function J(e){e.clearColorPalette(),e.eachSeries(function(e){e.clearColorPalette()})}function ee(e,t,n,i){!function(e,t,n,i,r){k(r||e._componentsViews,function(e){var r=e.__model;e.render(r,t,n,i),re(r,e)})}(e,t,n,i),k(e._chartsViews,function(e){e.__alive=!1}),te(e,t,n,i),k(e._chartsViews,function(e){e.__alive||e.remove(t,n)})}function te(e,t,n,i,r){var o,s=e._scheduler;t.eachSeries(function(t){var n=e._chartsMap[t.__viewId];n.__alive=!0;var a=n.renderTask;s.updatePayload(a,i),r&&r.get(t.uid)&&a.dirty(),o|=a.perform(s.getPerformArgs(a)),n.group.silent=!!t.get("silent"),re(t,n),function(e,t){var n=e.get("blendMode")||null;t.group.traverse(function(e){e.isGroup||e.style.blend!==n&&e.setStyle("blend",n),e.eachPendingDisplayable&&e.eachPendingDisplayable(function(e){e.setStyle("blend",n)})})}(t,n)}),s.unfinished|=o,function(e,t){var n=e.storage,i=0;n.traverse(function(e){e.isGroup||i++}),i>t.get("hoverLayerThreshold")&&!a.node&&n.traverse(function(e){e.isGroup||(e.useHoverLayer=!0)})}(e._zr,t),S(e._zr.dom,t)}function ne(e,t){k(ue,function(n){n(e,t)})}V.resize=function(e){this._zr.resize(e);var t=this._model;if(this._loadingFX&&this._loadingFX.resize(),t){var n=t.resetOption("media"),i=e&&e.silent;this[R]=!0,n&&G(this),U.update.call(this),this[R]=!1,Z.call(this,i),Q.call(this,i)}},V.showLoading=function(e,t){if(I(e)&&(t=e,e=""),e=e||"default",this.hideLoading(),he[e]){var n=he[e](this._api,t),i=this._zr;this._loadingFX=n,i.add(n)}},V.hideLoading=function(){this._loadingFX&&this._zr.remove(this._loadingFX),this._loadingFX=null},V.makeActionFromEvent=function(e){var t=r.extend({},e);return t.type=ae[e.type],t},V.dispatchAction=function(e,t){I(t)||(t={silent:!!t}),oe[e.type]&&this._model&&(this[R]?this._pendingActions.push(e):($.call(this,e,t.silent),t.flush?this._zr.flush(!0):!1!==t.flush&&a.browser.weChat&&this._throttledZrFlush(),Z.call(this,t.silent),Q.call(this,t.silent)))},V.appendData=function(e){var t=e.seriesIndex;this.getModel().getSeriesByIndex(t).appendData(e),this._scheduler.unfinished=!0},V.on=H("on"),V.off=H("off"),V.one=H("one");var ie=["click","dblclick","mouseover","mouseout","mousemove","mousedown","mouseup","globalout","contextmenu"];function re(e,t){var n=e.get("z"),i=e.get("zlevel");t.group.traverse(function(e){"group"!==e.type&&(null!=n&&(e.z=n),null!=i&&(e.zlevel=i))})}V._initEvents=function(){k(ie,function(e){this._zr.on(e,function(t){var n,i=this.getModel(),o=t.target;if("globalout"===e)n={};else if(o&&null!=o.dataIndex){var a=o.dataModel||i.getSeriesByIndex(o.seriesIndex);n=a&&a.getDataParams(o.dataIndex,o.dataType)||{}}else o&&o.eventData&&(n=r.extend({},o.eventData));n&&(n.event=t,n.type=e,this.trigger(e,n))},this)},this),k(ae,function(e,t){this._messageCenter.on(t,function(e){this.trigger(t,e)},this)},this)},V.isDisposed=function(){return this._disposed},V.clear=function(){this.setOption({series:[]},!0)},V.dispose=function(){if(!this._disposed){this._disposed=!0,x.setAttribute(this.getDom(),ve,"");var e=this._api,t=this._model;k(this._componentsViews,function(n){n.dispose(t,e)}),k(this._chartsViews,function(n){n.dispose(t,e)}),this._zr.dispose(),delete fe[this.id]}},r.mixin(W,l);var oe={},ae={},se=[],le=[],ue=[],ce=[],de={},he={},fe={},pe={},me=new Date-0,ge=new Date-0,ve="_echarts_instance_",ye={};function _e(e){pe[e]=!1}var xe=_e;function be(e){return fe[x.getAttribute(e,ve)]}function we(e,t){de[e]=t}function Se(e){le.push(e)}function Ae(e,t){je(se,e,t,z)}function Te(e,t,n){"function"==typeof t&&(n=t,t="");var i=I(e)?e.type:[e,e={event:t}][0];e.event=(e.event||i).toLowerCase(),t=e.event,M(B.test(i)&&B.test(t)),oe[i]||(oe[i]={action:n,actionInfo:e}),ae[t]=i}function Ce(e,t){je(ce,e,t,O,"visual")}function je(e,t,n,i,r){(D(t)||I(t))&&(n=t,t=i);var o=T.wrapStageHandler(n,r);return o.__prio=t,o.__raw=n,e.push(o),o}function Me(e,t){he[e]=t}Ce(2e3,w),Se(f),Ae(5e3,p),Me("default",A),Te({type:"highlight",event:"highlight",update:"highlight"},r.noop),Te({type:"downplay",event:"downplay",update:"downplay"},r.noop),we("light",C),we("dark",j);t.version="4.1.0",t.dependencies={zrender:"4.0.4"},t.PRIORITY=L,t.init=function(e,t,n){var i=be(e);if(i)return i;var r=new W(e,t,n);return r.id="ec_"+me++,fe[r.id]=r,x.setAttribute(e,ve,r.id),function(e){var t="__connectUpdateStatus";function n(e,n){for(var i=0;i<e.length;i++)e[i][t]=n}k(ae,function(i,r){e._messageCenter.on(r,function(i){if(pe[e.group]&&0!==e[t]){if(i&&i.escapeConnect)return;var r=e.makeActionFromEvent(i),o=[];k(fe,function(t){t!==e&&t.group===e.group&&o.push(t)}),n(o,0),k(o,function(e){1!==e[t]&&e.dispatchAction(r)}),n(o,2)}})})}(r),r},t.connect=function(e){if(r.isArray(e)){var t=e;e=null,k(t,function(t){null!=t.group&&(e=t.group)}),e=e||"g_"+ge++,k(t,function(t){t.group=e})}return pe[e]=!0,e},t.disConnect=_e,t.disconnect=xe,t.dispose=function(e){"string"==typeof e?e=fe[e]:e instanceof W||(e=be(e)),e instanceof W&&!e.isDisposed()&&e.dispose()},t.getInstanceByDom=be,t.getInstanceById=function(e){return fe[e]},t.registerTheme=we,t.registerPreprocessor=Se,t.registerProcessor=Ae,t.registerPostUpdate=function(e){ue.push(e)},t.registerAction=Te,t.registerCoordinateSystem=function(e,t){d.register(e,t)},t.getCoordinateSystemDimensions=function(e){var t=d.get(e);if(t)return t.getDimensionsInfo?t.getDimensionsInfo():t.dimensions.slice()},t.registerLayout=function(e,t){je(ce,e,t,E,"layout")},t.registerVisual=Ce,t.registerLoading=Me,t.extendComponentModel=function(e){return m.extend(e)},t.extendComponentView=function(e){return v.extend(e)},t.extendSeriesModel=function(e){return g.extend(e)},t.extendChartView=function(e){return y.extend(e)},t.setCanvasCreator=function(e){r.$override("createCanvas",e)},t.registerMap=function(e,t,n){t.geoJson&&!t.features&&(n=t.specialAreas,t=t.geoJson),"string"==typeof t&&(t="undefined"!=typeof JSON&&JSON.parse?JSON.parse(t):new Function("return ("+t+");")()),ye[e]={geoJson:t,specialAreas:n}},t.getMap=function(e){return ye[e]},t.dataTool={};var ke=n("./node_modules/echarts/lib/export.js");!function(){for(var e in ke)ke.hasOwnProperty(e)&&(t[e]=ke[e])}()},"./node_modules/echarts/lib/export.js":function(e,t,n){var i=n("./node_modules/zrender/lib/zrender.js");t.zrender=i;var r=n("./node_modules/zrender/lib/core/matrix.js");t.matrix=r;var o=n("./node_modules/zrender/lib/core/vector.js");t.vector=o;var a=n("./node_modules/zrender/lib/core/util.js"),s=n("./node_modules/zrender/lib/tool/color.js");t.color=s;var l=n("./node_modules/echarts/lib/util/graphic.js");t.graphic=l;var u=n("./node_modules/echarts/lib/util/number.js");t.number=u;var c=n("./node_modules/echarts/lib/util/format.js");t.format=c;var d=n("./node_modules/echarts/lib/util/throttle.js");d.throttle;t.throttle=d.throttle;var h=n("./node_modules/echarts/lib/helper.js");t.helper=h;var f=n("./node_modules/echarts/lib/coord/geo/parseGeoJson.js");t.parseGeoJSON=f;var p=n("./node_modules/echarts/lib/data/List.js");t.List=p;var m=n("./node_modules/echarts/lib/model/Model.js");t.Model=m;var g=n("./node_modules/echarts/lib/coord/Axis.js");t.Axis=g;var v=n("./node_modules/zrender/lib/core/env.js");t.env=v;var y=f,_={};a.each(["map","each","filter","indexOf","inherits","reduce","filter","bind","curry","isArray","isString","isObject","isFunction","extend","defaults","clone","merge"],function(e){_[e]=a[e]}),t.parseGeoJson=y,t.util=_},"./node_modules/echarts/lib/helper.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/chart/helper/createListFromArray.js"),o=n("./node_modules/echarts/lib/coord/axisHelper.js"),a=n("./node_modules/echarts/lib/coord/axisModelCommonMixin.js"),s=n("./node_modules/echarts/lib/model/Model.js"),l=n("./node_modules/echarts/lib/util/layout.js");l.getLayoutRect;t.getLayoutRect=l.getLayoutRect;var u=n("./node_modules/echarts/lib/data/helper/dataStackHelper.js"),c=u.enableDataStack,d=u.isDimensionStacked,h=u.getStackedDimension,f=n("./node_modules/echarts/lib/data/helper/completeDimensions.js");t.completeDimensions=f;var p=n("./node_modules/echarts/lib/data/helper/createDimensions.js");t.createDimensions=p;var m=n("./node_modules/echarts/lib/util/symbol.js");t.createSymbol=m.createSymbol;var g={isDimensionStacked:d,enableDataStack:c,getStackedDimension:h};t.createList=function(e){return r(e.getSource(),e)},t.dataStack=g,t.createScale=function(e,t){var n=t;s.isInstance(t)||(n=new s(t),i.mixin(n,a));var r=o.createScaleByModel(n);return r.setExtent(e[0],e[1]),o.niceScaleExtent(r,n),r},t.mixinAxisModelCommonMethods=function(e){i.mixin(e,a)}},"./node_modules/echarts/lib/lang.js":function(e,t){e.exports={toolbox:{brush:{title:{rect:"矩形选择",polygon:"圈选",lineX:"横向选择",lineY:"纵向选择",keep:"保持选择",clear:"清除选择"}},dataView:{title:"数据视图",lang:["数据视图","关闭","刷新"]},dataZoom:{title:{zoom:"区域缩放",back:"区域缩放还原"}},magicType:{title:{line:"切换为折线图",bar:"切换为柱状图",stack:"切换为堆叠",tiled:"切换为平铺"}},restore:{title:"还原"},saveAsImage:{title:"保存为图片",lang:["右键另存为图片"]}},series:{typeNames:{pie:"饼图",bar:"柱状图",line:"折线图",scatter:"散点图",effectScatter:"涟漪散点图",radar:"雷达图",tree:"树图",treemap:"矩形树图",boxplot:"箱型图",candlestick:"K线图",k:"K线图",heatmap:"热力图",map:"地图",parallel:"平行坐标图",lines:"线图",graph:"关系图",sankey:"桑基图",funnel:"漏斗图",gauge:"仪表盘图",pictorialBar:"象形柱图",themeRiver:"主题河流图",sunburst:"旭日图"}},aria:{general:{withTitle:"这是一个关于“{title}”的图表。",withoutTitle:"这是一个图表，"},series:{single:{prefix:"",withName:"图表类型是{seriesType}，表示{seriesName}。",withoutName:"图表类型是{seriesType}。"},multiple:{prefix:"它由{seriesCount}个图表系列组成。",withName:"第{seriesId}个系列是一个表示{seriesName}的{seriesType}，",withoutName:"第{seriesId}个系列是一个{seriesType}，",separator:{middle:"；",end:"。"}}},data:{allData:"其数据是——",partialData:"其中，前{displayCnt}项是——",withName:"{name}的数据是{value}",withoutName:"{value}",separator:{middle:"，",end:""}}}}},"./node_modules/echarts/lib/layout/barGrid.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/util/number.js").parsePercent,o=n("./node_modules/echarts/lib/data/helper/dataStackHelper.js").isDimensionStacked,a=n("./node_modules/echarts/lib/chart/helper/createRenderPlanner.js"),s="__ec_stack_",l="undefined"!=typeof Float32Array?Float32Array:Array;function u(e){return e.get("stack")||s+e.seriesIndex}function c(e){return e.dim+e.index}function d(e,t){var n=[];return t.eachSeriesByType(e,function(e){g(e)&&!v(e)&&n.push(e)}),n}function h(e){var t=[];return i.each(e,function(e){var n=e.getData(),i=e.coordinateSystem.getBaseAxis(),o=i.getExtent(),a="category"===i.type?i.getBandWidth():Math.abs(o[1]-o[0])/n.count(),s=r(e.get("barWidth"),a),l=r(e.get("barMaxWidth"),a),d=e.get("barGap"),h=e.get("barCategoryGap");t.push({bandWidth:a,barWidth:s,barMaxWidth:l,barGap:d,barCategoryGap:h,axisKey:c(i),stackId:u(e)})}),f(t)}function f(e){var t={};i.each(e,function(e,n){var i=e.axisKey,r=e.bandWidth,o=t[i]||{bandWidth:r,remainedWidth:r,autoWidthCount:0,categoryGap:"20%",gap:"30%",stacks:{}},a=o.stacks;t[i]=o;var s=e.stackId;a[s]||o.autoWidthCount++,a[s]=a[s]||{width:0,maxWidth:0};var l=e.barWidth;l&&!a[s].width&&(a[s].width=l,l=Math.min(o.remainedWidth,l),o.remainedWidth-=l);var u=e.barMaxWidth;u&&(a[s].maxWidth=u);var c=e.barGap;null!=c&&(o.gap=c);var d=e.barCategoryGap;null!=d&&(o.categoryGap=d)});var n={};return i.each(t,function(e,t){n[t]={};var o=e.stacks,a=e.bandWidth,s=r(e.categoryGap,a),l=r(e.gap,1),u=e.remainedWidth,c=e.autoWidthCount,d=(u-s)/(c+(c-1)*l);d=Math.max(d,0),i.each(o,function(e,t){var n=e.maxWidth;n&&n<d&&(n=Math.min(n,u),e.width&&(n=Math.min(n,e.width)),u-=n,e.width=n,c--)}),d=(u-s)/(c+(c-1)*l),d=Math.max(d,0);var h,f=0;i.each(o,function(e,t){e.width||(e.width=d),h=e,f+=e.width*(1+l)}),h&&(f-=h.width*l);var p=-f/2;i.each(o,function(e,i){n[t][i]=n[t][i]||{offset:p,width:e.width},p+=e.width*(1+l)})}),n}function p(e,t,n){if(e&&t){var i=e[c(t)];return null!=i&&null!=n&&(i=i[u(n)]),i}}var m={seriesType:"bar",plan:a(),reset:function(e){if(g(e)&&v(e)){var t=e.getData(),n=e.coordinateSystem,i=n.getBaseAxis(),r=n.getOtherAxis(i),o=t.mapDimension(r.dim),a=t.mapDimension(i.dim),s=r.isHorizontal(),u=s?0:1,c=p(h([e]),i,e).width;return c>.5||(c=.5),{progress:function(e,t){var d,h=new l(2*e.count),f=[],p=[],m=0;for(;null!=(d=e.next());)p[u]=t.get(o,d),p[1-u]=t.get(a,d),f=n.dataToPoint(p,null,f),h[m++]=f[0],h[m++]=f[1];t.setLayout({largePoints:h,barWidth:c,valueAxisStart:y(i,r,!1),valueAxisHorizontal:s})}}}}};function g(e){return e.coordinateSystem&&"cartesian2d"===e.coordinateSystem.type}function v(e){return e.pipelineContext&&e.pipelineContext.large}function y(e,t,n){return i.indexOf(e.getAxesOnZeroOf(),t)>=0||n?t.toGlobalCoord(t.dataToCoord(0)):t.getGlobalExtent()[0]}t.getLayoutOnAxis=function(e){var t=[],n=e.axis;if("category"===n.type){for(var r=n.getBandWidth(),o=0;o<e.count;o++)t.push(i.defaults({bandWidth:r,axisKey:"axis0",stackId:s+o},e));var a=f(t),l=[];for(o=0;o<e.count;o++){var u=a.axis0[s+o];u.offsetCenter=u.offset+u.width/2,l.push(u)}return l}},t.prepareLayoutBarSeries=d,t.makeColumnLayout=h,t.retrieveColumnLayout=p,t.layout=function(e,t){var n=d(e,t),r=h(n),a={},s={};i.each(n,function(e){var t=e.getData(),n=e.coordinateSystem,i=n.getBaseAxis(),l=u(e),d=r[c(i)][l],h=d.offset,f=d.width,p=n.getOtherAxis(i),m=e.get("barMinHeight")||0;a[l]=a[l]||[],s[l]=s[l]||[],t.setLayout({offset:h,size:f});for(var g=t.mapDimension(p.dim),v=t.mapDimension(i.dim),_=o(t,g),x=p.isHorizontal(),b=y(i,p,_),w=0,S=t.count();w<S;w++){var A=t.get(g,w),T=t.get(v,w);if(!isNaN(A)){var C,j,M,k,D,I=A>=0?"p":"n",P=b;_&&(a[l][T]||(a[l][T]={p:b,n:b}),P=a[l][T][I]),x?(C=P,j=(D=n.dataToPoint([A,T]))[1]+h,M=D[0]-b,k=f,Math.abs(M)<m&&(M=(M<0?-1:1)*m),_&&(a[l][T][I]+=M)):(C=(D=n.dataToPoint([T,A]))[0]+h,j=P,M=f,k=D[1]-b,Math.abs(k)<m&&(k=(k<=0?-1:1)*m),_&&(a[l][T][I]+=k)),t.setItemLayout(w,{x:C,y:j,width:M,height:k})}}},this)},t.largeLayout=m},"./node_modules/echarts/lib/loading/default.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/util/graphic.js"),o=Math.PI;e.exports=function(e,t){t=t||{},i.defaults(t,{text:"loading",color:"#c23531",textColor:"#000",maskColor:"rgba(255, 255, 255, 0.8)",zlevel:0});var n=new r.Rect({style:{fill:t.maskColor},zlevel:t.zlevel,z:1e4}),a=new r.Arc({shape:{startAngle:-o/2,endAngle:-o/2+.1,r:10},style:{stroke:t.color,lineCap:"round",lineWidth:5},zlevel:t.zlevel,z:10001}),s=new r.Rect({style:{fill:"none",text:t.text,textPosition:"right",textDistance:10,textFill:t.textColor},zlevel:t.zlevel,z:10001});a.animateShape(!0).when(1e3,{endAngle:3*o/2}).start("circularInOut"),a.animateShape(!0).when(1e3,{startAngle:3*o/2}).delay(300).start("circularInOut");var l=new r.Group;return l.add(a),l.add(s),l.add(n),l.resize=function(){var t=e.getWidth()/2,i=e.getHeight()/2;a.setShape({cx:t,cy:i});var r=a.shape.r;s.setShape({x:t-r,y:i-r,width:2*r,height:2*r}),n.setShape({x:0,y:0,width:e.getWidth(),height:e.getHeight()})},l.resize(),l}},"./node_modules/echarts/lib/model/Component.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/model/Model.js"),o=n("./node_modules/echarts/lib/util/component.js"),a=n("./node_modules/echarts/lib/util/clazz.js"),s=a.enableClassManagement,l=a.parseClassType,u=n("./node_modules/echarts/lib/util/model.js").makeInner,c=n("./node_modules/echarts/lib/util/layout.js"),d=n("./node_modules/echarts/lib/model/mixin/boxLayout.js"),h=u(),f=r.extend({type:"component",id:"",name:"",mainType:"",subType:"",componentIndex:0,defaultOption:null,ecModel:null,dependentModels:[],uid:null,layoutMode:null,$constructor:function(e,t,n,i){r.call(this,e,t,n,i),this.uid=o.getUID("ec_cpt_model")},init:function(e,t,n,i){this.mergeDefaultAndTheme(e,n)},mergeDefaultAndTheme:function(e,t){var n=this.layoutMode,r=n?c.getLayoutParams(e):{},o=t.getTheme();i.merge(e,o.get(this.mainType)),i.merge(e,this.getDefaultOption()),n&&c.mergeLayoutParam(e,r,n)},mergeOption:function(e,t){i.merge(this.option,e,!0);var n=this.layoutMode;n&&c.mergeLayoutParam(this.option,e,n)},optionUpdated:function(e,t){},getDefaultOption:function(){var e=h(this);if(!e.defaultOption){for(var t=[],n=this.constructor;n;){var r=n.prototype.defaultOption;r&&t.push(r),n=n.superClass}for(var o={},a=t.length-1;a>=0;a--)o=i.merge(o,t[a],!0);e.defaultOption=o}return e.defaultOption},getReferringComponents:function(e){return this.ecModel.queryComponents({mainType:e,index:this.get(e+"Index",!0),id:this.get(e+"Id",!0)})}});s(f,{registerWhenExtend:!0}),o.enableSubTypeDefaulter(f),o.enableTopologicalTravel(f,function(e){var t=[];i.each(f.getClassesByMainType(e),function(e){t=t.concat(e.prototype.dependencies||[])}),t=i.map(t,function(e){return l(e).main}),"dataset"!==e&&i.indexOf(t,"dataset")<=0&&t.unshift("dataset");return t}),i.mixin(f,d);var p=f;e.exports=p},"./node_modules/echarts/lib/model/Global.js":function(e,t,n){n("./node_modules/echarts/lib/config.js").__DEV__;var i=n("./node_modules/zrender/lib/core/util.js"),r=i.each,o=i.filter,a=i.map,s=i.isArray,l=i.indexOf,u=i.isObject,c=i.isString,d=i.createHashMap,h=i.assert,f=i.clone,p=i.merge,m=i.extend,g=i.mixin,v=n("./node_modules/echarts/lib/util/model.js"),y=n("./node_modules/echarts/lib/model/Model.js"),_=n("./node_modules/echarts/lib/model/Component.js"),x=n("./node_modules/echarts/lib/model/globalDefault.js"),b=n("./node_modules/echarts/lib/model/mixin/colorPalette.js"),w=n("./node_modules/echarts/lib/data/helper/sourceHelper.js").resetSourceDefaulter,S="\0_ec_inner",A=y.extend({init:function(e,t,n,i){n=n||{},this.option=null,this._theme=new y(n),this._optionManager=i},setOption:function(e,t){h(!(S in e),"please use chart.getOption()"),this._optionManager.setOption(e,t),this.resetOption(null)},resetOption:function(e){var t=!1,n=this._optionManager;if(!e||"recreate"===e){var i=n.mountOption("recreate"===e);this.option&&"recreate"!==e?(this.restoreData(),this.mergeOption(i)):function(e){e=e,this.option={},this.option[S]=1,this._componentsMap=d({series:[]}),this._seriesIndices,this._seriesIndicesMap,function(e,t){var n=e.color&&!e.colorLayer;r(t,function(t,i){"colorLayer"===i&&n||_.hasClass(i)||("object"==typeof t?e[i]=e[i]?p(e[i],t,!1):f(t):null==e[i]&&(e[i]=t))})}(e,this._theme.option),p(e,x,!1),this.mergeOption(e)}.call(this,i),t=!0}if("timeline"!==e&&"media"!==e||this.restoreData(),!e||"recreate"===e||"timeline"===e){var o=n.getTimelineOption(this);o&&(this.mergeOption(o),t=!0)}if(!e||"recreate"===e||"media"===e){var a=n.getMediaOption(this,this._api);a.length&&r(a,function(e){this.mergeOption(e,t=!0)},this)}return t},mergeOption:function(e){var t=this.option,n=this._componentsMap,i=[];w(this),r(e,function(e,n){null!=e&&(_.hasClass(n)?n&&i.push(n):t[n]=null==t[n]?f(e):p(t[n],e,!0))}),_.topologicalTravel(i,_.getAllClassMainTypes(),function(i,o){var a=v.normalizeToArray(e[i]),l=v.mappingToExists(n.get(i),a);v.makeIdAndName(l),r(l,function(e,t){var n=e.option;u(n)&&(e.keyInfo.mainType=i,e.keyInfo.subType=function(e,t,n){return t.type?t.type:n?n.subType:_.determineSubType(e,t)}(i,n,e.exist))});var c=function(e,t){s(t)||(t=t?[t]:[]);var n={};return r(t,function(t){n[t]=(e.get(t)||[]).slice()}),n}(n,o);t[i]=[],n.set(i,[]),r(l,function(e,r){var o=e.exist,a=e.option;if(h(u(a)||o,"Empty component definition"),a){var s=_.getClass(i,e.keyInfo.subType,!0);if(o&&o instanceof s)o.name=e.keyInfo.name,o.mergeOption(a,this),o.optionUpdated(a,!1);else{var l=m({dependentModels:c,componentIndex:r},e.keyInfo);o=new s(a,this,this,l),m(o,l),o.init(a,this,this,l),o.optionUpdated(null,!0)}}else o.mergeOption({},this),o.optionUpdated({},!1);n.get(i)[r]=o,t[i][r]=o.option},this),"series"===i&&T(this,n.get("series"))},this),this._seriesIndicesMap=d(this._seriesIndices=this._seriesIndices||[])},getOption:function(){var e=f(this.option);return r(e,function(t,n){if(_.hasClass(n)){for(var i=(t=v.normalizeToArray(t)).length-1;i>=0;i--)v.isIdInner(t[i])&&t.splice(i,1);e[n]=t}}),delete e[S],e},getTheme:function(){return this._theme},getComponent:function(e,t){var n=this._componentsMap.get(e);if(n)return n[t||0]},queryComponents:function(e){var t=e.mainType;if(!t)return[];var n,i=e.index,r=e.id,u=e.name,c=this._componentsMap.get(t);if(!c||!c.length)return[];if(null!=i)s(i)||(i=[i]),n=o(a(i,function(e){return c[e]}),function(e){return!!e});else if(null!=r){var d=s(r);n=o(c,function(e){return d&&l(r,e.id)>=0||!d&&e.id===r})}else if(null!=u){var h=s(u);n=o(c,function(e){return h&&l(u,e.name)>=0||!h&&e.name===u})}else n=c.slice();return C(n,e)},findComponents:function(e){var t=e.query,n=e.mainType,i=function(e){var t=n+"Index",i=n+"Id",r=n+"Name";return!e||null==e[t]&&null==e[i]&&null==e[r]?null:{mainType:n,index:e[t],id:e[i],name:e[r]}}(t);return function(t){return e.filter?o(t,e.filter):t}(C(i?this.queryComponents(i):this._componentsMap.get(n),e))},eachComponent:function(e,t,n){var i=this._componentsMap;if("function"==typeof e)n=t,t=e,i.each(function(e,i){r(e,function(e,r){t.call(n,i,e,r)})});else if(c(e))r(i.get(e),t,n);else if(u(e)){var o=this.findComponents(e);r(o,t,n)}},getSeriesByName:function(e){var t=this._componentsMap.get("series");return o(t,function(t){return t.name===e})},getSeriesByIndex:function(e){return this._componentsMap.get("series")[e]},getSeriesByType:function(e){var t=this._componentsMap.get("series");return o(t,function(t){return t.subType===e})},getSeries:function(){return this._componentsMap.get("series").slice()},getSeriesCount:function(){return this._componentsMap.get("series").length},eachSeries:function(e,t){r(this._seriesIndices,function(n){var i=this._componentsMap.get("series")[n];e.call(t,i,n)},this)},eachRawSeries:function(e,t){r(this._componentsMap.get("series"),e,t)},eachSeriesByType:function(e,t,n){r(this._seriesIndices,function(i){var r=this._componentsMap.get("series")[i];r.subType===e&&t.call(n,r,i)},this)},eachRawSeriesByType:function(e,t,n){return r(this.getSeriesByType(e),t,n)},isSeriesFiltered:function(e){return null==this._seriesIndicesMap.get(e.componentIndex)},getCurrentSeriesIndices:function(){return(this._seriesIndices||[]).slice()},filterSeries:function(e,t){T(this,o(this._componentsMap.get("series"),e,t))},restoreData:function(e){var t=this._componentsMap;T(this,t.get("series"));var n=[];t.each(function(e,t){n.push(t)}),_.topologicalTravel(n,_.getAllClassMainTypes(),function(n,i){r(t.get(n),function(t){("series"!==n||!function(e,t){if(t){var n=t.seiresIndex,i=t.seriesId,r=t.seriesName;return null!=n&&e.componentIndex!==n||null!=i&&e.id!==i||null!=r&&e.name!==r}}(t,e))&&t.restoreData()})})}});function T(e,t){e._seriesIndicesMap=d(e._seriesIndices=a(t,function(e){return e.componentIndex})||[])}function C(e,t){return t.hasOwnProperty("subType")?o(e,function(e){return e.subType===t.subType}):e}g(A,b);var j=A;e.exports=j},"./node_modules/echarts/lib/model/Model.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/zrender/lib/core/env.js"),o=n("./node_modules/echarts/lib/util/model.js").makeInner,a=n("./node_modules/echarts/lib/util/clazz.js"),s=a.enableClassExtend,l=a.enableClassCheck,u=n("./node_modules/echarts/lib/model/mixin/lineStyle.js"),c=n("./node_modules/echarts/lib/model/mixin/areaStyle.js"),d=n("./node_modules/echarts/lib/model/mixin/textStyle.js"),h=n("./node_modules/echarts/lib/model/mixin/itemStyle.js"),f=i.mixin,p=o();function m(e,t,n){this.parentModel=t,this.ecModel=n,this.option=e}function g(e,t,n){for(var i=0;i<t.length&&(!t[i]||null!=(e=e&&"object"==typeof e?e[t[i]]:null));i++);return null==e&&n&&(e=n.get(t)),e}function v(e,t){var n=p(e).getParent;return n?n.call(e,t):e.parentModel}m.prototype={constructor:m,init:null,mergeOption:function(e){i.merge(this.option,e,!0)},get:function(e,t){return null==e?this.option:g(this.option,this.parsePath(e),!t&&v(this,e))},getShallow:function(e,t){var n=this.option,i=null==n?n:n[e],r=!t&&v(this,e);return null==i&&r&&(i=r.getShallow(e)),i},getModel:function(e,t){var n;return new m(null==e?this.option:g(this.option,e=this.parsePath(e)),t=t||(n=v(this,e))&&n.getModel(e),this.ecModel)},isEmpty:function(){return null==this.option},restoreData:function(){},clone:function(){return new(0,this.constructor)(i.clone(this.option))},setReadOnly:function(e){},parsePath:function(e){return"string"==typeof e&&(e=e.split(".")),e},customizeGetParent:function(e){p(this).getParent=e},isAnimationEnabled:function(){if(!r.node){if(null!=this.option.animation)return!!this.option.animation;if(this.parentModel)return this.parentModel.isAnimationEnabled()}}},s(m),l(m),f(m,u),f(m,c),f(m,d),f(m,h);var y=m;e.exports=y},"./node_modules/echarts/lib/model/OptionManager.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/util/model.js"),o=n("./node_modules/echarts/lib/model/Component.js"),a=i.each,s=i.clone,l=i.map,u=i.merge,c=/^(min|max)?(.+)$/;function d(e){this._api=e,this._timelineOptions=[],this._mediaList=[],this._mediaDefault,this._currentMediaIndices=[],this._optionBackup,this._newBaseOption}function h(e,t,n){var r={width:t,height:n,aspectratio:t/n},o=!0;return i.each(e,function(e,t){var n=t.match(c);if(n&&n[1]&&n[2]){var i=n[1],a=n[2].toLowerCase();(function(e,t,n){return"min"===n?e>=t:"max"===n?e<=t:e===t})(r[a],e,i)||(o=!1)}}),o}d.prototype={constructor:d,setOption:function(e,t){e&&i.each(r.normalizeToArray(e.series),function(e){e&&e.data&&i.isTypedArray(e.data)&&i.setAsPrimitive(e.data)}),e=s(e,!0);var n=this._optionBackup,c=function(e,t,n){var r,o,s=[],l=[],u=e.timeline;e.baseOption&&(o=e.baseOption);(u||e.options)&&(o=o||{},s=(e.options||[]).slice());if(e.media){o=o||{};var c=e.media;a(c,function(e){e&&e.option&&(e.query?l.push(e):r||(r=e))})}o||(o=e);o.timeline||(o.timeline=u);return a([o].concat(s).concat(i.map(l,function(e){return e.option})),function(e){a(t,function(t){t(e,n)})}),{baseOption:o,timelineOptions:s,mediaDefault:r,mediaList:l}}.call(this,e,t,!n);this._newBaseOption=c.baseOption,n?(!function(e,t){a(t=t||{},function(t,n){if(null!=t){var i=e[n];if(o.hasClass(n)){t=r.normalizeToArray(t),i=r.normalizeToArray(i);var a=r.mappingToExists(i,t);e[n]=l(a,function(e){return e.option&&e.exist?u(e.exist,e.option,!0):e.exist||e.option})}else e[n]=u(i,t,!0)}})}(n.baseOption,c.baseOption),c.timelineOptions.length&&(n.timelineOptions=c.timelineOptions),c.mediaList.length&&(n.mediaList=c.mediaList),c.mediaDefault&&(n.mediaDefault=c.mediaDefault)):this._optionBackup=c},mountOption:function(e){var t=this._optionBackup;return this._timelineOptions=l(t.timelineOptions,s),this._mediaList=l(t.mediaList,s),this._mediaDefault=s(t.mediaDefault),this._currentMediaIndices=[],s(e?t.baseOption:this._newBaseOption)},getTimelineOption:function(e){var t,n=this._timelineOptions;if(n.length){var i=e.getComponent("timeline");i&&(t=s(n[i.getCurrentIndex()],!0))}return t},getMediaOption:function(e){var t=this._api.getWidth(),n=this._api.getHeight(),i=this._mediaList,r=this._mediaDefault,o=[],a=[];if(!i.length&&!r)return a;for(var u=0,c=i.length;u<c;u++)h(i[u].query,t,n)&&o.push(u);return!o.length&&r&&(o=[-1]),o.length&&!function(e,t){return e.join(",")===t.join(",")}(o,this._currentMediaIndices)&&(a=l(o,function(e){return s(-1===e?r.option:i[e].option)})),this._currentMediaIndices=o,a}};var f=d;e.exports=f},"./node_modules/echarts/lib/model/Series.js":function(e,t,n){n("./node_modules/echarts/lib/config.js").__DEV__;var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/zrender/lib/core/env.js"),o=n("./node_modules/echarts/lib/util/format.js"),a=o.formatTime,s=o.encodeHTML,l=o.addCommas,u=o.getTooltipMarker,c=n("./node_modules/echarts/lib/util/model.js"),d=n("./node_modules/echarts/lib/model/Component.js"),h=n("./node_modules/echarts/lib/model/mixin/colorPalette.js"),f=n("./node_modules/echarts/lib/model/mixin/dataFormat.js"),p=n("./node_modules/echarts/lib/util/layout.js"),m=p.getLayoutParams,g=p.mergeLayoutParam,v=n("./node_modules/echarts/lib/stream/task.js").createTask,y=n("./node_modules/echarts/lib/data/helper/sourceHelper.js"),_=y.prepareSource,x=y.getSource,b=n("./node_modules/echarts/lib/data/helper/dataProvider.js").retrieveRawValue,w=c.makeInner(),S=d.extend({type:"series.__base__",seriesIndex:0,coordinateSystem:null,defaultOption:null,legendDataProvider:null,visualColorAccessPath:"itemStyle.color",layoutMode:null,init:function(e,t,n,i){this.seriesIndex=this.componentIndex,this.dataTask=v({count:T,reset:C}),this.dataTask.context={model:this},this.mergeDefaultAndTheme(e,n),_(this);var r=this.getInitialData(e,n);M(r,this),this.dataTask.context.data=r,w(this).dataBeforeProcessed=r,A(this)},mergeDefaultAndTheme:function(e,t){var n=this.layoutMode,r=n?m(e):{},o=this.subType;d.hasClass(o)&&(o+="Series"),i.merge(e,t.getTheme().get(this.subType)),i.merge(e,this.getDefaultOption()),c.defaultEmphasis(e,"label",["show"]),this.fillDataTextStyle(e.data),n&&g(e,r,n)},mergeOption:function(e,t){e=i.merge(this.option,e,!0),this.fillDataTextStyle(e.data);var n=this.layoutMode;n&&g(this.option,e,n),_(this);var r=this.getInitialData(e,t);M(r,this),this.dataTask.dirty(),this.dataTask.context.data=r,w(this).dataBeforeProcessed=r,A(this)},fillDataTextStyle:function(e){if(e&&!i.isTypedArray(e))for(var t=["show"],n=0;n<e.length;n++)e[n]&&e[n].label&&c.defaultEmphasis(e[n],"label",t)},getInitialData:function(){},appendData:function(e){this.getRawData().appendData(e.data)},getData:function(e){var t=D(this);if(t){var n=t.context.data;return null==e?n:n.getLinkedData(e)}return w(this).data},setData:function(e){var t=D(this);if(t){var n=t.context;n.data!==e&&t.modifyOutputEnd&&t.setOutputEnd(e.count()),n.outputData=e,t!==this.dataTask&&(n.data=e)}w(this).data=e},getSource:function(){return x(this)},getRawData:function(){return w(this).dataBeforeProcessed},getBaseAxis:function(){var e=this.coordinateSystem;return e&&e.getBaseAxis&&e.getBaseAxis()},formatTooltip:function(e,t,n){function r(e){return s(l(e))}var o=this.getData(),d=o.mapDimension("defaultedTooltip",!0),h=d.length,f=this.getRawValue(e),p=i.isArray(f),m=o.getItemVisual(e,"color");i.isObject(m)&&m.colorStops&&(m=(m.colorStops[0]||{}).color),m=m||"transparent";var g=h>1||p&&!h?function(n){var r=i.reduce(n,function(e,t,n){var i=o.getDimensionInfo(n);return e|(i&&!1!==i.tooltip&&null!=i.displayName)},0),c=[];function h(e,n){var i=o.getDimensionInfo(n);if(i&&!1!==i.otherDims.tooltip){var d=i.type,h=u({color:m,type:"subItem"}),f=(r?h+s(i.displayName||"-")+": ":"")+s("ordinal"===d?e+"":"time"===d?t?"":a("yyyy/MM/dd hh:mm:ss",e):l(e));f&&c.push(f)}}return d.length?i.each(d,function(t){h(b(o,e,t),t)}):i.each(n,h),(r?"<br/>":"")+c.join(r?"<br/>":", ")}(f):r(h?b(o,e,d[0]):p?f[0]:f),v=u(m),y=o.getName(e),_=this.name;return c.isNameSpecified(this)||(_=""),_=_?s(_)+(t?": ":"<br/>"):"",t?v+_+g:_+v+(y?s(y)+": "+g:g)},isAnimationEnabled:function(){if(r.node)return!1;var e=this.getShallow("animation");return e&&this.getData().count()>this.getShallow("animationThreshold")&&(e=!1),e},restoreData:function(){this.dataTask.dirty()},getColorFromPalette:function(e,t,n){var i=this.ecModel,r=h.getColorFromPalette.call(this,e,t,n);return r||(r=i.getColorFromPalette(e,t,n)),r},coordDimToDataDim:function(e){return this.getRawData().mapDimension(e,!0)},getProgressive:function(){return this.get("progressive")},getProgressiveThreshold:function(){return this.get("progressiveThreshold")},getAxisTooltipData:null,getTooltipPosition:null,pipeTask:null,preventIncremental:null,pipelineContext:null});function A(e){var t=e.name;c.isNameSpecified(e)||(e.name=function(e){var t=e.getRawData(),n=t.mapDimension("seriesName",!0),r=[];return i.each(n,function(e){var n=t.getDimensionInfo(e);n.displayName&&r.push(n.displayName)}),r.join(" ")}(e)||t)}function T(e){return e.model.getRawData().count()}function C(e){var t=e.model;return t.setData(t.getRawData().cloneShallow()),j}function j(e,t){e.end>t.outputData.count()&&t.model.getRawData().cloneShallow(t.outputData)}function M(e,t){i.each(e.CHANGABLE_METHODS,function(n){e.wrapMethod(n,i.curry(k,t))})}function k(e){var t=D(e);t&&t.setOutputEnd(this.count())}function D(e){var t=(e.ecModel||{}).scheduler,n=t&&t.getPipeline(e.uid);if(n){var i=n.currentTask;if(i){var r=i.agentStubMap;r&&(i=r.get(e.uid))}return i}}i.mixin(S,f),i.mixin(S,h);var I=S;e.exports=I},"./node_modules/echarts/lib/model/globalDefault.js":function(e,t){var n="";"undefined"!=typeof navigator&&(n=navigator.platform||"");var i={color:["#c23531","#2f4554","#61a0a8","#d48265","#91c7ae","#749f83","#ca8622","#bda29a","#6e7074","#546570","#c4ccd3"],gradientColor:["#f6efa6","#d88273","#bf444c"],textStyle:{fontFamily:n.match(/^Win/)?"Microsoft YaHei":"sans-serif",fontSize:12,fontStyle:"normal",fontWeight:"normal"},blendMode:null,animation:"auto",animationDuration:1e3,animationDurationUpdate:300,animationEasing:"exponentialOut",animationEasingUpdate:"cubicOut",animationThreshold:2e3,progressiveThreshold:3e3,progressive:400,hoverLayerThreshold:3e3,useUTC:!1};e.exports=i},"./node_modules/echarts/lib/model/mixin/areaStyle.js":function(e,t,n){var i=n("./node_modules/echarts/lib/model/mixin/makeStyleMapper.js")([["fill","color"],["shadowBlur"],["shadowOffsetX"],["shadowOffsetY"],["opacity"],["shadowColor"]]),r={getAreaStyle:function(e,t){return i(this,e,t)}};e.exports=r},"./node_modules/echarts/lib/model/mixin/boxLayout.js":function(e,t){e.exports={getBoxLayoutParams:function(){return{left:this.get("left"),top:this.get("top"),right:this.get("right"),bottom:this.get("bottom"),width:this.get("width"),height:this.get("height")}}}},"./node_modules/echarts/lib/model/mixin/colorPalette.js":function(e,t,n){var i=n("./node_modules/echarts/lib/util/model.js"),r=i.makeInner,o=i.normalizeToArray,a=r();var s={clearColorPalette:function(){a(this).colorIdx=0,a(this).colorNameMap={}},getColorFromPalette:function(e,t,n){var i=a(t=t||this),r=i.colorIdx||0,s=i.colorNameMap=i.colorNameMap||{};if(s.hasOwnProperty(e))return s[e];var l=o(this.get("color",!0)),u=this.get("colorLayer",!0),c=null!=n&&u?function(e,t){for(var n=e.length,i=0;i<n;i++)if(e[i].length>t)return e[i];return e[n-1]}(u,n):l;if((c=c||l)&&c.length){var d=c[r];return e&&(s[e]=d),i.colorIdx=(r+1)%c.length,d}}};e.exports=s},"./node_modules/echarts/lib/model/mixin/dataFormat.js":function(e,t,n){var i=n("./node_modules/echarts/lib/data/helper/dataProvider.js").retrieveRawValue,r=n("./node_modules/echarts/lib/util/format.js"),o=r.getTooltipMarker,a=r.formatTpl,s=/\{@(.+?)\}/g,l={getDataParams:function(e,t){var n=this.getData(t),i=this.getRawValue(e,t),r=n.getRawIndex(e),a=n.getName(e),s=n.getRawDataItem(e),l=n.getItemVisual(e,"color");return{componentType:this.mainType,componentSubType:this.subType,seriesType:"series"===this.mainType?this.subType:null,seriesIndex:this.seriesIndex,seriesId:this.id,seriesName:this.name,name:a,dataIndex:r,data:s,dataType:t,value:i,color:l,marker:o(l),$vars:["seriesName","name","value"]}},getFormattedLabel:function(e,t,n,r,o){t=t||"normal";var l=this.getData(n),u=l.getItemModel(e),c=this.getDataParams(e,n);null!=r&&c.value instanceof Array&&(c.value=c.value[r]);var d=u.get("normal"===t?[o||"label","formatter"]:[t,o||"label","formatter"]);return"function"==typeof d?(c.status=t,d(c)):"string"==typeof d?a(d,c).replace(s,function(t,n){var r=n.length;return"["===n.charAt(0)&&"]"===n.charAt(r-1)&&(n=+n.slice(1,r-1)),i(l,e,n)}):void 0},getRawValue:function(e,t){return i(this.getData(t),e)},formatTooltip:function(){}};e.exports=l},"./node_modules/echarts/lib/model/mixin/itemStyle.js":function(e,t,n){var i=n("./node_modules/echarts/lib/model/mixin/makeStyleMapper.js")([["fill","color"],["stroke","borderColor"],["lineWidth","borderWidth"],["opacity"],["shadowBlur"],["shadowOffsetX"],["shadowOffsetY"],["shadowColor"],["textPosition"],["textAlign"]]),r={getItemStyle:function(e,t){var n=i(this,e,t),r=this.getBorderLineDash();return r&&(n.lineDash=r),n},getBorderLineDash:function(){var e=this.get("borderType");return"solid"===e||null==e?null:"dashed"===e?[5,5]:[1,1]}};e.exports=r},"./node_modules/echarts/lib/model/mixin/lineStyle.js":function(e,t,n){var i=n("./node_modules/echarts/lib/model/mixin/makeStyleMapper.js")([["lineWidth","width"],["stroke","color"],["opacity"],["shadowBlur"],["shadowOffsetX"],["shadowOffsetY"],["shadowColor"]]),r={getLineStyle:function(e){var t=i(this,e),n=this.getLineDash(t.lineWidth);return n&&(t.lineDash=n),t},getLineDash:function(e){null==e&&(e=1);var t=this.get("type"),n=Math.max(e,2),i=4*e;return"solid"===t||null==t?null:"dashed"===t?[i,i]:[n,n]}};e.exports=r},"./node_modules/echarts/lib/model/mixin/makeStyleMapper.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js");e.exports=function(e){for(var t=0;t<e.length;t++)e[t][1]||(e[t][1]=e[t][0]);return function(t,n,r){for(var o={},a=0;a<e.length;a++){var s=e[a][1];if(!(n&&i.indexOf(n,s)>=0||r&&i.indexOf(r,s)<0)){var l=t.getShallow(s);null!=l&&(o[e[a][0]]=l)}}return o}}},"./node_modules/echarts/lib/model/mixin/textStyle.js":function(e,t,n){var i=n("./node_modules/zrender/lib/contain/text.js"),r=n("./node_modules/echarts/lib/util/graphic.js"),o=["textStyle","color"],a={getTextColor:function(e){var t=this.ecModel;return this.getShallow("color")||(!e&&t?t.get(o):null)},getFont:function(){return r.getFont({fontStyle:this.getShallow("fontStyle"),fontWeight:this.getShallow("fontWeight"),fontSize:this.getShallow("fontSize"),fontFamily:this.getShallow("fontFamily")},this.ecModel)},getTextRect:function(e){return i.getBoundingRect(e,this.getFont(),this.getShallow("align"),this.getShallow("verticalAlign")||this.getShallow("baseline"),this.getShallow("padding"),this.getShallow("rich"),this.getShallow("truncateText"))}};e.exports=a},"./node_modules/echarts/lib/model/referHelper.js":function(e,t,n){n("./node_modules/echarts/lib/config.js").__DEV__;var i=n("./node_modules/zrender/lib/core/util.js"),r=i.createHashMap,o=(i.retrieve,i.each);var a={cartesian2d:function(e,t,n,i){var r=e.getReferringComponents("xAxis")[0],o=e.getReferringComponents("yAxis")[0];t.coordSysDims=["x","y"],n.set("x",r),n.set("y",o),s(r)&&(i.set("x",r),t.firstCategoryDimIndex=0),s(o)&&(i.set("y",o),t.firstCategoryDimIndex=1)},singleAxis:function(e,t,n,i){var r=e.getReferringComponents("singleAxis")[0];t.coordSysDims=["single"],n.set("single",r),s(r)&&(i.set("single",r),t.firstCategoryDimIndex=0)},polar:function(e,t,n,i){var r=e.getReferringComponents("polar")[0],o=r.findAxisModel("radiusAxis"),a=r.findAxisModel("angleAxis");t.coordSysDims=["radius","angle"],n.set("radius",o),n.set("angle",a),s(o)&&(i.set("radius",o),t.firstCategoryDimIndex=0),s(a)&&(i.set("angle",a),t.firstCategoryDimIndex=1)},geo:function(e,t,n,i){t.coordSysDims=["lng","lat"]},parallel:function(e,t,n,i){var r=e.ecModel,a=r.getComponent("parallel",e.get("parallelIndex")),l=t.coordSysDims=a.dimensions.slice();o(a.parallelAxisIndex,function(e,o){var a=r.getComponent("parallelAxis",e),u=l[o];n.set(u,a),s(a)&&null==t.firstCategoryDimIndex&&(i.set(u,a),t.firstCategoryDimIndex=o)})}};function s(e){return"category"===e.get("type")}t.getCoordSysDefineBySeries=function(e){var t=e.get("coordinateSystem"),n={coordSysName:t,coordSysDims:[],axisMap:r(),categoryAxisMap:r()},i=a[t];if(i)return i(e,n,n.axisMap,n.categoryAxisMap),n}},"./node_modules/echarts/lib/preprocessor/backwardCompat.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=i.each,o=i.isArray,a=i.isObject,s=n("./node_modules/echarts/lib/preprocessor/helper/compatStyle.js"),l=n("./node_modules/echarts/lib/util/model.js").normalizeToArray;function u(e){r(c,function(t){t[0]in e&&!(t[1]in e)&&(e[t[1]]=e[t[0]])})}var c=[["x","left"],["y","top"],["x2","right"],["y2","bottom"]],d=["grid","geo","parallel","legend","toolbox","title","visualMap","dataZoom","timeline"];e.exports=function(e,t){s(e,t),e.series=l(e.series),r(e.series,function(e){if(a(e)){var t=e.type;if("pie"!==t&&"gauge"!==t||null!=e.clockWise&&(e.clockwise=e.clockWise),"gauge"===t){var n=function(e,t){t=t.split(",");for(var n=e,i=0;i<t.length&&null!=(n=n&&n[t[i]]);i++);return n}(e,"pointer.color");null!=n&&function(e,t,n,i){t=t.split(",");for(var r,o=e,a=0;a<t.length-1;a++)null==o[r=t[a]]&&(o[r]={}),o=o[r];(i||null==o[t[a]])&&(o[t[a]]=n)}(e,"itemStyle.normal.color",n)}u(e)}}),e.dataRange&&(e.visualMap=e.dataRange),r(d,function(t){var n=e[t];n&&(o(n)||(n=[n]),r(n,function(e){u(e)}))})}},"./node_modules/echarts/lib/preprocessor/helper/compatStyle.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/util/model.js"),o=i.each,a=i.isObject,s=["areaStyle","lineStyle","nodeStyle","linkStyle","chordStyle","label","labelLine"];function l(e){var t=e&&e.itemStyle;if(t)for(var n=0,r=s.length;n<r;n++){var o=s[n],a=t.normal,l=t.emphasis;a&&a[o]&&(e[o]=e[o]||{},e[o].normal?i.merge(e[o].normal,a[o]):e[o].normal=a[o],a[o]=null),l&&l[o]&&(e[o]=e[o]||{},e[o].emphasis?i.merge(e[o].emphasis,l[o]):e[o].emphasis=l[o],l[o]=null)}}function u(e,t,n){if(e&&e[t]&&(e[t].normal||e[t].emphasis)){var r=e[t].normal,o=e[t].emphasis;r&&(n?(e[t].normal=e[t].emphasis=null,i.defaults(e[t],r)):e[t]=r),o&&(e.emphasis=e.emphasis||{},e.emphasis[t]=o)}}function c(e){u(e,"itemStyle"),u(e,"lineStyle"),u(e,"areaStyle"),u(e,"label"),u(e,"labelLine"),u(e,"upperLabel"),u(e,"edgeLabel")}function d(e,t){var n=a(e)&&e[t],i=a(n)&&n.textStyle;if(i)for(var o=0,s=r.TEXT_STYLE_OPTIONS.length;o<s;o++){t=r.TEXT_STYLE_OPTIONS[o];i.hasOwnProperty(t)&&(n[t]=i[t])}}function h(e){e&&(c(e),d(e,"label"),e.emphasis&&d(e.emphasis,"label"))}function f(e){return i.isArray(e)?e:e?[e]:[]}function p(e){return(i.isArray(e)?e[0]:e)||{}}e.exports=function(e,t){o(f(e.series),function(e){a(e)&&function(e){if(a(e)){l(e),c(e),d(e,"label"),d(e,"upperLabel"),d(e,"edgeLabel"),e.emphasis&&(d(e.emphasis,"label"),d(e.emphasis,"upperLabel"),d(e.emphasis,"edgeLabel")),(n=e.markPoint)&&(l(n),h(n)),(r=e.markLine)&&(l(r),h(r));var t=e.markArea;t&&h(t);var n,r,o=e.data;if("graph"===e.type){o=o||e.nodes;var s=e.links||e.edges;if(s&&!i.isTypedArray(s))for(var f=0;f<s.length;f++)h(s[f]);i.each(e.categories,function(e){c(e)})}if(o&&!i.isTypedArray(o))for(f=0;f<o.length;f++)h(o[f]);if((n=e.markPoint)&&n.data){var p=n.data;for(f=0;f<p.length;f++)h(p[f])}if((r=e.markLine)&&r.data){var m=r.data;for(f=0;f<m.length;f++)i.isArray(m[f])?(h(m[f][0]),h(m[f][1])):h(m[f])}"gauge"===e.type?(d(e,"axisLabel"),d(e,"title"),d(e,"detail")):"treemap"===e.type?(u(e.breadcrumb,"itemStyle"),i.each(e.levels,function(e){c(e)})):"tree"===e.type&&c(e.leaves)}}(e)});var n=["xAxis","yAxis","radiusAxis","angleAxis","singleAxis","parallelAxis","radar"];t&&n.push("valueAxis","categoryAxis","logAxis","timeAxis"),o(n,function(t){o(f(e[t]),function(e){e&&(d(e,"axisLabel"),d(e.axisPointer,"label"))})}),o(f(e.parallel),function(e){var t=e&&e.parallelAxisDefault;d(t,"axisLabel"),d(t&&t.axisPointer,"label")}),o(f(e.calendar),function(e){u(e,"itemStyle"),d(e,"dayLabel"),d(e,"monthLabel"),d(e,"yearLabel")}),o(f(e.radar),function(e){d(e,"name")}),o(f(e.geo),function(e){a(e)&&(h(e),o(f(e.regions),function(e){h(e)}))}),o(f(e.timeline),function(e){h(e),u(e,"label"),u(e,"itemStyle"),u(e,"controlStyle",!0);var t=e.data;i.isArray(t)&&i.each(t,function(e){i.isObject(e)&&(u(e,"label"),u(e,"itemStyle"))})}),o(f(e.toolbox),function(e){u(e,"iconStyle"),o(e.feature,function(e){u(e,"iconStyle")})}),d(p(e.axisPointer),"label"),d(p(e.tooltip).axisPointer,"label")}},"./node_modules/echarts/lib/processor/dataFilter.js":function(e,t){e.exports=function(e){return{seriesType:e,reset:function(e,t){var n=t.findComponents({mainType:"legend"});if(n&&n.length){var i=e.getData();i.filterSelf(function(e){for(var t=i.getName(e),r=0;r<n.length;r++)if(!n[r].isSelected(t))return!1;return!0})}}}}},"./node_modules/echarts/lib/processor/dataStack.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=i.createHashMap,o=i.each;function a(e){o(e,function(t,n){var i=[],r=[NaN,NaN],o=[t.stackResultDimension,t.stackedOverDimension],a=t.data,s=t.isStackedByIndex,l=a.map(o,function(o,l,u){var c,d,h=a.get(t.stackedDimension,u);if(isNaN(h))return r;s?d=a.getRawIndex(u):c=a.get(t.stackedByDimension,u);for(var f=NaN,p=n-1;p>=0;p--){var m=e[p];if(s||(d=m.data.rawIndexOf(m.stackedByDimension,c)),d>=0){var g=m.data.getByRawIndex(m.stackResultDimension,d);if(h>=0&&g>0||h<=0&&g<0){h+=g,f=g;break}}}return i[0]=h,i[1]=f,i});a.hostModel.setData(l),t.data=l})}e.exports=function(e){var t=r();e.eachSeries(function(e){var n=e.get("stack");if(n){var i=t.get(n)||t.set(n,[]),r=e.getData(),o={stackResultDimension:r.getCalculationInfo("stackResultDimension"),stackedOverDimension:r.getCalculationInfo("stackedOverDimension"),stackedDimension:r.getCalculationInfo("stackedDimension"),stackedByDimension:r.getCalculationInfo("stackedByDimension"),isStackedByIndex:r.getCalculationInfo("isStackedByIndex"),data:r,seriesModel:e};if(!o.stackedDimension||!o.isStackedByIndex&&!o.stackedByDimension)return;i.length&&r.setCalculationInfo("stackedOnSeries",i[i.length-1].seriesModel),i.push(o)}}),t.each(a)}},"./node_modules/echarts/lib/scale/Interval.js":function(e,t,n){var i=n("./node_modules/echarts/lib/util/number.js"),r=n("./node_modules/echarts/lib/util/format.js"),o=n("./node_modules/echarts/lib/scale/Scale.js"),a=n("./node_modules/echarts/lib/scale/helper.js"),s=i.round,l=o.extend({type:"interval",_interval:0,_intervalPrecision:2,setExtent:function(e,t){var n=this._extent;isNaN(e)||(n[0]=parseFloat(e)),isNaN(t)||(n[1]=parseFloat(t))},unionExtent:function(e){var t=this._extent;e[0]<t[0]&&(t[0]=e[0]),e[1]>t[1]&&(t[1]=e[1]),l.prototype.setExtent.call(this,t[0],t[1])},getInterval:function(){return this._interval},setInterval:function(e){this._interval=e,this._niceExtent=this._extent.slice(),this._intervalPrecision=a.getIntervalPrecision(e)},getTicks:function(){return a.intervalScaleGetTicks(this._interval,this._extent,this._niceExtent,this._intervalPrecision)},getLabel:function(e,t){if(null==e)return"";var n=t&&t.precision;return null==n?n=i.getPrecisionSafe(e)||0:"auto"===n&&(n=this._intervalPrecision),e=s(e,n,!0),r.addCommas(e)},niceTicks:function(e,t,n){e=e||5;var i=this._extent,r=i[1]-i[0];if(isFinite(r)){r<0&&(r=-r,i.reverse());var o=a.intervalScaleNiceTicks(i,e,t,n);this._intervalPrecision=o.intervalPrecision,this._interval=o.interval,this._niceExtent=o.niceTickExtent}},niceExtent:function(e){var t=this._extent;if(t[0]===t[1])if(0!==t[0]){var n=t[0];e.fixMax?t[0]-=n/2:(t[1]+=n/2,t[0]-=n/2)}else t[1]=1;var i=t[1]-t[0];isFinite(i)||(t[0]=0,t[1]=1),this.niceTicks(e.splitNumber,e.minInterval,e.maxInterval);var r=this._interval;e.fixMin||(t[0]=s(Math.floor(t[0]/r)*r)),e.fixMax||(t[1]=s(Math.ceil(t[1]/r)*r))}});l.create=function(){return new l};var u=l;e.exports=u},"./node_modules/echarts/lib/scale/Log.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/scale/Scale.js"),o=n("./node_modules/echarts/lib/util/number.js"),a=n("./node_modules/echarts/lib/scale/Interval.js"),s=r.prototype,l=a.prototype,u=o.getPrecisionSafe,c=o.round,d=Math.floor,h=Math.ceil,f=Math.pow,p=Math.log,m=r.extend({type:"log",base:10,$constructor:function(){r.apply(this,arguments),this._originalScale=new a},getTicks:function(){var e=this._originalScale,t=this._extent,n=e.getExtent();return i.map(l.getTicks.call(this),function(i){var r=o.round(f(this.base,i));return r=i===t[0]&&e.__fixMin?g(r,n[0]):r,r=i===t[1]&&e.__fixMax?g(r,n[1]):r},this)},getLabel:l.getLabel,scale:function(e){return e=s.scale.call(this,e),f(this.base,e)},setExtent:function(e,t){var n=this.base;e=p(e)/p(n),t=p(t)/p(n),l.setExtent.call(this,e,t)},getExtent:function(){var e=this.base,t=s.getExtent.call(this);t[0]=f(e,t[0]),t[1]=f(e,t[1]);var n=this._originalScale,i=n.getExtent();return n.__fixMin&&(t[0]=g(t[0],i[0])),n.__fixMax&&(t[1]=g(t[1],i[1])),t},unionExtent:function(e){this._originalScale.unionExtent(e);var t=this.base;e[0]=p(e[0])/p(t),e[1]=p(e[1])/p(t),s.unionExtent.call(this,e)},unionExtentFromData:function(e,t){this.unionExtent(e.getApproximateExtent(t))},niceTicks:function(e){e=e||10;var t=this._extent,n=t[1]-t[0];if(!(n===1/0||n<=0)){var i=o.quantity(n);for(e/n*i<=.5&&(i*=10);!isNaN(i)&&Math.abs(i)<1&&Math.abs(i)>0;)i*=10;var r=[o.round(h(t[0]/i)*i),o.round(d(t[1]/i)*i)];this._interval=i,this._niceExtent=r}},niceExtent:function(e){l.niceExtent.call(this,e);var t=this._originalScale;t.__fixMin=e.fixMin,t.__fixMax=e.fixMax}});function g(e,t){return c(e,u(t))}i.each(["contain","normalize"],function(e){m.prototype[e]=function(t){return t=p(t)/p(this.base),s[e].call(this,t)}}),m.create=function(){return new m};var v=m;e.exports=v},"./node_modules/echarts/lib/scale/Ordinal.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/scale/Scale.js"),o=n("./node_modules/echarts/lib/data/OrdinalMeta.js"),a=r.prototype,s=r.extend({type:"ordinal",init:function(e,t){e&&!i.isArray(e)||(e=new o({categories:e})),this._ordinalMeta=e,this._extent=t||[0,e.categories.length-1]},parse:function(e){return"string"==typeof e?this._ordinalMeta.getOrdinal(e):Math.round(e)},contain:function(e){return e=this.parse(e),a.contain.call(this,e)&&null!=this._ordinalMeta.categories[e]},normalize:function(e){return a.normalize.call(this,this.parse(e))},scale:function(e){return Math.round(a.scale.call(this,e))},getTicks:function(){for(var e=[],t=this._extent,n=t[0];n<=t[1];)e.push(n),n++;return e},getLabel:function(e){if(!this.isBlank())return this._ordinalMeta.categories[e]},count:function(){return this._extent[1]-this._extent[0]+1},unionExtentFromData:function(e,t){this.unionExtent(e.getApproximateExtent(t))},getOrdinalMeta:function(){return this._ordinalMeta},niceTicks:i.noop,niceExtent:i.noop});s.create=function(){return new s};var l=s;e.exports=l},"./node_modules/echarts/lib/scale/Scale.js":function(e,t,n){var i=n("./node_modules/echarts/lib/util/clazz.js");function r(e){this._setting=e||{},this._extent=[1/0,-1/0],this._interval=0,this.init&&this.init.apply(this,arguments)}r.prototype.parse=function(e){return e},r.prototype.getSetting=function(e){return this._setting[e]},r.prototype.contain=function(e){var t=this._extent;return e>=t[0]&&e<=t[1]},r.prototype.normalize=function(e){var t=this._extent;return t[1]===t[0]?.5:(e-t[0])/(t[1]-t[0])},r.prototype.scale=function(e){var t=this._extent;return e*(t[1]-t[0])+t[0]},r.prototype.unionExtent=function(e){var t=this._extent;e[0]<t[0]&&(t[0]=e[0]),e[1]>t[1]&&(t[1]=e[1])},r.prototype.unionExtentFromData=function(e,t){this.unionExtent(e.getApproximateExtent(t))},r.prototype.getExtent=function(){return this._extent.slice()},r.prototype.setExtent=function(e,t){var n=this._extent;isNaN(e)||(n[0]=e),isNaN(t)||(n[1]=t)},r.prototype.isBlank=function(){return this._isBlank},r.prototype.setBlank=function(e){this._isBlank=e},r.prototype.getLabel=null,i.enableClassExtend(r),i.enableClassManagement(r,{registerWhenExtend:!0});var o=r;e.exports=o},"./node_modules/echarts/lib/scale/Time.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/util/number.js"),o=n("./node_modules/echarts/lib/util/format.js"),a=n("./node_modules/echarts/lib/scale/helper.js"),s=n("./node_modules/echarts/lib/scale/Interval.js"),l=s.prototype,u=Math.ceil,c=Math.floor,d=s.extend({type:"time",getLabel:function(e){var t=this._stepLvl,n=new Date(e);return o.formatTime(t[0],n,this.getSetting("useUTC"))},niceExtent:function(e){var t=this._extent;if(t[0]===t[1]&&(t[0]-=864e5,t[1]+=864e5),t[1]===-1/0&&t[0]===1/0){var n=new Date;t[1]=+new Date(n.getFullYear(),n.getMonth(),n.getDate()),t[0]=t[1]-864e5}this.niceTicks(e.splitNumber,e.minInterval,e.maxInterval);var i=this._interval;e.fixMin||(t[0]=r.round(c(t[0]/i)*i)),e.fixMax||(t[1]=r.round(u(t[1]/i)*i))},niceTicks:function(e,t,n){e=e||10;var i=this._extent,o=i[1]-i[0],s=o/e;null!=t&&s<t&&(s=t),null!=n&&s>n&&(s=n);var l=h.length,d=function(e,t,n,i){for(;n<i;){var r=n+i>>>1;e[r][1]<t?n=r+1:i=r}return n}(h,s,0,l),f=h[Math.min(d,l-1)],p=f[1];if("year"===f[0]){var m=o/p;p*=r.nice(m/e,!0)}var g=this.getSetting("useUTC")?0:60*new Date(+i[0]||+i[1]).getTimezoneOffset()*1e3,v=[Math.round(u((i[0]-g)/p)*p+g),Math.round(c((i[1]-g)/p)*p+g)];a.fixExtent(v,i),this._stepLvl=f,this._interval=p,this._niceExtent=v},parse:function(e){return+r.parseDate(e)}});i.each(["contain","normalize"],function(e){d.prototype[e]=function(t){return l[e].call(this,this.parse(t))}});var h=[["hh:mm:ss",1e3],["hh:mm:ss",5e3],["hh:mm:ss",1e4],["hh:mm:ss",15e3],["hh:mm:ss",3e4],["hh:mm\nMM-dd",6e4],["hh:mm\nMM-dd",3e5],["hh:mm\nMM-dd",6e5],["hh:mm\nMM-dd",9e5],["hh:mm\nMM-dd",18e5],["hh:mm\nMM-dd",36e5],["hh:mm\nMM-dd",72e5],["hh:mm\nMM-dd",216e5],["hh:mm\nMM-dd",432e5],["MM-dd\nyyyy",864e5],["MM-dd\nyyyy",1728e5],["MM-dd\nyyyy",2592e5],["MM-dd\nyyyy",3456e5],["MM-dd\nyyyy",432e6],["MM-dd\nyyyy",5184e5],["week",6048e5],["MM-dd\nyyyy",864e6],["week",12096e5],["week",18144e5],["month",26784e5],["week",36288e5],["month",53568e5],["week",36288e5],["quarter",8208e6],["month",107136e5],["month",13392e6],["half-year",16416e6],["month",214272e5],["month",26784e6],["year",32832e6]];d.create=function(e){return new d({useUTC:e.ecModel.get("useUTC")})};var f=d;e.exports=f},"./node_modules/echarts/lib/scale/helper.js":function(e,t,n){var i=n("./node_modules/echarts/lib/util/number.js"),r=i.round;function o(e){return i.getPrecisionSafe(e)+2}function a(e,t,n){e[t]=Math.max(Math.min(e[t],n[1]),n[0])}function s(e,t){!isFinite(e[0])&&(e[0]=t[0]),!isFinite(e[1])&&(e[1]=t[1]),a(e,0,t),a(e,1,t),e[0]>e[1]&&(e[0]=e[1])}t.intervalScaleNiceTicks=function(e,t,n,a){var l={},u=e[1]-e[0],c=l.interval=i.nice(u/t,!0);null!=n&&c<n&&(c=l.interval=n),null!=a&&c>a&&(c=l.interval=a);var d=l.intervalPrecision=o(c);return s(l.niceTickExtent=[r(Math.ceil(e[0]/c)*c,d),r(Math.floor(e[1]/c)*c,d)],e),l},t.getIntervalPrecision=o,t.fixExtent=s,t.intervalScaleGetTicks=function(e,t,n,i){var o=[];if(!e)return o;t[0]<n[0]&&o.push(t[0]);for(var a=n[0];a<=n[1]&&(o.push(a),(a=r(a+e,i))!==o[o.length-1]);)if(o.length>1e4)return[];return t[1]>(o.length?o[o.length-1]:n[1])&&o.push(t[1]),o}},"./node_modules/echarts/lib/stream/Scheduler.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=i.each,o=i.map,a=(i.isArray,i.isFunction),s=i.createHashMap,l=i.noop,u=n("./node_modules/echarts/lib/stream/task.js").createTask,c=n("./node_modules/echarts/lib/util/component.js").getUID,d=n("./node_modules/echarts/lib/model/Global.js"),h=n("./node_modules/echarts/lib/ExtensionAPI.js"),f=n("./node_modules/echarts/lib/util/model.js").normalizeToArray;function p(e,t,n,i){this.ecInstance=e,this.api=t,this.unfinished;n=this._dataProcessorHandlers=n.slice(),i=this._visualHandlers=i.slice();this._allHandlers=n.concat(i),this._stageTaskMap=s()}var m=p.prototype;function g(e,t,n,i,o){var a;function s(e,t){return e.setDirty&&(!e.dirtyMap||e.dirtyMap.get(t.__pipeline.id))}o=o||{},r(t,function(t,r){if(!o.visualType||o.visualType===t.visualType){var l=e._stageTaskMap.get(t.uid),u=l.seriesTaskMap,c=l.overallTask;if(c){var d,h=c.agentStubMap;h.each(function(e){s(o,e)&&(e.dirty(),d=!0)}),d&&c.dirty(),v(c,i);var f=e.getPerformArgs(c,o.block);h.each(function(e){e.perform(f)}),a|=c.perform(f)}else u&&u.each(function(r,l){s(o,r)&&r.dirty();var u=e.getPerformArgs(r,o.block);u.skip=!t.performRawSeries&&n.isSeriesFiltered(r.context.model),v(r,i),a|=r.perform(u)})}}),e.unfinished|=a}m.restoreData=function(e,t){e.restoreData(t),this._stageTaskMap.each(function(e){var t=e.overallTask;t&&t.dirty()})},m.getPerformArgs=function(e,t){if(e.__pipeline){var n=this._pipelineMap.get(e.__pipeline.id),i=n.context,r=!t&&n.progressiveEnabled&&(!i||i.progressiveRender)&&e.__idxInPipeline>n.blockIndex?n.step:null,o=i&&i.modDataCount;return{step:r,modBy:null!=o?Math.ceil(o/r):null,modDataCount:o}}},m.getPipeline=function(e){return this._pipelineMap.get(e)},m.updateStreamModes=function(e,t){var n=this._pipelineMap.get(e.uid),i=e.getData().count(),r=n.progressiveEnabled&&t.incrementalPrepareRender&&i>=n.threshold,o=e.get("large")&&i>=e.get("largeThreshold"),a="mod"===e.get("progressiveChunkMode")?i:null;e.pipelineContext=n.context={progressiveRender:r,modDataCount:a,large:o}},m.restorePipelines=function(e){var t=this,n=t._pipelineMap=s();e.eachSeries(function(e){var i=e.getProgressive(),r=e.uid;n.set(r,{id:r,head:null,tail:null,threshold:e.getProgressiveThreshold(),progressiveEnabled:i&&!(e.preventIncremental&&e.preventIncremental()),blockIndex:-1,step:Math.round(i||700),count:0}),j(t,e,e.dataTask)})},m.prepareStageTasks=function(){var e=this._stageTaskMap,t=this.ecInstance.getModel(),n=this.api;r(this._allHandlers,function(i){var o=e.get(i.uid)||e.set(i.uid,[]);i.reset&&function(e,t,n,i,r){var o=n.seriesTaskMap||(n.seriesTaskMap=s()),a=t.seriesType,l=t.getTargetSeries;t.createOnAllSeries?i.eachRawSeries(c):a?i.eachRawSeriesByType(a,c):l&&l(i,r).each(c);function c(n){var a=n.uid,s=o.get(a)||o.set(a,u({plan:w,reset:S,count:C}));s.context={model:n,ecModel:i,api:r,useClearVisual:t.isVisual&&!t.isLayout,plan:t.plan,reset:t.reset,scheduler:e},j(e,n,s)}var d=e._pipelineMap;o.each(function(e,t){d.get(t)||(e.dispose(),o.removeKey(t))})}(this,i,o,t,n),i.overallReset&&function(e,t,n,i,o){var a=n.overallTask=n.overallTask||u({reset:y});a.context={ecModel:i,api:o,overallReset:t.overallReset,scheduler:e};var l=a.agentStubMap=a.agentStubMap||s(),c=t.seriesType,d=t.getTargetSeries,h=!0,f=t.modifyOutputEnd;c?i.eachRawSeriesByType(c,p):d?d(i,o).each(p):(h=!1,r(i.getSeries(),p));function p(t){var n=t.uid,i=l.get(n);i||(i=l.set(n,u({reset:_,onDirty:b})),a.dirty()),i.context={model:t,overallProgress:h,modifyOutputEnd:f},i.agent=a,i.__block=h,j(e,t,i)}var m=e._pipelineMap;l.each(function(e,t){m.get(t)||(e.dispose(),a.dirty(),l.removeKey(t))})}(this,i,o,t,n)},this)},m.prepareView=function(e,t,n,i){var r=e.renderTask,o=r.context;o.model=t,o.ecModel=n,o.api=i,r.__block=!e.incrementalPrepareRender,j(this,t,r)},m.performDataProcessorTasks=function(e,t){g(this,this._dataProcessorHandlers,e,t,{block:!0})},m.performVisualTasks=function(e,t,n){g(this,this._visualHandlers,e,t,n)},m.performSeriesTasks=function(e){var t;e.eachSeries(function(e){t|=e.dataTask.perform()}),this.unfinished|=t},m.plan=function(){this._pipelineMap.each(function(e){var t=e.tail;do{if(t.__block){e.blockIndex=t.__idxInPipeline;break}t=t.getUpstream()}while(t)})};var v=m.updatePayload=function(e,t){"remain"!==t&&(e.context.payload=t)};function y(e){e.overallReset(e.ecModel,e.api,e.payload)}function _(e,t){return e.overallProgress&&x}function x(){this.agent.dirty(),this.getDownstream().dirty()}function b(){this.agent&&this.agent.dirty()}function w(e){return e.plan&&e.plan(e.model,e.ecModel,e.api,e.payload)}function S(e){e.useClearVisual&&e.data.clearAllVisual();var t=e.resetDefines=f(e.reset(e.model,e.ecModel,e.api,e.payload));return t.length>1?o(t,function(e,t){return T(t)}):A}var A=T(0);function T(e){return function(t,n){var i=n.data,r=n.resetDefines[e];if(r&&r.dataEach)for(var o=t.start;o<t.end;o++)r.dataEach(i,o);else r&&r.progress&&r.progress(t,i)}}function C(e){return e.data.count()}function j(e,t,n){var i=t.uid,r=e._pipelineMap.get(i);!r.head&&(r.head=n),r.tail&&r.tail.pipe(n),r.tail=n,n.__idxInPipeline=r.count++,n.__pipeline=r}p.wrapStageHandler=function(e,t){return a(e)&&(e={overallReset:e,seriesType:function(e){M=null;try{e(k,D)}catch(e){}return M}(e)}),e.uid=c("stageHandler"),t&&(e.visualType=t),e};var M,k={},D={};function I(e,t){for(var n in t.prototype)e[n]=l}I(k,d),I(D,h),k.eachSeriesByType=k.eachRawSeriesByType=function(e){M=e},k.eachComponent=function(e){"series"===e.mainType&&e.subType&&(M=e.subType)};var P=p;e.exports=P},"./node_modules/echarts/lib/stream/task.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=(i.assert,i.isArray);n("./node_modules/echarts/lib/config.js").__DEV__;function o(e){e=e||{},this._reset=e.reset,this._plan=e.plan,this._count=e.count,this._onDirty=e.onDirty,this._dirty=!0,this.context}var a=o.prototype;a.perform=function(e){var t,n=this._upstream,i=e&&e.skip;if(this._dirty&&n){var o=this.context;o.data=o.outputData=n.context.outputData}this.__pipeline&&(this.__pipeline.currentTask=this),this._plan&&!i&&(t=this._plan(this.context));var a,s=h(this._modBy),u=this._modDataCount||0,c=h(e&&e.modBy),d=e&&e.modDataCount||0;function h(e){return!(e>=1)&&(e=1),e}s===c&&u===d||(t="reset"),(this._dirty||"reset"===t)&&(this._dirty=!1,a=function(e,t){var n,i;e._dueIndex=e._outputDueEnd=e._dueEnd=0,e._settedOutputEnd=null,!t&&e._reset&&((n=e._reset(e.context))&&n.progress&&(i=n.forceFirstProgress,n=n.progress),r(n)&&!n.length&&(n=null));e._progress=n,e._modBy=e._modDataCount=null;var o=e._downstream;return o&&o.dirty(),i}(this,i)),this._modBy=c,this._modDataCount=d;var f=e&&e.step;if(this._dueEnd=n?n._outputDueEnd:this._count?this._count(this.context):1/0,this._progress){var p=this._dueIndex,m=Math.min(null!=f?this._dueIndex+f:1/0,this._dueEnd);if(!i&&(a||p<m)){var g=this._progress;if(r(g))for(var v=0;v<g.length;v++)l(this,g[v],p,m,c,d);else l(this,g,p,m,c,d)}this._dueIndex=m;var y=null!=this._settedOutputEnd?this._settedOutputEnd:m;this._outputDueEnd=y}else this._dueIndex=this._outputDueEnd=null!=this._settedOutputEnd?this._settedOutputEnd:this._dueEnd;return this.unfinished()};var s=function(){var e,t,n,i,r,o={reset:function(l,u,c,d){t=l,e=u,n=c,i=d,r=Math.ceil(i/n),o.next=n>1&&i>0?s:a}};return o;function a(){return t<e?t++:null}function s(){var o=t%r*n+Math.ceil(t/r),a=t>=e?null:o<i?o:t;return t++,a}}();function l(e,t,n,i,r,o){s.reset(n,i,r,o),e._callingProgress=t,e._callingProgress({start:n,end:i,count:i-n,next:s.next},e.context)}a.dirty=function(){this._dirty=!0,this._onDirty&&this._onDirty(this.context)},a.unfinished=function(){return this._progress&&this._dueIndex<this._dueEnd},a.pipe=function(e){(this._downstream!==e||this._dirty)&&(this._downstream=e,e._upstream=this,e.dirty())},a.dispose=function(){this._disposed||(this._upstream&&(this._upstream._downstream=null),this._downstream&&(this._downstream._upstream=null),this._dirty=!1,this._disposed=!0)},a.getUpstream=function(){return this._upstream},a.getDownstream=function(){return this._downstream},a.setOutputEnd=function(e){this._outputDueEnd=this._settedOutputEnd=e},t.createTask=function(e){return new o(e)}},"./node_modules/echarts/lib/theme/dark.js":function(e,t){var n=["#dd6b66","#759aa0","#e69d87","#8dc1a9","#ea7e53","#eedd78","#73a373","#73b9bc","#7289ab","#91ca8c","#f49f42"],i={color:n,backgroundColor:"#333",tooltip:{axisPointer:{lineStyle:{color:"#eee"},crossStyle:{color:"#eee"}}},legend:{textStyle:{color:"#eee"}},textStyle:{color:"#eee"},title:{textStyle:{color:"#eee"}},toolbox:{iconStyle:{normal:{borderColor:"#eee"}}},dataZoom:{textStyle:{color:"#eee"}},visualMap:{textStyle:{color:"#eee"}},timeline:{lineStyle:{color:"#eee"},itemStyle:{normal:{color:n[1]}},label:{normal:{textStyle:{color:"#eee"}}},controlStyle:{normal:{color:"#eee",borderColor:"#eee"}}},timeAxis:{axisLine:{lineStyle:{color:"#eee"}},axisTick:{lineStyle:{color:"#eee"}},axisLabel:{textStyle:{color:"#eee"}},splitLine:{lineStyle:{type:"dashed",color:"#aaa"}},splitArea:{areaStyle:{color:"#eee"}}},logAxis:{axisLine:{lineStyle:{color:"#eee"}},axisTick:{lineStyle:{color:"#eee"}},axisLabel:{textStyle:{color:"#eee"}},splitLine:{lineStyle:{type:"dashed",color:"#aaa"}},splitArea:{areaStyle:{color:"#eee"}}},valueAxis:{axisLine:{lineStyle:{color:"#eee"}},axisTick:{lineStyle:{color:"#eee"}},axisLabel:{textStyle:{color:"#eee"}},splitLine:{lineStyle:{type:"dashed",color:"#aaa"}},splitArea:{areaStyle:{color:"#eee"}}},categoryAxis:{axisLine:{lineStyle:{color:"#eee"}},axisTick:{lineStyle:{color:"#eee"}},axisLabel:{textStyle:{color:"#eee"}},splitLine:{lineStyle:{type:"dashed",color:"#aaa"}},splitArea:{areaStyle:{color:"#eee"}}},line:{symbol:"circle"},graph:{color:n},gauge:{title:{textStyle:{color:"#eee"}}},candlestick:{itemStyle:{normal:{color:"#FD1050",color0:"#0CF49B",borderColor:"#FD1050",borderColor0:"#0CF49B"}}}};i.categoryAxis.splitLine.show=!1;var r=i;e.exports=r},"./node_modules/echarts/lib/theme/light.js":function(e,t){var n=["#37A2DA","#32C5E9","#67E0E3","#9FE6B8","#FFDB5C","#ff9f7f","#fb7293","#E062AE","#E690D1","#e7bcf3","#9d96f5","#8378EA","#96BFFF"],i={color:n,colorLayer:[["#37A2DA","#ffd85c","#fd7b5f"],["#37A2DA","#67E0E3","#FFDB5C","#ff9f7f","#E062AE","#9d96f5"],["#37A2DA","#32C5E9","#9FE6B8","#FFDB5C","#ff9f7f","#fb7293","#e7bcf3","#8378EA","#96BFFF"],n]};e.exports=i},"./node_modules/echarts/lib/util/clazz.js":function(e,t,n){n("./node_modules/echarts/lib/config.js").__DEV__;var i=n("./node_modules/zrender/lib/core/util.js"),r=".",o="___EC__COMPONENT__CONTAINER___";function a(e){var t={main:"",sub:""};return e&&(e=e.split(r),t.main=e[0]||"",t.sub=e[1]||""),t}var s=0;function l(e,t){var n=i.slice(arguments,2);return this.superClass.prototype[t].apply(e,n)}function u(e,t,n){return this.superClass.prototype[t].apply(e,n)}t.parseClassType=a,t.enableClassExtend=function(e,t){e.$constructor=e,e.extend=function(e){var t=this,n=function(){e.$constructor?e.$constructor.apply(this,arguments):t.apply(this,arguments)};return i.extend(n.prototype,e),n.extend=this.extend,n.superCall=l,n.superApply=u,i.inherits(n,this),n.superClass=t,n}},t.enableClassCheck=function(e){var t=["__\0is_clz",s++,Math.random().toFixed(3)].join("_");e.prototype[t]=!0,e.isInstance=function(e){return!(!e||!e[t])}},t.enableClassManagement=function(e,t){t=t||{};var n={};if(e.registerClass=function(e,t){return t&&(function(e){i.assert(/^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(e),'componentType "'+e+'" illegal')}(t),(t=a(t)).sub?t.sub!==o&&((function(e){var t=n[e.main];return t&&t[o]||((t=n[e.main]={})[o]=!0),t}(t))[t.sub]=e):n[t.main]=e),e},e.getClass=function(e,t,i){var r=n[e];if(r&&r[o]&&(r=t?r[t]:null),i&&!r)throw new Error(t?"Component "+e+"."+(t||"")+" not exists. Load it first.":e+".type should be specified.");return r},e.getClassesByMainType=function(e){e=a(e);var t=[],r=n[e.main];return r&&r[o]?i.each(r,function(e,n){n!==o&&t.push(e)}):t.push(r),t},e.hasClass=function(e){return e=a(e),!!n[e.main]},e.getAllClassMainTypes=function(){var e=[];return i.each(n,function(t,n){e.push(n)}),e},e.hasSubTypes=function(e){e=a(e);var t=n[e.main];return t&&t[o]},e.parseClassType=a,t.registerWhenExtend){var r=e.extend;r&&(e.extend=function(t){var n=r.call(this,t);return e.registerClass(n,t.type)})}return e},t.setReadOnly=function(e,t){}},"./node_modules/echarts/lib/util/component.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/util/clazz.js").parseClassType,o=0;t.getUID=function(e){return[e||"",o++,Math.random().toFixed(5)].join("_")},t.enableSubTypeDefaulter=function(e){var t={};return e.registerSubTypeDefaulter=function(e,n){e=r(e),t[e.main]=n},e.determineSubType=function(n,i){var o=i.type;if(!o){var a=r(n).main;e.hasSubTypes(n)&&t[a]&&(o=t[a](i))}return o},e},t.enableTopologicalTravel=function(e,t){function n(e,t){return e[t]||(e[t]={predecessor:[],successor:[]}),e[t]}e.topologicalTravel=function(e,r,o,a){if(e.length){var s=function(e){var r={},o=[];return i.each(e,function(a){var s=n(r,a),l=function(e,t){var n=[];return i.each(e,function(e){i.indexOf(t,e)>=0&&n.push(e)}),n}(s.originalDeps=t(a),e);s.entryCount=l.length,0===s.entryCount&&o.push(a),i.each(l,function(e){i.indexOf(s.predecessor,e)<0&&s.predecessor.push(e);var t=n(r,e);i.indexOf(t.successor,e)<0&&t.successor.push(a)})}),{graph:r,noEntryList:o}}(r),l=s.graph,u=s.noEntryList,c={};for(i.each(e,function(e){c[e]=!0});u.length;){var d=u.pop(),h=l[d],f=!!c[d];f&&(o.call(a,d,h.originalDeps.slice()),delete c[d]),i.each(h.successor,f?m:p)}i.each(c,function(){throw new Error("Circle dependency may exists")})}function p(e){l[e].entryCount--,0===l[e].entryCount&&u.push(e)}function m(e){c[e]=!0,p(e)}}}},"./node_modules/echarts/lib/util/format.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/zrender/lib/contain/text.js"),o=n("./node_modules/echarts/lib/util/number.js");var a=i.normalizeCssArray,s=/([&<>"'])/g,l={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"};function u(e){return null==e?"":(e+"").replace(s,function(e,t){return l[t]})}var c=["a","b","c","d","e","f","g"],d=function(e,t){return"{"+e+(null==t?"":t)+"}"};function h(e,t){return"0000".substr(0,t-(e+="").length)+e}var f=r.truncateText,p=r.getBoundingRect;t.addCommas=function(e){return isNaN(e)?"-":(e=(e+"").split("."))[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g,"$1,")+(e.length>1?"."+e[1]:"")},t.toCamelCase=function(e,t){return e=(e||"").toLowerCase().replace(/-(.)/g,function(e,t){return t.toUpperCase()}),t&&e&&(e=e.charAt(0).toUpperCase()+e.slice(1)),e},t.normalizeCssArray=a,t.encodeHTML=u,t.formatTpl=function(e,t,n){i.isArray(t)||(t=[t]);var r=t.length;if(!r)return"";for(var o=t[0].$vars||[],a=0;a<o.length;a++){var s=c[a];e=e.replace(d(s),d(s,0))}for(var l=0;l<r;l++)for(var h=0;h<o.length;h++){var f=t[l][o[h]];e=e.replace(d(c[h],l),n?u(f):f)}return e},t.formatTplSimple=function(e,t,n){return i.each(t,function(t,i){e=e.replace("{"+i+"}",n?u(t):t)}),e},t.getTooltipMarker=function(e,t){var n=(e=i.isString(e)?{color:e,extraCssText:t}:e||{}).color,r=e.type;return t=e.extraCssText,n?"subItem"===r?'<span style="display:inline-block;vertical-align:middle;margin-right:8px;margin-left:3px;border-radius:4px;width:4px;height:4px;background-color:'+u(n)+";"+(t||"")+'"></span>':'<span style="display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:'+u(n)+";"+(t||"")+'"></span>':""},t.formatTime=function(e,t,n){"week"!==e&&"month"!==e&&"quarter"!==e&&"half-year"!==e&&"year"!==e||(e="MM-dd\nyyyy");var i=o.parseDate(t),r=n?"UTC":"",a=i["get"+r+"FullYear"](),s=i["get"+r+"Month"]()+1,l=i["get"+r+"Date"](),u=i["get"+r+"Hours"](),c=i["get"+r+"Minutes"](),d=i["get"+r+"Seconds"](),f=i["get"+r+"Milliseconds"]();return e=e.replace("MM",h(s,2)).replace("M",s).replace("yyyy",a).replace("yy",a%100).replace("dd",h(l,2)).replace("d",l).replace("hh",h(u,2)).replace("h",u).replace("mm",h(c,2)).replace("m",c).replace("ss",h(d,2)).replace("s",d).replace("SSS",h(f,3))},t.capitalFirst=function(e){return e?e.charAt(0).toUpperCase()+e.substr(1):e},t.truncateText=f,t.getTextRect=p},"./node_modules/echarts/lib/util/graphic.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/zrender/lib/tool/path.js"),o=n("./node_modules/zrender/lib/tool/color.js"),a=n("./node_modules/zrender/lib/core/matrix.js"),s=n("./node_modules/zrender/lib/core/vector.js"),l=n("./node_modules/zrender/lib/graphic/Path.js"),u=n("./node_modules/zrender/lib/mixin/Transformable.js"),c=n("./node_modules/zrender/lib/graphic/Image.js");t.Image=c;var d=n("./node_modules/zrender/lib/container/Group.js");t.Group=d;var h=n("./node_modules/zrender/lib/graphic/Text.js");t.Text=h;var f=n("./node_modules/zrender/lib/graphic/shape/Circle.js");t.Circle=f;var p=n("./node_modules/zrender/lib/graphic/shape/Sector.js");t.Sector=p;var m=n("./node_modules/zrender/lib/graphic/shape/Ring.js");t.Ring=m;var g=n("./node_modules/zrender/lib/graphic/shape/Polygon.js");t.Polygon=g;var v=n("./node_modules/zrender/lib/graphic/shape/Polyline.js");t.Polyline=v;var y=n("./node_modules/zrender/lib/graphic/shape/Rect.js");t.Rect=y;var _=n("./node_modules/zrender/lib/graphic/shape/Line.js");t.Line=_;var x=n("./node_modules/zrender/lib/graphic/shape/BezierCurve.js");t.BezierCurve=x;var b=n("./node_modules/zrender/lib/graphic/shape/Arc.js");t.Arc=b;var w=n("./node_modules/zrender/lib/graphic/CompoundPath.js");t.CompoundPath=w;var S=n("./node_modules/zrender/lib/graphic/LinearGradient.js");t.LinearGradient=S;var A=n("./node_modules/zrender/lib/graphic/RadialGradient.js");t.RadialGradient=A;var T=n("./node_modules/zrender/lib/core/BoundingRect.js");t.BoundingRect=T;var C=n("./node_modules/zrender/lib/graphic/IncrementalDisplayable.js");t.IncrementalDisplayable=C;var j=Math.round,M=Math.max,k=Math.min,D={};function I(e,t,n,i){var o=r.createFromString(e,t),a=o.getBoundingRect();return n&&("center"===i&&(n=P(n,a)),E(o,n)),o}function P(e,t){var n,i=t.width/t.height,r=e.height*i;return n=r<=e.width?e.height:(r=e.width)/i,{x:e.x+e.width/2-r/2,y:e.y+e.height/2-n/2,width:r,height:n}}var z=r.mergePath;function E(e,t){if(e.applyTransform){var n=e.getBoundingRect().calculateTransform(t);e.applyTransform(n)}}function O(e,t,n){var i=j(2*e);return(i+j(t))%2==0?i/2:(i+(n?1:-1))/2}function L(e){return null!=e&&"none"!=e}function R(e){return"string"==typeof e?o.lift(e,-.1):e}function N(e){if(e.__hoverStlDirty){var t=e.style.stroke,n=e.style.fill,i=e.__hoverStl;i.fill=i.fill||(L(n)?R(n):null),i.stroke=i.stroke||(L(t)?R(t):null);var r={};for(var o in i)null!=i[o]&&(r[o]=e.style[o]);e.__normalStl=r,e.__hoverStlDirty=!1}}function B(e){if(!e.__isHover){if(N(e),e.useHoverLayer)e.__zr&&e.__zr.addHover(e,e.__hoverStl);else{var t=e.style,n=t.insideRollbackOpt;n&&function(e){var t=e.insideRollback;t&&(e.textFill=t.textFill,e.textStroke=t.textStroke,e.textStrokeWidth=t.textStrokeWidth)}(t),t.extendFrom(e.__hoverStl),n&&(K(t,t.insideOriginalTextPosition,n),null==t.textFill&&(t.textFill=n.autoColor)),e.dirty(!1),e.z2+=1}e.__isHover=!0}}function H(e){if(e.__isHover){var t=e.__normalStl;e.useHoverLayer?e.__zr&&e.__zr.removeHover(e):(t&&e.setStyle(t),e.z2-=1),e.__isHover=!1}}function F(e){"group"===e.type?e.traverse(function(e){"group"!==e.type&&B(e)}):B(e)}function W(e){"group"===e.type?e.traverse(function(e){"group"!==e.type&&H(e)}):H(e)}function V(e,t){e.__hoverStl=e.hoverStyle||t||{},e.__hoverStlDirty=!0,e.__isHover&&N(e)}function q(e){this.__hoverSilentOnTouch&&e.zrByTouch||!this.__isEmphasis&&F(this)}function U(e){this.__hoverSilentOnTouch&&e.zrByTouch||!this.__isEmphasis&&W(this)}function G(){this.__isEmphasis=!0,F(this)}function Y(){this.__isEmphasis=!1,W(this)}function X(e,t,n,r,o){return $(e,t,r,o),n&&i.extend(e,n),e.host&&e.host.dirty&&e.host.dirty(!1),e}function $(e,t,n,r){if((n=n||D).isRectText){var o=t.getShallow("position")||(r?null:"inside");"outside"===o&&(o="top"),e.textPosition=o,e.textOffset=t.getShallow("offset");var a=t.getShallow("rotate");null!=a&&(a*=Math.PI/180),e.textRotation=a,e.textDistance=i.retrieve2(t.getShallow("distance"),r?null:5)}var s,l=t.ecModel,u=l&&l.option.textStyle,c=function(e){var t;for(;e&&e!==e.ecModel;){var n=(e.option||D).rich;if(n)for(var i in t=t||{},n)n.hasOwnProperty(i)&&(t[i]=1);e=e.parentModel}return t}(t);if(c)for(var d in s={},c)if(c.hasOwnProperty(d)){var h=t.getModel(["rich",d]);Z(s[d]={},h,u,n,r)}return e.rich=s,Z(e,t,u,n,r,!0),n.forceRich&&!n.textStyle&&(n.textStyle={}),e}function Z(e,t,n,r,o,a){if(n=!o&&n||D,e.textFill=Q(t.getShallow("color"),r)||n.color,e.textStroke=Q(t.getShallow("textBorderColor"),r)||n.textBorderColor,e.textStrokeWidth=i.retrieve2(t.getShallow("textBorderWidth"),n.textBorderWidth),!o){if(a){var s=e.textPosition;e.insideRollback=K(e,s,r),e.insideOriginalTextPosition=s,e.insideRollbackOpt=r}null==e.textFill&&(e.textFill=r.autoColor)}e.fontStyle=t.getShallow("fontStyle")||n.fontStyle,e.fontWeight=t.getShallow("fontWeight")||n.fontWeight,e.fontSize=t.getShallow("fontSize")||n.fontSize,e.fontFamily=t.getShallow("fontFamily")||n.fontFamily,e.textAlign=t.getShallow("align"),e.textVerticalAlign=t.getShallow("verticalAlign")||t.getShallow("baseline"),e.textLineHeight=t.getShallow("lineHeight"),e.textWidth=t.getShallow("width"),e.textHeight=t.getShallow("height"),e.textTag=t.getShallow("tag"),a&&r.disableBox||(e.textBackgroundColor=Q(t.getShallow("backgroundColor"),r),e.textPadding=t.getShallow("padding"),e.textBorderColor=Q(t.getShallow("borderColor"),r),e.textBorderWidth=t.getShallow("borderWidth"),e.textBorderRadius=t.getShallow("borderRadius"),e.textBoxShadowColor=t.getShallow("shadowColor"),e.textBoxShadowBlur=t.getShallow("shadowBlur"),e.textBoxShadowOffsetX=t.getShallow("shadowOffsetX"),e.textBoxShadowOffsetY=t.getShallow("shadowOffsetY")),e.textShadowColor=t.getShallow("textShadowColor")||n.textShadowColor,e.textShadowBlur=t.getShallow("textShadowBlur")||n.textShadowBlur,e.textShadowOffsetX=t.getShallow("textShadowOffsetX")||n.textShadowOffsetX,e.textShadowOffsetY=t.getShallow("textShadowOffsetY")||n.textShadowOffsetY}function Q(e,t){return"auto"!==e?e:t&&t.autoColor?t.autoColor:null}function K(e,t,n){var i,r=n.useInsideStyle;return null==e.textFill&&!1!==r&&(!0===r||n.isRectText&&t&&"string"==typeof t&&t.indexOf("inside")>=0)&&(i={textFill:null,textStroke:e.textStroke,textStrokeWidth:e.textStrokeWidth},e.textFill="#fff",null==e.textStroke&&(e.textStroke=n.autoColor,null==e.textStrokeWidth&&(e.textStrokeWidth=2))),i}function J(e,t,n,i,r,o){if("function"==typeof r&&(o=r,r=null),i&&i.isAnimationEnabled()){var a=e?"Update":"",s=i.getShallow("animationDuration"+a),l=i.getShallow("animationEasing"+a),u=i.getShallow("animationDelay"+a);"function"==typeof u&&(u=u(r,i.getAnimationDelayParams?i.getAnimationDelayParams(t,r):null)),"function"==typeof s&&(s=s(r)),s>0?t.animateTo(n,s,u||0,l,o,!!o):(t.stopAnimation(),t.attr(n),o&&o())}else t.stopAnimation(),t.attr(n),o&&o()}function ee(e,t,n,i,r){J(!0,e,t,n,i,r)}function te(e,t,n){return t&&!i.isArrayLike(t)&&(t=u.getLocalTransform(t)),n&&(t=a.invert([],t)),s.applyTransform([],e,t)}t.extendShape=function(e){return l.extend(e)},t.extendPath=function(e,t){return r.extendFromString(e,t)},t.makePath=I,t.makeImage=function(e,t,n){var i=new c({style:{image:e,x:t.x,y:t.y,width:t.width,height:t.height},onload:function(e){if("center"===n){var r={width:e.width,height:e.height};i.setStyle(P(t,r))}}});return i},t.mergePath=z,t.resizePath=E,t.subPixelOptimizeLine=function(e){var t=e.shape,n=e.style.lineWidth;return j(2*t.x1)===j(2*t.x2)&&(t.x1=t.x2=O(t.x1,n,!0)),j(2*t.y1)===j(2*t.y2)&&(t.y1=t.y2=O(t.y1,n,!0)),e},t.subPixelOptimizeRect=function(e){var t=e.shape,n=e.style.lineWidth,i=t.x,r=t.y,o=t.width,a=t.height;return t.x=O(t.x,n,!0),t.y=O(t.y,n,!0),t.width=Math.max(O(i+o,n,!1)-t.x,0===o?0:1),t.height=Math.max(O(r+a,n,!1)-t.y,0===a?0:1),e},t.subPixelOptimize=O,t.setHoverStyle=function(e,t,n){e.__hoverSilentOnTouch=n&&n.hoverSilentOnTouch,"group"===e.type?e.traverse(function(e){"group"!==e.type&&V(e,t)}):V(e,t),e.on("mouseover",q).on("mouseout",U),e.on("emphasis",G).on("normal",Y)},t.setLabelStyle=function(e,t,n,r,o,a,s){var l,u=(o=o||D).labelFetcher,c=o.labelDataIndex,d=o.labelDimIndex,h=n.getShallow("show"),f=r.getShallow("show");(h||f)&&(u&&(l=u.getFormattedLabel(c,"normal",null,d)),null==l&&(l=i.isFunction(o.defaultText)?o.defaultText(c,o):o.defaultText));var p=h?l:null,m=f?i.retrieve2(u?u.getFormattedLabel(c,"emphasis",null,d):null,l):null;null==p&&null==m||(X(e,n,a,o),X(t,r,s,o,!0)),e.text=p,t.text=m},t.setTextStyle=X,t.setText=function(e,t,n){var i,r={isRectText:!0};!1===n?i=!0:r.autoColor=n,$(e,t,r,i),e.host&&e.host.dirty&&e.host.dirty(!1)},t.getFont=function(e,t){var n=t||t.getModel("textStyle");return i.trim([e.fontStyle||n&&n.getShallow("fontStyle")||"",e.fontWeight||n&&n.getShallow("fontWeight")||"",(e.fontSize||n&&n.getShallow("fontSize")||12)+"px",e.fontFamily||n&&n.getShallow("fontFamily")||"sans-serif"].join(" "))},t.updateProps=ee,t.initProps=function(e,t,n,i,r){J(!1,e,t,n,i,r)},t.getTransform=function(e,t){for(var n=a.identity([]);e&&e!==t;)a.mul(n,e.getLocalTransform(),n),e=e.parent;return n},t.applyTransform=te,t.transformDirection=function(e,t,n){var i=0===t[4]||0===t[5]||0===t[0]?1:Math.abs(2*t[4]/t[0]),r=0===t[4]||0===t[5]||0===t[2]?1:Math.abs(2*t[4]/t[2]),o=["left"===e?-i:"right"===e?i:0,"top"===e?-r:"bottom"===e?r:0];return o=te(o,t,n),Math.abs(o[0])>Math.abs(o[1])?o[0]>0?"right":"left":o[1]>0?"bottom":"top"},t.groupTransition=function(e,t,n,r){if(e&&t){var o=function(e){var t={};return e.traverse(function(e){!e.isGroup&&e.anid&&(t[e.anid]=e)}),t}(e);t.traverse(function(e){if(!e.isGroup&&e.anid){var t=o[e.anid];if(t){var i=a(e);e.attr(a(t)),ee(e,i,n,e.dataIndex)}}})}function a(e){var t={position:s.clone(e.position),rotation:e.rotation};return e.shape&&(t.shape=i.extend({},e.shape)),t}},t.clipPointsByRect=function(e,t){return i.map(e,function(e){var n=e[0];n=M(n,t.x),n=k(n,t.x+t.width);var i=e[1];return i=M(i,t.y),[n,i=k(i,t.y+t.height)]})},t.clipRectByRect=function(e,t){var n=M(e.x,t.x),i=k(e.x+e.width,t.x+t.width),r=M(e.y,t.y),o=k(e.y+e.height,t.y+t.height);if(i>=n&&o>=r)return{x:n,y:r,width:i-n,height:o-r}},t.createIcon=function(e,t,n){var r=(t=i.extend({rectHover:!0},t)).style={strokeNoScale:!0};if(n=n||{x:-1,y:-1,width:2,height:2},e)return 0===e.indexOf("image://")?(r.image=e.slice(8),i.defaults(r,n),new c(t)):I(e.replace("path://",""),t,n,"center")}},"./node_modules/echarts/lib/util/layout.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/zrender/lib/core/BoundingRect.js"),o=n("./node_modules/echarts/lib/util/number.js").parsePercent,a=n("./node_modules/echarts/lib/util/format.js"),s=i.each,l=["left","right","top","bottom","width","height"],u=[["width","left","right"],["height","top","bottom"]];function c(e,t,n,i,r){var o=0,a=0;null==i&&(i=1/0),null==r&&(r=1/0);var s=0;t.eachChild(function(l,u){var c,d,h=l.position,f=l.getBoundingRect(),p=t.childAt(u+1),m=p&&p.getBoundingRect();if("horizontal"===e){var g=f.width+(m?-m.x+f.x:0);(c=o+g)>i||l.newline?(o=0,c=g,a+=s+n,s=f.height):s=Math.max(s,f.height)}else{var v=f.height+(m?-m.y+f.y:0);(d=a+v)>r||l.newline?(o+=s+n,a=0,d=v,s=f.width):s=Math.max(s,f.width)}l.newline||(h[0]=o,h[1]=a,"horizontal"===e?o=c+n:a=d+n)})}var d=c,h=i.curry(c,"vertical"),f=i.curry(c,"horizontal");function p(e,t,n){n=a.normalizeCssArray(n||0);var i=t.width,s=t.height,l=o(e.left,i),u=o(e.top,s),c=o(e.right,i),d=o(e.bottom,s),h=o(e.width,i),f=o(e.height,s),p=n[2]+n[0],m=n[1]+n[3],g=e.aspect;switch(isNaN(h)&&(h=i-c-m-l),isNaN(f)&&(f=s-d-p-u),null!=g&&(isNaN(h)&&isNaN(f)&&(g>i/s?h=.8*i:f=.8*s),isNaN(h)&&(h=g*f),isNaN(f)&&(f=h/g)),isNaN(l)&&(l=i-c-h-m),isNaN(u)&&(u=s-d-f-p),e.left||e.right){case"center":l=i/2-h/2-n[3];break;case"right":l=i-h-m}switch(e.top||e.bottom){case"middle":case"center":u=s/2-f/2-n[0];break;case"bottom":u=s-f-p}l=l||0,u=u||0,isNaN(h)&&(h=i-m-l-(c||0)),isNaN(f)&&(f=s-p-u-(d||0));var v=new r(l+n[3],u+n[0],h,f);return v.margin=n,v}function m(e,t){return t&&e&&s(l,function(n){t.hasOwnProperty(n)&&(e[n]=t[n])}),e}t.LOCATION_PARAMS=l,t.HV_NAMES=u,t.box=d,t.vbox=h,t.hbox=f,t.getAvailableSize=function(e,t,n){var i=t.width,r=t.height,s=o(e.x,i),l=o(e.y,r),u=o(e.x2,i),c=o(e.y2,r);return(isNaN(s)||isNaN(parseFloat(e.x)))&&(s=0),(isNaN(u)||isNaN(parseFloat(e.x2)))&&(u=i),(isNaN(l)||isNaN(parseFloat(e.y)))&&(l=0),(isNaN(c)||isNaN(parseFloat(e.y2)))&&(c=r),n=a.normalizeCssArray(n||0),{width:Math.max(u-s-n[1]-n[3],0),height:Math.max(c-l-n[0]-n[2],0)}},t.getLayoutRect=p,t.positionElement=function(e,t,n,o,a){var s=!a||!a.hv||a.hv[0],l=!a||!a.hv||a.hv[1],u=a&&a.boundingMode||"all";if(s||l){var c;if("raw"===u)c="group"===e.type?new r(0,0,+t.width||0,+t.height||0):e.getBoundingRect();else if(c=e.getBoundingRect(),e.needLocalTransform()){var d=e.getLocalTransform();(c=c.clone()).applyTransform(d)}t=p(i.defaults({width:c.width,height:c.height},t),n,o);var h=e.position,f=s?t.x-c.x:0,m=l?t.y-c.y:0;e.attr("position","raw"===u?[f,m]:[h[0]+f,h[1]+m])}},t.sizeCalculable=function(e,t){return null!=e[u[t][0]]||null!=e[u[t][1]]&&null!=e[u[t][2]]},t.mergeLayoutParam=function(e,t,n){!i.isObject(n)&&(n={});var r=n.ignoreSize;!i.isArray(r)&&(r=[r,r]);var o=l(u[0],0),a=l(u[1],1);function l(n,i){var o={},a=0,l={},u=0;if(s(n,function(t){l[t]=e[t]}),s(n,function(e){c(t,e)&&(o[e]=l[e]=t[e]),d(o,e)&&a++,d(l,e)&&u++}),r[i])return d(t,n[1])?l[n[2]]=null:d(t,n[2])&&(l[n[1]]=null),l;if(2!==u&&a){if(a>=2)return o;for(var h=0;h<n.length;h++){var f=n[h];if(!c(o,f)&&c(e,f)){o[f]=e[f];break}}return o}return l}function c(e,t){return e.hasOwnProperty(t)}function d(e,t){return null!=e[t]&&"auto"!==e[t]}function h(e,t,n){s(e,function(e){t[e]=n[e]})}h(u[0],e,o),h(u[1],e,a)},t.getLayoutParams=function(e){return m({},e)},t.copyLayoutParams=m},"./node_modules/echarts/lib/util/model.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=i.each,o=i.isObject,a=i.isArray,s="series\0";function l(e){return e instanceof Array?e:null==e?[]:[e]}function u(e){return o(e)&&e.id&&0===(e.id+"").indexOf("\0_ec_\0")}var c=0;function d(e,t){return e&&e.hasOwnProperty(t)}t.normalizeToArray=l,t.defaultEmphasis=function(e,t,n){if(e){e[t]=e[t]||{},e.emphasis=e.emphasis||{},e.emphasis[t]=e.emphasis[t]||{};for(var i=0,r=n.length;i<r;i++){var o=n[i];!e.emphasis[t].hasOwnProperty(o)&&e[t].hasOwnProperty(o)&&(e.emphasis[t][o]=e[t][o])}}},t.TEXT_STYLE_OPTIONS=["fontStyle","fontWeight","fontSize","fontFamily","rich","tag","color","textBorderColor","textBorderWidth","width","height","lineHeight","align","verticalAlign","baseline","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","textShadowColor","textShadowBlur","textShadowOffsetX","textShadowOffsetY","backgroundColor","borderColor","borderWidth","borderRadius","padding"],t.getDataItemValue=function(e){return!o(e)||a(e)||e instanceof Date?e:e.value},t.isDataItemOption=function(e){return o(e)&&!(e instanceof Array)},t.mappingToExists=function(e,t){t=(t||[]).slice();var n=i.map(e||[],function(e,t){return{exist:e}});return r(t,function(e,i){if(o(e)){for(var r=0;r<n.length;r++)if(!n[r].option&&null!=e.id&&n[r].exist.id===e.id+"")return n[r].option=e,void(t[i]=null);for(r=0;r<n.length;r++){var a=n[r].exist;if(!(n[r].option||null!=a.id&&null!=e.id||null==e.name||u(e)||u(a)||a.name!==e.name+""))return n[r].option=e,void(t[i]=null)}}}),r(t,function(e,t){if(o(e)){for(var i=0;i<n.length;i++){var r=n[i].exist;if(!n[i].option&&!u(r)&&null==e.id){n[i].option=e;break}}i>=n.length&&n.push({option:e})}}),n},t.makeIdAndName=function(e){var t=i.createHashMap();r(e,function(e,n){var i=e.exist;i&&t.set(i.id,e)}),r(e,function(e,n){var r=e.option;i.assert(!r||null==r.id||!t.get(r.id)||t.get(r.id)===e,"id duplicates: "+(r&&r.id)),r&&null!=r.id&&t.set(r.id,e),!e.keyInfo&&(e.keyInfo={})}),r(e,function(e,n){var i=e.exist,r=e.option,a=e.keyInfo;if(o(r)){if(a.name=null!=r.name?r.name+"":i?i.name:s+n,i)a.id=i.id;else if(null!=r.id)a.id=r.id+"";else{var l=0;do{a.id="\0"+a.name+"\0"+l++}while(t.get(a.id))}t.set(a.id,e)}})},t.isNameSpecified=function(e){var t=e.name;return!(!t||!t.indexOf(s))},t.isIdInner=u,t.compressBatches=function(e,t){var n={},i={};return r(e||[],n),r(t||[],i,n),[o(n),o(i)];function r(e,t,n){for(var i=0,r=e.length;i<r;i++)for(var o=e[i].seriesId,a=l(e[i].dataIndex),s=n&&n[o],u=0,c=a.length;u<c;u++){var d=a[u];s&&s[d]?s[d]=null:(t[o]||(t[o]={}))[d]=1}}function o(e,t){var n=[];for(var i in e)if(e.hasOwnProperty(i)&&null!=e[i])if(t)n.push(+i);else{var r=o(e[i],!0);r.length&&n.push({seriesId:i,dataIndex:r})}return n}},t.queryDataIndex=function(e,t){return null!=t.dataIndexInside?t.dataIndexInside:null!=t.dataIndex?i.isArray(t.dataIndex)?i.map(t.dataIndex,function(t){return e.indexOfRawIndex(t)}):e.indexOfRawIndex(t.dataIndex):null!=t.name?i.isArray(t.name)?i.map(t.name,function(t){return e.indexOfName(t)}):e.indexOfName(t.name):void 0},t.makeInner=function(){var e="__\0ec_inner_"+c+++"_"+Math.random().toFixed(5);return function(t){return t[e]||(t[e]={})}},t.parseFinder=function(e,t,n){if(i.isString(t)){var o={};o[t+"Index"]=0,t=o}var a=n&&n.defaultMainType;!a||d(t,a+"Index")||d(t,a+"Id")||d(t,a+"Name")||(t[a+"Index"]=0);var s={};return r(t,function(r,o){if(r=t[o],"dataIndex"!==o&&"dataIndexInside"!==o){var a=o.match(/^(\w+)(Index|Id|Name)$/)||[],l=a[1],u=(a[2]||"").toLowerCase();if(!(!l||!u||null==r||"index"===u&&"none"===r||n&&n.includeMainTypes&&i.indexOf(n.includeMainTypes,l)<0)){var c={mainType:l};"index"===u&&"all"===r||(c[u]=r);var d=e.queryComponents(c);s[l+"Models"]=d,s[l+"Model"]=d[0]}}else s[o]=r}),s},t.setAttribute=function(e,t,n){e.setAttribute?e.setAttribute(t,n):e[t]=n},t.getAttribute=function(e,t){return e.getAttribute?e.getAttribute(t):e[t]}},"./node_modules/echarts/lib/util/number.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=1e-4;var o=/^(?:(\d{4})(?:[-\/](\d{1,2})(?:[-\/](\d{1,2})(?:[T ](\d{1,2})(?::(\d\d)(?::(\d\d)(?:[.,](\d+))?)?)?(Z|[\+\-]\d\d:?\d\d)?)?)?)?)?$/;function a(e){return Math.floor(Math.log(e)/Math.LN10)}t.linearMap=function(e,t,n,i){var r=t[1]-t[0],o=n[1]-n[0];if(0===r)return 0===o?n[0]:(n[0]+n[1])/2;if(i)if(r>0){if(e<=t[0])return n[0];if(e>=t[1])return n[1]}else{if(e>=t[0])return n[0];if(e<=t[1])return n[1]}else{if(e===t[0])return n[0];if(e===t[1])return n[1]}return(e-t[0])/r*o+n[0]},t.parsePercent=function(e,t){switch(e){case"center":case"middle":e="50%";break;case"left":case"top":e="0%";break;case"right":case"bottom":e="100%"}return"string"==typeof e?function(e){return e.replace(/^\s+/,"").replace(/\s+$/,"")}(e).match(/%$/)?parseFloat(e)/100*t:parseFloat(e):null==e?NaN:+e},t.round=function(e,t,n){return null==t&&(t=10),t=Math.min(Math.max(0,t),20),e=(+e).toFixed(t),n?e:+e},t.asc=function(e){return e.sort(function(e,t){return e-t}),e},t.getPrecision=function(e){if(e=+e,isNaN(e))return 0;for(var t=1,n=0;Math.round(e*t)/t!==e;)t*=10,n++;return n},t.getPrecisionSafe=function(e){var t=e.toString(),n=t.indexOf("e");if(n>0){var i=+t.slice(n+1);return i<0?-i:0}var r=t.indexOf(".");return r<0?0:t.length-1-r},t.getPixelPrecision=function(e,t){var n=Math.log,i=Math.LN10,r=Math.floor(n(e[1]-e[0])/i),o=Math.round(n(Math.abs(t[1]-t[0]))/i),a=Math.min(Math.max(-r+o,0),20);return isFinite(a)?a:20},t.getPercentWithPrecision=function(e,t,n){if(!e[t])return 0;var r=i.reduce(e,function(e,t){return e+(isNaN(t)?0:t)},0);if(0===r)return 0;for(var o=Math.pow(10,n),a=i.map(e,function(e){return(isNaN(e)?0:e)/r*o*100}),s=100*o,l=i.map(a,function(e){return Math.floor(e)}),u=i.reduce(l,function(e,t){return e+t},0),c=i.map(a,function(e,t){return e-l[t]});u<s;){for(var d=Number.NEGATIVE_INFINITY,h=null,f=0,p=c.length;f<p;++f)c[f]>d&&(d=c[f],h=f);++l[h],c[h]=0,++u}return l[t]/o},t.MAX_SAFE_INTEGER=9007199254740991,t.remRadian=function(e){var t=2*Math.PI;return(e%t+t)%t},t.isRadianAroundZero=function(e){return e>-r&&e<r},t.parseDate=function(e){if(e instanceof Date)return e;if("string"==typeof e){var t=o.exec(e);if(!t)return new Date(NaN);if(t[8]){var n=+t[4]||0;return"Z"!==t[8].toUpperCase()&&(n-=t[8].slice(0,3)),new Date(Date.UTC(+t[1],+(t[2]||1)-1,+t[3]||1,n,+(t[5]||0),+t[6]||0,+t[7]||0))}return new Date(+t[1],+(t[2]||1)-1,+t[3]||1,+t[4]||0,+(t[5]||0),+t[6]||0,+t[7]||0)}return null==e?new Date(NaN):new Date(Math.round(e))},t.quantity=function(e){return Math.pow(10,a(e))},t.nice=function(e,t){var n=a(e),i=Math.pow(10,n),r=e/i;return e=(t?r<1.5?1:r<2.5?2:r<4?3:r<7?5:10:r<1?1:r<2?2:r<3?3:r<5?5:10)*i,n>=-20?+e.toFixed(n<0?-n:0):e},t.reformIntervals=function(e){e.sort(function(e,t){return function e(t,n,i){return t.interval[i]<n.interval[i]||t.interval[i]===n.interval[i]&&(t.close[i]-n.close[i]==(i?-1:1)||!i&&e(t,n,1))}(e,t,0)?-1:1});for(var t=-1/0,n=1,i=0;i<e.length;){for(var r=e[i].interval,o=e[i].close,a=0;a<2;a++)r[a]<=t&&(r[a]=t,o[a]=a?1:1-n),t=r[a],n=o[a];r[0]===r[1]&&o[0]*o[1]!=1?e.splice(i,1):i++}return e},t.isNumeric=function(e){return e-parseFloat(e)>=0}},"./node_modules/echarts/lib/util/symbol.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/util/graphic.js"),o=n("./node_modules/zrender/lib/core/BoundingRect.js"),a=r.extendShape({type:"triangle",shape:{cx:0,cy:0,width:0,height:0},buildPath:function(e,t){var n=t.cx,i=t.cy,r=t.width/2,o=t.height/2;e.moveTo(n,i-o),e.lineTo(n+r,i+o),e.lineTo(n-r,i+o),e.closePath()}}),s=r.extendShape({type:"diamond",shape:{cx:0,cy:0,width:0,height:0},buildPath:function(e,t){var n=t.cx,i=t.cy,r=t.width/2,o=t.height/2;e.moveTo(n,i-o),e.lineTo(n+r,i),e.lineTo(n,i+o),e.lineTo(n-r,i),e.closePath()}}),l=r.extendShape({type:"pin",shape:{x:0,y:0,width:0,height:0},buildPath:function(e,t){var n=t.x,i=t.y,r=t.width/5*3,o=Math.max(r,t.height),a=r/2,s=a*a/(o-a),l=i-o+a+s,u=Math.asin(s/a),c=Math.cos(u)*a,d=Math.sin(u),h=Math.cos(u),f=.6*a,p=.7*a;e.moveTo(n-c,l+s),e.arc(n,l,a,Math.PI-u,2*Math.PI+u),e.bezierCurveTo(n+c-d*f,l+s+h*f,n,i-p,n,i),e.bezierCurveTo(n,i-p,n-c+d*f,l+s+h*f,n-c,l+s),e.closePath()}}),u=r.extendShape({type:"arrow",shape:{x:0,y:0,width:0,height:0},buildPath:function(e,t){var n=t.height,i=t.width,r=t.x,o=t.y,a=i/3*2;e.moveTo(r,o),e.lineTo(r+a,o+n),e.lineTo(r,o+n/4*3),e.lineTo(r-a,o+n),e.lineTo(r,o),e.closePath()}}),c={line:r.Line,rect:r.Rect,roundRect:r.Rect,square:r.Rect,circle:r.Circle,diamond:s,pin:l,arrow:u,triangle:a},d={line:function(e,t,n,i,r){r.x1=e,r.y1=t+i/2,r.x2=e+n,r.y2=t+i/2},rect:function(e,t,n,i,r){r.x=e,r.y=t,r.width=n,r.height=i},roundRect:function(e,t,n,i,r){r.x=e,r.y=t,r.width=n,r.height=i,r.r=Math.min(n,i)/4},square:function(e,t,n,i,r){var o=Math.min(n,i);r.x=e,r.y=t,r.width=o,r.height=o},circle:function(e,t,n,i,r){r.cx=e+n/2,r.cy=t+i/2,r.r=Math.min(n,i)/2},diamond:function(e,t,n,i,r){r.cx=e+n/2,r.cy=t+i/2,r.width=n,r.height=i},pin:function(e,t,n,i,r){r.x=e+n/2,r.y=t+i/2,r.width=n,r.height=i},arrow:function(e,t,n,i,r){r.x=e+n/2,r.y=t+i/2,r.width=n,r.height=i},triangle:function(e,t,n,i,r){r.cx=e+n/2,r.cy=t+i/2,r.width=n,r.height=i}},h={};i.each(c,function(e,t){h[t]=new e});var f=r.extendShape({type:"symbol",shape:{symbolType:"",x:0,y:0,width:0,height:0},beforeBrush:function(){var e=this.style;"pin"===this.shape.symbolType&&"inside"===e.textPosition&&(e.textPosition=["50%","40%"],e.textAlign="center",e.textVerticalAlign="middle")},buildPath:function(e,t,n){var i=t.symbolType,r=h[i];"none"!==t.symbolType&&(r||(r=h[i="rect"]),d[i](t.x,t.y,t.width,t.height,r.shape),r.buildPath(e,r.shape,n))}});function p(e,t){if("image"!==this.type){var n=this.style,i=this.shape;i&&"line"===i.symbolType?n.stroke=e:this.__isEmptyBrush?(n.stroke=e,n.fill=t||"#fff"):(n.fill&&(n.fill=e),n.stroke&&(n.stroke=e)),this.dirty(!1)}}t.createSymbol=function(e,t,n,i,a,s,l){var u,c=0===e.indexOf("empty");return c&&(e=e.substr(5,1).toLowerCase()+e.substr(6)),(u=0===e.indexOf("image://")?r.makeImage(e.slice(8),new o(t,n,i,a),l?"center":"cover"):0===e.indexOf("path://")?r.makePath(e.slice(7),{},new o(t,n,i,a),l?"center":"cover"):new f({shape:{symbolType:e,x:t,y:n,width:i,height:a}})).__isEmptyBrush=c,u.setColor=p,u.setColor(s),u}},"./node_modules/echarts/lib/util/throttle.js":function(e,t){var n="\0__throttleOriginMethod",i="\0__throttleRate",r="\0__throttleType";function o(e,t,n){var i,r,o,a,s,l=0,u=0,c=null;function d(){u=(new Date).getTime(),c=null,e.apply(o,a||[])}t=t||0;var h=function(){i=(new Date).getTime(),o=this,a=arguments;var e=s||t,h=s||n;s=null,r=i-(h?l:u)-e,clearTimeout(c),h?c=setTimeout(d,e):r>=0?d():c=setTimeout(d,-r),l=i};return h.clear=function(){c&&(clearTimeout(c),c=null)},h.debounceNextCall=function(e){s=e},h}t.throttle=o,t.createOrUpdate=function(e,t,a,s){var l=e[t];if(l){var u=l[n]||l,c=l[r];if(l[i]!==a||c!==s){if(null==a||!s)return e[t]=u;(l=e[t]=o(u,a,"debounce"===s))[n]=u,l[r]=s,l[i]=a}return l}},t.clear=function(e,t){var i=e[t];i&&i[n]&&(e[t]=i[n])}},"./node_modules/echarts/lib/view/Chart.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js").each,r=n("./node_modules/zrender/lib/container/Group.js"),o=n("./node_modules/echarts/lib/util/component.js"),a=n("./node_modules/echarts/lib/util/clazz.js"),s=n("./node_modules/echarts/lib/util/model.js"),l=n("./node_modules/echarts/lib/stream/task.js").createTask,u=n("./node_modules/echarts/lib/chart/helper/createRenderPlanner.js"),c=s.makeInner(),d=u();function h(){this.group=new r,this.uid=o.getUID("viewChart"),this.renderTask=l({plan:g,reset:v}),this.renderTask.context={view:this}}h.prototype={type:"chart",init:function(e,t){},render:function(e,t,n,i){},highlight:function(e,t,n,i){m(e.getData(),i,"emphasis")},downplay:function(e,t,n,i){m(e.getData(),i,"normal")},remove:function(e,t){this.group.removeAll()},dispose:function(){},incrementalPrepareRender:null,incrementalRender:null,updateTransform:null};var f=h.prototype;function p(e,t){if(e&&(e.trigger(t),"group"===e.type))for(var n=0;n<e.childCount();n++)p(e.childAt(n),t)}function m(e,t,n){var r=s.queryDataIndex(e,t);null!=r?i(s.normalizeToArray(r),function(t){p(e.getItemGraphicEl(t),n)}):e.eachItemGraphicEl(function(e){p(e,n)})}function g(e){return d(e.model)}function v(e){var t=e.model,n=e.ecModel,i=e.api,r=e.payload,o=t.pipelineContext.progressiveRender,a=e.view,s=r&&c(r).updateMethod,l=o?"incrementalPrepareRender":s&&a[s]?s:"render";return"render"!==l&&a[l](t,n,i,r),y[l]}f.updateView=f.updateLayout=f.updateVisual=function(e,t,n,i){this.render(e,t,n,i)},a.enableClassExtend(h,["dispose"]),a.enableClassManagement(h,{registerWhenExtend:!0}),h.markUpdateMethod=function(e,t){c(e).updateMethod=t};var y={incrementalPrepareRender:{progress:function(e,t){t.view.incrementalRender(e,t.model,t.ecModel,t.api,t.payload)}},render:{forceFirstProgress:!0,progress:function(e,t){t.view.render(t.model,t.ecModel,t.api,t.payload)}}},_=h;e.exports=_},"./node_modules/echarts/lib/view/Component.js":function(e,t,n){var i=n("./node_modules/zrender/lib/container/Group.js"),r=n("./node_modules/echarts/lib/util/component.js"),o=n("./node_modules/echarts/lib/util/clazz.js"),a=function(){this.group=new i,this.uid=r.getUID("viewComponent")},s=a.prototype={constructor:a,init:function(e,t){},render:function(e,t,n,i){},dispose:function(){}};s.updateView=s.updateLayout=s.updateVisual=function(e,t,n,i){},o.enableClassExtend(a),o.enableClassManagement(a,{registerWhenExtend:!0});var l=a;e.exports=l},"./node_modules/echarts/lib/visual/aria.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/echarts/lib/lang.js"),o=n("./node_modules/echarts/lib/data/helper/dataProvider.js").retrieveRawValue;e.exports=function(e,t){var n=t.getModel("aria");if(n.get("show"))if(n.get("description"))e.setAttribute("aria-label",n.get("description"));else{var a=0;t.eachSeries(function(e,t){++a},this);var s,l=n.get("data.maxCount")||10,u=n.get("series.maxCount")||10,c=Math.min(a,u);if(!(a<1)){var d=function(){var e=t.getModel("title").option;return e&&e.length&&(e=e[0]),e&&e.text}();s=d?f(p("general.withTitle"),{title:d}):p("general.withoutTitle");var h=[];s+=f(p(a>1?"series.multiple.prefix":"series.single.prefix"),{seriesCount:a}),t.eachSeries(function(e,t){if(t<c){var n,i=e.get("name"),s="series."+(a>1?"multiple":"single")+".";n=f(n=p(i?s+"withName":s+"withoutName"),{seriesId:e.seriesIndex,seriesName:e.get("name"),seriesType:function(e){return r.series.typeNames[e]||"自定义图"}(e.subType)});var u=e.getData();window.data=u,u.count()>l?n+=f(p("data.partialData"),{displayCnt:l}):n+=p("data.allData");for(var d=[],m=0;m<u.count();m++)if(m<l){var g=u.getName(m),v=o(u,m);d.push(f(p(g?"data.withName":"data.withoutName"),{name:g,value:v}))}n+=d.join(p("data.separator.middle"))+p("data.separator.end"),h.push(n)}}),s+=h.join(p("series.multiple.separator.middle"))+p("series.multiple.separator.end"),e.setAttribute("aria-label",s)}}function f(e,t){if("string"!=typeof e)return e;var n=e;return i.each(t,function(e,t){n=n.replace(new RegExp("\\{\\s*"+t+"\\s*\\}","g"),e)}),n}function p(e){var t=n.get(e);if(null==t){for(var i=e.split("."),o=r.aria,a=0;a<i.length;++a)o=o[i[a]];return o}return t}}},"./node_modules/echarts/lib/visual/dataColor.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js").createHashMap;e.exports=function(e){return{getTargetSeries:function(t){var n={},r=i();return t.eachSeriesByType(e,function(e){e.__paletteScope=n,r.set(e.uid,e)}),r},reset:function(e,t){var n=e.getRawData(),i={},r=e.getData();r.each(function(e){var t=r.getRawIndex(e);i[t]=e}),n.each(function(t){var o=i[t],a=null!=o&&r.getItemVisual(o,"color",!0);if(a)n.setItemVisual(t,"color",a);else{var s=n.getItemModel(t).get("itemStyle.color")||e.getColorFromPalette(n.getName(t)||t+"",e.__paletteScope,n.count());n.setItemVisual(t,"color",s),null!=o&&r.setItemVisual(o,"color",s)}})}}}},"./node_modules/echarts/lib/visual/seriesColor.js":function(e,t,n){var i=n("./node_modules/zrender/lib/graphic/Gradient.js"),r={createOnAllSeries:!0,performRawSeries:!0,reset:function(e,t){var n=e.getData(),r=(e.visualColorAccessPath||"itemStyle.color").split("."),o=e.get(r)||e.getColorFromPalette(e.name,null,t.getSeriesCount());if(n.setVisual("color",o),!t.isSeriesFiltered(e)){"function"!=typeof o||o instanceof i||n.each(function(t){n.setItemVisual(t,"color",o(e.getDataParams(t)))});return{dataEach:n.hasItemOption?function(e,t){var n=e.getItemModel(t).get(r,!0);null!=n&&e.setItemVisual(t,"color",n)}:null}}}};e.exports=r},"./node_modules/jquery/dist/jquery.min.js":function(e,t,n){var i;/*! jQuery v3.3.1 | (c) JS Foundation and other contributors | jquery.org/license */!function(t,n){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(r,o){"use strict";var a=[],s=r.document,l=Object.getPrototypeOf,u=a.slice,c=a.concat,d=a.push,h=a.indexOf,f={},p=f.toString,m=f.hasOwnProperty,g=m.toString,v=g.call(Object),y={},_=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},x=function(e){return null!=e&&e===e.window},b={type:!0,src:!0,noModule:!0};function w(e,t,n){var i,r=(t=t||s).createElement("script");if(r.text=e,n)for(i in b)n[i]&&(r[i]=n[i]);t.head.appendChild(r).parentNode.removeChild(r)}function S(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?f[p.call(e)]||"object":typeof e}var A=function(e,t){return new A.fn.init(e,t)},T=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(e){var t=!!e&&"length"in e&&e.length,n=S(e);return!_(e)&&!x(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}A.fn=A.prototype={jquery:"3.3.1",constructor:A,length:0,toArray:function(){return u.call(this)},get:function(e){return null==e?u.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=A.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return A.each(this,e)},map:function(e){return this.pushStack(A.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:d,sort:a.sort,splice:a.splice},A.extend=A.fn.extend=function(){var e,t,n,i,r,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==typeof a||_(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(i=e[t])&&(u&&i&&(A.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,o=n&&Array.isArray(n)?n:[]):o=n&&A.isPlainObject(n)?n:{},a[t]=A.extend(u,o,i)):void 0!==i&&(a[t]=i));return a},A.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e)||(t=l(e))&&("function"!=typeof(n=m.call(t,"constructor")&&t.constructor)||g.call(n)!==v))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){w(e)},each:function(e,t){var n,i=0;if(C(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(T,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?A.merge(n,"string"==typeof e?[e]:e):d.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:h.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,a=!n;r<o;r++)!t(e[r],r)!==a&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,a=[];if(C(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&a.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&a.push(r);return c.apply([],a)},guid:1,support:y}),"function"==typeof Symbol&&(A.fn[Symbol.iterator]=a[Symbol.iterator]),A.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){f["[object "+t+"]"]=t.toLowerCase()});var j=function(e){var t,n,i,r,o,a,s,l,u,c,d,h,f,p,m,g,v,y,_,x="sizzle"+1*new Date,b=e.document,w=0,S=0,A=ae(),T=ae(),C=ae(),j=function(e,t){return e===t&&(d=!0),0},M={}.hasOwnProperty,k=[],D=k.pop,I=k.push,P=k.push,z=k.slice,E=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},O="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",R="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",N="\\["+L+"*("+R+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+L+"*\\]",B=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+N+")*)|.*)\\)|)",H=new RegExp(L+"+","g"),F=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),W=new RegExp("^"+L+"*,"+L+"*"),V=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),q=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),U=new RegExp(B),G=new RegExp("^"+R+"$"),Y={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+O+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,$=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,K=/[+~]/,J=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),ee=function(e,t,n){var i="0x"+t-65536;return i!=i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){h()},re=ye(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{P.apply(k=z.call(b.childNodes),b.childNodes),k[b.childNodes.length].nodeType}catch(e){P={apply:k.length?function(e,t){I.apply(e,z.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function oe(e,t,i,r){var o,s,u,c,d,p,v,y=t&&t.ownerDocument,w=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return i;if(!r&&((t?t.ownerDocument||t:b)!==f&&h(t),t=t||f,m)){if(11!==w&&(d=Q.exec(e)))if(o=d[1]){if(9===w){if(!(u=t.getElementById(o)))return i;if(u.id===o)return i.push(u),i}else if(y&&(u=y.getElementById(o))&&_(t,u)&&u.id===o)return i.push(u),i}else{if(d[2])return P.apply(i,t.getElementsByTagName(e)),i;if((o=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return P.apply(i,t.getElementsByClassName(o)),i}if(n.qsa&&!C[e+" "]&&(!g||!g.test(e))){if(1!==w)y=t,v=e;else if("object"!==t.nodeName.toLowerCase()){for((c=t.getAttribute("id"))?c=c.replace(te,ne):t.setAttribute("id",c=x),s=(p=a(e)).length;s--;)p[s]="#"+c+" "+ve(p[s]);v=p.join(","),y=K.test(e)&&me(t.parentNode)||t}if(v)try{return P.apply(i,y.querySelectorAll(v)),i}catch(e){}finally{c===x&&t.removeAttribute("id")}}}return l(e.replace(F,"$1"),t,i,r)}function ae(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function se(e){return e[x]=!0,e}function le(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ue(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function ce(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function de(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function fe(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&re(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function pe(e){return se(function(t){return t=+t,se(function(n,i){for(var r,o=e([],n.length,t),a=o.length;a--;)n[r=o[a]]&&(n[r]=!(i[r]=n[r]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},h=oe.setDocument=function(e){var t,r,a=e?e.ownerDocument||e:b;return a!==f&&9===a.nodeType&&a.documentElement?(p=(f=a).documentElement,m=!o(f),b!==f&&(r=f.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ie,!1):r.attachEvent&&r.attachEvent("onunload",ie)),n.attributes=le(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=le(function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Z.test(f.getElementsByClassName),n.getById=le(function(e){return p.appendChild(e).id=x,!f.getElementsByName||!f.getElementsByName(x).length}),n.getById?(i.filter.ID=function(e){var t=e.replace(J,ee);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(J,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=Z.test(f.querySelectorAll))&&(le(function(e){p.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+L+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+L+"*(?:value|"+O+")"),e.querySelectorAll("[id~="+x+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||g.push(".#.+[+~]")}),le(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+L+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(n.matchesSelector=Z.test(y=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&le(function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",B)}),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=Z.test(p.compareDocumentPosition),_=t||Z.test(p.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},j=t?function(e,t){if(e===t)return d=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e===f||e.ownerDocument===b&&_(b,e)?-1:t===f||t.ownerDocument===b&&_(b,t)?1:c?E(c,e)-E(c,t):0:4&i?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!r||!o)return e===f?-1:t===f?1:r?-1:o?1:c?E(c,e)-E(c,t):0;if(r===o)return ce(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[i]===s[i];)i++;return i?ce(a[i],s[i]):a[i]===b?-1:s[i]===b?1:0},f):f},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==f&&h(e),t=t.replace(q,"='$1']"),n.matchesSelector&&m&&!C[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var i=y.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return oe(t,f,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==f&&h(e),_(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==f&&h(e);var r=i.attrHandle[t.toLowerCase()],o=r&&M.call(i.attrHandle,t.toLowerCase())?r(e,t,!m):void 0;return void 0!==o?o:n.attributes||!m?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,i=[],r=0,o=0;if(d=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(j),d){for(;t=e[o++];)t===e[o]&&(r=i.push(o));for(;r--;)e.splice(i[r],1)}return c=null,e},r=oe.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=oe.selectors={cacheLength:50,createPseudo:se,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(J,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(J,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Y.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&U.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(J,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=A[e+" "];return t||(t=new RegExp("(^|"+L+")"+e+"("+L+"|$)"))&&A(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(i){var r=oe.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(H," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var u,c,d,h,f,p,m=o!==a?"nextSibling":"previousSibling",g=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!l&&!s,_=!1;if(g){if(o){for(;m;){for(h=t;h=h[m];)if(s?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;p=m="only"===e&&!p&&"nextSibling"}return!0}if(p=[a?g.firstChild:g.lastChild],a&&y){for(_=(f=(u=(c=(d=(h=g)[x]||(h[x]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]||[])[0]===w&&u[1])&&u[2],h=f&&g.childNodes[f];h=++f&&h&&h[m]||(_=f=0)||p.pop();)if(1===h.nodeType&&++_&&h===t){c[e]=[w,f,_];break}}else if(y&&(_=f=(u=(c=(d=(h=t)[x]||(h[x]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]||[])[0]===w&&u[1]),!1===_)for(;(h=++f&&h&&h[m]||(_=f=0)||p.pop())&&((s?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++_||(y&&((c=(d=h[x]||(h[x]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]=[w,_]),h!==t)););return(_-=r)===i||_%i==0&&_/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return r[x]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){for(var i,o=r(e,t),a=o.length;a--;)e[i=E(e,o[a])]=!(n[i]=o[a])}):function(e){return r(e,0,n)}):r}},pseudos:{not:se(function(e){var t=[],n=[],i=s(e.replace(F,"$1"));return i[x]?se(function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return oe(e,t).length>0}}),contains:se(function(e){return e=e.replace(J,ee),function(t){return(t.textContent||t.innerText||r(t)).indexOf(e)>-1}}),lang:se(function(e){return G.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(J,ee).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:fe(!1),disabled:fe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return $.test(e.nodeName)},input:function(e){return X.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:pe(function(){return[0]}),last:pe(function(e,t){return[t-1]}),eq:pe(function(e,t,n){return[n<0?n+t:n]}),even:pe(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:pe(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:pe(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:pe(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=de(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=he(t);function ge(){}function ve(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function ye(e,t,n){var i=t.dir,r=t.next,o=r||i,a=n&&"parentNode"===o,s=S++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||a)return e(t,n,r);return!1}:function(t,n,l){var u,c,d,h=[w,s];if(l){for(;t=t[i];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||a)if(c=(d=t[x]||(t[x]={}))[t.uniqueID]||(d[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((u=c[o])&&u[0]===w&&u[1]===s)return h[2]=u[2];if(c[o]=h,h[2]=e(t,n,l))return!0}return!1}}function _e(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function xe(e,t,n,i,r){for(var o,a=[],s=0,l=e.length,u=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,i,r)||(a.push(o),u&&t.push(s)));return a}function be(e,t,n,i,r,o){return i&&!i[x]&&(i=be(i)),r&&!r[x]&&(r=be(r,o)),se(function(o,a,s,l){var u,c,d,h=[],f=[],p=a.length,m=o||function(e,t,n){for(var i=0,r=t.length;i<r;i++)oe(e,t[i],n);return n}(t||"*",s.nodeType?[s]:s,[]),g=!e||!o&&t?m:xe(m,h,e,s,l),v=n?r||(o?e:p||i)?[]:a:g;if(n&&n(g,v,s,l),i)for(u=xe(v,f),i(u,[],s,l),c=u.length;c--;)(d=u[c])&&(v[f[c]]=!(g[f[c]]=d));if(o){if(r||e){if(r){for(u=[],c=v.length;c--;)(d=v[c])&&u.push(g[c]=d);r(null,v=[],u,l)}for(c=v.length;c--;)(d=v[c])&&(u=r?E(o,d):h[c])>-1&&(o[u]=!(a[u]=d))}}else v=xe(v===a?v.splice(p,v.length):v),r?r(null,a,v,l):P.apply(a,v)})}function we(e){for(var t,n,r,o=e.length,a=i.relative[e[0].type],s=a||i.relative[" "],l=a?1:0,c=ye(function(e){return e===t},s,!0),d=ye(function(e){return E(t,e)>-1},s,!0),h=[function(e,n,i){var r=!a&&(i||n!==u)||((t=n).nodeType?c(e,n,i):d(e,n,i));return t=null,r}];l<o;l++)if(n=i.relative[e[l].type])h=[ye(_e(h),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[x]){for(r=++l;r<o&&!i.relative[e[r].type];r++);return be(l>1&&_e(h),l>1&&ve(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(F,"$1"),n,l<r&&we(e.slice(l,r)),r<o&&we(e=e.slice(r)),r<o&&ve(e))}h.push(n)}return _e(h)}function Se(e,t){var n=t.length>0,r=e.length>0,o=function(o,a,s,l,c){var d,p,g,v=0,y="0",_=o&&[],x=[],b=u,S=o||r&&i.find.TAG("*",c),A=w+=null==b?1:Math.random()||.1,T=S.length;for(c&&(u=a===f||a||c);y!==T&&null!=(d=S[y]);y++){if(r&&d){for(p=0,a||d.ownerDocument===f||(h(d),s=!m);g=e[p++];)if(g(d,a||f,s)){l.push(d);break}c&&(w=A)}n&&((d=!g&&d)&&v--,o&&_.push(d))}if(v+=y,n&&y!==v){for(p=0;g=t[p++];)g(_,x,a,s);if(o){if(v>0)for(;y--;)_[y]||x[y]||(x[y]=D.call(l));x=xe(x)}P.apply(l,x),c&&!o&&x.length>0&&v+t.length>1&&oe.uniqueSort(l)}return c&&(w=A,u=b),_};return n?se(o):o}return ge.prototype=i.filters=i.pseudos,i.setFilters=new ge,a=oe.tokenize=function(e,t){var n,r,o,a,s,l,u,c=T[e+" "];if(c)return t?0:c.slice(0);for(s=e,l=[],u=i.preFilter;s;){for(a in n&&!(r=W.exec(s))||(r&&(s=s.slice(r[0].length)||s),l.push(o=[])),n=!1,(r=V.exec(s))&&(n=r.shift(),o.push({value:n,type:r[0].replace(F," ")}),s=s.slice(n.length)),i.filter)!(r=Y[a].exec(s))||u[a]&&!(r=u[a](r))||(n=r.shift(),o.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?oe.error(e):T(e,l).slice(0)},s=oe.compile=function(e,t){var n,i=[],r=[],o=C[e+" "];if(!o){for(t||(t=a(e)),n=t.length;n--;)(o=we(t[n]))[x]?i.push(o):r.push(o);(o=C(e,Se(r,i))).selector=e}return o},l=oe.select=function(e,t,n,r){var o,l,u,c,d,h="function"==typeof e&&e,f=!r&&a(e=h.selector||e);if(n=n||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(u=l[0]).type&&9===t.nodeType&&m&&i.relative[l[1].type]){if(!(t=(i.find.ID(u.matches[0].replace(J,ee),t)||[])[0]))return n;h&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(o=Y.needsContext.test(e)?0:l.length;o--&&(u=l[o],!i.relative[c=u.type]);)if((d=i.find[c])&&(r=d(u.matches[0].replace(J,ee),K.test(l[0].type)&&me(t.parentNode)||t))){if(l.splice(o,1),!(e=r.length&&ve(l)))return P.apply(n,r),n;break}}return(h||s(e,f))(r,t,!m,n,!t||K.test(e)&&me(t.parentNode)||t),n},n.sortStable=x.split("").sort(j).join("")===x,n.detectDuplicates=!!d,h(),n.sortDetached=le(function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))}),le(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ue("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&le(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ue("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),le(function(e){return null==e.getAttribute("disabled")})||ue(O,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),oe}(r);A.find=j,A.expr=j.selectors,A.expr[":"]=A.expr.pseudos,A.uniqueSort=A.unique=j.uniqueSort,A.text=j.getText,A.isXMLDoc=j.isXML,A.contains=j.contains,A.escapeSelector=j.escape;var M=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&A(e).is(n))break;i.push(e)}return i},k=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},D=A.expr.match.needsContext;function I(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var P=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function z(e,t,n){return _(t)?A.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?A.grep(e,function(e){return e===t!==n}):"string"!=typeof t?A.grep(e,function(e){return h.call(t,e)>-1!==n}):A.filter(t,e,n)}A.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?A.find.matchesSelector(i,e)?[i]:[]:A.find.matches(e,A.grep(t,function(e){return 1===e.nodeType}))},A.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(A(e).filter(function(){for(t=0;t<i;t++)if(A.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)A.find(e,r[t],n);return i>1?A.uniqueSort(n):n},filter:function(e){return this.pushStack(z(this,e||[],!1))},not:function(e){return this.pushStack(z(this,e||[],!0))},is:function(e){return!!z(this,"string"==typeof e&&D.test(e)?A(e):e||[],!1).length}});var E,O=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(A.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||E,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:O.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof A?t[0]:t,A.merge(this,A.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:s,!0)),P.test(i[1])&&A.isPlainObject(t))for(i in t)_(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=s.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):_(e)?void 0!==n.ready?n.ready(e):e(A):A.makeArray(e,this)}).prototype=A.fn,E=A(s);var L=/^(?:parents|prev(?:Until|All))/,R={children:!0,contents:!0,next:!0,prev:!0};function N(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}A.fn.extend({has:function(e){var t=A(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(A.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,o=[],a="string"!=typeof e&&A(e);if(!D.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&A.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?A.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?h.call(A(e),this[0]):h.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(A.uniqueSort(A.merge(this.get(),A(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),A.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return M(e,"parentNode")},parentsUntil:function(e,t,n){return M(e,"parentNode",n)},next:function(e){return N(e,"nextSibling")},prev:function(e){return N(e,"previousSibling")},nextAll:function(e){return M(e,"nextSibling")},prevAll:function(e){return M(e,"previousSibling")},nextUntil:function(e,t,n){return M(e,"nextSibling",n)},prevUntil:function(e,t,n){return M(e,"previousSibling",n)},siblings:function(e){return k((e.parentNode||{}).firstChild,e)},children:function(e){return k(e.firstChild)},contents:function(e){return I(e,"iframe")?e.contentDocument:(I(e,"template")&&(e=e.content||e),A.merge([],e.childNodes))}},function(e,t){A.fn[e]=function(n,i){var r=A.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=A.filter(i,r)),this.length>1&&(R[e]||A.uniqueSort(r),L.test(e)&&r.reverse()),this.pushStack(r)}});var B=/[^\x20\t\r\n\f]+/g;function H(e){return e}function F(e){throw e}function W(e,t,n,i){var r;try{e&&_(r=e.promise)?r.call(e).done(t).fail(n):e&&_(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}A.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return A.each(e.match(B)||[],function(e,n){t[n]=!0}),t}(e):A.extend({},e);var t,n,i,r,o=[],a=[],s=-1,l=function(){for(r=r||e.once,i=t=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},u={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){A.each(n,function(n,i){_(i)?e.unique&&u.has(i)||o.push(i):i&&i.length&&"string"!==S(i)&&t(i)})}(arguments),n&&!t&&l()),this},remove:function(){return A.each(arguments,function(e,t){for(var n;(n=A.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--}),this},has:function(e){return e?A.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=a=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},A.extend({Deferred:function(e){var t=[["notify","progress",A.Callbacks("memory"),A.Callbacks("memory"),2],["resolve","done",A.Callbacks("once memory"),A.Callbacks("once memory"),0,"resolved"],["reject","fail",A.Callbacks("once memory"),A.Callbacks("once memory"),1,"rejected"]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return A.Deferred(function(n){A.each(t,function(t,i){var r=_(e[i[4]])&&e[i[4]];o[i[1]](function(){var e=r&&r.apply(this,arguments);e&&_(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(e,n,i){var o=0;function a(e,t,n,i){return function(){var s=this,l=arguments,u=function(){var r,u;if(!(e<o)){if((r=n.apply(s,l))===t.promise())throw new TypeError("Thenable self-resolution");u=r&&("object"==typeof r||"function"==typeof r)&&r.then,_(u)?i?u.call(r,a(o,t,H,i),a(o,t,F,i)):(o++,u.call(r,a(o,t,H,i),a(o,t,F,i),a(o,t,H,t.notifyWith))):(n!==H&&(s=void 0,l=[r]),(i||t.resolveWith)(s,l))}},c=i?u:function(){try{u()}catch(i){A.Deferred.exceptionHook&&A.Deferred.exceptionHook(i,c.stackTrace),e+1>=o&&(n!==F&&(s=void 0,l=[i]),t.rejectWith(s,l))}};e?c():(A.Deferred.getStackHook&&(c.stackTrace=A.Deferred.getStackHook()),r.setTimeout(c))}}return A.Deferred(function(r){t[0][3].add(a(0,r,_(i)?i:H,r.notifyWith)),t[1][3].add(a(0,r,_(e)?e:H)),t[2][3].add(a(0,r,_(n)?n:F))}).promise()},promise:function(e){return null!=e?A.extend(e,i):i}},o={};return A.each(t,function(e,r){var a=r[2],s=r[5];i[r[1]]=a.add,s&&a.add(function(){n=s},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(r[3].fire),o[r[0]]=function(){return o[r[0]+"With"](this===o?void 0:this,arguments),this},o[r[0]+"With"]=a.fireWith}),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=u.call(arguments),o=A.Deferred(),a=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?u.call(arguments):n,--t||o.resolveWith(i,r)}};if(t<=1&&(W(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||_(r[n]&&r[n].then)))return o.then();for(;n--;)W(r[n],a(n),o.reject);return o.promise()}});var V=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;A.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&V.test(e.name)&&r.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},A.readyException=function(e){r.setTimeout(function(){throw e})};var q=A.Deferred();function U(){s.removeEventListener("DOMContentLoaded",U),r.removeEventListener("load",U),A.ready()}A.fn.ready=function(e){return q.then(e).catch(function(e){A.readyException(e)}),this},A.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--A.readyWait:A.isReady)||(A.isReady=!0,!0!==e&&--A.readyWait>0||q.resolveWith(s,[A]))}}),A.ready.then=q.then,"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll?r.setTimeout(A.ready):(s.addEventListener("DOMContentLoaded",U),r.addEventListener("load",U));var G=function(e,t,n,i,r,o,a){var s=0,l=e.length,u=null==n;if("object"===S(n))for(s in r=!0,n)G(e,t,s,n[s],!0,o,a);else if(void 0!==i&&(r=!0,_(i)||(a=!0),u&&(a?(t.call(e,i),t=null):(u=t,t=function(e,t,n){return u.call(A(e),n)})),t))for(;s<l;s++)t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)));return r?e:u?t.call(e):l?t(e[0],n):o},Y=/^-ms-/,X=/-([a-z])/g;function $(e,t){return t.toUpperCase()}function Z(e){return e.replace(Y,"ms-").replace(X,$)}var Q=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function K(){this.expando=A.expando+K.uid++}K.uid=1,K.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Q(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[Z(t)]=n;else for(i in t)r[Z(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Z(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Z):(t=Z(t))in i?[t]:t.match(B)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||A.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!A.isEmptyObject(t)}};var J=new K,ee=new K,te=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ne=/[A-Z]/g;function ie(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(ne,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:te.test(e)?JSON.parse(e):e)}(n)}catch(e){}ee.set(e,t,n)}else n=void 0;return n}A.extend({hasData:function(e){return ee.hasData(e)||J.hasData(e)},data:function(e,t,n){return ee.access(e,t,n)},removeData:function(e,t){ee.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),A.fn.extend({data:function(e,t){var n,i,r,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(r=ee.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(i=a[n].name).indexOf("data-")&&(i=Z(i.slice(5)),ie(o,i,r[i]));J.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){ee.set(this,e)}):G(this,function(t){var n;if(o&&void 0===t){if(void 0!==(n=ee.get(o,e)))return n;if(void 0!==(n=ie(o,e)))return n}else this.each(function(){ee.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){ee.remove(this,e)})}}),A.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=J.get(e,t),n&&(!i||Array.isArray(n)?i=J.access(e,t,A.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=A.queue(e,t),i=n.length,r=n.shift(),o=A._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,function(){A.dequeue(e,t)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:A.Callbacks("once memory").add(function(){J.remove(e,[t+"queue",n])})})}}),A.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?A.queue(this[0],e):void 0===t?this:this.each(function(){var n=A.queue(this,e,t);A._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&A.dequeue(this,e)})},dequeue:function(e){return this.each(function(){A.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=A.Deferred(),o=this,a=this.length,s=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=J.get(o[a],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,oe=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ae=["Top","Right","Bottom","Left"],se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&A.contains(e.ownerDocument,e)&&"none"===A.css(e,"display")},le=function(e,t,n,i){var r,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];for(o in r=n.apply(e,i||[]),t)e.style[o]=a[o];return r};function ue(e,t,n,i){var r,o,a=20,s=i?function(){return i.cur()}:function(){return A.css(e,t,"")},l=s(),u=n&&n[3]||(A.cssNumber[t]?"":"px"),c=(A.cssNumber[t]||"px"!==u&&+l)&&oe.exec(A.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;a--;)A.style(e,t,c+u),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),c/=o;c*=2,A.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=r)),r}var ce={};function de(e){var t,n=e.ownerDocument,i=e.nodeName,r=ce[i];return r||(t=n.body.appendChild(n.createElement(i)),r=A.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),ce[i]=r,r)}function he(e,t){for(var n,i,r=[],o=0,a=e.length;o<a;o++)(i=e[o]).style&&(n=i.style.display,t?("none"===n&&(r[o]=J.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&se(i)&&(r[o]=de(i))):"none"!==n&&(r[o]="none",J.set(i,"display",n)));for(o=0;o<a;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}A.fn.extend({show:function(){return he(this,!0)},hide:function(){return he(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?A(this).show():A(this).hide()})}});var fe=/^(?:checkbox|radio)$/i,pe=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,me=/^$|^module$|\/(?:java|ecma)script/i,ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&I(e,t)?A.merge([e],n):n}function ye(e,t){for(var n=0,i=e.length;n<i;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td;var _e=/<|&#?\w+;/;function xe(e,t,n,i,r){for(var o,a,s,l,u,c,d=t.createDocumentFragment(),h=[],f=0,p=e.length;f<p;f++)if((o=e[f])||0===o)if("object"===S(o))A.merge(h,o.nodeType?[o]:o);else if(_e.test(o)){for(a=a||d.appendChild(t.createElement("div")),s=(pe.exec(o)||["",""])[1].toLowerCase(),l=ge[s]||ge._default,a.innerHTML=l[1]+A.htmlPrefilter(o)+l[2],c=l[0];c--;)a=a.lastChild;A.merge(h,a.childNodes),(a=d.firstChild).textContent=""}else h.push(t.createTextNode(o));for(d.textContent="",f=0;o=h[f++];)if(i&&A.inArray(o,i)>-1)r&&r.push(o);else if(u=A.contains(o.ownerDocument,o),a=ve(d.appendChild(o),"script"),u&&ye(a),n)for(c=0;o=a[c++];)me.test(o.type||"")&&n.push(o);return d}!function(){var e=s.createDocumentFragment().appendChild(s.createElement("div")),t=s.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),y.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var be=s.documentElement,we=/^key/,Se=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ae=/^([^.]*)(?:\.(.+)|)/;function Te(){return!0}function Ce(){return!1}function je(){try{return s.activeElement}catch(e){}}function Me(e,t,n,i,r,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(i=i||n,n=void 0),t)Me(e,s,n,i,t[s],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Ce;else if(!r)return e;return 1===o&&(a=r,(r=function(e){return A().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=A.guid++)),e.each(function(){A.event.add(this,t,r,i,n)})}A.event={global:{},add:function(e,t,n,i,r){var o,a,s,l,u,c,d,h,f,p,m,g=J.get(e);if(g)for(n.handler&&(n=(o=n).handler,r=o.selector),r&&A.find.matchesSelector(be,r),n.guid||(n.guid=A.guid++),(l=g.events)||(l=g.events={}),(a=g.handle)||(a=g.handle=function(t){return void 0!==A&&A.event.triggered!==t.type?A.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(B)||[""]).length;u--;)f=m=(s=Ae.exec(t[u])||[])[1],p=(s[2]||"").split(".").sort(),f&&(d=A.event.special[f]||{},f=(r?d.delegateType:d.bindType)||f,d=A.event.special[f]||{},c=A.extend({type:f,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&A.expr.match.needsContext.test(r),namespace:p.join(".")},o),(h=l[f])||((h=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,i,p,a)||e.addEventListener&&e.addEventListener(f,a)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),r?h.splice(h.delegateCount++,0,c):h.push(c),A.event.global[f]=!0)},remove:function(e,t,n,i,r){var o,a,s,l,u,c,d,h,f,p,m,g=J.hasData(e)&&J.get(e);if(g&&(l=g.events)){for(u=(t=(t||"").match(B)||[""]).length;u--;)if(f=m=(s=Ae.exec(t[u])||[])[1],p=(s[2]||"").split(".").sort(),f){for(d=A.event.special[f]||{},h=l[f=(i?d.delegateType:d.bindType)||f]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)c=h[o],!r&&m!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(h.splice(o,1),c.selector&&h.delegateCount--,d.remove&&d.remove.call(e,c));a&&!h.length&&(d.teardown&&!1!==d.teardown.call(e,p,g.handle)||A.removeEvent(e,f,g.handle),delete l[f])}else for(f in l)A.event.remove(e,f+t[u],n,i,!0);A.isEmptyObject(l)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,a,s=A.event.fix(e),l=new Array(arguments.length),u=(J.get(this,"events")||{})[s.type]||[],c=A.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){for(a=A.event.handlers.call(this,s,u),t=0;(r=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(i=((A.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,l))&&!1===(s.result=i)&&(s.preventDefault(),s.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,i,r,o,a,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[r=(i=t[n]).selector+" "]&&(a[r]=i.needsContext?A(r,this).index(u)>-1:A.find(r,this,null,[u]).length),a[r]&&o.push(i);o.length&&s.push({elem:u,handlers:o})}return u=this,l<t.length&&s.push({elem:u,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(A.Event.prototype,e,{enumerable:!0,configurable:!0,get:_(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[A.expando]?e:new A.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==je()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===je()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&I(this,"input"))return this.click(),!1},_default:function(e){return I(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},A.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},A.Event=function(e,t){if(!(this instanceof A.Event))return new A.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Te:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&A.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[A.expando]=!0},A.Event.prototype={constructor:A.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Te,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Te,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Te,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},A.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&we.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Se.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},A.event.addProp),A.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){A.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,r=e.handleObj;return i&&(i===this||A.contains(this,i))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),A.fn.extend({on:function(e,t,n,i){return Me(this,e,t,n,i)},one:function(e,t,n,i){return Me(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,A(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ce),this.each(function(){A.event.remove(this,e,n,t)})}});var ke=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,De=/<script|<style|<link/i,Ie=/checked\s*(?:[^=]|=\s*.checked.)/i,Pe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function ze(e,t){return I(e,"table")&&I(11!==t.nodeType?t:t.firstChild,"tr")&&A(e).children("tbody")[0]||e}function Ee(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Oe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Le(e,t){var n,i,r,o,a,s,l,u;if(1===t.nodeType){if(J.hasData(e)&&(o=J.access(e),a=J.set(t,o),u=o.events))for(r in delete a.handle,a.events={},u)for(n=0,i=u[r].length;n<i;n++)A.event.add(t,r,u[r][n]);ee.hasData(e)&&(s=ee.access(e),l=A.extend({},s),ee.set(t,l))}}function Re(e,t){var n=t.nodeName.toLowerCase();"input"===n&&fe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Ne(e,t,n,i){t=c.apply([],t);var r,o,a,s,l,u,d=0,h=e.length,f=h-1,p=t[0],m=_(p);if(m||h>1&&"string"==typeof p&&!y.checkClone&&Ie.test(p))return e.each(function(r){var o=e.eq(r);m&&(t[0]=p.call(this,r,o.html())),Ne(o,t,n,i)});if(h&&(o=(r=xe(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(s=(a=A.map(ve(r,"script"),Ee)).length;d<h;d++)l=r,d!==f&&(l=A.clone(l,!0,!0),s&&A.merge(a,ve(l,"script"))),n.call(e[d],l,d);if(s)for(u=a[a.length-1].ownerDocument,A.map(a,Oe),d=0;d<s;d++)l=a[d],me.test(l.type||"")&&!J.access(l,"globalEval")&&A.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?A._evalUrl&&A._evalUrl(l.src):w(l.textContent.replace(Pe,""),u,l))}return e}function Be(e,t,n){for(var i,r=t?A.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||A.cleanData(ve(i)),i.parentNode&&(n&&A.contains(i.ownerDocument,i)&&ye(ve(i,"script")),i.parentNode.removeChild(i));return e}A.extend({htmlPrefilter:function(e){return e.replace(ke,"<$1></$2>")},clone:function(e,t,n){var i,r,o,a,s=e.cloneNode(!0),l=A.contains(e.ownerDocument,e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||A.isXMLDoc(e)))for(a=ve(s),i=0,r=(o=ve(e)).length;i<r;i++)Re(o[i],a[i]);if(t)if(n)for(o=o||ve(e),a=a||ve(s),i=0,r=o.length;i<r;i++)Le(o[i],a[i]);else Le(e,s);return(a=ve(s,"script")).length>0&&ye(a,!l&&ve(e,"script")),s},cleanData:function(e){for(var t,n,i,r=A.event.special,o=0;void 0!==(n=e[o]);o++)if(Q(n)){if(t=n[J.expando]){if(t.events)for(i in t.events)r[i]?A.event.remove(n,i):A.removeEvent(n,i,t.handle);n[J.expando]=void 0}n[ee.expando]&&(n[ee.expando]=void 0)}}}),A.fn.extend({detach:function(e){return Be(this,e,!0)},remove:function(e){return Be(this,e)},text:function(e){return G(this,function(e){return void 0===e?A.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Ne(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||ze(this,e).appendChild(e)})},prepend:function(){return Ne(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=ze(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Ne(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ne(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(A.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return A.clone(this,e,t)})},html:function(e){return G(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!De.test(e)&&!ge[(pe.exec(e)||["",""])[1].toLowerCase()]){e=A.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(A.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Ne(this,arguments,function(t){var n=this.parentNode;A.inArray(this,e)<0&&(A.cleanData(ve(this)),n&&n.replaceChild(t,this))},e)}}),A.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){A.fn[e]=function(e){for(var n,i=[],r=A(e),o=r.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),A(r[a])[t](n),d.apply(i,n.get());return this.pushStack(i)}});var He=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),Fe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},We=new RegExp(ae.join("|"),"i");function Ve(e,t,n){var i,r,o,a,s=e.style;return(n=n||Fe(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||A.contains(e.ownerDocument,e)||(a=A.style(e,t)),!y.pixelBoxStyles()&&He.test(a)&&We.test(t)&&(i=s.width,r=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=r,s.maxWidth=o)),void 0!==a?a+"":a}function qe(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",be.appendChild(u).appendChild(c);var e=r.getComputedStyle(c);n="1%"!==e.top,l=12===t(e.marginLeft),c.style.right="60%",a=36===t(e.right),i=36===t(e.width),c.style.position="absolute",o=36===c.offsetWidth||"absolute",be.removeChild(u),c=null}}function t(e){return Math.round(parseFloat(e))}var n,i,o,a,l,u=s.createElement("div"),c=s.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===c.style.backgroundClip,A.extend(y,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),o}}))}();var Ue=/^(none|table(?!-c[ea]).+)/,Ge=/^--/,Ye={position:"absolute",visibility:"hidden",display:"block"},Xe={letterSpacing:"0",fontWeight:"400"},$e=["Webkit","Moz","ms"],Ze=s.createElement("div").style;function Qe(e){var t=A.cssProps[e];return t||(t=A.cssProps[e]=function(e){if(e in Ze)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=$e.length;n--;)if((e=$e[n]+t)in Ze)return e}(e)||e),t}function Ke(e,t,n){var i=oe.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function Je(e,t,n,i,r,o){var a="width"===t?1:0,s=0,l=0;if(n===(i?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=A.css(e,n+ae[a],!0,r)),i?("content"===n&&(l-=A.css(e,"padding"+ae[a],!0,r)),"margin"!==n&&(l-=A.css(e,"border"+ae[a]+"Width",!0,r))):(l+=A.css(e,"padding"+ae[a],!0,r),"padding"!==n?l+=A.css(e,"border"+ae[a]+"Width",!0,r):s+=A.css(e,"border"+ae[a]+"Width",!0,r));return!i&&o>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-s-.5))),l}function et(e,t,n){var i=Fe(e),r=Ve(e,t,i),o="border-box"===A.css(e,"boxSizing",!1,i),a=o;if(He.test(r)){if(!n)return r;r="auto"}return a=a&&(y.boxSizingReliable()||r===e.style[t]),("auto"===r||!parseFloat(r)&&"inline"===A.css(e,"display",!1,i))&&(r=e["offset"+t[0].toUpperCase()+t.slice(1)],a=!0),(r=parseFloat(r)||0)+Je(e,t,n||(o?"border":"content"),a,i,r)+"px"}function tt(e,t,n,i,r){return new tt.prototype.init(e,t,n,i,r)}A.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ve(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,a,s=Z(t),l=Ge.test(t),u=e.style;if(l||(t=Qe(s)),a=A.cssHooks[t]||A.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(r=a.get(e,!1,i))?r:u[t];"string"==(o=typeof n)&&(r=oe.exec(n))&&r[1]&&(n=ue(e,t,r),o="number"),null!=n&&n==n&&("number"===o&&(n+=r&&r[3]||(A.cssNumber[s]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,i){var r,o,a,s=Z(t);return Ge.test(t)||(t=Qe(s)),(a=A.cssHooks[t]||A.cssHooks[s])&&"get"in a&&(r=a.get(e,!0,n)),void 0===r&&(r=Ve(e,t,i)),"normal"===r&&t in Xe&&(r=Xe[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),A.each(["height","width"],function(e,t){A.cssHooks[t]={get:function(e,n,i){if(n)return!Ue.test(A.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,i):le(e,Ye,function(){return et(e,t,i)})},set:function(e,n,i){var r,o=Fe(e),a="border-box"===A.css(e,"boxSizing",!1,o),s=i&&Je(e,t,i,a,o);return a&&y.scrollboxSize()===o.position&&(s-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-Je(e,t,"border",!1,o)-.5)),s&&(r=oe.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=A.css(e,t)),Ke(0,n,s)}}}),A.cssHooks.marginLeft=qe(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ve(e,"marginLeft"))||e.getBoundingClientRect().left-le(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),A.each({margin:"",padding:"",border:"Width"},function(e,t){A.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+ae[i]+t]=o[i]||o[i-2]||o[0];return r}},"margin"!==e&&(A.cssHooks[e+t].set=Ke)}),A.fn.extend({css:function(e,t){return G(this,function(e,t,n){var i,r,o={},a=0;if(Array.isArray(t)){for(i=Fe(e),r=t.length;a<r;a++)o[t[a]]=A.css(e,t[a],!1,i);return o}return void 0!==n?A.style(e,t,n):A.css(e,t)},e,t,arguments.length>1)}}),A.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||A.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(A.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=A.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=A.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){A.fx.step[e.prop]?A.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[A.cssProps[e.prop]]&&!A.cssHooks[e.prop]?e.elem[e.prop]=e.now:A.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},A.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},A.fx=tt.prototype.init,A.fx.step={};var nt,it,rt=/^(?:toggle|show|hide)$/,ot=/queueHooks$/;function at(){it&&(!1===s.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(at):r.setTimeout(at,A.fx.interval),A.fx.tick())}function st(){return r.setTimeout(function(){nt=void 0}),nt=Date.now()}function lt(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=ae[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ut(e,t,n){for(var i,r=(ct.tweeners[t]||[]).concat(ct.tweeners["*"]),o=0,a=r.length;o<a;o++)if(i=r[o].call(n,t,e))return i}function ct(e,t,n){var i,r,o=0,a=ct.prefilters.length,s=A.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=nt||st(),n=Math.max(0,u.startTime+u.duration-t),i=1-(n/u.duration||0),o=0,a=u.tweens.length;o<a;o++)u.tweens[o].run(i);return s.notifyWith(e,[u,i,n]),i<1&&a?n:(a||s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:A.extend({},t),opts:A.extend(!0,{specialEasing:{},easing:A.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||st(),duration:n.duration,tweens:[],createTween:function(t,n){var i=A.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(i),i},stop:function(t){var n=0,i=t?u.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)u.tweens[n].run(1);return t?(s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u,t])):s.rejectWith(e,[u,t]),this}}),c=u.props;for(function(e,t){var n,i,r,o,a;for(n in e)if(r=t[i=Z(n)],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(a=A.cssHooks[i])&&"expand"in a)for(n in o=a.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(c,u.opts.specialEasing);o<a;o++)if(i=ct.prefilters[o].call(u,e,c,u.opts))return _(i.stop)&&(A._queueHooks(u.elem,u.opts.queue).stop=i.stop.bind(i)),i;return A.map(c,ut,u),_(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),A.fx.timer(A.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}A.Animation=A.extend(ct,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,oe.exec(t),n),n}]},tweener:function(e,t){_(e)?(t=e,e=["*"]):e=e.match(B);for(var n,i=0,r=e.length;i<r;i++)n=e[i],ct.tweeners[n]=ct.tweeners[n]||[],ct.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,a,s,l,u,c,d="width"in t||"height"in t,h=this,f={},p=e.style,m=e.nodeType&&se(e),g=J.get(e,"fxshow");for(i in n.queue||(null==(a=A._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,h.always(function(){h.always(function(){a.unqueued--,A.queue(e,"fx").length||a.empty.fire()})})),t)if(r=t[i],rt.test(r)){if(delete t[i],o=o||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!g||void 0===g[i])continue;m=!0}f[i]=g&&g[i]||A.style(e,i)}if((l=!A.isEmptyObject(t))||!A.isEmptyObject(f))for(i in d&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(u=g&&g.display)&&(u=J.get(e,"display")),"none"===(c=A.css(e,"display"))&&(u?c=u:(he([e],!0),u=e.style.display||u,c=A.css(e,"display"),he([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===A.css(e,"float")&&(l||(h.done(function(){p.display=u}),null==u&&(c=p.display,u="none"===c?"":c)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",h.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),l=!1,f)l||(g?"hidden"in g&&(m=g.hidden):g=J.access(e,"fxshow",{display:u}),o&&(g.hidden=!m),m&&he([e],!0),h.done(function(){for(i in m||he([e]),J.remove(e,"fxshow"),f)A.style(e,i,f[i])})),l=ut(m?g[i]:0,i,h),i in g||(g[i]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?ct.prefilters.unshift(e):ct.prefilters.push(e)}}),A.speed=function(e,t,n){var i=e&&"object"==typeof e?A.extend({},e):{complete:n||!n&&t||_(e)&&e,duration:e,easing:n&&t||t&&!_(t)&&t};return A.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in A.fx.speeds?i.duration=A.fx.speeds[i.duration]:i.duration=A.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){_(i.old)&&i.old.call(this),i.queue&&A.dequeue(this,i.queue)},i},A.fn.extend({fadeTo:function(e,t,n,i){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=A.isEmptyObject(e),o=A.speed(t,n,i),a=function(){var t=ct(this,A.extend({},e),o);(r||J.get(this,"finish"))&&t.stop(!0)};return a.finish=a,r||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=A.timers,a=J.get(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&ot.test(r)&&i(a[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||A.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=J.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=A.timers,a=i?i.length:0;for(n.finish=!0,A.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),A.each(["toggle","show","hide"],function(e,t){var n=A.fn[t];A.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(lt(t,!0),e,i,r)}}),A.each({slideDown:lt("show"),slideUp:lt("hide"),slideToggle:lt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){A.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),A.timers=[],A.fx.tick=function(){var e,t=0,n=A.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||A.fx.stop(),nt=void 0},A.fx.timer=function(e){A.timers.push(e),A.fx.start()},A.fx.interval=13,A.fx.start=function(){it||(it=!0,at())},A.fx.stop=function(){it=null},A.fx.speeds={slow:600,fast:200,_default:400},A.fn.delay=function(e,t){return e=A.fx&&A.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,n){var i=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(i)}})},function(){var e=s.createElement("input"),t=s.createElement("select").appendChild(s.createElement("option"));e.type="checkbox",y.checkOn=""!==e.value,y.optSelected=t.selected,(e=s.createElement("input")).value="t",e.type="radio",y.radioValue="t"===e.value}();var dt,ht=A.expr.attrHandle;A.fn.extend({attr:function(e,t){return G(this,A.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){A.removeAttr(this,e)})}}),A.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?A.prop(e,t,n):(1===o&&A.isXMLDoc(e)||(r=A.attrHooks[t.toLowerCase()]||(A.expr.match.bool.test(t)?dt:void 0)),void 0!==n?null===n?void A.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=A.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&I(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(B);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),dt={set:function(e,t,n){return!1===t?A.removeAttr(e,n):e.setAttribute(n,n),n}},A.each(A.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ht[t]||A.find.attr;ht[t]=function(e,t,i){var r,o,a=t.toLowerCase();return i||(o=ht[a],ht[a]=r,r=null!=n(e,t,i)?a:null,ht[a]=o),r}});var ft=/^(?:input|select|textarea|button)$/i,pt=/^(?:a|area)$/i;function mt(e){return(e.match(B)||[]).join(" ")}function gt(e){return e.getAttribute&&e.getAttribute("class")||""}function vt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(B)||[]}A.fn.extend({prop:function(e,t){return G(this,A.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[A.propFix[e]||e]})}}),A.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&A.isXMLDoc(e)||(t=A.propFix[t]||t,r=A.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=A.find.attr(e,"tabindex");return t?parseInt(t,10):ft.test(e.nodeName)||pt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(A.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),A.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){A.propFix[this.toLowerCase()]=this}),A.fn.extend({addClass:function(e){var t,n,i,r,o,a,s,l=0;if(_(e))return this.each(function(t){A(this).addClass(e.call(this,t,gt(this)))});if((t=vt(e)).length)for(;n=this[l++];)if(r=gt(n),i=1===n.nodeType&&" "+mt(r)+" "){for(a=0;o=t[a++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(s=mt(i))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,i,r,o,a,s,l=0;if(_(e))return this.each(function(t){A(this).removeClass(e.call(this,t,gt(this)))});if(!arguments.length)return this.attr("class","");if((t=vt(e)).length)for(;n=this[l++];)if(r=gt(n),i=1===n.nodeType&&" "+mt(r)+" "){for(a=0;o=t[a++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(s=mt(i))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):_(e)?this.each(function(n){A(this).toggleClass(e.call(this,n,gt(this),t),t)}):this.each(function(){var t,r,o,a;if(i)for(r=0,o=A(this),a=vt(e);t=a[r++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=gt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+mt(gt(n))+" ").indexOf(t)>-1)return!0;return!1}});var yt=/\r/g;A.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=_(e),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,A(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=A.map(r,function(e){return null==e?"":e+""})),(t=A.valHooks[this.type]||A.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))})):r?(t=A.valHooks[r.type]||A.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(yt,""):null==n?"":n:void 0}}),A.extend({valHooks:{option:{get:function(e){var t=A.find.attr(e,"value");return null!=t?t:mt(A.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?o+1:r.length;for(i=o<0?l:a?o:0;i<l;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!I(n.parentNode,"optgroup"))){if(t=A(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,i,r=e.options,o=A.makeArray(t),a=r.length;a--;)((i=r[a]).selected=A.inArray(A.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),A.each(["radio","checkbox"],function(){A.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=A.inArray(A(e).val(),t)>-1}},y.checkOn||(A.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in r;var _t=/^(?:focusinfocus|focusoutblur)$/,xt=function(e){e.stopPropagation()};A.extend(A.event,{trigger:function(e,t,n,i){var o,a,l,u,c,d,h,f,p=[n||s],g=m.call(e,"type")?e.type:e,v=m.call(e,"namespace")?e.namespace.split("."):[];if(a=f=l=n=n||s,3!==n.nodeType&&8!==n.nodeType&&!_t.test(g+A.event.triggered)&&(g.indexOf(".")>-1&&(g=(v=g.split(".")).shift(),v.sort()),c=g.indexOf(":")<0&&"on"+g,(e=e[A.expando]?e:new A.Event(g,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:A.makeArray(t,[e]),h=A.event.special[g]||{},i||!h.trigger||!1!==h.trigger.apply(n,t))){if(!i&&!h.noBubble&&!x(n)){for(u=h.delegateType||g,_t.test(u+g)||(a=a.parentNode);a;a=a.parentNode)p.push(a),l=a;l===(n.ownerDocument||s)&&p.push(l.defaultView||l.parentWindow||r)}for(o=0;(a=p[o++])&&!e.isPropagationStopped();)f=a,e.type=o>1?u:h.bindType||g,(d=(J.get(a,"events")||{})[e.type]&&J.get(a,"handle"))&&d.apply(a,t),(d=c&&a[c])&&d.apply&&Q(a)&&(e.result=d.apply(a,t),!1===e.result&&e.preventDefault());return e.type=g,i||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(p.pop(),t)||!Q(n)||c&&_(n[g])&&!x(n)&&((l=n[c])&&(n[c]=null),A.event.triggered=g,e.isPropagationStopped()&&f.addEventListener(g,xt),n[g](),e.isPropagationStopped()&&f.removeEventListener(g,xt),A.event.triggered=void 0,l&&(n[c]=l)),e.result}},simulate:function(e,t,n){var i=A.extend(new A.Event,n,{type:e,isSimulated:!0});A.event.trigger(i,null,t)}}),A.fn.extend({trigger:function(e,t){return this.each(function(){A.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return A.event.trigger(e,t,n,!0)}}),y.focusin||A.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){A.event.simulate(t,e.target,A.event.fix(e))};A.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=J.access(i,t);r||i.addEventListener(e,n,!0),J.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=J.access(i,t)-1;r?J.access(i,t,r):(i.removeEventListener(e,n,!0),J.remove(i,t))}}});var bt=r.location,wt=Date.now(),St=/\?/;A.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||A.error("Invalid XML: "+e),t};var At=/\[\]$/,Tt=/\r?\n/g,Ct=/^(?:submit|button|image|reset|file)$/i,jt=/^(?:input|select|textarea|keygen)/i;function Mt(e,t,n,i){var r;if(Array.isArray(t))A.each(t,function(t,r){n||At.test(e)?i(e,r):Mt(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==S(t))i(e,t);else for(r in t)Mt(e+"["+r+"]",t[r],n,i)}A.param=function(e,t){var n,i=[],r=function(e,t){var n=_(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!A.isPlainObject(e))A.each(e,function(){r(this.name,this.value)});else for(n in e)Mt(n,e[n],t,r);return i.join("&")},A.fn.extend({serialize:function(){return A.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=A.prop(this,"elements");return e?A.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!A(this).is(":disabled")&&jt.test(this.nodeName)&&!Ct.test(e)&&(this.checked||!fe.test(e))}).map(function(e,t){var n=A(this).val();return null==n?null:Array.isArray(n)?A.map(n,function(e){return{name:t.name,value:e.replace(Tt,"\r\n")}}):{name:t.name,value:n.replace(Tt,"\r\n")}}).get()}});var kt=/%20/g,Dt=/#.*$/,It=/([?&])_=[^&]*/,Pt=/^(.*?):[ \t]*([^\r\n]*)$/gm,zt=/^(?:GET|HEAD)$/,Et=/^\/\//,Ot={},Lt={},Rt="*/".concat("*"),Nt=s.createElement("a");function Bt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(B)||[];if(_(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Ht(e,t,n,i){var r={},o=e===Lt;function a(s){var l;return r[s]=!0,A.each(e[s]||[],function(e,s){var u=s(t,n,i);return"string"!=typeof u||o||r[u]?o?!(l=u):void 0:(t.dataTypes.unshift(u),a(u),!1)}),l}return a(t.dataTypes[0])||!r["*"]&&a("*")}function Ft(e,t){var n,i,r=A.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&A.extend(!0,e,i),e}Nt.href=bt.href,A.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:bt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(bt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Rt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":A.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ft(Ft(e,A.ajaxSettings),t):Ft(A.ajaxSettings,e)},ajaxPrefilter:Bt(Ot),ajaxTransport:Bt(Lt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,i,o,a,l,u,c,d,h,f,p=A.ajaxSetup({},t),m=p.context||p,g=p.context&&(m.nodeType||m.jquery)?A(m):A.event,v=A.Deferred(),y=A.Callbacks("once memory"),_=p.statusCode||{},x={},b={},w="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=Pt.exec(o);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(e,t){return null==c&&(e=b[e.toLowerCase()]=b[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==c&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)S.always(e[S.status]);else for(t in e)_[t]=[_[t],e[t]];return this},abort:function(e){var t=e||w;return n&&n.abort(t),T(0,t),this}};if(v.promise(S),p.url=((e||p.url||bt.href)+"").replace(Et,bt.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(B)||[""],null==p.crossDomain){u=s.createElement("a");try{u.href=p.url,u.href=u.href,p.crossDomain=Nt.protocol+"//"+Nt.host!=u.protocol+"//"+u.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=A.param(p.data,p.traditional)),Ht(Ot,p,t,S),c)return S;for(h in(d=A.event&&p.global)&&0==A.active++&&A.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!zt.test(p.type),i=p.url.replace(Dt,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(kt,"+")):(f=p.url.slice(i.length),p.data&&(p.processData||"string"==typeof p.data)&&(i+=(St.test(i)?"&":"?")+p.data,delete p.data),!1===p.cache&&(i=i.replace(It,"$1"),f=(St.test(i)?"&":"?")+"_="+wt+++f),p.url=i+f),p.ifModified&&(A.lastModified[i]&&S.setRequestHeader("If-Modified-Since",A.lastModified[i]),A.etag[i]&&S.setRequestHeader("If-None-Match",A.etag[i])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&S.setRequestHeader("Content-Type",p.contentType),S.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Rt+"; q=0.01":""):p.accepts["*"]),p.headers)S.setRequestHeader(h,p.headers[h]);if(p.beforeSend&&(!1===p.beforeSend.call(m,S,p)||c))return S.abort();if(w="abort",y.add(p.complete),S.done(p.success),S.fail(p.error),n=Ht(Lt,p,t,S)){if(S.readyState=1,d&&g.trigger("ajaxSend",[S,p]),c)return S;p.async&&p.timeout>0&&(l=r.setTimeout(function(){S.abort("timeout")},p.timeout));try{c=!1,n.send(x,T)}catch(e){if(c)throw e;T(-1,e)}}else T(-1,"No Transport");function T(e,t,a,s){var u,h,f,x,b,w=t;c||(c=!0,l&&r.clearTimeout(l),n=void 0,o=s||"",S.readyState=e>0?4:0,u=e>=200&&e<300||304===e,a&&(x=function(e,t,n){for(var i,r,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in s)if(s[r]&&s[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}a||(a=r)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(p,S,a)),x=function(e,t,n,i){var r,o,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=u[l+" "+o]||u["* "+o]))for(r in u)if((s=r.split(" "))[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){!0===a?a=u[r]:!0!==u[r]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(p,x,S,u),u?(p.ifModified&&((b=S.getResponseHeader("Last-Modified"))&&(A.lastModified[i]=b),(b=S.getResponseHeader("etag"))&&(A.etag[i]=b)),204===e||"HEAD"===p.type?w="nocontent":304===e?w="notmodified":(w=x.state,h=x.data,u=!(f=x.error))):(f=w,!e&&w||(w="error",e<0&&(e=0))),S.status=e,S.statusText=(t||w)+"",u?v.resolveWith(m,[h,w,S]):v.rejectWith(m,[S,w,f]),S.statusCode(_),_=void 0,d&&g.trigger(u?"ajaxSuccess":"ajaxError",[S,p,u?h:f]),y.fireWith(m,[S,w]),d&&(g.trigger("ajaxComplete",[S,p]),--A.active||A.event.trigger("ajaxStop")))}return S},getJSON:function(e,t,n){return A.get(e,t,n,"json")},getScript:function(e,t){return A.get(e,void 0,t,"script")}}),A.each(["get","post"],function(e,t){A[t]=function(e,n,i,r){return _(n)&&(r=r||i,i=n,n=void 0),A.ajax(A.extend({url:e,type:t,dataType:r,data:n,success:i},A.isPlainObject(e)&&e))}}),A._evalUrl=function(e){return A.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},A.fn.extend({wrapAll:function(e){var t;return this[0]&&(_(e)&&(e=e.call(this[0])),t=A(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return _(e)?this.each(function(t){A(this).wrapInner(e.call(this,t))}):this.each(function(){var t=A(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=_(e);return this.each(function(n){A(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){A(this).replaceWith(this.childNodes)}),this}}),A.expr.pseudos.hidden=function(e){return!A.expr.pseudos.visible(e)},A.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},A.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var Wt={0:200,1223:204},Vt=A.ajaxSettings.xhr();y.cors=!!Vt&&"withCredentials"in Vt,y.ajax=Vt=!!Vt,A.ajaxTransport(function(e){var t,n;if(y.cors||Vt&&!e.crossDomain)return{send:function(i,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);t=function(e){return function(){t&&(t=n=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Wt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),n=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&r.setTimeout(function(){t&&n()})},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),A.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),A.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return A.globalEval(e),e}}}),A.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),A.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(i,r){t=A("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),s.head.appendChild(t[0])},abort:function(){n&&n()}}});var qt=[],Ut=/(=)\?(?=&|$)|\?\?/;A.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=qt.pop()||A.expando+"_"+wt++;return this[e]=!0,e}}),A.ajaxPrefilter("json jsonp",function(e,t,n){var i,o,a,s=!1!==e.jsonp&&(Ut.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ut.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=_(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Ut,"$1"+i):!1!==e.jsonp&&(e.url+=(St.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||A.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=r[i],r[i]=function(){a=arguments},n.always(function(){void 0===o?A(r).removeProp(i):r[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,qt.push(i)),a&&_(o)&&o(a[0]),a=o=void 0}),"script"}),y.createHTMLDocument=function(){var e=s.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),A.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((i=(t=s.implementation.createHTMLDocument("")).createElement("base")).href=s.location.href,t.head.appendChild(i)):t=s),r=P.exec(e),o=!n&&[],r?[t.createElement(r[1])]:(r=xe([e],t,o),o&&o.length&&A(o).remove(),A.merge([],r.childNodes)));var i,r,o},A.fn.load=function(e,t,n){var i,r,o,a=this,s=e.indexOf(" ");return s>-1&&(i=mt(e.slice(s)),e=e.slice(0,s)),_(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),a.length>0&&A.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(i?A("<div>").append(A.parseHTML(e)).find(i):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},A.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){A.fn[t]=function(e){return this.on(t,e)}}),A.expr.pseudos.animated=function(e){return A.grep(A.timers,function(t){return e===t.elem}).length},A.offset={setOffset:function(e,t,n){var i,r,o,a,s,l,u=A.css(e,"position"),c=A(e),d={};"static"===u&&(e.style.position="relative"),s=c.offset(),o=A.css(e,"top"),l=A.css(e,"left"),("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1?(a=(i=c.position()).top,r=i.left):(a=parseFloat(o)||0,r=parseFloat(l)||0),_(t)&&(t=t.call(e,n,A.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+r),"using"in t?t.using.call(e,d):c.css(d)}},A.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){A.offset.setOffset(this,e,t)});var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===A.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===A.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=A(e).offset()).top+=A.css(e,"borderTopWidth",!0),r.left+=A.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-A.css(i,"marginTop",!0),left:t.left-r.left-A.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===A.css(e,"position");)e=e.offsetParent;return e||be})}}),A.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;A.fn[e]=function(i){return G(this,function(e,i,r){var o;if(x(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r)return o?o[t]:e[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r},e,i,arguments.length)}}),A.each(["top","left"],function(e,t){A.cssHooks[t]=qe(y.pixelPosition,function(e,n){if(n)return n=Ve(e,t),He.test(n)?A(e).position()[t]+"px":n})}),A.each({Height:"height",Width:"width"},function(e,t){A.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){A.fn[i]=function(r,o){var a=arguments.length&&(n||"boolean"!=typeof r),s=n||(!0===r||!0===o?"margin":"border");return G(this,function(t,n,r){var o;return x(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?A.css(t,n,s):A.style(t,n,r,s)},t,a?r:void 0,a)}})}),A.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){A.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),A.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),A.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),A.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),_(e))return i=u.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(u.call(arguments)))}).guid=e.guid=e.guid||A.guid++,r},A.holdReady=function(e){e?A.readyWait++:A.ready(!0)},A.isArray=Array.isArray,A.parseJSON=JSON.parse,A.nodeName=I,A.isFunction=_,A.isWindow=x,A.camelCase=Z,A.type=S,A.now=Date.now,A.isNumeric=function(e){var t=A.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},n("./node_modules/webpack/buildin/amd-options.js")&&(void 0===(i=function(){return A}.apply(t,[]))||(e.exports=i));var Gt=r.jQuery,Yt=r.$;return A.noConflict=function(e){return r.$===A&&(r.$=Yt),e&&r.jQuery===A&&(r.jQuery=Gt),A},o||(r.jQuery=r.$=A),A})},"./node_modules/style-loader/lib/addStyles.js":function(e,t,n){var i={},r=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),o=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),a=null,s=0,l=[],u=n("./node_modules/style-loader/lib/urls.js");function c(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(g(r.parts[a],t))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(g(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:s}}}}function d(e,t){for(var n=[],i={},r=0;r<e.length;r++){var o=e[r],a=t.base?o[0]+t.base:o[0],s={css:o[1],media:o[2],sourceMap:o[3]};i[a]?i[a].parts.push(s):n.push(i[a]={id:a,parts:[s]})}return n}function h(e,t){var n=o(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=l[l.length-1];if("top"===e.insertAt)i?i.nextSibling?n.insertBefore(t,i.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),l.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=o(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,r)}}function f(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function p(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),m(t,e.attrs),h(e,t),t}function m(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function g(e,t){var n,i,r,o;if(t.transform&&e.css){if(!(o=t.transform(e.css)))return function(){};e.css=o}if(t.singleton){var l=s++;n=a||(a=p(t)),i=y.bind(null,n,l,!1),r=y.bind(null,n,l,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",m(t,e.attrs),h(e,t),t}(t),i=function(e,t,n){var i=n.css,r=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||o)&&(i=u(i));r&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([i],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),r=function(){f(n),n.href&&URL.revokeObjectURL(n.href)}):(n=p(t),i=function(e,t){var n=t.css,i=t.media;i&&e.setAttribute("media",i);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),r=function(){f(n)});return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else r()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=r()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return c(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(s=i[a.id]).refs--,r.push(s)}e&&c(d(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete i[s.id]}}}};var v=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function y(e,t,n,i){var r=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=v(t,r);else{var o=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}},"./node_modules/style-loader/lib/urls.js":function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,i=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var r,o=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?e:(r=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:i+o.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}},"./node_modules/webpack/buildin/amd-options.js":function(e,t){(function(t){e.exports=t}).call(this,{})},"./node_modules/webpack/buildin/global.js":function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},"./node_modules/zrender/lib/Element.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/guid.js"),r=n("./node_modules/zrender/lib/mixin/Eventful.js"),o=n("./node_modules/zrender/lib/mixin/Transformable.js"),a=n("./node_modules/zrender/lib/mixin/Animatable.js"),s=n("./node_modules/zrender/lib/core/util.js"),l=function(e){o.call(this,e),r.call(this,e),a.call(this,e),this.id=e.id||i()};l.prototype={type:"element",name:"",__zr:null,ignore:!1,clipPath:null,isGroup:!1,drift:function(e,t){switch(this.draggable){case"horizontal":t=0;break;case"vertical":e=0}var n=this.transform;n||(n=this.transform=[1,0,0,1,0,0]),n[4]+=e,n[5]+=t,this.decomposeTransform(),this.dirty(!1)},beforeUpdate:function(){},afterUpdate:function(){},update:function(){this.updateTransform()},traverse:function(e,t){},attrKV:function(e,t){if("position"===e||"scale"===e||"origin"===e){if(t){var n=this[e];n||(n=this[e]=[]),n[0]=t[0],n[1]=t[1]}}else this[e]=t},hide:function(){this.ignore=!0,this.__zr&&this.__zr.refresh()},show:function(){this.ignore=!1,this.__zr&&this.__zr.refresh()},attr:function(e,t){if("string"==typeof e)this.attrKV(e,t);else if(s.isObject(e))for(var n in e)e.hasOwnProperty(n)&&this.attrKV(n,e[n]);return this.dirty(!1),this},setClipPath:function(e){var t=this.__zr;t&&e.addSelfToZr(t),this.clipPath&&this.clipPath!==e&&this.removeClipPath(),this.clipPath=e,e.__zr=t,e.__clipTarget=this,this.dirty(!1)},removeClipPath:function(){var e=this.clipPath;e&&(e.__zr&&e.removeSelfFromZr(e.__zr),e.__zr=null,e.__clipTarget=null,this.clipPath=null,this.dirty(!1))},addSelfToZr:function(e){this.__zr=e;var t=this.animators;if(t)for(var n=0;n<t.length;n++)e.animation.addAnimator(t[n]);this.clipPath&&this.clipPath.addSelfToZr(e)},removeSelfFromZr:function(e){this.__zr=null;var t=this.animators;if(t)for(var n=0;n<t.length;n++)e.animation.removeAnimator(t[n]);this.clipPath&&this.clipPath.removeSelfFromZr(e)}},s.mixin(l,a),s.mixin(l,o),s.mixin(l,r);var u=l;e.exports=u},"./node_modules/zrender/lib/Handler.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/zrender/lib/core/vector.js"),o=n("./node_modules/zrender/lib/mixin/Draggable.js"),a=n("./node_modules/zrender/lib/mixin/Eventful.js"),s="silent";function l(){}l.prototype.dispose=function(){};var u=["click","dblclick","mousewheel","mouseout","mouseup","mousedown","mousemove","contextmenu"],c=function(e,t,n,i){a.call(this),this.storage=e,this.painter=t,this.painterRoot=i,n=n||new l,this.proxy=null,this._hovered={},this._lastTouchMoment,this._lastX,this._lastY,o.call(this),this.setHandlerProxy(n)};function d(e,t,n){if(e[e.rectHover?"rectContain":"contain"](t,n)){for(var i,r=e;r;){if(r.clipPath&&!r.clipPath.contain(t,n))return!1;r.silent&&(i=!0),r=r.parent}return!i||s}return!1}c.prototype={constructor:c,setHandlerProxy:function(e){this.proxy&&this.proxy.dispose(),e&&(i.each(u,function(t){e.on&&e.on(t,this[t],this)},this),e.handler=this),this.proxy=e},mousemove:function(e){var t=e.zrX,n=e.zrY,i=this._hovered,r=i.target;r&&!r.__zr&&(r=(i=this.findHover(i.x,i.y)).target);var o=this._hovered=this.findHover(t,n),a=o.target,s=this.proxy;s.setCursor&&s.setCursor(a?a.cursor:"default"),r&&a!==r&&this.dispatchToElement(i,"mouseout",e),this.dispatchToElement(o,"mousemove",e),a&&a!==r&&this.dispatchToElement(o,"mouseover",e)},mouseout:function(e){this.dispatchToElement(this._hovered,"mouseout",e);var t,n=e.toElement||e.relatedTarget;do{n=n&&n.parentNode}while(n&&9!=n.nodeType&&!(t=n===this.painterRoot));!t&&this.trigger("globalout",{event:e})},resize:function(e){this._hovered={}},dispatch:function(e,t){var n=this[e];n&&n.call(this,t)},dispose:function(){this.proxy.dispose(),this.storage=this.proxy=this.painter=null},setCursorStyle:function(e){var t=this.proxy;t.setCursor&&t.setCursor(e)},dispatchToElement:function(e,t,n){var i=(e=e||{}).target;if(!i||!i.silent){for(var r="on"+t,o=function(e,t,n){return{type:e,event:n,target:t.target,topTarget:t.topTarget,cancelBubble:!1,offsetX:n.zrX,offsetY:n.zrY,gestureEvent:n.gestureEvent,pinchX:n.pinchX,pinchY:n.pinchY,pinchScale:n.pinchScale,wheelDelta:n.zrDelta,zrByTouch:n.zrByTouch,which:n.which}}(t,e,n);i&&(i[r]&&(o.cancelBubble=i[r].call(i,o)),i.trigger(t,o),i=i.parent,!o.cancelBubble););o.cancelBubble||(this.trigger(t,o),this.painter&&this.painter.eachOtherLayer(function(e){"function"==typeof e[r]&&e[r].call(e,o),e.trigger&&e.trigger(t,o)}))}},findHover:function(e,t,n){for(var i=this.storage.getDisplayList(),r={x:e,y:t},o=i.length-1;o>=0;o--){var a;if(i[o]!==n&&!i[o].ignore&&(a=d(i[o],e,t))&&(!r.topTarget&&(r.topTarget=i[o]),a!==s)){r.target=i[o];break}}return r}},i.each(["click","mousedown","mouseup","mousewheel","dblclick","contextmenu"],function(e){c.prototype[e]=function(t){var n=this.findHover(t.zrX,t.zrY),i=n.target;if("mousedown"===e)this._downEl=i,this._downPoint=[t.zrX,t.zrY],this._upEl=i;else if("mouseup"===e)this._upEl=i;else if("click"===e){if(this._downEl!==this._upEl||!this._downPoint||r.dist(this._downPoint,[t.zrX,t.zrY])>4)return;this._downPoint=null}this.dispatchToElement(n,e,t)}}),i.mixin(c,a),i.mixin(c,o);var h=c;e.exports=h},"./node_modules/zrender/lib/Layer.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/zrender/lib/config.js").devicePixelRatio,o=n("./node_modules/zrender/lib/graphic/Style.js"),a=n("./node_modules/zrender/lib/graphic/Pattern.js");function s(){return!1}function l(e,t,n){var r=i.createCanvas(),o=t.getWidth(),a=t.getHeight(),s=r.style;return s&&(s.position="absolute",s.left=0,s.top=0,s.width=o+"px",s.height=a+"px",r.setAttribute("data-zr-dom-id",e)),r.width=o*n,r.height=a*n,r}var u=function(e,t,n){var o;n=n||r,"string"==typeof e?o=l(e,t,n):i.isObject(e)&&(e=(o=e).id),this.id=e,this.dom=o;var a=o.style;a&&(o.onselectstart=s,a["-webkit-user-select"]="none",a["user-select"]="none",a["-webkit-touch-callout"]="none",a["-webkit-tap-highlight-color"]="rgba(0,0,0,0)",a.padding=0,a.margin=0,a["border-width"]=0),this.domBack=null,this.ctxBack=null,this.painter=t,this.config=null,this.clearColor=0,this.motionBlur=!1,this.lastFrameAlpha=.7,this.dpr=n};u.prototype={constructor:u,__dirty:!0,__used:!1,__drawIndex:0,__startIndex:0,__endIndex:0,incremental:!1,getElementCount:function(){return this.__endIndex-this.__startIndex},initContext:function(){this.ctx=this.dom.getContext("2d"),this.ctx.dpr=this.dpr},createBackBuffer:function(){var e=this.dpr;this.domBack=l("back-"+this.id,this.painter,e),this.ctxBack=this.domBack.getContext("2d"),1!=e&&this.ctxBack.scale(e,e)},resize:function(e,t){var n=this.dpr,i=this.dom,r=i.style,o=this.domBack;r&&(r.width=e+"px",r.height=t+"px"),i.width=e*n,i.height=t*n,o&&(o.width=e*n,o.height=t*n,1!=n&&this.ctxBack.scale(n,n))},clear:function(e,t){var n,i=this.dom,r=this.ctx,s=i.width,l=i.height,u=(t=t||this.clearColor,this.motionBlur&&!e),c=this.lastFrameAlpha,d=this.dpr;(u&&(this.domBack||this.createBackBuffer(),this.ctxBack.globalCompositeOperation="copy",this.ctxBack.drawImage(i,0,0,s/d,l/d)),r.clearRect(0,0,s,l),t&&"transparent"!==t)&&(t.colorStops?(n=t.__canvasGradient||o.getGradient(r,t,{x:0,y:0,width:s,height:l}),t.__canvasGradient=n):t.image&&(n=a.prototype.getCanvasPattern.call(t,r)),r.save(),r.fillStyle=n||t,r.fillRect(0,0,s,l),r.restore());if(u){var h=this.domBack;r.save(),r.globalAlpha=c,r.drawImage(h,0,0,s,l),r.restore()}}};var c=u;e.exports=c},"./node_modules/zrender/lib/Painter.js":function(e,t,n){var i=n("./node_modules/zrender/lib/config.js").devicePixelRatio,r=n("./node_modules/zrender/lib/core/util.js"),o=n("./node_modules/zrender/lib/core/log.js"),a=n("./node_modules/zrender/lib/core/BoundingRect.js"),s=n("./node_modules/zrender/lib/core/timsort.js"),l=n("./node_modules/zrender/lib/Layer.js"),u=n("./node_modules/zrender/lib/animation/requestAnimationFrame.js"),c=n("./node_modules/zrender/lib/graphic/Image.js"),d=n("./node_modules/zrender/lib/core/env.js");function h(e){return parseInt(e,10)}var f=new a(0,0,0,0),p=new a(0,0,0,0);var m=function(e,t,n){this.type="canvas";var o=!e.nodeName||"CANVAS"===e.nodeName.toUpperCase();this._opts=n=r.extend({},n||{}),this.dpr=n.devicePixelRatio||i,this._singleCanvas=o,this.root=e;var a=e.style;a&&(a["-webkit-tap-highlight-color"]="transparent",a["-webkit-user-select"]=a["user-select"]=a["-webkit-touch-callout"]="none",e.innerHTML=""),this.storage=t;var s=this._zlevelList=[],u=this._layers={};if(this._layerConfig={},this._needsManuallyCompositing=!1,o){var c=e.width,d=e.height;null!=n.width&&(c=n.width),null!=n.height&&(d=n.height),this.dpr=n.devicePixelRatio||1,e.width=c*this.dpr,e.height=d*this.dpr,this._width=c,this._height=d;var h=new l(e,this,this.dpr);h.__builtin__=!0,h.initContext(),u[314159]=h,h.zlevel=314159,s.push(314159),this._domRoot=e}else{this._width=this._getSize(0),this._height=this._getSize(1);var f=this._domRoot=function(e,t){var n=document.createElement("div");return n.style.cssText=["position:relative","overflow:hidden","width:"+e+"px","height:"+t+"px","padding:0","margin:0","border-width:0"].join(";")+";",n}(this._width,this._height);e.appendChild(f)}this._hoverlayer=null,this._hoverElements=[]};m.prototype={constructor:m,getType:function(){return"canvas"},isSingleCanvas:function(){return this._singleCanvas},getViewportRoot:function(){return this._domRoot},getViewportRootOffset:function(){var e=this.getViewportRoot();if(e)return{offsetLeft:e.offsetLeft||0,offsetTop:e.offsetTop||0}},refresh:function(e){var t=this.storage.getDisplayList(!0),n=this._zlevelList;this._redrawId=Math.random(),this._paintList(t,e,this._redrawId);for(var i=0;i<n.length;i++){var r=n[i],o=this._layers[r];if(!o.__builtin__&&o.refresh){var a=0===i?this._backgroundColor:null;o.refresh(a)}}return this.refreshHover(),this},addHover:function(e,t){if(!e.__hoverMir){var n=new e.constructor({style:e.style,shape:e.shape});n.__from=e,e.__hoverMir=n,n.setStyle(t),this._hoverElements.push(n)}},removeHover:function(e){var t=e.__hoverMir,n=this._hoverElements,i=r.indexOf(n,t);i>=0&&n.splice(i,1),e.__hoverMir=null},clearHover:function(e){for(var t=this._hoverElements,n=0;n<t.length;n++){var i=t[n].__from;i&&(i.__hoverMir=null)}t.length=0},refreshHover:function(){var e=this._hoverElements,t=e.length,n=this._hoverlayer;if(n&&n.clear(),t){s(e,this.storage.displayableSortFunc),n||(n=this._hoverlayer=this.getLayer(1e5));var i={};n.ctx.save();for(var r=0;r<t;){var o=e[r],a=o.__from;a&&a.__zr?(r++,a.invisible||(o.transform=a.transform,o.invTransform=a.invTransform,o.__clipPaths=a.__clipPaths,this._doPaintEl(o,n,!0,i))):(e.splice(r,1),a.__hoverMir=null,t--)}n.ctx.restore()}},getHoverLayer:function(){return this.getLayer(1e5)},_paintList:function(e,t,n){if(this._redrawId===n){t=t||!1,this._updateLayerStatus(e);var i=this._doPaintList(e,t);if(this._needsManuallyCompositing&&this._compositeManually(),!i){var r=this;u(function(){r._paintList(e,t,n)})}}},_compositeManually:function(){var e=this.getLayer(314159).ctx,t=this._domRoot.width,n=this._domRoot.height;e.clearRect(0,0,t,n),this.eachBuiltinLayer(function(i){i.virtual&&e.drawImage(i.dom,0,0,t,n)})},_doPaintList:function(e,t){for(var n=[],i=0;i<this._zlevelList.length;i++){var o=this._zlevelList[i];(l=this._layers[o]).__builtin__&&l!==this._hoverlayer&&(l.__dirty||t)&&n.push(l)}for(var a=!0,s=0;s<n.length;s++){var l,u=(l=n[s]).ctx,c={};u.save();var h=t?l.__startIndex:l.__drawIndex,f=!t&&l.incremental&&Date.now,p=f&&Date.now(),m=l.zlevel===this._zlevelList[0]?this._backgroundColor:null;if(l.__startIndex===l.__endIndex)l.clear(!1,m);else if(h===l.__startIndex){var g=e[h];g.incremental&&g.notClear&&!t||l.clear(!1,m)}-1===h&&(console.error("For some unknown reason. drawIndex is -1"),h=l.__startIndex);for(var v=h;v<l.__endIndex;v++){var y=e[v];if(this._doPaintEl(y,l,t,c),y.__dirty=!1,f)if(Date.now()-p>15)break}l.__drawIndex=v,l.__drawIndex<l.__endIndex&&(a=!1),c.prevElClipPaths&&u.restore(),u.restore()}return d.wxa&&r.each(this._layers,function(e){e&&e.ctx&&e.ctx.draw&&e.ctx.draw()}),a},_doPaintEl:function(e,t,n,i){var r=t.ctx,o=e.transform;if((t.__dirty||n)&&!e.invisible&&0!==e.style.opacity&&(!o||o[0]||o[3])&&(!e.culling||!function(e,t,n){return f.copy(e.getBoundingRect()),e.transform&&f.applyTransform(e.transform),p.width=t,p.height=n,!f.intersect(p)}(e,this._width,this._height))){var a=e.__clipPaths;i.prevElClipPaths&&!function(e,t){if(e==t)return!1;if(!e||!t||e.length!==t.length)return!0;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!0}(a,i.prevElClipPaths)||(i.prevElClipPaths&&(t.ctx.restore(),i.prevElClipPaths=null,i.prevEl=null),a&&(r.save(),function(e,t){for(var n=0;n<e.length;n++){var i=e[n];i.setTransform(t),t.beginPath(),i.buildPath(t,i.shape),t.clip(),i.restoreTransform(t)}}(a,r),i.prevElClipPaths=a)),e.beforeBrush&&e.beforeBrush(r),e.brush(r,i.prevEl||null),i.prevEl=e,e.afterBrush&&e.afterBrush(r)}},getLayer:function(e,t){this._singleCanvas&&!this._needsManuallyCompositing&&(e=314159);var n=this._layers[e];return n||((n=new l("zr_"+e,this,this.dpr)).zlevel=e,n.__builtin__=!0,this._layerConfig[e]&&r.merge(n,this._layerConfig[e],!0),t&&(n.virtual=t),this.insertLayer(e,n),n.initContext()),n},insertLayer:function(e,t){var n=this._layers,i=this._zlevelList,r=i.length,a=null,s=-1,l=this._domRoot;if(n[e])o("ZLevel "+e+" has been used already");else if(function(e){return!!e&&(!!e.__builtin__||"function"==typeof e.resize&&"function"==typeof e.refresh)}(t)){if(r>0&&e>i[0]){for(s=0;s<r-1&&!(i[s]<e&&i[s+1]>e);s++);a=n[i[s]]}if(i.splice(s+1,0,e),n[e]=t,!t.virtual)if(a){var u=a.dom;u.nextSibling?l.insertBefore(t.dom,u.nextSibling):l.appendChild(t.dom)}else l.firstChild?l.insertBefore(t.dom,l.firstChild):l.appendChild(t.dom)}else o("Layer of zlevel "+e+" is not valid")},eachLayer:function(e,t){var n,i,r=this._zlevelList;for(i=0;i<r.length;i++)n=r[i],e.call(t,this._layers[n],n)},eachBuiltinLayer:function(e,t){var n,i,r,o=this._zlevelList;for(r=0;r<o.length;r++)i=o[r],(n=this._layers[i]).__builtin__&&e.call(t,n,i)},eachOtherLayer:function(e,t){var n,i,r,o=this._zlevelList;for(r=0;r<o.length;r++)i=o[r],(n=this._layers[i]).__builtin__||e.call(t,n,i)},getLayers:function(){return this._layers},_updateLayerStatus:function(e){function t(e){i&&(i.__endIndex!==e&&(i.__dirty=!0),i.__endIndex=e)}if(this.eachBuiltinLayer(function(e,t){e.__dirty=e.__used=!1}),this._singleCanvas)for(var n=1;n<e.length;n++){if((a=e[n]).zlevel!==e[n-1].zlevel||a.incremental){this._needsManuallyCompositing=!0;break}}var i=null,r=0;for(n=0;n<e.length;n++){var a,s,l=(a=e[n]).zlevel;a.incremental?((s=this.getLayer(l+.001,this._needsManuallyCompositing)).incremental=!0,r=1):s=this.getLayer(l+(r>0?.01:0),this._needsManuallyCompositing),s.__builtin__||o("ZLevel "+l+" has been used by unkown layer "+s.id),s!==i&&(s.__used=!0,s.__startIndex!==n&&(s.__dirty=!0),s.__startIndex=n,s.incremental?s.__drawIndex=-1:s.__drawIndex=n,t(n),i=s),a.__dirty&&(s.__dirty=!0,s.incremental&&s.__drawIndex<0&&(s.__drawIndex=n))}t(n),this.eachBuiltinLayer(function(e,t){!e.__used&&e.getElementCount()>0&&(e.__dirty=!0,e.__startIndex=e.__endIndex=e.__drawIndex=0),e.__dirty&&e.__drawIndex<0&&(e.__drawIndex=e.__startIndex)})},clear:function(){return this.eachBuiltinLayer(this._clearLayer),this},_clearLayer:function(e){e.clear()},setBackgroundColor:function(e){this._backgroundColor=e},configLayer:function(e,t){if(t){var n=this._layerConfig;n[e]?r.merge(n[e],t,!0):n[e]=t;for(var i=0;i<this._zlevelList.length;i++){var o=this._zlevelList[i];if(o===e||o===e+.01){var a=this._layers[o];r.merge(a,n[e],!0)}}}},delLayer:function(e){var t=this._layers,n=this._zlevelList,i=t[e];i&&(i.dom.parentNode.removeChild(i.dom),delete t[e],n.splice(r.indexOf(n,e),1))},resize:function(e,t){if(this._domRoot.style){var n=this._domRoot;n.style.display="none";var i=this._opts;if(null!=e&&(i.width=e),null!=t&&(i.height=t),e=this._getSize(0),t=this._getSize(1),n.style.display="",this._width!=e||t!=this._height){for(var o in n.style.width=e+"px",n.style.height=t+"px",this._layers)this._layers.hasOwnProperty(o)&&this._layers[o].resize(e,t);r.each(this._progressiveLayers,function(n){n.resize(e,t)}),this.refresh(!0)}this._width=e,this._height=t}else{if(null==e||null==t)return;this._width=e,this._height=t,this.getLayer(314159).resize(e,t)}return this},clearLayer:function(e){var t=this._layers[e];t&&t.clear()},dispose:function(){this.root.innerHTML="",this.root=this.storage=this._domRoot=this._layers=null},getRenderedCanvas:function(e){if(e=e||{},this._singleCanvas&&!this._compositeManually)return this._layers[314159].dom;var t=new l("image",this,e.pixelRatio||this.dpr);if(t.initContext(),t.clear(!1,e.backgroundColor||this._backgroundColor),e.pixelRatio<=this.dpr){this.refresh();var n=t.dom.width,i=t.dom.height,r=t.ctx;this.eachLayer(function(e){e.__builtin__?r.drawImage(e.dom,0,0,n,i):e.renderToCanvas&&(t.ctx.save(),e.renderToCanvas(t.ctx),t.ctx.restore())})}else for(var o={},a=this.storage.getDisplayList(!0),s=0;s<a.length;s++){var u=a[s];this._doPaintEl(u,t,!0,o)}return t.dom},getWidth:function(){return this._width},getHeight:function(){return this._height},_getSize:function(e){var t=this._opts,n=["width","height"][e],i=["clientWidth","clientHeight"][e],r=["paddingLeft","paddingTop"][e],o=["paddingRight","paddingBottom"][e];if(null!=t[n]&&"auto"!==t[n])return parseFloat(t[n]);var a=this.root,s=document.defaultView.getComputedStyle(a);return(a[i]||h(s[n])||h(a.style[n]))-(h(s[r])||0)-(h(s[o])||0)|0},pathToImage:function(e,t){t=t||this.dpr;var n=document.createElement("canvas"),i=n.getContext("2d"),r=e.getBoundingRect(),o=e.style,a=o.shadowBlur*t,s=o.shadowOffsetX*t,l=o.shadowOffsetY*t,u=o.hasStroke()?o.lineWidth:0,d=Math.max(u/2,-s+a),h=Math.max(u/2,s+a),f=Math.max(u/2,-l+a),p=Math.max(u/2,l+a),m=r.width+d+h,g=r.height+f+p;n.width=m*t,n.height=g*t,i.scale(t,t),i.clearRect(0,0,m,g),i.dpr=t;var v={position:e.position,rotation:e.rotation,scale:e.scale};e.position=[d-r.x,f-r.y],e.rotation=0,e.scale=[1,1],e.updateTransform(),e&&e.brush(i);var y=new c({style:{x:0,y:0,image:n}});return null!=v.position&&(y.position=e.position=v.position),null!=v.rotation&&(y.rotation=e.rotation=v.rotation),null!=v.scale&&(y.scale=e.scale=v.scale),y}};var g=m;e.exports=g},"./node_modules/zrender/lib/Storage.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/zrender/lib/core/env.js"),o=n("./node_modules/zrender/lib/container/Group.js"),a=n("./node_modules/zrender/lib/core/timsort.js");function s(e,t){return e.zlevel===t.zlevel?e.z===t.z?e.z2-t.z2:e.z-t.z:e.zlevel-t.zlevel}var l=function(){this._roots=[],this._displayList=[],this._displayListLen=0};l.prototype={constructor:l,traverse:function(e,t){for(var n=0;n<this._roots.length;n++)this._roots[n].traverse(e,t)},getDisplayList:function(e,t){return t=t||!1,e&&this.updateDisplayList(t),this._displayList},updateDisplayList:function(e){this._displayListLen=0;for(var t=this._roots,n=this._displayList,i=0,o=t.length;i<o;i++)this._updateAndAddDisplayable(t[i],null,e);n.length=this._displayListLen,r.canvasSupported&&a(n,s)},_updateAndAddDisplayable:function(e,t,n){if(!e.ignore||n){e.beforeUpdate(),e.__dirty&&e.update(),e.afterUpdate();var i=e.clipPath;if(i){t=t?t.slice():[];for(var r=i,o=e;r;)r.parent=o,r.updateTransform(),t.push(r),o=r,r=r.clipPath}if(e.isGroup){for(var a=e._children,s=0;s<a.length;s++){var l=a[s];e.__dirty&&(l.__dirty=!0),this._updateAndAddDisplayable(l,t,n)}e.__dirty=!1}else e.__clipPaths=t,this._displayList[this._displayListLen++]=e}},addRoot:function(e){e.__storage!==this&&(e instanceof o&&e.addChildrenToStorage(this),this.addToStorage(e),this._roots.push(e))},delRoot:function(e){if(null==e){for(var t=0;t<this._roots.length;t++){var n=this._roots[t];n instanceof o&&n.delChildrenFromStorage(this)}return this._roots=[],this._displayList=[],void(this._displayListLen=0)}if(e instanceof Array){t=0;for(var r=e.length;t<r;t++)this.delRoot(e[t])}else{var a=i.indexOf(this._roots,e);a>=0&&(this.delFromStorage(e),this._roots.splice(a,1),e instanceof o&&e.delChildrenFromStorage(this))}},addToStorage:function(e){return e&&(e.__storage=this,e.dirty(!1)),this},delFromStorage:function(e){return e&&(e.__storage=null),this},dispose:function(){this._renderList=this._roots=null},displayableSortFunc:s};var u=l;e.exports=u},"./node_modules/zrender/lib/animation/Animation.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/zrender/lib/core/event.js").Dispatcher,o=n("./node_modules/zrender/lib/animation/requestAnimationFrame.js"),a=n("./node_modules/zrender/lib/animation/Animator.js"),s=function(e){e=e||{},this.stage=e.stage||{},this.onframe=e.onframe||function(){},this._clips=[],this._running=!1,this._time,this._pausedTime,this._pauseStart,this._paused=!1,r.call(this)};s.prototype={constructor:s,addClip:function(e){this._clips.push(e)},addAnimator:function(e){e.animation=this;for(var t=e.getClips(),n=0;n<t.length;n++)this.addClip(t[n])},removeClip:function(e){var t=i.indexOf(this._clips,e);t>=0&&this._clips.splice(t,1)},removeAnimator:function(e){for(var t=e.getClips(),n=0;n<t.length;n++)this.removeClip(t[n]);e.animation=null},_update:function(){for(var e=(new Date).getTime()-this._pausedTime,t=e-this._time,n=this._clips,i=n.length,r=[],o=[],a=0;a<i;a++){var s=n[a],l=s.step(e,t);l&&(r.push(l),o.push(s))}for(a=0;a<i;)n[a]._needsRemove?(n[a]=n[i-1],n.pop(),i--):a++;i=r.length;for(a=0;a<i;a++)o[a].fire(r[a]);this._time=e,this.onframe(t),this.trigger("frame",t),this.stage.update&&this.stage.update()},_startLoop:function(){var e=this;this._running=!0,o(function t(){e._running&&(o(t),!e._paused&&e._update())})},start:function(){this._time=(new Date).getTime(),this._pausedTime=0,this._startLoop()},stop:function(){this._running=!1},pause:function(){this._paused||(this._pauseStart=(new Date).getTime(),this._paused=!0)},resume:function(){this._paused&&(this._pausedTime+=(new Date).getTime()-this._pauseStart,this._paused=!1)},clear:function(){this._clips=[]},isFinished:function(){return!this._clips.length},animate:function(e,t){var n=new a(e,(t=t||{}).loop,t.getter,t.setter);return this.addAnimator(n),n}},i.mixin(s,r);var l=s;e.exports=l},"./node_modules/zrender/lib/animation/Animator.js":function(e,t,n){var i=n("./node_modules/zrender/lib/animation/Clip.js"),r=n("./node_modules/zrender/lib/tool/color.js"),o=n("./node_modules/zrender/lib/core/util.js").isArrayLike,a=Array.prototype.slice;function s(e,t){return e[t]}function l(e,t,n){e[t]=n}function u(e,t,n){return(t-e)*n+e}function c(e,t,n){return n>.5?t:e}function d(e,t,n,i,r){var o=e.length;if(1==r)for(var a=0;a<o;a++)i[a]=u(e[a],t[a],n);else{var s=o&&e[0].length;for(a=0;a<o;a++)for(var l=0;l<s;l++)i[a][l]=u(e[a][l],t[a][l],n)}}function h(e,t,n){var i=e.length,r=t.length;if(i!==r)if(i>r)e.length=r;else for(var o=i;o<r;o++)e.push(1===n?t[o]:a.call(t[o]));var s=e[0]&&e[0].length;for(o=0;o<e.length;o++)if(1===n)isNaN(e[o])&&(e[o]=t[o]);else for(var l=0;l<s;l++)isNaN(e[o][l])&&(e[o][l]=t[o][l])}function f(e,t,n){if(e===t)return!0;var i=e.length;if(i!==t.length)return!1;if(1===n){for(var r=0;r<i;r++)if(e[r]!==t[r])return!1}else{var o=e[0].length;for(r=0;r<i;r++)for(var a=0;a<o;a++)if(e[r][a]!==t[r][a])return!1}return!0}function p(e,t,n,i,r,o,a,s,l){var u=e.length;if(1==l)for(var c=0;c<u;c++)s[c]=m(e[c],t[c],n[c],i[c],r,o,a);else{var d=e[0].length;for(c=0;c<u;c++)for(var h=0;h<d;h++)s[c][h]=m(e[c][h],t[c][h],n[c][h],i[c][h],r,o,a)}}function m(e,t,n,i,r,o,a){var s=.5*(n-e),l=.5*(i-t);return(2*(t-n)+s+l)*a+(-3*(t-n)-2*s-l)*o+s*r+t}function g(e){if(o(e)){var t=e.length;if(o(e[0])){for(var n=[],i=0;i<t;i++)n.push(a.call(e[i]));return n}return a.call(e)}return e}function v(e){return e[0]=Math.floor(e[0]),e[1]=Math.floor(e[1]),e[2]=Math.floor(e[2]),"rgba("+e.join(",")+")"}function y(e,t,n,a,s,l){var g=e._getter,y=e._setter,_="spline"===t,x=a.length;if(x){var b,w=a[0].value,S=o(w),A=!1,T=!1,C=S?function(e){var t=e[e.length-1].value;return o(t&&t[0])?2:1}(a):0;a.sort(function(e,t){return e.time-t.time}),b=a[x-1].time;for(var j=[],M=[],k=a[0].value,D=!0,I=0;I<x;I++){j.push(a[I].time/b);var P=a[I].value;if(S&&f(P,k,C)||!S&&P===k||(D=!1),k=P,"string"==typeof P){var z=r.parse(P);z?(P=z,A=!0):T=!0}M.push(P)}if(l||!D){var E=M[x-1];for(I=0;I<x-1;I++)S?h(M[I],E,C):!isNaN(M[I])||isNaN(E)||T||A||(M[I]=E);S&&h(g(e._target,s),E,C);var O,L,R,N,B,H=0,F=0;if(A)var W=[0,0,0,0];var V=new i({target:e._target,life:b,loop:e._loop,delay:e._delay,onframe:function(e,t){var n;if(t<0)n=0;else if(t<F){for(n=Math.min(H+1,x-1);n>=0&&!(j[n]<=t);n--);n=Math.min(n,x-2)}else{for(n=H;n<x&&!(j[n]>t);n++);n=Math.min(n-1,x-2)}H=n,F=t;var i=j[n+1]-j[n];if(0!==i)if(O=(t-j[n])/i,_)if(R=M[n],L=M[0===n?n:n-1],N=M[n>x-2?x-1:n+1],B=M[n>x-3?x-1:n+2],S)p(L,R,N,B,O,O*O,O*O*O,g(e,s),C);else{if(A)r=p(L,R,N,B,O,O*O,O*O*O,W,1),r=v(W);else{if(T)return c(R,N,O);r=m(L,R,N,B,O,O*O,O*O*O)}y(e,s,r)}else if(S)d(M[n],M[n+1],O,g(e,s),C);else{var r;if(A)d(M[n],M[n+1],O,W,1),r=v(W);else{if(T)return c(M[n],M[n+1],O);r=u(M[n],M[n+1],O)}y(e,s,r)}},ondestroy:n});return t&&"spline"!==t&&(V.easing=t),V}}}var _=function(e,t,n,i){this._tracks={},this._target=e,this._loop=t||!1,this._getter=n||s,this._setter=i||l,this._clipCount=0,this._delay=0,this._doneList=[],this._onframeList=[],this._clipList=[]};_.prototype={when:function(e,t){var n=this._tracks;for(var i in t)if(t.hasOwnProperty(i)){if(!n[i]){n[i]=[];var r=this._getter(this._target,i);if(null==r)continue;0!==e&&n[i].push({time:0,value:g(r)})}n[i].push({time:e,value:t[i]})}return this},during:function(e){return this._onframeList.push(e),this},pause:function(){for(var e=0;e<this._clipList.length;e++)this._clipList[e].pause();this._paused=!0},resume:function(){for(var e=0;e<this._clipList.length;e++)this._clipList[e].resume();this._paused=!1},isPaused:function(){return!!this._paused},_doneCallback:function(){this._tracks={},this._clipList.length=0;for(var e=this._doneList,t=e.length,n=0;n<t;n++)e[n].call(this)},start:function(e,t){var n,i=this,r=0,o=function(){--r||i._doneCallback()};for(var a in this._tracks)if(this._tracks.hasOwnProperty(a)){var s=y(this,e,o,this._tracks[a],a,t);s&&(this._clipList.push(s),r++,this.animation&&this.animation.addClip(s),n=s)}if(n){var l=n.onframe;n.onframe=function(e,t){l(e,t);for(var n=0;n<i._onframeList.length;n++)i._onframeList[n](e,t)}}return r||this._doneCallback(),this},stop:function(e){for(var t=this._clipList,n=this.animation,i=0;i<t.length;i++){var r=t[i];e&&r.onframe(this._target,1),n&&n.removeClip(r)}t.length=0},delay:function(e){return this._delay=e,this},done:function(e){return e&&this._doneList.push(e),this},getClips:function(){return this._clipList}};var x=_;e.exports=x},"./node_modules/zrender/lib/animation/Clip.js":function(e,t,n){var i=n("./node_modules/zrender/lib/animation/easing.js");function r(e){this._target=e.target,this._life=e.life||1e3,this._delay=e.delay||0,this._initialized=!1,this.loop=null!=e.loop&&e.loop,this.gap=e.gap||0,this.easing=e.easing||"Linear",this.onframe=e.onframe,this.ondestroy=e.ondestroy,this.onrestart=e.onrestart,this._pausedTime=0,this._paused=!1}r.prototype={constructor:r,step:function(e,t){if(this._initialized||(this._startTime=e+this._delay,this._initialized=!0),this._paused)this._pausedTime+=t;else{var n=(e-this._startTime-this._pausedTime)/this._life;if(!(n<0)){n=Math.min(n,1);var r=this.easing,o="string"==typeof r?i[r]:r,a="function"==typeof o?o(n):n;return this.fire("frame",a),1==n?this.loop?(this.restart(e),"restart"):(this._needsRemove=!0,"destroy"):null}}},restart:function(e){var t=(e-this._startTime-this._pausedTime)%this._life;this._startTime=e-t+this.gap,this._pausedTime=0,this._needsRemove=!1},fire:function(e,t){this[e="on"+e]&&this[e](this._target,t)},pause:function(){this._paused=!0},resume:function(){this._paused=!1}};var o=r;e.exports=o},"./node_modules/zrender/lib/animation/easing.js":function(e,t){var n={linear:function(e){return e},quadraticIn:function(e){return e*e},quadraticOut:function(e){return e*(2-e)},quadraticInOut:function(e){return(e*=2)<1?.5*e*e:-.5*(--e*(e-2)-1)},cubicIn:function(e){return e*e*e},cubicOut:function(e){return--e*e*e+1},cubicInOut:function(e){return(e*=2)<1?.5*e*e*e:.5*((e-=2)*e*e+2)},quarticIn:function(e){return e*e*e*e},quarticOut:function(e){return 1- --e*e*e*e},quarticInOut:function(e){return(e*=2)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)},quinticIn:function(e){return e*e*e*e*e},quinticOut:function(e){return--e*e*e*e*e+1},quinticInOut:function(e){return(e*=2)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)},sinusoidalIn:function(e){return 1-Math.cos(e*Math.PI/2)},sinusoidalOut:function(e){return Math.sin(e*Math.PI/2)},sinusoidalInOut:function(e){return.5*(1-Math.cos(Math.PI*e))},exponentialIn:function(e){return 0===e?0:Math.pow(1024,e-1)},exponentialOut:function(e){return 1===e?1:1-Math.pow(2,-10*e)},exponentialInOut:function(e){return 0===e?0:1===e?1:(e*=2)<1?.5*Math.pow(1024,e-1):.5*(2-Math.pow(2,-10*(e-1)))},circularIn:function(e){return 1-Math.sqrt(1-e*e)},circularOut:function(e){return Math.sqrt(1- --e*e)},circularInOut:function(e){return(e*=2)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)},elasticIn:function(e){var t,n=.1;return 0===e?0:1===e?1:(!n||n<1?(n=1,t=.1):t=.4*Math.asin(1/n)/(2*Math.PI),-n*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/.4))},elasticOut:function(e){var t,n=.1;return 0===e?0:1===e?1:(!n||n<1?(n=1,t=.1):t=.4*Math.asin(1/n)/(2*Math.PI),n*Math.pow(2,-10*e)*Math.sin((e-t)*(2*Math.PI)/.4)+1)},elasticInOut:function(e){var t,n=.1;return 0===e?0:1===e?1:(!n||n<1?(n=1,t=.1):t=.4*Math.asin(1/n)/(2*Math.PI),(e*=2)<1?n*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/.4)*-.5:n*Math.pow(2,-10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/.4)*.5+1)},backIn:function(e){var t=1.70158;return e*e*((t+1)*e-t)},backOut:function(e){var t=1.70158;return--e*e*((t+1)*e+t)+1},backInOut:function(e){var t=2.5949095;return(e*=2)<1?e*e*((t+1)*e-t)*.5:.5*((e-=2)*e*((t+1)*e+t)+2)},bounceIn:function(e){return 1-n.bounceOut(1-e)},bounceOut:function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},bounceInOut:function(e){return e<.5?.5*n.bounceIn(2*e):.5*n.bounceOut(2*e-1)+.5}},i=n;e.exports=i},"./node_modules/zrender/lib/animation/requestAnimationFrame.js":function(e,t){var n="undefined"!=typeof window&&(window.requestAnimationFrame&&window.requestAnimationFrame.bind(window)||window.msRequestAnimationFrame&&window.msRequestAnimationFrame.bind(window)||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame)||function(e){setTimeout(e,16)};e.exports=n},"./node_modules/zrender/lib/config.js":function(e,t){var n=1;"undefined"!=typeof window&&(n=Math.max(window.devicePixelRatio||1,1));var i=n;t.debugMode=0,t.devicePixelRatio=i},"./node_modules/zrender/lib/contain/arc.js":function(e,t,n){var i=n("./node_modules/zrender/lib/contain/util.js").normalizeRadian,r=2*Math.PI;t.containStroke=function(e,t,n,o,a,s,l,u,c){if(0===l)return!1;var d=l;u-=e,c-=t;var h=Math.sqrt(u*u+c*c);if(h-d>n||h+d<n)return!1;if(Math.abs(o-a)%r<1e-4)return!0;if(s){var f=o;o=i(a),a=i(f)}else o=i(o),a=i(a);o>a&&(a+=r);var p=Math.atan2(c,u);return p<0&&(p+=r),p>=o&&p<=a||p+r>=o&&p+r<=a}},"./node_modules/zrender/lib/contain/cubic.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/curve.js");t.containStroke=function(e,t,n,r,o,a,s,l,u,c,d){if(0===u)return!1;var h=u;return!(d>t+h&&d>r+h&&d>a+h&&d>l+h||d<t-h&&d<r-h&&d<a-h&&d<l-h||c>e+h&&c>n+h&&c>o+h&&c>s+h||c<e-h&&c<n-h&&c<o-h&&c<s-h)&&i.cubicProjectPoint(e,t,n,r,o,a,s,l,c,d,null)<=h/2}},"./node_modules/zrender/lib/contain/line.js":function(e,t){t.containStroke=function(e,t,n,i,r,o,a){if(0===r)return!1;var s=r,l=0;if(a>t+s&&a>i+s||a<t-s&&a<i-s||o>e+s&&o>n+s||o<e-s&&o<n-s)return!1;if(e===n)return Math.abs(o-e)<=s/2;var u=(l=(t-i)/(e-n))*o-a+(e*i-n*t)/(e-n);return u*u/(l*l+1)<=s/2*s/2}},"./node_modules/zrender/lib/contain/path.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/PathProxy.js"),r=n("./node_modules/zrender/lib/contain/line.js"),o=n("./node_modules/zrender/lib/contain/cubic.js"),a=n("./node_modules/zrender/lib/contain/quadratic.js"),s=n("./node_modules/zrender/lib/contain/arc.js"),l=n("./node_modules/zrender/lib/contain/util.js").normalizeRadian,u=n("./node_modules/zrender/lib/core/curve.js"),c=n("./node_modules/zrender/lib/contain/windingLine.js"),d=i.CMD,h=2*Math.PI,f=1e-4;var p=[-1,-1,-1],m=[-1,-1];function g(){var e=m[0];m[0]=m[1],m[1]=e}function v(e,t,n,i,r,o,a,s,l,c){if(c>t&&c>i&&c>o&&c>s||c<t&&c<i&&c<o&&c<s)return 0;var d=u.cubicRootAt(t,i,o,s,c,p);if(0===d)return 0;for(var h,f,v=0,y=-1,_=0;_<d;_++){var x=p[_],b=0===x||1===x?.5:1;u.cubicAt(e,n,r,a,x)<l||(y<0&&(y=u.cubicExtrema(t,i,o,s,m),m[1]<m[0]&&y>1&&g(),h=u.cubicAt(t,i,o,s,m[0]),y>1&&(f=u.cubicAt(t,i,o,s,m[1]))),2==y?x<m[0]?v+=h<t?b:-b:x<m[1]?v+=f<h?b:-b:v+=s<f?b:-b:x<m[0]?v+=h<t?b:-b:v+=s<h?b:-b)}return v}function y(e,t,n,i,r,o,a,s){if(s>t&&s>i&&s>o||s<t&&s<i&&s<o)return 0;var l=u.quadraticRootAt(t,i,o,s,p);if(0===l)return 0;var c=u.quadraticExtremum(t,i,o);if(c>=0&&c<=1){for(var d=0,h=u.quadraticAt(t,i,o,c),f=0;f<l;f++){var m=0===p[f]||1===p[f]?.5:1;u.quadraticAt(e,n,r,p[f])<a||(p[f]<c?d+=h<t?m:-m:d+=o<h?m:-m)}return d}m=0===p[0]||1===p[0]?.5:1;return u.quadraticAt(e,n,r,p[0])<a?0:o<t?m:-m}function _(e,t,n,i,r,o,a,s){if((s-=t)>n||s<-n)return 0;var u=Math.sqrt(n*n-s*s);p[0]=-u,p[1]=u;var c=Math.abs(i-r);if(c<1e-4)return 0;if(c%h<1e-4){i=0,r=h;var d=o?1:-1;return a>=p[0]+e&&a<=p[1]+e?d:0}if(o){u=i;i=l(r),r=l(u)}else i=l(i),r=l(r);i>r&&(r+=h);for(var f=0,m=0;m<2;m++){var g=p[m];if(g+e>a){var v=Math.atan2(s,g);d=o?1:-1;v<0&&(v=h+v),(v>=i&&v<=r||v+h>=i&&v+h<=r)&&(v>Math.PI/2&&v<1.5*Math.PI&&(d=-d),f+=d)}}return f}function x(e,t,n,i,l){for(var u=0,h=0,p=0,m=0,g=0,x=0;x<e.length;){var b=e[x++];switch(b===d.M&&x>1&&(n||(u+=c(h,p,m,g,i,l))),1==x&&(m=h=e[x],g=p=e[x+1]),b){case d.M:h=m=e[x++],p=g=e[x++];break;case d.L:if(n){if(r.containStroke(h,p,e[x],e[x+1],t,i,l))return!0}else u+=c(h,p,e[x],e[x+1],i,l)||0;h=e[x++],p=e[x++];break;case d.C:if(n){if(o.containStroke(h,p,e[x++],e[x++],e[x++],e[x++],e[x],e[x+1],t,i,l))return!0}else u+=v(h,p,e[x++],e[x++],e[x++],e[x++],e[x],e[x+1],i,l)||0;h=e[x++],p=e[x++];break;case d.Q:if(n){if(a.containStroke(h,p,e[x++],e[x++],e[x],e[x+1],t,i,l))return!0}else u+=y(h,p,e[x++],e[x++],e[x],e[x+1],i,l)||0;h=e[x++],p=e[x++];break;case d.A:var w=e[x++],S=e[x++],A=e[x++],T=e[x++],C=e[x++],j=e[x++],M=(e[x++],1-e[x++]),k=Math.cos(C)*A+w,D=Math.sin(C)*T+S;x>1?u+=c(h,p,k,D,i,l):(m=k,g=D);var I=(i-w)*T/A+w;if(n){if(s.containStroke(w,S,T,C,C+j,M,t,I,l))return!0}else u+=_(w,S,T,C,C+j,M,I,l);h=Math.cos(C+j)*A+w,p=Math.sin(C+j)*T+S;break;case d.R:m=h=e[x++],g=p=e[x++];k=m+e[x++],D=g+e[x++];if(n){if(r.containStroke(m,g,k,g,t,i,l)||r.containStroke(k,g,k,D,t,i,l)||r.containStroke(k,D,m,D,t,i,l)||r.containStroke(m,D,m,g,t,i,l))return!0}else u+=c(k,g,k,D,i,l),u+=c(m,D,m,g,i,l);break;case d.Z:if(n){if(r.containStroke(h,p,m,g,t,i,l))return!0}else u+=c(h,p,m,g,i,l);h=m,p=g}}return n||function(e,t){return Math.abs(e-t)<f}(p,g)||(u+=c(h,p,m,g,i,l)||0),0!==u}t.contain=function(e,t,n){return x(e,0,!1,t,n)},t.containStroke=function(e,t,n,i){return x(e,t,!0,n,i)}},"./node_modules/zrender/lib/contain/polygon.js":function(e,t,n){var i=n("./node_modules/zrender/lib/contain/windingLine.js"),r=1e-8;function o(e,t){return Math.abs(e-t)<r}t.contain=function(e,t,n){var r=0,a=e[0];if(!a)return!1;for(var s=1;s<e.length;s++){var l=e[s];r+=i(a[0],a[1],l[0],l[1],t,n),a=l}var u=e[0];return o(a[0],u[0])&&o(a[1],u[1])||(r+=i(a[0],a[1],u[0],u[1],t,n)),0!==r}},"./node_modules/zrender/lib/contain/quadratic.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/curve.js").quadraticProjectPoint;t.containStroke=function(e,t,n,r,o,a,s,l,u){if(0===s)return!1;var c=s;return!(u>t+c&&u>r+c&&u>a+c||u<t-c&&u<r-c&&u<a-c||l>e+c&&l>n+c&&l>o+c||l<e-c&&l<n-c&&l<o-c)&&i(e,t,n,r,o,a,l,u,null)<=c/2}},"./node_modules/zrender/lib/contain/text.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/BoundingRect.js"),r=n("./node_modules/zrender/lib/graphic/helper/image.js"),o=n("./node_modules/zrender/lib/core/util.js"),a=o.getContext,s=o.extend,l=o.retrieve2,u=o.retrieve3,c=o.trim,d={},h=0,f=5e3,p=/\{([a-zA-Z0-9_]+)\|([^}]*)\}/g,m="12px sans-serif",g={};function v(e,t){var n=e+":"+(t=t||m);if(d[n])return d[n];for(var i=(e+"").split("\n"),r=0,o=0,a=i.length;o<a;o++)r=Math.max(T(i[o],t).width,r);return h>f&&(h=0,d={}),h++,d[n]=r,r}function y(e,t,n){return"right"===n?e-=t:"center"===n&&(e-=t/2),e}function _(e,t,n){return"middle"===n?e-=t/2:"bottom"===n&&(e-=t),e}function x(e,t,n,i,r){if(!t)return"";var o=(e+"").split("\n");r=b(t,n,i,r);for(var a=0,s=o.length;a<s;a++)o[a]=w(o[a],r);return o.join("\n")}function b(e,t,n,i){(i=s({},i)).font=t;n=l(n,"...");i.maxIterations=l(i.maxIterations,2);var r=i.minChar=l(i.minChar,0);i.cnCharWidth=v("国",t);var o=i.ascCharWidth=v("a",t);i.placeholder=l(i.placeholder,"");for(var a=e=Math.max(0,e-1),u=0;u<r&&a>=o;u++)a-=o;var c=v(n);return c>a&&(n="",c=0),a=e-c,i.ellipsis=n,i.ellipsisWidth=c,i.contentWidth=a,i.containerWidth=e,i}function w(e,t){var n=t.containerWidth,i=t.font,r=t.contentWidth;if(!n)return"";var o=v(e,i);if(o<=n)return e;for(var a=0;;a++){if(o<=r||a>=t.maxIterations){e+=t.ellipsis;break}var s=0===a?S(e,r,t.ascCharWidth,t.cnCharWidth):o>0?Math.floor(e.length*r/o):0;o=v(e=e.substr(0,s),i)}return""===e&&(e=t.placeholder),e}function S(e,t,n,i){for(var r=0,o=0,a=e.length;o<a&&r<t;o++){var s=e.charCodeAt(o);r+=0<=s&&s<=127?n:i}return o}function A(e){return v("国",e)}function T(e,t){return g.measureText(e,t)}function C(e,t,n,i){null!=e&&(e+="");var r=A(t),o=e?e.split("\n"):[],a=o.length*r,s=a;if(n&&(s+=n[0]+n[2]),e&&i){var l=i.outerHeight,u=i.outerWidth;if(null!=l&&s>l)e="",o=[];else if(null!=u)for(var c=b(u-(n?n[1]+n[3]:0),t,i.ellipsis,{minChar:i.minChar,placeholder:i.placeholder}),d=0,h=o.length;d<h;d++)o[d]=w(o[d],c)}return{lines:o,height:a,outerHeight:s,lineHeight:r}}function j(e,t){var n={lines:[],width:0,height:0};if(null!=e&&(e+=""),!e)return n;for(var i,o=p.lastIndex=0;null!=(i=p.exec(e));){var a=i.index;a>o&&M(n,e.substring(o,a)),M(n,i[2],i[1]),o=p.lastIndex}o<e.length&&M(n,e.substring(o,e.length));var s=n.lines,c=0,d=0,h=[],f=t.textPadding,m=t.truncate,g=m&&m.outerWidth,y=m&&m.outerHeight;f&&(null!=g&&(g-=f[1]+f[3]),null!=y&&(y-=f[0]+f[2]));for(var _=0;_<s.length;_++){for(var b=s[_],w=0,S=0,T=0;T<b.tokens.length;T++){var C=(R=b.tokens[T]).styleName&&t.rich[R.styleName]||{},j=R.textPadding=C.textPadding,k=R.font=C.font||t.font,D=R.textHeight=l(C.textHeight,A(k));if(j&&(D+=j[0]+j[2]),R.height=D,R.lineHeight=u(C.textLineHeight,t.textLineHeight,D),R.textAlign=C&&C.textAlign||t.textAlign,R.textVerticalAlign=C&&C.textVerticalAlign||"middle",null!=y&&c+R.lineHeight>y)return{lines:[],width:0,height:0};R.textWidth=v(R.text,k);var I=C.textWidth,P=null==I||"auto"===I;if("string"==typeof I&&"%"===I.charAt(I.length-1))R.percentWidth=I,h.push(R),I=0;else{if(P){I=R.textWidth;var z=C.textBackgroundColor,E=z&&z.image;E&&(E=r.findExistImage(E),r.isImageReady(E)&&(I=Math.max(I,E.width*D/E.height)))}var O=j?j[1]+j[3]:0;I+=O;var L=null!=g?g-S:null;null!=L&&L<I&&(!P||L<O?(R.text="",R.textWidth=I=0):(R.text=x(R.text,L-O,k,m.ellipsis,{minChar:m.minChar}),R.textWidth=v(R.text,k),I=R.textWidth+O))}S+=R.width=I,C&&(w=Math.max(w,R.lineHeight))}b.width=S,b.lineHeight=w,c+=w,d=Math.max(d,S)}n.outerWidth=n.width=l(t.textWidth,d),n.outerHeight=n.height=l(t.textHeight,c),f&&(n.outerWidth+=f[1]+f[3],n.outerHeight+=f[0]+f[2]);for(_=0;_<h.length;_++){var R,N=(R=h[_]).percentWidth;R.width=parseInt(N,10)/100*d}return n}function M(e,t,n){for(var i=""===t,r=t.split("\n"),o=e.lines,a=0;a<r.length;a++){var s=r[a],l={styleName:n,text:s,isLineHolder:!s&&!i};if(a)o.push({tokens:[l]});else{var u=(o[o.length-1]||(o[0]={tokens:[]})).tokens,c=u.length;1===c&&u[0].isLineHolder?u[0]=l:(s||!c||i)&&u.push(l)}}}g.measureText=function(e,t){var n=a();return n.font=t||m,n.measureText(e)},t.DEFAULT_FONT=m,t.$override=function(e,t){g[e]=t},t.getWidth=v,t.getBoundingRect=function(e,t,n,r,o,a,s){return a?function(e,t,n,r,o,a,s){var l=j(e,{rich:a,truncate:s,font:t,textAlign:n,textPadding:o}),u=l.outerWidth,c=l.outerHeight,d=y(0,u,n),h=_(0,c,r);return new i(d,h,u,c)}(e,t,n,r,o,a,s):function(e,t,n,r,o,a){var s=C(e,t,o,a),l=v(e,t);o&&(l+=o[1]+o[3]);var u=s.outerHeight,c=y(0,l,n),d=_(0,u,r),h=new i(c,d,l,u);return h.lineHeight=s.lineHeight,h}(e,t,n,r,o,s)},t.adjustTextX=y,t.adjustTextY=_,t.adjustTextPositionOnRect=function(e,t,n){var i=t.x,r=t.y,o=t.height,a=t.width,s=o/2,l="left",u="top";switch(e){case"left":i-=n,r+=s,l="right",u="middle";break;case"right":i+=n+a,r+=s,u="middle";break;case"top":i+=a/2,r-=n,l="center",u="bottom";break;case"bottom":i+=a/2,r+=o+n,l="center";break;case"inside":i+=a/2,r+=s,l="center",u="middle";break;case"insideLeft":i+=n,r+=s,u="middle";break;case"insideRight":i+=a-n,r+=s,l="right",u="middle";break;case"insideTop":i+=a/2,r+=n,l="center";break;case"insideBottom":i+=a/2,r+=o-n,l="center",u="bottom";break;case"insideTopLeft":i+=n,r+=n;break;case"insideTopRight":i+=a-n,r+=n,l="right";break;case"insideBottomLeft":i+=n,r+=o-n,u="bottom";break;case"insideBottomRight":i+=a-n,r+=o-n,l="right",u="bottom"}return{x:i,y:r,textAlign:l,textVerticalAlign:u}},t.truncateText=x,t.getLineHeight=A,t.measureText=T,t.parsePlainText=C,t.parseRichText=j,t.makeFont=function(e){var t=(e.fontSize||e.fontFamily)&&[e.fontStyle,e.fontWeight,(e.fontSize||12)+"px",e.fontFamily||"sans-serif"].join(" ");return t&&c(t)||e.textFont||e.font}},"./node_modules/zrender/lib/contain/util.js":function(e,t){var n=2*Math.PI;t.normalizeRadian=function(e){return(e%=n)<0&&(e+=n),e}},"./node_modules/zrender/lib/contain/windingLine.js":function(e,t){e.exports=function(e,t,n,i,r,o){if(o>t&&o>i||o<t&&o<i)return 0;if(i===t)return 0;var a=i<t?1:-1,s=(o-t)/(i-t);1!==s&&0!==s||(a=i<t?.5:-.5);var l=s*(n-e)+e;return l===r?1/0:l>r?a:0}},"./node_modules/zrender/lib/container/Group.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/zrender/lib/Element.js"),o=n("./node_modules/zrender/lib/core/BoundingRect.js"),a=function(e){for(var t in e=e||{},r.call(this,e),e)e.hasOwnProperty(t)&&(this[t]=e[t]);this._children=[],this.__storage=null,this.__dirty=!0};a.prototype={constructor:a,isGroup:!0,type:"group",silent:!1,children:function(){return this._children.slice()},childAt:function(e){return this._children[e]},childOfName:function(e){for(var t=this._children,n=0;n<t.length;n++)if(t[n].name===e)return t[n]},childCount:function(){return this._children.length},add:function(e){return e&&e!==this&&e.parent!==this&&(this._children.push(e),this._doAdd(e)),this},addBefore:function(e,t){if(e&&e!==this&&e.parent!==this&&t&&t.parent===this){var n=this._children,i=n.indexOf(t);i>=0&&(n.splice(i,0,e),this._doAdd(e))}return this},_doAdd:function(e){e.parent&&e.parent.remove(e),e.parent=this;var t=this.__storage,n=this.__zr;t&&t!==e.__storage&&(t.addToStorage(e),e instanceof a&&e.addChildrenToStorage(t)),n&&n.refresh()},remove:function(e){var t=this.__zr,n=this.__storage,r=this._children,o=i.indexOf(r,e);return o<0?this:(r.splice(o,1),e.parent=null,n&&(n.delFromStorage(e),e instanceof a&&e.delChildrenFromStorage(n)),t&&t.refresh(),this)},removeAll:function(){var e,t,n=this._children,i=this.__storage;for(t=0;t<n.length;t++)e=n[t],i&&(i.delFromStorage(e),e instanceof a&&e.delChildrenFromStorage(i)),e.parent=null;return n.length=0,this},eachChild:function(e,t){for(var n=this._children,i=0;i<n.length;i++){var r=n[i];e.call(t,r,i)}return this},traverse:function(e,t){for(var n=0;n<this._children.length;n++){var i=this._children[n];e.call(t,i),"group"===i.type&&i.traverse(e,t)}return this},addChildrenToStorage:function(e){for(var t=0;t<this._children.length;t++){var n=this._children[t];e.addToStorage(n),n instanceof a&&n.addChildrenToStorage(e)}},delChildrenFromStorage:function(e){for(var t=0;t<this._children.length;t++){var n=this._children[t];e.delFromStorage(n),n instanceof a&&n.delChildrenFromStorage(e)}},dirty:function(){return this.__dirty=!0,this.__zr&&this.__zr.refresh(),this},getBoundingRect:function(e){for(var t=null,n=new o(0,0,0,0),i=e||this._children,r=[],a=0;a<i.length;a++){var s=i[a];if(!s.ignore&&!s.invisible){var l=s.getBoundingRect(),u=s.getLocalTransform(r);u?(n.copy(l),n.applyTransform(u),(t=t||n.clone()).union(n)):(t=t||l.clone()).union(l)}}return t||n}},i.inherits(a,r);var s=a;e.exports=s},"./node_modules/zrender/lib/core/BoundingRect.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/vector.js"),r=n("./node_modules/zrender/lib/core/matrix.js"),o=i.applyTransform,a=Math.min,s=Math.max;function l(e,t,n,i){n<0&&(e+=n,n=-n),i<0&&(t+=i,i=-i),this.x=e,this.y=t,this.width=n,this.height=i}l.prototype={constructor:l,union:function(e){var t=a(e.x,this.x),n=a(e.y,this.y);this.width=s(e.x+e.width,this.x+this.width)-t,this.height=s(e.y+e.height,this.y+this.height)-n,this.x=t,this.y=n},applyTransform:function(){var e=[],t=[],n=[],i=[];return function(r){if(r){e[0]=n[0]=this.x,e[1]=i[1]=this.y,t[0]=i[0]=this.x+this.width,t[1]=n[1]=this.y+this.height,o(e,e,r),o(t,t,r),o(n,n,r),o(i,i,r),this.x=a(e[0],t[0],n[0],i[0]),this.y=a(e[1],t[1],n[1],i[1]);var l=s(e[0],t[0],n[0],i[0]),u=s(e[1],t[1],n[1],i[1]);this.width=l-this.x,this.height=u-this.y}}}(),calculateTransform:function(e){var t=this,n=e.width/t.width,i=e.height/t.height,o=r.create();return r.translate(o,o,[-t.x,-t.y]),r.scale(o,o,[n,i]),r.translate(o,o,[e.x,e.y]),o},intersect:function(e){if(!e)return!1;e instanceof l||(e=l.create(e));var t=this,n=t.x,i=t.x+t.width,r=t.y,o=t.y+t.height,a=e.x,s=e.x+e.width,u=e.y,c=e.y+e.height;return!(i<a||s<n||o<u||c<r)},contain:function(e,t){return e>=this.x&&e<=this.x+this.width&&t>=this.y&&t<=this.y+this.height},clone:function(){return new l(this.x,this.y,this.width,this.height)},copy:function(e){this.x=e.x,this.y=e.y,this.width=e.width,this.height=e.height},plain:function(){return{x:this.x,y:this.y,width:this.width,height:this.height}}},l.create=function(e){return new l(e.x,e.y,e.width,e.height)};var u=l;e.exports=u},"./node_modules/zrender/lib/core/GestureMgr.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/event.js"),r=function(){this._track=[]};function o(e){var t=e[1][0]-e[0][0],n=e[1][1]-e[0][1];return Math.sqrt(t*t+n*n)}r.prototype={constructor:r,recognize:function(e,t,n){return this._doTrack(e,t,n),this._recognize(e)},clear:function(){return this._track.length=0,this},_doTrack:function(e,t,n){var r=e.touches;if(r){for(var o={points:[],touches:[],target:t,event:e},a=0,s=r.length;a<s;a++){var l=r[a],u=i.clientToLocal(n,l,{});o.points.push([u.zrX,u.zrY]),o.touches.push(l)}this._track.push(o)}},_recognize:function(e){for(var t in a)if(a.hasOwnProperty(t)){var n=a[t](this._track,e);if(n)return n}}};var a={pinch:function(e,t){var n=e.length;if(n){var i=(e[n-1]||{}).points,r=(e[n-2]||{}).points||i;if(r&&r.length>1&&i&&i.length>1){var a=o(i)/o(r);!isFinite(a)&&(a=1),t.pinchScale=a;var s=function(e){return[(e[0][0]+e[1][0])/2,(e[0][1]+e[1][1])/2]}(i);return t.pinchX=s[0],t.pinchY=s[1],{type:"pinch",target:e[0].target,event:t}}}}},s=r;e.exports=s},"./node_modules/zrender/lib/core/LRU.js":function(e,t){var n=function(){this.head=null,this.tail=null,this._len=0},i=n.prototype;i.insert=function(e){var t=new r(e);return this.insertEntry(t),t},i.insertEntry=function(e){this.head?(this.tail.next=e,e.prev=this.tail,e.next=null,this.tail=e):this.head=this.tail=e,this._len++},i.remove=function(e){var t=e.prev,n=e.next;t?t.next=n:this.head=n,n?n.prev=t:this.tail=t,e.next=e.prev=null,this._len--},i.len=function(){return this._len},i.clear=function(){this.head=this.tail=null,this._len=0};var r=function(e){this.value=e,this.next,this.prev},o=function(e){this._list=new n,this._map={},this._maxSize=e||10,this._lastRemovedEntry=null},a=o.prototype;a.put=function(e,t){var n=this._list,i=this._map,o=null;if(null==i[e]){var a=n.len(),s=this._lastRemovedEntry;if(a>=this._maxSize&&a>0){var l=n.head;n.remove(l),delete i[l.key],o=l.value,this._lastRemovedEntry=l}s?s.value=t:s=new r(t),s.key=e,n.insertEntry(s),i[e]=s}return o},a.get=function(e){var t=this._map[e],n=this._list;if(null!=t)return t!==n.tail&&(n.remove(t),n.insertEntry(t)),t.value},a.clear=function(){this._list.clear(),this._map={}};var s=o;e.exports=s},"./node_modules/zrender/lib/core/PathProxy.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/curve.js"),r=n("./node_modules/zrender/lib/core/vector.js"),o=n("./node_modules/zrender/lib/core/bbox.js"),a=n("./node_modules/zrender/lib/core/BoundingRect.js"),s=n("./node_modules/zrender/lib/config.js").devicePixelRatio,l={M:1,L:2,C:3,Q:4,A:5,Z:6,R:7},u=[],c=[],d=[],h=[],f=Math.min,p=Math.max,m=Math.cos,g=Math.sin,v=Math.sqrt,y=Math.abs,_="undefined"!=typeof Float32Array,x=function(e){this._saveData=!e,this._saveData&&(this.data=[]),this._ctx=null};x.prototype={constructor:x,_xi:0,_yi:0,_x0:0,_y0:0,_ux:0,_uy:0,_len:0,_lineDash:null,_dashOffset:0,_dashIdx:0,_dashSum:0,setScale:function(e,t){this._ux=y(1/s/e)||0,this._uy=y(1/s/t)||0},getContext:function(){return this._ctx},beginPath:function(e){return this._ctx=e,e&&e.beginPath(),e&&(this.dpr=e.dpr),this._saveData&&(this._len=0),this._lineDash&&(this._lineDash=null,this._dashOffset=0),this},moveTo:function(e,t){return this.addData(l.M,e,t),this._ctx&&this._ctx.moveTo(e,t),this._x0=e,this._y0=t,this._xi=e,this._yi=t,this},lineTo:function(e,t){var n=y(e-this._xi)>this._ux||y(t-this._yi)>this._uy||this._len<5;return this.addData(l.L,e,t),this._ctx&&n&&(this._needsDash()?this._dashedLineTo(e,t):this._ctx.lineTo(e,t)),n&&(this._xi=e,this._yi=t),this},bezierCurveTo:function(e,t,n,i,r,o){return this.addData(l.C,e,t,n,i,r,o),this._ctx&&(this._needsDash()?this._dashedBezierTo(e,t,n,i,r,o):this._ctx.bezierCurveTo(e,t,n,i,r,o)),this._xi=r,this._yi=o,this},quadraticCurveTo:function(e,t,n,i){return this.addData(l.Q,e,t,n,i),this._ctx&&(this._needsDash()?this._dashedQuadraticTo(e,t,n,i):this._ctx.quadraticCurveTo(e,t,n,i)),this._xi=n,this._yi=i,this},arc:function(e,t,n,i,r,o){return this.addData(l.A,e,t,n,n,i,r-i,0,o?0:1),this._ctx&&this._ctx.arc(e,t,n,i,r,o),this._xi=m(r)*n+e,this._yi=g(r)*n+e,this},arcTo:function(e,t,n,i,r){return this._ctx&&this._ctx.arcTo(e,t,n,i,r),this},rect:function(e,t,n,i){return this._ctx&&this._ctx.rect(e,t,n,i),this.addData(l.R,e,t,n,i),this},closePath:function(){this.addData(l.Z);var e=this._ctx,t=this._x0,n=this._y0;return e&&(this._needsDash()&&this._dashedLineTo(t,n),e.closePath()),this._xi=t,this._yi=n,this},fill:function(e){e&&e.fill(),this.toStatic()},stroke:function(e){e&&e.stroke(),this.toStatic()},setLineDash:function(e){if(e instanceof Array){this._lineDash=e,this._dashIdx=0;for(var t=0,n=0;n<e.length;n++)t+=e[n];this._dashSum=t}return this},setLineDashOffset:function(e){return this._dashOffset=e,this},len:function(){return this._len},setData:function(e){var t=e.length;this.data&&this.data.length==t||!_||(this.data=new Float32Array(t));for(var n=0;n<t;n++)this.data[n]=e[n];this._len=t},appendPath:function(e){e instanceof Array||(e=[e]);for(var t=e.length,n=0,i=this._len,r=0;r<t;r++)n+=e[r].len();_&&this.data instanceof Float32Array&&(this.data=new Float32Array(i+n));for(r=0;r<t;r++)for(var o=e[r].data,a=0;a<o.length;a++)this.data[i++]=o[a];this._len=i},addData:function(e){if(this._saveData){var t=this.data;this._len+arguments.length>t.length&&(this._expandData(),t=this.data);for(var n=0;n<arguments.length;n++)t[this._len++]=arguments[n];this._prevCmd=e}},_expandData:function(){if(!(this.data instanceof Array)){for(var e=[],t=0;t<this._len;t++)e[t]=this.data[t];this.data=e}},_needsDash:function(){return this._lineDash},_dashedLineTo:function(e,t){var n,i,r=this._dashSum,o=this._dashOffset,a=this._lineDash,s=this._ctx,l=this._xi,u=this._yi,c=e-l,d=t-u,h=v(c*c+d*d),m=l,g=u,y=a.length;for(c/=h,d/=h,o<0&&(o=r+o),m-=(o%=r)*c,g-=o*d;c>0&&m<=e||c<0&&m>=e||0==c&&(d>0&&g<=t||d<0&&g>=t);)m+=c*(n=a[i=this._dashIdx]),g+=d*n,this._dashIdx=(i+1)%y,c>0&&m<l||c<0&&m>l||d>0&&g<u||d<0&&g>u||s[i%2?"moveTo":"lineTo"](c>=0?f(m,e):p(m,e),d>=0?f(g,t):p(g,t));c=m-e,d=g-t,this._dashOffset=-v(c*c+d*d)},_dashedBezierTo:function(e,t,n,r,o,a){var s,l,u,c,d,h=this._dashSum,f=this._dashOffset,p=this._lineDash,m=this._ctx,g=this._xi,y=this._yi,_=i.cubicAt,x=0,b=this._dashIdx,w=p.length,S=0;for(f<0&&(f=h+f),f%=h,s=0;s<1;s+=.1)l=_(g,e,n,o,s+.1)-_(g,e,n,o,s),u=_(y,t,r,a,s+.1)-_(y,t,r,a,s),x+=v(l*l+u*u);for(;b<w&&!((S+=p[b])>f);b++);for(s=(S-f)/x;s<=1;)c=_(g,e,n,o,s),d=_(y,t,r,a,s),b%2?m.moveTo(c,d):m.lineTo(c,d),s+=p[b]/x,b=(b+1)%w;b%2!=0&&m.lineTo(o,a),l=o-c,u=a-d,this._dashOffset=-v(l*l+u*u)},_dashedQuadraticTo:function(e,t,n,i){var r=n,o=i;n=(n+2*e)/3,i=(i+2*t)/3,e=(this._xi+2*e)/3,t=(this._yi+2*t)/3,this._dashedBezierTo(e,t,n,i,r,o)},toStatic:function(){var e=this.data;e instanceof Array&&(e.length=this._len,_&&(this.data=new Float32Array(e)))},getBoundingRect:function(){u[0]=u[1]=d[0]=d[1]=Number.MAX_VALUE,c[0]=c[1]=h[0]=h[1]=-Number.MAX_VALUE;for(var e=this.data,t=0,n=0,i=0,s=0,f=0;f<e.length;){var p=e[f++];switch(1==f&&(i=t=e[f],s=n=e[f+1]),p){case l.M:t=i=e[f++],n=s=e[f++],d[0]=i,d[1]=s,h[0]=i,h[1]=s;break;case l.L:o.fromLine(t,n,e[f],e[f+1],d,h),t=e[f++],n=e[f++];break;case l.C:o.fromCubic(t,n,e[f++],e[f++],e[f++],e[f++],e[f],e[f+1],d,h),t=e[f++],n=e[f++];break;case l.Q:o.fromQuadratic(t,n,e[f++],e[f++],e[f],e[f+1],d,h),t=e[f++],n=e[f++];break;case l.A:var v=e[f++],y=e[f++],_=e[f++],x=e[f++],b=e[f++],w=e[f++]+b,S=(e[f++],1-e[f++]);1==f&&(i=m(b)*_+v,s=g(b)*x+y),o.fromArc(v,y,_,x,b,w,S,d,h),t=m(w)*_+v,n=g(w)*x+y;break;case l.R:i=t=e[f++],s=n=e[f++];var A=e[f++],T=e[f++];o.fromLine(i,s,i+A,s+T,d,h);break;case l.Z:t=i,n=s}r.min(u,u,d),r.max(c,c,h)}return 0===f&&(u[0]=u[1]=c[0]=c[1]=0),new a(u[0],u[1],c[0]-u[0],c[1]-u[1])},rebuildPath:function(e){for(var t,n,i,r,o,a,s=this.data,u=this._ux,c=this._uy,d=this._len,h=0;h<d;){var f=s[h++];switch(1==h&&(t=i=s[h],n=r=s[h+1]),f){case l.M:t=i=s[h++],n=r=s[h++],e.moveTo(i,r);break;case l.L:o=s[h++],a=s[h++],(y(o-i)>u||y(a-r)>c||h===d-1)&&(e.lineTo(o,a),i=o,r=a);break;case l.C:e.bezierCurveTo(s[h++],s[h++],s[h++],s[h++],s[h++],s[h++]),i=s[h-2],r=s[h-1];break;case l.Q:e.quadraticCurveTo(s[h++],s[h++],s[h++],s[h++]),i=s[h-2],r=s[h-1];break;case l.A:var p=s[h++],v=s[h++],_=s[h++],x=s[h++],b=s[h++],w=s[h++],S=s[h++],A=s[h++],T=_>x?_:x,C=_>x?1:_/x,j=_>x?x/_:1,M=b+w;Math.abs(_-x)>.001?(e.translate(p,v),e.rotate(S),e.scale(C,j),e.arc(0,0,T,b,M,1-A),e.scale(1/C,1/j),e.rotate(-S),e.translate(-p,-v)):e.arc(p,v,T,b,M,1-A),1==h&&(t=m(b)*_+p,n=g(b)*x+v),i=m(M)*_+p,r=g(M)*x+v;break;case l.R:t=i=s[h],n=r=s[h+1],e.rect(s[h++],s[h++],s[h++],s[h++]);break;case l.Z:e.closePath(),i=t,r=n}}}},x.CMD=l;var b=x;e.exports=b},"./node_modules/zrender/lib/core/bbox.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/vector.js"),r=n("./node_modules/zrender/lib/core/curve.js"),o=Math.min,a=Math.max,s=Math.sin,l=Math.cos,u=2*Math.PI,c=i.create(),d=i.create(),h=i.create();var f=[],p=[];t.fromPoints=function(e,t,n){if(0!==e.length){var i,r=e[0],s=r[0],l=r[0],u=r[1],c=r[1];for(i=1;i<e.length;i++)r=e[i],s=o(s,r[0]),l=a(l,r[0]),u=o(u,r[1]),c=a(c,r[1]);t[0]=s,t[1]=u,n[0]=l,n[1]=c}},t.fromLine=function(e,t,n,i,r,s){r[0]=o(e,n),r[1]=o(t,i),s[0]=a(e,n),s[1]=a(t,i)},t.fromCubic=function(e,t,n,i,s,l,u,c,d,h){var m,g=r.cubicExtrema,v=r.cubicAt,y=g(e,n,s,u,f);for(d[0]=1/0,d[1]=1/0,h[0]=-1/0,h[1]=-1/0,m=0;m<y;m++){var _=v(e,n,s,u,f[m]);d[0]=o(_,d[0]),h[0]=a(_,h[0])}for(y=g(t,i,l,c,p),m=0;m<y;m++){var x=v(t,i,l,c,p[m]);d[1]=o(x,d[1]),h[1]=a(x,h[1])}d[0]=o(e,d[0]),h[0]=a(e,h[0]),d[0]=o(u,d[0]),h[0]=a(u,h[0]),d[1]=o(t,d[1]),h[1]=a(t,h[1]),d[1]=o(c,d[1]),h[1]=a(c,h[1])},t.fromQuadratic=function(e,t,n,i,s,l,u,c){var d=r.quadraticExtremum,h=r.quadraticAt,f=a(o(d(e,n,s),1),0),p=a(o(d(t,i,l),1),0),m=h(e,n,s,f),g=h(t,i,l,p);u[0]=o(e,s,m),u[1]=o(t,l,g),c[0]=a(e,s,m),c[1]=a(t,l,g)},t.fromArc=function(e,t,n,r,o,a,f,p,m){var g=i.min,v=i.max,y=Math.abs(o-a);if(y%u<1e-4&&y>1e-4)return p[0]=e-n,p[1]=t-r,m[0]=e+n,void(m[1]=t+r);if(c[0]=l(o)*n+e,c[1]=s(o)*r+t,d[0]=l(a)*n+e,d[1]=s(a)*r+t,g(p,c,d),v(m,c,d),(o%=u)<0&&(o+=u),(a%=u)<0&&(a+=u),o>a&&!f?a+=u:o<a&&f&&(o+=u),f){var _=a;a=o,o=_}for(var x=0;x<a;x+=Math.PI/2)x>o&&(h[0]=l(x)*n+e,h[1]=s(x)*r+t,g(p,h,p),v(m,h,m))}},"./node_modules/zrender/lib/core/curve.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/vector.js"),r=i.create,o=i.distSquare,a=Math.pow,s=Math.sqrt,l=1e-8,u=1e-4,c=s(3),d=1/3,h=r(),f=r(),p=r();function m(e){return e>-l&&e<l}function g(e){return e>l||e<-l}function v(e,t,n,i,r){var o=1-r;return o*o*(o*e+3*r*t)+r*r*(r*i+3*o*n)}function y(e,t,n,i){var r=1-i;return r*(r*e+2*i*t)+i*i*n}t.cubicAt=v,t.cubicDerivativeAt=function(e,t,n,i,r){var o=1-r;return 3*(((t-e)*o+2*(n-t)*r)*o+(i-n)*r*r)},t.cubicRootAt=function(e,t,n,i,r,o){var l=i+3*(t-n)-e,u=3*(n-2*t+e),h=3*(t-e),f=e-r,p=u*u-3*l*h,g=u*h-9*l*f,v=h*h-3*u*f,y=0;if(m(p)&&m(g))m(u)?o[0]=0:(k=-h/u)>=0&&k<=1&&(o[y++]=k);else{var _=g*g-4*p*v;if(m(_)){var x=g/p,b=-x/2;(k=-u/l+x)>=0&&k<=1&&(o[y++]=k),b>=0&&b<=1&&(o[y++]=b)}else if(_>0){var w=s(_),S=p*u+1.5*l*(-g+w),A=p*u+1.5*l*(-g-w);(k=(-u-((S=S<0?-a(-S,d):a(S,d))+(A=A<0?-a(-A,d):a(A,d))))/(3*l))>=0&&k<=1&&(o[y++]=k)}else{var T=(2*p*u-3*l*g)/(2*s(p*p*p)),C=Math.acos(T)/3,j=s(p),M=Math.cos(C),k=(-u-2*j*M)/(3*l),D=(b=(-u+j*(M+c*Math.sin(C)))/(3*l),(-u+j*(M-c*Math.sin(C)))/(3*l));k>=0&&k<=1&&(o[y++]=k),b>=0&&b<=1&&(o[y++]=b),D>=0&&D<=1&&(o[y++]=D)}}return y},t.cubicExtrema=function(e,t,n,i,r){var o=6*n-12*t+6*e,a=9*t+3*i-3*e-9*n,l=3*t-3*e,u=0;if(m(a))g(o)&&(d=-l/o)>=0&&d<=1&&(r[u++]=d);else{var c=o*o-4*a*l;if(m(c))r[0]=-o/(2*a);else if(c>0){var d,h=s(c),f=(-o-h)/(2*a);(d=(-o+h)/(2*a))>=0&&d<=1&&(r[u++]=d),f>=0&&f<=1&&(r[u++]=f)}}return u},t.cubicSubdivide=function(e,t,n,i,r,o){var a=(t-e)*r+e,s=(n-t)*r+t,l=(i-n)*r+n,u=(s-a)*r+a,c=(l-s)*r+s,d=(c-u)*r+u;o[0]=e,o[1]=a,o[2]=u,o[3]=d,o[4]=d,o[5]=c,o[6]=l,o[7]=i},t.cubicProjectPoint=function(e,t,n,i,r,a,l,c,d,m,g){var y,_,x,b,w,S=.005,A=1/0;h[0]=d,h[1]=m;for(var T=0;T<1;T+=.05)f[0]=v(e,n,r,l,T),f[1]=v(t,i,a,c,T),(b=o(h,f))<A&&(y=T,A=b);A=1/0;for(var C=0;C<32&&!(S<u);C++)_=y-S,x=y+S,f[0]=v(e,n,r,l,_),f[1]=v(t,i,a,c,_),b=o(f,h),_>=0&&b<A?(y=_,A=b):(p[0]=v(e,n,r,l,x),p[1]=v(t,i,a,c,x),w=o(p,h),x<=1&&w<A?(y=x,A=w):S*=.5);return g&&(g[0]=v(e,n,r,l,y),g[1]=v(t,i,a,c,y)),s(A)},t.quadraticAt=y,t.quadraticDerivativeAt=function(e,t,n,i){return 2*((1-i)*(t-e)+i*(n-t))},t.quadraticRootAt=function(e,t,n,i,r){var o=e-2*t+n,a=2*(t-e),l=e-i,u=0;if(m(o))g(a)&&(d=-l/a)>=0&&d<=1&&(r[u++]=d);else{var c=a*a-4*o*l;if(m(c))(d=-a/(2*o))>=0&&d<=1&&(r[u++]=d);else if(c>0){var d,h=s(c),f=(-a-h)/(2*o);(d=(-a+h)/(2*o))>=0&&d<=1&&(r[u++]=d),f>=0&&f<=1&&(r[u++]=f)}}return u},t.quadraticExtremum=function(e,t,n){var i=e+n-2*t;return 0===i?.5:(e-t)/i},t.quadraticSubdivide=function(e,t,n,i,r){var o=(t-e)*i+e,a=(n-t)*i+t,s=(a-o)*i+o;r[0]=e,r[1]=o,r[2]=s,r[3]=s,r[4]=a,r[5]=n},t.quadraticProjectPoint=function(e,t,n,i,r,a,l,c,d){var m,g=.005,v=1/0;h[0]=l,h[1]=c;for(var _=0;_<1;_+=.05)f[0]=y(e,n,r,_),f[1]=y(t,i,a,_),(S=o(h,f))<v&&(m=_,v=S);v=1/0;for(var x=0;x<32&&!(g<u);x++){var b=m-g,w=m+g;f[0]=y(e,n,r,b),f[1]=y(t,i,a,b);var S=o(f,h);if(b>=0&&S<v)m=b,v=S;else{p[0]=y(e,n,r,w),p[1]=y(t,i,a,w);var A=o(p,h);w<=1&&A<v?(m=w,v=A):g*=.5}}return d&&(d[0]=y(e,n,r,m),d[1]=y(t,i,a,m)),s(v)}},"./node_modules/zrender/lib/core/env.js":function(e,t){var n="object"==typeof wx&&"function"==typeof wx.getSystemInfoSync?{browser:{},os:{},node:!1,wxa:!0,canvasSupported:!0,svgSupported:!1,touchEventsSupported:!0}:"undefined"==typeof document&&"undefined"!=typeof self?{browser:{},os:{},node:!1,worker:!0,canvasSupported:!0}:"undefined"==typeof navigator?{browser:{},os:{},node:!0,worker:!1,canvasSupported:!0,svgSupported:!0}:function(e){var t={},n=e.match(/Firefox\/([\d.]+)/),i=e.match(/MSIE\s([\d.]+)/)||e.match(/Trident\/.+?rv:(([\d.]+))/),r=e.match(/Edge\/([\d.]+)/),o=/micromessenger/i.test(e);n&&(t.firefox=!0,t.version=n[1]);i&&(t.ie=!0,t.version=i[1]);r&&(t.edge=!0,t.version=r[1]);o&&(t.weChat=!0);return{browser:t,os:{},node:!1,canvasSupported:!!document.createElement("canvas").getContext,svgSupported:"undefined"!=typeof SVGRect,touchEventsSupported:"ontouchstart"in window&&!t.ie&&!t.edge,pointerEventsSupported:"onpointerdown"in window&&(t.edge||t.ie&&t.version>=11)}}(navigator.userAgent);e.exports=n},"./node_modules/zrender/lib/core/event.js":function(e,t,n){var i=n("./node_modules/zrender/lib/mixin/Eventful.js");t.Dispatcher=i;var r=n("./node_modules/zrender/lib/core/env.js"),o="undefined"!=typeof window&&!!window.addEventListener,a=/^(?:mouse|pointer|contextmenu|drag|drop)|click/;function s(e,t,n,i){return n=n||{},i||!r.canvasSupported?l(e,t,n):r.browser.firefox&&null!=t.layerX&&t.layerX!==t.offsetX?(n.zrX=t.layerX,n.zrY=t.layerY):null!=t.offsetX?(n.zrX=t.offsetX,n.zrY=t.offsetY):l(e,t,n),n}function l(e,t,n){var i=function(e){return e.getBoundingClientRect?e.getBoundingClientRect():{left:0,top:0}}(e);n.zrX=t.clientX-i.left,n.zrY=t.clientY-i.top}var u=o?function(e){e.preventDefault(),e.stopPropagation(),e.cancelBubble=!0}:function(e){e.returnValue=!1,e.cancelBubble=!0};t.clientToLocal=s,t.normalizeEvent=function(e,t,n){if(null!=(t=t||window.event).zrX)return t;var i=t.type;if(i&&i.indexOf("touch")>=0){var r="touchend"!=i?t.targetTouches[0]:t.changedTouches[0];r&&s(e,r,t,n)}else s(e,t,t,n),t.zrDelta=t.wheelDelta?t.wheelDelta/120:-(t.detail||0)/3;var o=t.button;return null==t.which&&void 0!==o&&a.test(t.type)&&(t.which=1&o?1:2&o?3:4&o?2:0),t},t.addEventListener=function(e,t,n){o?e.addEventListener(t,n):e.attachEvent("on"+t,n)},t.removeEventListener=function(e,t,n){o?e.removeEventListener(t,n):e.detachEvent("on"+t,n)},t.stop=u,t.notLeftMouse=function(e){return e.which>1}},"./node_modules/zrender/lib/core/guid.js":function(e,t){var n=2311;e.exports=function(){return n++}},"./node_modules/zrender/lib/core/log.js":function(e,t,n){var i=n("./node_modules/zrender/lib/config.js").debugMode,r=function(){};1===i?r=function(){for(var e in arguments)throw new Error(arguments[e])}:i>1&&(r=function(){for(var e in arguments)console.log(arguments[e])});var o=r;e.exports=o},"./node_modules/zrender/lib/core/matrix.js":function(e,t){var n="undefined"==typeof Float32Array?Array:Float32Array;function i(){var e=new n(6);return r(e),e}function r(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e}function o(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}t.create=i,t.identity=r,t.copy=o,t.mul=function(e,t,n){var i=t[0]*n[0]+t[2]*n[1],r=t[1]*n[0]+t[3]*n[1],o=t[0]*n[2]+t[2]*n[3],a=t[1]*n[2]+t[3]*n[3],s=t[0]*n[4]+t[2]*n[5]+t[4],l=t[1]*n[4]+t[3]*n[5]+t[5];return e[0]=i,e[1]=r,e[2]=o,e[3]=a,e[4]=s,e[5]=l,e},t.translate=function(e,t,n){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4]+n[0],e[5]=t[5]+n[1],e},t.rotate=function(e,t,n){var i=t[0],r=t[2],o=t[4],a=t[1],s=t[3],l=t[5],u=Math.sin(n),c=Math.cos(n);return e[0]=i*c+a*u,e[1]=-i*u+a*c,e[2]=r*c+s*u,e[3]=-r*u+c*s,e[4]=c*o+u*l,e[5]=c*l-u*o,e},t.scale=function(e,t,n){var i=n[0],r=n[1];return e[0]=t[0]*i,e[1]=t[1]*r,e[2]=t[2]*i,e[3]=t[3]*r,e[4]=t[4]*i,e[5]=t[5]*r,e},t.invert=function(e,t){var n=t[0],i=t[2],r=t[4],o=t[1],a=t[3],s=t[5],l=n*a-o*i;return l?(l=1/l,e[0]=a*l,e[1]=-o*l,e[2]=-i*l,e[3]=n*l,e[4]=(i*s-a*r)*l,e[5]=(o*r-n*s)*l,e):null},t.clone=function(e){var t=i();return o(t,e),t}},"./node_modules/zrender/lib/core/timsort.js":function(e,t){var n=32,i=7;function r(e,t,n,i){var r=t+1;if(r===n)return 1;if(i(e[r++],e[t])<0){for(;r<n&&i(e[r],e[r-1])<0;)r++;!function(e,t,n){n--;for(;t<n;){var i=e[t];e[t++]=e[n],e[n--]=i}}(e,t,r)}else for(;r<n&&i(e[r],e[r-1])>=0;)r++;return r-t}function o(e,t,n,i,r){for(i===t&&i++;i<n;i++){for(var o,a=e[i],s=t,l=i;s<l;)r(a,e[o=s+l>>>1])<0?l=o:s=o+1;var u=i-s;switch(u){case 3:e[s+3]=e[s+2];case 2:e[s+2]=e[s+1];case 1:e[s+1]=e[s];break;default:for(;u>0;)e[s+u]=e[s+u-1],u--}e[s]=a}}function a(e,t,n,i,r,o){var a=0,s=0,l=1;if(o(e,t[n+r])>0){for(s=i-r;l<s&&o(e,t[n+r+l])>0;)a=l,(l=1+(l<<1))<=0&&(l=s);l>s&&(l=s),a+=r,l+=r}else{for(s=r+1;l<s&&o(e,t[n+r-l])<=0;)a=l,(l=1+(l<<1))<=0&&(l=s);l>s&&(l=s);var u=a;a=r-l,l=r-u}for(a++;a<l;){var c=a+(l-a>>>1);o(e,t[n+c])>0?a=c+1:l=c}return l}function s(e,t,n,i,r,o){var a=0,s=0,l=1;if(o(e,t[n+r])<0){for(s=r+1;l<s&&o(e,t[n+r-l])<0;)a=l,(l=1+(l<<1))<=0&&(l=s);l>s&&(l=s);var u=a;a=r-l,l=r-u}else{for(s=i-r;l<s&&o(e,t[n+r+l])>=0;)a=l,(l=1+(l<<1))<=0&&(l=s);l>s&&(l=s),a+=r,l+=r}for(a++;a<l;){var c=a+(l-a>>>1);o(e,t[n+c])<0?l=c:a=c+1}return l}function l(e,t){var n,r,o,l=i,u=0;n=e.length;var c=[];function d(n){var d=r[n],h=o[n],f=r[n+1],p=o[n+1];o[n]=h+p,n===u-3&&(r[n+1]=r[n+2],o[n+1]=o[n+2]),u--;var m=s(e[f],e,d,h,0,t);d+=m,0!==(h-=m)&&0!==(p=a(e[d+h-1],e,f,p,p-1,t))&&(h<=p?function(n,r,o,u){var d=0;for(d=0;d<r;d++)c[d]=e[n+d];var h=0,f=o,p=n;if(e[p++]=e[f++],0==--u){for(d=0;d<r;d++)e[p+d]=c[h+d];return}if(1===r){for(d=0;d<u;d++)e[p+d]=e[f+d];return void(e[p+u]=c[h])}var m,g,v,y=l;for(;;){m=0,g=0,v=!1;do{if(t(e[f],c[h])<0){if(e[p++]=e[f++],g++,m=0,0==--u){v=!0;break}}else if(e[p++]=c[h++],m++,g=0,1==--r){v=!0;break}}while((m|g)<y);if(v)break;do{if(0!==(m=s(e[f],c,h,r,0,t))){for(d=0;d<m;d++)e[p+d]=c[h+d];if(p+=m,h+=m,(r-=m)<=1){v=!0;break}}if(e[p++]=e[f++],0==--u){v=!0;break}if(0!==(g=a(c[h],e,f,u,0,t))){for(d=0;d<g;d++)e[p+d]=e[f+d];if(p+=g,f+=g,0===(u-=g)){v=!0;break}}if(e[p++]=c[h++],1==--r){v=!0;break}y--}while(m>=i||g>=i);if(v)break;y<0&&(y=0),y+=2}if((l=y)<1&&(l=1),1===r){for(d=0;d<u;d++)e[p+d]=e[f+d];e[p+u]=c[h]}else{if(0===r)throw new Error;for(d=0;d<r;d++)e[p+d]=c[h+d]}}(d,h,f,p):function(n,r,o,u){var d=0;for(d=0;d<u;d++)c[d]=e[o+d];var h=n+r-1,f=u-1,p=o+u-1,m=0,g=0;if(e[p--]=e[h--],0==--r){for(m=p-(u-1),d=0;d<u;d++)e[m+d]=c[d];return}if(1===u){for(g=(p-=r)+1,m=(h-=r)+1,d=r-1;d>=0;d--)e[g+d]=e[m+d];return void(e[p]=c[f])}var v=l;for(;;){var y=0,_=0,x=!1;do{if(t(c[f],e[h])<0){if(e[p--]=e[h--],y++,_=0,0==--r){x=!0;break}}else if(e[p--]=c[f--],_++,y=0,1==--u){x=!0;break}}while((y|_)<v);if(x)break;do{if(0!==(y=r-s(c[f],e,n,r,r-1,t))){for(r-=y,g=(p-=y)+1,m=(h-=y)+1,d=y-1;d>=0;d--)e[g+d]=e[m+d];if(0===r){x=!0;break}}if(e[p--]=c[f--],1==--u){x=!0;break}if(0!==(_=u-a(e[h],c,0,u,u-1,t))){for(u-=_,g=(p-=_)+1,m=(f-=_)+1,d=0;d<_;d++)e[g+d]=c[m+d];if(u<=1){x=!0;break}}if(e[p--]=e[h--],0==--r){x=!0;break}v--}while(y>=i||_>=i);if(x)break;v<0&&(v=0),v+=2}(l=v)<1&&(l=1);if(1===u){for(g=(p-=r)+1,m=(h-=r)+1,d=r-1;d>=0;d--)e[g+d]=e[m+d];e[p]=c[f]}else{if(0===u)throw new Error;for(m=p-(u-1),d=0;d<u;d++)e[m+d]=c[d]}}(d,h,f,p))}r=[],o=[],this.mergeRuns=function(){for(;u>1;){var e=u-2;if(e>=1&&o[e-1]<=o[e]+o[e+1]||e>=2&&o[e-2]<=o[e]+o[e-1])o[e-1]<o[e+1]&&e--;else if(o[e]>o[e+1])break;d(e)}},this.forceMergeRuns=function(){for(;u>1;){var e=u-2;e>0&&o[e-1]<o[e+1]&&e--,d(e)}},this.pushRun=function(e,t){r[u]=e,o[u]=t,u+=1}}e.exports=function(e,t,i,a){i||(i=0),a||(a=e.length);var s=a-i;if(!(s<2)){var u=0;if(s<n)o(e,i,a,i+(u=r(e,i,a,t)),t);else{var c=new l(e,t),d=function(e){for(var t=0;e>=n;)t|=1&e,e>>=1;return e+t}(s);do{if((u=r(e,i,a,t))<d){var h=s;h>d&&(h=d),o(e,i,i+h,i+u,t),u=h}c.pushRun(i,u),c.mergeRuns(),s-=u,i+=u}while(0!==s);c.forceMergeRuns()}}}},"./node_modules/zrender/lib/core/util.js":function(e,t){var n={"[object Function]":1,"[object RegExp]":1,"[object Date]":1,"[object Error]":1,"[object CanvasGradient]":1,"[object CanvasPattern]":1,"[object Image]":1,"[object Canvas]":1},i={"[object Int8Array]":1,"[object Uint8Array]":1,"[object Uint8ClampedArray]":1,"[object Int16Array]":1,"[object Uint16Array]":1,"[object Int32Array]":1,"[object Uint32Array]":1,"[object Float32Array]":1,"[object Float64Array]":1},r=Object.prototype.toString,o=Array.prototype,a=o.forEach,s=o.filter,l=o.slice,u=o.map,c=o.reduce,d={};function h(e){if(null==e||"object"!=typeof e)return e;var t=e,o=r.call(e);if("[object Array]"===o){if(!A(e)){t=[];for(var a=0,s=e.length;a<s;a++)t[a]=h(e[a])}}else if(i[o]){if(!A(e)){var l=e.constructor;if(e.constructor.from)t=l.from(e);else{t=new l(e.length);for(a=0,s=e.length;a<s;a++)t[a]=h(e[a])}}}else if(!n[o]&&!A(e)&&!w(e))for(var u in t={},e)e.hasOwnProperty(u)&&(t[u]=h(e[u]));return t}function f(e,t,n){if(!x(t)||!x(e))return n?h(t):e;for(var i in t)if(t.hasOwnProperty(i)){var r=e[i],o=t[i];!x(o)||!x(r)||_(o)||_(r)||w(o)||w(r)||b(o)||b(r)||A(o)||A(r)?!n&&i in e||(e[i]=h(t[i])):f(r,o,n)}return e}function p(e,t,n){for(var i in t)t.hasOwnProperty(i)&&(n?null!=t[i]:null==e[i])&&(e[i]=t[i]);return e}var m,g=function(){return d.createCanvas()};function v(e,t,n){if(e&&t)if(e.forEach&&e.forEach===a)e.forEach(t,n);else if(e.length===+e.length)for(var i=0,r=e.length;i<r;i++)t.call(n,e[i],i,e);else for(var o in e)e.hasOwnProperty(o)&&t.call(n,e[o],o,e)}function y(e,t){var n=l.call(arguments,2);return function(){return e.apply(t,n.concat(l.call(arguments)))}}function _(e){return"[object Array]"===r.call(e)}function x(e){var t=typeof e;return"function"===t||!!e&&"object"==t}function b(e){return!!n[r.call(e)]}function w(e){return"object"==typeof e&&"number"==typeof e.nodeType&&"object"==typeof e.ownerDocument}d.createCanvas=function(){return document.createElement("canvas")};var S="__ec_primitive__";function A(e){return e[S]}function T(e){var t=_(e),n=this;function i(e,i){t?n.set(e,i):n.set(i,e)}e instanceof T?e.each(i):e&&v(e,i)}T.prototype={constructor:T,get:function(e){return this.hasOwnProperty(e)?this[e]:null},set:function(e,t){return this[e]=t},each:function(e,t){for(var n in void 0!==t&&(e=y(e,t)),this)this.hasOwnProperty(n)&&e(this[n],n)},removeKey:function(e){delete this[e]}},t.$override=function(e,t){"createCanvas"===e&&(m=null),d[e]=t},t.clone=h,t.merge=f,t.mergeAll=function(e,t){for(var n=e[0],i=1,r=e.length;i<r;i++)n=f(n,e[i],t);return n},t.extend=function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e},t.defaults=p,t.createCanvas=g,t.getContext=function(){return m||(m=g().getContext("2d")),m},t.indexOf=function(e,t){if(e){if(e.indexOf)return e.indexOf(t);for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n}return-1},t.inherits=function(e,t){var n=e.prototype;function i(){}for(var r in i.prototype=t.prototype,e.prototype=new i,n)e.prototype[r]=n[r];e.prototype.constructor=e,e.superClass=t},t.mixin=function(e,t,n){p(e="prototype"in e?e.prototype:e,t="prototype"in t?t.prototype:t,n)},t.isArrayLike=function(e){if(e)return"string"!=typeof e&&"number"==typeof e.length},t.each=v,t.map=function(e,t,n){if(e&&t){if(e.map&&e.map===u)return e.map(t,n);for(var i=[],r=0,o=e.length;r<o;r++)i.push(t.call(n,e[r],r,e));return i}},t.reduce=function(e,t,n,i){if(e&&t){if(e.reduce&&e.reduce===c)return e.reduce(t,n,i);for(var r=0,o=e.length;r<o;r++)n=t.call(i,n,e[r],r,e);return n}},t.filter=function(e,t,n){if(e&&t){if(e.filter&&e.filter===s)return e.filter(t,n);for(var i=[],r=0,o=e.length;r<o;r++)t.call(n,e[r],r,e)&&i.push(e[r]);return i}},t.find=function(e,t,n){if(e&&t)for(var i=0,r=e.length;i<r;i++)if(t.call(n,e[i],i,e))return e[i]},t.bind=y,t.curry=function(e){var t=l.call(arguments,1);return function(){return e.apply(this,t.concat(l.call(arguments)))}},t.isArray=_,t.isFunction=function(e){return"function"==typeof e},t.isString=function(e){return"[object String]"===r.call(e)},t.isObject=x,t.isBuiltInObject=b,t.isTypedArray=function(e){return!!i[r.call(e)]},t.isDom=w,t.eqNaN=function(e){return e!=e},t.retrieve=function(e){for(var t=0,n=arguments.length;t<n;t++)if(null!=arguments[t])return arguments[t]},t.retrieve2=function(e,t){return null!=e?e:t},t.retrieve3=function(e,t,n){return null!=e?e:null!=t?t:n},t.slice=function(){return Function.call.apply(l,arguments)},t.normalizeCssArray=function(e){if("number"==typeof e)return[e,e,e,e];var t=e.length;return 2===t?[e[0],e[1],e[0],e[1]]:3===t?[e[0],e[1],e[2],e[1]]:e},t.assert=function(e,t){if(!e)throw new Error(t)},t.trim=function(e){return null==e?null:"function"==typeof e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")},t.setAsPrimitive=function(e){e[S]=!0},t.isPrimitive=A,t.createHashMap=function(e){return new T(e)},t.concatArray=function(e,t){for(var n=new e.constructor(e.length+t.length),i=0;i<e.length;i++)n[i]=e[i];var r=e.length;for(i=0;i<t.length;i++)n[i+r]=t[i];return n},t.noop=function(){}},"./node_modules/zrender/lib/core/vector.js":function(e,t){var n="undefined"==typeof Float32Array?Array:Float32Array;function i(e){return Math.sqrt(o(e))}var r=i;function o(e){return e[0]*e[0]+e[1]*e[1]}var a=o;function s(e,t){return Math.sqrt((e[0]-t[0])*(e[0]-t[0])+(e[1]-t[1])*(e[1]-t[1]))}var l=s;function u(e,t){return(e[0]-t[0])*(e[0]-t[0])+(e[1]-t[1])*(e[1]-t[1])}var c=u;t.create=function(e,t){var i=new n(2);return null==e&&(e=0),null==t&&(t=0),i[0]=e,i[1]=t,i},t.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e},t.clone=function(e){var t=new n(2);return t[0]=e[0],t[1]=e[1],t},t.set=function(e,t,n){return e[0]=t,e[1]=n,e},t.add=function(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e},t.scaleAndAdd=function(e,t,n,i){return e[0]=t[0]+n[0]*i,e[1]=t[1]+n[1]*i,e},t.sub=function(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e},t.len=i,t.length=r,t.lenSquare=o,t.lengthSquare=a,t.mul=function(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e},t.div=function(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e},t.dot=function(e,t){return e[0]*t[0]+e[1]*t[1]},t.scale=function(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e},t.normalize=function(e,t){var n=i(t);return 0===n?(e[0]=0,e[1]=0):(e[0]=t[0]/n,e[1]=t[1]/n),e},t.distance=s,t.dist=l,t.distanceSquare=u,t.distSquare=c,t.negate=function(e,t){return e[0]=-t[0],e[1]=-t[1],e},t.lerp=function(e,t,n,i){return e[0]=t[0]+i*(n[0]-t[0]),e[1]=t[1]+i*(n[1]-t[1]),e},t.applyTransform=function(e,t,n){var i=t[0],r=t[1];return e[0]=n[0]*i+n[2]*r+n[4],e[1]=n[1]*i+n[3]*r+n[5],e},t.min=function(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e},t.max=function(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e}},"./node_modules/zrender/lib/dom/HandlerProxy.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/event.js"),r=i.addEventListener,o=i.removeEventListener,a=i.normalizeEvent,s=n("./node_modules/zrender/lib/core/util.js"),l=n("./node_modules/zrender/lib/mixin/Eventful.js"),u=n("./node_modules/zrender/lib/core/env.js"),c=n("./node_modules/zrender/lib/core/GestureMgr.js"),d=["click","dblclick","mousewheel","mouseout","mouseup","mousedown","mousemove","contextmenu"],h=["touchstart","touchend","touchmove"],f={pointerdown:1,pointerup:1,pointermove:1,pointerout:1},p=s.map(d,function(e){var t=e.replace("mouse","pointer");return f[t]?t:e});function m(e){return"mousewheel"===e&&u.browser.firefox?"DOMMouseScroll":e}function g(e,t,n){var i=e._gestureMgr;"start"===n&&i.clear();var r=i.recognize(t,e.handler.findHover(t.zrX,t.zrY,null).target,e.dom);if("end"===n&&i.clear(),r){var o=r.type;t.gestureEvent=o,e.handler.dispatchToElement({target:r.target},o,r.event)}}function v(e){e._touching=!0,clearTimeout(e._touchTimer),e._touchTimer=setTimeout(function(){e._touching=!1},700)}var y={mousemove:function(e){e=a(this.dom,e),this.trigger("mousemove",e)},mouseout:function(e){var t=(e=a(this.dom,e)).toElement||e.relatedTarget;if(t!=this.dom)for(;t&&9!=t.nodeType;){if(t===this.dom)return;t=t.parentNode}this.trigger("mouseout",e)},touchstart:function(e){(e=a(this.dom,e)).zrByTouch=!0,this._lastTouchMoment=new Date,g(this,e,"start"),y.mousemove.call(this,e),y.mousedown.call(this,e),v(this)},touchmove:function(e){(e=a(this.dom,e)).zrByTouch=!0,g(this,e,"change"),y.mousemove.call(this,e),v(this)},touchend:function(e){(e=a(this.dom,e)).zrByTouch=!0,g(this,e,"end"),y.mouseup.call(this,e),+new Date-this._lastTouchMoment<300&&y.click.call(this,e),v(this)},pointerdown:function(e){y.mousedown.call(this,e)},pointermove:function(e){_(e)||y.mousemove.call(this,e)},pointerup:function(e){y.mouseup.call(this,e)},pointerout:function(e){_(e)||y.mouseout.call(this,e)}};function _(e){var t=e.pointerType;return"pen"===t||"touch"===t}function x(e){function t(t,n){s.each(t,function(t){r(e,m(t),n._handlers[t])},n)}l.call(this),this.dom=e,this._touching=!1,this._touchTimer,this._gestureMgr=new c,this._handlers={},function(e){s.each(h,function(t){e._handlers[t]=s.bind(y[t],e)}),s.each(p,function(t){e._handlers[t]=s.bind(y[t],e)}),s.each(d,function(t){e._handlers[t]=function(e,t){return function(){if(!t._touching)return e.apply(t,arguments)}}(y[t],e)})}(this),u.pointerEventsSupported?t(p,this):(u.touchEventsSupported&&t(h,this),t(d,this))}s.each(["click","mousedown","mouseup","mousewheel","dblclick","contextmenu"],function(e){y[e]=function(t){t=a(this.dom,t),this.trigger(e,t)}});var b=x.prototype;b.dispose=function(){for(var e=d.concat(h),t=0;t<e.length;t++){var n=e[t];o(this.dom,m(n),this._handlers[n])}},b.setCursor=function(e){this.dom.style&&(this.dom.style.cursor=e||"default")},s.mixin(x,l);var w=x;e.exports=w},"./node_modules/zrender/lib/graphic/CompoundPath.js":function(e,t,n){var i=n("./node_modules/zrender/lib/graphic/Path.js"),r=i.extend({type:"compound",shape:{paths:null},_updatePathDirty:function(){for(var e=this.__dirtyPath,t=this.shape.paths,n=0;n<t.length;n++)e=e||t[n].__dirtyPath;this.__dirtyPath=e,this.__dirty=this.__dirty||e},beforeBrush:function(){this._updatePathDirty();for(var e=this.shape.paths||[],t=this.getGlobalScale(),n=0;n<e.length;n++)e[n].path||e[n].createPathProxy(),e[n].path.setScale(t[0],t[1])},buildPath:function(e,t){for(var n=t.paths||[],i=0;i<n.length;i++)n[i].buildPath(e,n[i].shape,!0)},afterBrush:function(){for(var e=this.shape.paths||[],t=0;t<e.length;t++)e[t].__dirtyPath=!1},getBoundingRect:function(){return this._updatePathDirty(),i.prototype.getBoundingRect.call(this)}});e.exports=r},"./node_modules/zrender/lib/graphic/Displayable.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/zrender/lib/graphic/Style.js"),o=n("./node_modules/zrender/lib/Element.js"),a=n("./node_modules/zrender/lib/graphic/mixin/RectText.js");function s(e){for(var t in e=e||{},o.call(this,e),e)e.hasOwnProperty(t)&&"style"!==t&&(this[t]=e[t]);this.style=new r(e.style,this),this._rect=null,this.__clipPaths=[]}s.prototype={constructor:s,type:"displayable",__dirty:!0,invisible:!1,z:0,z2:0,zlevel:0,draggable:!1,dragging:!1,silent:!1,culling:!1,cursor:"pointer",rectHover:!1,progressive:!1,incremental:!1,inplace:!1,beforeBrush:function(e){},afterBrush:function(e){},brush:function(e,t){},getBoundingRect:function(){},contain:function(e,t){return this.rectContain(e,t)},traverse:function(e,t){e.call(t,this)},rectContain:function(e,t){var n=this.transformCoordToLocal(e,t);return this.getBoundingRect().contain(n[0],n[1])},dirty:function(){this.__dirty=!0,this._rect=null,this.__zr&&this.__zr.refresh()},animateStyle:function(e){return this.animate("style",e)},attrKV:function(e,t){"style"!==e?o.prototype.attrKV.call(this,e,t):this.style.set(t)},setStyle:function(e,t){return this.style.set(e,t),this.dirty(!1),this},useStyle:function(e){return this.style=new r(e,this),this.dirty(!1),this}},i.inherits(s,o),i.mixin(s,a);var l=s;e.exports=l},"./node_modules/zrender/lib/graphic/Gradient.js":function(e,t){var n=function(e){this.colorStops=e||[]};n.prototype={constructor:n,addColorStop:function(e,t){this.colorStops.push({offset:e,color:t})}};var i=n;e.exports=i},"./node_modules/zrender/lib/graphic/Image.js":function(e,t,n){var i=n("./node_modules/zrender/lib/graphic/Displayable.js"),r=n("./node_modules/zrender/lib/core/BoundingRect.js"),o=n("./node_modules/zrender/lib/core/util.js"),a=n("./node_modules/zrender/lib/graphic/helper/image.js");function s(e){i.call(this,e)}s.prototype={constructor:s,type:"image",brush:function(e,t){var n=this.style,i=n.image;n.bind(e,this,t);var r=this._image=a.createOrUpdateImage(i,this._image,this,this.onload);if(r&&a.isImageReady(r)){var o=n.x||0,s=n.y||0,l=n.width,u=n.height,c=r.width/r.height;if(null==l&&null!=u?l=u*c:null==u&&null!=l?u=l/c:null==l&&null==u&&(l=r.width,u=r.height),this.setTransform(e),n.sWidth&&n.sHeight){var d=n.sx||0,h=n.sy||0;e.drawImage(r,d,h,n.sWidth,n.sHeight,o,s,l,u)}else if(n.sx&&n.sy){var f=l-(d=n.sx),p=u-(h=n.sy);e.drawImage(r,d,h,f,p,o,s,l,u)}else e.drawImage(r,o,s,l,u);null!=n.text&&(this.restoreTransform(e),this.drawRectText(e,this.getBoundingRect()))}},getBoundingRect:function(){var e=this.style;return this._rect||(this._rect=new r(e.x||0,e.y||0,e.width||0,e.height||0)),this._rect}},o.inherits(s,i);var l=s;e.exports=l},"./node_modules/zrender/lib/graphic/IncrementalDisplayable.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js").inherits,r=n("./node_modules/zrender/lib/graphic/Displayable.js"),o=n("./node_modules/zrender/lib/core/BoundingRect.js");function a(e){r.call(this,e),this._displayables=[],this._temporaryDisplayables=[],this._cursor=0,this.notClear=!0}a.prototype.incremental=!0,a.prototype.clearDisplaybles=function(){this._displayables=[],this._temporaryDisplayables=[],this._cursor=0,this.dirty(),this.notClear=!1},a.prototype.addDisplayable=function(e,t){t?this._temporaryDisplayables.push(e):this._displayables.push(e),this.dirty()},a.prototype.addDisplayables=function(e,t){t=t||!1;for(var n=0;n<e.length;n++)this.addDisplayable(e[n],t)},a.prototype.eachPendingDisplayable=function(e){for(var t=this._cursor;t<this._displayables.length;t++)e&&e(this._displayables[t]);for(t=0;t<this._temporaryDisplayables.length;t++)e&&e(this._temporaryDisplayables[t])},a.prototype.update=function(){this.updateTransform();for(var e=this._cursor;e<this._displayables.length;e++){(t=this._displayables[e]).parent=this,t.update(),t.parent=null}for(e=0;e<this._temporaryDisplayables.length;e++){var t;(t=this._temporaryDisplayables[e]).parent=this,t.update(),t.parent=null}},a.prototype.brush=function(e,t){for(var n=this._cursor;n<this._displayables.length;n++){(i=this._displayables[n]).beforeBrush&&i.beforeBrush(e),i.brush(e,n===this._cursor?null:this._displayables[n-1]),i.afterBrush&&i.afterBrush(e)}this._cursor=n;for(n=0;n<this._temporaryDisplayables.length;n++){var i;(i=this._temporaryDisplayables[n]).beforeBrush&&i.beforeBrush(e),i.brush(e,0===n?null:this._temporaryDisplayables[n-1]),i.afterBrush&&i.afterBrush(e)}this._temporaryDisplayables=[],this.notClear=!0};var s=[];a.prototype.getBoundingRect=function(){if(!this._rect){for(var e=new o(1/0,1/0,-1/0,-1/0),t=0;t<this._displayables.length;t++){var n=this._displayables[t],i=n.getBoundingRect().clone();n.needLocalTransform()&&i.applyTransform(n.getLocalTransform(s)),e.union(i)}this._rect=e}return this._rect},a.prototype.contain=function(e,t){var n=this.transformCoordToLocal(e,t);if(this.getBoundingRect().contain(n[0],n[1]))for(var i=0;i<this._displayables.length;i++){if(this._displayables[i].contain(e,t))return!0}return!1},i(a,r);var l=a;e.exports=l},"./node_modules/zrender/lib/graphic/LinearGradient.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/zrender/lib/graphic/Gradient.js"),o=function(e,t,n,i,o,a){this.x=null==e?0:e,this.y=null==t?0:t,this.x2=null==n?1:n,this.y2=null==i?0:i,this.type="linear",this.global=a||!1,r.call(this,o)};o.prototype={constructor:o},i.inherits(o,r);var a=o;e.exports=a},"./node_modules/zrender/lib/graphic/Path.js":function(e,t,n){var i=n("./node_modules/zrender/lib/graphic/Displayable.js"),r=n("./node_modules/zrender/lib/core/util.js"),o=n("./node_modules/zrender/lib/core/PathProxy.js"),a=n("./node_modules/zrender/lib/contain/path.js"),s=n("./node_modules/zrender/lib/graphic/Pattern.js").prototype.getCanvasPattern,l=Math.abs,u=new o(!0);function c(e){i.call(this,e),this.path=null}c.prototype={constructor:c,type:"path",__dirtyPath:!0,strokeContainThreshold:5,brush:function(e,t){var n,i=this.style,r=this.path||u,o=i.hasStroke(),a=i.hasFill(),l=i.fill,c=i.stroke,d=a&&!!l.colorStops,h=o&&!!c.colorStops,f=a&&!!l.image,p=o&&!!c.image;(i.bind(e,this,t),this.setTransform(e),this.__dirty)&&(d&&(n=n||this.getBoundingRect(),this._fillGradient=i.getGradient(e,l,n)),h&&(n=n||this.getBoundingRect(),this._strokeGradient=i.getGradient(e,c,n)));d?e.fillStyle=this._fillGradient:f&&(e.fillStyle=s.call(l,e)),h?e.strokeStyle=this._strokeGradient:p&&(e.strokeStyle=s.call(c,e));var m=i.lineDash,g=i.lineDashOffset,v=!!e.setLineDash,y=this.getGlobalScale();r.setScale(y[0],y[1]),this.__dirtyPath||m&&!v&&o?(r.beginPath(e),m&&!v&&(r.setLineDash(m),r.setLineDashOffset(g)),this.buildPath(r,this.shape,!1),this.path&&(this.__dirtyPath=!1)):(e.beginPath(),this.path.rebuildPath(e)),a&&r.fill(e),m&&v&&(e.setLineDash(m),e.lineDashOffset=g),o&&r.stroke(e),m&&v&&e.setLineDash([]),null!=i.text&&(this.restoreTransform(e),this.drawRectText(e,this.getBoundingRect()))},buildPath:function(e,t,n){},createPathProxy:function(){this.path=new o},getBoundingRect:function(){var e=this._rect,t=this.style,n=!e;if(n){var i=this.path;i||(i=this.path=new o),this.__dirtyPath&&(i.beginPath(),this.buildPath(i,this.shape,!1)),e=i.getBoundingRect()}if(this._rect=e,t.hasStroke()){var r=this._rectWithStroke||(this._rectWithStroke=e.clone());if(this.__dirty||n){r.copy(e);var a=t.lineWidth,s=t.strokeNoScale?this.getLineScale():1;t.hasFill()||(a=Math.max(a,this.strokeContainThreshold||4)),s>1e-10&&(r.width+=a/s,r.height+=a/s,r.x-=a/s/2,r.y-=a/s/2)}return r}return e},contain:function(e,t){var n=this.transformCoordToLocal(e,t),i=this.getBoundingRect(),r=this.style;if(e=n[0],t=n[1],i.contain(e,t)){var o=this.path.data;if(r.hasStroke()){var s=r.lineWidth,l=r.strokeNoScale?this.getLineScale():1;if(l>1e-10&&(r.hasFill()||(s=Math.max(s,this.strokeContainThreshold)),a.containStroke(o,s/l,e,t)))return!0}if(r.hasFill())return a.contain(o,e,t)}return!1},dirty:function(e){null==e&&(e=!0),e&&(this.__dirtyPath=e,this._rect=null),this.__dirty=!0,this.__zr&&this.__zr.refresh(),this.__clipTarget&&this.__clipTarget.dirty()},animateShape:function(e){return this.animate("shape",e)},attrKV:function(e,t){"shape"===e?(this.setShape(t),this.__dirtyPath=!0,this._rect=null):i.prototype.attrKV.call(this,e,t)},setShape:function(e,t){var n=this.shape;if(n){if(r.isObject(e))for(var i in e)e.hasOwnProperty(i)&&(n[i]=e[i]);else n[e]=t;this.dirty(!0)}return this},getLineScale:function(){var e=this.transform;return e&&l(e[0]-1)>1e-10&&l(e[3]-1)>1e-10?Math.sqrt(l(e[0]*e[3]-e[2]*e[1])):1}},c.extend=function(e){var t=function(t){c.call(this,t),e.style&&this.style.extendFrom(e.style,!1);var n=e.shape;if(n){this.shape=this.shape||{};var i=this.shape;for(var r in n)!i.hasOwnProperty(r)&&n.hasOwnProperty(r)&&(i[r]=n[r])}e.init&&e.init.call(this,t)};for(var n in r.inherits(t,c),e)"style"!==n&&"shape"!==n&&(t.prototype[n]=e[n]);return t},r.inherits(c,i);var d=c;e.exports=d},"./node_modules/zrender/lib/graphic/Pattern.js":function(e,t){var n=function(e,t){this.image=e,this.repeat=t,this.type="pattern"};n.prototype.getCanvasPattern=function(e){return e.createPattern(this.image,this.repeat||"repeat")};var i=n;e.exports=i},"./node_modules/zrender/lib/graphic/RadialGradient.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=n("./node_modules/zrender/lib/graphic/Gradient.js"),o=function(e,t,n,i,o){this.x=null==e?.5:e,this.y=null==t?.5:t,this.r=null==n?.5:n,this.type="radial",this.global=o||!1,r.call(this,i)};o.prototype={constructor:o},i.inherits(o,r);var a=o;e.exports=a},"./node_modules/zrender/lib/graphic/Style.js":function(e,t,n){var i=n("./node_modules/zrender/lib/graphic/helper/fixShadow.js"),r=[["shadowBlur",0],["shadowOffsetX",0],["shadowOffsetY",0],["shadowColor","#000"],["lineCap","butt"],["lineJoin","miter"],["miterLimit",10]],o=function(e,t){this.extendFrom(e,!1),this.host=t};function a(e,t,n){var i=null==t.x?0:t.x,r=null==t.x2?1:t.x2,o=null==t.y?0:t.y,a=null==t.y2?0:t.y2;return t.global||(i=i*n.width+n.x,r=r*n.width+n.x,o=o*n.height+n.y,a=a*n.height+n.y),i=isNaN(i)?0:i,r=isNaN(r)?1:r,o=isNaN(o)?0:o,a=isNaN(a)?0:a,e.createLinearGradient(i,o,r,a)}function s(e,t,n){var i=n.width,r=n.height,o=Math.min(i,r),a=null==t.x?.5:t.x,s=null==t.y?.5:t.y,l=null==t.r?.5:t.r;return t.global||(a=a*i+n.x,s=s*r+n.y,l*=o),e.createRadialGradient(a,s,0,a,s,l)}for(var l=o.prototype={constructor:o,host:null,fill:"#000",stroke:null,opacity:1,lineDash:null,lineDashOffset:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,lineWidth:1,strokeNoScale:!1,text:null,font:null,textFont:null,fontStyle:null,fontWeight:null,fontSize:null,fontFamily:null,textTag:null,textFill:"#000",textStroke:null,textWidth:null,textHeight:null,textStrokeWidth:0,textLineHeight:null,textPosition:"inside",textRect:null,textOffset:null,textAlign:null,textVerticalAlign:null,textDistance:5,textShadowColor:"transparent",textShadowBlur:0,textShadowOffsetX:0,textShadowOffsetY:0,textBoxShadowColor:"transparent",textBoxShadowBlur:0,textBoxShadowOffsetX:0,textBoxShadowOffsetY:0,transformText:!1,textRotation:0,textOrigin:null,textBackgroundColor:null,textBorderColor:null,textBorderWidth:0,textBorderRadius:0,textPadding:null,rich:null,truncate:null,blend:null,bind:function(e,t,n){for(var o=n&&n.style,a=!o,s=0;s<r.length;s++){var l=r[s],u=l[0];(a||this[u]!==o[u])&&(e[u]=i(e,u,this[u]||l[1]))}if((a||this.fill!==o.fill)&&(e.fillStyle=this.fill),(a||this.stroke!==o.stroke)&&(e.strokeStyle=this.stroke),(a||this.opacity!==o.opacity)&&(e.globalAlpha=null==this.opacity?1:this.opacity),(a||this.blend!==o.blend)&&(e.globalCompositeOperation=this.blend||"source-over"),this.hasStroke()){var c=this.lineWidth;e.lineWidth=c/(this.strokeNoScale&&t&&t.getLineScale?t.getLineScale():1)}},hasFill:function(){var e=this.fill;return null!=e&&"none"!==e},hasStroke:function(){var e=this.stroke;return null!=e&&"none"!==e&&this.lineWidth>0},extendFrom:function(e,t){if(e)for(var n in e)!e.hasOwnProperty(n)||!0!==t&&(!1===t?this.hasOwnProperty(n):null==e[n])||(this[n]=e[n])},set:function(e,t){"string"==typeof e?this[e]=t:this.extendFrom(e,!0)},clone:function(){var e=new this.constructor;return e.extendFrom(this,!0),e},getGradient:function(e,t,n){for(var i=("radial"===t.type?s:a)(e,t,n),r=t.colorStops,o=0;o<r.length;o++)i.addColorStop(r[o].offset,r[o].color);return i}},u=0;u<r.length;u++){var c=r[u];c[0]in l||(l[c[0]]=c[1])}o.getGradient=l.getGradient;var d=o;e.exports=d},"./node_modules/zrender/lib/graphic/Text.js":function(e,t,n){var i=n("./node_modules/zrender/lib/graphic/Displayable.js"),r=n("./node_modules/zrender/lib/core/util.js"),o=n("./node_modules/zrender/lib/contain/text.js"),a=n("./node_modules/zrender/lib/graphic/helper/text.js"),s=function(e){i.call(this,e)};s.prototype={constructor:s,type:"text",brush:function(e,t){var n=this.style;this.__dirty&&a.normalizeTextStyle(n,!0),n.fill=n.stroke=n.shadowBlur=n.shadowColor=n.shadowOffsetX=n.shadowOffsetY=null;var i=n.text;null!=i&&(i+=""),n.bind(e,this,t),a.needDrawText(i,n)&&(this.setTransform(e),a.renderText(this,e,i,n),this.restoreTransform(e))},getBoundingRect:function(){var e=this.style;if(this.__dirty&&a.normalizeTextStyle(e,!0),!this._rect){var t=e.text;null!=t?t+="":t="";var n=o.getBoundingRect(e.text+"",e.font,e.textAlign,e.textVerticalAlign,e.textPadding,e.rich);if(n.x+=e.x||0,n.y+=e.y||0,a.getStroke(e.textStroke,e.textStrokeWidth)){var i=e.textStrokeWidth;n.x-=i/2,n.y-=i/2,n.width+=i,n.height+=i}this._rect=n}return this._rect}},r.inherits(s,i);var l=s;e.exports=l},"./node_modules/zrender/lib/graphic/helper/fixClipWithShadow.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/env.js"),r=[["shadowBlur",0],["shadowColor","#000"],["shadowOffsetX",0],["shadowOffsetY",0]];e.exports=function(e){return i.browser.ie&&i.browser.version>=11?function(){var t,n=this.__clipPaths,i=this.style;if(n)for(var o=0;o<n.length;o++){var a=n[o],s=a&&a.shape,l=a&&a.type;if(s&&("sector"===l&&s.startAngle===s.endAngle||"rect"===l&&(!s.width||!s.height))){for(var u=0;u<r.length;u++)r[u][2]=i[r[u][0]],i[r[u][0]]=r[u][1];t=!0;break}}if(e.apply(this,arguments),t)for(u=0;u<r.length;u++)i[r[u][0]]=r[u][2]}:e}},"./node_modules/zrender/lib/graphic/helper/fixShadow.js":function(e,t){var n={shadowBlur:1,shadowOffsetX:1,shadowOffsetY:1,textShadowBlur:1,textShadowOffsetX:1,textShadowOffsetY:1,textBoxShadowBlur:1,textBoxShadowOffsetX:1,textBoxShadowOffsetY:1};e.exports=function(e,t,i){return n.hasOwnProperty(t)?i*e.dpr:i}},"./node_modules/zrender/lib/graphic/helper/image.js":function(e,t,n){var i=new(n("./node_modules/zrender/lib/core/LRU.js"))(50);function r(){var e=this.__cachedImgObj;this.onload=this.__cachedImgObj=null;for(var t=0;t<e.pending.length;t++){var n=e.pending[t],i=n.cb;i&&i(this,n.cbPayload),n.hostEl.dirty()}e.pending.length=0}function o(e){return e&&e.width&&e.height}t.findExistImage=function(e){if("string"==typeof e){var t=i.get(e);return t&&t.image}return e},t.createOrUpdateImage=function(e,t,n,a,s){if(e){if("string"==typeof e){if(t&&t.__zrImageSrc===e||!n)return t;var l=i.get(e),u={hostEl:n,cb:a,cbPayload:s};return l?!o(t=l.image)&&l.pending.push(u):(!t&&(t=new Image),t.onload=r,i.put(e,t.__cachedImgObj={image:t,pending:[u]}),t.src=t.__zrImageSrc=e),t}return e}return t},t.isImageReady=o},"./node_modules/zrender/lib/graphic/helper/poly.js":function(e,t,n){var i=n("./node_modules/zrender/lib/graphic/helper/smoothSpline.js"),r=n("./node_modules/zrender/lib/graphic/helper/smoothBezier.js");t.buildPath=function(e,t,n){var o=t.points,a=t.smooth;if(o&&o.length>=2){if(a&&"spline"!==a){var s=r(o,a,n,t.smoothConstraint);e.moveTo(o[0][0],o[0][1]);for(var l=o.length,u=0;u<(n?l:l-1);u++){var c=s[2*u],d=s[2*u+1],h=o[(u+1)%l];e.bezierCurveTo(c[0],c[1],d[0],d[1],h[0],h[1])}}else{"spline"===a&&(o=i(o,n)),e.moveTo(o[0][0],o[0][1]),u=1;for(var f=o.length;u<f;u++)e.lineTo(o[u][0],o[u][1])}n&&e.closePath()}}},"./node_modules/zrender/lib/graphic/helper/roundRect.js":function(e,t){t.buildPath=function(e,t){var n,i,r,o,a,s=t.x,l=t.y,u=t.width,c=t.height,d=t.r;u<0&&(s+=u,u=-u),c<0&&(l+=c,c=-c),"number"==typeof d?n=i=r=o=d:d instanceof Array?1===d.length?n=i=r=o=d[0]:2===d.length?(n=r=d[0],i=o=d[1]):3===d.length?(n=d[0],i=o=d[1],r=d[2]):(n=d[0],i=d[1],r=d[2],o=d[3]):n=i=r=o=0,n+i>u&&(n*=u/(a=n+i),i*=u/a),r+o>u&&(r*=u/(a=r+o),o*=u/a),i+r>c&&(i*=c/(a=i+r),r*=c/a),n+o>c&&(n*=c/(a=n+o),o*=c/a),e.moveTo(s+n,l),e.lineTo(s+u-i,l),0!==i&&e.arc(s+u-i,l+i,i,-Math.PI/2,0),e.lineTo(s+u,l+c-r),0!==r&&e.arc(s+u-r,l+c-r,r,0,Math.PI/2),e.lineTo(s+o,l+c),0!==o&&e.arc(s+o,l+c-o,o,Math.PI/2,Math.PI),e.lineTo(s,l+n),0!==n&&e.arc(s+n,l+n,n,Math.PI,1.5*Math.PI)}},"./node_modules/zrender/lib/graphic/helper/smoothBezier.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/vector.js"),r=i.min,o=i.max,a=i.scale,s=i.distance,l=i.add,u=i.clone,c=i.sub;e.exports=function(e,t,n,i){var d,h,f,p,m=[],g=[],v=[],y=[];if(i){f=[1/0,1/0],p=[-1/0,-1/0];for(var _=0,x=e.length;_<x;_++)r(f,f,e[_]),o(p,p,e[_]);r(f,f,i[0]),o(p,p,i[1])}for(_=0,x=e.length;_<x;_++){var b=e[_];if(n)d=e[_?_-1:x-1],h=e[(_+1)%x];else{if(0===_||_===x-1){m.push(u(e[_]));continue}d=e[_-1],h=e[_+1]}c(g,h,d),a(g,g,t);var w=s(b,d),S=s(b,h),A=w+S;0!==A&&(w/=A,S/=A),a(v,g,-w),a(y,g,S);var T=l([],b,v),C=l([],b,y);i&&(o(T,T,f),r(T,T,p),o(C,C,f),r(C,C,p)),m.push(T),m.push(C)}return n&&m.push(m.shift()),m}},"./node_modules/zrender/lib/graphic/helper/smoothSpline.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/vector.js").distance;function r(e,t,n,i,r,o,a){var s=.5*(n-e),l=.5*(i-t);return(2*(t-n)+s+l)*a+(-3*(t-n)-2*s-l)*o+s*r+t}e.exports=function(e,t){for(var n=e.length,o=[],a=0,s=1;s<n;s++)a+=i(e[s-1],e[s]);var l=a/2;for(l=l<n?n:l,s=0;s<l;s++){var u,c,d,h=s/(l-1)*(t?n:n-1),f=Math.floor(h),p=h-f,m=e[f%n];t?(u=e[(f-1+n)%n],c=e[(f+1)%n],d=e[(f+2)%n]):(u=e[0===f?f:f-1],c=e[f>n-2?n-1:f+1],d=e[f>n-3?n-1:f+2]);var g=p*p,v=p*g;o.push([r(u[0],m[0],c[0],d[0],p,g,v),r(u[1],m[1],c[1],d[1],p,g,v)])}return o}},"./node_modules/zrender/lib/graphic/helper/text.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/util.js"),r=i.retrieve2,o=i.retrieve3,a=i.each,s=i.normalizeCssArray,l=i.isString,u=i.isObject,c=n("./node_modules/zrender/lib/contain/text.js"),d=n("./node_modules/zrender/lib/graphic/helper/roundRect.js"),h=n("./node_modules/zrender/lib/graphic/helper/image.js"),f=n("./node_modules/zrender/lib/graphic/helper/fixShadow.js"),p={left:1,right:1,center:1},m={top:1,bottom:1,middle:1};function g(e){if(e){e.font=c.makeFont(e);var t=e.textAlign;"middle"===t&&(t="center"),e.textAlign=null==t||p[t]?t:"left";var n=e.textVerticalAlign||e.textBaseline;"center"===n&&(n="middle"),e.textVerticalAlign=null==n||m[n]?n:"top",e.textPadding&&(e.textPadding=s(e.textPadding))}}function v(e,t,n,i,r){if(n&&t.textRotation){var o=t.textOrigin;"center"===o?(i=n.width/2+n.x,r=n.height/2+n.y):o&&(i=o[0]+n.x,r=o[1]+n.y),e.translate(i,r),e.rotate(-t.textRotation),e.translate(-i,-r)}}function y(e,t,n,i,a,s,l,u){var d=i.rich[n.styleName]||{},h=n.textVerticalAlign,f=s+a/2;"top"===h?f=s+n.height/2:"bottom"===h&&(f=s+a-n.height/2),!n.isLineHolder&&_(d)&&x(e,t,d,"right"===u?l-n.width:"center"===u?l-n.width/2:l,f-n.height/2,n.width,n.height);var p=n.textPadding;p&&(l=j(l,u,p),f-=n.height/2-p[2]-n.textHeight/2),S(t,"shadowBlur",o(d.textShadowBlur,i.textShadowBlur,0)),S(t,"shadowColor",d.textShadowColor||i.textShadowColor||"transparent"),S(t,"shadowOffsetX",o(d.textShadowOffsetX,i.textShadowOffsetX,0)),S(t,"shadowOffsetY",o(d.textShadowOffsetY,i.textShadowOffsetY,0)),S(t,"textAlign",u),S(t,"textBaseline","middle"),S(t,"font",n.font||c.DEFAULT_FONT);var m=A(d.textStroke||i.textStroke,v),g=T(d.textFill||i.textFill),v=r(d.textStrokeWidth,i.textStrokeWidth);m&&(S(t,"lineWidth",v),S(t,"strokeStyle",m),t.strokeText(n.text,l,f)),g&&(S(t,"fillStyle",g),t.fillText(n.text,l,f))}function _(e){return e.textBackgroundColor||e.textBorderWidth&&e.textBorderColor}function x(e,t,n,i,r,o,a){var s=n.textBackgroundColor,c=n.textBorderWidth,f=n.textBorderColor,p=l(s);if(S(t,"shadowBlur",n.textBoxShadowBlur||0),S(t,"shadowColor",n.textBoxShadowColor||"transparent"),S(t,"shadowOffsetX",n.textBoxShadowOffsetX||0),S(t,"shadowOffsetY",n.textBoxShadowOffsetY||0),p||c&&f){t.beginPath();var m=n.textBorderRadius;m?d.buildPath(t,{x:i,y:r,width:o,height:a,r:m}):t.rect(i,r,o,a),t.closePath()}if(p)S(t,"fillStyle",s),t.fill();else if(u(s)){var g=s.image;(g=h.createOrUpdateImage(g,null,e,b,s))&&h.isImageReady(g)&&t.drawImage(g,i,r,o,a)}c&&f&&(S(t,"lineWidth",c),S(t,"strokeStyle",f),t.stroke())}function b(e,t){t.image=e}function w(e,t,n){var i=t.x||0,r=t.y||0,o=t.textAlign,a=t.textVerticalAlign;if(n){var s=t.textPosition;if(s instanceof Array)i=n.x+C(s[0],n.width),r=n.y+C(s[1],n.height);else{var l=c.adjustTextPositionOnRect(s,n,t.textDistance);i=l.x,r=l.y,o=o||l.textAlign,a=a||l.textVerticalAlign}var u=t.textOffset;u&&(i+=u[0],r+=u[1])}return{baseX:i,baseY:r,textAlign:o,textVerticalAlign:a}}function S(e,t,n){return e[t]=f(e,t,n),e[t]}function A(e,t){return null==e||t<=0||"transparent"===e||"none"===e?null:e.image||e.colorStops?"#000":e}function T(e){return null==e||"none"===e?null:e.image||e.colorStops?"#000":e}function C(e,t){return"string"==typeof e?e.lastIndexOf("%")>=0?parseFloat(e)/100*t:parseFloat(e):e}function j(e,t,n){return"right"===t?e-n[1]:"center"===t?e+n[3]/2-n[1]/2:e+n[3]}t.normalizeTextStyle=function(e){return g(e),a(e.rich,g),e},t.renderText=function(e,t,n,i,r){i.rich?function(e,t,n,i,r){var o=e.__textCotentBlock;o&&!e.__dirty||(o=e.__textCotentBlock=c.parseRichText(n,i)),function(e,t,n,i,r){var o=n.width,a=n.outerWidth,s=n.outerHeight,l=i.textPadding,u=w(0,i,r),d=u.baseX,h=u.baseY,f=u.textAlign,p=u.textVerticalAlign;v(t,i,r,d,h);var m=c.adjustTextX(d,a,f),g=c.adjustTextY(h,s,p),b=m,S=g;l&&(b+=l[3],S+=l[0]);var A=b+o;_(i)&&x(e,t,i,m,g,a,s);for(var T=0;T<n.lines.length;T++){for(var C,j=n.lines[T],M=j.tokens,k=M.length,D=j.lineHeight,I=j.width,P=0,z=b,E=A,O=k-1;P<k&&(!(C=M[P]).textAlign||"left"===C.textAlign);)y(e,t,C,i,D,S,z,"left"),I-=C.width,z+=C.width,P++;for(;O>=0&&"right"===(C=M[O]).textAlign;)y(e,t,C,i,D,S,E,"right"),I-=C.width,E-=C.width,O--;for(z+=(o-(z-b)-(A-E)-I)/2;P<=O;)C=M[P],y(e,t,C,i,D,S,z+C.width/2,"center"),z+=C.width,P++;S+=D}}(e,t,o,i,r)}(e,t,n,i,r):function(e,t,n,i,r){var o=S(t,"font",i.font||c.DEFAULT_FONT),a=i.textPadding,s=e.__textCotentBlock;s&&!e.__dirty||(s=e.__textCotentBlock=c.parsePlainText(n,o,a,i.truncate));var l=s.outerHeight,u=s.lines,d=s.lineHeight,h=w(0,i,r),f=h.baseX,p=h.baseY,m=h.textAlign,g=h.textVerticalAlign;v(t,i,r,f,p);var y=c.adjustTextY(p,l,g),b=f,C=y,M=_(i);if(M||a){var k=c.getWidth(n,o),D=k;a&&(D+=a[1]+a[3]);var I=c.adjustTextX(f,D,m);M&&x(e,t,i,I,y,D,l),a&&(b=j(f,m,a),C+=a[0])}S(t,"textAlign",m||"left"),S(t,"textBaseline","middle"),S(t,"shadowBlur",i.textShadowBlur||0),S(t,"shadowColor",i.textShadowColor||"transparent"),S(t,"shadowOffsetX",i.textShadowOffsetX||0),S(t,"shadowOffsetY",i.textShadowOffsetY||0),C+=d/2;var P=i.textStrokeWidth,z=A(i.textStroke,P),E=T(i.textFill);z&&(S(t,"lineWidth",P),S(t,"strokeStyle",z)),E&&S(t,"fillStyle",E);for(var O=0;O<u.length;O++)z&&t.strokeText(u[O],b,C),E&&t.fillText(u[O],b,C),C+=d}(e,t,n,i,r)},t.getStroke=A,t.getFill=T,t.needDrawText=function(e,t){return null!=e&&(e||t.textBackgroundColor||t.textBorderWidth&&t.textBorderColor||t.textPadding)}},"./node_modules/zrender/lib/graphic/mixin/RectText.js":function(e,t,n){var i=n("./node_modules/zrender/lib/graphic/helper/text.js"),r=new(n("./node_modules/zrender/lib/core/BoundingRect.js")),o=function(){};o.prototype={constructor:o,drawRectText:function(e,t){var n=this.style;t=n.textRect||t,this.__dirty&&i.normalizeTextStyle(n,!0);var o=n.text;if(null!=o&&(o+=""),i.needDrawText(o,n)){e.save();var a=this.transform;n.transformText?this.setTransform(e):a&&(r.copy(t),r.applyTransform(a),t=r),i.renderText(this,e,o,n,t),e.restore()}}};var a=o;e.exports=a},"./node_modules/zrender/lib/graphic/shape/Arc.js":function(e,t,n){var i=n("./node_modules/zrender/lib/graphic/Path.js").extend({type:"arc",shape:{cx:0,cy:0,r:0,startAngle:0,endAngle:2*Math.PI,clockwise:!0},style:{stroke:"#000",fill:null},buildPath:function(e,t){var n=t.cx,i=t.cy,r=Math.max(t.r,0),o=t.startAngle,a=t.endAngle,s=t.clockwise,l=Math.cos(o),u=Math.sin(o);e.moveTo(l*r+n,u*r+i),e.arc(n,i,r,o,a,!s)}});e.exports=i},"./node_modules/zrender/lib/graphic/shape/BezierCurve.js":function(e,t,n){var i=n("./node_modules/zrender/lib/graphic/Path.js"),r=n("./node_modules/zrender/lib/core/vector.js"),o=n("./node_modules/zrender/lib/core/curve.js"),a=o.quadraticSubdivide,s=o.cubicSubdivide,l=o.quadraticAt,u=o.cubicAt,c=o.quadraticDerivativeAt,d=o.cubicDerivativeAt,h=[];function f(e,t,n){var i=e.cpx2,r=e.cpy2;return null===i||null===r?[(n?d:u)(e.x1,e.cpx1,e.cpx2,e.x2,t),(n?d:u)(e.y1,e.cpy1,e.cpy2,e.y2,t)]:[(n?c:l)(e.x1,e.cpx1,e.x2,t),(n?c:l)(e.y1,e.cpy1,e.y2,t)]}var p=i.extend({type:"bezier-curve",shape:{x1:0,y1:0,x2:0,y2:0,cpx1:0,cpy1:0,percent:1},style:{stroke:"#000",fill:null},buildPath:function(e,t){var n=t.x1,i=t.y1,r=t.x2,o=t.y2,l=t.cpx1,u=t.cpy1,c=t.cpx2,d=t.cpy2,f=t.percent;0!==f&&(e.moveTo(n,i),null==c||null==d?(f<1&&(a(n,l,r,f,h),l=h[1],r=h[2],a(i,u,o,f,h),u=h[1],o=h[2]),e.quadraticCurveTo(l,u,r,o)):(f<1&&(s(n,l,c,r,f,h),l=h[1],c=h[2],r=h[3],s(i,u,d,o,f,h),u=h[1],d=h[2],o=h[3]),e.bezierCurveTo(l,u,c,d,r,o)))},pointAt:function(e){return f(this.shape,e,!1)},tangentAt:function(e){var t=f(this.shape,e,!0);return r.normalize(t,t)}});e.exports=p},"./node_modules/zrender/lib/graphic/shape/Circle.js":function(e,t,n){var i=n("./node_modules/zrender/lib/graphic/Path.js").extend({type:"circle",shape:{cx:0,cy:0,r:0},buildPath:function(e,t,n){n&&e.moveTo(t.cx+t.r,t.cy),e.arc(t.cx,t.cy,t.r,0,2*Math.PI,!0)}});e.exports=i},"./node_modules/zrender/lib/graphic/shape/Line.js":function(e,t,n){var i=n("./node_modules/zrender/lib/graphic/Path.js").extend({type:"line",shape:{x1:0,y1:0,x2:0,y2:0,percent:1},style:{stroke:"#000",fill:null},buildPath:function(e,t){var n=t.x1,i=t.y1,r=t.x2,o=t.y2,a=t.percent;0!==a&&(e.moveTo(n,i),a<1&&(r=n*(1-a)+r*a,o=i*(1-a)+o*a),e.lineTo(r,o))},pointAt:function(e){var t=this.shape;return[t.x1*(1-e)+t.x2*e,t.y1*(1-e)+t.y2*e]}});e.exports=i},"./node_modules/zrender/lib/graphic/shape/Polygon.js":function(e,t,n){var i=n("./node_modules/zrender/lib/graphic/Path.js"),r=n("./node_modules/zrender/lib/graphic/helper/poly.js"),o=i.extend({type:"polygon",shape:{points:null,smooth:!1,smoothConstraint:null},buildPath:function(e,t){r.buildPath(e,t,!0)}});e.exports=o},"./node_modules/zrender/lib/graphic/shape/Polyline.js":function(e,t,n){var i=n("./node_modules/zrender/lib/graphic/Path.js"),r=n("./node_modules/zrender/lib/graphic/helper/poly.js"),o=i.extend({type:"polyline",shape:{points:null,smooth:!1,smoothConstraint:null},style:{stroke:"#000",fill:null},buildPath:function(e,t){r.buildPath(e,t,!1)}});e.exports=o},"./node_modules/zrender/lib/graphic/shape/Rect.js":function(e,t,n){var i=n("./node_modules/zrender/lib/graphic/Path.js"),r=n("./node_modules/zrender/lib/graphic/helper/roundRect.js"),o=i.extend({type:"rect",shape:{r:0,x:0,y:0,width:0,height:0},buildPath:function(e,t){var n=t.x,i=t.y,o=t.width,a=t.height;t.r?r.buildPath(e,t):e.rect(n,i,o,a),e.closePath()}});e.exports=o},"./node_modules/zrender/lib/graphic/shape/Ring.js":function(e,t,n){var i=n("./node_modules/zrender/lib/graphic/Path.js").extend({type:"ring",shape:{cx:0,cy:0,r:0,r0:0},buildPath:function(e,t){var n=t.cx,i=t.cy,r=2*Math.PI;e.moveTo(n+t.r,i),e.arc(n,i,t.r,0,r,!1),e.moveTo(n+t.r0,i),e.arc(n,i,t.r0,0,r,!0)}});e.exports=i},"./node_modules/zrender/lib/graphic/shape/Sector.js":function(e,t,n){var i=n("./node_modules/zrender/lib/graphic/Path.js"),r=n("./node_modules/zrender/lib/graphic/helper/fixClipWithShadow.js"),o=i.extend({type:"sector",shape:{cx:0,cy:0,r0:0,r:0,startAngle:0,endAngle:2*Math.PI,clockwise:!0},brush:r(i.prototype.brush),buildPath:function(e,t){var n=t.cx,i=t.cy,r=Math.max(t.r0||0,0),o=Math.max(t.r,0),a=t.startAngle,s=t.endAngle,l=t.clockwise,u=Math.cos(a),c=Math.sin(a);e.moveTo(u*r+n,c*r+i),e.lineTo(u*o+n,c*o+i),e.arc(n,i,o,a,s,!l),e.lineTo(Math.cos(s)*r+n,Math.sin(s)*r+i),0!==r&&e.arc(n,i,r,s,a,l),e.closePath()}});e.exports=o},"./node_modules/zrender/lib/mixin/Animatable.js":function(e,t,n){var i=n("./node_modules/zrender/lib/animation/Animator.js"),r=n("./node_modules/zrender/lib/core/log.js"),o=n("./node_modules/zrender/lib/core/util.js"),a=o.isString,s=o.isFunction,l=o.isObject,u=o.isArrayLike,c=o.indexOf,d=function(){this.animators=[]};d.prototype={constructor:d,animate:function(e,t){var n,o=!1,a=this,s=this.__zr;if(e){var l=e.split("."),u=a;o="shape"===l[0];for(var d=0,h=l.length;d<h;d++)u&&(u=u[l[d]]);u&&(n=u)}else n=a;if(n){var f=a.animators,p=new i(n,t);return p.during(function(e){a.dirty(o)}).done(function(){f.splice(c(f,p),1)}),f.push(p),s&&s.animation.addAnimator(p),p}r('Property "'+e+'" is not existed in element '+a.id)},stopAnimation:function(e){for(var t=this.animators,n=t.length,i=0;i<n;i++)t[i].stop(e);return t.length=0,this},animateTo:function(e,t,n,i,r,o){a(n)?(r=i,i=n,n=0):s(i)?(r=i,i="linear",n=0):s(n)?(r=n,n=0):s(t)?(r=t,t=500):t||(t=500),this.stopAnimation(),this._animateToShallow("",this,e,t,n);var l=this.animators.slice(),u=l.length;function c(){--u||r&&r()}u||r&&r();for(var d=0;d<l.length;d++)l[d].done(c).start(i,o)},_animateToShallow:function(e,t,n,i,r){var o={},a=0;for(var s in n)if(n.hasOwnProperty(s))if(null!=t[s])l(n[s])&&!u(n[s])?this._animateToShallow(e?e+"."+s:s,t[s],n[s],i,r):(o[s]=n[s],a++);else if(null!=n[s])if(e){var c={};c[e]={},c[e][s]=n[s],this.attr(c)}else this.attr(s,n[s]);return a>0&&this.animate(e,!1).when(null==i?500:i,o).delay(r||0),this}};var h=d;e.exports=h},"./node_modules/zrender/lib/mixin/Draggable.js":function(e,t){function n(){this.on("mousedown",this._dragStart,this),this.on("mousemove",this._drag,this),this.on("mouseup",this._dragEnd,this),this.on("globalout",this._dragEnd,this)}function i(e,t){return{target:e,topTarget:t&&t.topTarget}}n.prototype={constructor:n,_dragStart:function(e){var t=e.target;t&&t.draggable&&(this._draggingTarget=t,t.dragging=!0,this._x=e.offsetX,this._y=e.offsetY,this.dispatchToElement(i(t,e),"dragstart",e.event))},_drag:function(e){var t=this._draggingTarget;if(t){var n=e.offsetX,r=e.offsetY,o=n-this._x,a=r-this._y;this._x=n,this._y=r,t.drift(o,a,e),this.dispatchToElement(i(t,e),"drag",e.event);var s=this.findHover(n,r,t).target,l=this._dropTarget;this._dropTarget=s,t!==s&&(l&&s!==l&&this.dispatchToElement(i(l,e),"dragleave",e.event),s&&s!==l&&this.dispatchToElement(i(s,e),"dragenter",e.event))}},_dragEnd:function(e){var t=this._draggingTarget;t&&(t.dragging=!1),this.dispatchToElement(i(t,e),"dragend",e.event),this._dropTarget&&this.dispatchToElement(i(this._dropTarget,e),"drop",e.event),this._draggingTarget=null,this._dropTarget=null}};var r=n;e.exports=r},"./node_modules/zrender/lib/mixin/Eventful.js":function(e,t){var n=Array.prototype.slice,i=function(){this._$handlers={}};i.prototype={constructor:i,one:function(e,t,n){var i=this._$handlers;if(!t||!e)return this;i[e]||(i[e]=[]);for(var r=0;r<i[e].length;r++)if(i[e][r].h===t)return this;return i[e].push({h:t,one:!0,ctx:n||this}),this},on:function(e,t,n){var i=this._$handlers;if(!t||!e)return this;i[e]||(i[e]=[]);for(var r=0;r<i[e].length;r++)if(i[e][r].h===t)return this;return i[e].push({h:t,one:!1,ctx:n||this}),this},isSilent:function(e){var t=this._$handlers;return t[e]&&t[e].length},off:function(e,t){var n=this._$handlers;if(!e)return this._$handlers={},this;if(t){if(n[e]){for(var i=[],r=0,o=n[e].length;r<o;r++)n[e][r].h!=t&&i.push(n[e][r]);n[e]=i}n[e]&&0===n[e].length&&delete n[e]}else delete n[e];return this},trigger:function(e){if(this._$handlers[e]){var t=arguments,i=t.length;i>3&&(t=n.call(t,1));for(var r=this._$handlers[e],o=r.length,a=0;a<o;){switch(i){case 1:r[a].h.call(r[a].ctx);break;case 2:r[a].h.call(r[a].ctx,t[1]);break;case 3:r[a].h.call(r[a].ctx,t[1],t[2]);break;default:r[a].h.apply(r[a].ctx,t)}r[a].one?(r.splice(a,1),o--):a++}}return this},triggerWithContext:function(e){if(this._$handlers[e]){var t=arguments,i=t.length;i>4&&(t=n.call(t,1,t.length-1));for(var r=t[t.length-1],o=this._$handlers[e],a=o.length,s=0;s<a;){switch(i){case 1:o[s].h.call(r);break;case 2:o[s].h.call(r,t[1]);break;case 3:o[s].h.call(r,t[1],t[2]);break;default:o[s].h.apply(r,t)}o[s].one?(o.splice(s,1),a--):s++}}return this}};var r=i;e.exports=r},"./node_modules/zrender/lib/mixin/Transformable.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/matrix.js"),r=n("./node_modules/zrender/lib/core/vector.js"),o=i.identity,a=5e-5;function s(e){return e>a||e<-a}var l=function(e){(e=e||{}).position||(this.position=[0,0]),null==e.rotation&&(this.rotation=0),e.scale||(this.scale=[1,1]),this.origin=this.origin||null},u=l.prototype;u.transform=null,u.needLocalTransform=function(){return s(this.rotation)||s(this.position[0])||s(this.position[1])||s(this.scale[0]-1)||s(this.scale[1]-1)},u.updateTransform=function(){var e=this.parent,t=e&&e.transform,n=this.needLocalTransform(),r=this.transform;n||t?(r=r||i.create(),n?this.getLocalTransform(r):o(r),t&&(n?i.mul(r,e.transform,r):i.copy(r,e.transform)),this.transform=r,this.invTransform=this.invTransform||i.create(),i.invert(this.invTransform,r)):r&&o(r)},u.getLocalTransform=function(e){return l.getLocalTransform(this,e)},u.setTransform=function(e){var t=this.transform,n=e.dpr||1;t?e.setTransform(n*t[0],n*t[1],n*t[2],n*t[3],n*t[4],n*t[5]):e.setTransform(n,0,0,n,0,0)},u.restoreTransform=function(e){var t=e.dpr||1;e.setTransform(t,0,0,t,0,0)};var c=[];u.decomposeTransform=function(){if(this.transform){var e=this.parent,t=this.transform;e&&e.transform&&(i.mul(c,e.invTransform,t),t=c);var n=t[0]*t[0]+t[1]*t[1],r=t[2]*t[2]+t[3]*t[3],o=this.position,a=this.scale;s(n-1)&&(n=Math.sqrt(n)),s(r-1)&&(r=Math.sqrt(r)),t[0]<0&&(n=-n),t[3]<0&&(r=-r),o[0]=t[4],o[1]=t[5],a[0]=n,a[1]=r,this.rotation=Math.atan2(-t[1]/r,t[0]/n)}},u.getGlobalScale=function(){var e=this.transform;if(!e)return[1,1];var t=Math.sqrt(e[0]*e[0]+e[1]*e[1]),n=Math.sqrt(e[2]*e[2]+e[3]*e[3]);return e[0]<0&&(t=-t),e[3]<0&&(n=-n),[t,n]},u.transformCoordToLocal=function(e,t){var n=[e,t],i=this.invTransform;return i&&r.applyTransform(n,n,i),n},u.transformCoordToGlobal=function(e,t){var n=[e,t],i=this.transform;return i&&r.applyTransform(n,n,i),n},l.getLocalTransform=function(e,t){o(t=t||[]);var n=e.origin,r=e.scale||[1,1],a=e.rotation||0,s=e.position||[0,0];return n&&(t[4]-=n[0],t[5]-=n[1]),i.scale(t,t,r),a&&i.rotate(t,t,a),n&&(t[4]+=n[0],t[5]+=n[1]),t[4]+=s[0],t[5]+=s[1],t};var d=l;e.exports=d},"./node_modules/zrender/lib/tool/color.js":function(e,t,n){var i={transparent:[0,0,0,0],aliceblue:[240,248,255,1],antiquewhite:[250,235,215,1],aqua:[0,255,255,1],aquamarine:[127,255,212,1],azure:[240,255,255,1],beige:[245,245,220,1],bisque:[255,228,196,1],black:[0,0,0,1],blanchedalmond:[255,235,205,1],blue:[0,0,255,1],blueviolet:[138,43,226,1],brown:[165,42,42,1],burlywood:[222,184,135,1],cadetblue:[95,158,160,1],chartreuse:[127,255,0,1],chocolate:[210,105,30,1],coral:[255,127,80,1],cornflowerblue:[100,149,237,1],cornsilk:[255,248,220,1],crimson:[220,20,60,1],cyan:[0,255,255,1],darkblue:[0,0,139,1],darkcyan:[0,139,139,1],darkgoldenrod:[184,134,11,1],darkgray:[169,169,169,1],darkgreen:[0,100,0,1],darkgrey:[169,169,169,1],darkkhaki:[189,183,107,1],darkmagenta:[139,0,139,1],darkolivegreen:[85,107,47,1],darkorange:[255,140,0,1],darkorchid:[153,50,204,1],darkred:[139,0,0,1],darksalmon:[233,150,122,1],darkseagreen:[143,188,143,1],darkslateblue:[72,61,139,1],darkslategray:[47,79,79,1],darkslategrey:[47,79,79,1],darkturquoise:[0,206,209,1],darkviolet:[148,0,211,1],deeppink:[255,20,147,1],deepskyblue:[0,191,255,1],dimgray:[105,105,105,1],dimgrey:[105,105,105,1],dodgerblue:[30,144,255,1],firebrick:[178,34,34,1],floralwhite:[255,250,240,1],forestgreen:[34,139,34,1],fuchsia:[255,0,255,1],gainsboro:[220,220,220,1],ghostwhite:[248,248,255,1],gold:[255,215,0,1],goldenrod:[218,165,32,1],gray:[128,128,128,1],green:[0,128,0,1],greenyellow:[173,255,47,1],grey:[128,128,128,1],honeydew:[240,255,240,1],hotpink:[255,105,180,1],indianred:[205,92,92,1],indigo:[75,0,130,1],ivory:[255,255,240,1],khaki:[240,230,140,1],lavender:[230,230,250,1],lavenderblush:[255,240,245,1],lawngreen:[124,252,0,1],lemonchiffon:[255,250,205,1],lightblue:[173,216,230,1],lightcoral:[240,128,128,1],lightcyan:[224,255,255,1],lightgoldenrodyellow:[250,250,210,1],lightgray:[211,211,211,1],lightgreen:[144,238,144,1],lightgrey:[211,211,211,1],lightpink:[255,182,193,1],lightsalmon:[255,160,122,1],lightseagreen:[32,178,170,1],lightskyblue:[135,206,250,1],lightslategray:[119,136,153,1],lightslategrey:[119,136,153,1],lightsteelblue:[176,196,222,1],lightyellow:[255,255,224,1],lime:[0,255,0,1],limegreen:[50,205,50,1],linen:[250,240,230,1],magenta:[255,0,255,1],maroon:[128,0,0,1],mediumaquamarine:[102,205,170,1],mediumblue:[0,0,205,1],mediumorchid:[186,85,211,1],mediumpurple:[147,112,219,1],mediumseagreen:[60,179,113,1],mediumslateblue:[123,104,238,1],mediumspringgreen:[0,250,154,1],mediumturquoise:[72,209,204,1],mediumvioletred:[199,21,133,1],midnightblue:[25,25,112,1],mintcream:[245,255,250,1],mistyrose:[255,228,225,1],moccasin:[255,228,181,1],navajowhite:[255,222,173,1],navy:[0,0,128,1],oldlace:[253,245,230,1],olive:[128,128,0,1],olivedrab:[107,142,35,1],orange:[255,165,0,1],orangered:[255,69,0,1],orchid:[218,112,214,1],palegoldenrod:[238,232,170,1],palegreen:[152,251,152,1],paleturquoise:[175,238,238,1],palevioletred:[219,112,147,1],papayawhip:[255,239,213,1],peachpuff:[255,218,185,1],peru:[205,133,63,1],pink:[255,192,203,1],plum:[221,160,221,1],powderblue:[176,224,230,1],purple:[128,0,128,1],red:[255,0,0,1],rosybrown:[188,143,143,1],royalblue:[65,105,225,1],saddlebrown:[139,69,19,1],salmon:[250,128,114,1],sandybrown:[244,164,96,1],seagreen:[46,139,87,1],seashell:[255,245,238,1],sienna:[160,82,45,1],silver:[192,192,192,1],skyblue:[135,206,235,1],slateblue:[106,90,205,1],slategray:[112,128,144,1],slategrey:[112,128,144,1],snow:[255,250,250,1],springgreen:[0,255,127,1],steelblue:[70,130,180,1],tan:[210,180,140,1],teal:[0,128,128,1],thistle:[216,191,216,1],tomato:[255,99,71,1],turquoise:[64,224,208,1],violet:[238,130,238,1],wheat:[245,222,179,1],white:[255,255,255,1],whitesmoke:[245,245,245,1],yellow:[255,255,0,1],yellowgreen:[154,205,50,1]};function r(e){return(e=Math.round(e))<0?0:e>255?255:e}function o(e){return e<0?0:e>1?1:e}function a(e){return e.length&&"%"===e.charAt(e.length-1)?r(parseFloat(e)/100*255):r(parseInt(e,10))}function s(e){return e.length&&"%"===e.charAt(e.length-1)?o(parseFloat(e)/100):o(parseFloat(e))}function l(e,t,n){return n<0?n+=1:n>1&&(n-=1),6*n<1?e+(t-e)*n*6:2*n<1?t:3*n<2?e+(t-e)*(2/3-n)*6:e}function u(e,t,n){return e+(t-e)*n}function c(e,t,n,i,r){return e[0]=t,e[1]=n,e[2]=i,e[3]=r,e}function d(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}var h=new(n("./node_modules/zrender/lib/core/LRU.js"))(20),f=null;function p(e,t){f&&d(f,t),f=h.put(e,f||t.slice())}function m(e,t){if(e){t=t||[];var n=h.get(e);if(n)return d(t,n);var r,o=(e+="").replace(/ /g,"").toLowerCase();if(o in i)return d(t,i[o]),p(e,t),t;if("#"===o.charAt(0))return 4===o.length?(r=parseInt(o.substr(1),16))>=0&&r<=4095?(c(t,(3840&r)>>4|(3840&r)>>8,240&r|(240&r)>>4,15&r|(15&r)<<4,1),p(e,t),t):void c(t,0,0,0,1):7===o.length?(r=parseInt(o.substr(1),16))>=0&&r<=16777215?(c(t,(16711680&r)>>16,(65280&r)>>8,255&r,1),p(e,t),t):void c(t,0,0,0,1):void 0;var l=o.indexOf("("),u=o.indexOf(")");if(-1!==l&&u+1===o.length){var f=o.substr(0,l),m=o.substr(l+1,u-(l+1)).split(","),v=1;switch(f){case"rgba":if(4!==m.length)return void c(t,0,0,0,1);v=s(m.pop());case"rgb":return 3!==m.length?void c(t,0,0,0,1):(c(t,a(m[0]),a(m[1]),a(m[2]),v),p(e,t),t);case"hsla":return 4!==m.length?void c(t,0,0,0,1):(m[3]=s(m[3]),g(m,t),p(e,t),t);case"hsl":return 3!==m.length?void c(t,0,0,0,1):(g(m,t),p(e,t),t);default:return}}c(t,0,0,0,1)}}function g(e,t){var n=(parseFloat(e[0])%360+360)%360/360,i=s(e[1]),o=s(e[2]),a=o<=.5?o*(i+1):o+i-o*i,u=2*o-a;return c(t=t||[],r(255*l(u,a,n+1/3)),r(255*l(u,a,n)),r(255*l(u,a,n-1/3)),1),4===e.length&&(t[3]=e[3]),t}function v(e,t,n){if(t&&t.length&&e>=0&&e<=1){n=n||[];var i=e*(t.length-1),a=Math.floor(i),s=Math.ceil(i),l=t[a],c=t[s],d=i-a;return n[0]=r(u(l[0],c[0],d)),n[1]=r(u(l[1],c[1],d)),n[2]=r(u(l[2],c[2],d)),n[3]=o(u(l[3],c[3],d)),n}}var y=v;function _(e,t,n){if(t&&t.length&&e>=0&&e<=1){var i=e*(t.length-1),a=Math.floor(i),s=Math.ceil(i),l=m(t[a]),c=m(t[s]),d=i-a,h=b([r(u(l[0],c[0],d)),r(u(l[1],c[1],d)),r(u(l[2],c[2],d)),o(u(l[3],c[3],d))],"rgba");return n?{color:h,leftIndex:a,rightIndex:s,value:i}:h}}var x=_;function b(e,t){if(e&&e.length){var n=e[0]+","+e[1]+","+e[2];return"rgba"!==t&&"hsva"!==t&&"hsla"!==t||(n+=","+e[3]),t+"("+n+")"}}t.parse=m,t.lift=function(e,t){var n=m(e);if(n){for(var i=0;i<3;i++)n[i]=t<0?n[i]*(1-t)|0:(255-n[i])*t+n[i]|0,n[i]>255?n[i]=255:e[i]<0&&(n[i]=0);return b(n,4===n.length?"rgba":"rgb")}},t.toHex=function(e){var t=m(e);if(t)return((1<<24)+(t[0]<<16)+(t[1]<<8)+ +t[2]).toString(16).slice(1)},t.fastLerp=v,t.fastMapToColor=y,t.lerp=_,t.mapToColor=x,t.modifyHSL=function(e,t,n,i){if(e=m(e))return e=function(e){if(e){var t,n,i=e[0]/255,r=e[1]/255,o=e[2]/255,a=Math.min(i,r,o),s=Math.max(i,r,o),l=s-a,u=(s+a)/2;if(0===l)t=0,n=0;else{n=u<.5?l/(s+a):l/(2-s-a);var c=((s-i)/6+l/2)/l,d=((s-r)/6+l/2)/l,h=((s-o)/6+l/2)/l;i===s?t=h-d:r===s?t=1/3+c-h:o===s&&(t=2/3+d-c),t<0&&(t+=1),t>1&&(t-=1)}var f=[360*t,n,u];return null!=e[3]&&f.push(e[3]),f}}(e),null!=t&&(e[0]=function(e){return(e=Math.round(e))<0?0:e>360?360:e}(t)),null!=n&&(e[1]=s(n)),null!=i&&(e[2]=s(i)),b(g(e),"rgba")},t.modifyAlpha=function(e,t){if((e=m(e))&&null!=t)return e[3]=o(t),b(e,"rgba")},t.stringify=b},"./node_modules/zrender/lib/tool/path.js":function(e,t,n){var i=n("./node_modules/zrender/lib/graphic/Path.js"),r=n("./node_modules/zrender/lib/core/PathProxy.js"),o=n("./node_modules/zrender/lib/tool/transformPath.js"),a=["m","M","l","L","v","V","h","H","z","Z","c","C","q","Q","t","T","s","S","a","A"],s=Math.sqrt,l=Math.sin,u=Math.cos,c=Math.PI,d=function(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1])},h=function(e,t){return(e[0]*t[0]+e[1]*t[1])/(d(e)*d(t))},f=function(e,t){return(e[0]*t[1]<e[1]*t[0]?-1:1)*Math.acos(h(e,t))};function p(e,t,n,i,r,o,a,d,p,m,g){var v=p*(c/180),y=u(v)*(e-n)/2+l(v)*(t-i)/2,_=-1*l(v)*(e-n)/2+u(v)*(t-i)/2,x=y*y/(a*a)+_*_/(d*d);x>1&&(a*=s(x),d*=s(x));var b=(r===o?-1:1)*s((a*a*(d*d)-a*a*(_*_)-d*d*(y*y))/(a*a*(_*_)+d*d*(y*y)))||0,w=b*a*_/d,S=b*-d*y/a,A=(e+n)/2+u(v)*w-l(v)*S,T=(t+i)/2+l(v)*w+u(v)*S,C=f([1,0],[(y-w)/a,(_-S)/d]),j=[(y-w)/a,(_-S)/d],M=[(-1*y-w)/a,(-1*_-S)/d],k=f(j,M);h(j,M)<=-1&&(k=c),h(j,M)>=1&&(k=0),0===o&&k>0&&(k-=2*c),1===o&&k<0&&(k+=2*c),g.addData(m,A,T,a,d,C,k,v,o)}function m(e,t){var n=function(e){if(!e)return[];var t,n=e.replace(/-/g," -").replace(/  /g," ").replace(/ /g,",").replace(/,,/g,",");for(t=0;t<a.length;t++)n=n.replace(new RegExp(a[t],"g"),"|"+a[t]);var i,o=n.split("|"),s=0,l=0,u=new r,c=r.CMD;for(t=1;t<o.length;t++){var d,h=o[t],f=h.charAt(0),m=0,g=h.slice(1).replace(/e,-/g,"e-").split(",");g.length>0&&""===g[0]&&g.shift();for(var v=0;v<g.length;v++)g[v]=parseFloat(g[v]);for(;m<g.length&&!isNaN(g[m])&&!isNaN(g[0]);){var y,_,x,b,w,S,A,T=s,C=l;switch(f){case"l":s+=g[m++],l+=g[m++],d=c.L,u.addData(d,s,l);break;case"L":s=g[m++],l=g[m++],d=c.L,u.addData(d,s,l);break;case"m":s+=g[m++],l+=g[m++],d=c.M,u.addData(d,s,l),f="l";break;case"M":s=g[m++],l=g[m++],d=c.M,u.addData(d,s,l),f="L";break;case"h":s+=g[m++],d=c.L,u.addData(d,s,l);break;case"H":s=g[m++],d=c.L,u.addData(d,s,l);break;case"v":l+=g[m++],d=c.L,u.addData(d,s,l);break;case"V":l=g[m++],d=c.L,u.addData(d,s,l);break;case"C":d=c.C,u.addData(d,g[m++],g[m++],g[m++],g[m++],g[m++],g[m++]),s=g[m-2],l=g[m-1];break;case"c":d=c.C,u.addData(d,g[m++]+s,g[m++]+l,g[m++]+s,g[m++]+l,g[m++]+s,g[m++]+l),s+=g[m-2],l+=g[m-1];break;case"S":y=s,_=l;var j=u.len(),M=u.data;i===c.C&&(y+=s-M[j-4],_+=l-M[j-3]),d=c.C,T=g[m++],C=g[m++],s=g[m++],l=g[m++],u.addData(d,y,_,T,C,s,l);break;case"s":y=s,_=l,j=u.len(),M=u.data,i===c.C&&(y+=s-M[j-4],_+=l-M[j-3]),d=c.C,T=s+g[m++],C=l+g[m++],s+=g[m++],l+=g[m++],u.addData(d,y,_,T,C,s,l);break;case"Q":T=g[m++],C=g[m++],s=g[m++],l=g[m++],d=c.Q,u.addData(d,T,C,s,l);break;case"q":T=g[m++]+s,C=g[m++]+l,s+=g[m++],l+=g[m++],d=c.Q,u.addData(d,T,C,s,l);break;case"T":y=s,_=l,j=u.len(),M=u.data,i===c.Q&&(y+=s-M[j-4],_+=l-M[j-3]),s=g[m++],l=g[m++],d=c.Q,u.addData(d,y,_,s,l);break;case"t":y=s,_=l,j=u.len(),M=u.data,i===c.Q&&(y+=s-M[j-4],_+=l-M[j-3]),s+=g[m++],l+=g[m++],d=c.Q,u.addData(d,y,_,s,l);break;case"A":x=g[m++],b=g[m++],w=g[m++],S=g[m++],A=g[m++],p(T=s,C=l,s=g[m++],l=g[m++],S,A,x,b,w,d=c.A,u);break;case"a":x=g[m++],b=g[m++],w=g[m++],S=g[m++],A=g[m++],p(T=s,C=l,s+=g[m++],l+=g[m++],S,A,x,b,w,d=c.A,u)}}"z"!==f&&"Z"!==f||(d=c.Z,u.addData(d)),i=d}return u.toStatic(),u}(e);return(t=t||{}).buildPath=function(e){if(e.setData){e.setData(n.data),(t=e.getContext())&&e.rebuildPath(t)}else{var t=e;n.rebuildPath(t)}},t.applyTransform=function(e){o(n,e),this.dirty(!0)},t}t.createFromString=function(e,t){return new i(m(e,t))},t.extendFromString=function(e,t){return i.extend(m(e,t))},t.mergePath=function(e,t){for(var n=[],r=e.length,o=0;o<r;o++){var a=e[o];a.path||a.createPathProxy(),a.__dirtyPath&&a.buildPath(a.path,a.shape,!0),n.push(a.path)}var s=new i(t);return s.createPathProxy(),s.buildPath=function(e){e.appendPath(n);var t=e.getContext();t&&e.rebuildPath(t)},s}},"./node_modules/zrender/lib/tool/transformPath.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/PathProxy.js"),r=n("./node_modules/zrender/lib/core/vector.js").applyTransform,o=i.CMD,a=[[],[],[]],s=Math.sqrt,l=Math.atan2;e.exports=function(e,t){var n,i,u,c,d,h=e.data,f=o.M,p=o.C,m=o.L,g=o.R,v=o.A,y=o.Q;for(u=0,c=0;u<h.length;){switch(n=h[u++],c=u,i=0,n){case f:case m:i=1;break;case p:i=3;break;case y:i=2;break;case v:var _=t[4],x=t[5],b=s(t[0]*t[0]+t[1]*t[1]),w=s(t[2]*t[2]+t[3]*t[3]),S=l(-t[1]/w,t[0]/b);h[u]*=b,h[u++]+=_,h[u]*=w,h[u++]+=x,h[u++]*=b,h[u++]*=w,h[u++]+=S,h[u++]+=S,c=u+=2;break;case g:A[0]=h[u++],A[1]=h[u++],r(A,A,t),h[c++]=A[0],h[c++]=A[1],A[0]+=h[u++],A[1]+=h[u++],r(A,A,t),h[c++]=A[0],h[c++]=A[1]}for(d=0;d<i;d++){var A;(A=a[d])[0]=h[u++],A[1]=h[u++],r(A,A,t),h[c++]=A[0],h[c++]=A[1]}}}},"./node_modules/zrender/lib/zrender.js":function(e,t,n){var i=n("./node_modules/zrender/lib/core/guid.js"),r=n("./node_modules/zrender/lib/core/env.js"),o=n("./node_modules/zrender/lib/core/util.js"),a=n("./node_modules/zrender/lib/Handler.js"),s=n("./node_modules/zrender/lib/Storage.js"),l=n("./node_modules/zrender/lib/Painter.js"),u=n("./node_modules/zrender/lib/animation/Animation.js"),c=n("./node_modules/zrender/lib/dom/HandlerProxy.js"),d=!r.canvasSupported,h={canvas:l},f={};var p=function(e,t,n){n=n||{},this.dom=t,this.id=e;var i=this,l=new s,f=n.renderer;if(d){if(!h.vml)throw new Error("You need to require 'zrender/vml/vml' to support IE8");f="vml"}else f&&h[f]||(f="canvas");var p=new h[f](t,l,n,e);this.storage=l,this.painter=p;var m=r.node||r.worker?null:new c(p.getViewportRoot());this.handler=new a(l,p,m,p.root),this.animation=new u({stage:{update:o.bind(this.flush,this)}}),this.animation.start(),this._needsRefresh;var g=l.delFromStorage,v=l.addToStorage;l.delFromStorage=function(e){g.call(l,e),e&&e.removeSelfFromZr(i)},l.addToStorage=function(e){v.call(l,e),e.addSelfToZr(i)}};p.prototype={constructor:p,getId:function(){return this.id},add:function(e){this.storage.addRoot(e),this._needsRefresh=!0},remove:function(e){this.storage.delRoot(e),this._needsRefresh=!0},configLayer:function(e,t){this.painter.configLayer&&this.painter.configLayer(e,t),this._needsRefresh=!0},setBackgroundColor:function(e){this.painter.setBackgroundColor&&this.painter.setBackgroundColor(e),this._needsRefresh=!0},refreshImmediately:function(){this._needsRefresh=!1,this.painter.refresh(),this._needsRefresh=!1},refresh:function(){this._needsRefresh=!0},flush:function(){var e;this._needsRefresh&&(e=!0,this.refreshImmediately()),this._needsRefreshHover&&(e=!0,this.refreshHoverImmediately()),e&&this.trigger("rendered")},addHover:function(e,t){this.painter.addHover&&(this.painter.addHover(e,t),this.refreshHover())},removeHover:function(e){this.painter.removeHover&&(this.painter.removeHover(e),this.refreshHover())},clearHover:function(){this.painter.clearHover&&(this.painter.clearHover(),this.refreshHover())},refreshHover:function(){this._needsRefreshHover=!0},refreshHoverImmediately:function(){this._needsRefreshHover=!1,this.painter.refreshHover&&this.painter.refreshHover()},resize:function(e){e=e||{},this.painter.resize(e.width,e.height),this.handler.resize()},clearAnimation:function(){this.animation.clear()},getWidth:function(){return this.painter.getWidth()},getHeight:function(){return this.painter.getHeight()},pathToImage:function(e,t){return this.painter.pathToImage(e,t)},setCursorStyle:function(e){this.handler.setCursorStyle(e)},findHover:function(e,t){return this.handler.findHover(e,t)},on:function(e,t,n){this.handler.on(e,t,n)},off:function(e,t){this.handler.off(e,t)},trigger:function(e,t){this.handler.trigger(e,t)},clear:function(){this.storage.delRoot(),this.painter.clear()},dispose:function(){this.animation.stop(),this.clear(),this.storage.dispose(),this.painter.dispose(),this.handler.dispose(),this.animation=this.storage=this.painter=this.handler=null,function(e){delete f[e]}(this.id)}},t.version="4.0.4",t.init=function(e,t){var n=new p(i(),e,t);return f[n.id]=n,n},t.dispose=function(e){if(e)e.dispose();else{for(var t in f)f.hasOwnProperty(t)&&f[t].dispose();f={}}return this},t.getInstance=function(e){return f[e]},t.registerPainter=function(e,t){h[e]=t}},"./src/iconfont/iconfont.css":function(e,t,n){var i=n("./node_modules/css-loader/index.js!./src/iconfont/iconfont.css");"string"==typeof i&&(i=[[e.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0},o=n("./node_modules/style-loader/lib/addStyles.js")(i,r);i.locals&&(e.exports=i.locals),e.hot.accept("./node_modules/css-loader/index.js!./src/iconfont/iconfont.css",function(){var t=n("./node_modules/css-loader/index.js!./src/iconfont/iconfont.css");if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,i=0;for(n in e){if(!t||e[n]!==t[n])return!1;i++}for(n in t)i--;return 0===i}(i.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)}),e.hot.dispose(function(){o()})},"./src/iconfont/iconfont.eot?t=1532577317622":function(e,t,n){e.exports=n.p+"2332b6a7439d8651574b27de31f2121b.eot"},"./src/iconfont/iconfont.svg?t=1532577317622":function(e,t,n){e.exports=n.p+"608087e2214967ed92d437bbcedd7782.svg"},"./src/iconfont/iconfont.ttf?t=1532577317622":function(e,t,n){e.exports=n.p+"61adc7c4a95cedb57212a2b0b4e8210a.ttf"},"./src/index.css":function(e,t,n){var i=n("./node_modules/css-loader/index.js!./src/index.css");"string"==typeof i&&(i=[[e.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0},o=n("./node_modules/style-loader/lib/addStyles.js")(i,r);i.locals&&(e.exports=i.locals),e.hot.accept("./node_modules/css-loader/index.js!./src/index.css",function(){var t=n("./node_modules/css-loader/index.js!./src/index.css");if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,i=0;for(n in e){if(!t||e[n]!==t[n])return!1;i++}for(n in t)i--;return 0===i}(i.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)}),e.hot.dispose(function(){o()})},"./src/index.js":function(e,t,n){"use strict";n.r(t);var i=n("./node_modules/jquery/dist/jquery.min.js"),r=n.n(i);n("./src/iconfont/iconfont.css"),n("./src/index.css");let o=`${window.location.protocol}//${window.location.host}`;function a(e){var t=r()("#username").val(),n=r()("#password").val();t||alert("请输入用户名"),n||alert("请输入密码");var i=window.btoa(t+":"+n);r.a.ajax({type:"get",headers:{UseXBasic:!0,Authorization:"Basic "+i},url:o+"/user/currentUser?auth",success:function(t){sessionStorage.setItem("_tcy8",i),e(t)},error:function(e){alert("用户名或密码错误，请重新输入")}})}function s(e,t){var n={},i=`${window.location.protocol}//${window.location.host}`+"/inventory/managedObjects";n.fragmentType="c8y_IsDevice",n.pageSize=2e3,e&&(n.q=e),r.a.ajax({type:"get",url:i,async:!1,headers:{Authorization:"Basic "+sessionStorage.getItem("_tcy8")},data:n,success:e=>{t(e.managedObjects)}})}const l=n("./node_modules/echarts/lib/echarts.js");n("./node_modules/echarts/lib/chart/pie.js"),n("./node_modules/echarts/lib/component/tooltip.js"),n("./node_modules/echarts/lib/component/title.js"),n("./node_modules/echarts/lib/component/legend.js"),r()(document).ready(function(){sessionStorage.getItem("_tcy8")?t():(r()("#login").show(),r()("#loading").hide(),r()("#content").hide());let e=`${window.location.protocol}//${window.location.host}`;function t(){r()("#login").hide(),r()("#loading").show(),r.a.getScript("https://webapi.amap.com/maps?v=1.4.8&key=450aacc9d861f105dcd645d385c0a313&plugin=AMap.MarkerClusterer",function(){r()("#loading").hide(),r()("#content").show();var t=new AMap.Map("map",{resizeEnable:!0,expandZoomRange:!0,zoom:12,zooms:[3,20],mapStyle:"amap://styles/darkblue"});const n=new AMap.MarkerClusterer(t,[],{gridSize:80});var i=l.init(document.getElementById("right-top"),"dark"),o=l.init(document.getElementById("right-bottom"),"dark");i.showLoading(),o.showLoading(),s("",t=>{var r=t.length;s("$filter=(c8y_Availability.status eq 'AVAILABLE')",e=>{i.hideLoading(),i.setOption({title:{text:"可用设备",x:"center"},tooltip:{trigger:"item",formatter:"{a} <br/>{b}: {c} ({d}%)"},backgroundColor:"rgba(0,0,0,0)",legend:{orient:"vertical",x:"left",data:["可用设备","不可用设备"]},series:[{name:"设备总量",type:"pie",radius:["50%","70%"],avoidLabelOverlap:!1,label:{normal:{show:!1,position:"center"},emphasis:{show:!0,textStyle:{fontSize:"30",fontWeight:"bold"}}},labelLine:{normal:{show:!1}},data:[{value:e.length,name:"可用设备"},{value:r-e.length,name:"不可用设备"}]}]})}),s("$filter=(c8y_Connection.status eq 'CONNECTED')",e=>{o.hideLoading(),o.setOption({title:{text:"设备",x:"center"},tooltip:{trigger:"item",formatter:"{a} <br/>{b}: {c} ({d}%)"},backgroundColor:"rgba(0,0,0,0)",legend:{orient:"vertical",x:"left",data:["在线设备","不在线设备"]},series:[{name:"设备",type:"pie",radius:["50%","70%"],avoidLabelOverlap:!1,label:{normal:{show:!1,position:"center"},emphasis:{show:!0,textStyle:{fontSize:"30",fontWeight:"bold"}}},labelLine:{normal:{show:!1}},data:[{value:e.length,name:"在线设备"},{value:r-e.length,name:"不在线设备"}]}]})});for(let i=0;i<r;i++)if(t[i].c8y_Position){var a=[t[i].c8y_Position.lng,t[i].c8y_Position.lat];AMap.convertFrom(a,"gps",function(r,o){"ok"===o.info&&n.addMarker(new AMap.Marker({position:[o.locations[0].P,o.locations[0].O],content:'<a href="'+e+"/apps/devicemanagement/index.html#/device/"+t[i].id+'/info" style="display: block; background-color: hsla(180, 100%, 50%, 0.7); height: 24px; width: 24px; border: 1px solid hsl(180, 100%, 40%); border-radius: 12px; box-shadow: hsl(180, 100%, 50%) 0px 0px 1px;"></a>',offset:new AMap.Pixel(-15,-15)}))})}})})}r()(".input-group").on("blur",".form-control",function(){var e=r()(this);e.val()?(e.css({borderColor:"#E5E7E7"}),e.prev().css({backgroundColor:"#E5E7E7",color:"#333",borderColor:"#E5E7E7"})):(e.css({borderColor:"red"}),e.prev().css({backgroundColor:"red",color:"#fff",borderColor:"red"}))}),r()(".btn").click(function(){a(e=>{t()})}),r()("#password").keypress(function(e){13===e.keyCode&&a(e=>{t()})})})},"./src/load.gif":function(e,t,n){e.exports=n.p+"8fa9b8d8d3e2c9bd6be3a82bd72354d4.gif"},"./src/logo.svg":function(e,t,n){e.exports=n.p+"eb9e1db90a45bd8daeee88ca918aea9f.svg"}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ljb25mb250L2ljb25mb250LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvdXJsL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvQ29vcmRpbmF0ZVN5c3RlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvRXh0ZW5zaW9uQVBJLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9hY3Rpb24vY3JlYXRlRGF0YVNlbGVjdEFjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvY2hhcnQvaGVscGVyL2NyZWF0ZUxpc3RGcm9tQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL2NoYXJ0L2hlbHBlci9jcmVhdGVMaXN0U2ltcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9jaGFydC9oZWxwZXIvY3JlYXRlUmVuZGVyUGxhbm5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvY2hhcnQvcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9jaGFydC9waWUvUGllU2VyaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9jaGFydC9waWUvUGllVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvY2hhcnQvcGllL2xhYmVsTGF5b3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9jaGFydC9waWUvcGllTGF5b3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9jb21wb25lbnQvYXhpcy9BeGlzQnVpbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvY29tcG9uZW50L2F4aXMvQXhpc1ZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL2NvbXBvbmVudC9heGlzUG9pbnRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvY29tcG9uZW50L2F4aXNQb2ludGVyL0F4aXNQb2ludGVyTW9kZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL2NvbXBvbmVudC9heGlzUG9pbnRlci9BeGlzUG9pbnRlclZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL2NvbXBvbmVudC9heGlzUG9pbnRlci9CYXNlQXhpc1BvaW50ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL2NvbXBvbmVudC9heGlzUG9pbnRlci9DYXJ0ZXNpYW5BeGlzUG9pbnRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvY29tcG9uZW50L2F4aXNQb2ludGVyL2F4aXNUcmlnZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9jb21wb25lbnQvYXhpc1BvaW50ZXIvZmluZFBvaW50RnJvbVNlcmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvY29tcG9uZW50L2F4aXNQb2ludGVyL2dsb2JhbExpc3RlbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9jb21wb25lbnQvYXhpc1BvaW50ZXIvbW9kZWxIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL2NvbXBvbmVudC9heGlzUG9pbnRlci92aWV3SGVscGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9jb21wb25lbnQvZGF0YXNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvY29tcG9uZW50L2hlbHBlci9saXN0Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9jb21wb25lbnQvaGVscGVyL3NlbGVjdGFibGVNaXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvY29tcG9uZW50L2xlZ2VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvY29tcG9uZW50L2xlZ2VuZC9MZWdlbmRNb2RlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvY29tcG9uZW50L2xlZ2VuZC9MZWdlbmRWaWV3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9jb21wb25lbnQvbGVnZW5kL2xlZ2VuZEFjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvY29tcG9uZW50L2xlZ2VuZC9sZWdlbmRGaWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL2NvbXBvbmVudC90aXRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvY29tcG9uZW50L3Rvb2x0aXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL2NvbXBvbmVudC90b29sdGlwL1Rvb2x0aXBDb250ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9jb21wb25lbnQvdG9vbHRpcC9Ub29sdGlwTW9kZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL2NvbXBvbmVudC90b29sdGlwL1Rvb2x0aXBWaWV3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL2Nvb3JkL0F4aXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL2Nvb3JkL2F4aXNIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL2Nvb3JkL2F4aXNNb2RlbENvbW1vbk1peGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9jb29yZC9heGlzVGlja0xhYmVsQnVpbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvY29vcmQvY2FydGVzaWFuL2NhcnRlc2lhbkF4aXNIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL2Nvb3JkL2dlby9SZWdpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL2Nvb3JkL2dlby9wYXJzZUdlb0pzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL2RhdGEvRGF0YURpZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvZGF0YS9MaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9kYXRhL09yZGluYWxNZXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9kYXRhL1NvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvZGF0YS9oZWxwZXIvY29tcGxldGVEaW1lbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9kYXRhL2hlbHBlci9jcmVhdGVEaW1lbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9kYXRhL2hlbHBlci9kYXRhUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL2RhdGEvaGVscGVyL2RhdGFTdGFja0hlbHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvZGF0YS9oZWxwZXIvZGltZW5zaW9uSGVscGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9kYXRhL2hlbHBlci9zb3VyY2VIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL2RhdGEvaGVscGVyL3NvdXJjZVR5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL2VjaGFydHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvaGVscGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9sYW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9sYXlvdXQvYmFyR3JpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvbG9hZGluZy9kZWZhdWx0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9tb2RlbC9Db21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL21vZGVsL0dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvbW9kZWwvTW9kZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL21vZGVsL09wdGlvbk1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL21vZGVsL1Nlcmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvbW9kZWwvZ2xvYmFsRGVmYXVsdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvbW9kZWwvbWl4aW4vYXJlYVN0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9tb2RlbC9taXhpbi9ib3hMYXlvdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL21vZGVsL21peGluL2NvbG9yUGFsZXR0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvbW9kZWwvbWl4aW4vZGF0YUZvcm1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvbW9kZWwvbWl4aW4vaXRlbVN0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9tb2RlbC9taXhpbi9saW5lU3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL21vZGVsL21peGluL21ha2VTdHlsZU1hcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvbW9kZWwvbWl4aW4vdGV4dFN0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9tb2RlbC9yZWZlckhlbHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvcHJlcHJvY2Vzc29yL2JhY2t3YXJkQ29tcGF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9wcmVwcm9jZXNzb3IvaGVscGVyL2NvbXBhdFN0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi9wcm9jZXNzb3IvZGF0YUZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvcHJvY2Vzc29yL2RhdGFTdGFjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvc2NhbGUvSW50ZXJ2YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL3NjYWxlL0xvZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvc2NhbGUvT3JkaW5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvc2NhbGUvU2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL3NjYWxlL1RpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL3NjYWxlL2hlbHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvc3RyZWFtL1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvc3RyZWFtL3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL3RoZW1lL2RhcmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL3RoZW1lL2xpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi91dGlsL2NsYXp6LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi91dGlsL2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvdXRpbC9mb3JtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL3V0aWwvZ3JhcGhpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvdXRpbC9sYXlvdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL3V0aWwvbW9kZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL3V0aWwvbnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi91dGlsL3N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvdXRpbC90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvdmlldy9DaGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9saWIvdmlldy9Db21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbGliL3Zpc3VhbC9hcmlhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi92aXN1YWwvZGF0YUNvbG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY2hhcnRzL2xpYi92aXN1YWwvc2VyaWVzQ29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2FtZC1vcHRpb25zLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL0VsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL0hhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL0xheWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9QYWludGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9TdG9yYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9hbmltYXRpb24vQW5pbWF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9hbmltYXRpb24vQW5pbWF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL2FuaW1hdGlvbi9DbGlwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9hbmltYXRpb24vZWFzaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9hbmltYXRpb24vcmVxdWVzdEFuaW1hdGlvbkZyYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL2NvbnRhaW4vYXJjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9jb250YWluL2N1YmljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9jb250YWluL2xpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL2NvbnRhaW4vcGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvY29udGFpbi9wb2x5Z29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9jb250YWluL3F1YWRyYXRpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvY29udGFpbi90ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9jb250YWluL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL2NvbnRhaW4vd2luZGluZ0xpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL2NvbnRhaW5lci9Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvY29yZS9Cb3VuZGluZ1JlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL2NvcmUvR2VzdHVyZU1nci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvY29yZS9MUlUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL2NvcmUvUGF0aFByb3h5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9jb3JlL2Jib3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL2NvcmUvY3VydmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL2NvcmUvZW52LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9jb3JlL2V2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9jb3JlL2d1aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL2NvcmUvbG9nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9jb3JlL21hdHJpeC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvY29yZS90aW1zb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9jb3JlL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL2NvcmUvdmVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9kb20vSGFuZGxlclByb3h5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9ncmFwaGljL0NvbXBvdW5kUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvZ3JhcGhpYy9EaXNwbGF5YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvZ3JhcGhpYy9HcmFkaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvZ3JhcGhpYy9JbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvZ3JhcGhpYy9JbmNyZW1lbnRhbERpc3BsYXlhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9ncmFwaGljL0xpbmVhckdyYWRpZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9ncmFwaGljL1BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL2dyYXBoaWMvUGF0dGVybi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvZ3JhcGhpYy9SYWRpYWxHcmFkaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvZ3JhcGhpYy9TdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvZ3JhcGhpYy9UZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9ncmFwaGljL2hlbHBlci9maXhDbGlwV2l0aFNoYWRvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvZ3JhcGhpYy9oZWxwZXIvZml4U2hhZG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9ncmFwaGljL2hlbHBlci9pbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvZ3JhcGhpYy9oZWxwZXIvcG9seS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvZ3JhcGhpYy9oZWxwZXIvcm91bmRSZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9ncmFwaGljL2hlbHBlci9zbW9vdGhCZXppZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL2dyYXBoaWMvaGVscGVyL3Ntb290aFNwbGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvZ3JhcGhpYy9oZWxwZXIvdGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvZ3JhcGhpYy9taXhpbi9SZWN0VGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvZ3JhcGhpYy9zaGFwZS9BcmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL2dyYXBoaWMvc2hhcGUvQmV6aWVyQ3VydmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL2dyYXBoaWMvc2hhcGUvQ2lyY2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9ncmFwaGljL3NoYXBlL0xpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL2dyYXBoaWMvc2hhcGUvUG9seWdvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvZ3JhcGhpYy9zaGFwZS9Qb2x5bGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvZ3JhcGhpYy9zaGFwZS9SZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9ncmFwaGljL3NoYXBlL1JpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL2dyYXBoaWMvc2hhcGUvU2VjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9taXhpbi9BbmltYXRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9taXhpbi9EcmFnZ2FibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL21peGluL0V2ZW50ZnVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi9taXhpbi9UcmFuc2Zvcm1hYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi90b29sL2NvbG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96cmVuZGVyL2xpYi90b29sL3BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3pyZW5kZXIvbGliL3Rvb2wvdHJhbnNmb3JtUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvenJlbmRlci9saWIvenJlbmRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaWNvbmZvbnQvaWNvbmZvbnQuY3NzPzRlMWYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ljb25mb250L2ljb25mb250LmVvdCIsIndlYnBhY2s6Ly8vLi9zcmMvaWNvbmZvbnQvaWNvbmZvbnQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9pY29uZm9udC9pY29uZm9udC50dGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmNzcz9kOGMzIiwid2VicGFjazovLy8uL3NyYy9sb2dpbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2V0RGV2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbG9hZC5naWYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xvZ28uc3ZnIl0sIm5hbWVzIjpbInBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrIiwid2luZG93IiwiY2h1bmtJZCIsIm1vcmVNb2R1bGVzIiwiaG90QXZhaWxhYmxlRmlsZXNNYXAiLCJob3RSZXF1ZXN0ZWRGaWxlc01hcCIsIm1vZHVsZUlkIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaG90VXBkYXRlIiwiaG90V2FpdGluZ0ZpbGVzIiwiaG90Q2h1bmtzTG9hZGluZyIsImhvdFVwZGF0ZURvd25sb2FkZWQiLCJob3RBZGRVcGRhdGVDaHVuayIsImhvdEN1cnJlbnRDaGlsZE1vZHVsZSIsImhvdEFwcGx5T25VcGRhdGUiLCJob3RDdXJyZW50SGFzaCIsImhvdFJlcXVlc3RUaW1lb3V0IiwiaG90Q3VycmVudE1vZHVsZURhdGEiLCJob3RDdXJyZW50UGFyZW50cyIsImhvdEN1cnJlbnRQYXJlbnRzVGVtcCIsImhvdENyZWF0ZVJlcXVpcmUiLCJtZSIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZm4iLCJyZXF1ZXN0IiwiaG90IiwiYWN0aXZlIiwicGFyZW50cyIsImluZGV4T2YiLCJwdXNoIiwiY2hpbGRyZW4iLCJjb25zb2xlIiwid2FybiIsIk9iamVjdEZhY3RvcnkiLCJuYW1lIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInNldCIsInZhbHVlIiwiZGVmaW5lUHJvcGVydHkiLCJlIiwiaG90U3RhdHVzIiwiaG90U2V0U3RhdHVzIiwidGhlbiIsImZpbmlzaENodW5rTG9hZGluZyIsImVyciIsImhvdFdhaXRpbmdGaWxlc01hcCIsImhvdEVuc3VyZVVwZGF0ZUNodW5rIiwidCIsIm1vZGUiLCJob3RTdGF0dXNIYW5kbGVycyIsIm5ld1N0YXR1cyIsImkiLCJsZW5ndGgiLCJob3REZWZlcnJlZCIsImhvdFVwZGF0ZU5ld0hhc2giLCJ0b01vZHVsZUlkIiwiaWQiLCJob3RDaGVjayIsImFwcGx5IiwiRXJyb3IiLCJyZXF1ZXN0VGltZW91dCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiWE1MSHR0cFJlcXVlc3QiLCJyZXF1ZXN0UGF0aCIsInAiLCJvcGVuIiwidGltZW91dCIsInNlbmQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwidXBkYXRlIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiaG90RG93bmxvYWRNYW5pZmVzdCIsImMiLCJoIiwicHJvbWlzZSIsImhlYWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsImNoYXJzZXQiLCJzcmMiLCJhcHBlbmRDaGlsZCIsImhvdERvd25sb2FkVXBkYXRlQ2h1bmsiLCJkZWZlcnJlZCIsImhvdEFwcGx5IiwicmVzdWx0Iiwib3V0ZGF0ZWRNb2R1bGVzIiwib3B0aW9ucyIsImNiIiwiaiIsIm1vZHVsZSIsImdldEFmZmVjdGVkU3R1ZmYiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJzbGljZSIsIm1hcCIsImNoYWluIiwicXVldWVJdGVtIiwicG9wIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJ0eXBlIiwiX21haW4iLCJwYXJlbnRJZCIsInBhcmVudCIsIl9kZWNsaW5lZERlcGVuZGVuY2llcyIsImNvbmNhdCIsIl9hY2NlcHRlZERlcGVuZGVuY2llcyIsImFkZEFsbFRvU2V0IiwiYSIsImIiLCJpdGVtIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsImFib3J0RXJyb3IiLCJkb0FwcGx5IiwiZG9EaXNwb3NlIiwiY2hhaW5JbmZvIiwiam9pbiIsIm9uRGVjbGluZWQiLCJpZ25vcmVEZWNsaW5lZCIsIm9uVW5hY2NlcHRlZCIsImlnbm9yZVVuYWNjZXB0ZWQiLCJvbkFjY2VwdGVkIiwib25EaXNwb3NlZCIsImlkeCIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImVycm9ySGFuZGxlciIsImtleXMiLCJmb3JFYWNoIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG90RGlzcG9zZUNodW5rIiwiZGVwZW5kZW5jeSIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwiZGF0YSIsImRpc3Bvc2VIYW5kbGVycyIsIl9kaXNwb3NlSGFuZGxlcnMiLCJjaGlsZCIsInNwbGljZSIsIm1vZHVsZXMiLCJlcnJvciIsImNhbGxiYWNrcyIsIm9uRXJyb3JlZCIsImRlcGVuZGVuY3lJZCIsImlnbm9yZUVycm9yZWQiLCJlcnIyIiwib3JpZ2luYWxFcnJvciIsImV4cG9ydHMiLCJsIiwiYWNjZXB0IiwiZGVwIiwiY2FsbGJhY2siLCJkZWNsaW5lIiwiZGlzcG9zZSIsImFkZERpc3Bvc2VIYW5kbGVyIiwicmVtb3ZlRGlzcG9zZUhhbmRsZXIiLCJjaGVjayIsImFkZFN0YXR1c0hhbmRsZXIiLCJyZW1vdmVTdGF0dXNIYW5kbGVyIiwidW5kZWZpbmVkIiwiaG90Q3JlYXRlTW9kdWxlIiwibSIsImQiLCJnZXR0ZXIiLCJvIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInMiLCJlc2NhcGUiLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwiY29udGVudCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic3RyaW5naWZ5IiwidG9Db21tZW50Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwidXJsIiwidGVzdCIsInJlcGxhY2UiLCJ6clV0aWwiLCJjb29yZGluYXRlU3lzdGVtQ3JlYXRvcnMiLCJDb29yZGluYXRlU3lzdGVtTWFuYWdlciIsIl9jb29yZGluYXRlU3lzdGVtcyIsImNvbnN0cnVjdG9yIiwiZWNNb2RlbCIsImFwaSIsImNvb3JkaW5hdGVTeXN0ZW1zIiwiZWFjaCIsImNyZWF0ZXIiLCJjb29yZFN5cyIsImdldENvb3JkaW5hdGVTeXN0ZW1zIiwicmVnaXN0ZXIiLCJjb29yZGluYXRlU3lzdGVtQ3JlYXRvciIsIl9kZWZhdWx0IiwiZWNoYXJ0c0FQSUxpc3QiLCJjaGFydEluc3RhbmNlIiwiZWNoYXJ0cyIsInNlcmllc1R5cGUiLCJhY3Rpb25JbmZvcyIsImFjdGlvbkluZm8iLCJyZWdpc3RlckFjdGlvbiIsInBheWxvYWQiLCJzZWxlY3RlZCIsImVhY2hDb21wb25lbnQiLCJtYWluVHlwZSIsInN1YlR5cGUiLCJxdWVyeSIsInNlcmllc01vZGVsIiwibWV0aG9kIiwiZGF0YUluZGV4IiwiZ2V0RGF0YSIsImdldE5hbWUiLCJpc1NlbGVjdGVkIiwiTGlzdCIsImNyZWF0ZURpbWVuc2lvbnMiLCJTT1VSQ0VfRk9STUFUX09SSUdJTkFMIiwiZ2V0RGltZW5zaW9uVHlwZUJ5QXhpcyIsImdldERhdGFJdGVtVmFsdWUiLCJDb29yZGluYXRlU3lzdGVtIiwiZ2V0Q29vcmRTeXNEZWZpbmVCeVNlcmllcyIsIlNvdXJjZSIsImVuYWJsZURhdGFTdGFjayIsIm9wdCIsImlzSW5zdGFuY2UiLCJzZXJpZXNEYXRhVG9Tb3VyY2UiLCJjb29yZFN5c0RpbURlZnMiLCJjb29yZFN5c05hbWUiLCJyZWdpc3RlcmVkQ29vcmRTeXMiLCJjb29yZFN5c0RlZmluZSIsImNvb3JkU3lzRGltcyIsImRpbSIsImRpbUluZm8iLCJheGlzTW9kZWwiLCJheGlzTWFwIiwiYXhpc1R5cGUiLCJnZXREaW1lbnNpb25zSW5mbyIsImRpbWVuc2lvbnMiLCJmaXJzdENhdGVnb3J5RGltSW5kZXgiLCJoYXNOYW1lRW5jb2RlIiwiZGltSW5mb0xpc3QiLCJjb29yZERpbWVuc2lvbnMiLCJnZW5lcmF0ZUNvb3JkIiwiZGltSW5kZXgiLCJjb29yZERpbSIsImNhdGVnb3J5QXhpc01vZGVsIiwiY2F0ZWdvcnlBeGlzTWFwIiwib3JkaW5hbE1ldGEiLCJnZXRPcmRpbmFsTWV0YSIsIm90aGVyRGltcyIsIml0ZW1OYW1lIiwic3RhY2tDYWxjdWxhdGlvbkluZm8iLCJzZXRDYWxjdWxhdGlvbkluZm8iLCJkaW1WYWx1ZUdldHRlciIsInNvdXJjZUZvcm1hdCIsInNhbXBsZUl0ZW0iLCJmaXJzdERhdGFOb3ROdWxsIiwiaXNBcnJheSIsImlzTmVlZENvbXBsZXRlT3JkaW5hbERhdGEiLCJpdGVtT3B0IiwiZGltTmFtZSIsImRlZmF1bHREaW1WYWx1ZUdldHRlciIsImhhc0l0ZW1PcHRpb24iLCJpbml0RGF0YSIsIl91dGlsIiwiZXh0ZW5kIiwibmFtZUxpc3QiLCJnZXRTb3VyY2UiLCJkaW1lbnNpb25zSW5mbyIsIm1ha2VJbm5lciIsImlubmVyIiwiZmllbGRzIiwicGlwZWxpbmVDb250ZXh0Iiwib3JpZ2luYWxMYXJnZSIsImxhcmdlIiwib3JpZ2luYWxQcm9ncmVzc2l2ZSIsInByb2dyZXNzaXZlUmVuZGVyIiwicHJvZ3Jlc3NpdmUiLCJjcmVhdGVEYXRhU2VsZWN0QWN0aW9uIiwiZGF0YUNvbG9yIiwicGllTGF5b3V0IiwiZGF0YUZpbHRlciIsImV2ZW50IiwicmVnaXN0ZXJWaXN1YWwiLCJyZWdpc3RlckxheW91dCIsImN1cnJ5IiwicmVnaXN0ZXJQcm9jZXNzb3IiLCJjcmVhdGVMaXN0U2ltcGx5IiwibW9kZWxVdGlsIiwiZ2V0UGVyY2VudFdpdGhQcmVjaXNpb24iLCJkYXRhU2VsZWN0YWJsZU1peGluIiwicmV0cmlldmVSYXdBdHRyIiwiUGllU2VyaWVzIiwiZXh0ZW5kU2VyaWVzTW9kZWwiLCJpbml0Iiwib3B0aW9uIiwic3VwZXJBcHBseSIsImFyZ3VtZW50cyIsImxlZ2VuZERhdGFQcm92aWRlciIsImdldFJhd0RhdGEiLCJ1cGRhdGVTZWxlY3RlZE1hcCIsIl9jcmVhdGVTZWxlY3RhYmxlTGlzdCIsIl9kZWZhdWx0TGFiZWxMaW5lIiwibWVyZ2VPcHRpb24iLCJuZXdPcHRpb24iLCJzdXBlckNhbGwiLCJnZXRJbml0aWFsRGF0YSIsInZhbHVlRGltIiwibWFwRGltZW5zaW9uIiwidGFyZ2V0TGlzdCIsImxlbiIsImNvdW50IiwiZ2V0RGF0YVBhcmFtcyIsInBhcmFtcyIsInZhbHVlTGlzdCIsInBlcmNlbnQiLCJob3N0TW9kZWwiLCIkdmFycyIsImRlZmF1bHRFbXBoYXNpcyIsImxhYmVsTGluZU5vcm1hbE9wdCIsImxhYmVsTGluZSIsImxhYmVsTGluZUVtcGhhc2lzT3B0IiwiZW1waGFzaXMiLCJzaG93IiwibGFiZWwiLCJkZWZhdWx0T3B0aW9uIiwiemxldmVsIiwieiIsImxlZ2VuZEhvdmVyTGluayIsImhvdmVyQW5pbWF0aW9uIiwiY2VudGVyIiwicmFkaXVzIiwiY2xvY2t3aXNlIiwic3RhcnRBbmdsZSIsIm1pbkFuZ2xlIiwic2VsZWN0ZWRPZmZzZXQiLCJob3Zlck9mZnNldCIsImF2b2lkTGFiZWxPdmVybGFwIiwicGVyY2VudFByZWNpc2lvbiIsInN0aWxsU2hvd1plcm9TdW0iLCJyb3RhdGUiLCJwb3NpdGlvbiIsImxlbmd0aDIiLCJzbW9vdGgiLCJsaW5lU3R5bGUiLCJ3aWR0aCIsIml0ZW1TdHlsZSIsImJvcmRlcldpZHRoIiwiYW5pbWF0aW9uVHlwZSIsImFuaW1hdGlvbkVhc2luZyIsIm1peGluIiwiZ3JhcGhpYyIsIkNoYXJ0VmlldyIsInVwZGF0ZURhdGFTZWxlY3RlZCIsInVpZCIsImhhc0FuaW1hdGlvbiIsImRpc3BhdGNoQWN0aW9uIiwiZnJvbSIsInNlcmllc0lkIiwidG9nZ2xlSXRlbVNlbGVjdGVkIiwiZ2V0SXRlbUdyYXBoaWNFbCIsImdldEl0ZW1MYXlvdXQiLCJlbCIsImxheW91dCIsIm1pZEFuZ2xlIiwiZW5kQW5nbGUiLCJkeCIsIk1hdGgiLCJjb3MiLCJkeSIsInNpbiIsIm9mZnNldCIsImFuaW1hdGUiLCJ3aGVuIiwic3RhcnQiLCJhdHRyIiwiUGllUGllY2UiLCJHcm91cCIsInNlY3RvciIsIlNlY3RvciIsInoyIiwicG9seWxpbmUiLCJQb2x5bGluZSIsInRleHQiLCJUZXh0Iiwib25FbXBoYXNpcyIsImlnbm9yZSIsImhvdmVySWdub3JlIiwib25Ob3JtYWwiLCJub3JtYWxJZ25vcmUiLCJhZGQiLCJ1cGRhdGVEYXRhIiwib24iLCJwaWVQaWVjZVByb3RvIiwiZmlyc3RDcmVhdGUiLCJjaGlsZEF0IiwiaXRlbU1vZGVsIiwiZ2V0SXRlbU1vZGVsIiwic2VjdG9yU2hhcGUiLCJzZXRTaGFwZSIsImdldFNoYWxsb3ciLCJzaGFwZSIsInIwIiwiaW5pdFByb3BzIiwidXBkYXRlUHJvcHMiLCJ2aXN1YWxDb2xvciIsImdldEl0ZW1WaXN1YWwiLCJ1c2VTdHlsZSIsImRlZmF1bHRzIiwibGluZUpvaW4iLCJmaWxsIiwiZ2V0TW9kZWwiLCJnZXRJdGVtU3R5bGUiLCJob3ZlclN0eWxlIiwiY3Vyc29yU3R5bGUiLCJzdG9wQW5pbWF0aW9uIiwiYW5pbWF0ZVRvIiwib2ZmIiwiaXNBbmltYXRpb25FbmFibGVkIiwiX3VwZGF0ZUxhYmVsIiwic2V0SG92ZXJTdHlsZSIsImxhYmVsVGV4dCIsImxhYmVsTGF5b3V0IiwicG9pbnRzIiwibGluZVBvaW50cyIsIngiLCJ5Iiwic3R5bGUiLCJyb3RhdGlvbiIsIm9yaWdpbiIsImxhYmVsTW9kZWwiLCJsYWJlbEhvdmVyTW9kZWwiLCJsYWJlbExpbmVNb2RlbCIsImxhYmVsTGluZUhvdmVyTW9kZWwiLCJzZXRMYWJlbFN0eWxlIiwibGFiZWxGZXRjaGVyIiwibGFiZWxEYXRhSW5kZXgiLCJkZWZhdWx0VGV4dCIsImF1dG9Db2xvciIsInVzZUluc2lkZVN0eWxlIiwiaW5zaWRlIiwidGV4dEFsaWduIiwidGV4dFZlcnRpY2FsQWxpZ24iLCJ2ZXJ0aWNhbEFsaWduIiwib3BhY2l0eSIsInNldFN0eWxlIiwic3Ryb2tlIiwiZ2V0TGluZVN0eWxlIiwiaW5oZXJpdHMiLCJzZWN0b3JHcm91cCIsIl9zZWN0b3JHcm91cCIsInJlbmRlciIsIm9sZERhdGEiLCJfZGF0YSIsImdyb3VwIiwiaXNGaXJzdFJlbmRlciIsIm9uU2VjdG9yQ2xpY2siLCJzZWxlY3RlZE1vZGUiLCJkaWZmIiwicGllUGllY2UiLCJlYWNoQ2hpbGQiLCJzZXRJdGVtR3JhcGhpY0VsIiwibmV3SWR4Iiwib2xkSWR4IiwicmVtb3ZlIiwiZXhlY3V0ZSIsIm1heCIsImdldFdpZHRoIiwiZ2V0SGVpZ2h0IiwicmVtb3ZlQ2xpcFBhdGgiLCJzZXRDbGlwUGF0aCIsIl9jcmVhdGVDbGlwUGF0aCIsImN4IiwiY3kiLCJjbGlwUGF0aCIsIlBJIiwiY29udGFpblBvaW50IiwicG9pbnQiLCJpdGVtTGF5b3V0Iiwic3FydCIsInRleHRDb250YWluIiwiYWRqdXN0U2luZ2xlU2lkZSIsImRpciIsInZpZXdXaWR0aCIsInZpZXdIZWlnaHQiLCJzaGlmdERvd24iLCJlbmQiLCJkZWx0YSIsImhlaWdodCIsInNoaWZ0VXAiLCJjaGFuZ2VYIiwiaXNEb3duTGlzdCIsImxhc3REZWx0YVgiLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJkZWx0YVkiLCJhYnMiLCJsZW4yIiwiZGVsdGFYIiwic29ydCIsImxhc3RZIiwidXBMaXN0IiwiZG93bkxpc3QiLCJsYWJlbExheW91dExpc3QiLCJoYXNMYWJlbFJvdGF0ZSIsInRleHRYIiwidGV4dFkiLCJsYWJlbFBvc2l0aW9uIiwibGFiZWxMaW5lTGVuIiwibGFiZWxMaW5lTGVuMiIsImlzTGFiZWxJbnNpZGUiLCJ4MSIsInkxIiwieDIiLCJ5MiIsIngzIiwiZm9udCIsImdldEZvbnQiLCJsYWJlbFJvdGF0ZSIsImdldEZvcm1hdHRlZExhYmVsIiwidGV4dFJlY3QiLCJnZXRCb3VuZGluZ1JlY3QiLCJsZWZ0TGlzdCIsInJpZ2h0TGlzdCIsImRpc3QiLCJhdm9pZE92ZXJsYXAiLCJfbnVtYmVyIiwicGFyc2VQZXJjZW50IiwibGluZWFyTWFwIiwiUEkyIiwiUkFESUFOIiwiZWFjaFNlcmllc0J5VHlwZSIsInNpemUiLCJtaW4iLCJ2YWxpZERhdGFDb3VudCIsImlzTmFOIiwic3VtIiwiZ2V0U3VtIiwidW5pdFJhZGlhbiIsInJvc2VUeXBlIiwiZXh0ZW50IiwiZ2V0RGF0YUV4dGVudCIsInJlc3RBbmdsZSIsInZhbHVlU3VtTGFyZ2VyVGhhbk1pbkFuZ2xlIiwiY3VycmVudEFuZ2xlIiwiYW5nbGUiLCJzZXRJdGVtTGF5b3V0IiwiTmFOIiwicmV0cmlldmUiLCJmb3JtYXRVdGlsIiwiTW9kZWwiLCJpc1JhZGlhbkFyb3VuZFplcm8iLCJyZW1SYWRpYW4iLCJjcmVhdGVTeW1ib2wiLCJtYXRyaXhVdGlsIiwidjJBcHBseVRyYW5zZm9ybSIsImFwcGx5VHJhbnNmb3JtIiwibWFrZUF4aXNFdmVudERhdGFCYXNlIiwiZXZlbnREYXRhIiwiY29tcG9uZW50VHlwZSIsImNvbXBvbmVudEluZGV4IiwiQXhpc0J1aWxkZXIiLCJsYWJlbE9mZnNldCIsIm5hbWVEaXJlY3Rpb24iLCJ0aWNrRGlyZWN0aW9uIiwibGFiZWxEaXJlY3Rpb24iLCJzaWxlbnQiLCJkdW1iR3JvdXAiLCJ1cGRhdGVUcmFuc2Zvcm0iLCJfdHJhbnNmb3JtIiwidHJhbnNmb3JtIiwiX2R1bWJHcm91cCIsImhhc0J1aWxkZXIiLCJidWlsZGVycyIsImdldEdyb3VwIiwiYXhpc0xpbmUiLCJheGlzIiwiZ2V0RXh0ZW50IiwibWF0cml4IiwicHQxIiwicHQyIiwibGluZUNhcCIsIkxpbmUiLCJzdWJQaXhlbE9wdGltaXplTGluZSIsImFuaWQiLCJzdHJva2VDb250YWluVGhyZXNob2xkIiwiYXJyb3dzIiwiYXJyb3dTaXplIiwiYXJyb3dPZmZzZXQiLCJzeW1ib2xXaWR0aCIsInN5bWJvbEhlaWdodCIsImluZGV4Iiwic3ltYm9sIiwicG9zIiwiYXhpc1RpY2tMYWJlbCIsInRpY2tFbHMiLCJheGlzQnVpbGRlciIsInNjYWxlIiwiaXNCbGFuayIsInRpY2tNb2RlbCIsImxpbmVTdHlsZU1vZGVsIiwidGlja0xlbiIsInRpY2tzQ29vcmRzIiwiZ2V0VGlja3NDb29yZHMiLCJ0aWNrQ29vcmQiLCJjb29yZCIsInRpY2tFbCIsInRpY2tWYWx1ZSIsImJ1aWxkQXhpc1RpY2siLCJsYWJlbEVscyIsInNob3dNaW5MYWJlbCIsInNob3dNYXhMYWJlbCIsImZpcnN0TGFiZWwiLCJuZXh0TGFiZWwiLCJsYXN0TGFiZWwiLCJwcmV2TGFiZWwiLCJmaXJzdFRpY2siLCJuZXh0VGljayIsImxhc3RUaWNrIiwicHJldlRpY2siLCJpZ25vcmVFbCIsImlzVHdvTGFiZWxPdmVybGFwcGVkIiwiZml4TWluTWF4TGFiZWxTaG93IiwiYXhpc0xhYmVsU2hvdyIsImxhYmVsTWFyZ2luIiwibGFiZWxzIiwiZ2V0Vmlld0xhYmVscyIsImxhYmVsUm90YXRpb24iLCJpbm5lclRleHRMYXlvdXQiLCJyYXdDYXRlZ29yeURhdGEiLCJnZXRDYXRlZ29yaWVzIiwiaXNTaWxlbnQiLCJ0cmlnZ2VyRXZlbnQiLCJsYWJlbEl0ZW0iLCJmb3JtYXR0ZWRMYWJlbCIsInJhd0xhYmVsIiwiaXRlbUxhYmVsTW9kZWwiLCJ0ZXh0U3R5bGUiLCJ0ZXh0Q29sb3IiLCJnZXRUZXh0Q29sb3IiLCJkYXRhVG9Db29yZCIsInRleHRFbCIsInNldFRleHRTdHlsZSIsInRleHRGaWxsIiwidGFyZ2V0VHlwZSIsImRlY29tcG9zZVRyYW5zZm9ybSIsImJ1aWxkQXhpc0xhYmVsIiwiYXhpc05hbWUiLCJheGlzTmFtZUF2YWlsYWJsZVdpZHRoIiwibmFtZUxvY2F0aW9uIiwidGV4dFN0eWxlTW9kZWwiLCJnYXAiLCJnYXBTaWduYWwiLCJpc05hbWVMb2NhdGlvbkNlbnRlciIsIm5hbWVSb3RhdGlvbiIsInRleHRQb3NpdGlvbiIsInRleHRSb3RhdGUiLCJyb3RhdGlvbkRpZmYiLCJpbnZlcnNlIiwib25MZWZ0IiwiZW5kVGV4dExheW91dCIsImlzRmluaXRlIiwidGV4dEZvbnQiLCJ0cnVuY2F0ZU9wdCIsImVsbGlwc2lzIiwibWF4V2lkdGgiLCJuYW1lVHJ1bmNhdGVNYXhXaWR0aCIsInRydW5jYXRlZFRleHQiLCJ0cnVuY2F0ZVRleHQiLCJtaW5DaGFyIiwicGxhY2Vob2xkZXIiLCJ0b29sdGlwT3B0IiwiZm9ybWF0dGVyUGFyYW1zIiwiX19mdWxsVGV4dCIsIl9fdHJ1bmNhdGVkVGV4dCIsInRvb2x0aXAiLCJmb3JtYXR0ZXIiLCJheGlzUm90YXRpb24iLCJ0ZXh0Um90YXRpb24iLCJkaXJlY3Rpb24iLCJjdXJyZW50IiwibmV4dCIsImZpcnN0UmVjdCIsImNsb25lIiwibmV4dFJlY3QiLCJtUm90YXRpb25CYWNrIiwiaWRlbnRpdHkiLCJtdWwiLCJnZXRMb2NhbFRyYW5zZm9ybSIsImludGVyc2VjdCIsIl9fREVWX18iLCJheGlzUG9pbnRlck1vZGVsSGVscGVyIiwiQXhpc1ZpZXciLCJleHRlbmRDb21wb25lbnRWaWV3IiwiX2F4aXNQb2ludGVyIiwiYXhpc1BvaW50ZXJDbGFzcyIsImZpeFZhbHVlIiwidXBkYXRlQXhpc1BvaW50ZXIiLCJmb3JjZSIsImF4aXNQb2ludGVyIiwiZGlzcG9zZUF4aXNQb2ludGVyIiwiYXhpc1ZpZXciLCJmb3JjZVJlbmRlciIsIkNsYXp6IiwiZ2V0QXhpc1BvaW50ZXJDbGFzcyIsImF4aXNQb2ludGVyTW9kZWwiLCJnZXRBeGlzUG9pbnRlck1vZGVsIiwiYXhpc1BvaW50ZXJDbGF6eiIsInJlZ2lzdGVyQXhpc1BvaW50ZXJDbGFzcyIsImNsYXp6IiwiYXhpc1RyaWdnZXIiLCJyZWdpc3RlclByZXByb2Nlc3NvciIsImxpbmsiLCJQUklPUklUWSIsIlBST0NFU1NPUiIsIlNUQVRJU1RJQyIsImdldENvbXBvbmVudCIsImNvb3JkU3lzQXhlc0luZm8iLCJjb2xsZWN0IiwiZXh0ZW5kQ29tcG9uZW50TW9kZWwiLCJ0cmlnZ2VyT24iLCJzbmFwIiwidHJpZ2dlclRvb2x0aXAiLCJhbmltYXRpb24iLCJhbmltYXRpb25EdXJhdGlvblVwZGF0ZSIsImNvbG9yIiwic2hhZG93U3R5bGUiLCJwcmVjaXNpb24iLCJtYXJnaW4iLCJwYWRkaW5nIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyQ29sb3IiLCJzaGFkb3dCbHVyIiwic2hhZG93Q29sb3IiLCJoYW5kbGUiLCJpY29uIiwic2hhZG93T2Zmc2V0WCIsInNoYWRvd09mZnNldFkiLCJ0aHJvdHRsZSIsImdsb2JhbExpc3RlbmVyIiwiQXhpc1BvaW50ZXJWaWV3IiwiZ2xvYmFsQXhpc1BvaW50ZXJNb2RlbCIsImdsb2JhbFRvb2x0aXBNb2RlbCIsImN1cnJUcmlnZ2VyIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJ1bnJlZ2lzdGVyIiwiZ2V0WnIiLCJfbW9kZWwiLCJjbGF6elV0aWwiLCJldmVudFRvb2wiLCJ0aHJvdHRsZVV0aWwiLCJCYXNlQXhpc1BvaW50ZXIiLCJhbmltYXRpb25Nb2RlbCIsIm1vdmVBbmltYXRpb24iLCJwcm9wcyIsInByb3BzRXF1YWwiLCJsYXN0UHJvcHMiLCJuZXdQcm9wcyIsImlzT2JqZWN0IiwiZXF1YWxzIiwibGFzdFByb3AiLCJ1cGRhdGVMYWJlbFNob3dIaWRlIiwibGFiZWxFbCIsImdldEhhbmRsZVRyYW5zUHJvcHMiLCJ0cmFucyIsInVwZGF0ZU1hbmRhdG9yeVByb3BzIiwidHJhdmVyc2UiLCJfZ3JvdXAiLCJfbGFzdEdyYXBoaWNLZXkiLCJfaGFuZGxlIiwiX2RyYWdnaW5nIiwiX2xhc3RWYWx1ZSIsIl9sYXN0U3RhdHVzIiwiX3BheWxvYWRJbmZvIiwiYW5pbWF0aW9uVGhyZXNob2xkIiwiX2F4aXNNb2RlbCIsIl9heGlzUG9pbnRlck1vZGVsIiwiX2FwaSIsImhpZGUiLCJlbE9wdGlvbiIsIm1ha2VFbE9wdGlvbiIsImdyYXBoaWNLZXkiLCJjbGVhciIsIl9tb3ZlQW5pbWF0aW9uIiwiZGV0ZXJtaW5lQW5pbWF0aW9uIiwiZG9VcGRhdGVQcm9wcyIsInVwZGF0ZVBvaW50ZXJFbCIsInVwZGF0ZUxhYmVsRWwiLCJjcmVhdGVQb2ludGVyRWwiLCJjcmVhdGVMYWJlbEVsIiwiX3JlbmRlckhhbmRsZSIsImlzQ2F0ZWdvcnlBeGlzIiwidXNlU25hcCIsImdldEJhbmRXaWR0aCIsInNlcmllc0RhdGFDb3VudCIsImdldEF4aXNJbmZvIiwiYXhpc0V4dGVudCIsInBvaW50ZXJPcHRpb24iLCJwb2ludGVyIiwicG9pbnRlckVsIiwiUmVjdCIsInVwZGF0ZUhhbmRsZVRyYW5zZm9ybSIsImlzSW5pdCIsInpyIiwiaGFuZGxlTW9kZWwiLCJjcmVhdGVJY29uIiwiY3Vyc29yIiwiZHJhZ2dhYmxlIiwib25tb3VzZW1vdmUiLCJzdG9wIiwib25tb3VzZWRvd24iLCJfb25IYW5kbGVEcmFnTW92ZSIsImRyaWZ0Iiwib25kcmFnZW5kIiwiX29uSGFuZGxlRHJhZ0VuZCIsImhhbmRsZVNpemUiLCJjcmVhdGVPclVwZGF0ZSIsIl9tb3ZlSGFuZGxlVG9WYWx1ZSIsImdldEhhbmRsZVRyYW5zZm9ybSIsIl9kb0Rpc3BhdGNoQXhpc1BvaW50ZXIiLCJwYXlsb2FkSW5mbyIsImN1cnNvclBvaW50IiwidG9vbHRpcE9wdGlvbiIsImF4ZXNJbmZvIiwiYXhpc0RpbSIsImF4aXNJbmRleCIsImRvQ2xlYXIiLCJidWlsZExhYmVsIiwieHkiLCJ3aCIsInhEaW1JbmRleCIsImVuYWJsZUNsYXNzRXh0ZW5kIiwidmlld0hlbHBlciIsImNhcnRlc2lhbkF4aXNIZWxwZXIiLCJDYXJ0ZXNpYW5BeGlzUG9pbnRlciIsImdyaWQiLCJheGlzUG9pbnRlclR5cGUiLCJvdGhlckV4dGVudCIsImdldENhcnRlc2lhbiIsImdldE90aGVyQXhpcyIsImdldEdsb2JhbEV4dGVudCIsInBpeGVsVmFsdWUiLCJ0b0dsb2JhbENvb3JkIiwiZWxTdHlsZSIsImJ1aWxkRWxTdHlsZSIsInBvaW50ZXJTaGFwZUJ1aWxkZXIiLCJsYXlvdXRJbmZvIiwibW9kZWwiLCJidWlsZENhcnRlc2lhblNpbmdsZUxhYmVsRWxPcHRpb24iLCJsYWJlbEluc2lkZSIsImdldFRyYW5zZm9ybWVkUG9zaXRpb24iLCJjdXJyUG9zaXRpb24iLCJjdXJzb3JPdGhlclZhbHVlIiwiYWxpZ24iLCJsaW5lIiwidGFyZ2V0U2hhcGUiLCJtYWtlTGluZVNoYXBlIiwiZ2V0QXhpc0RpbUluZGV4Iiwic2hhZG93IiwiYmFuZFdpZHRoIiwic3BhbiIsIm1ha2VSZWN0U2hhcGUiLCJtb2RlbEhlbHBlciIsImZpbmRQb2ludEZyb21TZXJpZXMiLCJwcm9jZXNzT25BeGlzIiwiYXhpc0luZm8iLCJuZXdWYWx1ZSIsInVwZGF0ZXJzIiwiZG9udFNuYXAiLCJvdXRwdXRGaW5kZXIiLCJjb250YWluRGF0YSIsImludm9sdmVTZXJpZXMiLCJzbmFwVG9WYWx1ZSIsInBheWxvYWRCYXRjaCIsIm1pbkRpc3QiLCJtaW5EaWZmIiwic2VyaWVzTW9kZWxzIiwic2VyaWVzIiwic2VyaWVzTmVzdGVzdFZhbHVlIiwiZGF0YUluZGljZXMiLCJkYXRhRGltIiwiZ2V0QXhpc1Rvb2x0aXBEYXRhIiwibmVzdGVzdFZhbHVlIiwiaW5kaWNlc09mTmVhcmVzdCIsInNlcmllc0luZGV4IiwiZGF0YUluZGV4SW5zaWRlIiwiZ2V0UmF3SW5kZXgiLCJidWlsZFBheWxvYWRzQnlTZXJpZXMiLCJzaG93UG9pbnRlciIsInNob3dUb29sdGlwIiwic2hvd1ZhbHVlTWFwIiwiZGF0YUJ5Q29vcmRTeXMiLCJjb29yZFN5c01vZGVsIiwiY29vcmRTeXNLZXkiLCJtYWtlS2V5IiwiY29vcmRTeXNJdGVtIiwiY29vcmRTeXNJZCIsImNvb3JkU3lzSW5kZXgiLCJjb29yZFN5c1R5cGUiLCJjb29yZFN5c01haW5UeXBlIiwiZGF0YUJ5QXhpcyIsImF4aXNJZCIsInZhbHVlTGFiZWxPcHQiLCJzZXJpZXNEYXRhSW5kaWNlcyIsIm1ha2VNYXBwZXJQYXJhbSIsImlsbGVnYWxQb2ludCIsImZpbmRlciIsImlzSWxsZWdhbFBvaW50IiwiaW5wdXRBeGVzSW5mbyIsInNob3VsZEhpZGUiLCJjb29yZFN5c01hcCIsImNvb3JkU3lzQ29udGFpbnNQb2ludCIsImlucHV0QXhpc0luZm8iLCJmaW5kSW5wdXRBeGlzSW5mbyIsInZhbCIsInBvaW50VG9EYXRhIiwibGlua1RyaWdnZXJzIiwidGFyQXhpc0luZm8iLCJ0YXJLZXkiLCJsaW5rR3JvdXAiLCJzcmNBeGlzSW5mbyIsInNyY0tleSIsInNyY1ZhbEl0ZW0iLCJtYXBwZXIiLCJvdXRwdXRBeGVzSW5mbyIsInZhbEl0ZW0iLCJ1c2VIYW5kbGUiLCJ1cGRhdGVNb2RlbEFjdHVhbGx5IiwiZXNjYXBlQ29ubmVjdCIsImRpc3BhdGNoVG9vbHRpcEFjdHVhbGx5IiwibGFzdEhpZ2hsaWdodHMiLCJuZXdIaWdobGlnaHRzIiwiYmF0Y2hJdGVtIiwidG9IaWdobGlnaHQiLCJ0b0Rvd25wbGF5IiwiYmF0Y2giLCJkaXNwYXRjaEhpZ2hEb3duQWN0dWFsbHkiLCJnZXRTZXJpZXNCeUluZGV4IiwicXVlcnlEYXRhSW5kZXgiLCJjb29yZGluYXRlU3lzdGVtIiwiZ2V0VG9vbHRpcFBvc2l0aW9uIiwiZGF0YVRvUG9pbnQiLCJnZXRWYWx1ZXMiLCJyZWN0IiwiZW52Iiwib25MZWF2ZSIsInJlY29yZCIsImhhbmRsZXIiLCJkb0VudGVyIiwibm9kZSIsInJlY29yZHMiLCJ1c2VIYW5kbGVyIiwiZXZlbnRUeXBlIiwiZGlzIiwicGVuZGluZ3MiLCJzaG93VGlwIiwiaGlkZVRpcCIsInBlbmRpbmdMaXN0IiwibWFrZURpc3BhdGNoQWN0aW9uIiwiYWN0dWFsbHlQYXlsb2FkIiwic2hvd0xlbiIsImhpZGVMZW4iLCJkaXNwYXRjaFRvb2x0aXBGaW5hbGx5IiwiaW5pdGlhbGl6ZWQiLCJpbml0R2xvYmFsTGlzdGVuZXJzIiwiY2hlY2tQcm9wSW5MaW5rIiwibGlua1Byb3BWYWx1ZSIsImF4aXNQcm9wVmFsdWUiLCJpc0hhbmRsZVRyaWdnZXIiLCJzZXJpZXNJbnZvbHZlZCIsImxpbmtzT3B0aW9uIiwibGlua0dyb3VwcyIsImF4aXNQb2ludGVyRW5hYmxlZCIsImF4ZXNJbmZvSW5Db29yZFN5cyIsImJhc2VUb29sdGlwTW9kZWwiLCJnZXRBeGVzIiwic2F2ZVRvb2x0aXBBeGlzSW5mbyIsImdldFRvb2x0aXBBeGVzIiwidHJpZ2dlckF4aXMiLCJjcm9zcyIsInRvb2x0aXBBeGVzIiwiYmFzZUF4ZXMiLCJvdGhlckF4ZXMiLCJmcm9tVG9vbHRpcCIsImF4aXNQb2ludGVyU2hvdyIsInRvb2x0aXBBeGlzUG9pbnRlck1vZGVsIiwidm9sYXRpbGVPcHRpb24iLCJmaWVsZCIsImxhYmVsT3B0aW9uIiwidG9vbHRpcEF4aXNQb2ludGVyTGFiZWxTaG93IiwiY3Jvc3NTdHlsZSIsIm1ha2VBeGlzUG9pbnRlck1vZGVsIiwiZ3JvdXBJbmRleCIsImxpbmtPcHRpb24iLCJnZXRMaW5rR3JvdXBJbmRleCIsImNvbGxlY3RBeGVzSW5mbyIsImVhY2hTZXJpZXMiLCJzZXJpZXNUb29sdGlwVHJpZ2dlciIsInNlcmllc1Rvb2x0aXBTaG93IiwiZ2V0QXhpcyIsImNvbGxlY3RTZXJpZXNJbmZvIiwicmV2ZXJzZSIsImF4aXNIZWxwZXIiLCJidWlsZExhYmVsRWxPcHRpb24iLCJsYWJlbFBvcyIsImdldFZhbHVlTGFiZWwiLCJwYWRkaW5ncyIsIm5vcm1hbGl6ZUNzc0FycmF5IiwiY29uZmluZUluQ29udGFpbmVyIiwiYmdDb2xvciIsImxpbmVXaWR0aCIsImdldExhYmVsIiwiZ2V0QXhpc1Jhd1ZhbHVlIiwic2VyaWVzRGF0YSIsImlkeEl0ZW0iLCJkYXRhUGFyYW1zIiwiaXNTdHJpbmciLCJpc0Z1bmN0aW9uIiwidHJhbnNsYXRlIiwic3R5bGVNb2RlbCIsImdldEFyZWFTdHlsZSIsInRleHRMYXlvdXQiLCJwMSIsInAyIiwibWFrZVNlY3RvclNoYXBlIiwiQ29tcG9uZW50TW9kZWwiLCJDb21wb25lbnRWaWV3IiwiZGV0ZWN0U291cmNlRm9ybWF0IiwiU0VSSUVTX0xBWU9VVF9CWV9DT0xVTU4iLCJzZXJpZXNMYXlvdXRCeSIsInNvdXJjZUhlYWRlciIsIm9wdGlvblVwZGF0ZWQiLCJfbGF5b3V0IiwiZ2V0TGF5b3V0UmVjdCIsImxheW91dEJveCIsImJveCIsInBvc2l0aW9uRWxlbWVudCIsImNvbXBvbmVudE1vZGVsIiwiYm94TGF5b3V0UGFyYW1zIiwiZ2V0Qm94TGF5b3V0UGFyYW1zIiwidmlld3BvcnRTaXplIiwibWFrZUJhY2tncm91bmQiLCJfdGFyZ2V0TGlzdCIsIl9zZWxlY3RUYXJnZXRNYXAiLCJyZWR1Y2UiLCJ0YXJnZXRNYXAiLCJ0YXJnZXQiLCJjcmVhdGVIYXNoTWFwIiwic2VsZWN0IiwidW5TZWxlY3QiLCJ0b2dnbGVTZWxlY3RlZCIsImxlZ2VuZEZpbHRlciIsIkNvbXBvbmVudCIsInJlZ2lzdGVyU3ViVHlwZURlZmF1bHRlciIsImlzTmFtZVNwZWNpZmllZCIsIkxlZ2VuZE1vZGVsIiwiZGVwZW5kZW5jaWVzIiwibGF5b3V0TW9kZSIsImlnbm9yZVNpemUiLCJwYXJlbnRNb2RlbCIsIm1lcmdlRGVmYXVsdEFuZFRoZW1lIiwiX3VwZGF0ZURhdGEiLCJsZWdlbmREYXRhIiwiaGFzU2VsZWN0ZWQiLCJwb3RlbnRpYWxEYXRhIiwiYXZhaWxhYmxlTmFtZXMiLCJlYWNoUmF3U2VyaWVzIiwiaXNQb3RlbnRpYWwiLCJzZXJpZXNOYW1lIiwibmFtZXMiLCJtYXBBcnJheSIsImlzU2VyaWVzRmlsdGVyZWQiLCJfYXZhaWxhYmxlTmFtZXMiLCJyYXdEYXRhIiwiZGF0YUl0ZW0iLCJvcmllbnQiLCJsZWZ0IiwidG9wIiwiYm9yZGVyUmFkaXVzIiwiaXRlbUdhcCIsIml0ZW1XaWR0aCIsIml0ZW1IZWlnaHQiLCJpbmFjdGl2ZUNvbG9yIiwibGF5b3V0VXRpbCIsIm5ld2xpbmVEaXNhYmxlZCIsIl9jb250ZW50R3JvdXAiLCJfYmFja2dyb3VuZEVsIiwiZ2V0Q29udGVudEdyb3VwIiwibGVnZW5kTW9kZWwiLCJyZXNldElubmVyIiwiaXRlbUFsaWduIiwicmVuZGVySW5uZXIiLCJwb3NpdGlvbkluZm8iLCJtYXhTaXplIiwibWFpblJlY3QiLCJsYXlvdXRJbm5lciIsImxheW91dFJlY3QiLCJyZW1vdmVBbGwiLCJjb250ZW50R3JvdXAiLCJsZWdlbmREcmF3bk1hcCIsInNlbGVjdE1vZGUiLCJleGNsdWRlU2VyaWVzSWQiLCJnZXRTZXJpZXNCeU5hbWUiLCJnZXRWaXN1YWwiLCJsZWdlbmRTeW1ib2xUeXBlIiwic3ltYm9sVHlwZSIsIl9jcmVhdGVJdGVtIiwiZGlzcGF0Y2hTZWxlY3RBY3Rpb24iLCJkaXNwYXRjaEhpZ2hsaWdodEFjdGlvbiIsImRpc3BhdGNoRG93bnBsYXlBY3Rpb24iLCJpbmRleE9mTmFtZSIsIm5ld2xpbmUiLCJzeW1ib2xLZWVwQXNwZWN0IiwiaXRlbUdyb3VwIiwiaXRlbUljb24iLCJ0b29sdGlwTW9kZWwiLCJsZWdlbmRHbG9iYWxUb29sdGlwTW9kZWwiLCJoaXRSZWN0IiwiaW52aXNpYmxlIiwibGVnZW5kSW5kZXgiLCJfX2xlZ2VuZERhdGFJbmRleCIsImNvbnRlbnRSZWN0IiwiZGF0YU5hbWUiLCJzdG9yYWdlIiwiZ2V0RGlzcGxheUxpc3QiLCJ1c2VIb3ZlckxheWVyIiwibGVnZW5kU2VsZWN0QWN0aW9uSGFuZGxlciIsIm1ldGhvZE5hbWUiLCJzZWxlY3RlZE1hcCIsImlzVG9nZ2xlU2VsZWN0IiwiaXNJdGVtU2VsZWN0ZWQiLCJsZWdlbmRNb2RlbHMiLCJmaW5kQ29tcG9uZW50cyIsImZpbHRlclNlcmllcyIsInN1YnRleHQiLCJzdWJ0YXJnZXQiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJzdWJ0ZXh0U3R5bGUiLCJ0aXRsZU1vZGVsIiwic3VidGV4dFN0eWxlTW9kZWwiLCJ0ZXh0QmFzZWxpbmUiLCJkaXNhYmxlQm94Iiwic3ViVGV4dCIsInN1YlRleHRFbCIsInN1YmxpbmsiLCJncm91cFJlY3QiLCJsYXlvdXRPcHRpb24iLCJhbGlnblN0eWxlIiwic3ViUGl4ZWxPcHRpbWl6ZVJlY3QiLCJ6ckNvbG9yIiwiZXZlbnRVdGlsIiwidG9DYW1lbENhc2UiLCJ2ZW5kb3JzIiwiYXNzZW1ibGVDc3NUZXh0IiwiY3NzVGV4dCIsInRyYW5zaXRpb25EdXJhdGlvbiIsImR1cmF0aW9uIiwidHJhbnNpdGlvblRleHQiLCJ2ZW5kb3JQcmVmaXgiLCJhc3NlbWJsZVRyYW5zaXRpb24iLCJjYW52YXNTdXBwb3J0ZWQiLCJ0b0hleCIsImJvcmRlck5hbWUiLCJjYW1lbENhc2UiLCJyb3VuZCIsImFzc2VtYmxlRm9udCIsIlRvb2x0aXBDb250ZW50IiwiY29udGFpbmVyIiwid3hhIiwiX3pyIiwiX3giLCJfeSIsIl9jb250YWluZXIiLCJfc2hvdyIsIl9oaWRlVGltZW91dCIsInNlbGYiLCJvbm1vdXNlZW50ZXIiLCJfZW50ZXJhYmxlIiwiY2xlYXJUaW1lb3V0IiwiX2luQ29udGVudCIsIm5vcm1hbGl6ZUV2ZW50IiwiZGlzcGF0Y2giLCJvbm1vdXNlbGVhdmUiLCJoaWRlTGF0ZXIiLCJfaGlkZURlbGF5Iiwic3RsIiwiY3VycmVudFN0eWxlIiwiZGVmYXVsdFZpZXciLCJnZXRDb21wdXRlZFN0eWxlIiwiZG9tU3R5bGUiLCJkaXNwbGF5IiwiaW5uZXJIVE1MIiwic2V0Q29udGVudCIsInNldEVudGVyYWJsZSIsImVudGVyYWJsZSIsImdldFNpemUiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIm1vdmVUbyIsInZpZXdwb3J0Um9vdE9mZnNldCIsInBhaW50ZXIiLCJnZXRWaWV3cG9ydFJvb3RPZmZzZXQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwidGltZSIsInNldFRpbWVvdXQiLCJpc1Nob3ciLCJzaG93Q29udGVudCIsInRyaWdnZXIiLCJhbHdheXNTaG93Q29udGVudCIsImRpc3BsYXlNb2RlIiwiY29uZmluZSIsInNob3dEZWxheSIsImhpZGVEZWxheSIsImV4dHJhQ3NzVGV4dCIsImFuaW1hdGlvbkVhc2luZ1VwZGF0ZSIsIm51bWJlclV0aWwiLCJheGlzUG9pbnRlclZpZXdIZWxwZXIiLCJwcm94eVJlY3QiLCJ0b29sdGlwQ29udGVudCIsImdldERvbSIsIl90b29sdGlwQ29udGVudCIsIl90b29sdGlwTW9kZWwiLCJfZWNNb2RlbCIsIl9sYXN0RGF0YUJ5Q29vcmRTeXMiLCJfYWx3YXlzU2hvd0NvbnRlbnQiLCJfaW5pdEdsb2JhbExpc3RlbmVyIiwiX2tlZXBTaG93IiwiX3RyeVNob3ciLCJfaGlkZSIsIl9sYXN0WCIsIl9sYXN0WSIsIl9yZWZyZXNoVXBkYXRlVGltZW91dCIsIm1hbnVhbGx5U2hvd1RpcCIsIl90aWNrZXQiLCJfbWFudWFsbHlBeGlzU2hvd1RpcCIsInBvaW50SW5mbyIsImZpbmRIb3ZlciIsIm1hbnVhbGx5SGlkZVRpcCIsImJ1aWxkVG9vbHRpcE1vZGVsIiwiX3Nob3dBeGlzVG9vbHRpcCIsIl9zaG93U2VyaWVzSXRlbVRvb2x0aXAiLCJfc2hvd0NvbXBvbmVudEl0ZW1Ub29sdGlwIiwiX3Nob3dPck1vdmUiLCJkZWxheSIsIl9zaG93VGltb3V0Iiwic2luZ2xlRGVmYXVsdEhUTUwiLCJzaW5nbGVQYXJhbXNMaXN0Iiwic2luZ2xlVG9vbHRpcE1vZGVsIiwiaXRlbUNvb3JkU3lzIiwiYXhpc1ZhbHVlIiwic2VyaWVzRGVmYXVsdEhUTUwiLCJ2YWx1ZUxhYmVsIiwiYXhpc1ZhbHVlTGFiZWwiLCJmb3JtYXRUb29sdGlwIiwiZmlyc3RMaW5lIiwiZW5jb2RlSFRNTCIsInBvc2l0aW9uRXhwciIsIl91cGRhdGVDb250ZW50Tm90Q2hhbmdlZE9uQXhpcyIsIl91cGRhdGVQb3NpdGlvbiIsIl9zaG93VG9vbHRpcENvbnRlbnQiLCJyYW5kb20iLCJkYXRhTW9kZWwiLCJkYXRhVHlwZSIsInRvb2x0aXBUcmlnZ2VyIiwiZGVmYXVsdEh0bWwiLCJhc3luY1RpY2tldCIsInN1YlRvb2x0aXBNb2RlbCIsImh0bWwiLCJmb3JtYXRUcGwiLCJjYlRpY2tldCIsImNvbnRlbnRTaXplIiwidkFsaWduIiwidmlld1NpemUiLCJkb21XaWR0aCIsImRvbUhlaWdodCIsInJlY3RXaWR0aCIsInJlY3RIZWlnaHQiLCJjYWxjVG9vbHRpcFBvc2l0aW9uIiwiZ2FwSCIsImdhcFYiLCJnZXRPdXRlclNpemUiLCJyZWZpeFRvb2x0aXBQb3NpdGlvbiIsImlzQ2VudGVyQWxpZ24iLCJjb25maW5lVG9vbHRpcFBvc2l0aW9uIiwibGFzdENvb3JkU3lzIiwiY29udGVudE5vdENoYW5nZWQiLCJsYXN0SXRlbUNvb3JkU3lzIiwiaW5kZXhDb29yZFN5cyIsImxhc3REYXRhQnlBeGlzIiwidGhpc0RhdGFCeUF4aXMiLCJsYXN0SXRlbSIsImluZGV4QXhpcyIsInRoaXNJdGVtIiwibGFzdEluZGljZXMiLCJuZXdJbmRpY2VzIiwibGFzdElkeEl0ZW0iLCJuZXdJZHhJdGVtIiwibW9kZWxDYXNjYWRlIiwicmVzdWx0TW9kZWwiLCJwYXJzZUludCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyUmlnaHRXaWR0aCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImdsb2JhbCIsImRldiIsImdldFBpeGVsUHJlY2lzaW9uIiwiX2F4aXNUaWNrTGFiZWxCdWlsZGVyIiwiY3JlYXRlQXhpc1RpY2tzIiwiY3JlYXRlQXhpc0xhYmVscyIsImNhbGN1bGF0ZUNhdGVnb3J5SW50ZXJ2YWwiLCJOT1JNQUxJWkVEX0VYVEVOVCIsIkF4aXMiLCJfZXh0ZW50Iiwib25CYW5kIiwiZml4RXh0ZW50V2l0aEJhbmRzIiwiblRpY2siLCJjb250YWluIiwiZGF0YUV4dGVudCIsInNldEV4dGVudCIsImNsYW1wIiwibm9ybWFsaXplIiwiY29vcmRUb0RhdGEiLCJnZXRUaWNrTW9kZWwiLCJ0aWNrcyIsImFsaWduV2l0aExhYmVsIiwidGlja0NhdGVnb3J5SW50ZXJ2YWwiLCJ0aWNrc0xlbiIsImxhc3QiLCJzaGlmdCIsInRpY2tzSXRlbSIsImxpdHRsZVRoYW4iLCJ1bnNoaWZ0IiwiZml4T25CYW5kVGlja3NDb29yZHMiLCJnZXRMYWJlbE1vZGVsIiwiaXNIb3Jpem9udGFsIiwiZ2V0Um90YXRlIiwiT3JkaW5hbFNjYWxlIiwiSW50ZXJ2YWxTY2FsZSIsIlNjYWxlIiwiX2JhckdyaWQiLCJwcmVwYXJlTGF5b3V0QmFyU2VyaWVzIiwibWFrZUNvbHVtbkxheW91dCIsInJldHJpZXZlQ29sdW1uTGF5b3V0IiwiQm91bmRpbmdSZWN0IiwiZ2V0U2NhbGVFeHRlbnQiLCJheGlzRGF0YUxlbiIsImJvdW5kYXJ5R2FwIiwic2NhbGVUeXBlIiwiZ2V0TWluIiwiZ2V0TWF4IiwiZml4TWluIiwiZml4TWF4Iiwib3JpZ2luYWxFeHRlbnQiLCJzZXRCbGFuayIsImVxTmFOIiwiY2F0ZWdvcmllcyIsImdldE5lZWRDcm9zc1plcm8iLCJpc0Jhc2VBeGlzQW5kSGFzQmFyU2VyaWVzIiwiYmFyU2VyaWVzTW9kZWxzIiwiZ2V0QmFzZUF4aXMiLCJiYXJXaWR0aEFuZE9mZnNldCIsImFkanVzdGVkU2NhbGUiLCJheGlzTGVuZ3RoIiwiYmFyc09uQ3VycmVudEF4aXMiLCJtaW5PdmVyZmxvdyIsIkluZmluaXR5IiwibWF4T3ZlcmZsb3ciLCJ0b3RhbE92ZXJGbG93Iiwib2xkUmFuZ2UiLCJvdmVyZmxvd0J1ZmZlciIsImFkanVzdFNjYWxlRm9yT3ZlcmZsb3ciLCJtYWtlTGFiZWxGb3JtYXR0ZXIiLCJsYWJlbEZvcm1hdHRlciIsImNhdGVnb3J5VGlja1N0YXJ0IiwidHBsIiwidGljayIsInJvdGF0ZVRleHRSZWN0Iiwicm90YXRlUmFkaWFucyIsImJvdW5kaW5nQm94IiwicGxhaW4iLCJiZWZvcmVXaWR0aCIsImJlZm9yZUhlaWdodCIsImFmdGVyV2lkdGgiLCJhZnRlckhlaWdodCIsIm5pY2VTY2FsZUV4dGVudCIsInNwbGl0TnVtYmVyIiwiYmFzZSIsIm5pY2VFeHRlbnQiLCJtaW5JbnRlcnZhbCIsIm1heEludGVydmFsIiwiaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNyZWF0ZVNjYWxlQnlNb2RlbCIsImdldENsYXNzIiwiaWZBeGlzQ3Jvc3NaZXJvIiwiZXN0aW1hdGVMYWJlbFVuaW9uUmVjdCIsInJlYWxOdW1iZXJTY2FsZVRpY2tzIiwidGlja0NvdW50IiwiaXNDYXRlZ29yeSIsImNhdGVnb3J5U2NhbGVFeHRlbnQiLCJnZXRUaWNrcyIsImF4aXNMYWJlbE1vZGVsIiwic3RlcCIsImNlaWwiLCJzaW5nbGVSZWN0IiwiZ2V0VGV4dFJlY3QiLCJ1bmlvbiIsInJhbmdlU3RhcnQiLCJyYW5nZUVuZCIsImdldENvb3JkU3lzTW9kZWwiLCJub29wIiwic2V0UmFuZ2UiLCJyZXNldFJhbmdlIiwibWFrZUNhdGVnb3J5TGFiZWxzQWN0dWFsbHkiLCJudW1lcmljTGFiZWxJbnRlcnZhbCIsImxhYmVsc0NhY2hlIiwiZ2V0TGlzdENhY2hlIiwib3B0aW9uTGFiZWxJbnRlcnZhbCIsImdldE9wdGlvbkNhdGVnb3J5SW50ZXJ2YWwiLCJsaXN0Q2FjaGVHZXQiLCJsaXN0Q2FjaGVTZXQiLCJtYWtlTGFiZWxzQnlDdXN0b21pemVkQ2F0ZWdvcnlJbnRlcnZhbCIsIm1ha2VMYWJlbHNCeU51bWVyaWNDYXRlZ29yeUludGVydmFsIiwiYXV0b0ludGVydmFsIiwibWFrZUF1dG9DYXRlZ29yeUludGVydmFsIiwibGFiZWxDYXRlZ29yeUludGVydmFsIiwicHJvcCIsImNhY2hlIiwiY2F0ZWdvcnlJbnRlcnZhbCIsIm9ubHlUaWNrIiwib3JkaW5hbFNjYWxlIiwib3JkaW5hbEV4dGVudCIsInN0YXJ0VGljayIsInNob3dNaW5NYXgiLCJhZGRJdGVtIiwidFZhbCIsIm1ha2VDYXRlZ29yeUxhYmVscyIsIm1ha2VSZWFsTnVtYmVyTGFiZWxzIiwidGlja3NDYWNoZSIsIm9wdGlvblRpY2tJbnRlcnZhbCIsImxhYmVsc1Jlc3VsdCIsIm1ha2VDYXRlZ29yeVRpY2tzIiwiYXhpc1JvdGF0ZSIsImZldGNoQXV0b0NhdGVnb3J5SW50ZXJ2YWxDYWxjdWxhdGlvblBhcmFtcyIsImZsb29yIiwidW5pdFNwYW4iLCJ1bml0VyIsInVuaXRIIiwibWF4VyIsIm1heEgiLCJkdyIsImRoIiwibGFzdEF1dG9JbnRlcnZhbCIsImxhc3RUaWNrQ291bnQiLCJncmlkTW9kZWwiLCJvdGhlckF4aXNPblplcm9PZiIsImdldEF4ZXNPblplcm9PZiIsInJhd0F4aXNQb3NpdGlvbiIsImF4aXNQb3NpdGlvbiIsImdldFJlY3QiLCJyZWN0Qm91bmQiLCJyaWdodCIsImJvdHRvbSIsIm9uWmVybyIsImF4aXNPZmZzZXQiLCJwb3NCb3VuZCIsIm9uWmVyb0Nvb3JkIiwiYmJveCIsInZlYzIiLCJwb2x5Z29uQ29udGFpbiIsIlJlZ2lvbiIsImdlb21ldHJpZXMiLCJjcCIsInByb3BlcnRpZXMiLCJfcmVjdCIsIk1BWF9OVU1CRVIiLCJtaW4yIiwibWF4MiIsImV4dGVyaW9yIiwiZnJvbVBvaW50cyIsImxvb3BHZW8iLCJpbnRlcmlvcnMiLCJrIiwidHJhbnNmb3JtVG8iLCJhc3BlY3QiLCJjYWxjdWxhdGVUcmFuc2Zvcm0iLCJjb3B5IiwiZGVjb2RlUG9seWdvbiIsImNvb3JkaW5hdGUiLCJlbmNvZGVPZmZzZXRzIiwiZW5jb2RlU2NhbGUiLCJwcmV2WCIsInByZXZZIiwiY2hhckNvZGVBdCIsImdlb0pzb24iLCJqc29uIiwiVVRGOEVuY29kaW5nIiwiVVRGOFNjYWxlIiwiZmVhdHVyZXMiLCJmIiwiZ2VvbWV0cnkiLCJjb29yZGluYXRlcyIsImMyIiwicG9seWdvbiIsImRlY29kZSIsImZpbHRlciIsImZlYXR1cmVPYmoiLCJnZW8iLCJyZWdpb24iLCJkZWZhdWx0S2V5R2V0dGVyIiwiRGF0YURpZmZlciIsIm9sZEFyciIsIm5ld0FyciIsIm9sZEtleUdldHRlciIsIm5ld0tleUdldHRlciIsImNvbnRleHQiLCJfb2xkIiwiX25ldyIsIl9vbGRLZXlHZXR0ZXIiLCJfbmV3S2V5R2V0dGVyIiwiaW5pdEluZGV4TWFwIiwiYXJyIiwia2V5QXJyIiwia2V5R2V0dGVyTmFtZSIsImRhdGFEaWZmZXIiLCJleGlzdGVuY2UiLCJmdW5jIiwiX2FkZCIsIl91cGRhdGUiLCJfcmVtb3ZlIiwibmV3RGF0YUluZGV4TWFwIiwib2xkRGF0YUtleUFyciIsIm5ld0RhdGFLZXlBcnIiLCJfZGF0YVByb3ZpZGVyIiwiZGVmYXVsdERpbVZhbHVlR2V0dGVycyIsIkRlZmF1bHREYXRhUHJvdmlkZXIiLCJzdW1tYXJpemVEaW1lbnNpb25zIiwiSURfUFJFRklYIiwiZGF0YUN0b3JzIiwiZmxvYXQiLCJGbG9hdDY0QXJyYXkiLCJBcnJheSIsImludCIsIkludDMyQXJyYXkiLCJvcmRpbmFsIiwibnVtYmVyIiwiQ3RvclVpbnQzMkFycmF5IiwiVWludDMyQXJyYXkiLCJDdG9yVWludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsImdldEluZGljZXNDdG9yIiwiX3Jhd0NvdW50IiwiY2xvbmVDaHVuayIsIm9yaWdpbmFsQ2h1bmsiLCJDdG9yIiwiVFJBTlNGRVJBQkxFX1BST1BFUlRJRVMiLCJDTE9ORV9QUk9QRVJUSUVTIiwidHJhbnNmZXJQcm9wZXJ0aWVzIiwiX193cmFwcGVkTWV0aG9kcyIsInByb3BOYW1lIiwiX2NhbGN1bGF0aW9uSW5mbyIsImRpbWVuc2lvbkluZm9zIiwiZGltZW5zaW9uTmFtZXMiLCJpbnZlcnRlZEluZGljZXNNYXAiLCJkaW1lbnNpb25JbmZvIiwiZGltZW5zaW9uTmFtZSIsImNvb3JkRGltSW5kZXgiLCJjcmVhdGVJbnZlcnRlZEluZGljZXMiLCJfZGltZW5zaW9uSW5mb3MiLCJfaW5kaWNlcyIsIl9jb3VudCIsIl9zdG9yYWdlIiwiX25hbWVMaXN0IiwiX2lkTGlzdCIsIl9vcHRpb25Nb2RlbHMiLCJfdmlzdWFsIiwiX2l0ZW1WaXN1YWxzIiwiaGFzSXRlbVZpc3VhbCIsIl9pdGVtTGF5b3V0cyIsIl9ncmFwaGljRWxzIiwiX2NodW5rU2l6ZSIsIl9jaHVua0NvdW50IiwiX3Jhd0RhdGEiLCJfcmF3RXh0ZW50IiwiX2FwcHJveGltYXRlRXh0ZW50IiwiX2RpbWVuc2lvbnNTdW1tYXJ5IiwiX2ludmVydGVkSW5kaWNlc01hcCIsImxpc3RQcm90byIsImdldFJhd1ZhbHVlRnJvbVN0b3JlIiwicmF3SW5kZXgiLCJjaHVua1NpemUiLCJjaHVua0luZGV4IiwiY2h1bmtPZmZzZXQiLCJjaHVuayIsImdldFJhd0luZGV4V2l0aG91dEluZGljZXMiLCJnZXRSYXdJbmRleFdpdGhJbmRpY2VzIiwiZ2V0SWQiLCJfaWREaW1JZHgiLCJub3JtYWxpemVEaW1lbnNpb25zIiwiY2xvbmVMaXN0Rm9yTWFwQW5kU2FtcGxlIiwib3JpZ2luYWwiLCJleGNsdWRlRGltZW5zaW9ucyIsImFsbERpbWVuc2lvbnMiLCJnZXREaW1lbnNpb25JbmZvIiwib3JpZ2luYWxTdG9yYWdlIiwiY2xvbmVEaW1TdG9yZSIsImdldEluaXRpYWxFeHRlbnQiLCJvcmlnaW5hbERpbVN0b3JlIiwibmV3RGltU3RvcmUiLCJnZXREaW1lbnNpb24iLCJnZXREaW1lbnNpb25zT25Db29yZCIsImRhdGFEaW1zT25Db29yZCIsImRpbWVuc2lvbnNTdW1tYXJ5IiwiZW5jb2RlRmlyc3REaW1Ob3RFeHRyYSIsImRpbXMiLCJlbmNvZGUiLCJpc0FycmF5TGlrZSIsIl9uYW1lUmVwZWF0Q291bnQiLCJfZGltVmFsdWVHZXR0ZXIiLCJfaW5pdERhdGFGcm9tUHJvdmlkZXIiLCJwdXJlIiwiZ2V0UHJvdmlkZXIiLCJhcHBlbmREYXRhIiwicGVyc2lzdGVudCIsIm5hbWVEaW1JZHgiLCJkaW1MZW4iLCJkaW1lbnNpb25JbmZvTWFwIiwiaWRMaXN0IiwicmF3RXh0ZW50IiwibmFtZVJlcGVhdENvdW50IiwiY2h1bmtDb3VudCIsImxhc3RDaHVua0luZGV4IiwiX25hbWVEaW1JZHgiLCJpdGVtSWQiLCJEYXRhQ3RvciIsInJlc2l6ZUNodW5rQXJyYXkiLCJuZXdTdG9yZSIsImdldEl0ZW0iLCJkaW1TdG9yYWdlIiwiZGltUmF3RXh0ZW50IiwibmFtZURpbSIsIm5hbWVEaW1DaHVuayIsImNsZWFuIiwiaW52ZXJ0ZWRJbmRpY2VzIiwicHJlcGFyZUludmVydGVkSW5kZXgiLCJnZXRJbmRpY2VzIiwiaW5kaWNlcyIsInRoaXNDb3VudCIsImJ1ZmZlciIsImdldEJ5UmF3SW5kZXgiLCJyYXdJZHgiLCJkaW1TdG9yZSIsIl9nZXRGYXN0IiwidmFsdWVzIiwiaGFzVmFsdWUiLCJkaW1EYXRhIiwiaW5pdGlhbEV4dGVudCIsImRpbUV4dGVudCIsImN1cnJFbmQiLCJnZXRBcHByb3hpbWF0ZUV4dGVudCIsInNldEFwcHJveGltYXRlRXh0ZW50IiwiZ2V0Q2FsY3VsYXRpb25JbmZvIiwiZ2V0TWVkaWFuIiwiZGltRGF0YUFycmF5Iiwic29ydGVkRGltRGF0YUFycmF5IiwicmF3SW5kZXhPZiIsImluZGV4T2ZSYXdJbmRleCIsInJhd0RhdGFJbmRleCIsIm1pZCIsIm1heERpc3RhbmNlIiwibmVhcmVzdEluZGljZXMiLCJnZXRSYXdEYXRhSXRlbSIsImNvbnRleHRDb21wYXQiLCJkaW1TaXplIiwiZmlsdGVyU2VsZiIsImRpbTAiLCJrZWVwIiwic2VsZWN0UmFuZ2UiLCJyYW5nZSIsIm9yaWdpbmFsQ291bnQiLCJxdWlja0ZpbmlzaGVkIiwiY2h1bmtTdG9yYWdlIiwiZGltU3RvcmFnZTIiLCJjaHVua1N0b3JhZ2UyIiwidmFsMiIsImRpbWsiLCJ0bXBSZXRWYWx1ZSIsImRhdGFDb3VudCIsInJldFZhbHVlIiwicmF3RXh0ZW50T25EaW0iLCJkb3duU2FtcGxlIiwiZGltZW5zaW9uIiwicmF0ZSIsInNhbXBsZVZhbHVlIiwic2FtcGxlSW5kZXgiLCJ0YXJnZXRTdG9yYWdlIiwiZnJhbWVWYWx1ZXMiLCJmcmFtZVNpemUiLCJkYXRhSWR4Iiwib3JpZ2luYWxDaHVua0luZGV4Iiwib3JpZ2luYWxDaHVua09mZnNldCIsInNhbXBsZUZyYW1lSWR4Iiwic2FtcGxlQ2h1bmtPZmZzZXQiLCJvdGhlckxpc3QiLCJ0aGlzTGlzdCIsInZpc3VhbCIsInNldFZpc3VhbCIsInNldExheW91dCIsImdldExheW91dCIsIm1lcmdlIiwiY2xlYXJJdGVtTGF5b3V0cyIsImlnbm9yZVBhcmVudCIsIml0ZW1WaXN1YWwiLCJzZXRJdGVtVmlzdWFsIiwiY2xlYXJBbGxWaXN1YWwiLCJzZXRJdGVtRGF0YUFuZFNlcmllc0luZGV4IiwiZWFjaEl0ZW1HcmFwaGljRWwiLCJjbG9uZVNoYWxsb3ciLCJkaW1lbnNpb25JbmZvTGlzdCIsIndyYXBNZXRob2QiLCJpbmplY3RGdW5jdGlvbiIsIm9yaWdpbmFsTWV0aG9kIiwicmVzIiwiVFJBTlNGRVJBQkxFX01FVEhPRFMiLCJDSEFOR0FCTEVfTUVUSE9EUyIsIk9yZGluYWxNZXRhIiwiX25lZWRDb2xsZWN0IiwibmVlZENvbGxlY3QiLCJfZGVkdXBsaWNhdGlvbiIsImRlZHVwbGljYXRpb24iLCJfbWFwIiwiY3JlYXRlQnlBeGlzTW9kZWwiLCJkZWRwbGljYXRpb24iLCJwcm90byIsImdldE9yQ3JlYXRlTWFwIiwib2JqIiwiZ2V0T3JkaW5hbCIsImNhdGVnb3J5IiwicGFyc2VBbmRDb2xsZWN0IiwiaXNUeXBlZEFycmF5IiwiZW5hYmxlQ2xhc3NDaGVjayIsIl9zb3VyY2VUeXBlIiwiU09VUkNFX0ZPUk1BVF9VTktOT1dOIiwiU09VUkNFX0ZPUk1BVF9UWVBFRF9BUlJBWSIsIlNPVVJDRV9GT1JNQVRfS0VZRURfQ09MVU1OUyIsImZyb21EYXRhc2V0IiwiZGltZW5zaW9uc0RlZmluZSIsImVuY29kZURlZmluZSIsInN0YXJ0SW5kZXgiLCJkaW1lbnNpb25zRGV0ZWN0Q291bnQiLCJub3JtYWxpemVUb0FycmF5IiwiZ3Vlc3NPcmRpbmFsIiwiT1RIRVJfRElNRU5TSU9OUyIsImdlbk5hbWUiLCJmcm9tWmVybyIsInN5c0RpbXMiLCJkaW1zRGVmIiwiZW5jb2RlRGVmIiwiZGF0YURpbU5hbWVNYXAiLCJjb29yZERpbU5hbWVNYXAiLCJkaW1Db3VudCIsIm9wdERpbUNvdW50Iiwic3lzRGltSXRlbSIsInN5c0RpbUl0ZW1EaW1zRGVmIiwiZ2V0RGltQ291bnQiLCJkaW1EZWZJdGVtIiwidXNlckRpbU5hbWUiLCJyZXN1bHRJdGVtIiwiZGlzcGxheU5hbWUiLCJkYXRhRGltcyIsInZhbGlkRGF0YURpbXMiLCJyZXN1bHREaW1JZHgiLCJhcHBseURpbSIsImF2YWlsRGltSWR4Iiwic3lzRGltSW5kZXgiLCJzeXNEaW1JdGVtT3RoZXJEaW1zIiwic3lzRGltSXRlbURpbXNEZWZJdGVtIiwiZGVmYXVsdFRvb2x0aXAiLCJnZW5lcmF0ZUNvb3JkQ291bnQiLCJleHRyYSIsImlzRXh0cmFDb29yZCIsImNvbXBsZXRlRGltZW5zaW9ucyIsImRpbWVuc2lvbnNDb3VudCIsImFzc2VydCIsImlzRGF0YUl0ZW1PcHRpb24iLCJwYXJzZURhdGUiLCJTT1VSQ0VfRk9STUFUX0FSUkFZX1JPV1MiLCJTT1VSQ0VfRk9STUFUX09CSkVDVF9ST1dTIiwiX3NvdXJjZSIsIl9vZmZzZXQiLCJfZGltU2l6ZSIsIm1ldGhvZHMiLCJwcm92aWRlck1ldGhvZHMiLCJwcm92aWRlclByb3RvIiwiYXJyYXlSb3dzX2NvbHVtbiIsImFwcGVuZERhdGFTaW1wbHkiLCJhcnJheVJvd3Nfcm93Iiwicm93Iiwib2JqZWN0Um93cyIsImNvdW50U2ltcGx5IiwiZ2V0SXRlbVNpbXBseSIsImtleWVkQ29sdW1ucyIsImNvbCIsIm5ld0RhdGEiLCJuZXdDb2wiLCJvbGRDb2wiLCJ0eXBlZEFycmF5Iiwib3V0IiwicmF3VmFsdWVHZXR0ZXJzIiwiYXJyYXlSb3dzIiwiZ2V0UmF3VmFsdWVTaW1wbHkiLCJnZXREaW1WYWx1ZVNpbXBseSIsImNvbnZlckRhdGFWYWx1ZSIsImRpbVR5cGUiLCJyZXRyaWV2ZVJhd1ZhbHVlIiwiaXNEaW1lbnNpb25TdGFja2VkIiwic3RhY2tlZERpbSIsInN0YWNrZWRCeURpbUluZm8iLCJzdGFja2VkRGltSW5mbyIsInN0YWNrUmVzdWx0RGltZW5zaW9uIiwic3RhY2tlZE92ZXJEaW1lbnNpb24iLCJieUluZGV4Iiwic3RhY2tlZENvb3JkRGltZW5zaW9uIiwibWF5U3RhY2siLCJzdGFja2VkRGltQ29vcmREaW0iLCJzdGFja2VkRGltVHlwZSIsInN0YWNrZWREaW1Db29yZEluZGV4IiwiaXNDYWxjdWxhdGlvbkNvb3JkIiwic3RhY2tlZERpbWVuc2lvbiIsInN0YWNrZWRCeURpbWVuc2lvbiIsImlzU3RhY2tlZEJ5SW5kZXgiLCJnZXRTdGFja2VkRGltZW5zaW9uIiwidGFyZ2V0RGltIiwic3VtbWFyeSIsIm5vdEV4dHJhQ29vcmREaW1NYXAiLCJkZWZhdWx0ZWRMYWJlbCIsImRlZmF1bHRlZFRvb2x0aXAiLCJkaW1JdGVtIiwiY29vcmREaW1BcnIiLCJtYXlMYWJlbERpbVR5cGUiLCJ2Iiwib3RoZXJEaW0iLCJvdGhlckRpbUFyciIsImRpbUFyciIsImVuY29kZUxhYmVsIiwiZW5jb2RlVG9vbHRpcCIsIlNFUklFU19MQVlPVVRfQllfUk9XIiwibm9ybWFsaXplRGltZW5zaW9uc0RlZmluZSIsIm5hbWVNYXAiLCJleGlzdCIsImFycmF5Um93c1RyYXZlbEZpcnN0IiwibWF4TG9vcCIsInZhbHVlMCIsImRvR3Vlc3NPcmRpbmFsIiwic2FtcGxlIiwiZGV0ZWN0VmFsdWUiLCJkYXRhc2V0TW9kZWwiLCJyZXNldFNvdXJjZURlZmF1bHRlciIsImRhdGFzZXRNYXAiLCJwcmVwYXJlU291cmNlIiwic2VyaWVzT3B0aW9uIiwiZGF0YXNldEluZGV4IiwiZ2V0RGF0YXNldE1vZGVsIiwiZGF0YXNldE9wdGlvbiIsImNvbXBsZXRlUmVzdWx0IiwiZmluZFBvdGVudGlhbE5hbWUiLCJwb3RlbnRpYWxOYW1lRGltSW5kZXgiLCJmaXJzdEluZGV4Iiwib2JqZWN0Um93c0NvbGxlY3REaW1lbnNpb25zIiwiY29sQXJyIiwiY29tcGxldGVCeVNvdXJjZURhdGEiLCJlbmNvZGVJdGVtTmFtZSIsImVuY29kZVNlcmllc05hbWUiLCJuU2VyaWVzTWFwIiwiY1Nlcmllc01hcCIsImRhdGFzZXRSZWNvcmQiLCJjYXRlZ29yeVdheURpbSIsInZhbHVlV2F5RGltIiwiZmlyc3ROb3RPcmRpbmFsIiwibmFtZURpbUluZGV4IiwibWFrZURlZmF1bHRFbmNvZGUiLCJ6cmVuZGVyIiwiY29sb3JUb29sIiwidGltc29ydCIsIkV2ZW50ZnVsIiwiR2xvYmFsTW9kZWwiLCJFeHRlbnNpb25BUEkiLCJPcHRpb25NYW5hZ2VyIiwiYmFja3dhcmRDb21wYXQiLCJkYXRhU3RhY2siLCJTZXJpZXNNb2RlbCIsInNlcmllc0NvbG9yIiwiYXJpYSIsImxvYWRpbmdEZWZhdWx0IiwiU2NoZWR1bGVyIiwibGlnaHRUaGVtZSIsImRhcmtUaGVtZSIsInBhcnNlQ2xhc3NUeXBlIiwiUFJJT1JJVFlfUFJPQ0VTU09SX0ZJTFRFUiIsIlBSSU9SSVRZX1ZJU1VBTF9MQVlPVVQiLCJQUklPUklUWV9WSVNVQUxfQ0hBUlQiLCJGSUxURVIiLCJWSVNVQUwiLCJMQVlPVVQiLCJHTE9CQUwiLCJDSEFSVCIsIkNPTVBPTkVOVCIsIkJSVVNIIiwiSU5fTUFJTl9QUk9DRVNTIiwiT1BUSU9OX1VQREFURUQiLCJBQ1RJT05fUkVHIiwiY3JlYXRlUmVnaXN0ZXJFdmVudFdpdGhMb3dlcmNhc2VOYW1lIiwiZXZlbnROYW1lIiwidG9Mb3dlckNhc2UiLCJNZXNzYWdlQ2VudGVyIiwiRUNoYXJ0cyIsImRvbSIsInRoZW1lIiwib3B0cyIsInRoZW1lU3RvcmFnZSIsIl9kb20iLCJyZW5kZXJlciIsImRldmljZVBpeGVsUmF0aW8iLCJfdGhyb3R0bGVkWnJGbHVzaCIsImZsdXNoIiwiX3RoZW1lIiwiX2NoYXJ0c1ZpZXdzIiwiX2NoYXJ0c01hcCIsIl9jb21wb25lbnRzVmlld3MiLCJfY29tcG9uZW50c01hcCIsIl9jb29yZFN5c01nciIsImVjSW5zdGFuY2UiLCJjb29yZFN5c01nciIsImdldENvbXBvbmVudEJ5RWxlbWVudCIsIm1vZGVsSW5mbyIsIl9fZWNDb21wb25lbnRJbmZvIiwiY3JlYXRlRXh0ZW5zaW9uQVBJIiwicHJpb3JpdHlTb3J0RnVuYyIsIl9fcHJpbyIsInZpc3VhbEZ1bmNzIiwiZGF0YVByb2Nlc3NvckZ1bmNzIiwiX3NjaGVkdWxlciIsIl9tZXNzYWdlQ2VudGVyIiwiX2luaXRFdmVudHMiLCJyZXNpemUiLCJfcGVuZGluZ0FjdGlvbnMiLCJfb25mcmFtZSIsImVjSW5zIiwiaXNGaW5pc2hlZCIsInVuZmluaXNoZWQiLCJiaW5kUmVuZGVyZWRFdmVudCIsInNldEFzUHJpbWl0aXZlIiwib25lIiwiZWNoYXJ0c1Byb3RvIiwiZG9Db252ZXJ0UGl4ZWwiLCJjb29yZFN5c0xpc3QiLCJwYXJzZUZpbmRlciIsIl9kaXNwb3NlZCIsInNjaGVkdWxlciIsInByZXBhcmUiLCJ1cGRhdGVNZXRob2RzIiwiZmx1c2hQZW5kaW5nQWN0aW9ucyIsInRyaWdnZXJVcGRhdGVkRXZlbnQiLCJyZW1haW5UaW1lIiwic3RhcnRUaW1lIiwiRGF0ZSIsInBlcmZvcm1TZXJpZXNUYXNrcyIsInBlcmZvcm1EYXRhUHJvY2Vzc29yVGFza3MiLCJ1cGRhdGVTdHJlYW1Nb2RlcyIsInBlcmZvcm1WaXN1YWxUYXNrcyIsInJlbmRlclNlcmllcyIsInNldE9wdGlvbiIsIm5vdE1lcmdlIiwibGF6eVVwZGF0ZSIsIm9wdGlvbk1hbmFnZXIiLCJvcHRpb25QcmVwcm9jZXNzb3JGdW5jcyIsInNldFRoZW1lIiwibG9nIiwiZ2V0T3B0aW9uIiwiZ2V0RGV2aWNlUGl4ZWxSYXRpbyIsImRwciIsImdldFJlbmRlcmVkQ2FudmFzIiwicGl4ZWxSYXRpbyIsImdldFN2Z0RhdGFVcmwiLCJzdmdTdXBwb3J0ZWQiLCJwYXRoVG9EYXRhVXJsIiwiZ2V0RGF0YVVSTCIsImV4Y2x1ZGVDb21wb25lbnRzIiwiZXhjbHVkZXNDb21wb25lbnRWaWV3cyIsImNvbXBvbmVudCIsInZpZXciLCJfX3ZpZXdJZCIsImdldFR5cGUiLCJ0b0RhdGFVUkwiLCJnZXRDb25uZWN0ZWREYXRhVVJMIiwiZ3JvdXBJZCIsIm1hdGhNaW4iLCJtYXRoTWF4IiwiY29ubmVjdGVkR3JvdXBzIiwiY2FudmFzTGlzdCIsImluc3RhbmNlcyIsImNoYXJ0IiwiY2FudmFzIiwiYm91bmRpbmdSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidGFyZ2V0Q2FudmFzIiwiY3JlYXRlQ2FudmFzIiwiaW1nIiwiSW1hZ2UiLCJpbWFnZSIsInJlZnJlc2hJbW1lZGlhdGVseSIsImNvbnZlcnRUb1BpeGVsIiwiY29udmVydEZyb21QaXhlbCIsImNvbnRhaW5QaXhlbCIsIm1vZGVscyIsInZpc3VhbFR5cGUiLCJkZWZhdWx0TWFpblR5cGUiLCJnZXRWaWV3T2ZDb21wb25lbnRNb2RlbCIsImdldFZpZXdPZlNlcmllc01vZGVsIiwicHJlcGFyZUFuZFVwZGF0ZSIsInJlc3RvcmVEYXRhIiwiY2xlYXJDb2xvclBhbGV0dGUiLCJzZXRCYWNrZ3JvdW5kQ29sb3IiLCJjb2xvckFyciIsInBlcmZvcm1Qb3N0VXBkYXRlRnVuY3MiLCJjb21wb25lbnREaXJ0eUxpc3QiLCJjb21wb25lbnRWaWV3IiwiX19hbGl2ZSIsInNlcmllc0RpcnR5TWFwIiwiY2hhcnRWaWV3Iiwic2V0RGlydHkiLCJkaXJ0eU1hcCIsInVwZGF0ZVZpZXciLCJtYXJrVXBkYXRlTWV0aG9kIiwidXBkYXRlVmlzdWFsIiwidXBkYXRlTGF5b3V0IiwicmVzdG9yZVBpcGVsaW5lcyIsInByZXBhcmVTdGFnZVRhc2tzIiwicHJlcGFyZVZpZXciLCJwbGFuIiwidXBkYXRlRGlyZWN0bHkiLCJjb25kaXRpb24iLCJjYWxsVmlldyIsIl9fbW9kZWwiLCJjaGFydHNNYXAiLCJkb0Rpc3BhdGNoQWN0aW9uIiwicGF5bG9hZFR5cGUiLCJhY3Rpb25XcmFwIiwiYWN0aW9ucyIsImNwdFR5cGUiLCJzcGxpdCIsInVwZGF0ZU1ldGhvZCIsInBheWxvYWRzIiwiYmF0Y2hlZCIsImV2ZW50T2JqIiwiZXZlbnRPYmpCYXRjaCIsImlzSGlnaERvd24iLCJhY3Rpb24iLCJtYWluIiwic3ViIiwicGVuZGluZ0FjdGlvbnMiLCJpc0NvbXBvbmVudCIsInZpZXdMaXN0Iiwidmlld01hcCIsImRvUHJlcGFyZSIsInZpZXdJZCIsImNsYXNzVHlwZSIsIl9faWQiLCJyZW5kZXJUYXNrIiwiZGlydHlMaXN0IiwidXBkYXRlWiIsInJlbmRlckNvbXBvbmVudHMiLCJ1cGRhdGVQYXlsb2FkIiwiZGlydHkiLCJwZXJmb3JtIiwiZ2V0UGVyZm9ybUFyZ3MiLCJibGVuZE1vZGUiLCJpc0dyb3VwIiwiYmxlbmQiLCJlYWNoUGVuZGluZ0Rpc3BsYXlhYmxlIiwiZGlzcGxheWFibGUiLCJ1cGRhdGVCbGVuZCIsImVsQ291bnQiLCJ1cGRhdGVIb3ZlckxheWVyU3RhdHVzIiwicG9zdFVwZGF0ZUZ1bmNzIiwiX2xvYWRpbmdGWCIsIm9wdGlvbkNoYW5nZWQiLCJyZXNldE9wdGlvbiIsInNob3dMb2FkaW5nIiwiY2ZnIiwiaGlkZUxvYWRpbmciLCJsb2FkaW5nRWZmZWN0cyIsIm1ha2VBY3Rpb25Gcm9tRXZlbnQiLCJldmVudEFjdGlvbk1hcCIsImJyb3dzZXIiLCJ3ZUNoYXQiLCJNT1VTRV9FVkVOVF9OQU1FUyIsImV2ZU5hbWUiLCJhY3Rpb25UeXBlIiwiaXNEaXNwb3NlZCIsInNldEF0dHJpYnV0ZSIsIkRPTV9BVFRSSUJVVEVfS0VZIiwiaWRCYXNlIiwiZ3JvdXBJZEJhc2UiLCJtYXBEYXRhU3RvcmVzIiwiZGlzQ29ubmVjdCIsImRpc2Nvbm5lY3QiLCJnZXRJbnN0YW5jZUJ5RG9tIiwiZ2V0QXR0cmlidXRlIiwicmVnaXN0ZXJUaGVtZSIsInByZXByb2Nlc3NvckZ1bmMiLCJwcmlvcml0eSIsInByb2Nlc3NvciIsIm5vcm1hbGl6ZVJlZ2lzdGVyIiwidmlzdWFsVGFzayIsImRlZmF1bHRQcmlvcml0eSIsInN0YWdlSGFuZGxlciIsIndyYXBTdGFnZUhhbmRsZXIiLCJfX3JhdyIsInJlZ2lzdGVyTG9hZGluZyIsImxvYWRpbmdGeCIsInZlcnNpb24iLCJleGlzdEluc3RhbmNlIiwiU1RBVFVTX0tFWSIsInVwZGF0ZUNvbm5lY3RlZENoYXJ0c1N0YXR1cyIsImNoYXJ0cyIsIm90aGVyQ2hhcnRzIiwib3RoZXJDaGFydCIsImVuYWJsZUNvbm5lY3QiLCJjb25uZWN0IiwiZ2V0SW5zdGFuY2VCeUlkIiwicmVnaXN0ZXJQb3N0VXBkYXRlIiwicG9zdFVwZGF0ZUZ1bmMiLCJyZWdpc3RlckNvb3JkaW5hdGVTeXN0ZW0iLCJnZXRDb29yZGluYXRlU3lzdGVtRGltZW5zaW9ucyIsImNvb3JkU3lzQ3JlYXRvciIsImxheW91dFRhc2siLCJleHRlbmRDaGFydFZpZXciLCJzZXRDYW52YXNDcmVhdG9yIiwiY3JlYXRvciIsIiRvdmVycmlkZSIsInJlZ2lzdGVyTWFwIiwibWFwTmFtZSIsInNwZWNpYWxBcmVhcyIsIkZ1bmN0aW9uIiwiZ2V0TWFwIiwiZGF0YVRvb2wiLCJfX19lY19leHBvcnQiLCJ2ZWN0b3IiLCJmb3JtYXQiLCJfdGhyb3R0bGUiLCJlY0hlbHBlciIsImhlbHBlciIsInBhcnNlR2VvSlNPTiIsIl9MaXN0IiwiX01vZGVsIiwiX0F4aXMiLCJfZW52IiwicGFyc2VHZW9Kc29uIiwiZWNVdGlsIiwidXRpbCIsImNyZWF0ZUxpc3RGcm9tQXJyYXkiLCJheGlzTW9kZWxDb21tb25NaXhpbiIsIl9kYXRhU3RhY2tIZWxwZXIiLCJfY29tcGxldGVEaW1lbnNpb25zIiwiX2NyZWF0ZURpbWVuc2lvbnMiLCJfc3ltYm9sIiwiY3JlYXRlTGlzdCIsImNyZWF0ZVNjYWxlIiwibWl4aW5BeGlzTW9kZWxDb21tb25NZXRob2RzIiwidG9vbGJveCIsImJydXNoIiwidGl0bGUiLCJsaW5lWCIsImxpbmVZIiwiZGF0YVZpZXciLCJsYW5nIiwiZGF0YVpvb20iLCJ6b29tIiwiYmFjayIsIm1hZ2ljVHlwZSIsImJhciIsInN0YWNrIiwidGlsZWQiLCJyZXN0b3JlIiwic2F2ZUFzSW1hZ2UiLCJ0eXBlTmFtZXMiLCJwaWUiLCJzY2F0dGVyIiwiZWZmZWN0U2NhdHRlciIsInJhZGFyIiwidHJlZSIsInRyZWVtYXAiLCJib3hwbG90IiwiY2FuZGxlc3RpY2siLCJoZWF0bWFwIiwicGFyYWxsZWwiLCJsaW5lcyIsImdyYXBoIiwic2Fua2V5IiwiZnVubmVsIiwiZ2F1Z2UiLCJwaWN0b3JpYWxCYXIiLCJ0aGVtZVJpdmVyIiwic3VuYnVyc3QiLCJnZW5lcmFsIiwid2l0aFRpdGxlIiwid2l0aG91dFRpdGxlIiwic2luZ2xlIiwicHJlZml4Iiwid2l0aE5hbWUiLCJ3aXRob3V0TmFtZSIsIm11bHRpcGxlIiwic2VwYXJhdG9yIiwibWlkZGxlIiwiYWxsRGF0YSIsInBhcnRpYWxEYXRhIiwiY3JlYXRlUmVuZGVyUGxhbm5lciIsIlNUQUNLX1BSRUZJWCIsIkxhcmdlQXJyIiwiRmxvYXQzMkFycmF5IiwiZ2V0U2VyaWVzU3RhY2tJZCIsImdldEF4aXNLZXkiLCJpc09uQ2FydGVzaWFuIiwiaXNJbkxhcmdlTW9kZSIsImJhclNlcmllcyIsInNlcmllc0luZm9MaXN0IiwiYmFzZUF4aXMiLCJiYXJXaWR0aCIsImJhck1heFdpZHRoIiwiYmFyR2FwIiwiYmFyQ2F0ZWdvcnlHYXAiLCJheGlzS2V5Iiwic3RhY2tJZCIsImRvQ2FsQmFyV2lkdGhBbmRPZmZzZXQiLCJjb2x1bW5zTWFwIiwic2VyaWVzSW5mbyIsImNvbHVtbnNPbkF4aXMiLCJyZW1haW5lZFdpZHRoIiwiYXV0b1dpZHRoQ291bnQiLCJjYXRlZ29yeUdhcCIsInN0YWNrcyIsImJhckdhcFBlcmNlbnQiLCJhdXRvV2lkdGgiLCJjb2x1bW4iLCJsYXN0Q29sdW1uIiwid2lkdGhTdW0iLCJsYXJnZUxheW91dCIsInJlc2V0IiwiY2FydGVzaWFuIiwidmFsdWVBeGlzIiwiYmFzZURpbSIsInZhbHVlQXhpc0hvcml6b250YWwiLCJ2YWx1ZURpbUlkeCIsInByb2dyZXNzIiwibGFyZ2VQb2ludHMiLCJ2YWx1ZVBhaXIiLCJ2YWx1ZUF4aXNTdGFydCIsImdldFZhbHVlQXhpc1N0YXJ0Iiwic3RhY2tlZCIsImdldExheW91dE9uQXhpcyIsIndpZHRoQW5kT2Zmc2V0cyIsIm9mZnNldENlbnRlciIsImxhc3RTdGFja0Nvb3JkcyIsImxhc3RTdGFja0Nvb3Jkc09yaWdpbiIsImNvbHVtbkxheW91dEluZm8iLCJjb2x1bW5PZmZzZXQiLCJjb2x1bW5XaWR0aCIsImJhck1pbkhlaWdodCIsImlzVmFsdWVBeGlzSCIsImJhc2VWYWx1ZSIsInNpZ24iLCJiYXNlQ29vcmQiLCJtYXNrQ29sb3IiLCJtYXNrIiwiYXJjIiwiQXJjIiwibGFiZWxSZWN0IiwidGV4dERpc3RhbmNlIiwiYW5pbWF0ZVNoYXBlIiwiY29tcG9uZW50VXRpbCIsIl9jbGF6eiIsImVuYWJsZUNsYXNzTWFuYWdlbWVudCIsImJveExheW91dE1peGluIiwiZGVwZW5kZW50TW9kZWxzIiwiJGNvbnN0cnVjdG9yIiwiZXh0cmFPcHQiLCJnZXRVSUQiLCJpbnB1dFBvc2l0aW9uUGFyYW1zIiwiZ2V0TGF5b3V0UGFyYW1zIiwidGhlbWVNb2RlbCIsImdldFRoZW1lIiwiZ2V0RGVmYXVsdE9wdGlvbiIsIm1lcmdlTGF5b3V0UGFyYW0iLCJuZXdDcHRPcHRpb24iLCJvcHRMaXN0IiwiQ2xhc3MiLCJzdXBlckNsYXNzIiwiZ2V0UmVmZXJyaW5nQ29tcG9uZW50cyIsInF1ZXJ5Q29tcG9uZW50cyIsInJlZ2lzdGVyV2hlbkV4dGVuZCIsImVuYWJsZVN1YlR5cGVEZWZhdWx0ZXIiLCJlbmFibGVUb3BvbG9naWNhbFRyYXZlbCIsImRlcHMiLCJnZXRDbGFzc2VzQnlNYWluVHlwZSIsImdsb2JhbERlZmF1bHQiLCJjb2xvclBhbGV0dGVNaXhpbiIsIk9QVElPTl9JTk5FUl9LRVkiLCJfb3B0aW9uTWFuYWdlciIsImJhc2VPcHRpb24iLCJtb3VudE9wdGlvbiIsIl9zZXJpZXNJbmRpY2VzIiwiX3Nlcmllc0luZGljZXNNYXAiLCJub3RNZXJnZUNvbG9yTGF5ZXIiLCJjb2xvckxheWVyIiwidGhlbWVJdGVtIiwiaGFzQ2xhc3MiLCJtZXJnZVRoZW1lIiwidGltZWxpbmVPcHRpb24iLCJnZXRUaW1lbGluZU9wdGlvbiIsIm1lZGlhT3B0aW9ucyIsImdldE1lZGlhT3B0aW9uIiwibWVkaWFPcHRpb24iLCJjb21wb25lbnRzTWFwIiwibmV3Q3B0VHlwZXMiLCJjb21wb25lbnRPcHRpb24iLCJ0b3BvbG9naWNhbFRyYXZlbCIsImdldEFsbENsYXNzTWFpblR5cGVzIiwibmV3Q3B0T3B0aW9uTGlzdCIsIm1hcFJlc3VsdCIsIm1hcHBpbmdUb0V4aXN0cyIsIm1ha2VJZEFuZE5hbWUiLCJrZXlJbmZvIiwiZXhpc3RDb21wb25lbnQiLCJkZXRlcm1pbmVTdWJUeXBlIiwidHlwZXMiLCJyZXQiLCJnZXRDb21wb25lbnRzQnlUeXBlcyIsIkNvbXBvbmVudE1vZGVsQ2xhc3MiLCJjcmVhdGVTZXJpZXNJbmRpY2VzIiwiaXNJZElubmVyIiwiY3B0cyIsImlzSWRBcnJheSIsImNwdCIsImlzTmFtZUFycmF5IiwiZmlsdGVyQnlTdWJUeXBlIiwicXVlcnlDb25kIiwicSIsImluZGV4QXR0ciIsImlkQXR0ciIsIm5hbWVBdHRyIiwiZ2V0UXVlcnlDb25kIiwiZG9GaWx0ZXIiLCJjb21wb25lbnRzIiwicXVlcnlSZXN1bHQiLCJvbmVTZXJpZXMiLCJnZXRTZXJpZXNCeVR5cGUiLCJnZXRTZXJpZXMiLCJnZXRTZXJpZXNDb3VudCIsInJhd1Nlcmllc0luZGV4IiwiZWFjaFJhd1Nlcmllc0J5VHlwZSIsImdldEN1cnJlbnRTZXJpZXNJbmRpY2VzIiwiY29tcG9uZW50VHlwZXMiLCJzZWlyZXNJbmRleCIsImlzTm90VGFyZ2V0U2VyaWVzIiwibGluZVN0eWxlTWl4aW4iLCJhcmVhU3R5bGVNaXhpbiIsInRleHRTdHlsZU1peGluIiwiaXRlbVN0eWxlTWl4aW4iLCJkb0dldCIsInBhdGhBcnIiLCJnZXRQYXJlbnQiLCJwYXRoIiwiZ2V0UGFyZW50TWV0aG9kIiwicGFyc2VQYXRoIiwidGhpc1BhcmVudE1vZGVsIiwiaXNFbXB0eSIsInNldFJlYWRPbmx5IiwiY3VzdG9taXplR2V0UGFyZW50IiwiUVVFUllfUkVHIiwiX3RpbWVsaW5lT3B0aW9ucyIsIl9tZWRpYUxpc3QiLCJfbWVkaWFEZWZhdWx0IiwiX2N1cnJlbnRNZWRpYUluZGljZXMiLCJfb3B0aW9uQmFja3VwIiwiX25ld0Jhc2VPcHRpb24iLCJhcHBseU1lZGlhUXVlcnkiLCJlY1dpZHRoIiwiZWNIZWlnaHQiLCJyZWFsTWFwIiwiYXNwZWN0cmF0aW8iLCJhcHBsaWNhdGFibGUiLCJtYXRjaGVkIiwibWF0Y2giLCJvcGVyYXRvciIsInJlYWxBdHRyIiwicmVhbCIsImV4cGVjdCIsImNvbXBhcmUiLCJyYXdPcHRpb24iLCJvbGRPcHRpb25CYWNrdXAiLCJuZXdQYXJzZWRPcHRpb24iLCJpc05ldyIsIm1lZGlhRGVmYXVsdCIsInRpbWVsaW5lT3B0aW9ucyIsIm1lZGlhTGlzdCIsInRpbWVsaW5lT3B0IiwidGltZWxpbmUiLCJtZWRpYSIsInNpbmdsZU1lZGlhIiwicHJlUHJvY2VzcyIsIm9sZE9wdGlvbiIsIm5ld0NwdE9wdCIsIm9sZENwdE9wdCIsImlzUmVjcmVhdGUiLCJvcHRpb25CYWNrdXAiLCJ0aW1lbGluZU1vZGVsIiwiZ2V0Q3VycmVudEluZGV4IiwiaW5kaWNlczEiLCJpbmRpY2VzMiIsImluZGljZXNFcXVhbHMiLCJfZm9ybWF0IiwiZm9ybWF0VGltZSIsImFkZENvbW1hcyIsImdldFRvb2x0aXBNYXJrZXIiLCJkYXRhRm9ybWF0TWl4aW4iLCJjcmVhdGVUYXNrIiwiX3NvdXJjZUhlbHBlciIsInZpc3VhbENvbG9yQWNjZXNzUGF0aCIsImRhdGFUYXNrIiwiZGF0YVRhc2tDb3VudCIsImRhdGFUYXNrUmVzZXQiLCJ3cmFwRGF0YSIsImRhdGFCZWZvcmVQcm9jZXNzZWQiLCJhdXRvU2VyaWVzTmFtZSIsInRoZW1lU3ViVHlwZSIsImZpbGxEYXRhVGV4dFN0eWxlIiwibmV3U2VyaWVzT3B0aW9uIiwidGFzayIsImdldEN1cnJlbnRUYXNrIiwiZ2V0TGlua2VkRGF0YSIsInNldERhdGEiLCJtb2RpZnlPdXRwdXRFbmQiLCJzZXRPdXRwdXRFbmQiLCJvdXRwdXREYXRhIiwibXVsdGlwbGVTZXJpZXMiLCJmb3JtYXRTaW5nbGVWYWx1ZSIsInRvb2x0aXBEaW1zIiwidG9vbHRpcERpbUxlbiIsImdldFJhd1ZhbHVlIiwiaXNWYWx1ZUFyciIsImNvbG9yU3RvcHMiLCJmb3JtYXR0ZWRWYWx1ZSIsInZlcnRpYWxseSIsInNldEVhY2hJdGVtIiwiZGltSGVhZCIsInZhbFN0ciIsImZvcm1hdEFycmF5VmFsdWUiLCJjb2xvckVsIiwiYW5pbWF0aW9uRW5hYmxlZCIsImdldENvbG9yRnJvbVBhbGV0dGUiLCJzY29wZSIsInJlcXVlc3RDb2xvck51bSIsImNvb3JkRGltVG9EYXRhRGltIiwiZ2V0UHJvZ3Jlc3NpdmUiLCJnZXRQcm9ncmVzc2l2ZVRocmVzaG9sZCIsInBpcGVUYXNrIiwicHJldmVudEluY3JlbWVudGFsIiwibmFtZUFyciIsImdldFNlcmllc0F1dG9OYW1lIiwiZGF0YVRhc2tQcm9ncmVzcyIsInBhcmFtIiwib25EYXRhU2VsZkNoYW5nZSIsInBpcGVsaW5lIiwiZ2V0UGlwZWxpbmUiLCJjdXJyZW50VGFzayIsImFnZW50U3R1Yk1hcCIsInBsYXRmb3JtIiwibmF2aWdhdG9yIiwiZ3JhZGllbnRDb2xvciIsImZvbnRGYW1pbHkiLCJmb250U3R5bGUiLCJhbmltYXRpb25EdXJhdGlvbiIsInByb2dyZXNzaXZlVGhyZXNob2xkIiwiaG92ZXJMYXllclRocmVzaG9sZCIsInVzZVVUQyIsIm1ha2VTdHlsZU1hcHBlciIsImV4Y2x1ZGVzIiwiaW5jbHVkZXMiLCJjb2xvcklkeCIsImNvbG9yTmFtZU1hcCIsInNjb3BlRmllbGRzIiwiZGVmYXVsdENvbG9yUGFsZXR0ZSIsImxheWVyZWRDb2xvclBhbGV0dGUiLCJjb2xvclBhbGV0dGUiLCJjb2xvcnMiLCJwYWxldHRlTnVtIiwiZ2V0TmVhcmVzdENvbG9yUGFsZXR0ZSIsIkRJTUVOU0lPTl9MQUJFTF9SRUciLCJyYXdWYWx1ZSIsImNvbXBvbmVudFN1YlR5cGUiLCJtYXJrZXIiLCJsYWJlbFByb3AiLCJjaGFyQXQiLCJsaW5lRGFzaCIsImdldEJvcmRlckxpbmVEYXNoIiwibGluZVR5cGUiLCJnZXRMaW5lRGFzaCIsImRvdFNpemUiLCJkYXNoU2l6ZSIsImdyYXBoaWNVdGlsIiwiUEFUSF9DT0xPUiIsImlzRW1waGFzaXMiLCJmZXRjaGVycyIsImNhcnRlc2lhbjJkIiwieEF4aXNNb2RlbCIsInlBeGlzTW9kZWwiLCJzaW5nbGVBeGlzIiwic2luZ2xlQXhpc01vZGVsIiwicG9sYXIiLCJwb2xhck1vZGVsIiwicmFkaXVzQXhpc01vZGVsIiwiZmluZEF4aXNNb2RlbCIsImFuZ2xlQXhpc01vZGVsIiwicGFyYWxsZWxNb2RlbCIsInBhcmFsbGVsQXhpc0luZGV4IiwiZmV0Y2giLCJjb21wYXRTdHlsZSIsImNvbXBhdExheW91dFByb3BlcnRpZXMiLCJMQVlPVVRfUFJPUEVSVElFUyIsIkNPTVBBVElUQUJMRV9DT01QT05FTlRTIiwiaXNUaGVtZSIsInNlcmllc09wdCIsImNsb2NrV2lzZSIsInBvaW50ZXJDb2xvciIsIm92ZXJ3cml0ZSIsImRhdGFSYW5nZSIsInZpc3VhbE1hcCIsImNvbXBvbmVudE5hbWUiLCJQT1NTSUJMRV9TVFlMRVMiLCJjb21wYXRFQzJJdGVtU3R5bGUiLCJpdGVtU3R5bGVPcHQiLCJzdHlsZU5hbWUiLCJub3JtYWxJdGVtU3R5bGVPcHQiLCJub3JtYWwiLCJlbXBoYXNpc0l0ZW1TdHlsZU9wdCIsImNvbnZlcnROb3JtYWxFbXBoYXNpcyIsIm9wdFR5cGUiLCJ1c2VFeHRlbmQiLCJub3JtYWxPcHQiLCJlbXBoYXNpc09wdCIsInJlbW92ZUVDM05vcm1hbFN0YXR1cyIsImNvbXBhdFRleHRTdHlsZSIsImxhYmVsT3B0U2luZ2xlIiwiVEVYVF9TVFlMRV9PUFRJT05TIiwiY29tcGF0RUMzQ29tbW9uU3R5bGVzIiwidG9BcnIiLCJ0b09iaiIsIm1hcmtQb2ludCIsIm1hcmtMaW5lIiwibWFya0FyZWEiLCJub2RlcyIsImVkZ2VEYXRhIiwibGlua3MiLCJlZGdlcyIsIm1wRGF0YSIsIm1sRGF0YSIsImJyZWFkY3J1bWIiLCJsZXZlbHMiLCJsZWF2ZXMiLCJwcm9jZXNzU2VyaWVzIiwiYXhlcyIsImF4aXNPcHQiLCJwYXJhbGxlbE9wdCIsInBhcmFsbGVsQXhpc0RlZmF1bHQiLCJjYWxlbmRhciIsImNhbGVuZGFyT3B0IiwicmFkYXJPcHQiLCJnZW9PcHQiLCJyZWdpb25zIiwicmVnaW9uT2JqIiwidG9vbGJveE9wdCIsImZlYXR1cmUiLCJmZWF0dXJlT3B0IiwiY2FsY3VsYXRlU3RhY2siLCJzdGFja0luZm9MaXN0IiwidGFyZ2V0U3RhY2tJbmZvIiwiaWR4SW5TdGFjayIsInJlc3VsdFZhbCIsInJlc3VsdE5hTiIsInRhcmdldERhdGEiLCJ2MCIsInYxIiwiYnlWYWx1ZSIsInN0YWNrZWREYXRhUmF3SW5kZXgiLCJzdGFja2VkT3ZlciIsInN0YWNrSW5mbyIsInN0YWNrSW5mb01hcCIsInJvdW5kTnVtYmVyIiwiX2ludGVydmFsIiwiX2ludGVydmFsUHJlY2lzaW9uIiwidGhpc0V4dGVudCIsInBhcnNlRmxvYXQiLCJ1bmlvbkV4dGVudCIsIm90aGVyIiwiZ2V0SW50ZXJ2YWwiLCJfbmljZUV4dGVudCIsImdldEludGVydmFsUHJlY2lzaW9uIiwiaW50ZXJ2YWxTY2FsZUdldFRpY2tzIiwiZ2V0UHJlY2lzaW9uU2FmZSIsIm5pY2VUaWNrcyIsImludGVydmFsU2NhbGVOaWNlVGlja3MiLCJpbnRlcnZhbFByZWNpc2lvbiIsIm5pY2VUaWNrRXh0ZW50IiwiZXhwYW5kU2l6ZSIsInNjYWxlUHJvdG8iLCJpbnRlcnZhbFNjYWxlUHJvdG8iLCJyb3VuZGluZ0Vycm9yRml4IiwibWF0aEZsb29yIiwibWF0aENlaWwiLCJtYXRoUG93IiwicG93IiwibWF0aExvZyIsIkxvZ1NjYWxlIiwiX29yaWdpbmFsU2NhbGUiLCJvcmlnaW5hbFNjYWxlIiwicG93VmFsIiwiX19maXhNaW4iLCJmaXhSb3VuZGluZ0Vycm9yIiwiX19maXhNYXgiLCJ1bmlvbkV4dGVudEZyb21EYXRhIiwiYXBwcm94VGlja051bSIsInF1YW50aXR5Iiwib3JpZ2luYWxWYWwiLCJfb3JkaW5hbE1ldGEiLCJyYW5rIiwic2V0dGluZyIsIl9zZXR0aW5nIiwiZ2V0U2V0dGluZyIsIl9pc0JsYW5rIiwic2NhbGVIZWxwZXIiLCJUaW1lU2NhbGUiLCJzdGVwTHZsIiwiX3N0ZXBMdmwiLCJkYXRlIiwiT05FX0hPVVIiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImFwcHJveEludGVydmFsIiwic2NhbGVMZXZlbHNMZW4iLCJzY2FsZUxldmVscyIsImxvIiwiaGkiLCJiaXNlY3QiLCJsZXZlbCIsInllYXJTcGFuIiwibmljZSIsInRpbWV6b25lT2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJmaXhFeHRlbnQiLCJPTkVfU0VDT05EIiwiT05FX01JTlVURSIsIk9ORV9EQVkiLCJkYXRhUHJvY2Vzc29ySGFuZGxlcnMiLCJ2aXN1YWxIYW5kbGVycyIsIl9kYXRhUHJvY2Vzc29ySGFuZGxlcnMiLCJfdmlzdWFsSGFuZGxlcnMiLCJfYWxsSGFuZGxlcnMiLCJfc3RhZ2VUYXNrTWFwIiwicGVyZm9ybVN0YWdlVGFza3MiLCJzdGFnZUhhbmRsZXJzIiwibmVlZFNldERpcnR5IiwiX19waXBlbGluZSIsInN0YWdlSGFuZGxlclJlY29yZCIsInNlcmllc1Rhc2tNYXAiLCJvdmVyYWxsVGFzayIsIm92ZXJhbGxOZWVkRGlydHkiLCJzdHViIiwicGVyZm9ybUFyZ3MiLCJibG9jayIsInBpcGVsaW5lSWQiLCJza2lwIiwicGVyZm9ybVJhd1NlcmllcyIsInRhc2tSZWNvcmQiLCJpc0Jsb2NrIiwiX3BpcGVsaW5lTWFwIiwicEN0eCIsInByb2dyZXNzaXZlRW5hYmxlZCIsIl9faWR4SW5QaXBlbGluZSIsImJsb2NrSW5kZXgiLCJtb2REYXRhQ291bnQiLCJtb2RCeSIsImRhdGFMZW4iLCJpbmNyZW1lbnRhbFByZXBhcmVSZW5kZXIiLCJ0aHJlc2hvbGQiLCJwaXBlbGluZU1hcCIsInRhaWwiLCJwaXBlIiwic3RhZ2VUYXNrTWFwIiwiZ2V0VGFyZ2V0U2VyaWVzIiwiY3JlYXRlT25BbGxTZXJpZXMiLCJzZXJpZXNUYXNrUGxhbiIsInNlcmllc1Rhc2tSZXNldCIsInNlcmllc1Rhc2tDb3VudCIsInVzZUNsZWFyVmlzdWFsIiwiaXNWaXN1YWwiLCJpc0xheW91dCIsInJlbW92ZUtleSIsImNyZWF0ZVNlcmllc1N0YWdlVGFzayIsIm92ZXJhbGxSZXNldCIsIm92ZXJhbGxUYXNrUmVzZXQiLCJvdmVyYWxsUHJvZ3Jlc3MiLCJjcmVhdGVTdHViIiwic3R1YlJlc2V0Iiwib25EaXJ0eSIsInN0dWJPbkRpcnR5IiwiYWdlbnQiLCJfX2Jsb2NrIiwiY3JlYXRlT3ZlcmFsbFN0YWdlVGFzayIsImdldFVwc3RyZWFtIiwidXBzdHJlYW1Db250ZXh0Iiwic3R1YlByb2dyZXNzIiwiZ2V0RG93bnN0cmVhbSIsInJlc2V0RGVmaW5lcyIsIm1ha2VTZXJpZXNUYXNrUHJvZ3Jlc3MiLCJzaW5nbGVTZXJpZXNUYXNrUHJvZ3Jlc3MiLCJyZXNldERlZmluZUlkeCIsInJlc2V0RGVmaW5lIiwiZGF0YUVhY2giLCJsZWdhY3lGdW5jIiwiZWNNb2RlbE1vY2siLCJhcGlNb2NrIiwiZGV0ZWN0U2VyaXNlVHlwZSIsIm1vY2tNZXRob2RzIiwiQ2x6IiwiY29uZCIsIlRhc2siLCJkZWZpbmUiLCJfcmVzZXQiLCJfcGxhbiIsIl9vbkRpcnR5IiwiX2RpcnR5IiwidGFza1Byb3RvIiwicGxhblJlc3VsdCIsInVwVGFzayIsIl91cHN0cmVhbSIsImZvcmNlRmlyc3RQcm9ncmVzcyIsImxhc3RNb2RCeSIsIm5vcm1hbGl6ZU1vZEJ5IiwiX21vZEJ5IiwibGFzdE1vZERhdGFDb3VudCIsIl9tb2REYXRhQ291bnQiLCJ0YXNrSW5zIiwiX2R1ZUluZGV4IiwiX291dHB1dER1ZUVuZCIsIl9kdWVFbmQiLCJfc2V0dGVkT3V0cHV0RW5kIiwiX3Byb2dyZXNzIiwiZG93bnN0cmVhbSIsIl9kb3duc3RyZWFtIiwiZG9Qcm9ncmVzcyIsIm91dHB1dER1ZUVuZCIsIml0ZXJhdG9yIiwid2luQ291bnQiLCJpdCIsInNTdGVwIiwic0NvdW50IiwibW9kTmV4dCIsInNlcXVlbnRpYWxOZXh0IiwiX2NhbGxpbmdQcm9ncmVzcyIsImRvd25UYXNrIiwibGVnZW5kIiwiaWNvblN0eWxlIiwiY29udHJvbFN0eWxlIiwidGltZUF4aXMiLCJheGlzVGljayIsImF4aXNMYWJlbCIsInNwbGl0TGluZSIsInNwbGl0QXJlYSIsImFyZWFTdHlsZSIsImxvZ0F4aXMiLCJjYXRlZ29yeUF4aXMiLCJjb2xvcjAiLCJib3JkZXJDb2xvcjAiLCJjb2xvckFsbCIsIlRZUEVfREVMSU1JVEVSIiwiSVNfQ09OVEFJTkVSIiwiY2xhc3NCYXNlIiwiYXJncyIsIlJvb3RDbGFzcyIsIm1hbmRhdG9yeU1ldGhvZHMiLCJFeHRlbmRlZENsYXNzIiwiY2xhc3NBdHRyIiwidG9GaXhlZCIsImVudGl0eSIsInJlZ2lzdGVyQ2xhc3MiLCJjaGVja0NsYXNzVHlwZSIsIm1ha2VDb250YWluZXIiLCJjb21wb25lbnRNYWluVHlwZSIsInRocm93V2hlbk5vdEZvdW5kIiwiaGFzU3ViVHlwZXMiLCJvcmlnaW5hbEV4dGVuZCIsInN1YlR5cGVEZWZhdWx0ZXJzIiwiZGVmYXVsdGVyIiwiY29tcG9uZW50VHlwZU1haW4iLCJkZXBlbmRlbmN5R2V0dGVyIiwiY3JlYXRlRGVwZW5kZW5jeUdyYXBoSXRlbSIsInByZWRlY2Vzc29yIiwic3VjY2Vzc29yIiwidGFyZ2V0TmFtZUxpc3QiLCJmdWxsTmFtZUxpc3QiLCJub0VudHJ5TGlzdCIsImF2YWlsYWJsZURlcHMiLCJvcmlnaW5hbERlcHMiLCJnZXRBdmFpbGFibGVEZXBlbmRlbmNpZXMiLCJlbnRyeUNvdW50IiwiZGVwZW5kZW50TmFtZSIsInRoYXRJdGVtIiwibWFrZURlcG5kZW5jeUdyYXBoIiwidGFyZ2V0TmFtZVNldCIsImN1cnJDb21wb25lbnRUeXBlIiwiY3VyclZlcnRleCIsImlzSW5UYXJnZXROYW1lU2V0IiwicmVtb3ZlRWRnZUFuZEFkZCIsInJlbW92ZUVkZ2UiLCJzdWNjQ29tcG9uZW50VHlwZSIsInJlcGxhY2VSZWciLCJyZXBsYWNlTWFwIiwiJiIsIjwiLCI+IiwiXCIiLCInIiwic3RyIiwiVFBMX1ZBUl9BTElBUyIsIndyYXBWYXIiLCJ2YXJOYW1lIiwic2VyaWVzSWR4IiwicGFkIiwic3Vic3RyIiwidXBwZXJDYXNlRmlyc3QiLCJncm91cDEiLCJ0b1VwcGVyQ2FzZSIsInBhcmFtc0xpc3QiLCJzZXJpZXNMZW4iLCJhbGlhcyIsImZvcm1hdFRwbFNpbXBsZSIsImlzVVRDIiwidXRjIiwiTSIsIlMiLCJjYXBpdGFsRmlyc3QiLCJwYXRoVG9vbCIsIlBhdGgiLCJUcmFuc2Zvcm1hYmxlIiwiWkltYWdlIiwiQ2lyY2xlIiwiUmluZyIsIlBvbHlnb24iLCJCZXppZXJDdXJ2ZSIsIkNvbXBvdW5kUGF0aCIsIkxpbmVhckdyYWRpZW50IiwiUmFkaWFsR3JhZGllbnQiLCJJbmNyZW1lbnRhbERpc3BsYXlhYmxlIiwiRU1QVFlfT0JKIiwibWFrZVBhdGgiLCJwYXRoRGF0YSIsImNyZWF0ZUZyb21TdHJpbmciLCJjZW50ZXJHcmFwaGljIiwicmVzaXplUGF0aCIsIm1lcmdlUGF0aCIsInN1YlBpeGVsT3B0aW1pemUiLCJwb3NpdGl2ZU9yTmVnYXRpdmUiLCJkb3VibGVkUG9zaXRpb24iLCJoYXNGaWxsT3JTdHJva2UiLCJmaWxsT3JTdHJva2UiLCJsaWZ0Q29sb3IiLCJsaWZ0IiwiY2FjaGVFbGVtZW50U3RsIiwiX19ob3ZlclN0bERpcnR5IiwiX19ob3ZlclN0bCIsIm5vcm1hbFN0eWxlIiwiX19ub3JtYWxTdGwiLCJkb1NpbmdsZUVudGVySG92ZXIiLCJfX2lzSG92ZXIiLCJfX3pyIiwiYWRkSG92ZXIiLCJpbnNpZGVSb2xsYmFja09wdCIsImluc2lkZVJvbGxiYWNrIiwidGV4dFN0cm9rZSIsInRleHRTdHJva2VXaWR0aCIsInJvbGxiYWNrSW5zaWRlU3R5bGUiLCJleHRlbmRGcm9tIiwiYXBwbHlJbnNpZGVTdHlsZSIsImluc2lkZU9yaWdpbmFsVGV4dFBvc2l0aW9uIiwiZG9TaW5nbGVMZWF2ZUhvdmVyIiwibm9ybWFsU3RsIiwicmVtb3ZlSG92ZXIiLCJkb0VudGVySG92ZXIiLCJkb0xlYXZlSG92ZXIiLCJzZXRFbGVtZW50SG92ZXJTdGwiLCJob3ZlclN0bCIsIm9uRWxlbWVudE1vdXNlT3ZlciIsIl9faG92ZXJTaWxlbnRPblRvdWNoIiwienJCeVRvdWNoIiwiX19pc0VtcGhhc2lzIiwib25FbGVtZW50TW91c2VPdXQiLCJlbnRlckVtcGhhc2lzIiwibGVhdmVFbXBoYXNpcyIsInNwZWNpZmllZFRleHRTdHlsZSIsInNldFRleHRTdHlsZUNvbW1vbiIsImhvc3QiLCJpc1JlY3RUZXh0IiwidGV4dE9mZnNldCIsInJldHJpZXZlMiIsInJpY2hSZXN1bHQiLCJnbG9iYWxUZXh0U3R5bGUiLCJyaWNoSXRlbU5hbWVzIiwicmljaEl0ZW1OYW1lTWFwIiwicmljaCIsImdldFJpY2hJdGVtTmFtZXMiLCJyaWNoVGV4dFN0eWxlIiwic2V0VG9rZW5UZXh0U3R5bGUiLCJmb3JjZVJpY2giLCJnZXRBdXRvQ29sb3IiLCJ0ZXh0Qm9yZGVyQ29sb3IiLCJ0ZXh0Qm9yZGVyV2lkdGgiLCJvcmlnaW5hbFRleHRQb3NpdGlvbiIsInRleHRMaW5lSGVpZ2h0IiwidGV4dFdpZHRoIiwidGV4dEhlaWdodCIsInRleHRUYWciLCJ0ZXh0QmFja2dyb3VuZENvbG9yIiwidGV4dFBhZGRpbmciLCJ0ZXh0Qm9yZGVyUmFkaXVzIiwidGV4dEJveFNoYWRvd0NvbG9yIiwidGV4dEJveFNoYWRvd0JsdXIiLCJ0ZXh0Qm94U2hhZG93T2Zmc2V0WCIsInRleHRCb3hTaGFkb3dPZmZzZXRZIiwidGV4dFNoYWRvd0NvbG9yIiwidGV4dFNoYWRvd0JsdXIiLCJ0ZXh0U2hhZG93T2Zmc2V0WCIsInRleHRTaGFkb3dPZmZzZXRZIiwiYW5pbWF0ZU9yU2V0UHJvcHMiLCJpc1VwZGF0ZSIsImFuaW1hdGFibGVNb2RlbCIsInBvc3RmaXgiLCJhbmltYXRpb25EZWxheSIsImdldEFuaW1hdGlvbkRlbGF5UGFyYW1zIiwiaW52ZXJ0IiwiZXh0ZW5kU2hhcGUiLCJleHRlbmRQYXRoIiwiZXh0ZW5kRnJvbVN0cmluZyIsIm1ha2VJbWFnZSIsImltYWdlVXJsIiwib25sb2FkIiwib3JpZ2luWCIsIm9yaWdpblkiLCJvcmlnaW5XaWR0aCIsIm9yaWdpbkhlaWdodCIsImhvdmVyU2lsZW50T25Ub3VjaCIsImVtcGhhc2lzU3R5bGUiLCJub3JtYWxNb2RlbCIsImVtcGhhc2lzTW9kZWwiLCJub3JtYWxTcGVjaWZpZWQiLCJlbXBoYXNpc1NwZWNpZmllZCIsImJhc2VUZXh0IiwibGFiZWxEaW1JbmRleCIsInNob3dOb3JtYWwiLCJzaG93RW1waGFzaXMiLCJub3JtYWxTdHlsZVRleHQiLCJlbXBoYXNpc1N0eWxlVGV4dCIsInNldFRleHQiLCJkZWZhdWx0Q29sb3IiLCJnVGV4dFN0eWxlTW9kZWwiLCJ0cmltIiwiZ2V0VHJhbnNmb3JtIiwiYW5jZXN0b3IiLCJtYXQiLCJ0cmFuc2Zvcm1EaXJlY3Rpb24iLCJoQmFzZSIsInZCYXNlIiwidmVydGV4IiwiZ3JvdXBUcmFuc2l0aW9uIiwiZzEiLCJnMiIsImVsTWFwMSIsImciLCJlbE1hcCIsImdldEVsTWFwIiwib2xkRWwiLCJuZXdQcm9wIiwiZ2V0QW5pbWF0YWJsZVByb3BzIiwiY2xpcFBvaW50c0J5UmVjdCIsImNsaXBSZWN0QnlSZWN0IiwidGFyZ2V0UmVjdCIsImljb25TdHIiLCJyZWN0SG92ZXIiLCJzdHJva2VOb1NjYWxlIiwiTE9DQVRJT05fUEFSQU1TIiwiSFZfTkFNRVMiLCJib3hMYXlvdXQiLCJtYXhIZWlnaHQiLCJjdXJyZW50TGluZU1heFNpemUiLCJuZXh0WCIsIm5leHRZIiwibmV4dENoaWxkIiwibmV4dENoaWxkUmVjdCIsIm1vdmVYIiwibW92ZVkiLCJ2Ym94IiwiaGJveCIsImNvbnRhaW5lclJlY3QiLCJjb250YWluZXJXaWR0aCIsImNvbnRhaW5lckhlaWdodCIsInZlcnRpY2FsTWFyZ2luIiwiaG9yaXpvbnRhbE1hcmdpbiIsImNvcHlMYXlvdXRQYXJhbXMiLCJnZXRBdmFpbGFibGVTaXplIiwiaHYiLCJib3VuZGluZ01vZGUiLCJuZWVkTG9jYWxUcmFuc2Zvcm0iLCJlbFBvcyIsInNpemVDYWxjdWxhYmxlIiwiaHZJZHgiLCJ0YXJnZXRPcHRpb24iLCJoUmVzdWx0IiwidlJlc3VsdCIsIm5ld1BhcmFtcyIsIm5ld1ZhbHVlQ291bnQiLCJtZXJnZWQiLCJtZXJnZWRWYWx1ZUNvdW50IiwiaGFzUHJvcCIsIkRVTU1ZX0NPTVBPTkVOVF9OQU1FX1BSRUZJWCIsImNwdE9wdGlvbiIsImlubmVyVW5pcXVlSW5kZXgiLCJoYXMiLCJzdWJPcHRzIiwic3ViT3B0TmFtZSIsImV4aXN0cyIsIm5ld0NwdE9wdGlvbnMiLCJpZE1hcCIsImV4aXN0Q3B0IiwiaWROdW0iLCJjb21wcmVzc0JhdGNoZXMiLCJiYXRjaEEiLCJiYXRjaEIiLCJtYXBBIiwibWFwQiIsIm1ha2VNYXAiLCJtYXBUb0FycmF5Iiwic291cmNlQmF0Y2giLCJvdGhlck1hcCIsIm90aGVyRGF0YUluZGljZXMiLCJsZW5qIiwiaXNEYXRhIiwiaG9zdE9iaiIsInBhcnNlZEtleSIsInF1ZXJ5VHlwZSIsImluY2x1ZGVNYWluVHlwZXMiLCJxdWVyeVBhcmFtIiwiUkFESUFOX0VQU0lMT04iLCJUSU1FX1JFRyIsInF1YW50aXR5RXhwb25lbnQiLCJMTjEwIiwiZG9tYWluIiwic3ViRG9tYWluIiwic3ViUmFuZ2UiLCJhbGwiLCJfdHJpbSIsInJldHVyblN0ciIsImFzYyIsImdldFByZWNpc2lvbiIsImVJbmRleCIsImRvdEluZGV4IiwicGl4ZWxFeHRlbnQiLCJkYXRhUXVhbnRpdHkiLCJzaXplUXVhbnRpdHkiLCJhY2MiLCJkaWdpdHMiLCJ2b3Rlc1BlclF1b3RhIiwidGFyZ2V0U2VhdHMiLCJzZWF0cyIsInZvdGVzIiwiY3VycmVudFN1bSIsInJlbWFpbmRlciIsIk5FR0FUSVZFX0lORklOSVRZIiwibWF4SWQiLCJNQVhfU0FGRV9JTlRFR0VSIiwicmFkaWFuIiwicGkyIiwiZXhlYyIsImhvdXIiLCJVVEMiLCJleHBvbmVudCIsImV4cDEwIiwicmVmb3JtSW50ZXJ2YWxzIiwibGciLCJjbG9zZSIsImN1cnIiLCJjdXJyQ2xvc2UiLCJpc051bWVyaWMiLCJUcmlhbmdsZSIsImJ1aWxkUGF0aCIsImxpbmVUbyIsImNsb3NlUGF0aCIsIkRpYW1vbmQiLCJQaW4iLCJ3IiwiYXNpbiIsInRhblgiLCJ0YW5ZIiwiY3BMZW4iLCJjcExlbjIiLCJiZXppZXJDdXJ2ZVRvIiwiQXJyb3ciLCJjdHgiLCJzeW1ib2xDdG9ycyIsInJvdW5kUmVjdCIsInNxdWFyZSIsImNpcmNsZSIsImRpYW1vbmQiLCJwaW4iLCJhcnJvdyIsInRyaWFuZ2xlIiwic3ltYm9sU2hhcGVNYWtlcnMiLCJzeW1ib2xCdWlsZFByb3hpZXMiLCJTeW1ib2xDbHoiLCJiZWZvcmVCcnVzaCIsImluQnVuZGxlIiwicHJveHlTeW1ib2wiLCJzeW1ib2xQYXRoU2V0Q29sb3IiLCJpbm5lckNvbG9yIiwic3ltYm9sU3R5bGUiLCJzeW1ib2xTaGFwZSIsIl9faXNFbXB0eUJydXNoIiwia2VlcEFzcGVjdCIsInN5bWJvbFBhdGgiLCJzZXRDb2xvciIsIk9SSUdJTl9NRVRIT0QiLCJSQVRFIiwiVEhST1RUTEVfVFlQRSIsImRlYm91bmNlIiwiY3VyckNhbGwiLCJkZWJvdW5jZU5leHRDYWxsIiwibGFzdENhbGwiLCJsYXN0RXhlYyIsInRpbWVyIiwiZ2V0VGltZSIsInRoaXNEZWxheSIsInRoaXNEZWJvdW5jZSIsImRlYm91bmNlRGVsYXkiLCJmbkF0dHIiLCJ0aHJvdHRsZVR5cGUiLCJvcmlnaW5GbiIsImxhc3RUaHJvdHRsZVR5cGUiLCJyZW5kZXJQbGFubmVyIiwiQ2hhcnQiLCJyZW5kZXJUYXNrUGxhbiIsInJlbmRlclRhc2tSZXNldCIsImhpZ2hsaWdodCIsInRvZ2dsZUhpZ2hsaWdodCIsImRvd25wbGF5IiwiaW5jcmVtZW50YWxSZW5kZXIiLCJjaGFydFByb3RvIiwiZWxTZXRTdGF0ZSIsInN0YXRlIiwiY2hpbGRDb3VudCIsInByb2dyZXNzTWV0aG9kTWFwIiwiY29tcG9uZW50UHJvdG8iLCJhcmlhTW9kZWwiLCJzZXJpZXNDbnQiLCJhcmlhTGFiZWwiLCJtYXhEYXRhQ250IiwibWF4U2VyaWVzQ250IiwiZGlzcGxheVNlcmllc0NudCIsImdldFRpdGxlIiwiZ2V0Q29uZmlnIiwic2VyaWVzTGFiZWxzIiwic2VyaWVzQ291bnQiLCJzZXJpZXNMYWJlbCIsInNlcmllc1RwbCIsImdldFNlcmllc1R5cGVOYW1lIiwiZGlzcGxheUNudCIsImRhdGFMYWJlbHMiLCJrZXlWYWx1ZXMiLCJSZWdFeHAiLCJ1c2VyQ29uZmlnIiwicGFsZXR0ZVNjb3BlIiwic2VpcmVzTW9kZWxNYXAiLCJfX3BhbGV0dGVTY29wZSIsImRhdGFBbGwiLCJpZHhNYXAiLCJmaWx0ZXJlZElkeCIsInNpbmdsZURhdGFDb2xvciIsIkdyYWRpZW50IiwiY29sb3JBY2Nlc3NQYXRoIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJnZXRQcm90b3R5cGVPZiIsInUiLCJub2RlVHlwZSIsIm5vTW9kdWxlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiVCIsIkMiLCJqcXVlcnkiLCJ0b0FycmF5IiwicHVzaFN0YWNrIiwicHJldk9iamVjdCIsImZpcnN0IiwiZXEiLCJpc1BsYWluT2JqZWN0IiwiZXhwYW5kbyIsImlzUmVhZHkiLCJpc0VtcHR5T2JqZWN0IiwiZ2xvYmFsRXZhbCIsIm1ha2VBcnJheSIsImluQXJyYXkiLCJncmVwIiwiZ3VpZCIsInN1cHBvcnQiLCJFIiwiYWUiLCJEIiwiTiIsIkEiLCJMIiwiSCIsIk8iLCJQIiwiUiIsIkkiLCJXIiwiJCIsIkIiLCJGIiwiXyIsIlgiLCJVIiwiViIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwiRyIsIlkiLCJRIiwiSiIsIksiLCJaIiwiZWUiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJ0ZSIsIm5lIiwicmUiLCJpZSIsImRpc2FibGVkIiwiY2hpbGROb2RlcyIsIm9lIiwib3duZXJEb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsIm5vZGVOYW1lIiwidmUiLCJnZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjYWNoZUxlbmd0aCIsInNlIiwidWUiLCJsZSIsImF0dHJIYW5kbGUiLCJjZSIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJmZSIsInBlIiwiZGUiLCJpc0Rpc2FibGVkIiwiaGUiLCJpc1hNTCIsImRvY3VtZW50RWxlbWVudCIsInNldERvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiYXR0cmlidXRlcyIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsIm1hdGNoZXNTZWxlY3RvciIsIm1hdGNoZXMiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiY29udGFpbnMiLCJzb3J0RGV0YWNoZWQiLCJzcGVjaWZpZWQiLCJ1bmlxdWVTb3J0IiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJnZXRUZXh0IiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCIgIiwiKyIsIn4iLCJwcmVGaWx0ZXIiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkb3MiLCJzZXRGaWx0ZXJzIiwibm90IiwiaW5uZXJUZXh0IiwibG9jYXRpb24iLCJoYXNoIiwicm9vdCIsImZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZEluZGV4IiwiZW1wdHkiLCJoZWFkZXIiLCJpbnB1dCIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwibnRoIiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsInN1Ym1pdCIsInllIiwieGUiLCJ3ZSIsIlRlIiwiYmUiLCJDZSIsIkVlIiwiZmlsdGVycyIsInRva2VuaXplIiwiY29tcGlsZSIsInNlbGVjdG9yIiwiZGVmYXVsdFZhbHVlIiwiZXhwciIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJpcyIsInBhcnNlSFRNTCIsInJlYWR5IiwiY29udGVudHMiLCJwcmV2IiwiY2xvc2VzdCIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsInNpYmxpbmdzIiwiY29udGVudERvY3VtZW50IiwiZG9uZSIsImZhaWwiLCJDYWxsYmFja3MiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJtZW1vcnkiLCJkaXNhYmxlIiwibG9jayIsImxvY2tlZCIsImZpcmVXaXRoIiwiZmlyZSIsImZpcmVkIiwiRGVmZXJyZWQiLCJhbHdheXMiLCJjYXRjaCIsIm5vdGlmeSIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwicmVqZWN0V2l0aCIsImdldFN0YWNrSG9vayIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeVdhaXQiLCJkb1Njcm9sbCIsImFjY2VzcyIsImhhc0RhdGEiLCJyZW1vdmVEYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwiX3F1ZXVlSG9va3MiLCJjbGVhclF1ZXVlIiwiY3NzIiwiY3VyIiwiY3NzTnVtYmVyIiwidW5pdCIsImJvZHkiLCJ0b2dnbGUiLCJ0aGVhZCIsInRyIiwidGQiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJodG1sUHJlZmlsdGVyIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGVja0Nsb25lIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJrZSIsIlNlIiwiRGUiLCJldmVudHMiLCJ0cmlnZ2VyZWQiLCJzcGVjaWFsIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJvcmlnVHlwZSIsIm5hbWVzcGFjZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaGFuZGxlcnMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJlbGVtIiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwiaGFuZGxlT2JqIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJhZGRQcm9wIiwiRXZlbnQiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwibm93IiwiaXNTaW11bGF0ZWQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJhbHRLZXkiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNoYW5nZWRUb3VjaGVzIiwiY3RybEtleSIsImRldGFpbCIsImV2ZW50UGhhc2UiLCJtZXRhS2V5IiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiY2hhciIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50IiwidG91Y2hlcyIsIndoaWNoIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJOZSIsIkFlIiwiamUiLCJxZSIsIkxlIiwiSGUiLCJPZSIsIlBlIiwiTWUiLCJSZSIsIl9ldmFsVXJsIiwiSWUiLCJjbGVhbkRhdGEiLCJkZXRhY2giLCJhcHBlbmQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwiV2UiLCIkZSIsIm9wZW5lciIsIkJlIiwiRmUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxCb3hTdHlsZXMiLCJtaW5XaWR0aCIsIl9lIiwibWFyZ2luTGVmdCIsIm9mZnNldFdpZHRoIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwiemUiLCJYZSIsIlVlIiwidmlzaWJpbGl0eSIsIlZlIiwibGV0dGVyU3BhY2luZyIsIkdlIiwiWWUiLCJKZSIsImNzc1Byb3BzIiwiUWUiLCJLZSIsIlplIiwiZXQiLCJ0dCIsImNzc0hvb2tzIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInNldFByb3BlcnR5IiwiZ2V0Q2xpZW50UmVjdHMiLCJib3JkZXIiLCJleHBhbmQiLCJUd2VlbiIsImVhc2luZyIsInByb3BIb29rcyIsInJ1biIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInN3aW5nIiwibnQiLCJydCIsIm90IiwiYXQiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzdCIsInV0IiwicHQiLCJ0d2VlbmVycyIsInByZWZpbHRlcnMiLCJ0d2VlbnMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiY3JlYXRlVHdlZW4iLCJmdCIsImNvbXBsZXRlIiwiYW5pbSIsIkFuaW1hdGlvbiIsIioiLCJ0d2VlbmVyIiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwic3BlZWRzIiwib2xkIiwiZmFkZVRvIiwiZmluaXNoIiwidGltZXJzIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJkdCIsImh0IiwicmVtb3ZlQXR0ciIsImF0dHJIb29rcyIsInl0IiwidnQiLCJtdCIsInh0IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJmb3IiLCJjbGFzcyIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsImJ0IiwidmFsSG9va3MiLCJmb2N1c2luIiwid3QiLCJUdCIsImlzVHJpZ2dlciIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJDdCIsIkV0Iiwia3QiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsIlN0IiwiRHQiLCJOdCIsIkF0IiwianQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInF0IiwiTHQiLCJIdCIsIk90IiwiTXQiLCJSdCIsIkl0IiwiV3QiLCIkdCIsIkJ0IiwiRnQiLCJfdCIsImRhdGFUeXBlcyIsInp0IiwiYWpheFNldHRpbmdzIiwiZmxhdE9wdGlvbnMiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsInhtbCIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiYWpheFNldHVwIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4Iiwic3RhdHVzQ29kZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsImFib3J0IiwiY3Jvc3NEb21haW4iLCJ0cmFkaXRpb25hbCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwiWHQiLCJVdCIsInN0YXR1c1RleHQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0IiwidGhyb3dzIiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwid3JhcCIsInVud3JhcCIsInZpc2libGUiLCJvZmZzZXRIZWlnaHQiLCJ4aHIiLCJWdCIsIjAiLCIxMjIzIiwiR3QiLCJjb3JzIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmVycm9yIiwib25hYm9ydCIsIm9udGltZW91dCIsInJlc3BvbnNlVHlwZSIsImJpbmFyeSIsInJlc3BvbnNlIiwidGV4dCBzY3JpcHQiLCJzY3JpcHRDaGFyc2V0IiwiWXQiLCJRdCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwiYW5pbWF0ZWQiLCJzZXRPZmZzZXQiLCJ1c2luZyIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiaG92ZXIiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJwcm94eSIsImhvbGRSZWFkeSIsInBhcnNlSlNPTiIsImlzV2luZG93IiwiSnQiLCJqUXVlcnkiLCJLdCIsIm5vQ29uZmxpY3QiLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJtZW1vIiwibWVtb2l6ZSIsImF0b2IiLCJnZXRFbGVtZW50Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVzSW5zZXJ0ZWRBdFRvcCIsImZpeFVybHMiLCJhZGRTdHlsZXNUb0RvbSIsInN0eWxlcyIsInJlZnMiLCJwYXJ0cyIsImFkZFN0eWxlIiwibGlzdFRvU3R5bGVzIiwibmV3U3R5bGVzIiwicGFydCIsImluc2VydFN0eWxlRWxlbWVudCIsImluc2VydEludG8iLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwicmVtb3ZlU3R5bGVFbGVtZW50IiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiYXR0cnMiLCJhZGRBdHRycyIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiQmxvYiIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJibG9iIiwib2xkU3JjIiwic3R5bGVTaGVldCIsIm5ld09iaiIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInJlcGxhY2VUZXh0IiwidGV4dFN0b3JlIiwicmVwbGFjZW1lbnQiLCJCb29sZWFuIiwiY3NzTm9kZSIsImJhc2VVcmwiLCJjdXJyZW50RGlyIiwicGF0aG5hbWUiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwiJDEiLCJfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyIsImV2YWwiLCJBbmltYXRhYmxlIiwiRWxlbWVudCIsImJlZm9yZVVwZGF0ZSIsImFmdGVyVXBkYXRlIiwiYXR0cktWIiwicmVmcmVzaCIsImFkZFNlbGZUb1pyIiwiX19jbGlwVGFyZ2V0IiwicmVtb3ZlU2VsZkZyb21aciIsImFuaW1hdG9ycyIsImFkZEFuaW1hdG9yIiwicmVtb3ZlQW5pbWF0b3IiLCJEcmFnZ2FibGUiLCJTSUxFTlQiLCJFbXB0eVByb3h5IiwiaGFuZGxlck5hbWVzIiwiSGFuZGxlciIsInBhaW50ZXJSb290IiwiX2hvdmVyZWQiLCJfbGFzdFRvdWNoTW9tZW50Iiwic2V0SGFuZGxlclByb3h5IiwiaXNIb3ZlciIsIm1vdXNlbW92ZSIsInpyWCIsInpyWSIsImxhc3RIb3ZlcmVkIiwibGFzdEhvdmVyZWRUYXJnZXQiLCJob3ZlcmVkIiwiaG92ZXJlZFRhcmdldCIsInNldEN1cnNvciIsImRpc3BhdGNoVG9FbGVtZW50IiwibW91c2VvdXQiLCJpbm5lckRvbSIsImVsZW1lbnQiLCJldmVudEFyZ3MiLCJzZXRDdXJzb3JTdHlsZSIsInRhcmdldEluZm8iLCJldmVudEhhbmRsZXIiLCJldmVudFBhY2tldCIsImV2ZVR5cGUiLCJ0b3BUYXJnZXQiLCJjYW5jZWxCdWJibGUiLCJnZXN0dXJlRXZlbnQiLCJwaW5jaFgiLCJwaW5jaFkiLCJwaW5jaFNjYWxlIiwid2hlZWxEZWx0YSIsInpyRGVsdGEiLCJtYWtlRXZlbnRQYWNrZXQiLCJlYWNoT3RoZXJMYXllciIsImxheWVyIiwiZXhjbHVkZSIsImhvdmVyQ2hlY2tSZXN1bHQiLCJfZG93bkVsIiwiX2Rvd25Qb2ludCIsIl91cEVsIiwiU3R5bGUiLCJQYXR0ZXJuIiwicmV0dXJuRmFsc2UiLCJjcmVhdGVEb20iLCJuZXdEb20iLCJuZXdEb21TdHlsZSIsIkxheWVyIiwib25zZWxlY3RzdGFydCIsImRvbUJhY2siLCJjdHhCYWNrIiwiY29uZmlnIiwiY2xlYXJDb2xvciIsIm1vdGlvbkJsdXIiLCJsYXN0RnJhbWVBbHBoYSIsIl9fZGlydHkiLCJfX3VzZWQiLCJfX2RyYXdJbmRleCIsIl9fc3RhcnRJbmRleCIsIl9fZW5kSW5kZXgiLCJpbmNyZW1lbnRhbCIsImdldEVsZW1lbnRDb3VudCIsImluaXRDb250ZXh0IiwiZ2V0Q29udGV4dCIsImNyZWF0ZUJhY2tCdWZmZXIiLCJjbGVhckFsbCIsImNsZWFyQ29sb3JHcmFkaWVudE9yUGF0dGVybiIsImhhdmVNb3Rpb25CTHVyIiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiZHJhd0ltYWdlIiwiY2xlYXJSZWN0IiwiX19jYW52YXNHcmFkaWVudCIsImdldEdyYWRpZW50IiwiZ2V0Q2FudmFzUGF0dGVybiIsInNhdmUiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImdsb2JhbEFscGhhIiwicGFyc2VJbnQxMCIsInRtcFJlY3QiLCJ2aWV3UmVjdCIsIlBhaW50ZXIiLCJzaW5nbGVDYW52YXMiLCJfb3B0cyIsIl9zaW5nbGVDYW52YXMiLCJyb290U3R5bGUiLCJ6bGV2ZWxMaXN0IiwiX3psZXZlbExpc3QiLCJsYXllcnMiLCJfbGF5ZXJzIiwiX2xheWVyQ29uZmlnIiwiX25lZWRzTWFudWFsbHlDb21wb3NpdGluZyIsIl93aWR0aCIsIl9oZWlnaHQiLCJtYWluTGF5ZXIiLCJfX2J1aWx0aW5fXyIsIl9kb21Sb290IiwiX2dldFNpemUiLCJkb21Sb290IiwiY3JlYXRlUm9vdCIsIl9ob3ZlcmxheWVyIiwiX2hvdmVyRWxlbWVudHMiLCJpc1NpbmdsZUNhbnZhcyIsImdldFZpZXdwb3J0Um9vdCIsInZpZXdwb3J0Um9vdCIsInBhaW50QWxsIiwiX3JlZHJhd0lkIiwiX3BhaW50TGlzdCIsIl9iYWNrZ3JvdW5kQ29sb3IiLCJyZWZyZXNoSG92ZXIiLCJfX2hvdmVyTWlyIiwiZWxNaXJyb3IiLCJfX2Zyb20iLCJob3ZlckVsZW1lbnRzIiwiY2xlYXJIb3ZlciIsImhvdmVyTGF5ZXIiLCJkaXNwbGF5YWJsZVNvcnRGdW5jIiwiZ2V0TGF5ZXIiLCJvcmlnaW5hbEVsIiwiaW52VHJhbnNmb3JtIiwiX19jbGlwUGF0aHMiLCJfZG9QYWludEVsIiwiZ2V0SG92ZXJMYXllciIsInJlZHJhd0lkIiwiX3VwZGF0ZUxheWVyU3RhdHVzIiwiZmluaXNoZWQiLCJfZG9QYWludExpc3QiLCJfY29tcG9zaXRlTWFudWFsbHkiLCJlYWNoQnVpbHRpbkxheWVyIiwidmlydHVhbCIsImxheWVyTGlzdCIsInppIiwidXNlVGltZXIiLCJmaXJzdEVsIiwibm90Q2xlYXIiLCJwcmV2RWxDbGlwUGF0aHMiLCJkcmF3IiwiY3VycmVudExheWVyIiwiZm9yY2VQYWludCIsImN1bGxpbmciLCJpc0Rpc3BsYXlhYmxlQ3VsbGVkIiwiY2xpcFBhdGhzIiwicHJldkNsaXBQYXRocyIsImlzQ2xpcFBhdGhDaGFuZ2VkIiwicHJldkVsIiwic2V0VHJhbnNmb3JtIiwiYmVnaW5QYXRoIiwiY2xpcCIsInJlc3RvcmVUcmFuc2Zvcm0iLCJkb0NsaXAiLCJhZnRlckJydXNoIiwiaW5zZXJ0TGF5ZXIiLCJsYXllcnNNYXAiLCJwcmV2TGF5ZXIiLCJpc0xheWVyVmFsaWQiLCJwcmV2RG9tIiwiZWFjaExheWVyIiwiZ2V0TGF5ZXJzIiwidXBkYXRlUHJldkxheWVyIiwiaW5jcmVtZW50YWxMYXllckNvdW50IiwiX2NsZWFyTGF5ZXIiLCJjb25maWdMYXllciIsImxheWVyQ29uZmlnIiwiX3psZXZlbCIsImRlbExheWVyIiwiX3Byb2dyZXNzaXZlTGF5ZXJzIiwiY2xlYXJMYXllciIsImltYWdlTGF5ZXIiLCJyZW5kZXJUb0NhbnZhcyIsImRpc3BsYXlMaXN0Iiwid2hJZHgiLCJjd2giLCJwbHQiLCJwcmIiLCJwYXRoVG9JbWFnZSIsInNoYWRvd0JsdXJTaXplIiwiaGFzU3Ryb2tlIiwibGVmdE1hcmdpbiIsInJpZ2h0TWFyZ2luIiwidG9wTWFyZ2luIiwiYm90dG9tTWFyZ2luIiwicGF0aFRyYW5zZm9ybSIsImltZ1NoYXBlIiwic2hhcGVDb21wYXJlRnVuYyIsIlN0b3JhZ2UiLCJfcm9vdHMiLCJfZGlzcGxheUxpc3QiLCJfZGlzcGxheUxpc3RMZW4iLCJpbmNsdWRlSWdub3JlIiwidXBkYXRlRGlzcGxheUxpc3QiLCJyb290cyIsIl91cGRhdGVBbmRBZGREaXNwbGF5YWJsZSIsInVzZXJTZXRDbGlwUGF0aCIsImN1cnJlbnRDbGlwUGF0aCIsInBhcmVudENsaXBQYXRoIiwiX2NoaWxkcmVuIiwiYWRkUm9vdCIsIl9fc3RvcmFnZSIsImFkZENoaWxkcmVuVG9TdG9yYWdlIiwiYWRkVG9TdG9yYWdlIiwiZGVsUm9vdCIsImRlbENoaWxkcmVuRnJvbVN0b3JhZ2UiLCJkZWxGcm9tU3RvcmFnZSIsIl9yZW5kZXJMaXN0IiwiRGlzcGF0Y2hlciIsIkFuaW1hdG9yIiwic3RhZ2UiLCJvbmZyYW1lIiwiX2NsaXBzIiwiX3J1bm5pbmciLCJfdGltZSIsIl9wYXVzZWRUaW1lIiwiX3BhdXNlU3RhcnQiLCJfcGF1c2VkIiwiYWRkQ2xpcCIsImFuaW1hdG9yIiwiY2xpcHMiLCJnZXRDbGlwcyIsInJlbW92ZUNsaXAiLCJkZWZlcnJlZEV2ZW50cyIsImRlZmVycmVkQ2xpcHMiLCJfbmVlZHNSZW1vdmUiLCJfc3RhcnRMb29wIiwicGF1c2UiLCJyZXN1bWUiLCJsb29wIiwic2V0dGVyIiwiQ2xpcCIsImFycmF5U2xpY2UiLCJkZWZhdWx0R2V0dGVyIiwiZGVmYXVsdFNldHRlciIsImludGVycG9sYXRlTnVtYmVyIiwicDAiLCJpbnRlcnBvbGF0ZVN0cmluZyIsImludGVycG9sYXRlQXJyYXkiLCJhcnJEaW0iLCJmaWxsQXJyIiwiYXJyMCIsImFycjEiLCJhcnIwTGVuIiwiYXJyMUxlbiIsImlzQXJyYXlTYW1lIiwiY2F0bXVsbFJvbUludGVycG9sYXRlQXJyYXkiLCJwMyIsInQyIiwidDMiLCJjYXRtdWxsUm9tSW50ZXJwb2xhdGUiLCJjbG9uZVZhbHVlIiwicmdiYTJTdHJpbmciLCJyZ2JhIiwiY3JlYXRlVHJhY2tDbGlwIiwib25lVHJhY2tEb25lIiwia2V5ZnJhbWVzIiwiZm9yY2VBbmltYXRlIiwiX2dldHRlciIsIl9zZXR0ZXIiLCJ1c2VTcGxpbmUiLCJ0cmFja0xlbiIsInRyYWNrTWF4VGltZSIsImZpcnN0VmFsIiwiaXNWYWx1ZUFycmF5IiwiaXNWYWx1ZUNvbG9yIiwiaXNWYWx1ZVN0cmluZyIsImxhc3RWYWx1ZSIsImdldEFycmF5RGltIiwia2ZQZXJjZW50cyIsImtmVmFsdWVzIiwicHJldlZhbHVlIiwiaXNBbGxWYWx1ZUVxdWFsIiwiY29sb3JBcnJheSIsIl90YXJnZXQiLCJsYXN0RnJhbWUiLCJsYXN0RnJhbWVQZXJjZW50IiwibGlmZSIsIl9sb29wIiwiX2RlbGF5IiwiZnJhbWUiLCJvbmRlc3Ryb3kiLCJfdHJhY2tzIiwiX2NsaXBDb3VudCIsIl9kb25lTGlzdCIsIl9vbmZyYW1lTGlzdCIsIl9jbGlwTGlzdCIsInRyYWNrcyIsImR1cmluZyIsImlzUGF1c2VkIiwiX2RvbmVDYWxsYmFjayIsImRvbmVMaXN0IiwibGFzdENsaXAiLCJjbGlwQ291bnQiLCJvbGRPbkZyYW1lIiwiZm9yd2FyZFRvTGFzdCIsImNsaXBMaXN0IiwiZWFzaW5nRnVuY3MiLCJfbGlmZSIsIl9pbml0aWFsaXplZCIsIm9ucmVzdGFydCIsImdsb2JhbFRpbWUiLCJkZWx0YVRpbWUiLCJfc3RhcnRUaW1lIiwiZWFzaW5nRnVuYyIsInNjaGVkdWxlIiwicmVzdGFydCIsImFyZyIsInF1YWRyYXRpY0luIiwicXVhZHJhdGljT3V0IiwicXVhZHJhdGljSW5PdXQiLCJjdWJpY0luIiwiY3ViaWNPdXQiLCJjdWJpY0luT3V0IiwicXVhcnRpY0luIiwicXVhcnRpY091dCIsInF1YXJ0aWNJbk91dCIsInF1aW50aWNJbiIsInF1aW50aWNPdXQiLCJxdWludGljSW5PdXQiLCJzaW51c29pZGFsSW4iLCJzaW51c29pZGFsT3V0Iiwic2ludXNvaWRhbEluT3V0IiwiZXhwb25lbnRpYWxJbiIsImV4cG9uZW50aWFsT3V0IiwiZXhwb25lbnRpYWxJbk91dCIsImNpcmN1bGFySW4iLCJjaXJjdWxhck91dCIsImNpcmN1bGFySW5PdXQiLCJlbGFzdGljSW4iLCJlbGFzdGljT3V0IiwiZWxhc3RpY0luT3V0IiwiYmFja0luIiwiYmFja091dCIsImJhY2tJbk91dCIsImJvdW5jZUluIiwiYm91bmNlT3V0IiwiYm91bmNlSW5PdXQiLCJtc1JlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsImRlYnVnTW9kZSIsIm5vcm1hbGl6ZVJhZGlhbiIsImNvbnRhaW5TdHJva2UiLCJhbnRpY2xvY2t3aXNlIiwiX2wiLCJ0bXAiLCJhdGFuMiIsImN1cnZlIiwieDAiLCJ5MCIsInkzIiwiY3ViaWNQcm9qZWN0UG9pbnQiLCJfYSIsIlBhdGhQcm94eSIsImN1YmljIiwicXVhZHJhdGljIiwid2luZGluZ0xpbmUiLCJDTUQiLCJFUFNJTE9OIiwiZXh0cmVtYSIsInN3YXBFeHRyZW1hIiwid2luZGluZ0N1YmljIiwiblJvb3RzIiwiY3ViaWNSb290QXQiLCJ5MF8iLCJ5MV8iLCJuRXh0cmVtYSIsImN1YmljQXQiLCJjdWJpY0V4dHJlbWEiLCJ3aW5kaW5nUXVhZHJhdGljIiwicXVhZHJhdGljUm9vdEF0IiwicXVhZHJhdGljRXh0cmVtdW0iLCJ5XyIsInF1YWRyYXRpY0F0Iiwid2luZGluZ0FyYyIsInhfIiwiY29udGFpblBhdGgiLCJpc1N0cm9rZSIsInhpIiwieWkiLCJjbWQiLCJyeCIsInJ5IiwidGhldGEiLCJkVGhldGEiLCJpc0Fyb3VuZEVxdWFsIiwicXVhZHJhdGljUHJvamVjdFBvaW50IiwiaW1hZ2VIZWxwZXIiLCJyZXRyaWV2ZTMiLCJ0ZXh0V2lkdGhDYWNoZSIsInRleHRXaWR0aENhY2hlQ291bnRlciIsIlRFWFRfQ0FDSEVfTUFYIiwiU1RZTEVfUkVHIiwiREVGQVVMVF9GT05UIiwidGV4dExpbmVzIiwibWVhc3VyZVRleHQiLCJhZGp1c3RUZXh0WCIsImFkanVzdFRleHRZIiwicHJlcGFyZVRydW5jYXRlT3B0aW9ucyIsInRydW5jYXRlU2luZ2xlTGluZSIsIm1heEl0ZXJhdGlvbnMiLCJjbkNoYXJXaWR0aCIsImFzY0NoYXJXaWR0aCIsImNvbnRlbnRXaWR0aCIsImVsbGlwc2lzV2lkdGgiLCJ0ZXh0TGluZSIsInN1Ykxlbmd0aCIsImVzdGltYXRlTGVuZ3RoIiwiZ2V0TGluZUhlaWdodCIsInBhcnNlUGxhaW5UZXh0IiwidHJ1bmNhdGUiLCJvdXRlckhlaWdodCIsInRydW5jT3V0ZXJIZWlnaHQiLCJ0cnVuY091dGVyV2lkdGgiLCJvdXRlcldpZHRoIiwicGFyc2VSaWNoVGV4dCIsImNvbnRlbnRCbG9jayIsImxhc3RJbmRleCIsIm1hdGNoZWRJbmRleCIsInB1c2hUb2tlbnMiLCJzdWJzdHJpbmciLCJjb250ZW50SGVpZ2h0Iiwic3RsUGFkZGluZyIsInRydW5jYXRlV2lkdGgiLCJ0cnVuY2F0ZUhlaWdodCIsInRva2VucyIsInRva2VuU3R5bGUiLCJ0b2tlbiIsInRva2VuSGVpZ2h0IiwidG9rZW5XaWR0aCIsInRva2VuV2lkdGhOb3RTcGVjaWZpZWQiLCJwZXJjZW50V2lkdGgiLCJiZ0ltZyIsImZpbmRFeGlzdEltYWdlIiwiaXNJbWFnZVJlYWR5IiwicGFkZGluZ1ciLCJyZW1pYW5UcnVuY1dpZHRoIiwiaXNFbXB0eVN0ciIsInN0cnMiLCJpc0xpbmVIb2xkZXIiLCJ0b2tlbnNMZW4iLCJnZXRSaWNoVGV4dFJlY3QiLCJnZXRQbGFpblRleHRSZWN0IiwiYWRqdXN0VGV4dFBvc2l0aW9uT25SZWN0IiwiZGlzdGFuY2UiLCJoYWxmSGVpZ2h0IiwibWFrZUZvbnQiLCJjaGlsZE9mTmFtZSIsIl9kb0FkZCIsImFkZEJlZm9yZSIsImluY2x1ZGVDaGlsZHJlbiIsInRtcE1hdCIsImNoaWxkUmVjdCIsInJiIiwibGIiLCJtYXhYIiwibWF4WSIsInN4Iiwic3kiLCJheDAiLCJheDEiLCJheTAiLCJheTEiLCJieDAiLCJieDEiLCJieTAiLCJieTEiLCJHZXN0dXJlTWdyIiwiX3RyYWNrIiwicG9pbnRQYWlyIiwicmVjb2duaXplIiwiX2RvVHJhY2siLCJfcmVjb2duaXplIiwidHJhY2tJdGVtIiwidG91Y2giLCJjbGllbnRUb0xvY2FsIiwicmVjb2duaXplcnMiLCJnZXN0dXJlSW5mbyIsInBpbmNoIiwidHJhY2siLCJwaW5jaEVuZCIsInBpbmNoUHJlIiwicGluY2hDZW50ZXIiLCJMaW5rZWRMaXN0IiwiX2xlbiIsImxpbmtlZExpc3RQcm90byIsImluc2VydCIsImVudHJ5IiwiRW50cnkiLCJpbnNlcnRFbnRyeSIsIkxSVSIsIl9saXN0IiwiX21heFNpemUiLCJfbGFzdFJlbW92ZWRFbnRyeSIsIkxSVVByb3RvIiwicHV0IiwicmVtb3ZlZCIsImxlYXN0VXNlZEVudHJ5IiwibWF0aENvcyIsIm1hdGhTaW4iLCJtYXRoU3FydCIsIm1hdGhBYnMiLCJoYXNUeXBlZEFycmF5Iiwibm90U2F2ZURhdGEiLCJfc2F2ZURhdGEiLCJfY3R4IiwiX3hpIiwiX3lpIiwiX3gwIiwiX3kwIiwiX3V4IiwiX3V5IiwiX2xpbmVEYXNoIiwiX2Rhc2hPZmZzZXQiLCJfZGFzaElkeCIsIl9kYXNoU3VtIiwic2V0U2NhbGUiLCJhZGREYXRhIiwiZXhjZWVkVW5pdCIsIl9uZWVkc0Rhc2giLCJfZGFzaGVkTGluZVRvIiwiX2Rhc2hlZEJlemllclRvIiwicXVhZHJhdGljQ3VydmVUbyIsIl9kYXNoZWRRdWFkcmF0aWNUbyIsImFyY1RvIiwidG9TdGF0aWMiLCJzZXRMaW5lRGFzaCIsImxpbmVEYXNoU3VtIiwic2V0TGluZURhc2hPZmZzZXQiLCJhcHBlbmRQYXRoIiwiYXBwZW5kU2l6ZSIsImFwcGVuZFBhdGhEYXRhIiwiX2V4cGFuZERhdGEiLCJfcHJldkNtZCIsImRhc2giLCJkYXNoU3VtIiwibkRhc2giLCJiZXppZXJMZW4iLCJ0bXBMZW4iLCJmcm9tTGluZSIsImZyb21DdWJpYyIsImZyb21RdWFkcmF0aWMiLCJmcm9tQXJjIiwicmVidWlsZFBhdGgiLCJ1eCIsInV5IiwicHNpIiwiZnMiLCJzY2FsZVgiLCJzY2FsZVkiLCJleHRyZW1pdHkiLCJ4RGltIiwieURpbSIsInR4IiwidHkiLCJ2ZWMyTWluIiwidmVjMk1heCIsIl92ZWN0b3IiLCJ2MkNyZWF0ZSIsInYyRGlzdFNxdWFyZSIsImRpc3RTcXVhcmUiLCJFUFNJTE9OX05VTUVSSUMiLCJUSFJFRV9TUVJUIiwiT05FX1RISVJEIiwiX3YwIiwiX3YxIiwiX3YyIiwiaXNBcm91bmRaZXJvIiwiaXNOb3RBcm91bmRaZXJvIiwib25ldCIsImN1YmljRGVyaXZhdGl2ZUF0IiwidDEiLCJkaXNjIiwiZGlzY1NxcnQiLCJZMSIsIlkyIiwiYWNvcyIsIkFTcXJ0IiwiY3ViaWNTdWJkaXZpZGUiLCJwMDEiLCJwMTIiLCJwMjMiLCJwMDEyIiwicDEyMyIsInAwMTIzIiwiZDEiLCJkMiIsInF1YWRyYXRpY0Rlcml2YXRpdmVBdCIsImRpdmlkZXIiLCJxdWFkcmF0aWNTdWJkaXZpZGUiLCJ3eCIsImdldFN5c3RlbUluZm9TeW5jIiwib3MiLCJ0b3VjaEV2ZW50c1N1cHBvcnRlZCIsIndvcmtlciIsInVhIiwiZmlyZWZveCIsImVkZ2UiLCJTVkdSZWN0IiwicG9pbnRlckV2ZW50c1N1cHBvcnRlZCIsImRldGVjdCIsInVzZXJBZ2VudCIsImlzRG9tTGV2ZWwyIiwiTU9VU0VfRVZFTlRfUkVHIiwiY2FsY3VsYXRlIiwiZGVmYXVsdEdldFpyWFkiLCJsYXllclgiLCJsYXllclkiLCJkZXRhY2hFdmVudCIsIm5vdExlZnRNb3VzZSIsImlkU3RhcnQiLCJBcnJheUN0b3IiLCJtMSIsIm0yIiwib3V0MCIsIm91dDEiLCJvdXQyIiwib3V0MyIsIm91dDQiLCJvdXQ1IiwicmFkIiwiYWEiLCJhYyIsImF0eCIsImFiIiwiYWQiLCJhdHkiLCJjdCIsInZ4IiwidnkiLCJkZXQiLCJERUZBVUxUX01JTl9NRVJHRSIsIkRFRkFVTFRfTUlOX0dBTExPUElORyIsIm1ha2VBc2NlbmRpbmdSdW4iLCJhcnJheSIsInJ1bkhpIiwicmV2ZXJzZVJ1biIsImJpbmFyeUluc2VydGlvblNvcnQiLCJwaXZvdCIsImdhbGxvcExlZnQiLCJoaW50IiwibGFzdE9mZnNldCIsIm1heE9mZnNldCIsImdhbGxvcFJpZ2h0IiwiVGltU29ydCIsInJ1blN0YXJ0IiwicnVuTGVuZ3RoIiwibWluR2FsbG9wIiwic3RhY2tTaXplIiwibWVyZ2VBdCIsInN0YXJ0MSIsImxlbmd0aDEiLCJzdGFydDIiLCJjdXJzb3IxIiwiY3Vyc29yMiIsImRlc3QiLCJjb3VudDEiLCJjb3VudDIiLCJleGl0IiwiX21pbkdhbGxvcCIsIm1lcmdlTG93IiwiY3VzdG9tQ3Vyc29yIiwiY3VzdG9tRGVzdCIsIm1lcmdlSGlnaCIsIm1lcmdlUnVucyIsImZvcmNlTWVyZ2VSdW5zIiwicHVzaFJ1biIsIl9ydW5TdGFydCIsIl9ydW5MZW5ndGgiLCJyZW1haW5pbmciLCJ0cyIsIm1pblJ1biIsIm1pblJ1bkxlbmd0aCIsIkJVSUxUSU5fT0JKRUNUIiwiW29iamVjdCBGdW5jdGlvbl0iLCJbb2JqZWN0IFJlZ0V4cF0iLCJbb2JqZWN0IERhdGVdIiwiW29iamVjdCBFcnJvcl0iLCJbb2JqZWN0IENhbnZhc0dyYWRpZW50XSIsIltvYmplY3QgQ2FudmFzUGF0dGVybl0iLCJbb2JqZWN0IEltYWdlXSIsIltvYmplY3QgQ2FudmFzXSIsIlRZUEVEX0FSUkFZIiwiW29iamVjdCBJbnQ4QXJyYXldIiwiW29iamVjdCBVaW50OEFycmF5XSIsIltvYmplY3QgVWludDhDbGFtcGVkQXJyYXldIiwiW29iamVjdCBJbnQxNkFycmF5XSIsIltvYmplY3QgVWludDE2QXJyYXldIiwiW29iamVjdCBJbnQzMkFycmF5XSIsIltvYmplY3QgVWludDMyQXJyYXldIiwiW29iamVjdCBGbG9hdDMyQXJyYXldIiwiW29iamVjdCBGbG9hdDY0QXJyYXldIiwib2JqVG9TdHJpbmciLCJhcnJheVByb3RvIiwibmF0aXZlRm9yRWFjaCIsIm5hdGl2ZUZpbHRlciIsIm5hdGl2ZVNsaWNlIiwibmF0aXZlTWFwIiwibmF0aXZlUmVkdWNlIiwidHlwZVN0ciIsImlzUHJpbWl0aXZlIiwiaXNEb20iLCJ0YXJnZXRQcm9wIiwic291cmNlUHJvcCIsImlzQnVpbHRJbk9iamVjdCIsIm92ZXJsYXkiLCJwcmltaXRpdmVLZXkiLCJIYXNoTWFwIiwiaXNBcnIiLCJ0aGlzTWFwIiwidmlzaXQiLCJtZXJnZUFsbCIsInRhcmdldEFuZFNvdXJjZXMiLCJiYXNlQ2xhenoiLCJjbGF6elByb3RvdHlwZSIsInZhbHVlMSIsInZhbHVlMiIsImNvbmNhdEFycmF5IiwibmV3QXJyYXkiLCJsZW5TcXVhcmUiLCJsZW5ndGhTcXVhcmUiLCJ2MiIsImRpc3RhbmNlU3F1YXJlIiwic2NhbGVBbmRBZGQiLCJkaXYiLCJkb3QiLCJuZWdhdGUiLCJsZXJwIiwiX2V2ZW50IiwibW91c2VIYW5kbGVyTmFtZXMiLCJ0b3VjaEhhbmRsZXJOYW1lcyIsInBvaW50ZXJFdmVudE5hbWVzIiwicG9pbnRlcmRvd24iLCJwb2ludGVydXAiLCJwb2ludGVybW92ZSIsInBvaW50ZXJvdXQiLCJwb2ludGVySGFuZGxlck5hbWVzIiwibm0iLCJldmVudE5hbWVGaXgiLCJwcm9jZXNzR2VzdHVyZSIsImdlc3R1cmVNZ3IiLCJfZ2VzdHVyZU1nciIsInNldFRvdWNoVGltZXIiLCJpbnN0YW5jZSIsIl90b3VjaGluZyIsIl90b3VjaFRpbWVyIiwiZG9tSGFuZGxlcnMiLCJ0b3VjaHN0YXJ0IiwibW91c2Vkb3duIiwidG91Y2htb3ZlIiwidG91Y2hlbmQiLCJtb3VzZXVwIiwiaXNQb2ludGVyRnJvbVRvdWNoIiwiSGFuZGxlckRvbVByb3h5IiwibW91bnRIYW5kbGVycyIsIl9oYW5kbGVycyIsIm1ha2VNb3VzZUhhbmRsZXIiLCJpbml0RG9tSGFuZGxlciIsImhhbmRsZXJEb21Qcm94eVByb3RvIiwicGF0aHMiLCJfdXBkYXRlUGF0aERpcnR5IiwiZGlydHlQYXRoIiwiX19kaXJ0eVBhdGgiLCJnZXRHbG9iYWxTY2FsZSIsImNyZWF0ZVBhdGhQcm94eSIsIlJlY3RUZXh0IiwiRGlzcGxheWFibGUiLCJkcmFnZ2luZyIsImlucGxhY2UiLCJyZWN0Q29udGFpbiIsInRyYW5zZm9ybUNvb3JkVG9Mb2NhbCIsImFuaW1hdGVTdHlsZSIsImFkZENvbG9yU3RvcCIsIl9pbWFnZSIsImNyZWF0ZU9yVXBkYXRlSW1hZ2UiLCJzV2lkdGgiLCJzSGVpZ2h0IiwiZHJhd1JlY3RUZXh0IiwiRGlzcGxheWJsZSIsIkluY3JlbWVudGFsRGlzcGxheWJsZSIsIl9kaXNwbGF5YWJsZXMiLCJfdGVtcG9yYXJ5RGlzcGxheWFibGVzIiwiX2N1cnNvciIsImNsZWFyRGlzcGxheWJsZXMiLCJhZGREaXNwbGF5YWJsZSIsIm5vdFBlcnNpc3RlbnQiLCJhZGREaXNwbGF5YWJsZXMiLCJkaXNwbGF5YWJsZXMiLCJsb2NhbFBvcyIsImdsb2JhbENvb3JkIiwicGF0aENvbnRhaW4iLCJwYXRoUHJveHlGb3JEcmF3IiwiaGFzRmlsbCIsImhhc0ZpbGxHcmFkaWVudCIsImhhc1N0cm9rZUdyYWRpZW50IiwiaGFzRmlsbFBhdHRlcm4iLCJoYXNTdHJva2VQYXR0ZXJuIiwiX2ZpbGxHcmFkaWVudCIsIl9zdHJva2VHcmFkaWVudCIsInN0cm9rZVN0eWxlIiwibGluZURhc2hPZmZzZXQiLCJjdHhMaW5lRGFzaCIsInNoYXBlQ2ZnIiwibmVlZHNVcGRhdGVSZWN0IiwicmVjdFdpdGhTdHJva2UiLCJfcmVjdFdpdGhTdHJva2UiLCJsaW5lU2NhbGUiLCJnZXRMaW5lU2NhbGUiLCJTdWIiLCJkZWZhdWx0U2hhcGUiLCJ0aGlzU2hhcGUiLCJyZXBlYXQiLCJjcmVhdGVQYXR0ZXJuIiwiZml4U2hhZG93IiwiU1RZTEVfQ09NTU9OX1BST1BTIiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJjcmVhdGVSYWRpYWxHcmFkaWVudCIsInN0eWxlUHJvdG8iLCJ0cmFuc2Zvcm1UZXh0IiwidGV4dE9yaWdpbiIsInByZXZTdHlsZSIsImZpcnN0RHJhdyIsIm90aGVyU3R5bGUiLCJuZXdTdHlsZSIsImNhbnZhc0dyYWRpZW50IiwidGV4dEhlbHBlciIsIm5vcm1hbGl6ZVRleHRTdHlsZSIsIm5lZWREcmF3VGV4dCIsInJlbmRlclRleHQiLCJnZXRTdHJva2UiLCJzaGFkb3dUZW1wIiwib3JpZ25hbEJydXNoIiwibW9kaWZpZWQiLCJTSEFET1dfUFJPUFMiLCJnbG9iYWxJbWFnZUNhY2hlIiwiaW1hZ2VPbkxvYWQiLCJjYWNoZWRJbWdPYmoiLCJfX2NhY2hlZEltZ09iaiIsInBlbmRpbmciLCJwZW5kaW5nV3JhcCIsImNiUGF5bG9hZCIsImhvc3RFbCIsIm5ld0ltYWdlT3JTcmMiLCJfX3pySW1hZ2VTcmMiLCJzbW9vdGhTcGxpbmUiLCJzbW9vdGhCZXppZXIiLCJjb250cm9sUG9pbnRzIiwic21vb3RoQ29uc3RyYWludCIsImNwMSIsImNwMiIsInIxIiwicjIiLCJyMyIsInI0IiwidG90YWwiLCJ2Mk1pbiIsInYyTWF4IiwidjJTY2FsZSIsInYyRGlzdGFuY2UiLCJ2MkFkZCIsInYyQ2xvbmUiLCJ2MlN1YiIsImlzTG9vcCIsImNvbnN0cmFpbnQiLCJwcmV2UG9pbnQiLCJuZXh0UG9pbnQiLCJjcHMiLCJkMCIsImNwMCIsImludGVycG9sYXRlIiwic2VncyIsIncyIiwidzMiLCJyb3VuZFJlY3RIZWxwZXIiLCJWQUxJRF9URVhUX0FMSUdOIiwiVkFMSURfVEVYVF9WRVJUSUNBTF9BTElHTiIsIm5vcm1hbGl6ZVN0eWxlIiwiYXBwbHlUZXh0Um90YXRpb24iLCJwbGFjZVRva2VuIiwibGluZVRvcCIsIm5lZWREcmF3QmFja2dyb3VuZCIsImRyYXdCYWNrZ3JvdW5kIiwiZ2V0VGV4dFhGb3JQYWRkaW5nIiwic2V0Q3R4IiwiZ2V0RmlsbCIsInN0cm9rZVRleHQiLCJmaWxsVGV4dCIsImlzUGxhaW5CZyIsIm9uQmdJbWFnZUxvYWRlZCIsImdldEJveFBvc2l0aW9uIiwiYmxvY2tIZWlodCIsImJhc2VYIiwiYmFzZVkiLCJtYXhWYWx1ZSIsImxhc3RJbmRleE9mIiwiX190ZXh0Q290ZW50QmxvY2siLCJib3hQb3MiLCJib3hYIiwiYm94WSIsInhMZWZ0IiwieFJpZ2h0IiwidG9rZW5Db3VudCIsInVzZWRXaWR0aCIsImxlZnRJbmRleCIsImxpbmVYTGVmdCIsImxpbmVYUmlnaHQiLCJyaWdodEluZGV4IiwiZHJhd1JpY2hUZXh0IiwicmVuZGVyUmljaFRleHQiLCJuZWVkRHJhd0JnIiwicmVuZGVyUGxhaW5UZXh0IiwidW5pdFgiLCJ1bml0WSIsIl9jdXJ2ZSIsInNvbWVWZWN0b3JBdCIsImlzVGFuZ2VudCIsImNweDIiLCJjcHkyIiwiY3B4MSIsImNweTEiLCJwb2ludEF0IiwidGFuZ2VudEF0IiwicG9seUhlbHBlciIsImZpeENsaXBXaXRoU2hhZG93IiwiYW5pbWF0aW5nU2hhcGUiLCJwYXRoU3BsaXR0ZWQiLCJfYW5pbWF0ZVRvU2hhbGxvdyIsIm9ialNoYWxsb3ciLCJwcm9wZXJ0eUNvdW50IiwiX2RyYWdTdGFydCIsIl9kcmFnIiwiX2RyYWdFbmQiLCJkcmFnZ2luZ1RhcmdldCIsIl9kcmFnZ2luZ1RhcmdldCIsImRyb3BUYXJnZXQiLCJsYXN0RHJvcFRhcmdldCIsIl9kcm9wVGFyZ2V0IiwiYXJyeVNsaWNlIiwiXyRoYW5kbGVycyIsIl9oIiwiYXJnTGVuIiwidHJpZ2dlcldpdGhDb250ZXh0IiwibUlkZW50aXR5IiwidHJhbnNmb3JtYWJsZVByb3RvIiwicGFyZW50SGFzVHJhbnNmb3JtIiwidG1wVHJhbnNmb3JtIiwidHJhbnNmb3JtQ29vcmRUb0dsb2JhbCIsImtDU1NDb2xvclRhYmxlIiwidHJhbnNwYXJlbnQiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhcXVhIiwiYXF1YW1hcmluZSIsImF6dXJlIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5jaGVkYWxtb25kIiwiYmx1ZSIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiY3lhbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJkYXJrZ3JlZW4iLCJkYXJrZ3JleSIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3NlYWdyZWVuIiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmV5IiwiZGFya3R1cnF1b2lzZSIsImRhcmt2aW9sZXQiLCJkZWVwcGluayIsImRlZXBza3libHVlIiwiZGltZ3JheSIsImRpbWdyZXkiLCJkb2RnZXJibHVlIiwiZmlyZWJyaWNrIiwiZmxvcmFsd2hpdGUiLCJmb3Jlc3RncmVlbiIsImZ1Y2hzaWEiLCJnYWluc2Jvcm8iLCJnaG9zdHdoaXRlIiwiZ29sZCIsImdvbGRlbnJvZCIsImdyYXkiLCJncmVlbiIsImdyZWVueWVsbG93IiwiZ3JleSIsImhvbmV5ZGV3IiwiaG90cGluayIsImluZGlhbnJlZCIsImluZGlnbyIsIml2b3J5Iiwia2hha2kiLCJsYXZlbmRlciIsImxhdmVuZGVyYmx1c2giLCJsYXduZ3JlZW4iLCJsZW1vbmNoaWZmb24iLCJsaWdodGJsdWUiLCJsaWdodGNvcmFsIiwibGlnaHRjeWFuIiwibGlnaHRnb2xkZW5yb2R5ZWxsb3ciLCJsaWdodGdyYXkiLCJsaWdodGdyZWVuIiwibGlnaHRncmV5IiwibGlnaHRwaW5rIiwibGlnaHRzYWxtb24iLCJsaWdodHNlYWdyZWVuIiwibGlnaHRza3libHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsImxpZ2h0c3RlZWxibHVlIiwibGlnaHR5ZWxsb3ciLCJsaW1lIiwibGltZWdyZWVuIiwibGluZW4iLCJtYWdlbnRhIiwibWFyb29uIiwibWVkaXVtYXF1YW1hcmluZSIsIm1lZGl1bWJsdWUiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1zZWFncmVlbiIsIm1lZGl1bXNsYXRlYmx1ZSIsIm1lZGl1bXNwcmluZ2dyZWVuIiwibWVkaXVtdHVycXVvaXNlIiwibWVkaXVtdmlvbGV0cmVkIiwibWlkbmlnaHRibHVlIiwibWludGNyZWFtIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJuYXZham93aGl0ZSIsIm5hdnkiLCJvbGRsYWNlIiwib2xpdmUiLCJvbGl2ZWRyYWIiLCJvcmFuZ2UiLCJvcmFuZ2VyZWQiLCJvcmNoaWQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZXR1cnF1b2lzZSIsInBhbGV2aW9sZXRyZWQiLCJwYXBheWF3aGlwIiwicGVhY2hwdWZmIiwicGVydSIsInBpbmsiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiY2xhbXBDc3NCeXRlIiwiY2xhbXBDc3NGbG9hdCIsInBhcnNlQ3NzSW50IiwicGFyc2VDc3NGbG9hdCIsImNzc0h1ZVRvUmdiIiwibGVycE51bWJlciIsInNldFJnYmEiLCJjb3B5UmdiYSIsImNvbG9yQ2FjaGUiLCJsYXN0UmVtb3ZlZEFyciIsInB1dFRvQ2FjaGUiLCJjb2xvclN0ciIsInJnYmFBcnIiLCJjYWNoZWQiLCJpdiIsIm9wIiwiZXAiLCJmbmFtZSIsImFscGhhIiwiaHNsYTJyZ2JhIiwiaHNsYSIsImZhc3RMZXJwIiwibm9ybWFsaXplZFZhbHVlIiwibGVmdENvbG9yIiwicmlnaHRDb2xvciIsImR2IiwiZmFzdE1hcFRvQ29sb3IiLCJmdWxsT3V0cHV0IiwibWFwVG9Db2xvciIsImFyckNvbG9yIiwibW9kaWZ5SFNMIiwidk1pbiIsInZNYXgiLCJkZWx0YVIiLCJkZWx0YUciLCJkZWx0YUIiLCJyZ2JhMmhzbGEiLCJjbGFtcENzc0FuZ2xlIiwibW9kaWZ5QWxwaGEiLCJ0cmFuc2Zvcm1QYXRoIiwiY2MiLCJ2TWFnIiwidlJhdGlvIiwidkFuZ2xlIiwicHJvY2Vzc0FyYyIsImZhIiwicHNpRGVnIiwieHAiLCJ5cCIsImxhbWJkYSIsImN4cCIsImN5cCIsImNyZWF0ZVBhdGhPcHRpb25zIiwicGF0aFByb3h5IiwiY3MiLCJwcmV2Q21kIiwiY3B4IiwiY3B5IiwiY3RsUHR4IiwiY3RsUHR5IiwiY3JlYXRlUGF0aFByb3h5RnJvbVN0cmluZyIsInBhdGhFbHMiLCJwYXRoTGlzdCIsInBhdGhFbCIsInBhdGhCdW5kbGUiLCJtYXRoQXRhbjIiLCJuUG9pbnQiLCJIYW5kbGVyUHJveHkiLCJ1c2VWTUwiLCJwYWludGVyQ3RvcnMiLCJaUmVuZGVyIiwicmVuZGVyZXJUeXBlIiwidm1sIiwiaGFuZGVyUHJveHkiLCJfbmVlZHNSZWZyZXNoIiwib2xkRGVsRnJvbVN0b3JhZ2UiLCJvbGRBZGRUb1N0b3JhZ2UiLCJ6TGV2ZWwiLCJ0cmlnZ2VyUmVuZGVyZWQiLCJfbmVlZHNSZWZyZXNoSG92ZXIiLCJyZWZyZXNoSG92ZXJJbW1lZGlhdGVseSIsImNsZWFyQW5pbWF0aW9uIiwiZGVsSW5zdGFuY2UiLCJnZXRJbnN0YW5jZSIsInJlZ2lzdGVyUGFpbnRlciIsImhtciIsImxvY2FscyIsIm5ld0NvbnRlbnQiLCJsb2dpbl91cmwiLCJsb2dpbiIsImpxdWVyeV9taW5fZGVmYXVsdCIsImFsZXJ0IiwiY2lwaGVyIiwiVXNlWEJhc2ljIiwiQXV0aG9yaXphdGlvbiIsInNlc3Npb25TdG9yYWdlIiwic2V0SXRlbSIsImdldERldmljZSIsImZyYWdtZW50VHlwZSIsInBhZ2VTaXplIiwibWFuYWdlZE9iamVjdHMiLCJnZXRDb250ZW50IiwiQU1hcCIsIk1hcCIsInJlc2l6ZUVuYWJsZSIsImV4cGFuZFpvb21SYW5nZSIsInpvb21zIiwibWFwU3R5bGUiLCJoYWkiLCJNYXJrZXJDbHVzdGVyZXIiLCJncmlkU2l6ZSIsInRvcENoYXJ0IiwiYm90dG9tQ2hhcnQiLCJhYmxlUmVzIiwiY29uUmVzIiwiYzh5X1Bvc2l0aW9uIiwiZ3BzIiwibG5nIiwibGF0IiwiY29udmVydEZyb20iLCJpbmZvIiwiYWRkTWFya2VyIiwiTWFya2VyIiwibG9jYXRpb25zIiwiUGl4ZWwiLCJfdGhpcyIsImtleXByZXNzIl0sIm1hcHBpbmdzIjoiYUFHQSxJQUFBQSxFQUFBQyxPQUFBLGlCQUNBQSxPQUFBLGlCQUNBLFNBQUFDLEVBQUFDLElBaVJBLFNBQUFELEVBQUFDLEdBQ0EsSUFBQUMsRUFBQUYsS0FBQUcsRUFBQUgsR0FDQSxPQUVBLFFBQUFJLEtBREFELEVBQUFILElBQUEsRUFDQUMsRUFDQUksT0FBQUMsVUFBQUMsZUFBQUMsS0FBQVAsRUFBQUcsS0FDQUssRUFBQUwsR0FBQUgsRUFBQUcsSUFHQSxLQUFBTSxHQUFBLElBQUFDLEdBQ0FDLElBMVJBQyxDQUFBYixFQUFBQyxHQUNBSCxLQUFBRSxFQUFBQyxJQXdEQSxJQUtBYSxFQUxBQyxHQUFBLEVBRUFDLEVBQUEsdUJBQ0FDLEVBQUEsSUFDQUMsS0FHQUMsS0FFQUMsS0FHQSxTQUFBQyxFQUFBakIsR0FDQSxJQUFBa0IsRUFBQUMsRUFBQW5CLEdBQ0EsSUFBQWtCLEVBQUEsT0FBQUUsRUFDQSxJQUFBQyxFQUFBLFNBQUFDLEdBc0JBLE9BckJBSixFQUFBSyxJQUFBQyxRQUNBTCxFQUFBRyxJQUNBLElBQUFILEVBQUFHLEdBQUFHLFFBQUFDLFFBQUExQixJQUNBbUIsRUFBQUcsR0FBQUcsUUFBQUUsS0FBQTNCLElBR0FlLEdBQUFmLEdBQ0FVLEVBQUFZLElBRUEsSUFBQUosRUFBQVUsU0FBQUYsUUFBQUosSUFDQUosRUFBQVUsU0FBQUQsS0FBQUwsS0FHQU8sUUFBQUMsS0FDQSw0QkFDQVIsRUFDQSwwQkFDQXRCLEdBRUFlLE1BRUFLLEVBQUFFLElBRUFTLEVBQUEsU0FBQUMsR0FDQSxPQUNBQyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQSxXQUNBLE9BQUFmLEVBQUFZLElBRUFJLElBQUEsU0FBQUMsR0FDQWpCLEVBQUFZLEdBQUFLLEtBSUEsUUFBQUwsS0FBQVosRUFFQW5CLE9BQUFDLFVBQUFDLGVBQUFDLEtBQUFnQixFQUFBWSxJQUNBLE1BQUFBLEdBQ0EsTUFBQUEsR0FFQS9CLE9BQUFxQyxlQUFBakIsRUFBQVcsRUFBQUQsRUFBQUMsSUEyQkEsT0F4QkFYLEVBQUFrQixFQUFBLFNBQUEzQyxHQUdBLE1BRkEsVUFBQTRDLEdBQUFDLEVBQUEsV0FDQWxDLElBQ0FhLEVBQUFtQixFQUFBM0MsR0FBQThDLEtBQUFDLEVBQUEsU0FBQUMsR0FFQSxNQURBRCxJQUNBQyxJQUdBLFNBQUFELElBQ0FwQyxJQUNBLFlBQUFpQyxJQUNBSyxFQUFBakQsSUFDQWtELEVBQUFsRCxHQUVBLElBQUFXLEdBQUEsSUFBQUQsR0FDQUUsT0FLQWEsRUFBQTBCLEVBQUEsU0FBQVYsRUFBQVcsR0FFQSxPQURBLEVBQUFBLElBQUFYLEVBQUFoQixFQUFBZ0IsSUFDQWpCLEVBQUEyQixFQUFBVixHQUFBLEVBQUFXLElBRUEzQixFQWdFQSxJQUFBNEIsS0FDQVQsRUFBQSxPQUVBLFNBQUFDLEVBQUFTLEdBQ0FWLEVBQUFVLEVBQ0EsUUFBQUMsRUFBQSxFQUFrQkEsRUFBQUYsRUFBQUcsT0FBOEJELElBQ2hERixFQUFBRSxHQUFBL0MsS0FBQSxLQUFBOEMsR0FJQSxJQUtBRyxFQUdBaEQsRUFBQWlELEVBUkFoRCxFQUFBLEVBQ0FDLEVBQUEsRUFDQXNDLEtBQ0E5QyxLQUNBRCxLQU1BLFNBQUF5RCxFQUFBQyxHQUVBLE9BREFBLEVBQUEsS0FBQUEsR0FDQUEsSUFHQSxTQUFBQyxFQUFBQyxHQUNBLFlBQUFsQixFQUNBLFVBQUFtQixNQUFBLDBDQUlBLE9BRkFoRCxFQUFBK0MsRUFDQWpCLEVBQUEsU0E1TkEsU0FBQW1CLEdBRUEsT0FEQUEsS0FBQSxJQUNBLElBQUFDLFFBQUEsU0FBQUMsRUFBQUMsR0FDQSx1QkFBQUMsZUFDQSxPQUFBRCxFQUFBLElBQUFKLE1BQUEsdUJBRUEsSUFDQSxJQUFBckMsRUFBQSxJQUFBMEMsZUFDQUMsRUFBQTdDLEVBQUE4QyxFQUFBLEdBQUF0RCxFQUFBLG1CQUNBVSxFQUFBNkMsS0FBQSxNQUFBRixHQUFBLEdBQ0EzQyxFQUFBOEMsUUFBQVIsRUFDQXRDLEVBQUErQyxLQUFBLE1BQ0ssTUFBQXpCLEdBQ0wsT0FBQW1CLEVBQUFuQixHQUVBdEIsRUFBQWdELG1CQUFBLFdBQ0EsT0FBQWhELEVBQUFpRCxXQUNBLE9BQUFqRCxFQUFBa0QsT0FFQVQsRUFDQSxJQUFBSixNQUFBLHVCQUFBTSxFQUFBLHFCQUVNLFNBQUEzQyxFQUFBa0QsT0FFTlYsU0FDTSxTQUFBeEMsRUFBQWtELFFBQUEsTUFBQWxELEVBQUFrRCxPQUVOVCxFQUFBLElBQUFKLE1BQUEsdUJBQUFNLEVBQUEsaUJBQ00sQ0FFTixJQUNBLElBQUFRLEVBQUFDLEtBQUFDLE1BQUFyRCxFQUFBc0QsY0FDTyxNQUFBckMsR0FFUCxZQURBd0IsRUFBQXhCLEdBR0F1QixFQUFBVyxPQXlMQUksQ0FBQWhFLEdBQUE2QixLQUFBLFNBQUErQixHQUNBLElBQUFBLEVBRUEsT0FEQWhDLEVBQUEsUUFDQSxLQUVBMUMsS0FDQThDLEtBQ0EvQyxFQUFBMkUsRUFBQUssRUFDQXhCLEVBQUFtQixFQUFBTSxFQUVBdEMsRUFBQSxXQUNBLElBQUF1QyxFQUFBLElBQUFuQixRQUFBLFNBQUFDLEVBQUFDLEdBQ0FWLEdBQ0FTLFVBQ0FDLFlBR0ExRCxLQWNBLE9BVEF5QyxFQUpBLEdBT0EsWUFBQU4sR0FDQSxJQUFBakMsR0FDQSxJQUFBRCxHQUVBRSxJQUVBd0UsSUFtQkEsU0FBQWxDLEVBQUFsRCxHQUNBRSxFQUFBRixJQUdBRyxFQUFBSCxJQUFBLEVBQ0FVLElBOVJBLFNBQUFWLEdBQ0EsSUFBQXFGLEVBQUFDLFNBQUFDLHFCQUFBLFdBQ0FDLEVBQUFGLFNBQUFHLGNBQUEsVUFDQUQsRUFBQUUsUUFBQSxRQUNBRixFQUFBRyxJQUFBbkUsRUFBQThDLEVBQUEsR0FBQXRFLEVBQUEsSUFBQWdCLEVBQUEsaUJBRUFxRSxFQUFBTyxZQUFBSixHQXlSQUssQ0FBQTdGLElBSkFpRCxFQUFBakQsSUFBQSxFQVFBLFNBQUFZLElBQ0FpQyxFQUFBLFNBQ0EsSUFBQWlELEVBQUFyQyxFQUVBLEdBREFBLEVBQUEsS0FDQXFDLEVBQ0EsR0FBQS9FLEVBSUFrRCxRQUFBQyxVQUNBcEIsS0FBQSxXQUNBLE9BQUFpRCxFQUFBaEYsS0FFQStCLEtBQ0EsU0FBQWtELEdBQ0FGLEVBQUE1QixRQUFBOEIsSUFFQSxTQUFBaEQsR0FDQThDLEVBQUEzQixPQUFBbkIsU0FHSSxDQUNKLElBQUFpRCxLQUNBLFFBQUFyQyxLQUFBbkQsRUFDQUosT0FBQUMsVUFBQUMsZUFBQUMsS0FBQUMsRUFBQW1ELElBQ0FxQyxFQUFBbEUsS0FBQTRCLEVBQUFDLElBR0FrQyxFQUFBNUIsUUFBQStCLElBSUEsU0FBQUYsRUFBQUcsR0FDQSxhQUFBdEQsRUFDQSxVQUFBbUIsTUFBQSwyQ0FHQSxJQUFBb0MsRUFDQTVDLEVBQ0E2QyxFQUNBQyxFQUNBakcsRUFFQSxTQUFBa0csRUFBQUMsR0FVQSxJQVRBLElBQUFOLEdBQUFNLEdBQ0FDLEtBRUFDLEVBQUFSLEVBQUFTLFFBQUFDLElBQUEsU0FBQS9DLEdBQ0EsT0FDQWdELE9BQUFoRCxHQUNBQSxRQUdBNkMsRUFBQWpELE9BQUEsSUFDQSxJQUFBcUQsRUFBQUosRUFBQUssTUFDQTFHLEVBQUF5RyxFQUFBakQsR0FDQWdELEVBQUFDLEVBQUFELE1BRUEsSUFEQVAsRUFBQTlFLEVBQUFuQixNQUNBaUcsRUFBQTFFLElBQUFvRixjQUFBLENBQ0EsR0FBQVYsRUFBQTFFLElBQUFxRixjQUNBLE9BQ0FDLEtBQUEsZ0JBQ0FMLFFBQ0F4RyxZQUdBLEdBQUFpRyxFQUFBMUUsSUFBQXVGLE1BQ0EsT0FDQUQsS0FBQSxhQUNBTCxRQUNBeEcsWUFHQSxRQUFBbUQsRUFBQSxFQUFvQkEsRUFBQThDLEVBQUF4RSxRQUFBMkIsT0FBMkJELElBQUEsQ0FDL0MsSUFBQTRELEVBQUFkLEVBQUF4RSxRQUFBMEIsR0FDQTZELEVBQUE3RixFQUFBNEYsR0FDQSxHQUFBQyxFQUFBLENBQ0EsR0FBQUEsRUFBQXpGLElBQUEwRixzQkFBQWpILEdBQ0EsT0FDQTZHLEtBQUEsV0FDQUwsUUFBQVUsUUFBQUgsSUFDQS9HLFdBQ0ErRyxhQUdBLElBQUFsQixFQUFBbkUsUUFBQXFGLEtBQ0FDLEVBQUF6RixJQUFBNEYsc0JBQUFuSCxJQUNBb0csRUFBQVcsS0FDQVgsRUFBQVcsT0FDQUssRUFBQWhCLEVBQUFXLElBQUEvRyxhQUdBb0csRUFBQVcsR0FDQWxCLEVBQUFsRSxLQUFBb0YsR0FDQVYsRUFBQTFFLE1BQ0E2RSxRQUFBVSxRQUFBSCxJQUNBdkQsR0FBQXVELFNBS0EsT0FDQUYsS0FBQSxXQUNBN0csU0FBQW1HLEVBQ0FOLGtCQUNBTyx3QkFJQSxTQUFBZ0IsRUFBQUMsRUFBQUMsR0FDQSxRQUFBbkUsRUFBQSxFQUFtQkEsRUFBQW1FLEVBQUFsRSxPQUFjRCxJQUFBLENBQ2pDLElBQUFvRSxFQUFBRCxFQUFBbkUsSUFDQSxJQUFBa0UsRUFBQTNGLFFBQUE2RixJQUFBRixFQUFBMUYsS0FBQTRGLElBN0VBekIsUUFtRkEsSUFBQU0sS0FDQVAsS0FDQTJCLEtBRUFDLEVBQUEsV0FDQTVGLFFBQUFDLEtBQ0EsNEJBQUE4RCxFQUFBNUYsU0FBQSx5QkFJQSxRQUFBd0QsS0FBQW5ELEVBQ0EsR0FBQUosT0FBQUMsVUFBQUMsZUFBQUMsS0FBQUMsRUFBQW1ELEdBQUEsQ0FHQSxJQUFBb0MsRUFGQTVGLEVBQUF1RCxFQUFBQyxHQVlBLElBQUFrRSxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxFQUFBLEdBSUEsUUFmQWpDLEVBREF2RixFQUFBbUQsR0FDQTBDLEVBQUFsRyxJQUdBNkcsS0FBQSxXQUNBN0csU0FBQXdELElBUUFnRCxRQUNBcUIsRUFBQSx5QkFBQWpDLEVBQUFZLE1BQUFzQixLQUFBLFNBRUFsQyxFQUFBaUIsTUFDQSxvQkFDQWYsRUFBQWlDLFlBQUFqQyxFQUFBaUMsV0FBQW5DLEdBQ0FFLEVBQUFrQyxpQkFDQU4sRUFBQSxJQUFBL0QsTUFDQSxvQ0FDQWlDLEVBQUE1RixTQUNBNkgsSUFFQSxNQUNBLGVBQ0EvQixFQUFBaUMsWUFBQWpDLEVBQUFpQyxXQUFBbkMsR0FDQUUsRUFBQWtDLGlCQUNBTixFQUFBLElBQUEvRCxNQUNBLDJDQUNBaUMsRUFBQTVGLFNBQ0EsT0FDQTRGLEVBQUFtQixTQUNBYyxJQUVBLE1BQ0EsaUJBQ0EvQixFQUFBbUMsY0FBQW5DLEVBQUFtQyxhQUFBckMsR0FDQUUsRUFBQW9DLG1CQUNBUixFQUFBLElBQUEvRCxNQUNBLG1CQUFBM0QsRUFBQSxtQkFBQTZILElBRUEsTUFDQSxlQUNBL0IsRUFBQXFDLFlBQUFyQyxFQUFBcUMsV0FBQXZDLEdBQ0ErQixHQUFBLEVBQ0EsTUFDQSxlQUNBN0IsRUFBQXNDLFlBQUF0QyxFQUFBc0MsV0FBQXhDLEdBQ0FnQyxHQUFBLEVBQ0EsTUFDQSxRQUNBLFVBQUFqRSxNQUFBLG9CQUFBaUMsRUFBQWlCLE1BRUEsR0FBQWEsRUFFQSxPQURBakYsRUFBQSxTQUNBb0IsUUFBQUUsT0FBQTJELEdBRUEsR0FBQUMsRUFHQSxJQUFBM0gsS0FGQXdILEVBQUF4SCxHQUFBSyxFQUFBTCxHQUNBb0gsRUFBQXZCLEVBQUFELEVBQUFDLGlCQUNBRCxFQUFBUSxxQkFFQW5HLE9BQUFDLFVBQUFDLGVBQUFDLEtBQ0F3RixFQUFBUSxxQkFDQXBHLEtBR0FvRyxFQUFBcEcsS0FDQW9HLEVBQUFwRyxPQUNBb0gsRUFDQWhCLEVBQUFwRyxHQUNBNEYsRUFBQVEscUJBQUFwRyxLQUtBNEgsSUFDQVIsRUFBQXZCLEdBQUFELEVBQUE1RixXQUNBd0gsRUFBQXhILEdBQUF5SCxHQU1BLElBcUJBWSxFQXJCQUMsS0FDQSxJQUFBbkYsRUFBQSxFQUFjQSxFQUFBMEMsRUFBQXpDLE9BQTRCRCxJQUMxQ25ELEVBQUE2RixFQUFBMUMsR0FFQWhDLEVBQUFuQixJQUNBbUIsRUFBQW5CLEdBQUF1QixJQUFBb0YsZUFFQTJCLEVBQUEzRyxNQUNBc0UsT0FBQWpHLEVBQ0F1SSxhQUFBcEgsRUFBQW5CLEdBQUF1QixJQUFBb0YsZ0JBS0FsRSxFQUFBLFdBQ0F4QyxPQUFBdUksS0FBQTFJLEdBQUEySSxRQUFBLFNBQUE3SSxJQUNBLElBQUFFLEVBQUFGLElBemhCQSxTQUFBQSxVQUNBOEksZ0JBQUE5SSxHQXloQkErSSxDQUFBL0ksS0FNQSxJQURBLElBcUNBZ0osRUFDQUMsRUF0Q0F4QyxFQUFBUixFQUFBUyxRQUNBRCxFQUFBakQsT0FBQSxHQUdBLEdBRkFwRCxFQUFBcUcsRUFBQUssTUFDQVQsRUFBQTlFLEVBQUFuQixHQUNBLENBRUEsSUFBQThJLEtBR0FDLEVBQUE5QyxFQUFBMUUsSUFBQXlILGlCQUNBLElBQUFoRCxFQUFBLEVBQWVBLEVBQUErQyxFQUFBM0YsT0FBNEI0QyxLQUMzQ0QsRUFBQWdELEVBQUEvQyxJQUNBOEMsR0FjQSxJQVpBaEksRUFBQWQsR0FBQThJLEVBR0E3QyxFQUFBMUUsSUFBQUMsUUFBQSxTQUdBTCxFQUFBbkIsVUFHQW9HLEVBQUFwRyxHQUdBZ0csRUFBQSxFQUFlQSxFQUFBQyxFQUFBckUsU0FBQXdCLE9BQTRCNEMsSUFBQSxDQUMzQyxJQUFBaUQsRUFBQTlILEVBQUE4RSxFQUFBckUsU0FBQW9FLElBQ0FpRCxLQUNBWixFQUFBWSxFQUFBeEgsUUFBQUMsUUFBQTFCLEtBQ0EsR0FDQWlKLEVBQUF4SCxRQUFBeUgsT0FBQWIsRUFBQSxLQVFBLElBQUFySSxLQUFBb0csRUFDQSxHQUNBbkcsT0FBQUMsVUFBQUMsZUFBQUMsS0FBQWdHLEVBQUFwRyxLQUVBaUcsRUFBQTlFLEVBQUFuQixJQUdBLElBREE2SSxFQUFBekMsRUFBQXBHLEdBQ0FnRyxFQUFBLEVBQWlCQSxFQUFBNkMsRUFBQXpGLE9BQXVDNEMsSUFDeEQ0QyxFQUFBQyxFQUFBN0MsSUFDQXFDLEVBQUFwQyxFQUFBckUsU0FBQUYsUUFBQWtILEtBQ0EsR0FBQTNDLEVBQUFyRSxTQUFBc0gsT0FBQWIsRUFBQSxHQVlBLElBQUFySSxLQUxBeUMsRUFBQSxTQUVBN0IsRUFBQTBDLEVBR0FrRSxFQUNBdkgsT0FBQUMsVUFBQUMsZUFBQUMsS0FBQW9ILEVBQUF4SCxLQUNBbUosRUFBQW5KLEdBQUF3SCxFQUFBeEgsSUFLQSxJQUFBb0osRUFBQSxLQUNBLElBQUFwSixLQUFBb0csRUFDQSxHQUNBbkcsT0FBQUMsVUFBQUMsZUFBQUMsS0FBQWdHLEVBQUFwRyxLQUVBaUcsRUFBQTlFLEVBQUFuQixJQUNBLENBQ0E2SSxFQUFBekMsRUFBQXBHLEdBQ0EsSUFBQXFKLEtBQ0EsSUFBQWxHLEVBQUEsRUFBaUJBLEVBQUEwRixFQUFBekYsT0FBdUNELElBR3hELEdBRkF5RixFQUFBQyxFQUFBMUYsR0FDQTRDLEVBQUFFLEVBQUExRSxJQUFBNEYsc0JBQUF5QixHQUNBLENBQ0EsUUFBQVMsRUFBQTNILFFBQUFxRSxHQUFBLFNBQ0FzRCxFQUFBMUgsS0FBQW9FLEdBR0EsSUFBQTVDLEVBQUEsRUFBaUJBLEVBQUFrRyxFQUFBakcsT0FBc0JELElBQUEsQ0FDdkM0QyxFQUFBc0QsRUFBQWxHLEdBQ0EsSUFDQTRDLEVBQUE4QyxHQUNRLE1BQUFqRyxHQUNSa0QsRUFBQXdELFdBQ0F4RCxFQUFBd0QsV0FDQXpDLEtBQUEsaUJBQ0E3RyxXQUNBdUosYUFBQVYsRUFBQTFGLEdBQ0FpRyxNQUFBeEcsSUFHQWtELEVBQUEwRCxlQUNBSixNQUFBeEcsS0FTQSxJQUFBTyxFQUFBLEVBQWNBLEVBQUFtRixFQUFBbEYsT0FBd0NELElBQUEsQ0FDdEQsSUFBQW9FLEVBQUFlLEVBQUFuRixHQUNBbkQsRUFBQXVILEVBQUF0QixPQUNBbEYsR0FBQWYsR0FDQSxJQUNBb0IsRUFBQXBCLEdBQ0ssTUFBQTRDLEdBQ0wsc0JBQUEyRSxFQUFBZ0IsYUFDQSxJQUNBaEIsRUFBQWdCLGFBQUEzRixHQUNPLE1BQUE2RyxHQUNQM0QsRUFBQXdELFdBQ0F4RCxFQUFBd0QsV0FDQXpDLEtBQUEsb0NBQ0E3RyxXQUNBb0osTUFBQUssRUFDQUMsY0FBQTlHLElBR0FrRCxFQUFBMEQsZUFDQUosTUFBQUssR0FFQUwsTUFBQXhHLFFBR0FrRCxFQUFBd0QsV0FDQXhELEVBQUF3RCxXQUNBekMsS0FBQSxzQkFDQTdHLFdBQ0FvSixNQUFBeEcsSUFHQWtELEVBQUEwRCxlQUNBSixNQUFBeEcsSUFPQSxPQUFBd0csR0FDQTNHLEVBQUEsUUFDQW9CLFFBQUFFLE9BQUFxRixLQUdBM0csRUFBQSxRQUNBLElBQUFvQixRQUFBLFNBQUFDLEdBQ0FBLEVBQUErQixNQUtBLElBQUExRSxLQUdBLFNBQUFDLEVBQUFwQixHQUdBLEdBQUFtQixFQUFBbkIsR0FDQSxPQUFBbUIsRUFBQW5CLEdBQUEySixRQUdBLElBQUExRCxFQUFBOUUsRUFBQW5CLElBQ0FtRCxFQUFBbkQsRUFDQTRKLEdBQUEsRUFDQUQsV0FDQXBJLElBdGpCQSxTQUFBdkIsR0FDQSxJQUFBdUIsR0FFQTRGLHlCQUNBRix5QkFDQU4sZUFBQSxFQUNBQyxlQUFBLEVBQ0FvQyxvQkFDQWxDLE1BQUFwRyxJQUFBVixFQUdBd0IsUUFBQSxFQUNBcUksT0FBQSxTQUFBQyxFQUFBQyxHQUNBLFlBQUFELEVBQUF2SSxFQUFBb0YsZUFBQSxPQUNBLHNCQUFBbUQsRUFBQXZJLEVBQUFvRixjQUFBbUQsT0FDQSxvQkFBQUEsRUFDQSxRQUFBM0csRUFBQSxFQUFxQkEsRUFBQTJHLEVBQUExRyxPQUFnQkQsSUFDckM1QixFQUFBNEYsc0JBQUEyQyxFQUFBM0csSUFBQTRHLEdBQUEsa0JBQ0F4SSxFQUFBNEYsc0JBQUEyQyxHQUFBQyxHQUFBLGNBRUFDLFFBQUEsU0FBQUYsR0FDQSxZQUFBQSxFQUFBdkksRUFBQXFGLGVBQUEsT0FDQSxvQkFBQWtELEVBQ0EsUUFBQTNHLEVBQUEsRUFBcUJBLEVBQUEyRyxFQUFBMUcsT0FBZ0JELElBQ3JDNUIsRUFBQTBGLHNCQUFBNkMsRUFBQTNHLEtBQUEsT0FDQTVCLEVBQUEwRixzQkFBQTZDLElBQUEsR0FFQUcsUUFBQSxTQUFBRixHQUNBeEksRUFBQXlILGlCQUFBckgsS0FBQW9JLElBRUFHLGtCQUFBLFNBQUFILEdBQ0F4SSxFQUFBeUgsaUJBQUFySCxLQUFBb0ksSUFFQUkscUJBQUEsU0FBQUosR0FDQSxJQUFBMUIsRUFBQTlHLEVBQUF5SCxpQkFBQXRILFFBQUFxSSxHQUNBMUIsR0FBQSxHQUFBOUcsRUFBQXlILGlCQUFBRSxPQUFBYixFQUFBLElBSUErQixNQUFBM0csRUFDQUMsTUFBQWlDLEVBQ0FuQixPQUFBLFNBQUFvRixHQUNBLElBQUFBLEVBQUEsT0FBQXBILEVBQ0FTLEVBQUF0QixLQUFBaUksSUFFQVMsaUJBQUEsU0FBQVQsR0FDQTNHLEVBQUF0QixLQUFBaUksSUFFQVUsb0JBQUEsU0FBQVYsR0FDQSxJQUFBdkIsRUFBQXBGLEVBQUF2QixRQUFBa0ksR0FDQXZCLEdBQUEsR0FBQXBGLEVBQUFpRyxPQUFBYixFQUFBLElBSUFTLEtBQUFoSSxFQUFBZCxJQUdBLE9BREFVLE9BQUE2SixFQUNBaEosRUE2ZkFpSixDQUFBeEssR0FDQXlCLFNBQUFULEVBQUFELE9BQUFDLEdBQ0FZLGFBVUEsT0FOQXVILEVBQUFuSixHQUFBSSxLQUFBNkYsRUFBQTBELFFBQUExRCxJQUFBMEQsUUFBQTFJLEVBQUFqQixJQUdBaUcsRUFBQTJELEdBQUEsRUFHQTNELEVBQUEwRCxRQUtBdkksRUFBQXFKLEVBQUF0QixFQUdBL0gsRUFBQTBELEVBQUEzRCxFQUdBQyxFQUFBc0osRUFBQSxTQUFBZixFQUFBM0gsRUFBQTJJLEdBQ0F2SixFQUFBd0osRUFBQWpCLEVBQUEzSCxJQUNBL0IsT0FBQXFDLGVBQUFxSCxFQUFBM0gsR0FBMENFLFlBQUEsRUFBQUMsSUFBQXdJLEtBSzFDdkosRUFBQXlKLEVBQUEsU0FBQWxCLEdBQ0Esb0JBQUFtQixlQUFBQyxhQUNBOUssT0FBQXFDLGVBQUFxSCxFQUFBbUIsT0FBQUMsYUFBd0QxSSxNQUFBLFdBRXhEcEMsT0FBQXFDLGVBQUFxSCxFQUFBLGNBQWlEdEgsT0FBQSxLQVFqRGpCLEVBQUEyQixFQUFBLFNBQUFWLEVBQUFXLEdBRUEsR0FEQSxFQUFBQSxJQUFBWCxFQUFBakIsRUFBQWlCLElBQ0EsRUFBQVcsRUFBQSxPQUFBWCxFQUNBLEtBQUFXLEdBQUEsaUJBQUFYLFFBQUEySSxXQUFBLE9BQUEzSSxFQUNBLElBQUE0SSxFQUFBaEwsT0FBQWlMLE9BQUEsTUFHQSxHQUZBOUosRUFBQXlKLEVBQUFJLEdBQ0FoTCxPQUFBcUMsZUFBQTJJLEVBQUEsV0FBeUMvSSxZQUFBLEVBQUFHLFVBQ3pDLEVBQUFXLEdBQUEsaUJBQUFYLEVBQUEsUUFBQThJLEtBQUE5SSxFQUFBakIsRUFBQXNKLEVBQUFPLEVBQUFFLEVBQUEsU0FBQUEsR0FBZ0gsT0FBQTlJLEVBQUE4SSxJQUFxQkMsS0FBQSxLQUFBRCxJQUNySSxPQUFBRixHQUlBN0osRUFBQWlLLEVBQUEsU0FBQXBGLEdBQ0EsSUFBQTBFLEVBQUExRSxLQUFBK0UsV0FDQSxXQUEyQixPQUFBL0UsRUFBQSxTQUMzQixXQUFpQyxPQUFBQSxHQUVqQyxPQURBN0UsRUFBQXNKLEVBQUFDLEVBQUEsSUFBQUEsR0FDQUEsR0FJQXZKLEVBQUF3SixFQUFBLFNBQUFVLEVBQUFDLEdBQXNELE9BQUF0TCxPQUFBQyxVQUFBQyxlQUFBQyxLQUFBa0wsRUFBQUMsSUFHdERuSyxFQUFBOEMsRUFBQSxHQUdBOUMsRUFBQTJELEVBQUEsV0FBc0MsT0FBQW5FLEdBSXRDSyxFQUFBLGlCQUFBQSxDQUFBRyxFQUFBb0ssRUFBQSxxR0N0eEJBLElBQUFDLEVBQUFySyxFQUFBLGdEQUNBNkUsRUFBQTBELFFBQUF2SSxFQUFBLDRDQUFBQSxFQUFBLElBS0FPLE1BQUFzRSxFQUFBOUMsRUFBQSxzREFBa0VzSSxFQUFBckssRUFBQSwyRUFBd0VxSyxFQUFBckssRUFBQSw2akVBQXdLcUssRUFBQXJLLEVBQUEsaUZBQUFxSyxFQUFBckssRUFBQSw2YUFBMjdFLDJFQ043dUYsSUFBQXFLLEVBQUFySyxFQUFBLGdEQUNBNkUsRUFBQTBELFFBQUF2SSxFQUFBLDRDQUFBQSxFQUFBLElBS0FPLE1BQUFzRSxFQUFBOUMsRUFBQSw0Z0JBQXFnQnNJLEVBQUFySyxFQUFBLDQrREFBMi9EcUssRUFBQXJLLEVBQUEsMGlDQUF1bEMsZ0VDRHZsSDZFLEVBQUEwRCxRQUFBLFNBQUErQixHQUNBLElBQUFDLEtBd0NBLE9BckNBQSxFQUFBQyxTQUFBLFdBQ0EsT0FBQUMsS0FBQXRGLElBQUEsU0FBQWdCLEdBQ0EsSUFBQXVFLEVBc0NBLFNBQUF2RSxFQUFBbUUsR0FDQSxJQUFBSSxFQUFBdkUsRUFBQSxPQUNBd0UsRUFBQXhFLEVBQUEsR0FDQSxJQUFBd0UsRUFDQSxPQUFBRCxFQUdBLEdBQUFKLEdBQUEsbUJBQUFNLEtBQUEsQ0FDQSxJQUFBQyxFQVlBLFNBQUFDLEdBS0EseUVBSEFGLEtBQUFHLFNBQUFDLG1CQUFBMUgsS0FBQTJILFVBQUFILE1BR0EsTUFqQkFJLENBQUFQLEdBQ0FRLEVBQUFSLEVBQUFTLFFBQUFqRyxJQUFBLFNBQUFrRyxHQUNBLHVCQUFBVixFQUFBVyxXQUFBRCxFQUFBLFFBR0EsT0FBQVgsR0FBQTVFLE9BQUFxRixHQUFBckYsUUFBQStFLElBQUFuRSxLQUFBLE1BR0EsT0FBQWdFLEdBQUFoRSxLQUFBLE1BdERBNkUsQ0FBQXBGLEVBQUFtRSxHQUNBLE9BQUFuRSxFQUFBLEdBQ0EsVUFBQUEsRUFBQSxPQUFtQ3VFLEVBQUEsSUFFbkNBLElBRUdoRSxLQUFBLEtBSUg2RCxFQUFBeEksRUFBQSxTQUFBZ0csRUFBQXlELEdBQ0EsaUJBQUF6RCxJQUNBQSxJQUFBLEtBQUFBLEVBQUEsTUFFQSxJQURBLElBQUEwRCxLQUNBMUosRUFBQSxFQUFnQkEsRUFBQTBJLEtBQUF6SSxPQUFpQkQsSUFBQSxDQUNqQyxJQUFBSyxFQUFBcUksS0FBQTFJLEdBQUEsR0FDQSxpQkFBQUssSUFDQXFKLEVBQUFySixJQUFBLEdBRUEsSUFBQUwsRUFBQSxFQUFZQSxFQUFBZ0csRUFBQS9GLE9BQW9CRCxJQUFBLENBQ2hDLElBQUFvRSxFQUFBNEIsRUFBQWhHLEdBS0EsaUJBQUFvRSxFQUFBLElBQUFzRixFQUFBdEYsRUFBQSxNQUNBcUYsSUFBQXJGLEVBQUEsR0FDQUEsRUFBQSxHQUFBcUYsRUFDS0EsSUFDTHJGLEVBQUEsT0FBQUEsRUFBQSxhQUFBcUYsRUFBQSxLQUVBakIsRUFBQWhLLEtBQUE0RixNQUlBb0UsZ0VDOUNBMUYsRUFBQTBELFFBQUEsU0FBQW1ELEdBQ0EsdUJBQUFBLEVBQ0FBLEdBR0EsZUFBQUMsS0FBQUQsS0FDQUEsSUFBQXhHLE1BQUEsT0FJQSxjQUFBeUcsS0FBQUQsR0FDQSxJQUFBQSxFQUFBRSxRQUFBLFlBQUFBLFFBQUEsaUJBR0FGLHNFQ2RBLElBQUFHLEVBQUE3TCxFQUFBLDJDQW9CQThMLEtBRUEsU0FBQUMsSUFDQXRCLEtBQUF1QixzQkFHQUQsRUFBQWpOLFdBQ0FtTixZQUFBRixFQUNBakMsT0FBQSxTQUFBb0MsRUFBQUMsR0FDQSxJQUFBQyxLQUNBUCxFQUFBUSxLQUFBUCxFQUFBLFNBQUFRLEVBQUE3RyxHQUNBLElBQUE4RSxFQUFBK0IsRUFBQXhDLE9BQUFvQyxFQUFBQyxHQUNBQyxJQUFBdEcsT0FBQXlFLFNBRUFFLEtBQUF1QixtQkFBQUksR0FFQS9JLE9BQUEsU0FBQTZJLEVBQUFDLEdBQ0FOLEVBQUFRLEtBQUE1QixLQUFBdUIsbUJBQUEsU0FBQU8sR0FDQUEsRUFBQWxKLFFBQUFrSixFQUFBbEosT0FBQTZJLEVBQUFDLE1BR0FLLHFCQUFBLFdBQ0EsT0FBQS9CLEtBQUF1QixtQkFBQTlHLFVBSUE2RyxFQUFBVSxTQUFBLFNBQUFoSCxFQUFBaUgsR0FDQVosRUFBQXJHLEdBQUFpSCxHQUdBWCxFQUFBaEwsSUFBQSxTQUFBMEUsR0FDQSxPQUFBcUcsRUFBQXJHLElBR0EsSUFBQWtILEVBQUFaLEVBQ0FsSCxFQUFBMEQsUUFBQW9FLGdFQ3ZEQSxJQUFBZCxFQUFBN0wsRUFBQSwyQ0FvQkE0TSxHQUFBLG1OQVFBLElBQUFELEVBTkEsU0FBQUUsR0FDQWhCLEVBQUFRLEtBQUFPLEVBQUEsU0FBQWhNLEdBQ0E2SixLQUFBN0osR0FBQWlMLEVBQUE3QixLQUFBNkMsRUFBQWpNLEdBQUFpTSxJQUNHcEMsT0FJSDVGLEVBQUEwRCxRQUFBb0UsaUZDN0JBLElBQUFHLEVBQUE5TSxFQUFBLHlDQUVBNkwsRUFBQTdMLEVBQUEsMkNBdURBNkUsRUFBQTBELFFBbkNBLFNBQUF3RSxFQUFBQyxHQUNBbkIsRUFBQVEsS0FBQVcsRUFBQSxTQUFBQyxHQUNBQSxFQUFBNUosT0FBQSxhQU9BeUosRUFBQUksZUFBQUQsRUFBQSxTQUFBRSxFQUFBakIsR0FDQSxJQUFBa0IsS0FpQkEsT0FoQkFsQixFQUFBbUIsZUFDQUMsU0FBQSxTQUNBQyxRQUFBUixFQUNBUyxNQUFBTCxHQUNPLFNBQUFNLEdBQ1BBLEVBQUFSLEVBQUFTLFNBQ0FELEVBQUFSLEVBQUFTLFFBQUFQLEVBQUF2TSxLQUFBdU0sRUFBQVEsV0FHQSxJQUFBakcsRUFBQStGLEVBQUFHLFVBRUFsRyxFQUFBMkUsS0FBQSxTQUFBcEYsR0FDQSxJQUFBckcsRUFBQThHLEVBQUFtRyxRQUFBNUcsR0FDQW1HLEVBQUF4TSxHQUFBNk0sRUFBQUssV0FBQWxOLEtBQUEsT0FJQUEsS0FBQXVNLEVBQUF2TSxLQUNBd00sbUdDbkRBLElBQUF2QixFQUFBN0wsRUFBQSwyQ0FFQStOLEVBQUEvTixFQUFBLDJDQUVBZ08sRUFBQWhPLEVBQUEsOERBSUFpTyxFQUZBak8sRUFBQSx3REFFQWlPLHVCQUlBQyxFQUZBbE8sRUFBQSw2REFFQWtPLHVCQUlBQyxFQUZBbk8sRUFBQSw0Q0FFQW1PLGlCQUVBQyxFQUFBcE8sRUFBQSxrREFJQXFPLEVBRkFyTyxFQUFBLG1EQUVBcU8sMEJBRUFDLEVBQUF0TyxFQUFBLDZDQUlBdU8sRUFGQXZPLEVBQUEsNkRBRUF1TyxnQkFvSEEsSUFBQTVCLEVBekZBLFNBQUF0QixFQUFBb0MsRUFBQWUsR0FDQUEsUUFFQUYsRUFBQUcsV0FBQXBELEtBQ0FBLEVBQUFpRCxFQUFBSSxtQkFBQXJELElBR0EsSUFHQXNELEVBSEFDLEVBQUFuQixFQUFBMU0sSUFBQSxvQkFDQThOLEVBQUFULEVBQUFyTixJQUFBNk4sR0FDQUUsRUFBQVQsRUFBQVosR0FHQXFCLElBQ0FILEVBQUE5QyxFQUFBMUcsSUFBQTJKLEVBQUFDLGFBQUEsU0FBQUMsR0FDQSxJQUFBQyxHQUNBck8sS0FBQW9PLEdBRUFFLEVBQUFKLEVBQUFLLFFBQUFwTyxJQUFBaU8sR0FFQSxHQUFBRSxFQUFBLENBQ0EsSUFBQUUsRUFBQUYsRUFBQW5PLElBQUEsUUFDQWtPLEVBQUF4SixLQUFBeUksRUFBQWtCLEdBR0EsT0FBQUgsS0FJQU4sSUFFQUEsRUFBQUUsTUFBQVEsa0JBQUFSLEVBQUFRLG9CQUFBUixFQUFBUyxXQUFBcEssV0FBQSxVQUdBLElBSUFxSyxFQUNBQyxFQUxBQyxFQUFBekIsRUFBQTNDLEdBQ0FxRSxnQkFBQWYsRUFDQWdCLGNBQUFuQixFQUFBbUIsZ0JBSUFiLEdBQUFqRCxFQUFBUSxLQUFBb0QsRUFBQSxTQUFBUixFQUFBVyxHQUNBLElBQUFDLEVBQUFaLEVBQUFZLFNBQ0FDLEVBQUFoQixFQUFBaUIsZ0JBQUFoUCxJQUFBOE8sR0FFQUMsSUFDQSxNQUFBUCxJQUNBQSxFQUFBSyxHQUdBWCxFQUFBZSxZQUFBRixFQUFBRyxrQkFHQSxNQUFBaEIsRUFBQWlCLFVBQUFDLFdBQ0FYLEdBQUEsS0FJQUEsR0FBQSxNQUFBRCxJQUNBRSxFQUFBRixHQUFBVyxVQUFBQyxTQUFBLEdBR0EsSUFBQUMsRUFBQTdCLEVBQUFkLEVBQUFnQyxHQUNBbEYsRUFBQSxJQUFBd0QsRUFBQTBCLEVBQUFoQyxHQUNBbEQsRUFBQThGLG1CQUFBRCxHQUNBLElBQUFFLEVBQUEsTUFBQWYsR0FTQSxTQUFBbEUsR0FDQSxHQUFBQSxFQUFBa0YsZUFBQXRDLEVBQUEsQ0FDQSxJQUFBdUMsRUFLQSxTQUFBOUksR0FHQSxJQUZBLElBQUEzRixFQUFBLEVBRUFBLEVBQUEyRixFQUFBMUYsUUFBQSxNQUFBMEYsRUFBQTNGLElBQ0FBLElBR0EsT0FBQTJGLEVBQUEzRixHQVpBME8sQ0FBQXBGLEVBQUEzRCxVQUNBLGFBQUE4SSxJQUFBM0UsRUFBQTZFLFFBQUF2QyxFQUFBcUMsS0FaQUcsQ0FBQXRGLEdBQUEsU0FBQXVGLEVBQUFDLEVBQUFsRCxFQUFBaUMsR0FFQSxPQUFBQSxJQUFBTCxFQUFBNUIsRUFBQWxELEtBQUFxRyxzQkFBQUYsRUFBQUMsRUFBQWxELEVBQUFpQyxJQUNHLEtBR0gsT0FGQXJGLEVBQUF3RyxlQUFBLEVBQ0F4RyxFQUFBeUcsU0FBQTNGLEVBQUEsS0FBQWlGLEdBQ0EvRixHQXFCQTFGLEVBQUEwRCxRQUFBb0UsaUZDakpBLElBQUFxQixFQUFBaE8sRUFBQSw4REFFQStOLEVBQUEvTixFQUFBLDJDQUVBaVIsRUFBQWpSLEVBQUEsMkNBRUFrUixFQUFBRCxFQUFBQyxPQUNBUixFQUFBTyxFQUFBUCxRQWdEQTdMLEVBQUEwRCxRQVhBLFNBQUFrRixFQUFBZSxFQUFBMkMsR0FDQTNDLEVBQUFrQyxFQUFBbEMsS0FDQWtCLGdCQUFBbEIsSUFDRzBDLEtBQWExQyxHQUNoQixJQUFBbkQsRUFBQW9DLEVBQUEyRCxZQUNBQyxFQUFBckQsRUFBQTNDLEVBQUFtRCxHQUNBakUsRUFBQSxJQUFBd0QsRUFBQXNELEVBQUE1RCxHQUVBLE9BREFsRCxFQUFBeUcsU0FBQTNGLEVBQUE4RixHQUNBNUcscUZDcERBLElBRUErRyxFQUZBdFIsRUFBQSw0Q0FFQXNSLFVBcUNBek0sRUFBQTBELFFBYkEsV0FDQSxJQUFBZ0osRUFBQUQsSUFDQSxnQkFBQTdELEdBQ0EsSUFBQStELEVBQUFELEVBQUE5RCxHQUNBZ0UsRUFBQWhFLEVBQUFnRSxnQkFDQUMsRUFBQUYsRUFBQUcsTUFDQUMsRUFBQUosRUFBQUssa0JBQ0FGLEVBQUFILEVBQUFHLE1BQUFGLEVBQUFFLE1BQ0FHLEVBQUFOLEVBQUFLLGtCQUFBSixFQUFBSSxrQkFDQSxTQUFBSCxFQUFBQyxHQUFBQyxFQUFBRSxJQUFBLHFFQ25DQSxJQUFBaEYsRUFBQTlNLEVBQUEseUNBRUE2TCxFQUFBN0wsRUFBQSwyQ0FFQUEsRUFBQSxxREFFQUEsRUFBQSxtREFFQSxJQUFBK1IsRUFBQS9SLEVBQUEsK0RBRUFnUyxFQUFBaFMsRUFBQSxrREFFQWlTLEVBQUFqUyxFQUFBLHFEQUVBa1MsRUFBQWxTLEVBQUEsc0RBb0JBK1IsRUFBQSxRQUNBdE0sS0FBQSxrQkFDQTBNLE1BQUEsbUJBQ0F6RSxPQUFBLG1CQUVBakksS0FBQSxZQUNBME0sTUFBQSxjQUNBekUsT0FBQSxXQUVBakksS0FBQSxjQUNBME0sTUFBQSxnQkFDQXpFLE9BQUEsY0FFQVosRUFBQXNGLGVBQUFKLEVBQUEsUUFDQWxGLEVBQUF1RixlQUFBeEcsRUFBQXlHLE1BQUFMLEVBQUEsUUFDQW5GLEVBQUF5RixrQkFBQUwsRUFBQSw2RUNqREEsSUFBQXBGLEVBQUE5TSxFQUFBLHlDQUVBd1MsRUFBQXhTLEVBQUEsK0RBRUE2TCxFQUFBN0wsRUFBQSwyQ0FFQXlTLEVBQUF6UyxFQUFBLDRDQUlBMFMsRUFGQTFTLEVBQUEsNkNBRUEwUyx3QkFFQUMsRUFBQTNTLEVBQUEsa0VBSUE0UyxFQUZBNVMsRUFBQSwwREFFQTRTLGdCQW9CQUMsRUFBQS9GLEVBQUFnRyxtQkFDQXJOLEtBQUEsYUFFQXNOLEtBQUEsU0FBQUMsR0FDQUgsRUFBQUksV0FBQXhJLEtBQUEsT0FBQXlJLFdBR0F6SSxLQUFBMEksbUJBQUEsV0FDQSxPQUFBMUksS0FBQTJJLGNBR0EzSSxLQUFBNEksa0JBQUE1SSxLQUFBNkkseUJBRUE3SSxLQUFBOEksa0JBQUFQLElBR0FRLFlBQUEsU0FBQUMsR0FDQVosRUFBQWEsVUFBQWpKLEtBQUEsY0FBQWdKLEdBQ0FoSixLQUFBNEksa0JBQUE1SSxLQUFBNkksMEJBRUFLLGVBQUEsU0FBQVgsRUFBQTlHLEdBQ0EsT0FBQXNHLEVBQUEvSCxNQUFBLFdBRUE2SSxzQkFBQSxXQUtBLElBSkEsSUFBQTVMLEVBQUErQyxLQUFBMkksYUFDQVEsRUFBQWxNLEVBQUFtTSxhQUFBLFNBQ0FDLEtBRUEvUixFQUFBLEVBQUFnUyxFQUFBck0sRUFBQXNNLFFBQXVDalMsRUFBQWdTLEVBQVNoUyxJQUNoRCtSLEVBQUF2VCxNQUNBSyxLQUFBOEcsRUFBQW1HLFFBQUE5TCxHQUNBZCxNQUFBeUcsRUFBQTNHLElBQUE2UyxFQUFBN1IsR0FDQXFMLFNBQUF3RixFQUFBbEwsRUFBQTNGLEVBQUEsY0FJQSxPQUFBK1IsR0FHQUcsY0FBQSxTQUFBdEcsR0FDQSxJQUFBakcsRUFBQStDLEtBQUFtRCxVQUNBc0csRUFBQXJCLEVBQUFhLFVBQUFqSixLQUFBLGdCQUFBa0QsR0FFQXdHLEtBTUEsT0FMQXpNLEVBQUEyRSxLQUFBM0UsRUFBQW1NLGFBQUEsa0JBQUE1UyxHQUNBa1QsRUFBQTVULEtBQUFVLEtBRUFpVCxFQUFBRSxRQUFBMUIsRUFBQXlCLEVBQUF4RyxFQUFBakcsRUFBQTJNLFVBQUF0VCxJQUFBLHFCQUNBbVQsRUFBQUksTUFBQS9ULEtBQUEsV0FDQTJULEdBRUFYLGtCQUFBLFNBQUFQLEdBRUFQLEVBQUE4QixnQkFBQXZCLEVBQUEsc0JBQ0EsSUFBQXdCLEVBQUF4QixFQUFBeUIsVUFDQUMsRUFBQTFCLEVBQUEyQixTQUFBRixVQUVBRCxFQUFBSSxLQUFBSixFQUFBSSxNQUFBNUIsRUFBQTZCLE1BQUFELEtBQ0FGLEVBQUFFLEtBQUFGLEVBQUFFLE1BQUE1QixFQUFBMkIsU0FBQUUsTUFBQUQsTUFFQUUsZUFDQUMsT0FBQSxFQUNBQyxFQUFBLEVBQ0FDLGlCQUFBLEVBQ0FDLGdCQUFBLEVBRUFDLFFBQUEsYUFDQUMsUUFBQSxTQUVBQyxXQUFBLEVBQ0FDLFdBQUEsR0FFQUMsU0FBQSxFQUVBQyxlQUFBLEdBRUFDLFlBQUEsR0FFQUMsbUJBQUEsRUFLQUMsaUJBQUEsRUFFQUMsa0JBQUEsRUFFQWYsT0FFQWdCLFFBQUEsRUFDQWpCLE1BQUEsRUFFQWtCLFNBQUEsU0FNQXJCLFdBQ0FHLE1BQUEsRUFFQTVTLE9BQUEsR0FFQStULFFBQUEsR0FDQUMsUUFBQSxFQUNBQyxXQUVBQyxNQUFBLEVBQ0F6USxLQUFBLFVBR0EwUSxXQUNBQyxZQUFBLEdBR0FDLGNBQUEsWUFDQUMsZ0JBQUEsY0FHQXpLLEVBQUEwSyxNQUFBMUQsRUFBQUYsR0FDQSxJQUFBaEcsRUFBQWtHLEVBQ0FoTyxFQUFBMEQsUUFBQW9FLHFFQzdKQSxJQUFBZCxFQUFBN0wsRUFBQSwyQ0FFQXdXLEVBQUF4VyxFQUFBLDhDQUVBeVcsRUFBQXpXLEVBQUEsNENBMEJBLFNBQUEwVyxFQUFBQyxFQUFBbEosRUFBQW1KLEVBQUF6SyxHQUNBLElBQUF6RSxFQUFBK0YsRUFBQUcsVUFDQUQsRUFBQWxELEtBQUFrRCxVQUNBL00sRUFBQThHLEVBQUFtRyxRQUFBRixHQUNBNkgsRUFBQS9ILEVBQUExTSxJQUFBLGtCQUNBb0wsRUFBQTBLLGdCQUNBcFIsS0FBQSxrQkFDQXFSLEtBQUFILEVBQ0EvVixPQUNBbVcsU0FBQXRKLEVBQUFyTCxLQUVBc0YsRUFBQTJFLEtBQUEsU0FBQXBGLEdBQ0ErUCxFQUFBdFAsRUFBQXVQLGlCQUFBaFEsR0FBQVMsRUFBQXdQLGNBQUFqUSxHQUFBd0csRUFBQUssV0FBQXBHLEVBQUFtRyxRQUFBNUcsSUFBQXVPLEVBQUFvQixLQWFBLFNBQUFJLEVBQUFHLEVBQUFDLEVBQUF0SixFQUFBMEgsRUFBQW9CLEdBQ0EsSUFBQVMsR0FBQUQsRUFBQTlCLFdBQUE4QixFQUFBRSxVQUFBLEVBQ0FDLEVBQUFDLEtBQUFDLElBQUFKLEdBQ0FLLEVBQUFGLEtBQUFHLElBQUFOLEdBQ0FPLEVBQUE5SixFQUFBMEgsRUFBQSxFQUNBTSxHQUFBeUIsRUFBQUssRUFBQUYsRUFBQUUsR0FDQWhCLEVBQ0FPLEVBQUFVLFVBQUFDLEtBQUEsS0FDQWhDLGFBQ0dpQyxNQUFBLGFBQUFaLEVBQUFhLEtBQUEsV0FBQWxDLEdBU0gsU0FBQW1DLEVBQUF2USxFQUFBVCxHQUNBdVAsRUFBQTBCLE1BQUFsWixLQUFBeUwsTUFDQSxJQUFBME4sRUFBQSxJQUFBM0IsRUFBQTRCLFFBQ0FDLEdBQUEsSUFFQUMsRUFBQSxJQUFBOUIsRUFBQStCLFNBQ0FDLEVBQUEsSUFBQWhDLEVBQUFpQyxLQU1BLFNBQUFDLElBQ0FKLEVBQUFLLE9BQUFMLEVBQUFNLFlBQ0FKLEVBQUFHLE9BQUFILEVBQUFJLFlBR0EsU0FBQUMsSUFDQVAsRUFBQUssT0FBQUwsRUFBQVEsYUFDQU4sRUFBQUcsT0FBQUgsRUFBQU0sYUFaQXJPLEtBQUFzTyxJQUFBWixHQUNBMU4sS0FBQXNPLElBQUFULEdBQ0E3TixLQUFBc08sSUFBQVAsR0FDQS9OLEtBQUF1TyxXQUFBdFIsRUFBQVQsR0FBQSxHQVlBd0QsS0FBQXdPLEdBQUEsV0FBQVAsR0FBQU8sR0FBQSxTQUFBSixHQUFBSSxHQUFBLFlBQUFQLEdBQUFPLEdBQUEsV0FBQUosR0FHQSxJQUFBSyxFQUFBakIsRUFBQW5aLFVBRUFvYSxFQUFBRixXQUFBLFNBQUF0UixFQUFBVCxFQUFBa1MsR0FDQSxJQUFBaEIsRUFBQTFOLEtBQUEyTyxRQUFBLEdBQ0EzTCxFQUFBL0YsRUFBQTJNLFVBQ0FnRixFQUFBM1IsRUFBQTRSLGFBQUFyUyxHQUNBbVEsRUFBQTFQLEVBQUF3UCxjQUFBalEsR0FDQXNTLEVBQUExTixFQUFBcUYsVUFBb0NrRyxJQUNwQ21DLEVBQUExRSxNQUFBLEtBRUFzRSxJQUNBaEIsRUFBQXFCLFNBQUFELEdBR0EsVUFGQTlMLEVBQUFnTSxXQUFBLGtCQUdBdEIsRUFBQXVCLE1BQUFqUSxFQUFBMk4sRUFBQXVDLEdBQ0FuRCxFQUFBb0QsVUFBQXpCLEdBQ0F1QixPQUNBalEsRUFBQTJOLEVBQUEzTixJQUVPZ0UsRUFBQXhHLEtBR1BrUixFQUFBdUIsTUFBQXBDLFNBQUFGLEVBQUE5QixXQUNBa0IsRUFBQXFELFlBQUExQixHQUNBdUIsT0FDQXBDLFNBQUFGLEVBQUFFLFdBRVM3SixFQUFBeEcsS0FHVHVQLEVBQUFxRCxZQUFBMUIsR0FDQXVCLE1BQUFILEdBQ0s5TCxFQUFBeEcsR0FJTCxJQUFBNlMsRUFBQXBTLEVBQUFxUyxjQUFBOVMsRUFBQSxTQUNBa1IsRUFBQTZCLFNBQUFuTyxFQUFBb08sVUFDQUMsU0FBQSxRQUNBQyxLQUFBTCxHQUNHVCxFQUFBZSxTQUFBLGFBQUFDLGlCQUNIbEMsRUFBQW1DLFdBQUFqQixFQUFBZSxTQUFBLHNCQUFBQyxlQUNBLElBQUFFLEVBQUFsQixFQUFBSSxXQUFBLFVBS0EsU0FBQWYsSUFHQVAsRUFBQXFDLGVBQUEsR0FDQXJDLEVBQUFzQyxXQUNBZixPQUNBalEsRUFBQTJOLEVBQUEzTixFQUFBZ0UsRUFBQTFNLElBQUEsaUJBRUssa0JBR0wsU0FBQThYLElBQ0FWLEVBQUFxQyxlQUFBLEdBQ0FyQyxFQUFBc0MsV0FDQWYsT0FDQWpRLEVBQUEyTixFQUFBM04sSUFFSyxrQkFyQkw4USxHQUFBcEMsRUFBQUgsS0FBQSxTQUFBdUMsR0FFQXZELEVBQUF2TSxLQUFBL0MsRUFBQXdQLGNBQUFqUSxHQUFBd0csRUFBQUssV0FBQSxLQUFBN0csR0FBQXdHLEVBQUExTSxJQUFBLGtCQUFBME0sRUFBQTFNLElBQUEsY0FzQkFvWCxFQUFBdUMsSUFBQSxhQUFBQSxJQUFBLFlBQUFBLElBQUEsWUFBQUEsSUFBQSxVQUVBckIsRUFBQXRZLElBQUEsbUJBQUEwTSxFQUFBa04sc0JBQ0F4QyxFQUFBYyxHQUFBLFlBQUFQLEdBQUFPLEdBQUEsV0FBQUosR0FBQUksR0FBQSxXQUFBUCxHQUFBTyxHQUFBLFNBQUFKLEdBR0FwTyxLQUFBbVEsYUFBQWxULEVBQUFULEdBRUF1UCxFQUFBcUUsY0FBQXBRLE9BR0F5TyxFQUFBMEIsYUFBQSxTQUFBbFQsRUFBQVQsR0FDQSxJQUFBd04sRUFBQWhLLEtBQUEyTyxRQUFBLEdBQ0EwQixFQUFBclEsS0FBQTJPLFFBQUEsR0FDQTNMLEVBQUEvRixFQUFBMk0sVUFDQWdGLEVBQUEzUixFQUFBNFIsYUFBQXJTLEdBRUE4VCxFQURBclQsRUFBQXdQLGNBQUFqUSxHQUNBNE4sTUFDQWlGLEVBQUFwUyxFQUFBcVMsY0FBQTlTLEVBQUEsU0FDQXVQLEVBQUFxRCxZQUFBcEYsR0FDQWlGLE9BQ0FzQixPQUFBRCxFQUFBRSxjQUFBRixFQUFBRyxFQUFBSCxFQUFBSSxJQUFBSixFQUFBRyxFQUFBSCxFQUFBSSxJQUFBSixFQUFBRyxFQUFBSCxFQUFBSSxNQUVHMU4sRUFBQXhHLEdBQ0h1UCxFQUFBcUQsWUFBQWlCLEdBQ0FNLE9BQ0FGLEVBQUFILEVBQUFHLEVBQ0FDLEVBQUFKLEVBQUFJLElBRUcxTixFQUFBeEcsR0FDSDZULEVBQUE5QyxNQUNBcUQsU0FBQU4sRUFBQU0sU0FDQUMsUUFBQVAsRUFBQUcsRUFBQUgsRUFBQUksR0FDQTlDLEdBQUEsS0FFQSxJQUFBa0QsRUFBQWxDLEVBQUFlLFNBQUEsU0FDQW9CLEVBQUFuQyxFQUFBZSxTQUFBLGtCQUNBcUIsRUFBQXBDLEVBQUFlLFNBQUEsYUFDQXNCLEVBQUFyQyxFQUFBZSxTQUFBLHNCQUNBTixFQUFBcFMsRUFBQXFTLGNBQUE5UyxFQUFBLFNBQ0F1UCxFQUFBbUYsY0FBQWIsRUFBQU0sTUFBQU4sRUFBQVIsY0FBa0VpQixFQUFBQyxHQUNsRUksYUFBQWxVLEVBQUEyTSxVQUNBd0gsZUFBQTVVLEVBQ0E2VSxZQUFBcFUsRUFBQW1HLFFBQUE1RyxHQUNBOFUsVUFBQWpDLEVBQ0FrQyxpQkFBQWpCLEVBQUFrQixTQUVBQyxVQUFBbkIsRUFBQW1CLFVBQ0FDLGtCQUFBcEIsRUFBQXFCLGNBQ0FDLFFBQUEzVSxFQUFBcVMsY0FBQTlTLEVBQUEsYUFFQTZULEVBQUFuQyxPQUFBbUMsRUFBQWhDLGNBQUF5QyxFQUFBeGEsSUFBQSxRQUNBK1osRUFBQWxDLGFBQUE0QyxFQUFBemEsSUFBQSxRQUNBMFQsRUFBQWtFLE9BQUFsRSxFQUFBcUUsY0FBQTJDLEVBQUExYSxJQUFBLFFBQ0EwVCxFQUFBbUUsYUFBQThDLEVBQUEzYSxJQUFBLFFBRUEwVCxFQUFBNkgsVUFDQUMsT0FBQXpDLEVBQ0F1QyxRQUFBM1UsRUFBQXFTLGNBQUE5UyxFQUFBLGFBRUF3TixFQUFBNkgsU0FBQWIsRUFBQXJCLFNBQUEsYUFBQW9DLGdCQUNBL0gsRUFBQTZGLFdBQUFvQixFQUFBdEIsU0FBQSxhQUFBb0MsZUFDQSxJQUFBeEcsRUFBQXlGLEVBQUExYSxJQUFBLFVBRUFpVixJQUFBLElBQUFBLElBQ0FBLEVBQUEsSUFHQXZCLEVBQUErRSxVQUNBeEQsWUFJQW5LLEVBQUE0USxTQUFBeEUsRUFBQXpCLEVBQUEwQixPQUVBLElBeUZBdkwsRUF6RkE4SixFQUFBdkYsUUFDQXpMLEtBQUEsTUFDQXNOLEtBQUEsV0FDQSxJQUFBMkosRUFBQSxJQUFBbEcsRUFBQTBCLE1BQ0F6TixLQUFBa1MsYUFBQUQsR0FFQUUsT0FBQSxTQUFBblAsRUFBQXZCLEVBQUFDLEVBQUFnQixHQUNBLElBQUFBLEtBQUEySixPQUFBck0sS0FBQWtNLElBQUEsQ0FJQSxJQUFBalAsRUFBQStGLEVBQUFHLFVBQ0FpUCxFQUFBcFMsS0FBQXFTLE1BQ0FDLEVBQUF0UyxLQUFBc1MsTUFDQW5HLEVBQUExSyxFQUFBbkwsSUFBQSxhQUNBaWMsR0FBQUgsRUFDQXhHLEVBQUE1SSxFQUFBMU0sSUFBQSxpQkFDQWtjLEVBQUFwUixFQUFBeUcsTUFBQW9FLEVBQUFqTSxLQUFBa00sSUFBQWxKLEVBQUFtSixFQUFBekssR0FDQStRLEVBQUF6UCxFQUFBMU0sSUFBQSxnQkF5QkEsR0F4QkEyRyxFQUFBeVYsS0FBQU4sR0FBQTlELElBQUEsU0FBQTlSLEdBQ0EsSUFBQW1XLEVBQUEsSUFBQW5GLEVBQUF2USxFQUFBVCxHQUVBK1YsR0FBQSxVQUFBM0csR0FDQStHLEVBQUFDLFVBQUEsU0FBQXhWLEdBQ0FBLEVBQUEyUyxlQUFBLEtBSUEwQyxHQUFBRSxFQUFBbkUsR0FBQSxRQUFBZ0UsR0FDQXZWLEVBQUE0VixpQkFBQXJXLEVBQUFtVyxHQUNBTCxFQUFBaEUsSUFBQXFFLEtBQ0svWixPQUFBLFNBQUFrYSxFQUFBQyxHQUNMLElBQUFKLEVBQUFQLEVBQUE1RixpQkFBQXVHLEdBQ0FKLEVBQUFwRSxXQUFBdFIsRUFBQTZWLEdBQ0FILEVBQUExQyxJQUFBLFNBQ0F3QyxHQUFBRSxFQUFBbkUsR0FBQSxRQUFBZ0UsR0FDQUYsRUFBQWhFLElBQUFxRSxHQUNBMVYsRUFBQTRWLGlCQUFBQyxFQUFBSCxLQUNLSyxPQUFBLFNBQUF4VyxHQUNMLElBQUFtVyxFQUFBUCxFQUFBNUYsaUJBQUFoUSxHQUNBOFYsRUFBQVUsT0FBQUwsS0FDS00sVUFFTDlHLEdBQUFvRyxHQUFBdFYsRUFBQXNNLFFBQUEsR0FDQSxVQUFBcUMsRUFBQSxDQUNBLElBQUFxRCxFQUFBaFMsRUFBQXdQLGNBQUEsR0FDQXpOLEVBQUErTixLQUFBbUcsSUFBQXhSLEVBQUF5UixXQUFBelIsRUFBQTBSLGFBQUEsRUFDQUMsRUFBQWpTLEVBQUE3QixLQUFBK1MsRUFBQWUsZUFBQWYsR0FDQUEsRUFBQWdCLFlBQUF0VCxLQUFBdVQsZ0JBQUF0RSxFQUFBdUUsR0FBQXZFLEVBQUF3RSxHQUFBelUsRUFBQWlRLEVBQUFwRSxXQUFBb0UsRUFBQXJFLFVBQUF5SSxFQUFBclEsSUFHQWhELEtBQUFxUyxNQUFBcFYsSUFFQW1CLFFBQUEsYUFDQW1WLGdCQUFBLFNBQUFDLEVBQUFDLEVBQUF6VSxFQUFBNkwsRUFBQUQsRUFBQTFRLEVBQUE4SSxHQUNBLElBQUEwUSxFQUFBLElBQUEzSCxFQUFBNEIsUUFDQXNCLE9BQ0F1RSxLQUNBQyxLQUNBdkUsR0FBQSxFQUNBbFEsSUFDQTZMLGFBQ0FnQyxTQUFBaEMsRUFDQUQsZUFRQSxPQUxBbUIsRUFBQW9ELFVBQUF1RSxHQUNBekUsT0FDQXBDLFNBQUFoQyxHQUFBRCxFQUFBLE1BQUFtQyxLQUFBNEcsR0FBQSxJQUVLM1EsRUFBQTlJLEdBQ0x3WixHQU1BRSxhQUFBLFNBQUFDLEVBQUE3USxHQUNBLElBQ0E4USxFQURBOVEsRUFBQUcsVUFDQXNKLGNBQUEsR0FFQSxHQUFBcUgsRUFBQSxDQUNBLElBQUFoSCxFQUFBK0csRUFBQSxHQUFBQyxFQUFBTixHQUNBdkcsRUFBQTRHLEVBQUEsR0FBQUMsRUFBQUwsR0FDQTlJLEVBQUFvQyxLQUFBZ0gsS0FBQWpILElBQUFHLEtBQ0EsT0FBQXRDLEdBQUFtSixFQUFBOVUsR0FBQTJMLEdBQUFtSixFQUFBNUUsT0FLQTlVLEVBQUEwRCxRQUFBb0UseUVDM1VBLElBQUE4UixFQUFBemUsRUFBQSw4Q0FxQkEsU0FBQTBlLEVBQUFuVSxFQUFBMFQsRUFBQUMsRUFBQXpVLEVBQUFrVixFQUFBQyxFQUFBQyxHQUtBLFNBQUFDLEVBQUEvRyxFQUFBZ0gsRUFBQUMsRUFBQUwsR0FDQSxRQUFBL1osRUFBQW1ULEVBQXVCblQsRUFBQW1hLEVBQVNuYSxJQUdoQyxHQUZBMkYsRUFBQTNGLEdBQUF1VyxHQUFBNkQsRUFFQXBhLEVBQUFtVCxHQUFBblQsRUFBQSxFQUFBbWEsR0FBQXhVLEVBQUEzRixFQUFBLEdBQUF1VyxFQUFBNVEsRUFBQTNGLEdBQUF1VyxFQUFBNVEsRUFBQTNGLEdBQUFxYSxPQUVBLFlBREFDLEVBQUF0YSxFQUFBb2EsRUFBQSxHQUtBRSxFQUFBSCxFQUFBLEVBQUFDLEVBQUEsR0FJQSxTQUFBRSxFQUFBSCxFQUFBQyxHQUNBLFFBQUFwYSxFQUFBbWEsRUFBcUJuYSxHQUFBLElBQ3JCMkYsRUFBQTNGLEdBQUF1VyxHQUFBNkQsSUFFQXBhLEVBQUEsR0FBQTJGLEVBQUEzRixHQUFBdVcsRUFBQTVRLEVBQUEzRixFQUFBLEdBQUF1VyxFQUFBNVEsRUFBQTNGLEVBQUEsR0FBQXFhLFNBSDZCcmEsTUFTN0IsU0FBQXVhLEVBQUE1VSxFQUFBNlUsRUFBQW5CLEVBQUFDLEVBQUF6VSxFQUFBa1YsR0FRQSxJQVBBLElBQUFVLEVBQUFELEVBQ0FFLE9BQUFDLFVBQ0EsRUFLQXhkLEVBQUEsRUFBQXlHLEVBQUErQixFQUFBdkksT0FBb0NELEVBQUF5RyxFQUFPekcsSUFFM0MsY0FBQXdJLEVBQUF4SSxHQUFBK1QsU0FBQSxDQUlBLElBQUEwSixFQUFBaEksS0FBQWlJLElBQUFsVixFQUFBeEksR0FBQW9aLEVBQUErQyxHQUNBbGMsRUFBQXVJLEVBQUF4SSxHQUFBZ1MsSUFDQWdDLEVBQUF4TCxFQUFBeEksR0FBQTJkLEtBQ0FDLEVBQUFILEVBQUEvVixFQUFBekgsRUFBQXdWLEtBQUFnSCxNQUFBL1UsRUFBQXpILEVBQUErVCxJQUFBdE0sRUFBQXpILEVBQUErVCxHQUFBeUosS0FBQWhJLEtBQUFpSSxJQUFBbFYsRUFBQXhJLEdBQUFtWixFQUFBK0MsR0FFQW1CLEdBQUFPLEdBQUFOLElBRUFNLEVBQUFOLEVBQUEsS0FHQUQsR0FBQU8sR0FBQU4sSUFFQU0sRUFBQU4sRUFBQSxJQUdBOVUsRUFBQXhJLEdBQUFtWixFQUFBK0MsRUFBQTBCLEVBQUFoQixFQUNBVSxFQUFBTSxHQTFEQXBWLEVBQUFxVixLQUFBLFNBQUEzWixFQUFBQyxHQUNBLE9BQUFELEVBQUFrVixFQUFBalYsRUFBQWlWLElBbUVBLElBTkEsSUFDQTZELEVBREFhLEVBQUEsRUFFQTlMLEVBQUF4SixFQUFBdkksT0FDQThkLEtBQ0FDLEtBRUFoZSxFQUFBLEVBQWlCQSxFQUFBZ1MsRUFBU2hTLEtBQzFCaWQsRUFBQXpVLEVBQUF4SSxHQUFBb1osRUFBQTBFLEdBRUEsR0FDQWYsRUFBQS9jLEVBQUFnUyxHQUFBaUwsR0FHQWEsRUFBQXRWLEVBQUF4SSxHQUFBb1osRUFBQTVRLEVBQUF4SSxHQUFBa2QsT0FHQUosRUFBQWdCLEVBQUEsR0FDQVgsRUFBQW5MLEVBQUEsRUFBQThMLEVBQUFoQixHQUdBLElBQUE5YyxFQUFBLEVBQWlCQSxFQUFBZ1MsRUFBU2hTLElBQzFCd0ksRUFBQXhJLEdBQUFvWixHQUFBK0MsRUFDQTZCLEVBQUF4ZixLQUFBZ0ssRUFBQXhJLElBRUErZCxFQUFBdmYsS0FBQWdLLEVBQUF4SSxJQUlBb2QsRUFBQVcsR0FBQSxFQUFBN0IsRUFBQUMsRUFBQXpVLEVBQUFrVixHQUNBUSxFQUFBWSxHQUFBLEVBQUE5QixFQUFBQyxFQUFBelUsRUFBQWtWLEdBbUhBOVosRUFBQTBELFFBL0VBLFNBQUFrRixFQUFBaEUsRUFBQW1WLEVBQUFDLEdBQ0EsSUFFQVosRUFDQUMsRUFIQXhXLEVBQUErRixFQUFBRyxVQUNBb1MsS0FHQUMsR0FBQSxFQUNBdlksRUFBQTJFLEtBQUEsU0FBQXBGLEdBQ0EsSUFXQWlaLEVBQ0FDLEVBQ0FsRixFQUNBaUIsRUFkQTlFLEVBQUExUCxFQUFBd1AsY0FBQWpRLEdBQ0FvUyxFQUFBM1IsRUFBQTRSLGFBQUFyUyxHQUNBc1UsRUFBQWxDLEVBQUFlLFNBQUEsU0FFQWdHLEVBQUE3RSxFQUFBeGEsSUFBQSxhQUFBc1ksRUFBQXRZLElBQUEsMkJBQ0EwYSxFQUFBcEMsRUFBQWUsU0FBQSxhQUNBaUcsRUFBQTVFLEVBQUExYSxJQUFBLFVBQ0F1ZixFQUFBN0UsRUFBQTFhLElBQUEsV0FDQXNXLEdBQUFELEVBQUE5QixXQUFBOEIsRUFBQUUsVUFBQSxFQUNBQyxFQUFBQyxLQUFBQyxJQUFBSixHQUNBSyxFQUFBRixLQUFBRyxJQUFBTixHQUtBNEcsRUFBQTdHLEVBQUE2RyxHQUNBQyxFQUFBOUcsRUFBQThHLEdBQ0EsSUFBQXFDLEVBQUEsV0FBQUgsR0FBQSxVQUFBQSxFQUVBLGNBQUFBLEVBQ0FGLEVBQUE5SSxFQUFBNkcsR0FDQWtDLEVBQUEvSSxFQUFBOEcsR0FDQWhDLEVBQUEsYUFDSyxDQUNMLElBQUFzRSxHQUFBRCxHQUFBbkosRUFBQTNOLEVBQUEyTixFQUFBdUMsSUFBQSxFQUFBcEMsRUFBQUgsRUFBQTNOLEVBQUE4TixHQUFBMEcsRUFDQXdDLEdBQUFGLEdBQUFuSixFQUFBM04sRUFBQTJOLEVBQUF1QyxJQUFBLEVBQUFqQyxFQUFBTixFQUFBM04sRUFBQWlPLEdBQUF3RyxFQUlBLEdBSEFnQyxFQUFBTSxFQUFBLEVBQUFqSixFQUNBNEksRUFBQU0sRUFBQSxFQUFBL0ksR0FFQTZJLEVBQUEsQ0FFQSxJQUFBRyxFQUFBRixFQUFBakosR0FBQThJLEVBQUE1VyxFQUFBMk4sRUFBQTNOLEdBQ0FrWCxFQUFBRixFQUFBL0ksR0FBQTJJLEVBQUE1VyxFQUFBMk4sRUFBQTNOLEdBQ0FtWCxFQUFBRixHQUFBbkosRUFBQSxRQUFBK0ksRUFFQUosRUFBQVUsR0FBQXJKLEVBQUEsUUFDQTRJLEVBRkFRLEVBR0ExRixJQUFBdUYsRUFBQUMsSUFBQUMsRUFBQUMsSUFBQUMsRUFIQUQsSUFNQXpFLEVBQUFxRSxFQUFBLFNBQUFoSixFQUFBLGlCQUdBLElBQUFzSixFQUFBdEYsRUFBQXVGLFVBQ0FDLEVBQUF4RixFQUFBeGEsSUFBQSxVQUFBd1csRUFBQSxHQUFBRixFQUFBRyxLQUFBNEcsSUFBQS9HLEVBQUEsRUFDQW1CLEVBQUEvSyxFQUFBdVQsa0JBQUEvWixFQUFBLFdBQUFTLEVBQUFtRyxRQUFBNUcsR0FDQWdhLEVBQUF4QyxFQUFBeUMsZ0JBQUExSSxFQUFBcUksRUFBQTNFLEVBQUEsT0FDQStELElBQUFjLEVBQ0EzSixFQUFBdkMsT0FDQXFHLEVBQUFnRixFQUNBL0UsRUFBQWdGLEVBQ0FySyxTQUFBc0ssRUFDQW5CLE9BQUFnQyxFQUFBaEMsT0FDQWxMLElBQUFzTSxFQUNBWCxLQUFBWSxFQUNBckYsYUFDQWlCLFlBQ0FFLGNBQUEsU0FDQWYsU0FBQTBGLEVBQ0E5RSxPQUFBc0UsR0FHQUEsR0FDQVAsRUFBQXpmLEtBQUE2VyxFQUFBdkMsVUFJQW9MLEdBQUF4UyxFQUFBMU0sSUFBQSxzQkEzR0EsU0FBQWlmLEVBQUEvQixFQUFBQyxFQUFBelUsRUFBQW1WLEVBQUFDLEdBSUEsSUFIQSxJQUFBc0MsS0FDQUMsS0FFQXJmLEVBQUEsRUFBaUJBLEVBQUFpZSxFQUFBaGUsT0FBNEJELElBQzdDaWUsRUFBQWplLEdBQUFtWixFQUFBK0MsRUFDQWtELEVBQUE1Z0IsS0FBQXlmLEVBQUFqZSxJQUVBcWYsRUFBQTdnQixLQUFBeWYsRUFBQWplLElBT0EsSUFIQTJjLEVBQUEwQyxFQUFBbkQsRUFBQUMsRUFBQXpVLEVBQUEsRUFBQW1WLEVBQUFDLEdBQ0FILEVBQUF5QyxFQUFBbEQsRUFBQUMsRUFBQXpVLEdBQUEsRUFBQW1WLEVBQUFDLEdBRUE5YyxFQUFBLEVBQWlCQSxFQUFBaWUsRUFBQWhlLE9BQTRCRCxJQUFBLENBQzdDLElBQUFrWixFQUFBK0UsRUFBQWplLEdBQUFrWixXQUVBLEdBQUFBLEVBQUEsQ0FDQSxJQUFBb0csRUFBQXBHLEVBQUEsTUFBQUEsRUFBQSxNQUVBK0UsRUFBQWplLEdBQUFtWixFQUFBK0MsRUFDQWhELEVBQUEsTUFBQStFLEVBQUFqZSxHQUFBbVosRUFBQSxFQUVBRCxFQUFBLE1BQUErRSxFQUFBamUsR0FBQW1aLEVBQUEsRUFHQUQsRUFBQSxNQUFBQSxFQUFBLE1BQUErRSxFQUFBamUsR0FBQW9aLEVBQ0FGLEVBQUEsTUFBQUEsRUFBQSxNQUFBb0csSUFnRkFDLENBQUF0QixFQUFBL0IsRUFBQUMsRUFBQXpVLEVBQUFtVixFQUFBQyx5RUNoT0EsSUFBQTBDLEVBQUF2aEIsRUFBQSw2Q0FFQXdoQixFQUFBRCxFQUFBQyxhQUNBQyxFQUFBRixFQUFBRSxVQUVBMUcsRUFBQS9hLEVBQUEsdURBRUE2TCxFQUFBN0wsRUFBQSwyQ0FvQkEwaEIsRUFBQSxFQUFBbEssS0FBQTRHLEdBQ0F1RCxFQUFBbkssS0FBQTRHLEdBQUEsSUEwSEF2WixFQUFBMEQsUUF4SEEsU0FBQXdFLEVBQUFiLEVBQUFDLEVBQUFnQixHQUNBakIsRUFBQTBWLGlCQUFBN1UsRUFBQSxTQUFBVSxHQUNBLElBQUEvRixFQUFBK0YsRUFBQUcsVUFDQWdHLEVBQUFsTSxFQUFBbU0sYUFBQSxTQUNBc0IsRUFBQTFILEVBQUExTSxJQUFBLFVBQ0FxVSxFQUFBM0gsRUFBQTFNLElBQUEsVUFFQThLLEVBQUE2RSxRQUFBMEUsS0FDQUEsR0FBQSxFQUFBQSxJQUdBdkosRUFBQTZFLFFBQUF5RSxLQUNBQSxTQUdBLElBQUFlLEVBQUEvSixFQUFBeVIsV0FDQXFCLEVBQUE5UyxFQUFBMFIsWUFDQWdFLEVBQUFySyxLQUFBc0ssSUFBQTVMLEVBQUErSSxHQUNBaEIsRUFBQXVELEVBQUFyTSxFQUFBLEdBQUFlLEdBQ0FnSSxFQUFBc0QsRUFBQXJNLEVBQUEsR0FBQThKLEdBQ0F0RixFQUFBNkgsRUFBQXBNLEVBQUEsR0FBQXlNLEVBQUEsR0FDQXBZLEVBQUErWCxFQUFBcE0sRUFBQSxHQUFBeU0sRUFBQSxHQUNBdk0sR0FBQTdILEVBQUExTSxJQUFBLGNBQUE0Z0IsRUFDQXBNLEVBQUE5SCxFQUFBMU0sSUFBQSxZQUFBNGdCLEVBQ0FJLEVBQUEsRUFDQXJhLEVBQUEyRSxLQUFBdUgsRUFBQSxTQUFBM1MsSUFDQStnQixNQUFBL2dCLElBQUE4Z0IsTUFFQSxJQUFBRSxFQUFBdmEsRUFBQXdhLE9BQUF0TyxHQUVBdU8sRUFBQTNLLEtBQUE0RyxJQUFBNkQsR0FBQUYsR0FBQSxFQUNBMU0sRUFBQTVILEVBQUExTSxJQUFBLGFBQ0FxaEIsRUFBQTNVLEVBQUExTSxJQUFBLFlBQ0E2VSxFQUFBbkksRUFBQTFNLElBQUEsb0JBRUFzaEIsRUFBQTNhLEVBQUE0YSxjQUFBMU8sR0FDQXlPLEVBQUEsS0FFQSxJQUFBRSxFQUFBYixFQUNBYyxFQUFBLEVBQ0FDLEVBQUFuTixFQUNBcUosRUFBQXRKLEVBQUEsS0ErQ0EsR0E5Q0EzTixFQUFBMkUsS0FBQXVILEVBQUEsU0FBQTNTLEVBQUFnRyxHQUNBLElBQUF5YixFQUVBLEdBQUFWLE1BQUEvZ0IsR0FDQXlHLEVBQUFpYixjQUFBMWIsR0FDQXliLE1BQUFFLElBQ0F0TixXQUFBc04sSUFDQXRMLFNBQUFzTCxJQUNBdk4sWUFDQTRJLEtBQ0FDLEtBQ0F2RSxLQUNBbFEsRUFBQTJZLEVBQUFRLElBQUFuWixRQVRBLEVBZ0JBaVosRUFEQSxTQUFBTixFQUNBLElBQUFILEdBQUFyTSxFQUFBdU0sRUFBQWxoQixFQUFBa2hCLEVBRUFULEVBQUFLLEdBR0F4TSxHQUNBbU4sRUFBQW5OLEVBQ0FnTixHQUFBaE4sR0FFQWlOLEdBQUF2aEIsRUFHQSxJQUFBcVcsRUFBQW1MLEVBQUE5RCxFQUFBK0QsRUFDQWhiLEVBQUFpYixjQUFBMWIsR0FDQXliLFFBQ0FwTixXQUFBbU4sRUFDQW5MLFdBQ0FqQyxZQUNBNEksS0FDQUMsS0FDQXZFLEtBQ0FsUSxFQUFBMlksRUFBQVgsRUFBQXhnQixFQUFBb2hCLEdBQUExSSxFQUFBbFEsUUFFQWdaLEVBQUFuTCxLQUlBaUwsRUFBQWIsR0FBQUssRUFHQSxHQUFBUSxHQUFBLE1BQ0EsSUFBQUcsRUFBQWhCLEVBQUFLLEVBQ0FyYSxFQUFBMkUsS0FBQXVILEVBQUEsU0FBQTNTLEVBQUFnRyxHQUNBLElBQUErYSxNQUFBL2dCLEdBQUEsQ0FDQSxJQUFBbVcsRUFBQTFQLEVBQUF3UCxjQUFBalEsR0FDQW1RLEVBQUFzTCxRQUNBdEwsRUFBQTlCLGFBQUFxSixFQUFBMVgsRUFBQXliLEVBQ0F0TCxFQUFBRSxTQUFBaEMsRUFBQXFKLEdBQUExWCxFQUFBLEdBQUF5YixVQUlBUCxFQUFBSSxFQUFBQyxFQUNBQyxFQUFBbk4sRUFDQTVOLEVBQUEyRSxLQUFBdUgsRUFBQSxTQUFBM1MsRUFBQWdHLEdBQ0EsSUFBQSthLE1BQUEvZ0IsR0FBQSxDQUNBLElBQUFtVyxFQUFBMVAsRUFBQXdQLGNBQUFqUSxHQUNBeWIsRUFBQXRMLEVBQUFzTCxRQUFBbk4sSUFBQXRVLEVBQUFraEIsRUFDQS9LLEVBQUE5QixXQUFBbU4sRUFDQXJMLEVBQUFFLFNBQUFtTCxFQUFBOUQsRUFBQStELEVBQ0FELEdBQUE5RCxFQUFBK0QsS0FNQTNILEVBQUF0TixFQUFBaEUsRUFBQXlNLEVBQUErSSxrRkNsSkEsSUFBQWhPLEVBQUFqUixFQUFBLDJDQUVBNmlCLEVBQUE1UixFQUFBNFIsU0FDQTVJLEVBQUFoSixFQUFBZ0osU0FDQS9JLEVBQUFELEVBQUFDLE9BQ0E3RSxFQUFBNEUsRUFBQTVFLEtBRUF5VyxFQUFBOWlCLEVBQUEsNkNBRUF3VyxFQUFBeFcsRUFBQSw4Q0FFQStpQixFQUFBL2lCLEVBQUEsNkNBRUF1aEIsRUFBQXZoQixFQUFBLDZDQUVBZ2pCLEVBQUF6QixFQUFBeUIsbUJBQ0FDLEVBQUExQixFQUFBMEIsVUFJQUMsRUFGQWxqQixFQUFBLDZDQUVBa2pCLGFBRUFDLEVBQUFuakIsRUFBQSw2Q0FJQW9qQixFQUZBcGpCLEVBQUEsNkNBRUFxakIsZUFvQkFqRixFQUFBNUcsS0FBQTRHLEdBRUEsU0FBQWtGLEVBQUFwVSxHQUNBLElBQUFxVSxHQUNBQyxjQUFBdFUsRUFBQTVCLFVBR0EsT0FEQWlXLEVBQUFyVSxFQUFBNUIsU0FBQSxTQUFBNEIsRUFBQXVVLGVBQ0FGLEVBMENBLElBQUFHLEVBQUEsU0FBQXhVLEVBQUFWLEdBSUEvRCxLQUFBK0QsTUFLQS9ELEtBQUF5RSxZQUVBK0ssRUFBQXpMLEdBQ0FtVixZQUFBLEVBQ0FDLGNBQUEsRUFDQUMsY0FBQSxFQUNBQyxlQUFBLEVBQ0FDLFFBQUEsSUFNQXRaLEtBQUFzUyxNQUFBLElBQUF2RyxFQUFBMEIsTUFFQSxJQUFBOEwsRUFBQSxJQUFBeE4sRUFBQTBCLE9BQ0FwQyxTQUFBdEgsRUFBQXNILFNBQUE1USxRQUNBbVcsU0FBQTdNLEVBQUE2TSxXQUlBMkksRUFBQUMsa0JBQ0F4WixLQUFBeVosV0FBQUYsRUFBQUcsVUFDQTFaLEtBQUEyWixXQUFBSixHQUdBTixFQUFBNWtCLFdBQ0FtTixZQUFBeVgsRUFDQVcsV0FBQSxTQUFBempCLEdBQ0EsUUFBQTBqQixFQUFBMWpCLElBRUFtWSxJQUFBLFNBQUFuWSxHQUNBMGpCLEVBQUExakIsR0FBQTVCLEtBQUF5TCxPQUVBOFosU0FBQSxXQUNBLE9BQUE5WixLQUFBc1MsUUFHQSxJQUFBdUgsR0FJQUUsU0FBQSxXQUNBLElBQUFoVyxFQUFBL0QsS0FBQStELElBQ0FVLEVBQUF6RSxLQUFBeUUsVUFFQSxHQUFBQSxFQUFBbk8sSUFBQSxrQkFJQSxJQUFBc2hCLEVBQUE1WCxLQUFBeUUsVUFBQXVWLEtBQUFDLFlBQ0FDLEVBQUFsYSxLQUFBeVosV0FDQVUsR0FBQXZDLEVBQUEsTUFDQXdDLEdBQUF4QyxFQUFBLE1BRUFzQyxJQUNBdkIsRUFBQXdCLElBQUFELEdBQ0F2QixFQUFBeUIsSUFBQUYsSUFHQSxJQUFBMU8sRUFBQS9FLEdBQ0E0VCxRQUFBLFNBQ0s1VixFQUFBa0wsU0FBQSxzQkFBQW9DLGdCQUNML1IsS0FBQXNTLE1BQUFoRSxJQUFBLElBQUF2QyxFQUFBdU8sS0FBQXZPLEVBQUF3TyxzQkFFQUMsS0FBQSxPQUNBdkwsT0FDQThHLEdBQUFvRSxFQUFBLEdBQ0FuRSxHQUFBbUUsRUFBQSxHQUNBbEUsR0FBQW1FLEVBQUEsR0FDQWxFLEdBQUFrRSxFQUFBLElBRUF6SixNQUFBbkYsRUFDQWlQLHVCQUFBMVcsRUFBQTBXLHdCQUFBLEVBQ0FuQixRQUFBLEVBQ0ExTCxHQUFBLE1BRUEsSUFBQThNLEVBQUFqVyxFQUFBbk8sSUFBQSxtQkFDQXFrQixFQUFBbFcsRUFBQW5PLElBQUEsdUJBQ0Fza0IsRUFBQW5XLEVBQUFuTyxJQUFBLDRCQU1BLEdBSkEsaUJBQUFza0IsSUFDQUEsU0FHQSxNQUFBRixFQUFBLENBQ0EsaUJBQUFBLElBRUFBLFNBR0EsaUJBQUFDLEdBQUEsaUJBQUFBLElBRUFBLFNBR0EsSUFBQUUsRUFBQUYsRUFBQSxHQUNBRyxFQUFBSCxFQUFBLEdBQ0EvWSxJQUNBd0osT0FBQXJILEVBQUE2TSxTQUFBN0QsS0FBQTRHLEdBQUEsRUFDQXhHLE9BQUF5TixFQUFBLEdBQ0E1YixFQUFBLElBRUFvTSxPQUFBckgsRUFBQTZNLFNBQUE3RCxLQUFBNEcsR0FBQSxFQUNBeEcsT0FBQXlOLEVBQUEsR0FDQTViLEVBQUErTixLQUFBZ0gsTUFBQW9HLEVBQUEsR0FBQUMsRUFBQSxLQUFBRCxFQUFBLEdBQUFDLEVBQUEsS0FBQUQsRUFBQSxHQUFBQyxFQUFBLEtBQUFELEVBQUEsR0FBQUMsRUFBQSxPQUNPLFNBQUF2RyxFQUFBa0gsR0FDUCxZQUFBTCxFQUFBSyxJQUFBLE1BQUFMLEVBQUFLLEdBQUEsQ0FDQSxJQUFBQyxFQUFBdkMsRUFBQWlDLEVBQUFLLElBQUFGLEVBQUEsR0FBQUMsRUFBQSxFQUFBRCxFQUFBQyxFQUFBdFAsRUFBQXNHLFFBQUEsR0FFQTlTLEVBQUE2VSxFQUFBN1UsRUFBQTZVLEVBQUExRyxPQUNBOE4sR0FBQWQsRUFBQSxHQUFBbmIsRUFBQStOLEtBQUFDLElBQUFqSixFQUFBNk0sVUFBQXVKLEVBQUEsR0FBQW5iLEVBQUErTixLQUFBRyxJQUFBbkosRUFBQTZNLFdBQ0FvSyxFQUFBek4sTUFDQXFELFNBQUFpRCxFQUFBekksT0FDQUMsU0FBQTRQLEVBQ0EzQixRQUFBLElBRUF0WixLQUFBc1MsTUFBQWhFLElBQUEwTSxLQUVPaGIsU0FPUGtiLGNBQUEsV0FDQSxJQUFBelcsRUFBQXpFLEtBQUF5RSxVQUNBVixFQUFBL0QsS0FBQStELElBQ0FvWCxFQWlRQSxTQUFBQyxFQUFBM1csRUFBQVYsR0FDQSxJQUFBaVcsRUFBQXZWLEVBQUF1VixLQUVBLElBQUF2VixFQUFBbk8sSUFBQSxrQkFBQTBqQixFQUFBcUIsTUFBQUMsVUFDQSxPQVlBLElBVEEsSUFBQUMsRUFBQTlXLEVBQUFrTCxTQUFBLFlBQ0E2TCxFQUFBRCxFQUFBNUwsU0FBQSxhQUNBOEwsRUFBQUYsRUFBQWpsQixJQUFBLFVBQ0FvbEIsRUFBQTFCLEVBQUEyQixpQkFDQXhCLEtBQ0FDLEtBQ0FGLEVBQUFrQixFQUFBM0IsV0FDQTBCLEtBRUE3akIsRUFBQSxFQUFpQkEsRUFBQW9rQixFQUFBbmtCLE9BQXdCRCxJQUFBLENBQ3pDLElBQUFza0IsRUFBQUYsRUFBQXBrQixHQUFBdWtCLE1BQ0ExQixFQUFBLEdBQUF5QixFQUNBekIsRUFBQSxLQUNBQyxFQUFBLEdBQUF3QixFQUNBeEIsRUFBQSxHQUFBclcsRUFBQXFWLGNBQUFxQyxFQUVBdkIsSUFDQXZCLEVBQUF3QixJQUFBRCxHQUNBdkIsRUFBQXlCLElBQUFGLElBSUEsSUFBQTRCLEVBQUEsSUFBQS9QLEVBQUF1TyxLQUFBdk8sRUFBQXdPLHNCQUVBQyxLQUFBLFFBQUFrQixFQUFBcGtCLEdBQUF5a0IsVUFDQTlNLE9BQ0E4RyxHQUFBb0UsRUFBQSxHQUNBbkUsR0FBQW1FLEVBQUEsR0FDQWxFLEdBQUFtRSxFQUFBLEdBQ0FsRSxHQUFBa0UsRUFBQSxJQUVBekosTUFBQW5CLEVBQUFnTSxFQUFBekosZ0JBQ0FELE9BQUFyTixFQUFBbk8sSUFBQSw4QkFFQXNYLEdBQUEsRUFDQTBMLFFBQUEsS0FFQThCLEVBQUE5SSxNQUFBaEUsSUFBQXdOLEdBQ0FYLEVBQUFybEIsS0FBQWdtQixHQUdBLE9BQUFYLEVBalRBYSxDQUFBaGMsS0FBQXlFLEVBQUFWLElBeUxBLFNBQUFVLEVBQUF3WCxFQUFBZCxHQUlBLElBQUFlLEVBQUF6WCxFQUFBbk8sSUFBQSwwQkFDQTZsQixFQUFBMVgsRUFBQW5PLElBQUEsMEJBR0EybEIsUUFDQWQsUUFDQSxJQUFBaUIsRUFBQUgsRUFBQSxHQUNBSSxFQUFBSixFQUFBLEdBQ0FLLEVBQUFMLElBQUExa0IsT0FBQSxHQUNBZ2xCLEVBQUFOLElBQUExa0IsT0FBQSxHQUNBaWxCLEVBQUFyQixFQUFBLEdBQ0FzQixFQUFBdEIsRUFBQSxHQUNBdUIsRUFBQXZCLElBQUE1akIsT0FBQSxHQUNBb2xCLEVBQUF4QixJQUFBNWpCLE9BQUEsSUFFQSxJQUFBMmtCLEdBQ0FVLEVBQUFSLEdBQ0FRLEVBQUFKLElBQ0dLLEVBQUFULEVBQUFDLEtBQ0hILEdBQ0FVLEVBQUFQLEdBQ0FPLEVBQUFILEtBRUFHLEVBQUFSLEdBQ0FRLEVBQUFKLE1BSUEsSUFBQUwsR0FDQVMsRUFBQU4sR0FDQU0sRUFBQUYsSUFDR0csRUFBQU4sRUFBQUQsS0FDSEgsR0FDQVMsRUFBQUwsR0FDQUssRUFBQUQsS0FFQUMsRUFBQU4sR0FDQU0sRUFBQUYsS0FoT0FJLENBQUFyWSxFQWtUQSxTQUFBMlcsRUFBQTNXLEVBQUFWLEdBQ0EsSUFBQWlXLEVBQUF2VixFQUFBdVYsS0FHQSxJQUZBNUIsRUFBQXJVLEVBQUFnWixjQUFBdFksRUFBQW5PLElBQUEsb0JBRUEwakIsRUFBQXFCLE1BQUFDLFVBQ0EsT0FHQSxJQUFBeEssRUFBQXJNLEVBQUFrTCxTQUFBLGFBQ0FxTixFQUFBbE0sRUFBQXhhLElBQUEsVUFDQTJtQixFQUFBakQsRUFBQWtELGdCQUVBQyxHQUFBL0UsRUFBQXJVLEVBQUF1UyxZQUFBeEYsRUFBQXhhLElBQUEsZUFBQXFkLEVBQUEsSUFDQXJELEVBQUE4TSxFQUFBclosRUFBQTZNLFNBQUF1TSxFQUFBcFosRUFBQXNWLGdCQUNBZ0UsRUFBQTVZLEVBQUE2WSxlQUFBLEdBQ0FyQixLQUNBM0MsRUFBQWlFLEVBQUE5WSxHQUNBK1ksRUFBQS9ZLEVBQUFuTyxJQUFBLGdCQWtEQSxPQWpEQXNMLEVBQUFxYixFQUFBLFNBQUFRLEVBQUExQyxHQUNBLElBQUFnQixFQUFBMEIsRUFBQTFCLFVBQ0EyQixFQUFBRCxFQUFBQyxlQUNBQyxFQUFBRixFQUFBRSxTQUNBQyxFQUFBOU0sRUFFQXVNLEtBQUF0QixJQUFBc0IsRUFBQXRCLEdBQUE4QixZQUNBRCxFQUFBLElBQUF0RixFQUFBK0UsRUFBQXRCLEdBQUE4QixVQUFBL00sRUFBQXJNLEVBQUFoRCxVQUdBLElBQUFxYyxFQUFBRixFQUFBRyxnQkFBQXRaLEVBQUFuTyxJQUFBLDRCQUVBMmtCLEdBREFqQixFQUFBZ0UsWUFBQWpDLEdBQ0FoWSxFQUFBbVYsWUFBQW5WLEVBQUFzVixlQUFBMkQsR0FDQWlCLEVBQUEsSUFBQWxTLEVBQUFpQyxNQUVBd00sS0FBQSxTQUFBdUIsRUFDQTFRLFNBQUE0UCxFQUNBckssU0FBQU4sRUFBQU0sU0FDQTBJLFNBQ0ExTCxHQUFBLEtBRUE3QixFQUFBbVMsYUFBQUQsRUFBQXROLE1BQUFpTixHQUNBN1AsS0FBQTJQLEVBQ0FqTSxVQUFBbU0sRUFBQTVPLFdBQUEsYUFBQXNCLEVBQUFtQixVQUNBQyxrQkFBQWtNLEVBQUE1TyxXQUFBLHFCQUFBNE8sRUFBQTVPLFdBQUEsZ0JBQUFzQixFQUFBb0Isa0JBQ0F5TSxTQUFBLG1CQUFBTCxJQU9BLGFBQUE5RCxFQUFBaGYsS0FBQTJpQixFQUFBLFVBQUEzRCxFQUFBaGYsS0FBQStnQixFQUFBLEdBQUFBLEVBQUFoQixHQUFBK0MsSUFHQU4sSUFDQVMsRUFBQW5GLFVBQUFELEVBQUFwVSxHQUNBd1osRUFBQW5GLFVBQUFzRixXQUFBLFlBQ0FILEVBQUFuRixVQUFBdGlCLE1BQUFtbkIsR0FJQXZDLEVBQUF6QixXQUFBckwsSUFBQTJQLEdBRUFBLEVBQUF6RSxrQkFDQXlDLEVBQUFubUIsS0FBQW1vQixHQUNBN0MsRUFBQTlJLE1BQUFoRSxJQUFBMlAsR0FDQUEsRUFBQUksdUJBRUFwQyxFQXRYQXFDLENBQUF0ZSxLQUFBeUUsRUFBQVYsR0FDQW9YLElBTUFvRCxTQUFBLFdBQ0EsSUFBQXhhLEVBQUEvRCxLQUFBK0QsSUFDQVUsRUFBQXpFLEtBQUF5RSxVQUNBdE8sRUFBQWlpQixFQUFBclUsRUFBQXdhLFNBQUE5WixFQUFBbk8sSUFBQSxTQUVBLEdBQUFILEVBQUEsQ0FJQSxJQVNBbWEsRUFPQWtPLEVBaEJBQyxFQUFBaGEsRUFBQW5PLElBQUEsZ0JBQ0E2aUIsRUFBQXBWLEVBQUFvVixjQUNBdUYsRUFBQWphLEVBQUFrTCxTQUFBLGlCQUNBZ1AsRUFBQWxhLEVBQUFuTyxJQUFBLGNBQ0FzaEIsRUFBQTVYLEtBQUF5RSxVQUFBdVYsS0FBQUMsWUFDQTJFLEVBQUFoSCxFQUFBLEdBQUFBLEVBQUEsUUFDQXFELEdBQUEsVUFBQXdELEVBQUE3RyxFQUFBLEdBQUFnSCxFQUFBRCxFQUFBLFFBQUFGLEVBQUE3RyxFQUFBLEdBQUFnSCxFQUFBRCxHQUFBL0csRUFBQSxHQUFBQSxFQUFBLE1BRUFpSCxFQUFBSixHQUFBMWEsRUFBQW1WLFlBQUFDLEVBQUF3RixFQUFBLEdBRUFHLEVBQUFyYSxFQUFBbk8sSUFBQSxjQUVBLE1BQUF3b0IsSUFDQUEsSUFBQW5MLEVBQUEsS0FLQWtMLEVBQUFKLEdBQ0FuTyxFQUFBOE0sRUFBQXJaLEVBQUE2TSxTQUFBLE1BQUFrTyxJQUFBL2EsRUFBQTZNLFNBQ0F1SSxJQUVBN0ksRUE4R0EsU0FBQXZNLEVBQUFnYixFQUFBQyxFQUFBcEgsR0FDQSxJQUNBbkcsRUFDQUMsRUFGQXVOLEVBQUF6RyxFQUFBd0csRUFBQWpiLEVBQUE2TSxVQUdBc08sRUFBQXRILEVBQUEsR0FBQUEsRUFBQSxHQUNBdUgsRUFBQSxVQUFBSixJQUFBRyxHQUFBLFVBQUFILEdBQUFHLEVBRUEzRyxFQUFBMEcsRUFBQXRMLEVBQUEsSUFDQWpDLEVBQUF5TixFQUFBLGVBQ0ExTixFQUFBLFVBQ0c4RyxFQUFBMEcsRUFBQSxJQUFBdEwsSUFDSGpDLEVBQUF5TixFQUFBLGVBQ0ExTixFQUFBLFdBRUFDLEVBQUEsU0FHQUQsRUFEQXdOLEVBQUEsSUFBQXRMLEdBQUFzTCxFQUFBdEwsRUFBQSxFQUNBd0wsRUFBQSxlQUVBQSxFQUFBLGdCQUlBLE9BQ0F2TyxTQUFBcU8sRUFDQXhOLFlBQ0FDLHFCQXhJQTBOLENBQUFyYixFQUFBMGEsRUFBQUssR0FBQSxFQUFBbEgsR0FHQSxPQUZBNEcsRUFBQXphLEVBQUF5YSwwQkFHQUEsRUFBQXpSLEtBQUFpSSxJQUFBd0osRUFBQXpSLEtBQUFHLElBQUFvRCxFQUFBTSxZQUNBeU8sU0FBQWIsT0FBQSxRQUlBLElBQUFjLEVBQUFaLEVBQUFySSxVQUNBa0osRUFBQTlhLEVBQUFuTyxJQUFBLHVCQUNBa3BCLEVBQUFELEVBQUFDLFNBQ0FDLEVBQUFySCxFQUFBclUsRUFBQTJiLHFCQUFBSCxFQUFBRSxTQUFBakIsR0FHQW1CLEVBQUEsTUFBQUgsR0FBQSxNQUFBQyxFQUFBcEgsRUFBQXVILGFBQUF6cEIsRUFBQXNwQixFQUFBSCxFQUFBRSxHQUNBSyxRQUFBLEVBQ0FDLFlBQUFQLEVBQUFPLGNBQ0szcEIsRUFDTDRwQixFQUFBdGIsRUFBQW5PLElBQUEsY0FDQXVNLEVBQUE0QixFQUFBNUIsU0FDQW1kLEdBQ0FqSCxjQUFBbFcsRUFDQTFNLE9BQ0EwVCxPQUFBLFNBRUFtVyxFQUFBbmQsRUFBQSxTQUFBNEIsRUFBQXVVLGVBQ0EsSUFBQWlGLEVBQUEsSUFBQWxTLEVBQUFpQyxNQUVBd00sS0FBQSxPQUNBeUYsV0FBQTlwQixFQUNBK3BCLGdCQUFBUCxFQUNBdFUsU0FBQTRQLEVBQ0FySyxTQUFBTixFQUFBTSxTQUNBMEksT0FBQWlFLEVBQUE5WSxHQUNBbUosR0FBQSxFQUNBdVMsUUFBQUosS0FBQTVWLEtBQUExRCxHQUNBeEcsUUFBQTlKLEVBQ0FpcUIsVUFBQSxXQUNBLE9BQUFqcUIsR0FFQTZwQixtQkFDT0QsR0FBQSxPQUVQaFUsRUFBQW1TLGFBQUFELEVBQUF0TixNQUFBK04sR0FDQTNRLEtBQUE0UixFQUNBTCxXQUNBbkIsU0FBQU8sRUFBQVgsZ0JBQUF0WixFQUFBbk8sSUFBQSw0QkFDQW1iLFVBQUFuQixFQUFBbUIsVUFDQUMsa0JBQUFwQixFQUFBb0Isb0JBR0FqTixFQUFBbk8sSUFBQSxrQkFDQTJuQixFQUFBbkYsVUFBQUQsRUFBQXBVLEdBQ0F3WixFQUFBbkYsVUFBQXNGLFdBQUEsV0FDQUgsRUFBQW5GLFVBQUEzaUIsUUFJQTZKLEtBQUEyWixXQUFBckwsSUFBQTJQLEdBRUFBLEVBQUF6RSxrQkFDQXhaLEtBQUFzUyxNQUFBaEUsSUFBQTJQLEdBQ0FBLEVBQUFJLHdCQWlCQWpCLEVBQUFuRSxFQUFBbUUsZ0JBQUEsU0FBQWlELEVBQUFDLEVBQUFDLEdBQ0EsSUFDQTlPLEVBQ0FDLEVBRkF1TixFQUFBekcsRUFBQThILEVBQUFELEdBc0JBLE9BbEJBOUgsRUFBQTBHLElBRUF2TixFQUFBNk8sRUFBQSxpQkFDQTlPLEVBQUEsVUFDRzhHLEVBQUEwRyxFQUFBdEwsSUFFSGpDLEVBQUE2TyxFQUFBLGlCQUNBOU8sRUFBQSxXQUVBQyxFQUFBLFNBR0FELEVBREF3TixFQUFBLEdBQUFBLEVBQUF0TCxFQUNBNE0sRUFBQSxpQkFFQUEsRUFBQSxtQkFLQTNQLFNBQUFxTyxFQUNBeE4sWUFDQUMsc0JBa0NBLFNBQUE2TCxFQUFBOVksR0FDQSxJQUFBc2IsRUFBQXRiLEVBQUFuTyxJQUFBLFdBQ0EsT0FBQW1PLEVBQUFuTyxJQUFBLGFBQ0FtTyxFQUFBbk8sSUFBQSxpQkFBQXlwQixLQUFBNVYsTUFpREEsU0FBQXlTLEVBQUFsUSxHQUNBQSxNQUFBd0IsUUFBQSxHQUdBLFNBQUEyTyxFQUFBMkQsRUFBQUMsRUFBQW5RLEdBRUEsSUFBQW9RLEVBQUFGLEtBQUEvSixrQkFBQWtLLFFBQ0FDLEVBQUFILEtBQUFoSyxrQkFBQWtLLFFBRUEsR0FBQUQsR0FBQUUsRUFBQSxDQU1BLElBQUFDLEVBQUFuSSxFQUFBb0ksYUFJQSxPQUhBcEksRUFBQXROLE9BQUF5VixLQUFBTCxFQUFBNVAsVUFDQThQLEVBQUE5SCxlQUFBRixFQUFBcUksT0FBQUYsRUFBQUwsRUFBQVEsc0JBQ0FKLEVBQUFoSSxlQUFBRixFQUFBcUksT0FBQUYsRUFBQUosRUFBQU8sc0JBQ0FOLEVBQUFPLFVBQUFMLElBR0EsU0FBQS9CLEVBQUFKLEdBQ0EsaUJBQUFBLEdBQUEsV0FBQUEsRUE0SEEsSUFBQXZjLEVBQUErVyxFQUNBN2UsRUFBQTBELFFBQUFvRSwyRUNwbUJBM00sRUFBQSx3Q0FFQTJyQixRQUZBLElBSUE3ZSxFQUFBOU0sRUFBQSx5Q0FFQTRyQixFQUFBNXJCLEVBQUEsbUVBd0JBNnJCLEVBQUEvZSxFQUFBZ2YscUJBQ0FybUIsS0FBQSxPQUtBc21CLGFBQUEsS0FNQUMsaUJBQUEsS0FLQXBQLE9BQUEsU0FBQTFOLEVBQUFoRCxFQUFBQyxFQUFBZ0IsR0FNQTFDLEtBQUF1aEIsa0JBQUFKLEVBQUFLLFNBQUEvYyxHQUNBMmMsRUFBQTVZLFdBQUF4SSxLQUFBLFNBQUF5SSxXQUNBZ1osRUFBQXpoQixLQUFBeUUsRUFBQWhELEVBQUFDLEVBQUFnQixHQUFBLElBV0ErZSxrQkFBQSxTQUFBaGQsRUFBQWhELEVBQUFDLEVBQUFnQixFQUFBZ2YsR0FDQUQsRUFBQXpoQixLQUFBeUUsRUFBQWhELEVBQUFDLEVBQUFnQixHQUFBLElBTUFzUSxPQUFBLFNBQUF2UixFQUFBQyxHQUNBLElBQUFpZ0IsRUFBQTNoQixLQUFBc2hCLGFBQ0FLLEtBQUEzTyxPQUFBdFIsR0FDQTBmLEVBQUE1WSxXQUFBeEksS0FBQSxTQUFBeUksWUFNQXJLLFFBQUEsU0FBQXFELEVBQUFDLEdBQ0FrZ0IsRUFBQTVoQixLQUFBMEIsR0FDQTBmLEVBQUE1WSxXQUFBeEksS0FBQSxVQUFBeUksY0FJQSxTQUFBZ1osRUFBQUksRUFBQXBkLEVBQUFoRCxFQUFBQyxFQUFBZ0IsRUFBQW9mLEdBQ0EsSUFBQUMsRUFBQVgsRUFBQVksb0JBQUFILEVBQUFOLGtCQUVBLEdBQUFRLEVBQUEsQ0FJQSxJQUFBRSxFQUFBZCxFQUFBZSxvQkFBQXpkLEdBQ0F3ZCxHQUFBSixFQUFBUCxlQUFBTyxFQUFBUCxhQUFBLElBQUFTLElBQUE1UCxPQUFBMU4sRUFBQXdkLEVBQUF2Z0IsRUFBQW9nQixHQUFBRixFQUFBQyxFQUFBbmdCLElBR0EsU0FBQWtnQixFQUFBQyxFQUFBcGdCLEVBQUFDLEdBQ0EsSUFBQWlnQixFQUFBRSxFQUFBUCxhQUNBSyxLQUFBdmpCLFFBQUFxRCxFQUFBQyxHQUNBbWdCLEVBQUFQLGFBQUEsS0FHQSxJQUFBYSxLQUVBZixFQUFBZ0IseUJBQUEsU0FBQXBuQixFQUFBcW5CLEdBQ0FGLEVBQUFubkIsR0FBQXFuQixHQUdBakIsRUFBQVksb0JBQUEsU0FBQWhuQixHQUNBLE9BQUFBLEdBQUFtbkIsRUFBQW5uQixJQUdBLElBQUFrSCxFQUFBa2YsRUFDQWhuQixFQUFBMEQsUUFBQW9FLHlFQ3BIQSxJQUFBRyxFQUFBOU0sRUFBQSx5Q0FFQTZMLEVBQUE3TCxFQUFBLDJDQUVBNHJCLEVBQUE1ckIsRUFBQSxtRUFFQStzQixFQUFBL3NCLEVBQUEsbUVBRUFBLEVBQUEsd0VBRUFBLEVBQUEsdUVBRUFBLEVBQUEsNEVBdUJBOE0sRUFBQWtnQixxQkFBQSxTQUFBaGEsR0FFQSxHQUFBQSxFQUFBLEdBQ0FBLEVBQUFvWixhQUFBLElBQUFwWixFQUFBb1osWUFBQXBxQixVQUFBZ1IsRUFBQW9aLGdCQUNBLElBQUFhLEVBQUFqYSxFQUFBb1osWUFBQWEsS0FJQUEsSUFBQXBoQixFQUFBNkUsUUFBQXVjLEtBQ0FqYSxFQUFBb1osWUFBQWEsYUFNQW5nQixFQUFBeUYsa0JBQUF6RixFQUFBb2dCLFNBQUFDLFVBQUFDLFVBQUEsU0FBQWxoQixFQUFBQyxHQUdBRCxFQUFBbWhCLGFBQUEsZUFBQUMsaUJBQUExQixFQUFBMkIsUUFBQXJoQixFQUFBQyxLQUdBVyxFQUFBSSxnQkFDQXpILEtBQUEsb0JBQ0EwTSxNQUFBLG9CQUNBOU8sT0FBQSxzQkFDQzBwQiwyRkM1REQsSUFzR0FwZ0IsRUF0R0EzTSxFQUFBLHlDQW9CQXd0QixzQkFDQS9uQixLQUFBLGNBQ0E2bkIsaUJBQUEsS0FDQXhZLGVBRUFGLEtBQUEsT0FFQTZZLFVBQUEsS0FFQTFZLE9BQUEsRUFDQUMsRUFBQSxHQUNBdlAsS0FBQSxPQUdBaW9CLE1BQUEsRUFDQUMsZ0JBQUEsRUFDQTFzQixNQUFBLEtBQ0FtQyxPQUFBLEtBYUE2cEIsUUFHQVcsVUFBQSxLQUNBQyx3QkFBQSxJQUNBNVgsV0FDQTZYLE1BQUEsT0FDQTVYLE1BQUEsRUFDQXpRLEtBQUEsU0FFQXNvQixhQUNBRCxNQUFBLHlCQUVBalosT0FDQUQsTUFBQSxFQUNBaVcsVUFBQSxLQUVBbUQsVUFBQSxPQUVBQyxPQUFBLEVBQ0FILE1BQUEsT0FDQUksU0FBQSxTQUNBQyxnQkFBQSxPQUVBQyxZQUFBLEtBQ0FoWSxZQUFBLEVBQ0FpWSxXQUFBLEVBQ0FDLFlBQUEsUUFNQUMsUUFDQTNaLE1BQUEsRUFDQTRaLEtBQUEsMk1BRUEzTSxLQUFBLEdBRUFvTSxPQUFBLEdBR0FILE1BQUEsT0FDQU8sV0FBQSxFQUNBQyxZQUFBLE9BQ0FHLGNBQUEsRUFDQUMsY0FBQSxFQUVBQyxTQUFBLE9BS0E5cEIsRUFBQTBELFFBQUFvRSx5RkN2R0EsSUFBQUcsRUFBQTlNLEVBQUEseUNBRUE0dUIsRUFBQTV1QixFQUFBLHNFQW9CQTZ1QixFQUFBL2hCLEVBQUFnZixxQkFDQXJtQixLQUFBLGNBQ0FtWCxPQUFBLFNBQUFrUyxFQUFBNWlCLEVBQUFDLEdBQ0EsSUFBQTRpQixFQUFBN2lCLEVBQUFtaEIsYUFBQSxXQUNBSSxFQUFBcUIsRUFBQS90QixJQUFBLGNBQUFndUIsS0FBQWh1QixJQUFBLGdDQUdBNnRCLEVBQUFuaUIsU0FBQSxjQUFBTixFQUFBLFNBQUE2aUIsRUFBQTd0QixFQUFBMFYsR0FFQSxTQUFBNFcsSUFBQSxVQUFBdUIsR0FBQXZCLEVBQUFudEIsUUFBQTB1QixJQUFBLElBQ0FuWSxHQUNBcFIsS0FBQSxvQkFDQXVwQixjQUNBOVQsRUFBQS9aLEtBQUE4dEIsUUFDQTlULEVBQUFoYSxLQUFBK3RCLGFBU0F6UixPQUFBLFNBQUF2UixFQUFBQyxHQUNBeWlCLEVBQUFPLFdBQUFoakIsRUFBQWlqQixRQUFBLGVBQ0FQLEVBQUE1YixXQUFBeEksS0FBQTRrQixPQUFBLFNBQUFuYyxZQU1BckssUUFBQSxTQUFBcUQsRUFBQUMsR0FDQXlpQixFQUFBTyxXQUFBLGNBQUFoakIsR0FDQTBpQixFQUFBNWIsV0FBQXhJLEtBQUE0a0IsT0FBQSxVQUFBbmMsY0FHQXZHLEVBQUFraUIsRUFDQWhxQixFQUFBMEQsUUFBQW9FLHlGQzNEQSxJQUFBZCxFQUFBN0wsRUFBQSwyQ0FFQXN2QixFQUFBdHZCLEVBQUEsNENBRUF3VyxFQUFBeFcsRUFBQSw4Q0FFQTRyQixFQUFBNXJCLEVBQUEsbUVBRUF1dkIsRUFBQXZ2QixFQUFBLDRDQUVBd3ZCLEVBQUF4dkIsRUFBQSwrQ0F3QkF1UixHQUFBRCxFQXRCQXRSLEVBQUEsNENBRUFzUixhQXFCQThaLEVBQUF2ZixFQUFBdWYsTUFDQXBoQixFQUFBNkIsRUFBQTdCLEtBTUEsU0FBQXlsQixLQW1hQSxTQUFBNVYsRUFBQTZWLEVBQUFDLEVBQUF4WSxFQUFBeVksSUFRQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUNBLEdBQUFsa0IsRUFBQW1rQixTQUFBRixJQUFBamtCLEVBQUFta0IsU0FBQUQsR0FBQSxDQUNBLElBQUFFLEdBQUEsRUFJQSxPQUhBcGtCLEVBQUFRLEtBQUEwakIsRUFBQSxTQUFBNXBCLEVBQUE0RCxHQUNBa21CLEtBQUFKLEVBQUFDLEVBQUEvbEIsR0FBQTVELE9BRUE4cEIsRUFFQSxPQUFBSCxJQUFBQyxHQWRBRixDQUFBdGUsRUFBQTRGLEdBQUErWSxTQUFBTixLQUNBcmUsRUFBQTRGLEdBQUErWSxTQUFBTixFQUNBRCxFQUFBblosRUFBQXFELFlBQUExQyxFQUFBeVksRUFBQUYsSUFBQXZZLEVBQUFxRCxnQkFBQXJELEVBQUFhLEtBQUE0WCxLQWdCQSxTQUFBTyxFQUFBQyxFQUFBMUQsR0FDQTBELEVBQUExRCxFQUFBM3JCLElBQUEsK0JBR0EsU0FBQXN2QixFQUFBQyxHQUNBLE9BQ0F4YSxTQUFBd2EsRUFBQXhhLFNBQUE1USxRQUNBbVcsU0FBQWlWLEVBQUFqVixVQUFBLEdBSUEsU0FBQWtWLEVBQUF4VCxFQUFBMlAsRUFBQTNJLEdBQ0EsSUFBQS9PLEVBQUEwWCxFQUFBM3JCLElBQUEsS0FDQWdVLEVBQUEyWCxFQUFBM3JCLElBQUEsVUFDQWdjLEtBQUF5VCxTQUFBLFNBQUFyWixHQUNBLFVBQUFBLEVBQUExUixPQUNBLE1BQUF1UCxJQUFBbUMsRUFBQW5DLEtBQ0EsTUFBQUQsSUFBQW9DLEVBQUFwQyxVQUNBb0MsRUFBQTRNLFlBdmNBMEwsRUFBQTN3QixXQUlBMnhCLE9BQUEsS0FLQUMsZ0JBQUEsS0FLQUMsUUFBQSxLQUtBQyxXQUFBLEVBS0FDLFdBQUEsS0FLQUMsWUFBQSxLQUtBQyxhQUFBLEtBT0FDLG1CQUFBLEdBS0FwVSxPQUFBLFNBQUExTixFQUFBd2QsRUFBQXZnQixFQUFBb2dCLEdBQ0EsSUFBQXRyQixFQUFBeXJCLEVBQUEzckIsSUFBQSxTQUNBcUMsRUFBQXNwQixFQUFBM3JCLElBQUEsVUFTQSxHQU5BMEosS0FBQXdtQixXQUFBL2hCLEVBQ0F6RSxLQUFBeW1CLGtCQUFBeEUsRUFDQWppQixLQUFBMG1CLEtBQUFobEIsRUFJQW9nQixHQUFBOWhCLEtBQUFvbUIsYUFBQTV2QixHQUFBd0osS0FBQXFtQixjQUFBMXRCLEVBQUEsQ0FJQXFILEtBQUFvbUIsV0FBQTV2QixFQUNBd0osS0FBQXFtQixZQUFBMXRCLEVBQ0EsSUFBQTJaLEVBQUF0UyxLQUFBZ21CLE9BQ0FsQyxFQUFBOWpCLEtBQUFrbUIsUUFFQSxJQUFBdnRCLEdBQUEsU0FBQUEsRUFJQSxPQUZBMlosS0FBQXFVLFlBQ0E3QyxLQUFBNkMsUUFJQXJVLEtBQUFuSSxPQUNBMlosS0FBQTNaLE9BRUEsSUFBQXljLEtBQ0E1bUIsS0FBQTZtQixhQUFBRCxFQUFBcHdCLEVBQUFpTyxFQUFBd2QsRUFBQXZnQixHQUVBLElBQUFvbEIsRUFBQUYsRUFBQUUsV0FFQUEsSUFBQTltQixLQUFBaW1CLGlCQUNBam1CLEtBQUErbUIsTUFBQXJsQixHQUdBMUIsS0FBQWltQixnQkFBQWEsRUFDQSxJQUFBNUIsRUFBQWxsQixLQUFBZ25CLGVBQUFobkIsS0FBQWluQixtQkFBQXhpQixFQUFBd2QsR0FFQSxHQUFBM1AsRUFLSyxDQUNMLElBQUE0VSxFQUFBOWxCLEVBQUF5RyxNQUFBdUgsRUFBQTZTLEVBQUFpRCxHQUNBbGxCLEtBQUFtbkIsZ0JBQUE3VSxFQUFBc1UsRUFBQU0sRUFBQWpGLEdBQ0FqaUIsS0FBQW9uQixjQUFBOVUsRUFBQXNVLEVBQUFNLEVBQUFqRixRQVBBM1AsRUFBQXRTLEtBQUFnbUIsT0FBQSxJQUFBamEsRUFBQTBCLE1BQ0F6TixLQUFBcW5CLGdCQUFBL1UsRUFBQXNVLEVBQUFuaUIsRUFBQXdkLEdBQ0FqaUIsS0FBQXNuQixjQUFBaFYsRUFBQXNVLEVBQUFuaUIsRUFBQXdkLEdBQ0F2Z0IsRUFBQWlqQixRQUFBclcsSUFBQWdFLEdBT0F3VCxFQUFBeFQsRUFBQTJQLEdBQUEsR0FFQWppQixLQUFBdW5CLGNBQUEvd0IsS0FNQXdjLE9BQUEsU0FBQXRSLEdBQ0ExQixLQUFBK21CLE1BQUFybEIsSUFNQXRELFFBQUEsU0FBQXNELEdBQ0ExQixLQUFBK21CLE1BQUFybEIsSUFNQXVsQixtQkFBQSxTQUFBeGlCLEVBQUF3ZCxHQUNBLElBQUFrQixFQUFBbEIsRUFBQTNyQixJQUFBLGFBQ0EwakIsRUFBQXZWLEVBQUF1VixLQUNBd04sRUFBQSxhQUFBeE4sRUFBQWhmLEtBQ0F5c0IsRUFBQXhGLEVBQUEzckIsSUFBQSxRQUVBLElBQUFteEIsSUFBQUQsRUFDQSxTQUdBLFlBQUFyRSxHQUFBLE1BQUFBLEVBQUEsQ0FDQSxJQUFBb0QsRUFBQXZtQixLQUFBdW1CLG1CQUVBLEdBQUFpQixHQUFBeE4sRUFBQTBOLGVBQUFuQixFQUNBLFNBTUEsR0FBQWtCLEVBQUEsQ0FDQSxJQUFBRSxFQUFBeEcsRUFBQXlHLFlBQUFuakIsR0FBQWtqQixnQkFDQUUsRUFBQTdOLEVBQUFDLFlBRUEsT0FBQWxOLEtBQUFpSSxJQUFBNlMsRUFBQSxHQUFBQSxFQUFBLElBQUFGLEVBQUFwQixFQUdBLFNBR0EsV0FBQXBELEdBT0EwRCxhQUFBLFNBQUFELEVBQUFwd0IsRUFBQWlPLEVBQUF3ZCxFQUFBdmdCLEtBTUEybEIsZ0JBQUEsU0FBQS9VLEVBQUFzVSxFQUFBbmlCLEVBQUF3ZCxHQUNBLElBQUE2RixFQUFBbEIsRUFBQW1CLFFBRUEsR0FBQUQsRUFBQSxDQUNBLElBQUFFLEVBQUFsaEIsRUFBQXdMLEdBQUEwVixVQUFBLElBQUFqYyxFQUFBK2IsRUFBQTlzQixNQUFBMmxCLEVBQUFpRyxFQUFBbUIsVUFDQXpWLEVBQUFoRSxJQUFBMFosS0FPQVYsY0FBQSxTQUFBaFYsRUFBQXNVLEVBQUFuaUIsRUFBQXdkLEdBQ0EsR0FBQTJFLEVBQUF4YyxNQUFBLENBQ0EsSUFBQXViLEVBQUE3ZSxFQUFBd0wsR0FBQXFULFFBQUEsSUFBQTVaLEVBQUFrYyxLQUFBdEgsRUFBQWlHLEVBQUF4YyxRQUNBa0ksRUFBQWhFLElBQUFxWCxHQUNBRCxFQUFBQyxFQUFBMUQsS0FPQWtGLGdCQUFBLFNBQUE3VSxFQUFBc1UsRUFBQXhYLEdBQ0EsSUFBQTRZLEVBQUFsaEIsRUFBQXdMLEdBQUEwVixVQUVBQSxJQUNBQSxFQUFBblcsU0FBQStVLEVBQUFtQixRQUFBcFgsT0FDQXZCLEVBQUE0WSxHQUNBL1ksTUFBQTJYLEVBQUFtQixRQUFBOVksVUFRQW1ZLGNBQUEsU0FBQTlVLEVBQUFzVSxFQUFBeFgsRUFBQTZTLEdBQ0EsSUFBQTBELEVBQUE3ZSxFQUFBd0wsR0FBQXFULFFBRUFBLElBQ0FBLEVBQUE5VCxTQUFBK1UsRUFBQXhjLE1BQUF1RyxPQUNBdkIsRUFBQXVXLEdBR0ExVyxNQUFBMlgsRUFBQXhjLE1BQUE2RSxNQUNBNUQsU0FBQXViLEVBQUF4YyxNQUFBaUIsV0FFQXFhLEVBQUFDLEVBQUExRCxLQU9Bc0YsY0FBQSxTQUFBL3dCLEdBQ0EsSUFBQXdKLEtBQUFtbUIsV0FBQW5tQixLQUFBa29CLHNCQUFBLENBSUEsSUFjQUMsRUFkQWxHLEVBQUFqaUIsS0FBQXltQixrQkFFQTJCLEVBQUFwb0IsS0FBQTBtQixLQUFBL0IsUUFFQWIsRUFBQTlqQixLQUFBa21CLFFBQ0FtQyxFQUFBcEcsRUFBQXRTLFNBQUEsVUFDQWhYLEVBQUFzcEIsRUFBQTNyQixJQUFBLFVBRUEsSUFBQSt4QixFQUFBL3hCLElBQUEsVUFBQXFDLEdBQUEsU0FBQUEsRUFHQSxPQUZBbXJCLEdBQUFzRSxFQUFBcFYsT0FBQThRLFFBQ0E5akIsS0FBQWttQixRQUFBLE1BTUFsbUIsS0FBQWttQixVQUNBaUMsR0FBQSxFQUNBckUsRUFBQTlqQixLQUFBa21CLFFBQUFuYSxFQUFBdWMsV0FBQUQsRUFBQS94QixJQUFBLFNBQ0FpeUIsT0FBQSxPQUNBQyxXQUFBLEVBQ0FDLFlBQUEsU0FBQS94QixHQUVBb3VCLEVBQUE0RCxLQUFBaHlCLEVBQUFnUixRQUVBaWhCLFlBQUFwcEIsRUFBQVMsS0FBQTRvQixrQkFBQTVvQixLQUFBLEtBQ0E2b0IsTUFBQXRwQixFQUFBUyxLQUFBNG9CLGtCQUFBNW9CLE1BQ0E4b0IsVUFBQXZwQixFQUFBUyxLQUFBK29CLGlCQUFBL29CLFFBRUFvb0IsRUFBQTlaLElBQUF3VixJQUdBZ0MsRUFBQWhDLEVBQUE3QixHQUFBLEdBR0E2QixFQUFBalMsU0FBQXdXLEVBQUF6WSxhQUFBLE1BREEsNEdBR0EsSUFBQW9aLEVBQUFYLEVBQUEveEIsSUFBQSxRQUVBOEssRUFBQTZFLFFBQUEraUIsS0FDQUEsU0FHQWxGLEVBQUF2VyxLQUFBLFNBQUF5YixFQUFBLEtBQUFBLEVBQUEsT0FDQWpFLEVBQUFrRSxlQUFBanBCLEtBQUEseUJBQUFxb0IsRUFBQS94QixJQUFBLDBCQUVBMEosS0FBQWtwQixtQkFBQTF5QixFQUFBMnhCLEtBTUFlLG1CQUFBLFNBQUExeUIsRUFBQTJ4QixHQUNBL1ksRUFBQXBQLEtBQUF5bUIsbUJBQUEwQixHQUFBbm9CLEtBQUFnbkIsZUFBQWhuQixLQUFBa21CLFFBQUFOLEVBQUE1bEIsS0FBQW1wQixtQkFBQTN5QixFQUFBd0osS0FBQXdtQixXQUFBeG1CLEtBQUF5bUIsc0JBTUFtQyxrQkFBQSxTQUFBOWIsRUFBQUcsR0FDQSxJQUFBNlcsRUFBQTlqQixLQUFBa21CLFFBRUEsR0FBQXBDLEVBQUEsQ0FJQTlqQixLQUFBbW1CLFdBQUEsRUFFQSxJQUFBTixFQUFBN2xCLEtBQUFrb0Isc0JBQUF0QyxFQUFBOUIsSUFBQWhYLEVBQUFHLEdBQUFqTixLQUFBd21CLFdBQUF4bUIsS0FBQXltQixtQkFDQXptQixLQUFBc21CLGFBQUFULEVBQ0EvQixFQUFBL1QsZ0JBQ0ErVCxFQUFBdlcsS0FBQXFZLEVBQUFDLElBQ0EvZSxFQUFBZ2QsR0FBQTJCLFNBQUEsS0FFQXpsQixLQUFBb3BCLDJCQU9BQSx1QkFBQSxXQUdBLEdBRkFwcEIsS0FBQWttQixRQUVBLENBSUEsSUFBQW1ELEVBQUFycEIsS0FBQXNtQixhQUNBN2hCLEVBQUF6RSxLQUFBd21CLFdBRUF4bUIsS0FBQTBtQixLQUFBdGEsZ0JBQ0FwUixLQUFBLG9CQUNBeVYsRUFBQTRZLEVBQUFDLFlBQUEsR0FDQTVZLEVBQUEyWSxFQUFBQyxZQUFBLEdBQ0FDLGNBQUFGLEVBQUFFLGNBQ0FDLFdBQ0FDLFFBQUFobEIsRUFBQXVWLEtBQUF6VixJQUNBbWxCLFVBQUFqbEIsRUFBQXVVLHFCQVFBK1AsaUJBQUEsU0FBQTdELEdBSUEsR0FIQWxsQixLQUFBbW1CLFdBQUEsRUFDQW5tQixLQUFBa21CLFFBRUEsQ0FJQSxJQUFBMXZCLEVBQUF3SixLQUFBeW1CLGtCQUFBbndCLElBQUEsU0FLQTBKLEtBQUFrcEIsbUJBQUExeUIsR0FJQXdKLEtBQUEwbUIsS0FBQXRhLGdCQUNBcFIsS0FBQSxjQVlBbXVCLG1CQUFBLEtBV0FqQixzQkFBQSxLQUtBbkIsTUFBQSxTQUFBcmxCLEdBQ0ExQixLQUFBb21CLFdBQUEsS0FDQXBtQixLQUFBcW1CLFlBQUEsS0FDQSxJQUFBK0IsRUFBQTFtQixFQUFBaWpCLFFBQ0FyUyxFQUFBdFMsS0FBQWdtQixPQUNBbEMsRUFBQTlqQixLQUFBa21CLFFBRUFrQyxHQUFBOVYsSUFDQXRTLEtBQUFpbUIsZ0JBQUEsS0FDQTNULEdBQUE4VixFQUFBcFYsT0FBQVYsR0FDQXdSLEdBQUFzRSxFQUFBcFYsT0FBQThRLEdBQ0E5akIsS0FBQWdtQixPQUFBLEtBQ0FobUIsS0FBQWttQixRQUFBLEtBQ0FsbUIsS0FBQXNtQixhQUFBLE9BT0FxRCxRQUFBLGFBU0FDLFdBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FFQSxPQUNBdFosRUFBQW9aLEVBRkFFLEtBQUEsR0FHQXJaLEVBQUFtWixFQUFBLEVBQUFFLEdBQ0F0ZSxNQUFBcWUsRUFBQUMsR0FDQXZWLE9BQUFzVixFQUFBLEVBQUFDLE1BSUEvRSxFQUFBM3dCLFVBQUFtTixZQUFBd2pCLEVBNkNBSCxFQUFBbUYsa0JBQUFoRixHQUNBLElBQUE5aUIsRUFBQThpQixFQUNBNXFCLEVBQUEwRCxRQUFBb0UsOEZDMWZBLElBQUE2SixFQUFBeFcsRUFBQSw4Q0FFQXl2QixFQUFBenZCLEVBQUEsdUVBRUEwMEIsRUFBQTEwQixFQUFBLGtFQUVBMjBCLEVBQUEzMEIsRUFBQSxxRUFFQTZyQixFQUFBN3JCLEVBQUEseURBb0JBNDBCLEVBQUFuRixFQUFBdmUsUUFJQW9nQixhQUFBLFNBQUFELEVBQUFwd0IsRUFBQWlPLEVBQUF3ZCxFQUFBdmdCLEdBQ0EsSUFBQXNZLEVBQUF2VixFQUFBdVYsS0FDQW9RLEVBQUFwUSxFQUFBb1EsS0FDQUMsRUFBQXBJLEVBQUEzckIsSUFBQSxRQUNBZzBCLEVBQUFDLEVBQUFILEVBQUFwUSxHQUFBd1EsYUFBQXhRLEdBQUF5USxrQkFDQUMsRUFBQTFRLEVBQUEyUSxjQUFBM1EsRUFBQWdFLFlBQUF4bkIsR0FBQSxJQUVBLEdBQUE2ekIsR0FBQSxTQUFBQSxFQUFBLENBQ0EsSUFBQU8sRUFBQVgsRUFBQVksYUFBQTVJLEdBQ0E2RixFQUFBZ0QsRUFBQVQsR0FBQXJRLEVBQUEwUSxFQUFBSixFQUFBTSxHQUNBOUMsRUFBQW5YLE1BQUFpYSxFQUNBaEUsRUFBQUUsV0FBQWdCLEVBQUE5c0IsS0FDQTRyQixFQUFBbUIsUUFBQUQsRUFHQSxJQUFBaUQsRUFBQWIsRUFBQXZkLE9BQUF5ZCxFQUFBWSxNQUFBdm1CLEdBQ0F3bEIsRUFBQWdCLGtDQUFBejBCLEVBQUFvd0IsRUFBQW1FLEVBQUF0bUIsRUFBQXdkLEVBQUF2Z0IsSUFNQXluQixtQkFBQSxTQUFBM3lCLEVBQUFpTyxFQUFBd2QsR0FDQSxJQUFBOEksRUFBQWIsRUFBQXZkLE9BQUFsSSxFQUFBdVYsS0FBQW9RLEtBQUFZLE1BQUF2bUIsR0FDQXltQixhQUFBLElBR0EsT0FEQUgsRUFBQS9OLFlBQUFpRixFQUFBM3JCLElBQUEsa0JBRUErVSxTQUFBNGUsRUFBQWtCLHVCQUFBMW1CLEVBQUF1VixLQUFBeGpCLEVBQUF1MEIsR0FDQW5hLFNBQUFtYSxFQUFBbmEsVUFBQW1hLEVBQUExUixlQUFBLEVBQUF0TSxLQUFBNEcsR0FBQSxLQU9BdVUsc0JBQUEsU0FBQXhPLEVBQUFuRixFQUFBOVAsRUFBQXdkLEdBQ0EsSUFBQWpJLEVBQUF2VixFQUFBdVYsS0FDQW9RLEVBQUFwUSxFQUFBb1EsS0FDQXZDLEVBQUE3TixFQUFBeVEsaUJBQUEsR0FDQUgsRUFBQUMsRUFBQUgsRUFBQXBRLEdBQUF3USxhQUFBeFEsR0FBQXlRLGtCQUNBdGxCLEVBQUEsTUFBQTZVLEVBQUF6VixJQUFBLElBQ0E2bUIsRUFBQTFSLEVBQUFyTyxTQUNBK2YsRUFBQWptQixJQUFBb1AsRUFBQXBQLEdBQ0FpbUIsRUFBQWptQixHQUFBNEgsS0FBQXNLLElBQUF3USxFQUFBLEdBQUF1RCxFQUFBam1CLElBQ0FpbUIsRUFBQWptQixHQUFBNEgsS0FBQW1HLElBQUEyVSxFQUFBLEdBQUF1RCxFQUFBam1CLElBQ0EsSUFBQWttQixHQUFBZixFQUFBLEdBQUFBLEVBQUEsTUFDQWhCLEdBQUErQixLQUNBL0IsRUFBQW5rQixHQUFBaW1CLEVBQUFqbUIsR0FPQSxPQUNBa0csU0FBQStmLEVBQ0F4YSxTQUFBOEksRUFBQTlJLFNBQ0EwWSxjQUNBQyxnQkFSQTVYLGNBQUEsV0FFQTJaLE1BQUEsV0FNQW5tQixPQUtBLFNBQUFvbEIsRUFBQUgsRUFBQXBRLEdBQ0EsSUFBQWpXLEtBRUEsT0FEQUEsRUFBQWlXLEVBQUF6VixJQUFBLGFBQUF5VixFQUFBZSxNQUNBcVAsRUFBQUcsYUFBQXhtQixHQUdBLElBQUErbUIsR0FDQVMsS0FBQSxTQUFBdlIsRUFBQTBRLEVBQUFKLEVBQUFNLEdBQ0EsSUFBQVksRUFBQXZCLEVBQUF3QixlQUFBZixFQUFBSixFQUFBLEtBQUFJLEVBQUFKLEVBQUEsSUFBQW9CLEVBQUExUixJQUtBLE9BSkFqTyxFQUFBd08sc0JBQ0F0TCxNQUFBdWMsRUFDQTdhLE1BQUFpYSxLQUdBNXZCLEtBQUEsT0FDQWlVLE1BQUF1YyxJQUdBRyxPQUFBLFNBQUEzUixFQUFBMFEsRUFBQUosRUFBQU0sR0FDQSxJQUFBZ0IsRUFBQTdlLEtBQUFtRyxJQUFBLEVBQUE4RyxFQUFBME4sZ0JBQ0FtRSxFQUFBdkIsRUFBQSxHQUFBQSxFQUFBLEdBQ0EsT0FDQXR2QixLQUFBLE9BQ0FpVSxNQUFBZ2IsRUFBQTZCLGVBQUFwQixFQUFBa0IsRUFBQSxFQUFBdEIsRUFBQSxLQUFBc0IsRUFBQUMsR0FBQUgsRUFBQTFSLE9BS0EsU0FBQTBSLEVBQUExUixHQUNBLFlBQUFBLEVBQUF6VixJQUFBLElBR0E2YyxFQUFBZ0IseUJBQUEsdUJBQUErSCxHQUNBLElBQUFqb0IsRUFBQWlvQixFQUNBL3ZCLEVBQUEwRCxRQUFBb0UscUZDbElBLElBQUFkLEVBQUE3TCxFQUFBLDJDQUlBc1IsRUFGQXRSLEVBQUEsNENBRUFzUixVQUVBa2xCLEVBQUF4MkIsRUFBQSxtRUFFQXkyQixFQUFBejJCLEVBQUEsMkVBb0JBcU0sRUFBQVIsRUFBQVEsS0FDQWlHLEVBQUF6RyxFQUFBeUcsTUFDQWYsRUFBQUQsSUFtSEEsU0FBQW9sQixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLElBQUF0UyxFQUFBa1MsRUFBQWxTLEtBRUEsSUFBQUEsRUFBQXFCLE1BQUFDLFdBQUF0QixFQUFBdVMsWUFBQUosR0FJQSxHQUFBRCxFQUFBTSxjQUFBLENBTUEsSUFBQW5ELEVBdUJBLFNBQUE3eUIsRUFBQTAxQixHQUNBLElBQUFsUyxFQUFBa1MsRUFBQWxTLEtBQ0F6VixFQUFBeVYsRUFBQXpWLElBQ0Frb0IsRUFBQWoyQixFQUNBazJCLEtBQ0FDLEVBQUE5WCxPQUFBQyxVQUNBOFgsR0FBQSxFQStDQSxPQTlDQWhyQixFQUFBc3FCLEVBQUFXLGFBQUEsU0FBQUMsRUFBQXR3QixHQUNBLElBQ0F1d0IsRUFDQUMsRUFGQUMsRUFBQUgsRUFBQTNwQixVQUFBaUcsYUFBQTdFLEdBQUEsR0FJQSxHQUFBdW9CLEVBQUFJLG1CQUFBLENBQ0EsSUFBQW56QixFQUFBK3lCLEVBQUFJLG1CQUFBRCxFQUFBejJCLEVBQUF3akIsR0FDQWdULEVBQUFqekIsRUFBQWl6QixZQUNBRCxFQUFBaHpCLEVBQUFvekIsaUJBQ0ssQ0FNTCxLQUxBSCxFQUFBRixFQUFBM3BCLFVBQUFpcUIsaUJBQUFILEVBQUEsR0FBQXoyQixFQUdBLGFBQUF3akIsRUFBQWhmLEtBQUEsVUFFQXpELE9BQ0EsT0FHQXcxQixFQUFBRCxFQUFBM3BCLFVBQUE3TSxJQUFBMjJCLEVBQUEsR0FBQUQsRUFBQSxJQUdBLFNBQUFELEdBQUExTixTQUFBME4sR0FBQSxDQUlBLElBQUFyYSxFQUFBbGMsRUFBQXUyQixFQUNBblcsRUFBQTdKLEtBQUFpSSxJQUFBdEMsR0FFQWtFLEdBQUErVixLQUNBL1YsRUFBQStWLEdBQUFqYSxHQUFBLEdBQUFrYSxFQUFBLEtBQ0FELEVBQUEvVixFQUNBZ1csRUFBQWxhLEVBQ0ErWixFQUFBTSxFQUNBTCxFQUFBbjFCLE9BQUEsR0FHQXFLLEVBQUFvckIsRUFBQSxTQUFBOXBCLEdBQ0F3cEIsRUFBQTUyQixNQUNBdTNCLFlBQUFQLEVBQUFPLFlBQ0FDLGdCQUFBcHFCLEVBQ0FBLFVBQUE0cEIsRUFBQTNwQixVQUFBb3FCLFlBQUFycUIsWUFNQXdwQixlQUNBRCxlQTlFQWUsQ0FBQXJCLEVBQUFELEdBQ0FRLEVBQUFyRCxFQUFBcUQsYUFDQUQsRUFBQXBELEVBQUFvRCxZQUdBQyxFQUFBLFVBQUFKLEVBQUFlLGFBQ0Fqc0IsRUFBQXFGLE9BQUE2bEIsRUFBQUksRUFBQSxLQUtBTCxHQUFBSCxFQUFBakosTUFDQWpKLEVBQUF1UyxZQUFBRSxJQUFBLE1BQUFBLElBQ0FOLEVBQUFNLEdBSUFMLEVBQUFxQixZQUFBdkIsRUFBQUMsRUFBQU8sRUFBQUosR0FHQUYsRUFBQXNCLFlBQUF4QixFQUFBN0MsRUFBQW9ELFFBekJBTCxFQUFBcUIsWUFBQXZCLEVBQUFDLEdBdUZBLFNBQUFzQixFQUFBRSxFQUFBekIsRUFBQTExQixFQUFBazJCLEdBQ0FpQixFQUFBekIsRUFBQTVzQixNQUNBOUksUUFDQWsyQixnQkFJQSxTQUFBZ0IsRUFBQUUsRUFBQTFCLEVBQUE3QyxFQUFBN3lCLEdBQ0EsSUFBQWsyQixFQUFBckQsRUFBQXFELGFBQ0ExUyxFQUFBa1MsRUFBQWxTLEtBQ0F2VixFQUFBdVYsRUFBQWdSLE1BQ0EvSSxFQUFBaUssRUFBQWpLLGlCQUdBLEdBQUFpSyxFQUFBaEosZ0JBQUF3SixFQUFBbjFCLE9BQUEsQ0FJQSxJQUFBczJCLEVBQUEzQixFQUFBcHFCLFNBQUFrcEIsTUFDQThDLEVBQUEvQixFQUFBZ0MsUUFBQUYsR0FDQUcsRUFBQUosRUFBQWx6QixJQUFBb3pCLEdBRUFFLElBQ0FBLEVBQUFKLEVBQUFsekIsSUFBQW96QixJQUNBRyxXQUFBSixFQUFBbDJCLEdBQ0F1MkIsY0FBQUwsRUFBQTdVLGVBQ0FtVixhQUFBTixFQUFBN3lCLEtBQ0FvekIsaUJBQUFQLEVBQUFockIsU0FDQXdyQixlQUVBVCxFQUFBOXRCLEtBQUFoSyxLQUFBazRCLElBR0FBLEVBQUFLLFdBQUF2NEIsTUFDQTJ6QixRQUFBelAsRUFBQXpWLElBQ0FtbEIsVUFBQWpsQixFQUFBdVUsZUFDQXJVLFNBQUFGLEVBQUF6SixLQUNBc3pCLE9BQUE3cEIsRUFBQTlNLEdBQ0FuQixRQUtBKzNCLGVBQ0FoTCxVQUFBdEIsRUFBQTNyQixJQUFBLG1CQUNBOHBCLFVBQUE2QixFQUFBM3JCLElBQUEsb0JBRUFrNEIsa0JBQUE5QixFQUFBanlCLFdBNkdBLFNBQUFnMEIsRUFBQXZDLEdBQ0EsSUFBQXpuQixFQUFBeW5CLEVBQUFsUyxLQUFBZ1IsTUFDQXR2QixLQUNBNkksRUFBQTdJLEVBQUErdEIsUUFBQXlDLEVBQUFsUyxLQUFBelYsSUFJQSxPQUhBN0ksRUFBQWd1QixVQUFBaHVCLEVBQUE2SSxFQUFBLGFBQUFFLEVBQUF1VSxlQUNBdGQsRUFBQTZpQixTQUFBN2lCLEVBQUE2SSxFQUFBLFlBQUFFLEVBQUF0TyxLQUNBdUYsRUFBQTR5QixPQUFBNXlCLEVBQUE2SSxFQUFBLFVBQUFFLEVBQUE5TSxHQUNBK0QsRUFHQSxTQUFBZ3pCLEVBQUE3YSxHQUNBLE9BQUFBLEdBQUEsTUFBQUEsRUFBQSxJQUFBMEQsTUFBQTFELEVBQUEsV0FBQUEsRUFBQSxJQUFBMEQsTUFBQTFELEVBQUEsSUFHQXpaLEVBQUEwRCxRQS9WQSxTQUFBNEUsRUFBQWpCLEVBQUFDLEdBQ0EsSUFBQTZpQixFQUFBN2hCLEVBQUE2aEIsWUFDQTFRLEdBQUFuUixFQUFBK04sRUFBQS9OLEVBQUFnTyxHQUNBaWUsRUFBQWpzQixFQUNBMEosRUFBQTFKLEVBQUEwSixnQkFBQWhMLEVBQUE3QixLQUFBbUMsRUFBQTBLLGVBQUExSyxHQUNBbWhCLEVBQUFwaEIsRUFBQW1oQixhQUFBLGVBQUFDLGlCQUdBLEdBQUFBLEVBQUEsQ0FJQTZMLEVBQUE3YSxLQUdBQSxFQUFBbVksR0FDQXFCLFlBQUFzQixFQUFBdEIsWUFHQW5xQixVQUFBeXJCLEVBQUF6ckIsV0FDS3pCLEdBQUFvUyxPQUdMLElBQUErYSxFQUFBRixFQUFBN2EsR0FLQWdiLEVBQUFGLEVBQUFuRixTQUNBQSxFQUFBM0csRUFBQTJHLFNBQ0FzRixFQUFBLFVBQUF2SyxHQUFBbUssRUFBQTdhLEdBQ0F5WSxLQUNBcUIsS0FDQUMsR0FDQTl0QixRQUNBcEYsUUFFQTB4QixHQUNBcUIsWUFBQTVsQixFQUFBNGxCLEVBQUFFLEdBQ0FELFlBQUE3bEIsRUFBQTZsQixFQUFBRSxJQUdBaHNCLEVBQUFpaEIsRUFBQWtNLFlBQUEsU0FBQWp0QixFQUFBZ3NCLEdBRUEsSUFBQWtCLEVBQUFKLEdBQUE5c0IsRUFBQThSLGFBQUFDLEdBQ0FqUyxFQUFBaWhCLG1CQUFBaUwsR0FBQSxTQUFBNUIsRUFBQTVzQixHQUNBLElBQUEwYSxFQUFBa1MsRUFBQWxTLEtBQ0FpVixFQXdSQSxTQUFBSixFQUFBM0MsR0FDQSxRQUFBNTBCLEVBQUEsRUFBaUJBLEdBQUF1M0IsT0FBQXQzQixPQUFrQ0QsSUFBQSxDQUNuRCxJQUFBMjNCLEVBQUFKLEVBQUF2M0IsR0FFQSxHQUFBNDBCLEVBQUFsUyxLQUFBelYsTUFBQTBxQixFQUFBeEYsU0FBQXlDLEVBQUFsUyxLQUFBZ1IsTUFBQWhTLGlCQUFBaVcsRUFBQXZGLFVBQ0EsT0FBQXVGLEdBN1JBQyxDQUFBTCxFQUFBM0MsR0FFQSxJQUFBNEMsR0FBQUUsS0FBQUgsR0FBQUksR0FBQSxDQUNBLElBQUFFLEVBQUFGLEtBQUF6NEIsTUFFQSxNQUFBMjRCLEdBQUFQLElBQ0FPLEVBQUFuVixFQUFBb1YsWUFBQXZiLElBR0EsTUFBQXNiLEdBQUFsRCxFQUFBQyxFQUFBaUQsRUFBQS9DLEdBQUEsRUFBQUUsUUFLQSxJQUFBK0MsS0FzQkEsT0FyQkF6dEIsRUFBQTRuQixFQUFBLFNBQUE4RixFQUFBQyxHQUNBLElBQUFDLEVBQUFGLEVBQUFFLFVBRUFBLElBQUE3QixFQUFBNEIsSUFDQTN0QixFQUFBNHRCLEVBQUFoRyxTQUFBLFNBQUFpRyxFQUFBQyxHQUNBLElBQUFDLEVBQUFoQyxFQUFBK0IsR0FFQSxHQUFBRCxJQUFBSCxHQUFBSyxFQUFBLENBQ0EsSUFBQVIsRUFBQVEsRUFBQW41QixNQUNBZzVCLEVBQUFJLFNBQUFULEVBQUFHLEVBQUF0VixLQUFBcUIsTUFBQXZpQixNQUFBMDJCLEVBQUFJLE9BQUFULEVBQUFWLEVBQUFnQixHQUFBaEIsRUFBQWEsTUFDQUQsRUFBQUMsRUFBQWh3QixLQUFBNnZCLE9BS0F2dEIsRUFBQXl0QixFQUFBLFNBQUFGLEVBQUFJLEdBQ0F0RCxFQUFBekMsRUFBQStGLEdBQUFKLEVBQUEvQyxHQUFBLEVBQUFFLEtBMEpBLFNBQUFxQixFQUFBbkUsRUFBQThDLEdBQ0EsSUFBQXVELEVBQUF2RCxFQUFBOUMsWUFFQTVuQixFQUFBNG5CLEVBQUEsU0FBQTBDLEVBQUE1c0IsR0FDQSxJQUFBaUosRUFBQTJqQixFQUFBakssaUJBQUExWixPQUNBdW5CLEVBQUFuQyxFQUFBcnVCLEdBRUF3d0IsSUFDQTVELEVBQUE2RCxZQUFBeG5CLEVBQUE1UCxPQUFBLFFBQ0E0UCxFQUFBL1IsTUFBQXM1QixFQUFBdDVCLE1BRUErUixFQUFBaW1CLG1CQUFBc0IsRUFBQXBELGtCQUFBanlCLFVBTUF5eEIsRUFBQTZELFlBQUF4bkIsRUFBQTVQLE9BQUEsUUFJQSxTQUFBNFAsRUFBQTVQLFFBQUFrM0IsRUFBQS81QixNQUNBMnpCLFFBQUF5QyxFQUFBbFMsS0FBQXpWLElBQ0FtbEIsVUFBQXdDLEVBQUFsUyxLQUFBZ1IsTUFBQWhTLGVBQ0F4aUIsTUFBQStSLEVBQUEvUixVQWhMQXc1QixDQUFBckMsRUFBQW5FLEVBQUE4QyxHQXFMQSxTQUFBc0IsRUFBQS9aLEVBQUFuUixFQUFBMEosR0FFQSxJQUFBc2lCLEVBQUE3YSxJQUFBK1osRUFBQTl0QixLQUFBdkksT0FBQSxDQVdBLElBQUF3TyxJQUFBNm5CLEVBQUE5dEIsS0FBQSxHQUFBdXVCLFdBQUEsUUFBK0RHLHVCQUFBLE9BQy9EcGlCLEdBQ0FwUixLQUFBLFVBQ0FpMUIsZUFBQSxFQUNBeGYsRUFBQW9ELEVBQUEsR0FDQW5ELEVBQUFtRCxFQUFBLEdBQ0EwVixjQUFBN21CLEVBQUE2bUIsY0FDQWxlLFNBQUEzSSxFQUFBMkksU0FDQWlpQixnQkFBQXZuQixFQUFBdW5CLGdCQUNBcHFCLFVBQUE2QyxFQUFBN0MsVUFDQW1xQixZQUFBdG5CLEVBQUFzbkIsWUFDQU8saUJBQUE5dEIsWUFyQkFzTSxHQUNBcFIsS0FBQSxZQXhMQWsxQixDQUFBdEMsRUFBQS9aLEVBQUFuUixFQUFBMEosR0FnTkEsU0FBQW9kLEVBQUFwZCxFQUFBMUssR0FJQSxJQUFBMG1CLEVBQUExbUIsRUFBQWlqQixRQUVBd0wsRUFBQXJwQixFQUFBc2hCLEdBQUEsOEJBQ0FnSSxFQUFBdHBCLEVBQUFzaEIsR0FBQSw2QkFHQXhtQixFQUFBNG5CLEVBQUEsU0FBQTBDLEVBQUE1c0IsR0FDQSxJQUFBaUosRUFBQTJqQixFQUFBakssaUJBQUExWixPQUNBLFNBQUFBLEVBQUE1UCxRQUFBaUosRUFBQTJHLEVBQUFpbUIsa0JBQUEsU0FBQTZCLEdBQ0EsSUFBQS93QixFQUFBK3dCLEVBQUFoRCxZQUFBLE1BQUFnRCxFQUFBbnRCLFVBQ0FrdEIsRUFBQTl3QixHQUFBK3dCLE1BSUEsSUFBQUMsS0FDQUMsS0FDQW52QixFQUFBUSxLQUFBdXVCLEVBQUEsU0FBQUUsRUFBQS93QixJQUNBOHdCLEVBQUE5d0IsSUFBQWl4QixFQUFBejZCLEtBQUF1NkIsS0FFQWp2QixFQUFBUSxLQUFBd3VCLEVBQUEsU0FBQUMsRUFBQS93QixJQUNBNndCLEVBQUE3d0IsSUFBQWd4QixFQUFBeDZCLEtBQUF1NkIsS0FFQUUsRUFBQWg1QixRQUFBbUssRUFBQTBLLGdCQUNBcFIsS0FBQSxXQUNBaTFCLGVBQUEsRUFDQU8sTUFBQUQsSUFFQUQsRUFBQS80QixRQUFBbUssRUFBQTBLLGdCQUNBcFIsS0FBQSxZQUNBaTFCLGVBQUEsRUFDQU8sTUFBQUYsSUFqUEFHLENBQUFqSCxFQUFBcGQsRUFBQTFLLEdBQ0E0cUIsK0ZDOUlBLElBQUFsckIsRUFBQTdMLEVBQUEsMkNBRUF5UyxFQUFBelMsRUFBQSw0Q0FvRUE2RSxFQUFBMEQsUUExQ0EsU0FBQTZ3QixFQUFBbHRCLEdBQ0EsSUFFQXVCLEVBRkE2USxLQUNBd1osRUFBQXNCLEVBQUF0QixZQUdBLFNBQUFBLEtBQUFycUIsRUFBQXZCLEVBQUFpdkIsaUJBQUFyRCxJQUNBLE9BQ0F4WixVQUlBLElBQUE1VyxFQUFBK0YsRUFBQUcsVUFDQUQsRUFBQThFLEVBQUEyb0IsZUFBQTF6QixFQUFBMHhCLEdBRUEsU0FBQXpyQixLQUFBLEdBQUE5QixFQUFBNkUsUUFBQS9DLEdBQ0EsT0FDQTJRLFVBSUEsSUFBQW5ILEVBQUF6UCxFQUFBdVAsaUJBQUF0SixHQUNBcEIsRUFBQWtCLEVBQUE0dEIsaUJBRUEsR0FBQTV0QixFQUFBNnRCLG1CQUNBaGQsRUFBQTdRLEVBQUE2dEIsbUJBQUEzdEIsWUFDRyxHQUFBcEIsS0FBQWd2QixZQUNIamQsRUFBQS9SLEVBQUFndkIsWUFBQTd6QixFQUFBOHpCLFVBQUEzdkIsRUFBQTFHLElBQUFvSCxFQUFBK0MsV0FBQSxTQUFBTixHQUNBLE9BQUF0SCxFQUFBbU0sYUFBQTdFLEtBQ0tyQixHQUFBLGFBQ0YsR0FBQXdKLEVBQUEsQ0FFSCxJQUFBc2tCLEVBQUF0a0IsRUFBQStKLGtCQUFBa0ssUUFDQXFRLEVBQUFwWSxlQUFBbE0sRUFBQWdOLFdBQ0E3RixHQUFBbWQsRUFBQXZnQixFQUFBdWdCLEVBQUF2bEIsTUFBQSxFQUFBdWxCLEVBQUF0Z0IsRUFBQXNnQixFQUFBeGMsT0FBQSxHQUdBLE9BQ0FYLFFBQ0FuSCw2RkNsRUEsSUFBQXRMLEVBQUE3TCxFQUFBLDJDQUVBMDdCLEVBQUExN0IsRUFBQSwwQ0F3QkF1UixHQUFBRCxFQXRCQXRSLEVBQUEsNENBRUFzUixhQXFCQWpGLEVBQUFSLEVBQUFRLEtBNERBLFNBQUFzdkIsRUFBQUMsRUFBQXo2QixFQUFBMFYsR0FDQStrQixFQUFBQyxRQUFBLGFBQUFobEIsR0FHQSxTQUFBaWxCLEVBQUE5TSxFQUFBNE0sRUFBQXo2QixFQUFBMFYsR0FDQStrQixFQUFBQyxRQUFBN00sRUFBQTd0QixFQUFBMFYsR0FnREF0TyxFQUFBa0UsU0F4R0EsU0FBQTFDLEVBQUFvQyxFQUFBMHZCLEdBQ0EsSUFBQUgsRUFBQUssS0FBQSxDQUlBLElBQUFsSixFQUFBMW1CLEVBQUFpakIsUUFDQTdkLEVBQUFzaEIsR0FBQW1KLFVBQUF6cUIsRUFBQXNoQixHQUFBbUosWUFNQSxTQUFBbkosRUFBQTFtQixHQVdBLFNBQUE4dkIsRUFBQUMsRUFBQXYzQixHQUNBa3VCLEVBQUE1WixHQUFBaWpCLEVBQUEsU0FBQS82QixHQUNBLElBQUFnN0IsRUFrQ0EsU0FBQWh3QixHQUNBLElBQUFpd0IsR0FDQUMsV0FDQUMsWUFPQXpsQixFQUFBLFNBQUExSixHQUNBLElBQUFvdkIsRUFBQUgsRUFBQWp2QixFQUFBMUgsTUFFQTgyQixFQUNBQSxFQUFBaDhCLEtBQUE0TSxJQUVBQSxFQUFBMEosaUJBQ0ExSyxFQUFBMEssZUFBQTFKLEtBSUEsT0FDQTBKLGlCQUNBdWxCLFlBekRBSSxDQUFBcndCLEdBQ0FFLEVBQUFrRixFQUFBc2hCLEdBQUFtSixRQUFBLFNBQUFKLEdBQ0FBLEdBQUFqM0IsRUFBQWkzQixFQUFBejZCLEVBQUFnN0IsRUFBQXRsQixrQkFPQSxTQUFBdWxCLEVBQUFqd0IsR0FDQSxJQUVBc3dCLEVBRkFDLEVBQUFOLEVBQUFDLFFBQUFyNkIsT0FDQTI2QixFQUFBUCxFQUFBRSxRQUFBdDZCLE9BR0EwNkIsRUFDQUQsRUFBQUwsRUFBQUMsUUFBQUssRUFBQSxHQUNHQyxJQUNIRixFQUFBTCxFQUFBRSxRQUFBSyxFQUFBLElBR0FGLElBQ0FBLEVBQUE1bEIsZUFBQSxLQUNBMUssRUFBQTBLLGVBQUE0bEIsSUFsQkFHLENBQUFULEVBQUFDLFNBQUFqd0IsS0FoQkFvRixFQUFBc2hCLEdBQUFnSyxjQUlBdHJCLEVBQUFzaEIsR0FBQWdLLGFBQUEsRUFDQVosRUFBQSxRQUFBcHdCLEVBQUF5RyxNQUFBd3BCLEVBQUEsVUFDQUcsRUFBQSxZQUFBcHdCLEVBQUF5RyxNQUFBd3BCLEVBQUEsY0FFQUcsRUFBQSxZQUFBTixJQWRBbUIsQ0FBQWpLLEVBQUExbUIsSUFDQW9GLEVBQUFzaEIsR0FBQW1KLFFBQUFqeUIsS0FBQXdILEVBQUFzaEIsR0FBQW1KLFFBQUFqeUIsUUFDQTh4QixZQWdHQXR6QixFQUFBNG1CLFdBZEEsU0FBQXBsQixFQUFBb0MsR0FDQSxJQUFBdXZCLEVBQUFLLEtBQUEsQ0FJQSxJQUFBbEosRUFBQTFtQixFQUFBaWpCLFNBQ0E3ZCxFQUFBc2hCLEdBQUFtSixhQUF1Q2p5QixLQUd2Q3dILEVBQUFzaEIsR0FBQW1KLFFBQUFqeUIsR0FBQSwyRkN4SUEsSUFBQThCLEVBQUE3TCxFQUFBLDJDQUVBK2lCLEVBQUEvaUIsRUFBQSw2Q0FvQkFxTSxFQUFBUixFQUFBUSxLQUNBaUcsRUFBQXpHLEVBQUF5RyxNQWdOQSxTQUFBeXFCLEVBQUFDLEVBQUFDLEdBQ0EsY0FBQUQsR0FBQW54QixFQUFBNkUsUUFBQXNzQixJQUFBbnhCLEVBQUF2TCxRQUFBMDhCLEVBQUFDLElBQUEsR0FBQUQsSUFBQUMsRUFpREEsU0FBQTVLLEVBQUFuakIsR0FDQSxJQUFBb2UsR0FBQXBlLEVBQUFoRCxRQUFBbWhCLGFBQUEsb0JBQTZFQyxpQkFDN0UsT0FBQUEsS0FBQTJHLFNBQUF1RSxFQUFBdHBCLElBUUEsU0FBQWd1QixFQUFBeFEsR0FDQSxRQUFBQSxFQUFBM3JCLElBQUEsZUFRQSxTQUFBeTNCLEVBQUEvQyxHQUNBLE9BQUFBLEVBQUFod0IsS0FBQSxLQUFBZ3dCLEVBQUFyekIsR0FHQW1HLEVBQUFnbEIsUUF0UkEsU0FBQXJoQixFQUFBQyxHQUNBLElBQUEzSCxHQWNBeXZCLFlBQ0FrSixnQkFBQSxFQU1BN1Asb0JBQ0FrTSxnQkFLQSxPQUdBLFNBQUFoMUIsRUFBQTBILEVBQUFDLEdBQ0EsSUFBQTRpQixFQUFBN2lCLEVBQUFtaEIsYUFBQSxXQUNBeUIsRUFBQTVpQixFQUFBbWhCLGFBQUEsZUFFQStQLEVBQUF0TyxFQUFBL3RCLElBQUEsZUFDQXM4QixLQUVBaHhCLEVBQUFGLEVBQUFLLHVCQUFBLFNBQUFELEdBRUEsR0FBQUEsRUFBQSt3QixtQkFBQSxDQUlBLElBQUEvRSxFQUFBQyxFQUFBanNCLEVBQUFrcEIsT0FDQThILEVBQUEvNEIsRUFBQThvQixpQkFBQWlMLE1BQ0EvekIsRUFBQWcxQixZQUFBakIsR0FBQWhzQixFQUdBLElBQUErckIsRUFBQS9yQixFQUFBa3BCLE1BQ0ErSCxFQUFBbEYsRUFBQWxlLFNBQUEsVUFBQTJVLEdBSUEsR0FIQTFpQixFQUFBRSxFQUFBa3hCLFVBQUFuckIsRUFBQW9yQixHQUFBLFNBR0FueEIsRUFBQW94QixnQkFBQTVPLEdBRUF5TyxFQUFBejhCLElBQUEsU0FHQSxJQUFBNjhCLEVBQUEsU0FBQUosRUFBQXo4QixJQUFBLFdBQ0E4OEIsRUFBQSxVQUFBTCxFQUFBejhCLElBQUEsb0JBQ0ErOEIsRUFBQXZ4QixFQUFBb3hCLGVBQUFILEVBQUF6OEIsSUFBQSxzQkFFQTY4QixHQUFBQyxJQUNBeHhCLEVBQUF5eEIsRUFBQUMsU0FBQXpyQixFQUFBb3JCLEdBQUFHLEdBQUEsUUFBQUQsSUFHQUMsR0FDQXh4QixFQUFBeXhCLEVBQUFFLFVBQUExckIsRUFBQW9yQixFQUFBLGNBTUEsU0FBQUEsRUFBQU8sRUFBQXRRLEVBQUFsSixHQUNBLElBQUFpSSxFQUFBakksRUFBQWdSLE1BQUFyYixTQUFBLGNBQUEwVSxHQUNBb1AsRUFBQXhSLEVBQUEzckIsSUFBQSxRQUVBLEdBQUFtOUIsSUFBQSxTQUFBQSxHQUFBRCxHQUFBZixFQUFBeFEsSUFBQSxDQUlBLE1BQUFpQixJQUNBQSxFQUFBakIsRUFBQTNyQixJQUFBLG1CQUlBLElBQUEyc0IsR0FEQWhCLEVBQUF1UixFQWdDQSxTQUFBeFosRUFBQStZLEVBQUExTyxFQUFBNWlCLEVBQUEreEIsRUFBQXRRLEdBQ0EsSUFBQXdRLEVBQUFYLEVBQUFwakIsU0FBQSxlQUNBZ2tCLEtBQ0EveEIsR0FBQSw0SEFBQWd5QixHQUNBRCxFQUFBQyxHQUFBeHlCLEVBQUF1ZixNQUFBK1MsRUFBQXA5QixJQUFBczlCLE1BS0FELEVBQUExUSxLQUFBLGFBQUFqSixFQUFBaGYsUUFBQWtvQixFQUdBLFVBQUF3USxFQUFBcDlCLElBQUEsVUFDQXE5QixFQUFBMzRCLEtBQUEsUUFHQSxJQUFBNjRCLEVBQUFGLEVBQUF2cEIsUUFBQXVwQixFQUFBdnBCLFVBSUEsR0FGQSxNQUFBeXBCLEVBQUExcEIsT0FBQTBwQixFQUFBMXBCLE1BQUEsR0FFQSxVQUFBcXBCLEVBQUEsQ0FFQSxJQUFBTSxFQUFBSixFQUFBcDlCLElBQUEsY0FJQSxHQUhBdTlCLEVBQUExcEIsS0FBQSxNQUFBMnBCLE1BR0E1USxFQUFBLENBQ0EsSUFBQTZRLEVBQUFKLEVBQUFub0IsVUFBQWtvQixFQUFBcDlCLElBQUEsY0FDQXk5QixHQUFBM3lCLEVBQUFvTyxTQUFBcWtCLEVBQUFFLEVBQUFsVyxZQUlBLE9BQUE3RCxFQUFBZ1IsTUFBQXJiLFNBQUEsa0JBQUEySSxFQUFBcWIsRUFBQXRQLEVBQUE1aUIsSUFoRUF1eUIsQ0FBQWhhLEVBQUErWSxFQUFBMU8sRUFBQTVpQixFQUFBK3hCLEVBQUF0USxHQUFBakIsR0FDQTNyQixJQUFBLFFBQ0FnSixFQUFBeXVCLEVBQUEvVCxFQUFBZ1IsT0FDQXdCLEVBQUF0SixHQUFBRCxHQUFBLGFBQUFqSixFQUFBaGYsS0FFQWt4QixFQUFBbnlCLEVBQUF5dkIsU0FBQWxxQixJQUNBQSxNQUNBMGEsT0FDQWxZLFdBQ0FtZ0IsbUJBQ0FpQixpQkFDQXNKLGdCQUNBdkosT0FDQThNLFVBQUEwQyxFQUFBeFEsR0FDQTRLLGlCQUVBaUcsRUFBQXh6QixHQUFBNHNCLEVBQ0FueUIsRUFBQTI0QixnQkFBQWxHLEVBQ0EsSUFBQXlILEVBd0ZBLFNBQUF0QixFQUFBM1ksR0FJQSxJQUhBLElBQUF2VixFQUFBdVYsRUFBQWdSLE1BQ0F6bUIsRUFBQXlWLEVBQUF6VixJQUVBak4sRUFBQSxFQUFpQkEsRUFBQXE3QixFQUFBcDdCLE9BQXdCRCxJQUFBLENBQ3pDLElBQUE0OEIsRUFBQXZCLEVBQUFyN0IsT0FFQSxHQUFBZzdCLEVBQUE0QixFQUFBM3ZCLEVBQUEsVUFBQUUsRUFBQTlNLEtBQUEyNkIsRUFBQTRCLEVBQUEzdkIsRUFBQSxhQUFBRSxFQUFBdVUsaUJBQUFzWixFQUFBNEIsRUFBQTN2QixFQUFBLFlBQUFFLEVBQUF0TyxNQUNBLE9BQUFtQixHQWhHQTY4QixDQUFBeEIsRUFBQTNZLEdBRUEsU0FBQWlhLEVBQUEsQ0FDQSxJQUFBekUsRUFBQW9ELEVBQUFxQixLQUFBckIsRUFBQXFCLElBQ0F6SyxjQUVBZ0csRUFBQWhHLFNBQUFscUIsR0FBQTRzQixFQUNBc0QsRUFBQUksT0FBQStDLEVBQUFzQixHQUFBckUsT0FDQTFELEVBQUFzRCxpQkF2RkE0RSxDQUFBcjZCLEVBQUEwSCxFQUFBQyxHQUVBM0gsRUFBQTI0QixnQkE4SEEsU0FBQTM0QixFQUFBMEgsR0FFQUEsRUFBQTR5QixXQUFBLFNBQUFyeEIsR0FFQSxJQUFBbEIsRUFBQWtCLEVBQUE0dEIsaUJBQ0EwRCxFQUFBdHhCLEVBQUExTSxJQUFBLHNCQUNBaStCLEVBQUF2eEIsRUFBQTFNLElBQUEsbUJBRUF3TCxHQUFBLFNBQUF3eUIsSUFBQSxJQUFBQSxHQUFBLFNBQUFBLElBQUEsSUFBQUMsSUFBQSxJQUFBdnhCLEVBQUExTSxJQUFBLHdCQUlBc0wsRUFBQTdILEVBQUE4b0IsaUJBQUFrTCxFQUFBanNCLEVBQUFrcEIsUUFBQSxTQUFBa0IsR0FDQSxJQUFBbFMsRUFBQWtTLEVBQUFsUyxLQUVBbFksRUFBQTB5QixRQUFBeGEsRUFBQXpWLE9BQUF5VixJQUNBa1MsRUFBQVcsYUFBQS8yQixLQUFBa04sR0FDQSxNQUFBa3BCLEVBQUF2RSxrQkFBQXVFLEVBQUF2RSxnQkFBQSxHQUNBdUUsRUFBQXZFLGlCQUFBM2tCLEVBQUFHLFVBQUFvRyxZQUdHdkosTUFuSkh5MEIsQ0FBQTE2QixFQUFBMEgsR0FDQTFILEdBMlBBK0QsRUFBQTBqQixTQXRFQSxTQUFBL2MsR0FDQSxJQUFBeW5CLEVBQUF0RSxFQUFBbmpCLEdBRUEsR0FBQXluQixFQUFBLENBSUEsSUFBQWpLLEVBQUFpSyxFQUFBakssaUJBQ0E1RyxFQUFBNlEsRUFBQWxTLEtBQUFxQixNQUNBOVMsRUFBQTBaLEVBQUExWixPQUNBNVAsRUFBQXNwQixFQUFBM3JCLElBQUEsVUFDQUUsRUFBQXlyQixFQUFBM3JCLElBQUEsU0FFQSxNQUFBRSxJQUNBQSxFQUFBNmtCLEVBQUF2aUIsTUFBQXRDLElBR0EsSUFBQXU1QixFQUFBMEMsRUFBQXhRLEdBR0EsTUFBQXRwQixJQUNBNFAsRUFBQTVQLE9BQUFvM0IsRUFBQSxlQUdBLElBQUFuWSxFQUFBeUQsRUFBQXBCLFlBQUF4ZixRQUNBbWQsRUFBQSxHQUFBQSxFQUFBLElBQUFBLEVBQUE4YyxXQUdBLE1BQUFsK0IsR0FFQUEsRUFBQW9oQixFQUFBLE1BRUFwaEIsRUFBQW9oQixFQUFBLElBR0FwaEIsRUFBQW9oQixFQUFBLEtBQ0FwaEIsRUFBQW9oQixFQUFBLElBR0FyUCxFQUFBL1IsUUFFQXU1QixJQUNBeG5CLEVBQUE1UCxPQUFBdXpCLEVBQUFsUyxLQUFBcUIsTUFBQUMsVUFBQSxpQkE2QkF4ZCxFQUFBOHBCLGNBQ0E5cEIsRUFBQW9rQixvQkFyQkEsU0FBQXpkLEdBQ0EsSUFBQXluQixFQUFBdEUsRUFBQW5qQixHQUNBLE9BQUF5bkIsS0FBQWpLLGtCQW9CQW5rQixFQUFBaXdCLDRGQ3BUQSxJQUFBM3NCLEVBQUE3TCxFQUFBLDJDQUVBd1csRUFBQXhXLEVBQUEsOENBRUF5ZSxFQUFBemUsRUFBQSw4Q0FFQThpQixFQUFBOWlCLEVBQUEsNkNBRUEya0IsRUFBQTNrQixFQUFBLDZDQUVBby9CLEVBQUFwL0IsRUFBQSxrREFFQTBqQixFQUFBMWpCLEVBQUEsNERBNENBLFNBQUFxL0IsRUFBQWhPLEVBQUFuaUIsRUFBQXdkLEVBQUF2Z0IsRUFBQW16QixHQUNBLElBQ0E5bUIsRUFBQSttQixFQURBN1MsRUFBQTNyQixJQUFBLFNBQ0FtTyxFQUFBdVYsS0FBQXZWLEVBQUFoRCxRQUFBd2dCLEVBQUEzckIsSUFBQSxzQkFDQWl0QixVQUFBdEIsRUFBQTNyQixJQUFBLG1CQUNBOHBCLFVBQUE2QixFQUFBM3JCLElBQUEscUJBRUF3YSxFQUFBbVIsRUFBQXRTLFNBQUEsU0FDQW9sQixFQUFBMWMsRUFBQTJjLGtCQUFBbGtCLEVBQUF4YSxJQUFBLGVBQ0E4ZixFQUFBdEYsRUFBQXVGLFVBQ0FHLEVBQUF4QyxFQUFBeUMsZ0JBQUExSSxFQUFBcUksR0FDQS9LLEVBQUF3cEIsRUFBQXhwQixTQUNBSSxFQUFBK0ssRUFBQS9LLE1BQUFzcEIsRUFBQSxHQUFBQSxFQUFBLEdBQ0F2Z0IsRUFBQWdDLEVBQUFoQyxPQUFBdWdCLEVBQUEsR0FBQUEsRUFBQSxHQUVBekosRUFBQXVKLEVBQUF2SixNQUNBLFVBQUFBLElBQUFqZ0IsRUFBQSxJQUFBSSxHQUNBLFdBQUE2ZixJQUFBamdCLEVBQUEsSUFBQUksRUFBQSxHQUNBLElBQUFrRyxFQUFBa2pCLEVBQUFsakIsY0FDQSxXQUFBQSxJQUFBdEcsRUFBQSxJQUFBbUosR0FDQSxXQUFBN0MsSUFBQXRHLEVBQUEsSUFBQW1KLEVBQUEsR0FzQ0EsU0FBQW5KLEVBQUFJLEVBQUErSSxFQUFBOVMsR0FDQSxJQUFBeVMsRUFBQXpTLEVBQUF5UixXQUNBaUIsRUFBQTFTLEVBQUEwUixZQUNBL0gsRUFBQSxHQUFBMEIsS0FBQXNLLElBQUFoTSxFQUFBLEdBQUFJLEVBQUEwSSxHQUFBMUksRUFDQUosRUFBQSxHQUFBMEIsS0FBQXNLLElBQUFoTSxFQUFBLEdBQUFtSixFQUFBSixHQUFBSSxFQUNBbkosRUFBQSxHQUFBMEIsS0FBQW1HLElBQUE3SCxFQUFBLE1BQ0FBLEVBQUEsR0FBQTBCLEtBQUFtRyxJQUFBN0gsRUFBQSxNQTFDQTRwQixDQUFBNXBCLEVBQUFJLEVBQUErSSxFQUFBOVMsR0FDQSxJQUFBd3pCLEVBQUFwa0IsRUFBQXhhLElBQUEsbUJBRUE0K0IsR0FBQSxTQUFBQSxJQUNBQSxFQUFBendCLEVBQUFuTyxJQUFBLDZCQUdBc3dCLEVBQUF4YyxPQUNBNkUsT0FDQXdCLEVBQUEsRUFDQUMsRUFBQSxFQUNBakYsUUFDQStJLFNBQ0F4VixFQUFBOFIsRUFBQXhhLElBQUEsaUJBRUErVSxXQUFBNVEsUUFFQWtXLE9BQ0E1QyxPQUNBdVIsU0FBQWxKLEVBQ0ErSCxTQUFBck4sRUFBQWlOLGVBQ0FnQixhQUFBLFNBQ0FyUCxLQUFBd2xCLEVBQ0FwakIsT0FBQWhCLEVBQUF4YSxJQUFBLDhCQUNBNitCLFVBQUFya0IsRUFBQXhhLElBQUEsa0JBQ0FzdEIsV0FBQTlTLEVBQUF4YSxJQUFBLGNBQ0F1dEIsWUFBQS9TLEVBQUF4YSxJQUFBLGVBQ0EwdEIsY0FBQWxULEVBQUF4YSxJQUFBLGlCQUNBMnRCLGNBQUFuVCxFQUFBeGEsSUFBQSxrQkFHQXNYLEdBQUEsSUF3QkEsU0FBQWtuQixFQUFBdCtCLEVBQUF3akIsRUFBQXZZLEVBQUErc0IsRUFBQXpxQixHQUNBdk4sRUFBQXdqQixFQUFBcUIsTUFBQXZpQixNQUFBdEMsR0FDQSxJQUFBdVgsRUFBQWlNLEVBQUFxQixNQUFBK1osU0FFQTUrQixHQUNBK3NCLFVBQUF4ZixFQUFBd2YsWUFFQW5ELEVBQUFyYyxFQUFBcWMsVUFFQSxHQUFBQSxFQUFBLENBQ0EsSUFBQTNXLEdBQ0FqVCxNQUFBbStCLEVBQUFVLGdCQUFBcmIsRUFBQXhqQixHQUNBOCtCLGVBRUFsMEIsRUFBQVEsS0FBQTRzQixFQUFBLFNBQUErRyxHQUNBLElBQUF6SSxFQUFBcnJCLEVBQUFpdkIsaUJBQUE2RSxFQUFBbEksYUFDQW5xQixFQUFBcXlCLEVBQUFqSSxnQkFDQWtJLEVBQUExSSxLQUFBdGpCLGNBQUF0RyxHQUNBc3lCLEdBQUEvckIsRUFBQTZyQixXQUFBeC9CLEtBQUEwL0IsS0FHQXAwQixFQUFBcTBCLFNBQUFyVixHQUNBclMsRUFBQXFTLEVBQUFqZixRQUFBLFVBQXVDNE0sR0FDbEMzTSxFQUFBczBCLFdBQUF0VixLQUNMclMsRUFBQXFTLEVBQUEzVyxJQUlBLE9BQUFzRSxFQVdBLFNBQUFvZCxFQUFBblIsRUFBQXhqQixFQUFBdTBCLEdBQ0EsSUFBQXJSLEVBQUFRLEVBQUE3YSxTQUdBLE9BRkE2YSxFQUFBOU8sT0FBQXNPLElBQUFxUixFQUFBbmEsVUFDQXNKLEVBQUF5YixVQUFBamMsSUFBQXFSLEVBQUExZixVQUNBVSxFQUFBNk0sZ0JBQUFvQixFQUFBZ0UsWUFBQXhuQixJQUFBdTBCLEVBQUE3UixhQUFBLElBQUE2UixFQUFBMVIsZ0JBQUEsSUFBQTBSLEVBQUEvTixhQUFBLElBQUF0RCxHQXlEQTViLEVBQUErc0IsYUFwTUEsU0FBQTVJLEdBQ0EsSUFFQXRSLEVBRkEwWixFQUFBcEksRUFBQTNyQixJQUFBLFFBQ0FzL0IsRUFBQTNULEVBQUF0UyxTQUFBMGEsRUFBQSxTQVdBLE1BUkEsU0FBQUEsR0FDQTFaLEVBQUFpbEIsRUFBQTdqQixnQkFDQXJDLEtBQUEsS0FDRyxXQUFBMmEsS0FDSDFaLEVBQUFpbEIsRUFBQUMsZ0JBQ0EvakIsT0FBQSxNQUdBbkIsR0F3TEE3UyxFQUFBODJCLHFCQUNBOTJCLEVBQUFnM0IsZ0JBQ0FoM0IsRUFBQXF0Qix5QkFDQXJ0QixFQUFBbXRCLGtDQTFEQSxTQUFBejBCLEVBQUFvd0IsRUFBQW1FLEVBQUF0bUIsRUFBQXdkLEVBQUF2Z0IsR0FDQSxJQUFBbzBCLEVBQUE3YyxFQUFBbUUsZ0JBQUEyTixFQUFBbmEsU0FBQSxFQUFBbWEsRUFBQTFSLGdCQUNBMFIsRUFBQS9OLFlBQUFpRixFQUFBM3JCLElBQUEsZ0JBQ0FzK0IsRUFBQWhPLEVBQUFuaUIsRUFBQXdkLEVBQUF2Z0IsR0FDQTJKLFNBQUE4ZixFQUFBMW1CLEVBQUF1VixLQUFBeGpCLEVBQUF1MEIsR0FDQU8sTUFBQXdLLEVBQUFya0IsVUFDQUUsY0FBQW1rQixFQUFBcGtCLHFCQXFEQTVULEVBQUEydEIsY0EzQ0EsU0FBQXNLLEVBQUFDLEVBQUFqTSxHQUVBLE9BQ0FoVSxHQUFBZ2dCLEVBRkFoTSxLQUFBLEdBR0EvVCxHQUFBK2YsRUFBQSxFQUFBaE0sR0FDQTlULEdBQUErZixFQUFBak0sR0FDQTdULEdBQUE4ZixFQUFBLEVBQUFqTSxLQXNDQWpzQixFQUFBZ3VCLGNBNUJBLFNBQUFqQyxFQUFBQyxFQUFBQyxHQUVBLE9BQ0F0WixFQUFBb1osRUFGQUUsS0FBQSxHQUdBclosRUFBQW1aLEVBQUEsRUFBQUUsR0FDQXRlLE1BQUFxZSxFQUFBQyxHQUNBdlYsT0FBQXNWLEVBQUEsRUFBQUMsS0F1QkFqc0IsRUFBQW00QixnQkFuQkEsU0FBQXppQixFQUFBQyxFQUFBdkUsRUFBQWxRLEVBQUE2TCxFQUFBZ0MsR0FDQSxPQUNBMkcsS0FDQUMsS0FDQXZFLEtBQ0FsUSxJQUNBNkwsYUFDQWdDLFdBQ0FqQyxXQUFBLHVFQ3BPQSxJQUFBc3JCLEVBQUEzZ0MsRUFBQSxpREFFQTRnQyxFQUFBNWdDLEVBQUEsZ0RBSUE2Z0MsRUFGQTdnQyxFQUFBLDBEQUVBNmdDLG1CQUlBQyxFQUZBOWdDLEVBQUEsd0RBRUE4Z0Msd0JBNkJBSCxFQUFBenZCLFFBQ0F6TCxLQUFBLFVBS0FxUCxlQUVBaXNCLGVBQUFELEVBRUFFLGFBQUEsS0FDQTF4QixXQUFBLEtBQ0FqRSxPQUFBLE1BRUE0MUIsY0FBQSxXQUNBSixFQUFBcDJCLFNBR0FtMkIsRUFBQTF2QixRQUNBekwsS0FBQSw0RkMxREEsSUFBQXk3QixFQUFBbGhDLEVBQUEsNkNBRUFtaEMsRUFBQUQsRUFBQUMsY0FDQUMsRUFBQUYsRUFBQUcsSUFDQUMsRUFBQUosRUFBQUksZ0JBRUF4ZSxFQUFBOWlCLEVBQUEsNkNBRUF3VyxFQUFBeFcsRUFBQSw4Q0ErREF1SSxFQUFBNk8sT0FuQ0EsU0FBQTJGLEVBQUF3a0IsRUFBQXAxQixHQUNBLElBQUFxMUIsRUFBQUQsRUFBQUUscUJBQ0F2VCxFQUFBcVQsRUFBQXhnQyxJQUFBLFdBQ0EyZ0MsR0FDQXhyQixNQUFBL0osRUFBQXlSLFdBQ0FxQixPQUFBOVMsRUFBQTBSLGFBRUE0ZCxFQUFBMEYsRUFBQUssRUFBQUUsRUFBQXhULEdBQ0FrVCxFQUFBRyxFQUFBeGdDLElBQUEsVUFBQWdjLEVBQUF3a0IsRUFBQXhnQyxJQUFBLFdBQUEwNkIsRUFBQXZsQixNQUFBdWxCLEVBQUF4YyxRQUNBcWlCLEVBQUF2a0IsRUFBQXlrQixFQUFBRSxFQUFBeFQsSUEyQkEzbEIsRUFBQW81QixlQXhCQSxTQUFBbEcsRUFBQThGLEdBQ0EsSUFBQXJULEVBQUFwTCxFQUFBMmMsa0JBQUE4QixFQUFBeGdDLElBQUEsWUFDQXFhLEVBQUFtbUIsRUFBQWxuQixjQUFBLG9CQWtCQSxPQWpCQWUsRUFBQWpCLEtBQUFvbkIsRUFBQXhnQyxJQUFBLG1CQUNBMDZCLEVBQUEsSUFBQWpsQixFQUFBa2MsTUFDQWhaLE9BQ0F3QixFQUFBdWdCLEVBQUF2Z0IsRUFBQWdULEVBQUEsR0FDQS9TLEVBQUFzZ0IsRUFBQXRnQixFQUFBK1MsRUFBQSxHQUNBaFksTUFBQXVsQixFQUFBdmxCLE1BQUFnWSxFQUFBLEdBQUFBLEVBQUEsR0FDQWpQLE9BQUF3YyxFQUFBeGMsT0FBQWlQLEVBQUEsR0FBQUEsRUFBQSxHQUNBemtCLEVBQUE4M0IsRUFBQXhnQyxJQUFBLGlCQUVBcWEsUUFDQTJJLFFBQUEsRUFDQTFMLElBQUEsdUZDOURBLElBQUF4TSxFQUFBN0wsRUFBQSwyQ0EwQkEyTSxHQU1BMEcsa0JBQUEsU0FBQVMsR0FDQXJKLEtBQUFtM0IsWUFBQS8xQixFQUFBNkUsUUFBQW9ELEtBQUE1TyxXQUNBdUYsS0FBQW8zQixpQkFBQWgyQixFQUFBaTJCLE9BQUFodUIsTUFBQSxTQUFBaXVCLEVBQUFDLEdBRUEsT0FEQUQsRUFBQS9nQyxJQUFBZ2hDLEVBQUFwaEMsS0FBQW9oQyxHQUNBRCxHQUNLbDJCLEVBQUFvMkIsa0JBV0xDLE9BQUEsU0FBQXRoQyxFQUFBd0IsR0FDQSxJQUFBNC9CLEVBQUEsTUFBQTUvQixFQUFBcUksS0FBQW0zQixZQUFBeC9CLEdBQUFxSSxLQUFBbzNCLGlCQUFBOWdDLElBQUFILEdBR0EsV0FGQTZKLEtBQUExSixJQUFBLGlCQUdBMEosS0FBQW8zQixpQkFBQXgxQixLQUFBLFNBQUEyMUIsR0FDQUEsRUFBQTUwQixVQUFBLElBSUE0MEIsTUFBQTUwQixVQUFBLElBVUErMEIsU0FBQSxTQUFBdmhDLEVBQUF3QixHQUNBLElBQUE0L0IsRUFBQSxNQUFBNS9CLEVBQUFxSSxLQUFBbTNCLFlBQUF4L0IsR0FBQXFJLEtBQUFvM0IsaUJBQUE5Z0MsSUFBQUgsR0FHQW9oQyxNQUFBNTBCLFVBQUEsSUFVQWcxQixlQUFBLFNBQUF4aEMsRUFBQXdCLEdBQ0EsSUFBQTQvQixFQUFBLE1BQUE1L0IsRUFBQXFJLEtBQUFtM0IsWUFBQXgvQixHQUFBcUksS0FBQW8zQixpQkFBQTlnQyxJQUFBSCxHQUVBLFNBQUFvaEMsRUFFQSxPQURBdjNCLEtBQUF1M0IsRUFBQTUwQixTQUFBLHFCQUFBeE0sRUFBQXdCLEdBQ0E0L0IsRUFBQTUwQixVQVdBVSxXQUFBLFNBQUFsTixFQUFBd0IsR0FDQSxJQUFBNC9CLEVBQUEsTUFBQTUvQixFQUFBcUksS0FBQW0zQixZQUFBeC9CLEdBQUFxSSxLQUFBbzNCLGlCQUFBOWdDLElBQUFILEdBQ0EsT0FBQW9oQyxLQUFBNTBCLFdBR0F2SSxFQUFBMEQsUUFBQW9FLG9FQ3ZHQSxJQUFBRyxFQUFBOU0sRUFBQSx5Q0FFQUEsRUFBQSw4REFFQUEsRUFBQSwrREFFQUEsRUFBQSw2REFFQSxJQUFBcWlDLEVBQUFyaUMsRUFBQSwrREFFQXNpQyxFQUFBdGlDLEVBQUEsaURBc0JBOE0sRUFBQXlGLGtCQUFBOHZCLEdBQ0FDLEVBQUFDLHlCQUFBLG9CQUVBLDhGQ25DQSxJQUFBejFCLEVBQUE5TSxFQUFBLHlDQUVBNkwsRUFBQTdMLEVBQUEsMkNBRUEraUIsRUFBQS9pQixFQUFBLDZDQUlBd2lDLEVBRkF4aUMsRUFBQSw0Q0FFQXdpQyxnQkFvQkFDLEVBQUEzMUIsRUFBQTBnQixzQkFDQS9uQixLQUFBLGVBQ0FpOUIsY0FBQSxVQUNBQyxZQUNBbDlCLEtBQUEsTUFRQW05QixZQUFBLEdBRUE3dkIsS0FBQSxTQUFBQyxFQUFBNnZCLEVBQUEzMkIsR0FDQXpCLEtBQUFxNEIscUJBQUE5dkIsRUFBQTlHLEdBQ0E4RyxFQUFBNUYsU0FBQTRGLEVBQUE1RixjQUVBb0csWUFBQSxTQUFBUixHQUNBeXZCLEVBQUEvdUIsVUFBQWpKLEtBQUEsY0FBQXVJLElBRUFpdUIsY0FBQSxXQUNBeDJCLEtBQUFzNEIsWUFBQXQ0QixLQUFBeUIsU0FFQSxJQUFBODJCLEVBQUF2NEIsS0FBQXFTLE1BRUEsR0FBQWttQixFQUFBLGVBQUF2NEIsS0FBQTFKLElBQUEsaUJBR0EsSUFGQSxJQUFBa2lDLEdBQUEsRUFFQWxoQyxFQUFBLEVBQXFCQSxFQUFBaWhDLEVBQUFoaEMsT0FBdUJELElBQUEsQ0FDNUMsSUFBQW5CLEVBQUFvaUMsRUFBQWpoQyxHQUFBaEIsSUFBQSxRQUVBLEdBQUEwSixLQUFBcUQsV0FBQWxOLEdBQUEsQ0FFQTZKLEtBQUF5M0IsT0FBQXRoQyxHQUNBcWlDLEdBQUEsRUFDQSxRQUtBQSxHQUFBeDRCLEtBQUF5M0IsT0FBQWMsRUFBQSxHQUFBamlDLElBQUEsV0FHQWdpQyxZQUFBLFNBQUE3MkIsR0FDQSxJQUFBZzNCLEtBQ0FDLEtBQ0FqM0IsRUFBQWszQixjQUFBLFNBQUEzMUIsR0FDQSxJQUVBNDFCLEVBRkFDLEVBQUE3MUIsRUFBQTdNLEtBSUEsR0FIQXVpQyxFQUFBNWlDLEtBQUEraUMsR0FHQTcxQixFQUFBMEYsbUJBQUEsQ0FDQSxJQUFBekwsRUFBQStGLEVBQUEwRixxQkFDQW93QixFQUFBNzdCLEVBQUE4N0IsU0FBQTk3QixFQUFBbUcsU0FFQTNCLEVBQUF1M0IsaUJBQUFoMkIsS0FDQTAxQixJQUFBcjlCLE9BQUF5OUIsSUFHQUEsRUFBQXZoQyxPQUNBa2hDLElBQUFwOUIsT0FBQXk5QixHQUVBRixHQUFBLE9BR0FBLEdBQUEsRUFHQUEsR0FBQWIsRUFBQS8wQixJQUNBeTFCLEVBQUEzaUMsS0FBQWtOLEVBQUE3TSxRQVFBNkosS0FBQWk1QixnQkFBQVAsRUFHQSxJQUFBUSxFQUFBbDVCLEtBQUExSixJQUFBLFNBQUFtaUMsRUFDQUYsRUFBQW4zQixFQUFBMUcsSUFBQXcrQixFQUFBLFNBQUFDLEdBUUEsTUFOQSxpQkFBQUEsR0FBQSxpQkFBQUEsSUFDQUEsR0FDQWhqQyxLQUFBZ2pDLElBSUEsSUFBQTdnQixFQUFBNmdCLEVBQUFuNUIsVUFBQXlCLFVBQ0t6QixNQU1MQSxLQUFBcVMsTUFBQWttQixHQU1BcDFCLFFBQUEsV0FDQSxPQUFBbkQsS0FBQXFTLE9BTUFvbEIsT0FBQSxTQUFBdGhDLEdBQ0EsSUFBQXdNLEVBQUEzQyxLQUFBdUksT0FBQTVGLFNBR0EsY0FGQTNDLEtBQUExSixJQUFBLGdCQUVBLENBQ0EsSUFBQTJHLEVBQUErQyxLQUFBcVMsTUFDQWpSLEVBQUFRLEtBQUEzRSxFQUFBLFNBQUFrOEIsR0FDQXgyQixFQUFBdzJCLEVBQUE3aUMsSUFBQSxjQUlBcU0sRUFBQXhNLElBQUEsR0FNQXVoQyxTQUFBLFNBQUF2aEMsR0FDQSxXQUFBNkosS0FBQTFKLElBQUEsa0JBQ0EwSixLQUFBdUksT0FBQTVGLFNBQUF4TSxJQUFBLElBT0F3aEMsZUFBQSxTQUFBeGhDLEdBQ0EsSUFBQXdNLEVBQUEzQyxLQUFBdUksT0FBQTVGLFNBRUFBLEVBQUFyTyxlQUFBNkIsS0FDQXdNLEVBQUF4TSxJQUFBLEdBR0E2SixLQUFBMkMsRUFBQXhNLEdBQUEscUJBQUFBLElBTUFrTixXQUFBLFNBQUFsTixHQUNBLElBQUF3TSxFQUFBM0MsS0FBQXVJLE9BQUE1RixTQUNBLFFBQUFBLEVBQUFyTyxlQUFBNkIsS0FBQXdNLEVBQUF4TSxLQUFBaUwsRUFBQXZMLFFBQUFtSyxLQUFBaTVCLGdCQUFBOWlDLElBQUEsR0FFQWtVLGVBRUFDLE9BQUEsRUFFQUMsRUFBQSxFQUNBSixNQUFBLEVBR0FpdkIsT0FBQSxhQUNBQyxLQUFBLFNBRUFDLElBQUEsRUFLQWhPLE1BQUEsT0FDQTVILGdCQUFBLGdCQUVBQyxZQUFBLE9BQ0E0VixhQUFBLEVBRUE1dEIsWUFBQSxFQUdBOFgsUUFBQSxFQUdBK1YsUUFBQSxHQUVBQyxVQUFBLEdBRUFDLFdBQUEsR0FFQUMsY0FBQSxPQUNBOWIsV0FFQXdGLE1BQUEsUUFJQTVRLGNBQUEsRUFNQTBOLFNBQ0FoVyxNQUFBLE1BSUFqSSxFQUFBODFCLEVBQ0E1OUIsRUFBQTBELFFBQUFvRSwrRUMxT0EzTSxFQUFBLHdDQUVBMnJCLFFBRkEsSUFJQTdlLEVBQUE5TSxFQUFBLHlDQUVBNkwsRUFBQTdMLEVBQUEsMkNBSUFrakIsRUFGQWxqQixFQUFBLDZDQUVBa2pCLGFBRUExTSxFQUFBeFcsRUFBQSw4Q0FJQTJoQyxFQUZBM2hDLEVBQUEsZ0VBRUEyaEMsZUFFQTBDLEVBQUFya0MsRUFBQSw2Q0FvQkFzUyxFQUFBekcsRUFBQXlHLE1BQ0FqRyxFQUFBUixFQUFBUSxLQUNBNkwsRUFBQTFCLEVBQUEwQixNQUVBdkwsRUFBQUcsRUFBQWdmLHFCQUNBcm1CLEtBQUEsZUFDQTYrQixpQkFBQSxFQUtBdnhCLEtBQUEsV0FLQXRJLEtBQUFzUyxNQUFBaEUsSUFBQXRPLEtBQUE4NUIsY0FBQSxJQUFBcnNCLEdBTUF6TixLQUFBKzVCLGVBTUFDLGdCQUFBLFdBQ0EsT0FBQWg2QixLQUFBODVCLGVBTUEzbkIsT0FBQSxTQUFBOG5CLEVBQUF4NEIsRUFBQUMsR0FHQSxHQUZBMUIsS0FBQWs2QixhQUVBRCxFQUFBM2pDLElBQUEsWUFJQSxJQUFBNmpDLEVBQUFGLEVBQUEzakMsSUFBQSxTQUVBNmpDLEdBQUEsU0FBQUEsSUFDQUEsRUFBQSxVQUFBRixFQUFBM2pDLElBQUEsc0JBQUEyakMsRUFBQTNqQyxJQUFBLDBCQUdBMEosS0FBQW82QixZQUFBRCxFQUFBRixFQUFBeDRCLEVBQUFDLEdBRUEsSUFBQTI0QixFQUFBSixFQUFBakQscUJBQ0FDLEdBQ0F4ckIsTUFBQS9KLEVBQUF5UixXQUNBcUIsT0FBQTlTLEVBQUEwUixhQUVBcVEsRUFBQXdXLEVBQUEzakMsSUFBQSxXQUNBZ2tDLEVBQUFWLEVBQUFsRCxjQUFBMkQsRUFBQXBELEVBQUF4VCxHQUNBOFcsRUFBQXY2QixLQUFBdzZCLFlBQUFQLEVBQUFFLEVBQUFHLEdBRUFHLEVBQUFiLEVBQUFsRCxjQUFBdDFCLEVBQUFvTyxVQUNBL0QsTUFBQTh1QixFQUFBOXVCLE1BQ0ErSSxPQUFBK2xCLEVBQUEvbEIsUUFDSzZsQixHQUFBcEQsRUFBQXhULEdBQ0x6akIsS0FBQXNTLE1BQUEvRSxLQUFBLFlBQUFrdEIsRUFBQWhxQixFQUFBOHBCLEVBQUE5cEIsRUFBQWdxQixFQUFBL3BCLEVBQUE2cEIsRUFBQTdwQixJQUVBMVEsS0FBQXNTLE1BQUFoRSxJQUFBdE8sS0FBQSs1QixjQUFBN0MsRUFBQXFELEVBQUFOLE1BTUFDLFdBQUEsV0FDQWw2QixLQUFBZzZCLGtCQUFBVSxZQUNBMTZCLEtBQUErNUIsZUFBQS81QixLQUFBc1MsTUFBQVUsT0FBQWhULEtBQUErNUIsZ0JBTUFLLFlBQUEsU0FBQUQsRUFBQUYsRUFBQXg0QixFQUFBQyxHQUNBLElBQUFpNUIsRUFBQTM2QixLQUFBZzZCLGtCQUNBWSxFQUFBeDVCLEVBQUFvMkIsZ0JBQ0FxRCxFQUFBWixFQUFBM2pDLElBQUEsZ0JBQ0F3a0MsS0FDQXI1QixFQUFBazNCLGNBQUEsU0FBQTMxQixJQUNBQSxFQUFBMU0sSUFBQSxvQkFBQXdrQyxFQUFBaGxDLEtBQUFrTixFQUFBckwsTUFFQWlLLEVBQUFxNEIsRUFBQTkyQixVQUFBLFNBQUF5TCxFQUFBMUwsR0FDQSxJQUFBL00sRUFBQXlZLEVBQUF0WSxJQUFBLFFBRUEsR0FBQTBKLEtBQUE2NUIsaUJBQUEsS0FBQTFqQyxHQUFBLE9BQUFBLEVBQUEsQ0FRQSxJQUFBNk0sRUFBQXZCLEVBQUFzNUIsZ0JBQUE1a0MsR0FBQSxHQUVBLElBQUF5a0MsRUFBQXRrQyxJQUFBSCxHQU1BLEdBQUE2TSxFQUFBLENBQ0EsSUFBQS9GLEVBQUErRixFQUFBRyxVQUNBa2dCLEVBQUFwbUIsRUFBQSs5QixVQUFBLFNBRUEsbUJBQUEzWCxJQUVBQSxJQUFBcmdCLEVBQUF3RyxjQUFBLEtBSUEsSUFBQXl4QixFQUFBaCtCLEVBQUErOUIsVUFBQSw2QkFDQUUsRUFBQWorQixFQUFBKzlCLFVBQUEsVUFFQWg3QixLQUFBbTdCLFlBQUFobEMsRUFBQStNLEVBQUEwTCxFQUFBcXJCLEVBQUFnQixFQUFBQyxFQUFBZixFQUFBOVcsRUFBQXdYLEdBRUFyc0IsR0FBQSxRQUFBM0csRUFBQXV6QixFQUFBamxDLEVBQUF1TCxJQUFBOE0sR0FBQSxZQUFBM0csRUFBQXd6QixFQUFBcjRCLEVBQUEsS0FBQXRCLEVBQUFvNUIsSUFBQXRzQixHQUFBLFdBQUEzRyxFQUFBeXpCLEVBQUF0NEIsRUFBQSxLQUFBdEIsRUFBQW81QixJQUNBRixFQUFBcmtDLElBQUFKLEdBQUEsUUFHQXNMLEVBQUFrM0IsY0FBQSxTQUFBMzFCLEdBRUEsSUFBQTQzQixFQUFBdGtDLElBQUFILElBSUE2TSxFQUFBMEYsbUJBQUEsQ0FDQSxJQUFBekwsRUFBQStGLEVBQUEwRixxQkFDQWxNLEVBQUFTLEVBQUFzK0IsWUFBQXBsQyxHQUVBLEdBQUFxRyxFQUFBLEVBQ0EsT0FHQSxJQUFBNm1CLEVBQUFwbUIsRUFBQXFTLGNBQUE5UyxFQUFBLFNBR0F3RCxLQUFBbTdCLFlBQUFobEMsRUFBQStNLEVBQUEwTCxFQUFBcXJCLEVBRkEsWUFFQSxLQUFBRSxFQUFBOVcsRUFBQXdYLEdBR0Fyc0IsR0FBQSxRQUFBM0csRUFBQXV6QixFQUFBamxDLEVBQUF1TCxJQUNBOE0sR0FBQSxZQUFBM0csRUFBQXd6QixFQUFBcjRCLEVBQUE3TSxFQUFBdUwsRUFBQW81QixJQUFBdHNCLEdBQUEsV0FBQTNHLEVBQUF5ekIsRUFBQXQ0QixFQUFBN00sRUFBQXVMLEVBQUFvNUIsSUFDQUYsRUFBQXJrQyxJQUFBSixHQUFBLEtBRVM2SixXQTFEVDI2QixFQUFBcnNCLElBQUEsSUFBQWIsR0FDQSt0QixTQUFBLE1BMkRLeDdCLE9BRUxtN0IsWUFBQSxTQUFBaGxDLEVBQUErTSxFQUFBMEwsRUFBQXFyQixFQUFBZ0IsRUFBQUMsRUFBQWYsRUFBQTlXLEVBQUF3WCxHQUNBLElBQUFwQixFQUFBUSxFQUFBM2pDLElBQUEsYUFDQW9qQyxFQUFBTyxFQUFBM2pDLElBQUEsY0FDQXFqQyxFQUFBTSxFQUFBM2pDLElBQUEsaUJBQ0FtbEMsRUFBQXhCLEVBQUEzakMsSUFBQSxvQkFDQStNLEVBQUE0MkIsRUFBQTUyQixXQUFBbE4sR0FDQXVsQyxFQUFBLElBQUFqdUIsRUFDQWlSLEVBQUE5UCxFQUFBZSxTQUFBLGFBQ0Fnc0IsRUFBQS9zQixFQUFBdFksSUFBQSxRQUNBc2xDLEVBQUFodEIsRUFBQWUsU0FBQSxXQUNBa3NCLEVBQUFELEVBQUF4RCxZQU9BLEdBTEE2QyxFQUFBVSxHQUFBVixFQUNBUyxFQUFBcHRCLElBQUFtSyxFQUFBd2lCLEVBQUEsSUFBQXhCLEVBQUFDLEVBQUFyMkIsRUFBQWdnQixFQUFBc1csRUFDQSxNQUFBOEIsUUFHQUUsR0FBQVQsSUFDQUEsSUFBQUQsR0FBQSxRQUFBQyxHQUFBLENBQ0EsSUFBQTlqQixFQUFBLEdBQUFzaUIsRUFFQSxTQUFBd0IsSUFDQUEsRUFBQSxVQUlBUSxFQUFBcHRCLElBQUFtSyxFQUFBeWlCLEdBQUF6QixFQUFBcmlCLEdBQUEsR0FBQXNpQixFQUFBdGlCLEdBQUEsRUFBQUEsSUFBQS9ULEVBQUFnZ0IsRUFBQXNXLEVBQ0EsTUFBQThCLE9BR0EsSUFBQWhtQixFQUFBLFNBQUEwa0IsRUFBQVYsRUFBQSxLQUNBaG9CLEVBQUEwb0IsRUFDQS9aLEVBQUE2WixFQUFBM2pDLElBQUEsYUFDQTJKLEVBQUE5SixFQUVBLGlCQUFBaXFCLEtBQ0FuZ0IsRUFBQW1nQixFQUFBamYsUUFBQSxTQUF5QyxNQUFBaEwsSUFBQSxJQUNwQyxtQkFBQWlxQixJQUNMbmdCLEVBQUFtZ0IsRUFBQWpxQixJQUdBdWxDLEVBQUFwdEIsSUFBQSxJQUFBdkMsRUFBQWlDLE1BQ0EyQyxNQUFBNUUsRUFBQW1TLGdCQUFvQ1EsR0FDcEMzUSxLQUFBOU4sRUFDQXdRLEVBQUFnRixFQUNBL0UsRUFBQWdwQixFQUFBLEVBQ0F2YixTQUFBOWEsRUFBQXFiLEVBQUFYLGVBQUE0YixFQUNBbG9CLFlBQ0FDLGtCQUFBLGNBSUEsSUFBQW9xQixFQUFBLElBQUEvdkIsRUFBQWtjLE1BQ0FoWixNQUFBeXNCLEVBQUFqbEIsa0JBQ0FzbEIsV0FBQSxFQUNBNWIsUUFBQXliLEVBQUF0bEMsSUFBQSxRQUFBOEssRUFBQXFGLFFBQ0F4RyxRQUFBOUosRUFFQWlxQixVQUFBeWIsRUFBQXZsQyxJQUFBLDRCQUNBLE9BQUFILEdBRUE2cEIsaUJBQ0FqSCxjQUFBLFNBQ0FpakIsWUFBQS9CLEVBQUFqaEIsZUFDQTdpQixPQUNBMFQsT0FBQSxVQUVPK3hCLEVBQUFyekIsUUFBQSxPQVVQLE9BUkFtekIsRUFBQXB0QixJQUFBd3RCLEdBQ0FKLEVBQUE5b0IsVUFBQSxTQUFBeFYsR0FDQUEsRUFBQWtjLFFBQUEsSUFFQXdpQixFQUFBeGlCLFFBQUF1aEIsRUFDQTc2QixLQUFBZzZCLGtCQUFBMXJCLElBQUFvdEIsR0FDQTN2QixFQUFBcUUsY0FBQXNyQixHQUNBQSxFQUFBTyxrQkFBQS80QixFQUNBdzRCLEdBTUFsQixZQUFBLFNBQUFQLEVBQUFFLEVBQUFHLEdBQ0EsSUFBQUssRUFBQTM2QixLQUFBZzZCLGtCQUVBSixFQUFBaEQsSUFBQXFELEVBQUEzakMsSUFBQSxVQUFBcWtDLEVBQUFWLEVBQUEzakMsSUFBQSxXQUFBZ2tDLEVBQUE3dUIsTUFBQTZ1QixFQUFBOWxCLFFBQ0EsSUFBQTBuQixFQUFBdkIsRUFBQWxrQixrQkFFQSxPQURBa2tCLEVBQUFwdEIsS0FBQSxhQUFBMnVCLEVBQUF6ckIsR0FBQXlyQixFQUFBeHJCLElBQ0ExUSxLQUFBc1MsTUFBQW1FLHFCQUlBLFNBQUEya0IsRUFBQWpsQyxFQUFBdUwsR0FDQUEsRUFBQTBLLGdCQUNBcFIsS0FBQSxxQkFDQTdFLFNBSUEsU0FBQWtsQyxFQUFBcjRCLEVBQUFtNUIsRUFBQXo2QixFQUFBbzVCLEdBRUEsSUFBQXB1QixFQUFBaEwsRUFBQWlqQixRQUFBeVgsUUFBQUMsaUJBQUEsR0FFQTN2QixLQUFBNHZCLGVBQ0E1NkIsRUFBQTBLLGdCQUNBcFIsS0FBQSxZQUNBNjlCLFdBQUE3MUIsRUFBQTdNLEtBQ0FBLEtBQUFnbUMsRUFDQXJCLG9CQUtBLFNBQUFRLEVBQUF0NEIsRUFBQW01QixFQUFBejZCLEVBQUFvNUIsR0FFQSxJQUFBcHVCLEVBQUFoTCxFQUFBaWpCLFFBQUF5WCxRQUFBQyxpQkFBQSxHQUVBM3ZCLEtBQUE0dkIsZUFDQTU2QixFQUFBMEssZ0JBQ0FwUixLQUFBLFdBQ0E2OUIsV0FBQTcxQixFQUFBN00sS0FDQUEsS0FBQWdtQyxFQUNBckIsb0JBS0ExZ0MsRUFBQTBELFFBQUFvRSxpRkMvVEEsSUFBQUcsRUFBQTlNLEVBQUEseUNBRUE2TCxFQUFBN0wsRUFBQSwyQ0FvQkEsU0FBQWduQyxFQUFBQyxFQUFBOTVCLEVBQUFqQixHQUNBLElBRUE0QixFQUZBbzVCLEtBQ0FDLEVBQUEsbUJBQUFGLEVBa0NBLE9BL0JBLzZCLEVBQUFtQixjQUFBLGtCQUFBcTNCLEdBQ0F5QyxHQUFBLE1BQUFyNUIsRUFLQTQyQixFQUFBNTJCLEVBQUEscUJBQUFYLEVBQUF2TSxPQUVBOGpDLEVBQUF1QyxHQUFBOTVCLEVBQUF2TSxNQUNBa04sRUFBQTQyQixFQUFBNTJCLFdBQUFYLEVBQUF2TSxPQUdBLElBQUFvaUMsRUFBQTBCLEVBQUE5MkIsVUFDQS9CLEVBQUFRLEtBQUEyMkIsRUFBQSxTQUFBdk4sR0FDQSxJQUFBNzBCLEVBQUE2MEIsRUFBQTEwQixJQUFBLFFBRUEsVUFBQUgsR0FBQSxLQUFBQSxFQUFBLENBSUEsSUFBQXdtQyxFQUFBMUMsRUFBQTUyQixXQUFBbE4sR0FFQXNtQyxFQUFBbm9DLGVBQUE2QixHQUVBc21DLEVBQUF0bUMsR0FBQXNtQyxFQUFBdG1DLElBQUF3bUMsRUFFQUYsRUFBQXRtQyxHQUFBd21DLFFBTUF4bUMsS0FBQXVNLEVBQUF2TSxLQUNBd00sU0FBQTg1QixHQVlBcDZCLEVBQUFJLGVBQUEsMkNBQUFyQixFQUFBeUcsTUFBQTAwQixFQUFBLG1CQVFBbDZCLEVBQUFJLGVBQUEsZ0NBQUFyQixFQUFBeUcsTUFBQTAwQixFQUFBLFdBUUFsNkIsRUFBQUksZUFBQSxvQ0FBQXJCLEVBQUF5RyxNQUFBMDBCLEVBQUEsMEZDbERBbmlDLEVBQUEwRCxRQXBCQSxTQUFBMkQsR0FDQSxJQUFBbTdCLEVBQUFuN0IsRUFBQW83QixnQkFDQWg2QixTQUFBLFdBR0ErNUIsS0FBQXJsQyxRQUNBa0ssRUFBQXE3QixhQUFBLFNBQUFoUSxHQUdBLFFBQUF4MUIsRUFBQSxFQUFxQkEsRUFBQXNsQyxFQUFBcmxDLE9BQXlCRCxJQUM5QyxJQUFBc2xDLEVBQUF0bEMsR0FBQStMLFdBQUF5cEIsRUFBQTMyQixNQUNBLFNBSUEsNkVDakNBLElBQUFrTSxFQUFBOU0sRUFBQSx5Q0FFQXdXLEVBQUF4VyxFQUFBLDhDQUlBbWhDLEVBRkFuaEMsRUFBQSw2Q0FFQW1oQyxjQXFCQXIwQixFQUFBMGdCLHNCQUNBL25CLEtBQUEsUUFDQWs5QixZQUNBbDlCLEtBQUEsTUFDQW05QixZQUFBLEdBRUE5dEIsZUFFQUMsT0FBQSxFQUVBQyxFQUFBLEVBQ0FKLE1BQUEsRUFDQTRELEtBQUEsR0FJQXdwQixPQUFBLFFBQ0F3RixRQUFBLEdBSUFDLFVBQUEsUUFHQTNELEtBQUEsRUFHQUMsSUFBQSxFQVVBNVYsZ0JBQUEsZ0JBRUFDLFlBQUEsT0FFQWhZLFlBQUEsRUFHQThYLFFBQUEsRUFFQStWLFFBQUEsR0FDQTNiLFdBQ0FvZixTQUFBLEdBQ0FDLFdBQUEsU0FDQTdaLE1BQUEsUUFFQThaLGNBQ0E5WixNQUFBLFdBS0FoaEIsRUFBQWdmLHFCQUNBcm1CLEtBQUEsUUFDQW1YLE9BQUEsU0FBQWlyQixFQUFBMzdCLEVBQUFDLEdBR0EsR0FGQTFCLEtBQUFzUyxNQUFBb29CLFlBRUEwQyxFQUFBOW1DLElBQUEsU0FJQSxJQUFBZ2MsRUFBQXRTLEtBQUFzUyxNQUNBb00sRUFBQTBlLEVBQUF6dEIsU0FBQSxhQUNBMHRCLEVBQUFELEVBQUF6dEIsU0FBQSxnQkFDQThCLEVBQUEyckIsRUFBQTltQyxJQUFBLGFBQ0FnbkMsRUFBQUYsRUFBQTltQyxJQUFBLGdCQUNBMm5CLEVBQUEsSUFBQWxTLEVBQUFpQyxNQUNBMkMsTUFBQTVFLEVBQUFtUyxnQkFBb0NRLEdBQ3BDM1EsS0FBQXF2QixFQUFBOW1DLElBQUEsUUFDQTZuQixTQUFBTyxFQUFBWCxpQkFFQXdmLFlBQUEsSUFFQTN2QixHQUFBLEtBRUE0SSxFQUFBeUgsRUFBQXhILGtCQUNBK21CLEVBQUFKLEVBQUE5bUMsSUFBQSxXQUNBbW5DLEVBQUEsSUFBQTF4QixFQUFBaUMsTUFDQTJDLE1BQUE1RSxFQUFBbVMsZ0JBQW9DbWYsR0FDcEN0dkIsS0FBQXl2QixFQUNBcmYsU0FBQWtmLEVBQUF0ZixlQUNBck4sRUFBQThGLEVBQUFoQyxPQUFBNG9CLEVBQUE5bUMsSUFBQSxXQUNBb2Isa0JBQUEsUUFFQTZyQixZQUFBLElBRUEzdkIsR0FBQSxLQUVBNFUsRUFBQTRhLEVBQUE5bUMsSUFBQSxRQUNBb25DLEVBQUFOLEVBQUE5bUMsSUFBQSxXQUNBMm5CLEVBQUEzRSxRQUFBa0osRUFDQWliLEVBQUFua0IsUUFBQW9rQixFQUVBbGIsR0FDQXZFLEVBQUF6UCxHQUFBLG1CQUNBMWEsT0FBQXdFLEtBQUFrcUIsRUFBQSxJQUFBNGEsRUFBQTltQyxJQUFBLGFBSUFvbkMsR0FDQUQsRUFBQWp2QixHQUFBLG1CQUNBMWEsT0FBQXdFLEtBQUFvbEMsRUFBQSxJQUFBTixFQUFBOW1DLElBQUEsZ0JBSUFnYyxFQUFBaEUsSUFBQTJQLEdBQ0F1ZixHQUFBbHJCLEVBQUFoRSxJQUFBbXZCLEdBRUEsSUFBQUUsRUFBQXJyQixFQUFBbUUsa0JBQ0FtbkIsRUFBQVIsRUFBQXBHLHFCQUNBNEcsRUFBQW55QixNQUFBa3lCLEVBQUFseUIsTUFDQW15QixFQUFBcHBCLE9BQUFtcEIsRUFBQW5wQixPQUNBLElBQUFpbUIsRUFBQS9ELEVBQUFrSCxHQUNBbnlCLE1BQUEvSixFQUFBeVIsV0FDQXFCLE9BQUE5UyxFQUFBMFIsYUFDS2dxQixFQUFBOW1DLElBQUEsWUFFTG1iLElBSUEsWUFGQUEsRUFBQTJyQixFQUFBOW1DLElBQUEsU0FBQThtQyxFQUFBOW1DLElBQUEsWUFHQW1iLEVBQUEsVUFJQSxVQUFBQSxFQUNBZ3BCLEVBQUFocUIsR0FBQWdxQixFQUFBaHZCLE1BQ08sV0FBQWdHLElBQ1BncEIsRUFBQWhxQixHQUFBZ3FCLEVBQUFodkIsTUFBQSxJQUlBNnhCLElBR0EsWUFGQUEsRUFBQUYsRUFBQTltQyxJQUFBLFFBQUE4bUMsRUFBQTltQyxJQUFBLGFBR0FnbkMsRUFBQSxVQUdBLFdBQUFBLEVBQ0E3QyxFQUFBL3BCLEdBQUErcEIsRUFBQWptQixPQUNPLFdBQUE4b0IsSUFDUDdDLEVBQUEvcEIsR0FBQStwQixFQUFBam1CLE9BQUEsR0FHQThvQixLQUFBLE9BR0FockIsRUFBQS9FLEtBQUEsWUFBQWt0QixFQUFBaHFCLEVBQUFncUIsRUFBQS9wQixJQUNBLElBQUFtdEIsR0FDQXBzQixZQUNBQyxrQkFBQTRyQixHQUVBcmYsRUFBQXBNLFNBQUFnc0IsR0FDQUosRUFBQTVyQixTQUFBZ3NCLEdBR0FGLEVBQUFyckIsRUFBQW1FLGtCQUNBLElBQUFnTixFQUFBZ1gsRUFBQWpYLE9BQ0E3UyxFQUFBeXNCLEVBQUF4dEIsY0FBQSxvQkFDQWUsRUFBQWpCLEtBQUEwdEIsRUFBQTltQyxJQUFBLG1CQUNBLElBQUEwNkIsRUFBQSxJQUFBamxCLEVBQUFrYyxNQUNBaFosT0FDQXdCLEVBQUFrdEIsRUFBQWx0QixFQUFBZ1QsRUFBQSxHQUNBL1MsRUFBQWl0QixFQUFBanRCLEVBQUErUyxFQUFBLEdBQ0FoWSxNQUFBa3lCLEVBQUFseUIsTUFBQWdZLEVBQUEsR0FBQUEsRUFBQSxHQUNBalAsT0FBQW1wQixFQUFBbnBCLE9BQUFpUCxFQUFBLEdBQUFBLEVBQUEsR0FDQXprQixFQUFBbytCLEVBQUE5bUMsSUFBQSxpQkFFQXFhLFFBQ0EySSxRQUFBLElBRUF2TixFQUFBK3hCLHFCQUFBOU0sR0FDQTFlLEVBQUFoRSxJQUFBMGlCLDBFQy9NQSxJQUFBM3VCLEVBQUE5TSxFQUFBLHlDQUVBQSxFQUFBLHVEQUVBQSxFQUFBLGdFQUVBQSxFQUFBLCtEQThCQThNLEVBQUFJLGdCQUNBekgsS0FBQSxVQUNBME0sTUFBQSxVQUNBOU8sT0FBQSwyQkFFQSxjQUNBeUosRUFBQUksZ0JBQ0F6SCxLQUFBLFVBQ0EwTSxNQUFBLFVBQ0E5TyxPQUFBLDJCQUVBLGdHQy9DQSxJQUFBd0ksRUFBQTdMLEVBQUEsMkNBRUF3b0MsRUFBQXhvQyxFQUFBLDRDQUVBeW9DLEVBQUF6b0MsRUFBQSw0Q0FFQTA3QixFQUFBMTdCLEVBQUEsMENBRUE4aUIsRUFBQTlpQixFQUFBLDZDQW9CQXFNLEVBQUFSLEVBQUFRLEtBQ0FxOEIsRUFBQTVsQixFQUFBNGxCLFlBQ0FDLEdBQUEsNkJBMENBLFNBQUFDLEVBQUF2QyxHQUNBLElBQUF3QyxLQUNBQyxFQUFBekMsRUFBQXRsQyxJQUFBLHNCQUNBb3RCLEVBQUFrWSxFQUFBdGxDLElBQUEsbUJBQ0Fvb0IsRUFBQWtkLEVBQUFqc0IsU0FBQSxhQUNBOFQsRUFBQW1ZLEVBQUF0bEMsSUFBQSxXQTRCQSxPQTFCQStuQyxHQUFBRCxFQUFBdG9DLEtBekNBLFNBQUF3b0MsR0FDQSxJQUNBQyxFQUFBLFFBQUFELEVBQUEsd0NBQUFBLEVBQUEsbUNBQ0EsT0FBQWw5QixFQUFBMUcsSUFBQXdqQyxFQUFBLFNBQUFNLEdBQ0EsT0FBQUEsRUFBQSxjQUFBRCxJQUNHdGlDLEtBQUEsS0FvQ0h3aUMsQ0FBQUosSUFFQTNhLElBQ0F1TixFQUFBeU4sZ0JBQ0FOLEVBQUF0b0MsS0FBQSxvQkFBQTR0QixJQUdBMGEsRUFBQXRvQyxLQUFBLHFCQUFBaW9DLEVBQUFZLE1BQUFqYixJQUNBMGEsRUFBQXRvQyxLQUFBLDhCQUtBOEwsR0FBQSxtQ0FBQXpMLEdBQ0EsSUFBQXlvQyxFQUFBLFVBQUF6b0MsRUFDQTBvQyxFQUFBWixFQUFBVyxHQUNBelAsRUFBQXlNLEVBQUF0bEMsSUFBQXVvQyxHQUNBLE1BQUExUCxHQUFBaVAsRUFBQXRvQyxLQUFBOG9DLEVBQUEsSUFBQXpQLEdBQUEsVUFBQWg1QixFQUFBLFlBR0Fpb0MsRUFBQXRvQyxLQS9DQSxTQUFBNG9CLEdBQ0EsSUFBQTBmLEtBQ0FuQixFQUFBdmUsRUFBQXBvQixJQUFBLFlBQ0Erc0IsRUFBQTNFLEVBQUFYLGVBUUEsT0FQQXNGLEdBQUErYSxFQUFBdG9DLEtBQUEsU0FBQXV0QixHQUNBK2EsRUFBQXRvQyxLQUFBLFFBQUE0b0IsRUFBQXJJLFdBQ0E0bUIsR0FBQW1CLEVBQUF0b0MsS0FBQSxlQUFBaVgsS0FBQSt4QixNQUFBLEVBQUE3QixFQUFBLFNBQ0FyN0IsR0FBQSwrQkFBQXpMLEdBQ0EsSUFBQWc1QixFQUFBelEsRUFBQXBvQixJQUFBSCxHQUNBZzVCLEdBQUFpUCxFQUFBdG9DLEtBQUEsUUFBQUssRUFBQSxJQUFBZzVCLEtBRUFpUCxFQUFBbmlDLEtBQUEsS0FvQ0E4aUMsQ0FBQXJnQixJQUVBLE1BQUErRSxHQUNBMmEsRUFBQXRvQyxLQUFBLFdBQUF1aUIsRUFBQTJjLGtCQUFBdlIsR0FBQXhuQixLQUFBLGFBR0FtaUMsRUFBQW5pQyxLQUFBLEtBQXdCLElBUXhCLFNBQUEraUMsRUFBQUMsRUFBQXY5QixHQUNBLEdBQUF1dkIsRUFBQWlPLElBQ0EsWUFHQSxJQUFBeHlCLEVBQUFyVCxTQUFBRyxjQUFBLE9BQ0E0dUIsRUFBQXBvQixLQUFBbS9CLElBQUF6OUIsRUFBQWlqQixRQUNBM2tCLEtBQUEwTSxLQUNBMU0sS0FBQW8vQixHQUFBMTlCLEVBQUF5UixXQUFBLEVBQ0FuVCxLQUFBcS9CLEdBQUEzOUIsRUFBQTBSLFlBQUEsRUFDQTZyQixFQUFBdGxDLFlBQUErUyxHQUNBMU0sS0FBQXMvQixXQUFBTCxFQUNBai9CLEtBQUF1L0IsT0FBQSxFQUtBdi9CLEtBQUF3L0IsYUFDQSxJQUFBQyxFQUFBei9CLEtBRUEwTSxFQUFBZ3pCLGFBQUEsV0FFQUQsRUFBQUUsYUFDQUMsYUFBQUgsRUFBQUQsY0FDQUMsRUFBQUYsT0FBQSxHQUdBRSxFQUFBSSxZQUFBLEdBR0FuekIsRUFBQStiLFlBQUEsU0FBQS94QixHQUdBLEdBRkFBLEtBQUE1QyxPQUFBNFQsT0FFQSszQixFQUFBRSxXQUFBLENBR0EsSUFBQXZPLEVBQUFoSixFQUFBZ0osUUFDQTRNLEVBQUE4QixlQUFBYixFQUFBdm9DLEdBQUEsR0FDQTA2QixFQUFBMk8sU0FBQSxZQUFBcnBDLEtBSUFnVyxFQUFBc3pCLGFBQUEsV0FDQVAsRUFBQUUsWUFDQUYsRUFBQUYsT0FDQUUsRUFBQVEsVUFBQVIsRUFBQVMsWUFJQVQsRUFBQUksWUFBQSxHQUlBYixFQUFBM3FDLFdBQ0FtTixZQUFBdzlCLEVBTUFXLFlBQUEsRUFLQS9tQyxPQUFBLFdBR0EsSUFBQXFtQyxFQUFBai9CLEtBQUFzL0IsV0FDQWEsRUFBQWxCLEVBQUFtQixjQUFBL21DLFNBQUFnbkMsWUFBQUMsaUJBQUFyQixHQUNBc0IsRUFBQXRCLEVBQUF0dUIsTUFFQSxhQUFBNHZCLEVBQUFsMUIsVUFBQSxhQUFBODBCLEVBQUE5MEIsV0FDQWsxQixFQUFBbDFCLFNBQUEsYUFNQWxCLEtBQUEsU0FBQXl4QixHQUNBZ0UsYUFBQTUvQixLQUFBdy9CLGNBQ0EsSUFBQTl5QixFQUFBMU0sS0FBQTBNLEdBQ0FBLEVBQUFpRSxNQUFBeXRCLFFBcEtBLHlGQW9LQUQsRUFBQXZDLEdBQ0EsU0FBUTU3QixLQUFBby9CLEdBQUEsVUFBdUJwL0IsS0FBQXEvQixHQUFBLE9BQXNCekQsRUFBQXRsQyxJQUFBLHFCQUNyRG9XLEVBQUFpRSxNQUFBNnZCLFFBQUE5ekIsRUFBQSt6QixVQUFBLGVBQ0F6Z0MsS0FBQXUvQixPQUFBLEdBRUFtQixXQUFBLFNBQUF6Z0MsR0FDQUQsS0FBQTBNLEdBQUErekIsVUFBQSxNQUFBeGdDLEVBQUEsR0FBQUEsR0FFQTBnQyxhQUFBLFNBQUFDLEdBQ0E1Z0MsS0FBQTIvQixXQUFBaUIsR0FFQUMsUUFBQSxXQUNBLElBQUFuMEIsRUFBQTFNLEtBQUEwTSxHQUNBLE9BQUFBLEVBQUFvMEIsWUFBQXAwQixFQUFBcTBCLGVBRUFDLE9BQUEsU0FBQXZ3QixFQUFBQyxHQUlBLElBQ0F1d0IsRUFEQTdZLEVBQUFwb0IsS0FBQW0vQixJQUdBL1csS0FBQThZLFVBQUFELEVBQUE3WSxFQUFBOFksUUFBQUMsMkJBQ0Exd0IsR0FBQXd3QixFQUFBRyxXQUNBMXdCLEdBQUF1d0IsRUFBQUksV0FHQSxJQUFBMXdCLEVBQUEzUSxLQUFBME0sR0FBQWlFLE1BQ0FBLEVBQUEwb0IsS0FBQTVvQixFQUFBLEtBQ0FFLEVBQUEyb0IsSUFBQTVvQixFQUFBLEtBQ0ExUSxLQUFBby9CLEdBQUEzdUIsRUFDQXpRLEtBQUFxL0IsR0FBQTN1QixHQUVBaVcsS0FBQSxXQUNBM21CLEtBQUEwTSxHQUFBaUUsTUFBQTZ2QixRQUFBLE9BQ0F4Z0MsS0FBQXUvQixPQUFBLEdBRUFVLFVBQUEsU0FBQXFCLElBQ0F0aEMsS0FBQXUvQixPQUFBdi9CLEtBQUE2L0IsWUFBQTcvQixLQUFBMi9CLGFBQ0EyQixHQUNBdGhDLEtBQUFrZ0MsV0FBQW9CLEVBRUF0aEMsS0FBQXUvQixPQUFBLEVBQ0F2L0IsS0FBQXcvQixhQUFBK0IsV0FBQW5nQyxFQUFBN0IsS0FBQVMsS0FBQTJtQixLQUFBM21CLE1BQUFzaEMsSUFFQXRoQyxLQUFBMm1CLFNBSUE2YSxPQUFBLFdBQ0EsT0FBQXhoQyxLQUFBdS9CLFFBR0EsSUFBQXI5QixFQUFBODhCLEVBQ0E1a0MsRUFBQTBELFFBQUFvRSxrRkN6UEEsSUFvQkFBLEVBcEJBM00sRUFBQSx5Q0FvQkF3dEIsc0JBQ0EvbkIsS0FBQSxVQUNBaTlCLGNBQUEsZUFDQTV0QixlQUNBQyxPQUFBLEVBQ0FDLEVBQUEsRUFDQUosTUFBQSxFQUVBczNCLGFBQUEsRUFHQUMsUUFBQSxPQUVBMWUsVUFBQSxrQkFDQTJlLG1CQUFBLEVBQ0FDLFlBQUEsU0FRQUMsU0FBQSxFQUdBQyxVQUFBLEVBRUFDLFVBQUEsSUFFQTFELG1CQUFBLEdBQ0F1QyxXQUFBLEVBRUFsZCxnQkFBQSxxQkFFQUMsWUFBQSxPQUVBNFYsYUFBQSxFQUVBNXRCLFlBQUEsRUFHQThYLFFBQUEsRUFFQXVlLGFBQUEsR0FFQXJnQixhQUdBM21CLEtBQUEsT0FLQWdmLEtBQUEsT0FDQW1KLFVBQUEsT0FDQUMsd0JBQUEsSUFDQTZlLHNCQUFBLGlCQUNBbE8sWUFDQTFRLE1BQUEsT0FDQTVYLE1BQUEsRUFDQXpRLEtBQUEsU0FFQTZpQixlQUtBQSxXQUNBd0YsTUFBQSxPQUNBNFosU0FBQSxPQUtBN2lDLEVBQUEwRCxRQUFBb0UsaUZDL0ZBLElBQUFHLEVBQUE5TSxFQUFBLHlDQUVBNkwsRUFBQTdMLEVBQUEsMkNBRUEwN0IsRUFBQTE3QixFQUFBLDBDQUVBeXBDLEVBQUF6cEMsRUFBQSxrRUFFQThpQixFQUFBOWlCLEVBQUEsNkNBRUEyc0MsRUFBQTNzQyxFQUFBLDZDQUVBd1csRUFBQXhXLEVBQUEsOENBRUF5MkIsRUFBQXoyQixFQUFBLDJFQUVBcWtDLEVBQUFya0MsRUFBQSw2Q0FFQStpQixFQUFBL2lCLEVBQUEsNkNBRUE0dUIsRUFBQTV1QixFQUFBLHNFQUVBby9CLEVBQUFwL0IsRUFBQSxrREFFQTRzQyxFQUFBNXNDLEVBQUEsa0VBb0JBZ0ssRUFBQTZCLEVBQUE3QixLQUNBcUMsRUFBQVIsRUFBQVEsS0FDQW1WLEVBQUFtckIsRUFBQW5yQixhQUNBcXJCLEVBQUEsSUFBQXIyQixFQUFBa2MsTUFDQWhaLE9BQ0F3QixHQUFBLEVBQ0FDLEdBQUEsRUFDQWpGLE1BQUEsRUFDQStJLE9BQUEsS0FJQXRTLEVBQUFHLEVBQUFnZixxQkFDQXJtQixLQUFBLFVBQ0FzTixLQUFBLFNBQUE3RyxFQUFBQyxHQUNBLElBQUF1dkIsRUFBQUssS0FBQSxDQUlBLElBQUErUSxFQUFBLElBQUFyRCxFQUFBdDlCLEVBQUE0Z0MsU0FBQTVnQyxHQUNBMUIsS0FBQXVpQyxnQkFBQUYsSUFFQWx3QixPQUFBLFNBQUF5cEIsRUFBQW42QixFQUFBQyxHQUNBLElBQUF1dkIsRUFBQUssT0FBQUwsRUFBQWlPLElBQUEsQ0FLQWwvQixLQUFBc1MsTUFBQW9vQixZQU1BMTZCLEtBQUF3aUMsY0FBQTVHLEVBTUE1N0IsS0FBQXlpQyxTQUFBaGhDLEVBTUF6QixLQUFBMG1CLEtBQUFobEIsRUFPQTFCLEtBQUEwaUMsb0JBQUEsS0FNQTFpQyxLQUFBMmlDLG1CQUFBL0csRUFBQXRsQyxJQUFBLHFCQUNBLElBQUErckMsRUFBQXJpQyxLQUFBdWlDLGdCQUNBRixFQUFBenBDLFNBQ0F5cEMsRUFBQTFCLGFBQUEvRSxFQUFBdGxDLElBQUEsY0FFQTBKLEtBQUE0aUMsc0JBRUE1aUMsS0FBQTZpQyxjQUVBRCxvQkFBQSxXQUNBLElBQ0E1ZixFQURBaGpCLEtBQUF3aUMsY0FDQWxzQyxJQUFBLGFBQ0E2dEIsRUFBQW5pQixTQUFBLGNBQUFoQyxLQUFBMG1CLEtBQUFubkIsRUFBQSxTQUFBZ2xCLEVBQUE3dEIsRUFBQTBWLEdBRUEsU0FBQTRXLElBQ0FBLEVBQUFudEIsUUFBQTB1QixJQUFBLEVBQ0F2a0IsS0FBQThpQyxTQUFBcHNDLEVBQUEwVixHQUNTLFVBQUFtWSxHQUNUdmtCLEtBQUEraUMsTUFBQTMyQixLQUdLcE0sUUFFTDZpQyxVQUFBLFdBQ0EsSUFBQWpILEVBQUE1N0IsS0FBQXdpQyxjQUNBL2dDLEVBQUF6QixLQUFBeWlDLFNBQ0EvZ0MsRUFBQTFCLEtBQUEwbUIsS0FFQSxTQUFBMW1CLEtBQUFnakMsUUFBQSxNQUFBaGpDLEtBQUFpakMsUUFHQSxTQUFBckgsRUFBQXRsQyxJQUFBLGNBQ0EsSUFBQW1wQyxFQUFBei9CLEtBQ0E0L0IsYUFBQTUvQixLQUFBa2pDLHVCQUNBbGpDLEtBQUFrakMsc0JBQUEzQixXQUFBLFdBSUE5QixFQUFBMEQsZ0JBQUF2SCxFQUFBbjZCLEVBQUFDLEdBQ0ErTyxFQUFBZ3ZCLEVBQUF1RCxPQUNBdHlCLEVBQUErdUIsRUFBQXdELGFBc0JBRSxnQkFBQSxTQUFBdkgsRUFBQW42QixFQUFBQyxFQUFBZ0IsR0FDQSxHQUFBQSxFQUFBMkosT0FBQXJNLEtBQUFrTSxNQUFBK2tCLEVBQUFLLEtBQUEsQ0FJQSxJQUFBbGxCLEVBQUEybEIsRUFBQXJ2QixFQUFBaEIsR0FFQTFCLEtBQUFvakMsUUFBQSxHQUVBLElBQUF4VixFQUFBbHJCLEVBQUFrckIsZUFFQSxHQUFBbHJCLEVBQUF5ZCxTQUFBLE1BQUF6ZCxFQUFBK04sR0FBQSxNQUFBL04sRUFBQWdPLEVBQUEsQ0FDQSxJQUFBaEUsRUFBQTAxQixFQUNBMTFCLEVBQUFyQixVQUFBM0ksRUFBQStOLEVBQUEvTixFQUFBZ08sR0FDQWhFLEVBQUE5VCxTQUNBOFQsRUFBQXlULFFBQUF6ZCxFQUFBeWQsUUFFQW5nQixLQUFBOGlDLFVBQ0F0ZSxRQUFBOWhCLEVBQUErTixFQUNBZ1UsUUFBQS9oQixFQUFBZ08sRUFDQTZtQixPQUFBN3FCLEdBQ09OLFFBQ0YsR0FBQXdoQixFQUNMNXRCLEtBQUE4aUMsVUFDQXRlLFFBQUE5aEIsRUFBQStOLEVBQ0FnVSxRQUFBL2hCLEVBQUFnTyxFQUNBckYsU0FBQTNJLEVBQUEySSxTQUNBM0QsU0FDQWttQixlQUFBbHJCLEVBQUFrckIsZUFDQXJFLGNBQUE3bUIsRUFBQTZtQixlQUNPbmQsUUFDRixTQUFBMUosRUFBQTJxQixZQUFBLENBQ0wsR0FBQXJ0QixLQUFBcWpDLHFCQUFBekgsRUFBQW42QixFQUFBQyxFQUFBZ0IsR0FDQSxPQUdBLElBQUE0Z0MsRUFBQXRYLEVBQUF0cEIsRUFBQWpCLEdBQ0ErUixFQUFBOHZCLEVBQUF6dkIsTUFBQSxHQUNBSixFQUFBNnZCLEVBQUF6dkIsTUFBQSxHQUVBLE1BQUFMLEdBQUEsTUFBQUMsR0FDQXpULEtBQUE4aUMsVUFDQXRlLFFBQUFoUixFQUNBaVIsUUFBQWhSLEVBQ0FwSSxTQUFBM0ksRUFBQTJJLFNBQ0Frc0IsT0FBQStMLEVBQUE1MkIsR0FDQWhGLFVBQ1MwRSxRQUVKLE1BQUExSixFQUFBK04sR0FBQSxNQUFBL04sRUFBQWdPLElBR0xoUCxFQUFBMEssZ0JBQ0FwUixLQUFBLG9CQUNBeVYsRUFBQS9OLEVBQUErTixFQUNBQyxFQUFBaE8sRUFBQWdPLElBR0ExUSxLQUFBOGlDLFVBQ0F0ZSxRQUFBOWhCLEVBQUErTixFQUNBZ1UsUUFBQS9oQixFQUFBZ08sRUFDQXJGLFNBQUEzSSxFQUFBMkksU0FDQWtzQixPQUFBNzFCLEVBQUFpakIsUUFBQTRlLFVBQUE3Z0MsRUFBQStOLEVBQUEvTixFQUFBZ08sR0FBQTZtQixPQUNBN3ZCLFVBQ08wRSxNQUdQbzNCLGdCQUFBLFNBQUE1SCxFQUFBbjZCLEVBQUFDLEVBQUFnQixHQUNBLElBQUEyL0IsRUFBQXJpQyxLQUFBdWlDLGlCQUVBdmlDLEtBQUEyaUMsb0JBQUEzaUMsS0FBQXdpQyxlQUNBSCxFQUFBcEMsVUFBQWpnQyxLQUFBd2lDLGNBQUFsc0MsSUFBQSxjQUdBMEosS0FBQWdqQyxPQUFBaGpDLEtBQUFpakMsT0FBQSxLQUVBdmdDLEVBQUEySixPQUFBck0sS0FBQWtNLEtBQ0FsTSxLQUFBK2lDLE1BQUFoUixFQUFBcnZCLEVBQUFoQixLQU1BMmhDLHFCQUFBLFNBQUF6SCxFQUFBbjZCLEVBQUFDLEVBQUFnQixHQUNBLElBQUEycUIsRUFBQTNxQixFQUFBMnFCLFlBQ0FucUIsRUFBQVIsRUFBQVEsVUFDQTJmLEVBQUFwaEIsRUFBQW1oQixhQUFBLGVBQUFDLGlCQUVBLFNBQUF3SyxHQUFBLE1BQUFucUIsR0FBQSxNQUFBMmYsRUFBQSxDQUlBLElBQUE3ZixFQUFBdkIsRUFBQWl2QixpQkFBQXJELEdBRUEsR0FBQXJxQixFQU9BLGFBRkE0NEIsRUFBQTZILEdBREF6Z0MsRUFBQUcsVUFDQTBMLGFBQUEzTCxHQUFBRixLQUFBNHRCLHNCQUF3SDVGLE1BQUE0USxLQUV4SHRsQyxJQUFBLFdBVUEsT0FOQW9MLEVBQUEwSyxnQkFDQXBSLEtBQUEsb0JBQ0FxeUIsY0FDQW5xQixZQUNBbUksU0FBQTNJLEVBQUEySSxZQUVBLElBRUF5M0IsU0FBQSxTQUFBcHNDLEVBQUEwVixHQUNBLElBQUFNLEVBQUFoVyxFQUFBNmdDLE9BR0EsR0FGQXYzQixLQUFBd2lDLGNBRUEsQ0FLQXhpQyxLQUFBZ2pDLE9BQUF0c0MsRUFBQTh0QixRQUNBeGtCLEtBQUFpakMsT0FBQXZzQyxFQUFBK3RCLFFBQ0EsSUFBQW1KLEVBQUFsM0IsRUFBQWszQixlQUVBQSxLQUFBcjJCLE9BQ0F5SSxLQUFBMGpDLGlCQUFBOVYsRUFBQWwzQixHQUVBZ1csR0FBQSxNQUFBQSxFQUFBeEosV0FDQWxELEtBQUEwaUMsb0JBQUEsS0FFQTFpQyxLQUFBMmpDLHVCQUFBanRDLEVBQUFnVyxFQUFBTixJQUVBTSxLQUFBeVQsU0FDQW5nQixLQUFBMGlDLG9CQUFBLEtBRUExaUMsS0FBQTRqQywwQkFBQWx0QyxFQUFBZ1csRUFBQU4sS0FFQXBNLEtBQUEwaUMsb0JBQUEsS0FFQTFpQyxLQUFBK2lDLE1BQUEzMkIsTUFHQXkzQixZQUFBLFNBQUFqSSxFQUFBMWhDLEdBS0EsSUFBQTRwQyxFQUFBbEksRUFBQXRsQyxJQUFBLGFBQ0E0RCxFQUFBa0gsRUFBQTdCLEtBQUFyRixFQUFBOEYsTUFDQTQvQixhQUFBNS9CLEtBQUErakMsYUFDQUQsRUFBQSxFQUFBOWpDLEtBQUErakMsWUFBQXhDLFdBQUFybkMsRUFBQTRwQyxHQUFBNXBDLEtBRUF3cEMsaUJBQUEsU0FBQTlWLEVBQUFsM0IsR0FDQSxJQUFBK0ssRUFBQXpCLEtBQUF5aUMsU0FDQW5lLEVBQUF0a0IsS0FBQXdpQyxjQUNBM3VCLEdBQUFuZCxFQUFBOHRCLFFBQUE5dEIsRUFBQSt0QixTQUNBdWYsS0FDQUMsS0FDQUMsRUFBQVQsR0FBQS9zQyxFQUFBNnlCLGNBQUFqRixJQUNBMWlCLEVBQUFnc0IsRUFBQSxTQUFBdVcsR0FXQXZpQyxFQUFBdWlDLEVBQUE5VixXQUFBLFNBQUEzeUIsR0FDQSxJQUFBK0ksRUFBQWhELEVBQUFtaEIsYUFBQWxuQixFQUFBK3RCLFFBQUEsT0FBQS90QixFQUFBZ3VCLFdBQ0EwYSxFQUFBMW9DLEVBQUFsRixNQUNBNnRDLEtBRUEsR0FBQTUvQixHQUFBLE1BQUEyL0IsRUFBQSxDQUlBLElBQUFFLEVBQUFuQyxFQUFBck4sY0FBQXNQLEVBQUEzL0IsRUFBQXVWLEtBQUF2WSxFQUFBL0YsRUFBQTh5QixrQkFBQTl5QixFQUFBNnlCLGVBQ0FudEIsRUFBQVEsS0FBQWxHLEVBQUE4eUIsa0JBQUEsU0FBQStHLEdBQ0EsSUFBQXpJLEVBQUFyckIsRUFBQWl2QixpQkFBQTZFLEVBQUFsSSxhQUNBbnFCLEVBQUFxeUIsRUFBQWpJLGdCQUNBa0ksRUFBQTFJLEtBQUF0akIsY0FBQXRHLEdBQ0FzeUIsRUFBQS9MLFFBQUEvdEIsRUFBQSt0QixRQUNBK0wsRUFBQTlMLFVBQUFodUIsRUFBQWd1QixVQUNBOEwsRUFBQTd3QixTQUFBakosRUFBQWlKLFNBQ0E2d0IsRUFBQWxILE9BQUE1eUIsRUFBQTR5QixPQUNBa0gsRUFBQTRPLFVBQUF6UCxFQUFBVSxnQkFBQTV3QixFQUFBdVYsS0FBQW9xQixHQUNBNU8sRUFBQStPLGVBQUFELEVBRUE5TyxJQUNBeU8sRUFBQW51QyxLQUFBMC9CLEdBQ0E2TyxFQUFBdnVDLEtBQUFnM0IsRUFBQTBYLGNBQUF0aEMsR0FBQSxPQU9BLElBQUF1aEMsRUFBQUgsRUFDQU4sRUFBQWx1QyxNQUFBMnVDLEVBQUFwc0IsRUFBQXFzQixXQUFBRCxHQUFBLGFBQUFKLEVBQUFwb0MsS0FBQSxlQUVLK0QsTUFFTGdrQyxFQUFBdFAsVUFDQXNQLElBQUEvbkMsS0FBQSxnQkFDQSxJQUFBMG9DLEVBQUFqdUMsRUFBQTJVLFNBRUFyTCxLQUFBNmpDLFlBQUFLLEVBQUEsV0FDQWxrQyxLQUFBNGtDLCtCQUFBaFgsR0FDQTV0QixLQUFBNmtDLGdCQUFBWCxFQUFBUyxFQUFBOXdCLEVBQUEsR0FBQUEsRUFBQSxHQUFBN1QsS0FBQXVpQyxnQkFBQTBCLEdBRUFqa0MsS0FBQThrQyxvQkFBQVosRUFBQUYsRUFBQUMsRUFBQWwzQixLQUFBZzRCLFNBQUFseEIsRUFBQSxHQUFBQSxFQUFBLEdBQUE4d0IsTUFNQWhCLHVCQUFBLFNBQUFqdEMsRUFBQWdXLEVBQUFOLEdBQ0EsSUFBQTNLLEVBQUF6QixLQUFBeWlDLFNBSUFwVixFQUFBM2dCLEVBQUEyZ0IsWUFDQXJxQixFQUFBdkIsRUFBQWl2QixpQkFBQXJELEdBRUEyWCxFQUFBdDRCLEVBQUFzNEIsV0FBQWhpQyxFQUNBRSxFQUFBd0osRUFBQXhKLFVBQ0EraEMsRUFBQXY0QixFQUFBdTRCLFNBQ0Fob0MsRUFBQStuQyxFQUFBN2hDLFVBQ0F5NEIsRUFBQTZILEdBQUF4bUMsRUFBQTRSLGFBQUEzTCxHQUFBOGhDLEVBQUFoaUMsTUFBQTR0QixzQkFBcUk1RixNQUFBaHJCLEtBQUF3aUMsZ0JBQ3JJMEMsRUFBQXRKLEVBQUF0bEMsSUFBQSxXQUVBLFNBQUE0dUMsR0FBQSxTQUFBQSxFQUFBLENBSUEsSUFBQXo3QixFQUFBdTdCLEVBQUF4N0IsY0FBQXRHLEVBQUEraEMsR0FDQUUsRUFBQUgsRUFBQVIsY0FBQXRoQyxHQUFBLEVBQUEraEMsR0FDQUcsRUFBQSxRQUFBSixFQUFBN3VDLEtBQUEsSUFBQStNLEVBRUFsRCxLQUFBNmpDLFlBQUFqSSxFQUFBLFdBQ0E1N0IsS0FBQThrQyxvQkFBQWxKLEVBQUF1SixFQUFBMTdCLEVBQUEyN0IsRUFBQTF1QyxFQUFBOHRCLFFBQUE5dEIsRUFBQSt0QixRQUFBL3RCLEVBQUEyVSxTQUFBM1UsRUFBQTZnQyxVQUtBbnJCLEdBQ0FwUixLQUFBLFVBQ0FzeUIsZ0JBQUFwcUIsRUFDQUEsVUFBQWpHLEVBQUFzd0IsWUFBQXJxQixHQUNBbXFCLGNBQ0FoaEIsS0FBQXJNLEtBQUFrTSxRQUdBMDNCLDBCQUFBLFNBQUFsdEMsRUFBQWdXLEVBQUFOLEdBQ0EsSUFBQTJULEVBQUFyVCxFQUFBeVQsUUFFQSxvQkFBQUosRUFBQSxDQUVBQSxHQUNBOWYsUUFGQThmLEVBSUFLLFVBSkFMLEdBUUEsSUFBQXNsQixFQUFBLElBQUEvc0IsRUFBQXlILEVBQUEvZixLQUFBd2lDLGNBQUF4aUMsS0FBQXlpQyxVQUNBMEMsRUFBQUUsRUFBQS91QyxJQUFBLFdBQ0E4dUMsRUFBQXI0QixLQUFBZzRCLFNBSUEva0MsS0FBQTZqQyxZQUFBd0IsRUFBQSxXQUNBcmxDLEtBQUE4a0Msb0JBQUFPLEVBQUFGLEVBQUFFLEVBQUEvdUMsSUFBQSx1QkFBeUc4dUMsRUFBQTF1QyxFQUFBOHRCLFFBQUE5dEIsRUFBQSt0QixRQUFBL3RCLEVBQUEyVSxTQUFBcUIsS0FJekdOLEdBQ0FwUixLQUFBLFVBQ0FxUixLQUFBck0sS0FBQWtNLE9BR0E0NEIsb0JBQUEsU0FBQWxKLEVBQUF1SixFQUFBMTdCLEVBQUEyN0IsRUFBQTMwQixFQUFBQyxFQUFBaTBCLEVBQUFqNEIsR0FJQSxHQUZBMU0sS0FBQW9qQyxRQUFBLEdBRUF4SCxFQUFBdGxDLElBQUEsZ0JBQUFzbEMsRUFBQXRsQyxJQUFBLFNBSUEsSUFBQStyQyxFQUFBcmlDLEtBQUF1aUMsZ0JBQ0FuaUIsRUFBQXdiLEVBQUF0bEMsSUFBQSxhQUNBcXVDLEtBQUEvSSxFQUFBdGxDLElBQUEsWUFDQSxJQUFBZ3ZDLEVBQUFILEVBRUEsR0FBQS9rQixHQUFBLGlCQUFBQSxFQUNBa2xCLEVBQUFqdEIsRUFBQWt0QixVQUFBbmxCLEVBQUEzVyxHQUFBLFFBQ0ssc0JBQUEyVyxFQUFBLENBQ0wsSUFBQWxpQixFQUFBcUIsRUFBQSxTQUFBaW1DLEVBQUFGLEdBQ0FFLElBQUF4bEMsS0FBQW9qQyxVQUNBZixFQUFBM0IsV0FBQTRFLEdBRUF0bEMsS0FBQTZrQyxnQkFBQWpKLEVBQUErSSxFQUFBbDBCLEVBQUFDLEVBQUEyeEIsRUFBQTU0QixFQUFBaUQsS0FFTzFNLE1BQ1BBLEtBQUFvakMsUUFBQWdDLEVBQ0FFLEVBQUFsbEIsRUFBQTNXLEVBQUEyN0IsRUFBQWxuQyxHQUdBbWtDLEVBQUEzQixXQUFBNEUsR0FDQWpELEVBQUFsNEIsS0FBQXl4QixHQUVBNTdCLEtBQUE2a0MsZ0JBQUFqSixFQUFBK0ksRUFBQWwwQixFQUFBQyxFQUFBMnhCLEVBQUE1NEIsRUFBQWlELEtBYUFtNEIsZ0JBQUEsU0FBQWpKLEVBQUErSSxFQUFBbDBCLEVBQUFDLEVBQUF6USxFQUFBd0osRUFBQWlELEdBQ0EsSUFBQXlILEVBQUFuVSxLQUFBMG1CLEtBQUF2VCxXQUVBaUIsRUFBQXBVLEtBQUEwbUIsS0FBQXRULFlBRUF1eEIsS0FBQS9JLEVBQUF0bEMsSUFBQSxZQUNBLElBQUFtdkMsRUFBQXhsQyxFQUFBNGdDLFVBQ0F2VixFQUFBc1EsRUFBQXRsQyxJQUFBLFNBQ0FvdkMsRUFBQTlKLEVBQUF0bEMsSUFBQSxpQkFDQTA2QixFQUFBdGtCLEtBQUErSixrQkFBQWtLLFFBV0EsR0FWQWpVLEdBQUFza0IsRUFBQXBZLGVBQUFsTSxFQUFBZ04sV0FFQSxtQkFBQWlyQixJQUVBQSxLQUFBbDBCLEVBQUFDLEdBQUFqSCxFQUFBeEosRUFBQXlNLEdBQUFza0IsR0FDQTJVLFVBQUF4eEIsRUFBQUMsR0FDQXF4QixjQUFBaHJDLFdBSUEyRyxFQUFBNkUsUUFBQTArQixHQUNBbDBCLEVBQUFzRyxFQUFBNHRCLEVBQUEsR0FBQXh3QixHQUNBekQsRUFBQXFHLEVBQUE0dEIsRUFBQSxHQUFBdndCLFFBQ0ssR0FBQWhULEVBQUFta0IsU0FBQW9mLEdBQUEsQ0FDTEEsRUFBQWw1QixNQUFBZzZCLEVBQUEsR0FDQWQsRUFBQW53QixPQUFBaXhCLEVBQUEsR0FDQSxJQUFBaEwsRUFBQWIsRUFBQWxELGNBQUFpTyxHQUNBbDVCLE1BQUEwSSxFQUNBSyxPQUFBSixJQUVBM0QsRUFBQWdxQixFQUFBaHFCLEVBQ0FDLEVBQUErcEIsRUFBQS9wQixFQUNBNGEsRUFBQSxLQUdBb2EsRUFBQSxVQUVBLG9CQUFBZixHQUFBajRCLEVBQUEsQ0FDQSxJQUFBdU8sRUErSkEsU0FBQTVQLEVBQUEybEIsRUFBQXlVLEdBQ0EsSUFBQUcsRUFBQUgsRUFBQSxHQUNBSSxFQUFBSixFQUFBLEdBRUFoMUIsRUFBQSxFQUNBQyxFQUFBLEVBQ0FvMUIsRUFBQTlVLEVBQUF2bEIsTUFDQXM2QixFQUFBL1UsRUFBQXhjLE9BRUEsT0FBQW5KLEdBQ0EsYUFDQW9GLEVBQUF1Z0IsRUFBQXZnQixFQUFBcTFCLEVBQUEsRUFBQUYsRUFBQSxFQUNBbDFCLEVBQUFzZ0IsRUFBQXRnQixFQUFBcTFCLEVBQUEsRUFBQUYsRUFBQSxFQUNBLE1BRUEsVUFDQXAxQixFQUFBdWdCLEVBQUF2Z0IsRUFBQXExQixFQUFBLEVBQUFGLEVBQUEsRUFDQWwxQixFQUFBc2dCLEVBQUF0Z0IsRUFBQW0xQixFQWRBLEVBZUEsTUFFQSxhQUNBcDFCLEVBQUF1Z0IsRUFBQXZnQixFQUFBcTFCLEVBQUEsRUFBQUYsRUFBQSxFQUNBbDFCLEVBQUFzZ0IsRUFBQXRnQixFQUFBcTFCLEVBbkJBLEVBb0JBLE1BRUEsV0FDQXQxQixFQUFBdWdCLEVBQUF2Z0IsRUFBQW0xQixFQXZCQSxFQXdCQWwxQixFQUFBc2dCLEVBQUF0Z0IsRUFBQXExQixFQUFBLEVBQUFGLEVBQUEsRUFDQSxNQUVBLFlBQ0FwMUIsRUFBQXVnQixFQUFBdmdCLEVBQUFxMUIsRUE1QkEsRUE2QkFwMUIsRUFBQXNnQixFQUFBdGdCLEVBQUFxMUIsRUFBQSxFQUFBRixFQUFBLEVBR0EsT0FBQXAxQixFQUFBQyxHQWxNQXMxQixDQUFBckIsRUFBQTNULEVBQUF5VSxHQUNBaDFCLEVBQUF3SyxFQUFBLEdBQ0F2SyxFQUFBdUssRUFBQSxPQUNPLENBQ1BBLEVBb0dBLFNBQUF4SyxFQUFBQyxFQUFBaEUsRUFBQXlILEVBQUFDLEVBQUE2eEIsRUFBQUMsR0FDQSxJQUFBOXVCLEVBQUErdUIsRUFBQXo1QixHQUNBakIsRUFBQTJMLEVBQUEzTCxNQUNBK0ksRUFBQTRDLEVBQUE1QyxPQUVBLE1BQUF5eEIsSUFDQXgxQixFQUFBaEYsRUFBQXc2QixFQUFBOXhCLEVBQ0ExRCxHQUFBaEYsRUFBQXc2QixFQUVBeDFCLEdBQUF3MUIsR0FJQSxNQUFBQyxJQUNBeDFCLEVBQUE4RCxFQUFBMHhCLEVBQUE5eEIsRUFDQTFELEdBQUE4RCxFQUFBMHhCLEVBRUF4MUIsR0FBQXcxQixHQUlBLE9BQUF6MUIsRUFBQUMsR0F6SEEwMUIsQ0FBQTMxQixFQUFBQyxFQUFBelEsRUFBQXlNLEdBQUF5SCxFQUFBQyxFQUFBa1gsRUFBQSxRQUFBb2EsRUFBQSxTQUNBajFCLEVBQUF3SyxFQUFBLEdBQ0F2SyxFQUFBdUssRUFBQSxHQU1BLEdBSEFxUSxJQUFBN2EsR0FBQTQxQixFQUFBL2EsR0FBQW1hLEVBQUEsZUFBQW5hLEVBQUFtYSxFQUFBLE1BQ0FDLElBQUFoMUIsR0FBQTIxQixFQUFBWCxHQUFBRCxFQUFBLGdCQUFBQyxFQUFBRCxFQUFBLE1BRUE3SixFQUFBdGxDLElBQUEsWUFDQTJrQixFQW1IQSxTQUFBeEssRUFBQUMsRUFBQWhFLEVBQUF5SCxFQUFBQyxHQUNBLElBQUFnRCxFQUFBK3VCLEVBQUF6NUIsR0FDQWpCLEVBQUEyTCxFQUFBM0wsTUFDQStJLEVBQUE0QyxFQUFBNUMsT0FLQSxPQUpBL0QsRUFBQTFELEtBQUFzSyxJQUFBNUcsRUFBQWhGLEVBQUEwSSxHQUFBMUksRUFDQWlGLEVBQUEzRCxLQUFBc0ssSUFBQTNHLEVBQUE4RCxFQUFBSixHQUFBSSxFQUNBL0QsRUFBQTFELEtBQUFtRyxJQUFBekMsRUFBQSxHQUNBQyxFQUFBM0QsS0FBQW1HLElBQUF4QyxFQUFBLElBQ0FELEVBQUFDLEdBM0hBNDFCLENBQUE3MUIsRUFBQUMsRUFBQXpRLEVBQUF5TSxHQUFBeUgsRUFBQUMsR0FDQTNELEVBQUF3SyxFQUFBLEdBQ0F2SyxFQUFBdUssRUFBQSxHQUdBaGIsRUFBQStnQyxPQUFBdndCLEVBQUFDLElBSUFrMEIsK0JBQUEsU0FBQWhYLEdBQ0EsSUFBQTJZLEVBQUF2bUMsS0FBQTBpQyxvQkFDQThELElBQUFELEtBQUFodkMsU0FBQXEyQixFQUFBcjJCLE9Ba0JBLE9BakJBaXZDLEdBQUE1a0MsRUFBQTJrQyxFQUFBLFNBQUFFLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQUYsRUFBQXBZLGVBRUF1WSxHQURBaFosRUFBQThZLFFBQ0FyWSxnQkFDQW1ZLEdBQUFHLEVBQUFwdkMsU0FBQXF2QyxFQUFBcnZDLFNBQ0FxSyxFQUFBK2tDLEVBQUEsU0FBQUUsRUFBQUMsR0FDQSxJQUFBQyxFQUFBSCxFQUFBRSxPQUNBRSxFQUFBSCxFQUFBclksc0JBQ0F5WSxFQUFBRixFQUFBdlksdUJBQ0FnWSxHQUFBSyxFQUFBcndDLFFBQUF1d0MsRUFBQXZ3QyxPQUFBcXdDLEVBQUFsaUMsV0FBQW9pQyxFQUFBcGlDLFVBQUFraUMsRUFBQXZZLFNBQUF5WSxFQUFBelksUUFBQTBZLEVBQUF6dkMsU0FBQTB2QyxFQUFBMXZDLFNBQ0FxSyxFQUFBb2xDLEVBQUEsU0FBQUUsRUFBQS9zQyxHQUNBLElBQUFndEMsRUFBQUYsRUFBQTlzQyxHQUNBcXNDLEdBQUFVLEVBQUE3WixjQUFBOFosRUFBQTlaLGFBQUE2WixFQUFBaGtDLFlBQUFpa0MsRUFBQWprQyxnQkFJQWxELEtBQUEwaUMsb0JBQUE5VSxJQUNBNFksR0FFQXpELE1BQUEsU0FBQTMyQixHQUtBcE0sS0FBQTBpQyxvQkFBQSxLQUNBdDJCLEdBQ0FwUixLQUFBLFVBQ0FxUixLQUFBck0sS0FBQWtNLE9BR0E5TixRQUFBLFNBQUFxRCxFQUFBQyxHQUNBdXZCLEVBQUFLLE1BQUFMLEVBQUFpTyxNQUlBbC9CLEtBQUF1aUMsZ0JBQUE1YixPQUVBeEMsRUFBQU8sV0FBQSxjQUFBaGpCLE9BU0EsU0FBQStoQyxFQUFBMkQsR0FHQSxJQUZBLElBQUFDLEVBQUFELEVBQUF2c0MsTUFFQXVzQyxFQUFBN3ZDLFFBQUEsQ0FDQSxJQUFBd29CLEVBQUFxbkIsRUFBQXZzQyxNQUVBa2xCLElBQ0F6SCxFQUFBdFUsV0FBQStiLEtBQ0FBLElBQUF6cEIsSUFBQSxlQVFBLGlCQUFBeXBCLElBQ0FBLEdBQ0FLLFVBQUFMLElBSUFzbkIsRUFBQSxJQUFBL3VCLEVBQUF5SCxFQUFBc25CLElBQUE1bEMsVUFJQSxPQUFBNGxDLEVBR0EsU0FBQXRWLEVBQUFydkIsRUFBQWhCLEdBQ0EsT0FBQWdCLEVBQUEwSixnQkFBQWhMLEVBQUE3QixLQUFBbUMsRUFBQTBLLGVBQUExSyxHQXNDQSxTQUFBeWtDLEVBQUF6NUIsR0FDQSxJQUFBakIsRUFBQWlCLEVBQUFvMEIsWUFDQXRzQixFQUFBOUgsRUFBQXEwQixhQUdBLEdBQUExbkMsU0FBQWduQyxhQUFBaG5DLFNBQUFnbkMsWUFBQUMsaUJBQUEsQ0FDQSxJQUFBSCxFQUFBOW1DLFNBQUFnbkMsWUFBQUMsaUJBQUE1ekIsR0FFQXl6QixJQUNBMTBCLEdBQUE2N0IsU0FBQW5ILEVBQUFvSCxZQUFBLElBQUFELFNBQUFuSCxFQUFBcUgsYUFBQSxJQUFBRixTQUFBbkgsRUFBQXNILGdCQUFBLElBQUFILFNBQUFuSCxFQUFBdUgsaUJBQUEsSUFDQWx6QixHQUFBOHlCLFNBQUFuSCxFQUFBd0gsV0FBQSxJQUFBTCxTQUFBbkgsRUFBQXlILGNBQUEsSUFBQU4sU0FBQW5ILEVBQUEwSCxlQUFBLElBQUFQLFNBQUFuSCxFQUFBMkgsa0JBQUEsS0FJQSxPQUNBcjhCLFFBQ0ErSSxVQTBDQSxTQUFBNnhCLEVBQUEvYSxHQUNBLGlCQUFBQSxHQUFBLFdBQUFBLEVBR0FseEIsRUFBQTBELFFBQUFvRSwyREM3dEJBLFNBQUE2bEMsR0F1QkEsSUFBQUMsRUFFQSxvQkFBQWwwQyxPQUNBazBDLEVBQUFsMEMsT0FBQW90QixhQUVBLElBQUE2bUIsSUFDQUMsRUFBQUQsRUFBQTdtQixjQUdBLElBQUE4bUIsSUFDQUEsR0FBQSxHQUdBLElBQUE5bUIsRUFBQThtQixFQUNBbHFDLEVBQUFvakIsaUlDckNBLElBQUExYSxFQUFBalIsRUFBQSwyQ0FFQXFNLEVBQUE0RSxFQUFBNUUsS0FDQWxILEVBQUE4TCxFQUFBOUwsSUFFQW9jLEVBQUF2aEIsRUFBQSw2Q0FFQXloQixFQUFBRixFQUFBRSxVQUNBaXhCLEVBQUFueEIsRUFBQW14QixrQkFFQUMsRUFBQTN5QyxFQUFBLDREQUVBNHlDLEVBQUFELEVBQUFDLGdCQUNBQyxFQUFBRixFQUFBRSxpQkFDQUMsRUFBQUgsRUFBQUcsMEJBb0JBQyxHQUFBLEtBTUFDLEVBQUEsU0FBQWhrQyxFQUFBOFcsRUFBQXpELEdBS0E1WCxLQUFBdUUsTUFNQXZFLEtBQUFxYixRQU1BcmIsS0FBQXdvQyxRQUFBNXdCLElBQUEsS0FLQTVYLEtBQUFrZixTQUFBLEVBTUFsZixLQUFBeW9DLFFBQUEsR0FzTUEsU0FBQUMsRUFBQTl3QixFQUFBK3dCLEdBQ0EsSUFFQW5sQixHQUZBNUwsRUFBQSxHQUFBQSxFQUFBLElBQ0Erd0IsRUFDQSxFQUNBL3dCLEVBQUEsSUFBQTRMLEVBQ0E1TCxFQUFBLElBQUE0TCxFQXhNQStrQixFQUFBbDBDLFdBQ0FtTixZQUFBK21DLEVBT0FLLFFBQUEsU0FBQS9zQixHQUNBLElBQUFqRSxFQUFBNVgsS0FBQXdvQyxRQUNBbnhCLEVBQUF0SyxLQUFBc0ssSUFBQU8sRUFBQSxHQUFBQSxFQUFBLElBQ0ExRSxFQUFBbkcsS0FBQW1HLElBQUEwRSxFQUFBLEdBQUFBLEVBQUEsSUFDQSxPQUFBaUUsR0FBQXhFLEdBQUF3RSxHQUFBM0ksR0FRQXFaLFlBQUEsU0FBQXR2QixHQUNBLE9BQUErQyxLQUFBNG9DLFFBQUE1b0MsS0FBQWdlLFlBQUEvZ0IsS0FPQWdkLFVBQUEsV0FDQSxPQUFBamEsS0FBQXdvQyxRQUFBL3RDLFNBUUF3dEMsa0JBQUEsU0FBQVksR0FDQSxPQUFBWixFQUFBWSxHQUFBN29DLEtBQUFxYixNQUFBcEIsWUFBQWphLEtBQUF3b0MsVUFRQU0sVUFBQSxTQUFBeDdCLEVBQUFnSCxHQUNBLElBQUFzRCxFQUFBNVgsS0FBQXdvQyxRQUNBNXdCLEVBQUEsR0FBQXRLLEVBQ0FzSyxFQUFBLEdBQUF0RCxHQVNBMEosWUFBQSxTQUFBL2dCLEVBQUE4ckMsR0FDQSxJQUFBbnhCLEVBQUE1WCxLQUFBd29DLFFBQ0FudEIsRUFBQXJiLEtBQUFxYixNQVFBLE9BUEFwZSxFQUFBb2UsRUFBQTJ0QixVQUFBL3JDLEdBRUErQyxLQUFBeW9DLFFBQUEsWUFBQXB0QixFQUFBcmdCLE1BRUEwdEMsRUFEQTl3QixJQUFBbmQsUUFDQTRnQixFQUFBOVIsU0FHQXlOLEVBQUEvWixFQUFBcXJDLEVBQUExd0IsRUFBQW14QixJQVNBRSxZQUFBLFNBQUFwdEIsRUFBQWt0QixHQUNBLElBQUFueEIsRUFBQTVYLEtBQUF3b0MsUUFDQW50QixFQUFBcmIsS0FBQXFiLE1BRUFyYixLQUFBeW9DLFFBQUEsWUFBQXB0QixFQUFBcmdCLE1BRUEwdEMsRUFEQTl3QixJQUFBbmQsUUFDQTRnQixFQUFBOVIsU0FHQSxJQUFBclMsRUFBQThmLEVBQUE2RSxFQUFBakUsRUFBQTB3QixFQUFBUyxHQUNBLE9BQUEvb0MsS0FBQXFiLFlBQUFua0IsSUFTQWs0QixZQUFBLFNBQUF2YixFQUFBazFCLEtBaUJBcHRCLGVBQUEsU0FBQTVYLEdBRUEsSUFBQXdYLEdBREF4WCxTQUNBd1gsV0FBQXZiLEtBQUFrcEMsZUFDQW52QyxFQUFBb3VDLEVBQUFub0MsS0FBQXViLEdBQ0E0dEIsRUFBQXB2QyxFQUFBb3ZDLE1BQ0F6dEIsRUFBQWhoQixFQUFBeXVDLEVBQUEsU0FBQXB0QixHQUNBLE9BQ0FGLE1BQUE3YixLQUFBZ2UsWUFBQWpDLEdBQ0FBLGNBRUsvYixNQUNMb3BDLEVBQUE3dEIsRUFBQWpsQixJQUFBLGtCQUVBLE9Bc0ZBLFNBQUEwakIsRUFBQTBCLEVBQUEydEIsRUFBQUQsRUFBQUwsR0FDQSxJQUFBTyxFQUFBNXRCLEVBQUFua0IsT0FFQSxJQUFBeWlCLEVBQUF5dUIsUUFBQVcsSUFBQUUsRUFDQSxPQUdBLElBQ0FDLEVBREExaEIsRUFBQTdOLEVBQUFDLFlBR0EsT0FBQXF2QixFQUNBNXRCLEVBQUEsR0FBQUcsTUFBQWdNLEVBQUEsR0FDQTBoQixFQUFBN3RCLEVBQUEsSUFDQUcsTUFBQWdNLEVBQUEsUUFFRyxDQUNILElBQUEyaEIsRUFBQTl0QixFQUFBLEdBQUFHLE1BQUFILEVBQUEsR0FBQUcsTUFDQWphLEVBQUE4WixFQUFBLFNBQUErdEIsR0FDQUEsRUFBQTV0QixPQUFBMnRCLEVBQUEsRUFDQSxJQUFBSCxLQUFBLEVBRUFBLEVBQUEsTUFDQUksRUFBQTV0QixPQUFBMnRCLEdBQUEsR0FBQUgsRUFBQSxPQUdBRSxHQUNBMXRCLE1BQUFILEVBQUE0dEIsRUFBQSxHQUFBenRCLE1BQUEydEIsR0FFQTl0QixFQUFBNWxCLEtBQUF5ekMsR0FHQSxJQUFBcnFCLEVBQUEySSxFQUFBLEdBQUFBLEVBQUEsR0FFQTZoQixFQUFBaHVCLEVBQUEsR0FBQUcsTUFBQWdNLEVBQUEsTUFDQWtoQixFQUFBcnRCLEVBQUEsR0FBQUcsTUFBQWdNLEVBQUEsR0FBQW5NLEVBQUE4dEIsU0FHQVQsR0FBQVcsRUFBQTdoQixFQUFBLEdBQUFuTSxFQUFBLEdBQUFHLFFBQ0FILEVBQUFpdUIsU0FDQTl0QixNQUFBZ00sRUFBQSxLQUlBNmhCLEVBQUE3aEIsRUFBQSxHQUFBMGhCLEVBQUExdEIsU0FDQWt0QixFQUFBUSxFQUFBMXRCLE1BQUFnTSxFQUFBLEdBQUFuTSxFQUFBN2dCLE9BR0FrdUMsR0FBQVcsRUFBQUgsRUFBQTF0QixNQUFBZ00sRUFBQSxLQUNBbk0sRUFBQTVsQixNQUNBK2xCLE1BQUFnTSxFQUFBLEtBSUEsU0FBQTZoQixFQUFBbHVDLEVBQUFDLEdBQ0EsT0FBQXlqQixFQUFBMWpCLEVBQUFDLEVBQUFELEVBQUFDLEdBN0lBbXVDLENBQUE1cEMsS0FBQTBiLEVBQUEzaEIsRUFBQXN2QyxxQkFBQUQsRUFBQXJsQyxFQUFBZ2xDLE9BQ0FydEIsR0FVQXdCLGNBQUEsV0FDQSxPQUFBa3JCLEVBQUFwb0MsTUFBQWlkLFFBTUE0c0IsY0FBQSxXQUNBLE9BQUE3cEMsS0FBQWdyQixNQUFBcmIsU0FBQSxjQVdBdTVCLGFBQUEsV0FDQSxPQUFBbHBDLEtBQUFnckIsTUFBQXJiLFNBQUEsYUFPQStYLGFBQUEsV0FDQSxJQUFBRyxFQUFBN25CLEtBQUF3b0MsUUFDQUssRUFBQTdvQyxLQUFBcWIsTUFBQXBCLFlBQ0EzUSxFQUFBdS9CLEVBQUEsR0FBQUEsRUFBQSxJQUFBN29DLEtBQUF5b0MsT0FBQSxLQUVBLElBQUFuL0IsTUFBQSxHQUNBLElBQUE4TixFQUFBckssS0FBQWlJLElBQUE2UyxFQUFBLEdBQUFBLEVBQUEsSUFDQSxPQUFBOWEsS0FBQWlJLElBQUFvQyxHQUFBOU4sR0FPQXdnQyxhQUFBLEtBTUFDLFVBQUEsS0FPQTFCLDBCQUFBLFdBQ0EsT0FBQUEsRUFBQXJvQyxRQStFQSxJQUFBa0MsRUFBQXFtQyxFQUNBbnVDLEVBQUEwRCxRQUFBb0Usb0VDdFZBM00sRUFBQSx3Q0FFQTJyQixRQUZBLElBSUE5ZixFQUFBN0wsRUFBQSwyQ0FFQXkwQyxFQUFBejBDLEVBQUEsK0NBRUEwMEMsRUFBQTEwQyxFQUFBLGdEQUVBMjBDLEVBQUEzMEMsRUFBQSw2Q0FFQTJzQyxFQUFBM3NDLEVBQUEsNkNBRUE0MEMsRUFBQTUwQyxFQUFBLGdEQUVBNjBDLEVBQUFELEVBQUFDLHVCQUNBQyxFQUFBRixFQUFBRSxpQkFDQUMsRUFBQUgsRUFBQUcscUJBRUFDLEVBQUFoMUMsRUFBQSxtREE2QkEsU0FBQWkxQyxFQUFBbnZCLEVBQUEyUCxHQUNBLElBTUF5ZixFQUNBQyxFQUNBN2UsRUFSQThlLEVBQUF0dkIsRUFBQXJnQixLQUNBcWMsRUFBQTJULEVBQUE0ZixTQUNBMTNCLEVBQUE4WCxFQUFBNmYsU0FDQUMsRUFBQSxNQUFBenpCLEVBQ0EwekIsRUFBQSxNQUFBNzNCLEVBQ0E4M0IsRUFBQTN2QixFQUFBcEIsWUFLQSxZQUFBMHdCLEVBQ0FGLEVBQUF6ZixFQUFBMU4sZ0JBQUEvbEIsUUFFQW16QyxFQUFBMWYsRUFBQTEwQixJQUFBLGVBRUE4SyxFQUFBNkUsUUFBQXlrQyxLQUNBQSxNQUFBLEVBQUFBLEdBQUEsSUFHQSxrQkFBQUEsRUFBQSxLQUNBQSxHQUFBLE1BR0FBLEVBQUEsR0FBQXhJLEVBQUFuckIsYUFBQTJ6QixFQUFBLE1BQ0FBLEVBQUEsR0FBQXhJLEVBQUFuckIsYUFBQTJ6QixFQUFBLE1BQ0E3ZSxFQUFBbWYsRUFBQSxHQUFBQSxFQUFBLElBQUFqK0IsS0FBQWlJLElBQUFnMkIsRUFBQSxLQWdCQSxNQUFBM3pCLElBQ0FBLEVBQUEsWUFBQXN6QixFQUFBRixFQUFBLEVBQUF0eUIsSUFBQTZ5QixFQUFBLEdBQUFOLEVBQUEsR0FBQTdlLEdBR0EsTUFBQTNZLElBQ0FBLEVBQUEsWUFBQXkzQixFQUFBRixJQUFBLEVBQUF0eUIsSUFBQTZ5QixFQUFBLEdBQUFOLEVBQUEsR0FBQTdlLEdBR0EsWUFBQXhVLEVBQ0FBLEVBQUEyekIsRUFBQSxHQUNHLG1CQUFBM3pCLElBQ0hBLEtBQ0FBLElBQUEyekIsRUFBQSxHQUNBOTNCLElBQUE4M0IsRUFBQSxNQUlBLFlBQUE5M0IsRUFDQUEsRUFBQTgzQixFQUFBLEdBQ0csbUJBQUE5M0IsSUFDSEEsS0FDQW1FLElBQUEyekIsRUFBQSxHQUNBOTNCLElBQUE4M0IsRUFBQSxPQUlBLE1BQUEzekIsSUFBQWdJLFNBQUFoSSxRQUFBYyxNQUNBLE1BQUFqRixJQUFBbU0sU0FBQW5NLFFBQUFpRixLQUNBa0QsRUFBQTR2QixTQUFBN3BDLEVBQUE4cEMsTUFBQTd6QixJQUFBalcsRUFBQThwQyxNQUFBaDRCLElBQUEsWUFBQXkzQixJQUFBdHZCLEVBQUE3VixpQkFBQTJsQyxXQUFBNXpDLFFBRUF5ekIsRUFBQW9nQixxQkFFQS96QixFQUFBLEdBQUFuRSxFQUFBLElBQUE0M0IsSUFDQXp6QixFQUFBLEdBSUFBLEVBQUEsR0FBQW5FLEVBQUEsSUFBQTYzQixJQUNBNzNCLEVBQUEsSUFhQSxJQUFBelIsRUFBQXVwQixFQUFBdnBCLFFBRUEsR0FBQUEsR0FBQSxTQUFBa3BDLEVBRUEsQ0FDQSxJQUNBVSxFQURBQyxFQUFBbEIsRUFBQSxNQUFBM29DLEdBTUEsR0FKQUwsRUFBQVEsS0FBQTBwQyxFQUFBLFNBQUF0b0MsR0FDQXFvQyxHQUFBcm9DLEVBQUF1b0MsZ0JBQUF2Z0IsRUFBQWhSLE9BR0FxeEIsRUFBQSxDQUVBLElBQUFHLEVBQUFuQixFQUFBaUIsR0FFQUcsRUFTQSxTQUFBcDBCLEVBQUFuRSxFQUFBOFgsRUFBQXdnQixHQUVBLElBQUEzakIsRUFBQW1ELEVBQUFoUixLQUFBQyxZQUNBeXhCLEVBQUE3akIsRUFBQSxHQUFBQSxFQUFBLEdBRUE4akIsRUFBQXJCLEVBQUFrQixFQUFBeGdCLEVBQUFoUixNQUVBLFFBQUF0YixJQUFBaXRDLEVBQ0EsT0FDQXQwQixNQUNBbkUsT0FJQSxJQUFBMDRCLEVBQUFDLElBQ0F6cUMsRUFBQVEsS0FBQStwQyxFQUFBLFNBQUFqd0MsR0FDQWt3QyxFQUFBNytCLEtBQUFzSyxJQUFBM2IsRUFBQXlSLE9BQUF5K0IsS0FFQSxJQUFBRSxHQUFBRCxJQUNBenFDLEVBQUFRLEtBQUErcEMsRUFBQSxTQUFBandDLEdBQ0Fvd0MsRUFBQS8rQixLQUFBbUcsSUFBQXhYLEVBQUF5UixPQUFBelIsRUFBQStQLE1BQUFxZ0MsS0FFQUYsRUFBQTcrQixLQUFBaUksSUFBQTQyQixHQUNBRSxFQUFBLytCLEtBQUFpSSxJQUFBODJCLEdBQ0EsSUFBQUMsRUFBQUgsRUFBQUUsRUFFQUUsRUFBQTk0QixFQUFBbUUsRUFFQTQwQixFQUFBRCxHQURBLEdBQUFKLEVBQUFFLEdBQUFKLEdBQ0FNLEVBR0EsT0FDQTMwQixJQUZBQSxHQUFBNDBCLEdBQUFMLEVBQUFHLEdBR0E3NEIsSUFKQUEsR0FBQSs0QixHQUFBSCxFQUFBQyxJQXRDQUcsQ0FBQTcwQixFQUFBbkUsRUFBQThYLEVBQUF3Z0IsR0FDQW4wQixFQUFBbzBCLEVBQUFwMEIsSUFDQW5FLEVBQUF1NEIsRUFBQXY0QixLQUlBLE9BQUFtRSxFQUFBbkUsR0FvSEEsU0FBQWk1QixFQUFBbnlCLEdBQ0EsSUFBQW95QixFQUFBcHlCLEVBQUE2dkIsZ0JBQUF2ekMsSUFBQSxhQUNBKzFDLEVBQUEsYUFBQXJ5QixFQUFBaGYsS0FBQWdmLEVBQUFxQixNQUFBcEIsWUFBQSxRQUVBLHVCQUFBbXlCLEVBQ0FBLEVBQUEsU0FBQUUsR0FDQSxnQkFBQW5kLEdBQ0EsT0FBQW1kLEVBQUFuckMsUUFBQSxVQUFtQyxNQUFBZ3VCLElBQUEsS0FGbkMsQ0FJS2lkLEdBSUYsbUJBQUFBLEVBQ0gsU0FBQXJ3QixFQUFBdmYsR0FXQSxPQUpBLE1BQUE2dkMsSUFDQTd2QyxFQUFBdWYsRUFBQXN3QixHQUdBRCxFQUFBL1csRUFBQXJiLEVBQUErQixHQUFBdmYsSUFHQSxTQUFBK3ZDLEdBQ0EsT0FBQXZ5QixFQUFBcUIsTUFBQStaLFNBQUFtWCxJQUtBLFNBQUFsWCxFQUFBcmIsRUFBQXhqQixHQUlBLG1CQUFBd2pCLEVBQUFoZixLQUFBZ2YsRUFBQXFCLE1BQUErWixTQUFBNStCLEtBZ0RBLFNBQUFnMkMsRUFBQWgyQixFQUFBcEwsR0FDQSxJQUFBcWhDLEVBQUFyaEMsRUFBQTJCLEtBQUE0RyxHQUFBLElBQ0ErNEIsRUFBQWwyQixFQUFBbTJCLFFBQ0FDLEVBQUFGLEVBQUFqaEMsTUFDQW9oQyxFQUFBSCxFQUFBbDRCLE9BQ0FzNEIsRUFBQUYsRUFBQTcvQixLQUFBQyxJQUFBeS9CLEdBQUFJLEVBQUE5L0IsS0FBQUcsSUFBQXUvQixHQUNBTSxFQUFBSCxFQUFBNy9CLEtBQUFHLElBQUF1L0IsR0FBQUksRUFBQTkvQixLQUFBQyxJQUFBeS9CLEdBRUEsT0FEQSxJQUFBbEMsRUFBQW1DLEVBQUFqOEIsRUFBQWk4QixFQUFBaDhCLEVBQUFvOEIsRUFBQUMsR0E5VkF4M0MsRUFBQSw0Q0FFQUEsRUFBQSwyQ0FnV0F1SSxFQUFBMHNDLGlCQUNBMXNDLEVBQUFrdkMsZ0JBOUtBLFNBQUEzeEIsRUFBQTJQLEdBQ0EsSUFBQXBULEVBQUE0eUIsRUFBQW52QixFQUFBMlAsR0FDQThmLEVBQUEsTUFBQTlmLEVBQUE0ZixTQUNBRyxFQUFBLE1BQUEvZixFQUFBNmYsU0FDQW9DLEVBQUFqaUIsRUFBQTEwQixJQUFBLGVBRUEsUUFBQStrQixFQUFBcmdCLE9BQ0FxZ0IsRUFBQTZ4QixLQUFBbGlCLEVBQUExMEIsSUFBQSxZQUdBLElBQUFxMEMsRUFBQXR2QixFQUFBcmdCLEtBQ0FxZ0IsRUFBQXl0QixVQUFBbHhCLEVBQUEsR0FBQUEsRUFBQSxJQUNBeUQsRUFBQTh4QixZQUNBRixjQUNBbkMsU0FDQUMsU0FDQXFDLFlBQUEsYUFBQXpDLEdBQUEsU0FBQUEsRUFBQTNmLEVBQUExMEIsSUFBQSxvQkFDQSsyQyxZQUFBLGFBQUExQyxHQUFBLFNBQUFBLEVBQUEzZixFQUFBMTBCLElBQUEsc0JBT0EsSUFBQWczQyxFQUFBdGlCLEVBQUExMEIsSUFBQSxZQUVBLE1BQUFnM0MsR0FDQWp5QixFQUFBa3lCLGFBQUFseUIsRUFBQWt5QixZQUFBRCxJQW9KQXh2QyxFQUFBMHZDLG1CQTFJQSxTQUFBeGlCLEVBQUFybUIsR0FHQSxHQUZBQSxLQUFBcW1CLEVBQUExMEIsSUFBQSxRQUdBLE9BQUFxTyxHQUVBLGVBQ0EsV0FBQXFsQyxFQUFBaGYsRUFBQXhsQixlQUFBd2xCLEVBQUF4bEIsaUJBQUF3bEIsRUFBQTFOLGlCQUFBdXVCLEtBQUEsTUFFQSxZQUNBLFdBQUE1QixFQUdBLFFBQ0EsT0FBQUMsRUFBQXVELFNBQUE5b0MsSUFBQXNsQyxHQUFBNXFDLE9BQUEyckIsS0E2SEFsdEIsRUFBQTR2QyxnQkFwSEEsU0FBQTF6QixHQUNBLElBQUE2dUIsRUFBQTd1QixFQUFBcUIsTUFBQXBCLFlBQ0E1QyxFQUFBd3hCLEVBQUEsR0FDQTMxQixFQUFBMjFCLEVBQUEsR0FDQSxRQUFBeHhCLEVBQUEsR0FBQW5FLEVBQUEsR0FBQW1FLEVBQUEsR0FBQW5FLEVBQUEsSUFpSEFwVixFQUFBcXVDLHFCQUNBcnVDLEVBQUF1M0Isa0JBQ0F2M0IsRUFBQTZ2Qyx1QkF6REEsU0FBQTN6QixHQUNBLElBQUF2VixFQUFBdVYsRUFBQWdSLE1BQ0EzUCxFQUFBckIsRUFBQXFCLE1BRUEsR0FBQTVXLEVBQUFuTyxJQUFBLG9CQUFBK2tCLEVBQUFDLFVBQUEsQ0FJQSxJQUNBc3lCLEVBQ0FDLEVBRkFDLEVBQUEsYUFBQTl6QixFQUFBaGYsS0FHQSt5QyxFQUFBMXlCLEVBQUFwQixZQUdBNHpCLEVBREFDLEVBQ0F6eUIsRUFBQTlSLFNBRUFxa0MsRUFBQXZ5QixFQUFBMnlCLFlBQ0F6MkMsT0FHQSxJQUVBeTVCLEVBRkFpZCxFQUFBajBCLEVBQUE2dkIsZ0JBQ0F1QyxFQUFBRCxFQUFBbnlCLEdBRUFrMEIsRUFBQSxFQUVBTCxFQUFBLEtBQ0FLLEVBQUFuaEMsS0FBQW9oQyxLQUFBTixFQUFBLEtBR0EsUUFBQXYyQyxFQUFBLEVBQWlCQSxFQUFBdTJDLEVBQWV2MkMsR0FBQTQyQyxFQUFBLENBQ2hDLElBQ0E5akMsRUFBQWdpQyxFQURBd0IsSUFBQXQyQyxHQUFBeTJDLEVBQUEsR0FBQXoyQyxHQUdBODJDLEVBQUE1QixFQURBeUIsRUFBQUksWUFBQWprQyxHQUNBNmpDLEVBQUEzM0MsSUFBQSxjQUNBMDZCLElBQUFzZCxNQUFBRixHQUFBcGQsRUFBQW9kLEVBR0EsT0FBQXBkLGdGQzFXQSxJQUFBNXZCLEVBQUE3TCxFQUFBLDJDQXNCQTJNLEdBcEJBM00sRUFBQSxtREF5QkFxMUMsT0FBQSxTQUFBLzVCLEdBQ0EsSUFBQXRJLEVBQUF2SSxLQUFBdUksT0FDQThPLEVBQUF4RyxHQUFBLE1BQUF0SSxFQUFBZ21DLFdBQUFobUMsRUFBQThPLElBQUE5TyxFQUFBZ21DLFdBTUEsT0FKQXZ1QyxLQUFBZ2EsTUFBQSxNQUFBM0MsR0FBQSxZQUFBQSxHQUFBLG1CQUFBQSxJQUFBalcsRUFBQThwQyxNQUFBN3pCLEtBQ0FBLEVBQUFyWCxLQUFBZ2EsS0FBQXFCLE1BQUF2aUIsTUFBQXVlLElBR0FBLEdBT0F3ekIsT0FBQSxTQUFBaDZCLEdBQ0EsSUFBQXRJLEVBQUF2SSxLQUFBdUksT0FDQTJLLEVBQUFyQyxHQUFBLE1BQUF0SSxFQUFBaW1DLFNBQUFqbUMsRUFBQTJLLElBQUEzSyxFQUFBaW1DLFNBTUEsT0FKQXh1QyxLQUFBZ2EsTUFBQSxNQUFBOUcsR0FBQSxZQUFBQSxHQUFBLG1CQUFBQSxJQUFBOVIsRUFBQThwQyxNQUFBaDRCLEtBQ0FBLEVBQUFsVCxLQUFBZ2EsS0FBQXFCLE1BQUF2aUIsTUFBQW9hLElBR0FBLEdBTUFrNEIsaUJBQUEsV0FDQSxJQUFBN2lDLEVBQUF2SSxLQUFBdUksT0FDQSxhQUFBQSxFQUFBZ21DLFlBQUEsTUFBQWhtQyxFQUFBaW1DLFdBQUFqbUMsRUFBQThTLE9BT0FvekIsaUJBQUFydEMsRUFBQXN0QyxLQU1BQyxTQUFBLFNBQUFKLEVBQUFDLEdBQ0F4dUMsS0FBQXVJLE9BQUFnbUMsYUFDQXZ1QyxLQUFBdUksT0FBQWltQyxZQU1BSSxXQUFBLFdBRUE1dUMsS0FBQXVJLE9BQUFnbUMsV0FBQXZ1QyxLQUFBdUksT0FBQWltQyxTQUFBLFFBR0FwMEMsRUFBQTBELFFBQUFvRSw4RUNwRkEsSUFBQWQsRUFBQTdMLEVBQUEsMkNBRUF5ZSxFQUFBemUsRUFBQSw4Q0FJQXNSLEVBRkF0UixFQUFBLDRDQUVBc1IsVUFJQXNsQyxFQUZBNTJDLEVBQUEsa0RBRUE0MkMsbUJBb0JBcmxDLEVBQUFELElBMkNBLFNBQUFnb0MsRUFBQTcwQixFQUFBbEosR0FDQSxJQVNBZytCLEVBVEFDLEVBQUFDLEVBQUFoMUIsRUFBQSxVQUNBaTFCLEVBQUFDLEVBQUFwK0IsR0FDQS9XLEVBQUFvMUMsRUFBQUosRUFBQUUsR0FFQSxPQUFBbDFDLEdBZUFxMUMsRUFBQUwsRUFBQUUsR0FDQWh5QixPQVRBN2IsRUFBQXMwQixXQUFBdVosR0FDQUksRUFBQXIxQixFQUFBaTFCLEdBR0FLLEVBQUF0MUIsRUFEQTgwQixFQUFBLFNBQUFHLEVBeUZBLFNBQUFqMUIsR0FDQSxJQUFBamdCLEVBQUErTSxFQUFBa1QsR0FBQXUxQixhQUNBLGFBQUF4MUMsSUFBQStNLEVBQUFrVCxHQUFBdTFCLGFBQUF2MUIsRUFBQXF1Qiw0QkEzRkFtSCxDQUFBeDFCLEdBQUFpMUIsR0FPQVEsc0JBQUFYLElBNkRBLFNBQUFFLEVBQUFoMUIsRUFBQTAxQixHQUVBLE9BQUE1b0MsRUFBQWtULEdBQUEwMUIsS0FBQTVvQyxFQUFBa1QsR0FBQTAxQixPQUdBLFNBQUFQLEVBQUFRLEVBQUFyd0MsR0FDQSxRQUFBaEksRUFBQSxFQUFpQkEsRUFBQXE0QyxFQUFBcDRDLE9BQWtCRCxJQUNuQyxHQUFBcTRDLEVBQUFyNEMsR0FBQWdJLFFBQ0EsT0FBQXF3QyxFQUFBcjRDLEdBQUFkLE1BS0EsU0FBQTQ0QyxFQUFBTyxFQUFBcndDLEVBQUE5SSxHQUtBLE9BSkFtNUMsRUFBQTc1QyxNQUNBd0osTUFDQTlJLFVBRUFBLEVBNkZBLFNBQUE4NEMsRUFBQXQxQixFQUFBNDFCLEVBQUFDLEdBQ0EsSUFBQXpELEVBQUFELEVBQUFueUIsR0FDQTgxQixFQUFBOTFCLEVBQUFxQixNQUNBMDBCLEVBQUFELEVBQUE3MUIsWUFDQW5KLEVBQUFrSixFQUFBNnZCLGdCQUNBOXZDLEtBRUFtMEMsRUFBQW5oQyxLQUFBbUcsS0FBQTA4QixHQUFBLFFBQ0FJLEVBQUFELEVBQUEsR0FDQWxDLEVBQUFpQyxFQUFBdm1DLFFBS0EsSUFBQXltQyxHQUFBOUIsRUFBQSxHQUFBTCxFQUFBSyxFQUFBLElBQ0E4QixFQUFBampDLEtBQUEreEIsTUFBQS94QixLQUFBb2hDLEtBQUE2QixFQUFBOUIsT0FRQSxJQUFBK0IsRUFDQW4vQixFQUFBeGEsSUFBQSxnQkFEQTI1QyxFQUVBbi9CLEVBQUF4YSxJQUFBLGdCQUdBMjVDLEdBQUFELElBQUFELEVBQUEsSUFDQUcsRUFBQUgsRUFBQSxJQU1BLElBRkEsSUFBQWgwQixFQUFBaTBCLEVBRVFqMEIsR0FBQWcwQixFQUFBLEdBQStCaDBCLEdBQUFteUIsRUFDdkNnQyxFQUFBbjBCLEdBT0EsU0FBQW0wQixFQUFBQyxHQUNBcDJDLEVBQUFqRSxLQUFBKzVDLEVBQUFNLEdBQ0F6eUIsZUFBQTB1QixFQUFBK0QsR0FDQXh5QixTQUFBbXlCLEVBQUExYSxTQUFBK2EsR0FDQXAwQixVQUFBbzBCLElBSUEsT0FaQUYsR0FBQWwwQixJQUFBZzBCLEVBQUEsSUFDQUcsRUFBQUgsRUFBQSxJQVdBaDJDLEVBS0EsU0FBQXMxQyxFQUFBcjFCLEVBQUE0MUIsRUFBQUMsR0FDQSxJQUFBQyxFQUFBOTFCLEVBQUFxQixNQUNBK3dCLEVBQUFELEVBQUFueUIsR0FDQWpnQixLQVlBLE9BWEFxSCxFQUFBUSxLQUFBa3VDLEVBQUE5QixXQUFBLFNBQUFqeUIsR0FDQSxJQUFBNEIsRUFBQW15QixFQUFBMWEsU0FBQXJaLEdBRUE2ekIsRUFBQTd6QixFQUFBNEIsSUFDQTVqQixFQUFBakUsS0FBQSs1QyxFQUFBOXpCLEdBQ0EyQixlQUFBMHVCLEVBQUFyd0IsR0FDQTRCLFdBQ0E1QixnQkFJQWhpQixFQUlBLFNBQUFtMUMsRUFBQWxrQixHQUNBLElBQUFzaUIsRUFBQXRpQixFQUFBMTBCLElBQUEsWUFDQSxhQUFBZzNDLEVBQUEsT0FBQUEsRUFHQXh2QyxFQUFBc3FDLGlCQWhUQSxTQUFBcHVCLEdBRUEsbUJBQUFBLEVBQUFoZixLQW1CQSxTQUFBZ2YsR0FDQSxJQUFBbEosRUFBQWtKLEVBQUE2dkIsZ0JBQ0E5dkMsRUFBQTgwQyxFQUFBNzBCLEVBQUFsSixHQUNBLE9BQUFBLEVBQUF4YSxJQUFBLFNBQUEwakIsRUFBQXFCLE1BQUFDLFdBQ0EyQixVQUNBd3lCLHNCQUFBMTFDLEVBQUEwMUMsdUJBQ0cxMUMsRUF6QkhxMkMsQ0FBQXAyQixHQThGQSxTQUFBQSxHQUNBLElBQUFtdkIsRUFBQW52QixFQUFBcUIsTUFBQTJ5QixXQUNBNUIsRUFBQUQsRUFBQW55QixHQUNBLE9BQ0FpRCxPQUFBN2IsRUFBQTFHLElBQUF5dUMsRUFBQSxTQUFBcHRCLEVBQUF2ZixHQUNBLE9BQ0FraEIsZUFBQTB1QixFQUFBcndCLEVBQUF2ZixHQUNBbWhCLFNBQUEzRCxFQUFBcUIsTUFBQStaLFNBQUFyWixHQUNBQSxnQkF0R0FzMEIsQ0FBQXIyQixJQStTQWxjLEVBQUFxcUMsZ0JBblNBLFNBQUFudUIsRUFBQXVCLEdBRUEsbUJBQUF2QixFQUFBaGYsS0F3Q0EsU0FBQWdmLEVBQUF1QixHQUNBLElBUUE0dEIsRUFDQUUsRUFUQWlILEVBQUF0QixFQUFBaDFCLEVBQUEsU0FDQXUyQixFQUFBckIsRUFBQTN6QixHQUNBeGhCLEVBQUFvMUMsRUFBQW1CLEVBQUFDLEdBRUEsR0FBQXgyQyxFQUNBLE9BQUFBLEVBV0EsR0FKQXdoQixFQUFBamxCLElBQUEsVUFBQTBqQixFQUFBcUIsTUFBQUMsWUFDQTZ0QixNQUdBL25DLEVBQUFzMEIsV0FBQTZhLEdBQ0FwSCxFQUFBa0csRUFBQXIxQixFQUFBdTJCLEdBQUEsUUFJQSxZQUFBQSxFQUFBLENBQ0EsSUFBQUMsRUFBQTNCLEVBQUE3MEIsSUFBQTZ2QixpQkFDQVIsRUFBQW1ILEVBQUFmLHNCQUNBdEcsRUFBQS9uQyxFQUFBMUcsSUFBQTgxQyxFQUFBdnpCLE9BQUEsU0FBQVEsR0FDQSxPQUFBQSxFQUFBMUIsaUJBSUFvdEIsRUFBQW1HLEVBQUF0MUIsRUFEQXF2QixFQUFBa0gsR0FDQSxHQUlBLE9BQUFuQixFQUFBa0IsRUFBQUMsR0FDQXBILFFBQ0FFLHlCQTVFQW9ILENBQUF6MkIsRUFBQXVCLElBQ0E0dEIsTUFBQW52QixFQUFBcUIsTUFBQTJ5QixhQWlTQWx3QyxFQUFBdXFDLDBCQWpLQSxTQUFBcnVCLEdBQ0EsSUFBQXZRLEVBcUVBLFNBQUF1USxHQUNBLElBQUFsSixFQUFBa0osRUFBQTZ2QixnQkFDQSxPQUNBNkcsV0FBQTEyQixFQUFBK3ZCLFVBQUEvdkIsRUFBQSt2QixZQUFBL3ZCLEVBQUE4dkIsZUFBQTl2QixFQUFBOHZCLGVBQUEsS0FDQXh6QixZQUFBeEYsRUFBQXhhLElBQUEsYUFDQThmLEtBQUF0RixFQUFBdUYsV0ExRUFzNkIsQ0FBQTMyQixHQUNBb3lCLEVBQUFELEVBQUFueUIsR0FDQXBKLEdBQUFuSCxFQUFBaW5DLFdBQUFqbkMsRUFBQTZNLGFBQUEsSUFBQXZKLEtBQUE0RyxHQUNBbThCLEVBQUE5MUIsRUFBQXFCLE1BQ0EwMEIsRUFBQUQsRUFBQTcxQixZQUlBNHpCLEVBQUFpQyxFQUFBdm1DLFFBRUEsR0FBQXdtQyxFQUFBLEdBQUFBLEVBQUEsS0FDQSxTQUdBLElBQUE3QixFQUFBLEVBRUFMLEVBQUEsS0FDQUssRUFBQW5oQyxLQUFBbUcsSUFBQSxFQUFBbkcsS0FBQTZqQyxNQUFBL0MsRUFBQSxNQVdBLElBUkEsSUFBQTl4QixFQUFBZzBCLEVBQUEsR0FDQWMsRUFBQTcyQixFQUFBZ0UsWUFBQWpDLEVBQUEsR0FBQS9CLEVBQUFnRSxZQUFBakMsR0FDQSswQixFQUFBL2pDLEtBQUFpSSxJQUFBNjdCLEVBQUE5akMsS0FBQUMsSUFBQTRELElBQ0FtZ0MsRUFBQWhrQyxLQUFBaUksSUFBQTY3QixFQUFBOWpDLEtBQUFHLElBQUEwRCxJQUNBb2dDLEVBQUEsRUFDQUMsRUFBQSxFQUdRbDFCLEdBQUFnMEIsRUFBQSxHQUErQmgwQixHQUFBbXlCLEVBQUEsQ0FDdkMsSUFBQXppQyxFQUNBK0ksRUFJQXdjLEVBQUFoZCxFQUFBeUMsZ0JBQUEyMUIsRUFBQXJ3QixHQUFBdFMsRUFBQTJNLEtBQUEsZ0JBRUEzSyxFQUFBLElBQUF1bEIsRUFBQXZsQixNQUNBK0ksRUFBQSxJQUFBd2MsRUFBQXhjLE9BRUF3OEIsRUFBQWprQyxLQUFBbUcsSUFBQTg5QixFQUFBdmxDLEVBQUEsR0FDQXdsQyxFQUFBbGtDLEtBQUFtRyxJQUFBKzlCLEVBQUF6OEIsRUFBQSxHQUdBLElBQUEwOEIsRUFBQUYsRUFBQUYsRUFDQUssRUFBQUYsRUFBQUYsRUFFQXg1QixNQUFBMjVCLE9BQUFyRixLQUNBdDBCLE1BQUE0NUIsT0FBQXRGLEtBQ0EsSUFBQXlCLEVBQUF2Z0MsS0FBQW1HLElBQUEsRUFBQW5HLEtBQUE2akMsTUFBQTdqQyxLQUFBc0ssSUFBQTY1QixFQUFBQyxLQUNBeEIsRUFBQTdvQyxFQUFBa1QsRUFBQWdSLE9BQ0FvbUIsRUFBQXpCLEVBQUF5QixpQkFDQUMsRUFBQTFCLEVBQUEwQixjQWVBLE9BWEEsTUFBQUQsR0FBQSxNQUFBQyxHQUFBdGtDLEtBQUFpSSxJQUFBbzhCLEVBQUE5RCxJQUFBLEdBQUF2Z0MsS0FBQWlJLElBQUFxOEIsRUFBQXhELElBQUEsR0FFQXVELEVBQUE5RCxFQUNBQSxFQUFBOEQsR0FJQXpCLEVBQUEwQixjQUFBeEQsRUFDQThCLEVBQUF5QixpQkFBQTlELEdBR0FBLHdGQy9QQSxJQUFBbHNDLEVBQUE3TCxFQUFBLDJDQXVGQXVJLEVBQUE2TyxPQXhEQSxTQUFBMmtDLEVBQUE3c0MsRUFBQVYsR0FDQUEsUUFDQSxJQUFBcW1CLEVBQUFrbkIsRUFBQTFnQixpQkFDQTVXLEVBQUF2VixFQUFBdVYsS0FDQXJOLEtBQ0E0a0MsRUFBQXYzQixFQUFBdzNCLGtCQUFBLEdBQ0FDLEVBQUF6M0IsRUFBQTNPLFNBQ0FxbUMsRUFBQUgsRUFBQSxTQUFBRSxFQUNBaG9CLEVBQUF6UCxFQUFBelYsSUFDQXlzQixFQUFBNUcsRUFBQXVuQixVQUNBQyxHQUFBNWdCLEVBQUF2Z0IsRUFBQXVnQixFQUFBdmdCLEVBQUF1Z0IsRUFBQXZsQixNQUFBdWxCLEVBQUF0Z0IsRUFBQXNnQixFQUFBdGdCLEVBQUFzZ0IsRUFBQXhjLFFBQ0FoWSxHQUNBNjhCLEtBQUEsRUFDQXdZLE1BQUEsRUFDQXZZLElBQUEsRUFDQXdZLE9BQUEsRUFDQUMsT0FBQSxHQUVBQyxFQUFBdnRDLEVBQUFuTyxJQUFBLGFBQ0EyN0MsRUFBQSxNQUFBeG9CLEdBQUFtb0IsRUFBQSxHQUFBSSxFQUFBSixFQUFBLEdBQUFJLElBQUFKLEVBQUEsR0FBQUksRUFBQUosRUFBQSxHQUFBSSxHQUVBLEdBQUFULEVBQUEsQ0FDQSxJQUFBVyxFQUFBWCxFQUFBNW1CLGNBQUE0bUIsRUFBQXZ6QixZQUFBLElBQ0FpMEIsRUFBQXoxQyxFQUFBLFFBQUF1USxLQUFBbUcsSUFBQW5HLEtBQUFzSyxJQUFBNjZCLEVBQUFELEVBQUEsSUFBQUEsRUFBQSxJQUlBdGxDLEVBQUF0QixVQUFBLE1BQUFvZSxFQUFBd29CLEVBQUF6MUMsRUFBQWsxQyxJQUFBRSxFQUFBLFNBQUFub0IsRUFBQXdvQixFQUFBejFDLEVBQUFrMUMsSUFBQUUsRUFBQSxJQUVBamxDLEVBQUFpRSxTQUFBN0QsS0FBQTRHLEdBQUEsU0FBQThWLEVBQUEsS0FRQTljLEVBQUEwTSxlQUFBMU0sRUFBQXlNLGNBQUF6TSxFQUFBd00sZUFMQW1nQixLQUFBLEVBQ0F3WSxPQUFBLEVBQ0F6WSxNQUFBLEVBQ0F3WSxNQUFBLEdBRUFKLEdBQ0E5a0MsRUFBQXVNLFlBQUFxNEIsRUFBQVUsRUFBQXoxQyxFQUFBaTFDLElBQUFRLEVBQUF6MUMsRUFBQSxVQUVBaUksRUFBQW5PLElBQUEscUJBQ0FxVyxFQUFBeU0sZUFBQXpNLEVBQUF5TSxlQUdBaFksRUFBQWdYLFNBQUFyVSxFQUFBbW5CLFlBQUF6bUIsRUFBQW5PLElBQUEsdUJBQ0FxVyxFQUFBME0sZ0JBQUExTSxFQUFBME0sZ0JBSUEsSUFBQS9DLEVBQUE3UixFQUFBbk8sSUFBQSxvQkFJQSxPQUhBcVcsRUFBQTJKLFlBQUEsUUFBQW83QixHQUFBcDdCLElBRUEzSixFQUFBaUIsR0FBQSxFQUNBakIscUVDcEZBLElBQUE0OUIsRUFBQWgxQyxFQUFBLG1EQUVBNDhDLEVBQUE1OEMsRUFBQSwyQ0FFQTY4QyxFQUFBNzhDLEVBQUEsNkNBRUE4OEMsRUFBQTk4QyxFQUFBLGlEQThCQSxTQUFBKzhDLEVBQUFuOEMsRUFBQW84QyxFQUFBQyxHQWFBLEdBUkF4eUMsS0FBQTdKLE9BTUE2SixLQUFBdXlDLGFBRUFDLEVBSUFBLEtBQUEsR0FBQUEsRUFBQSxRQUpBLENBQ0EsSUFBQXhoQixFQUFBaHhCLEtBQUF5VyxrQkFDQSs3QixHQUFBeGhCLEVBQUF2Z0IsRUFBQXVnQixFQUFBdmxCLE1BQUEsRUFBQXVsQixFQUFBdGdCLEVBQUFzZ0IsRUFBQXhjLE9BQUEsR0FTQXhVLEtBQUEwSyxPQUFBOG5DLEVBR0FGLEVBQUFqK0MsV0FDQW1OLFlBQUE4d0MsRUFDQUcsV0FBQSxLQUtBaDhCLGdCQUFBLFdBQ0EsSUFBQXVhLEVBQUFoeEIsS0FBQTB5QyxNQUVBLEdBQUExaEIsRUFDQSxPQUFBQSxFQVVBLElBUEEsSUFBQTJoQixFQUFBOTlCLE9BQUFDLFVBQ0F1QyxHQUFBczdCLEtBQ0F6L0IsSUFBQXkvQixNQUNBQyxLQUNBQyxLQUNBTixFQUFBdnlDLEtBQUF1eUMsV0FFQWo3QyxFQUFBLEVBQW1CQSxFQUFBaTdDLEVBQUFoN0MsT0FBdUJELElBRTFDLGVBQUFpN0MsRUFBQWo3QyxHQUFBMEQsS0FBQSxDQUtBLElBQUE4M0MsRUFBQVAsRUFBQWo3QyxHQUFBdzdDLFNBQ0FYLEVBQUFZLFdBQUFELEVBQUFGLEVBQUFDLEdBQ0FULEVBQUEvNkIsUUFBQXU3QixHQUNBUixFQUFBbC9CLFFBQUEyL0IsR0FRQSxPQUpBLElBQUF2N0MsSUFDQStmLEVBQUEsR0FBQUEsRUFBQSxHQUFBbkUsRUFBQSxHQUFBQSxFQUFBLE1BR0FsVCxLQUFBMHlDLE1BQUEsSUFBQW5JLEVBQUFsekIsRUFBQSxHQUFBQSxFQUFBLEdBQUFuRSxFQUFBLEdBQUFtRSxFQUFBLEdBQUFuRSxFQUFBLEdBQUFtRSxFQUFBLEtBT0F1eEIsUUFBQSxTQUFBL3NCLEdBQ0EsSUFBQW1WLEVBQUFoeEIsS0FBQXlXLGtCQUNBODdCLEVBQUF2eUMsS0FBQXV5QyxXQUVBLElBQUF2aEIsRUFBQTRYLFFBQUEvc0IsRUFBQSxHQUFBQSxFQUFBLElBQ0EsU0FHQW0zQixFQUFBLFFBQUExN0MsRUFBQSxFQUFBZ1MsRUFBQWlwQyxFQUFBaDdDLE9BQXFERCxFQUFBZ1MsRUFBU2hTLElBRTlELGVBQUFpN0MsRUFBQWo3QyxHQUFBMEQsS0FBQSxDQUlBLElBQUE4M0MsRUFBQVAsRUFBQWo3QyxHQUFBdzdDLFNBQ0FHLEVBQUFWLEVBQUFqN0MsR0FBQTI3QyxVQUVBLEdBQUFaLEVBQUF6SixRQUFBa0ssRUFBQWozQixFQUFBLEdBQUFBLEVBQUEsS0FFQSxRQUFBcTNCLEVBQUEsRUFBdUJBLEdBQUFELElBQUExN0MsT0FBQSxHQUF3QzI3QyxJQUMvRCxHQUFBYixFQUFBekosUUFBQXFLLEVBQUFDLElBQ0EsU0FBQUYsRUFJQSxVQUlBLFVBRUFHLFlBQUEsU0FBQTFpQyxFQUFBQyxFQUFBakYsRUFBQStJLEdBQ0EsSUFBQXdjLEVBQUFoeEIsS0FBQXlXLGtCQUNBMjhCLEVBQUFwaUIsRUFBQXZsQixNQUFBdWxCLEVBQUF4YyxPQUVBL0ksRUFFSytJLElBQ0xBLEVBQUEvSSxFQUFBMm5DLEdBRkEzbkMsRUFBQTJuQyxFQUFBNStCLEVBU0EsSUFKQSxJQUFBK2lCLEVBQUEsSUFBQWdULEVBQUE5NUIsRUFBQUMsRUFBQWpGLEVBQUErSSxHQUNBa0YsRUFBQXNYLEVBQUFxaUIsbUJBQUE5YixHQUNBZ2IsRUFBQXZ5QyxLQUFBdXlDLFdBRUFqN0MsRUFBQSxFQUFtQkEsRUFBQWk3QyxFQUFBaDdDLE9BQXVCRCxJQUUxQyxlQUFBaTdDLEVBQUFqN0MsR0FBQTBELEtBQUEsQ0FPQSxJQUhBLElBQUE4M0MsRUFBQVAsRUFBQWo3QyxHQUFBdzdDLFNBQ0FHLEVBQUFWLEVBQUFqN0MsR0FBQTI3QyxVQUVBNTZDLEVBQUEsRUFBcUJBLEVBQUF5NkMsRUFBQXY3QyxPQUFxQmMsSUFDMUMrNUMsRUFBQXg1QixlQUFBazZCLEVBQUF6NkMsR0FBQXk2QyxFQUFBejZDLEdBQUFxaEIsR0FHQSxRQUFBeGdCLEVBQUEsRUFBcUJBLEdBQUErNUMsSUFBQTE3QyxPQUFBLEdBQXdDMkIsSUFDN0QsSUFBQWIsRUFBQSxFQUF1QkEsRUFBQTQ2QyxFQUFBLzVDLEdBQUEzQixPQUF5QmMsSUFDaEQrNUMsRUFBQXg1QixlQUFBcTZCLEVBQUEvNUMsR0FBQWIsR0FBQTQ2QyxFQUFBLzVDLEdBQUFiLEdBQUFxaEIsSUFLQXNYLEVBQUFoeEIsS0FBQTB5QyxPQUNBWSxLQUFBL2IsR0FFQXYzQixLQUFBMEssUUFBQXNtQixFQUFBdmdCLEVBQUF1Z0IsRUFBQXZsQixNQUFBLEVBQUF1bEIsRUFBQXRnQixFQUFBc2dCLEVBQUF4YyxPQUFBLEtBR0EsSUFBQXRTLEVBQUFvd0MsRUFDQWw0QyxFQUFBMEQsUUFBQW9FLDBFQ3JMQSxJQUFBZCxFQUFBN0wsRUFBQSwyQ0FFQSs4QyxFQUFBLzhDLEVBQUEsa0RBK0RBLFNBQUFnK0MsRUFBQUMsRUFBQUMsRUFBQUMsR0FLQSxJQUpBLElBQUEzNUMsS0FDQTQ1QyxFQUFBRixFQUFBLEdBQ0FHLEVBQUFILEVBQUEsR0FFQW44QyxFQUFBLEVBQWlCQSxFQUFBazhDLEVBQUFqOEMsT0FBdUJELEdBQUEsR0FDeEMsSUFBQW1aLEVBQUEraUMsRUFBQUssV0FBQXY4QyxHQUFBLEdBQ0FvWixFQUFBOGlDLEVBQUFLLFdBQUF2OEMsRUFBQSxNQUVBbVosS0FBQSxNQUFBQSxHQUNBQyxLQUFBLE1BQUFBLEdBSUFpakMsRUFGQWxqQyxHQUFBa2pDLEVBR0FDLEVBRkFsakMsR0FBQWtqQyxFQUlBNzVDLEVBQUFqRSxNQUFBMmEsRUFBQWlqQyxFQUFBaGpDLEVBQUFnakMsSUFHQSxPQUFBMzVDLEVBZ0RBSyxFQUFBMEQsUUF2Q0EsU0FBQWcyQyxHQUVBLE9BckVBLFNBQUFDLEdBQ0EsSUFBQUEsRUFBQUMsYUFDQSxPQUFBRCxFQUdBLElBQUFMLEVBQUFLLEVBQUFFLFVBRUEsTUFBQVAsSUFDQUEsRUFBQSxNQUtBLElBRkEsSUFBQVEsRUFBQUgsRUFBQUcsU0FFQUMsRUFBQSxFQUFpQkEsRUFBQUQsRUFBQTM4QyxPQUFxQjQ4QyxJQU10QyxJQUxBLElBQ0FDLEVBREFGLEVBQUFDLEdBQ0FDLFNBQ0FDLEVBQUFELEVBQUFDLFlBQ0FaLEVBQUFXLEVBQUFYLGNBRUF4NkMsRUFBQSxFQUFtQkEsRUFBQW83QyxFQUFBOThDLE9BQXdCMEIsSUFBQSxDQUMzQyxJQUFBdTZDLEVBQUFhLEVBQUFwN0MsR0FFQSxlQUFBbTdDLEVBQUFwNUMsS0FDQXE1QyxFQUFBcDdDLEdBQUFzNkMsRUFBQUMsRUFBQUMsRUFBQXg2QyxHQUFBeTZDLFFBQ08sb0JBQUFVLEVBQUFwNUMsS0FDUCxRQUFBczVDLEVBQUEsRUFBd0JBLEVBQUFkLEVBQUFqOEMsT0FBd0IrOEMsSUFBQSxDQUNoRCxJQUFBQyxFQUFBZixFQUFBYyxHQUNBZCxFQUFBYyxHQUFBZixFQUFBZ0IsRUFBQWQsRUFBQXg2QyxHQUFBcTdDLEdBQUFaLElBT0FLLEVBQUFDLGNBQUEsRUFrQ0FRLENBQUFWLEdBQ0ExeUMsRUFBQTFHLElBQUEwRyxFQUFBcXpDLE9BQUFYLEVBQUFJLFNBQUEsU0FBQVEsR0FFQSxPQUFBQSxFQUFBTixVQUFBTSxFQUFBakMsWUFBQWlDLEVBQUFOLFNBQUFDLFlBQUE5OEMsT0FBQSxJQUNHLFNBQUFtOUMsR0FDSCxJQUFBakMsRUFBQWlDLEVBQUFqQyxXQUNBa0MsRUFBQUQsRUFBQU4sU0FDQUMsRUFBQU0sRUFBQU4sWUFDQTlCLEtBRUEsWUFBQW9DLEVBQUEzNUMsTUFDQXUzQyxFQUFBejhDLE1BQ0FrRixLQUFBLFVBR0E4M0MsU0FBQXVCLEVBQUEsR0FDQXBCLFVBQUFvQixFQUFBNTVDLE1BQUEsS0FJQSxpQkFBQWs2QyxFQUFBMzVDLE1BQ0FvRyxFQUFBUSxLQUFBeXlDLEVBQUEsU0FBQTM0QyxHQUNBQSxFQUFBLElBQ0E2MkMsRUFBQXo4QyxNQUNBa0YsS0FBQSxVQUNBODNDLFNBQUFwM0MsRUFBQSxHQUNBdTNDLFVBQUF2M0MsRUFBQWpCLE1BQUEsT0FNQSxJQUFBbTZDLEVBQUEsSUFBQXRDLEVBQUFHLEVBQUF0OEMsS0FBQW84QyxFQUFBRSxFQUFBRCxJQUVBLE9BREFvQyxFQUFBbkMsYUFDQW1DLG9FQy9HQSxTQUFBQyxFQUFBbjVDLEdBQ0EsT0FBQUEsRUFXQSxTQUFBbzVDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0FuMUMsS0FBQW8xQyxLQUFBTCxFQUNBLzBDLEtBQUFxMUMsS0FBQUwsRUFDQWgxQyxLQUFBczFDLGNBQUFMLEdBQUFKLEVBQ0E3MEMsS0FBQXUxQyxjQUFBTCxHQUFBTCxFQUNBNzBDLEtBQUFtMUMsVUF1RkEsU0FBQUssRUFBQUMsRUFBQS82QyxFQUFBZzdDLEVBQUFDLEVBQUFDLEdBQ0EsUUFBQXQrQyxFQUFBLEVBQWlCQSxFQUFBbStDLEVBQUFsK0MsT0FBZ0JELElBQUEsQ0FFakMsSUFBQWdJLEVBQUEsT0FBQXMyQyxFQUFBRCxHQUFBRixFQUFBbitDLE1BQ0F1K0MsRUFBQW43QyxFQUFBNEUsR0FFQSxNQUFBdTJDLEdBQ0FILEVBQUE1L0MsS0FBQXdKLEdBQ0E1RSxFQUFBNEUsR0FBQWhJLElBRUF1K0MsRUFBQXQrQyxTQUNBbUQsRUFBQTRFLEdBQUF1MkMsT0FHQUEsRUFBQS8vQyxLQUFBd0IsS0FsR0F3OUMsRUFBQXpnRCxXQUNBbU4sWUFBQXN6QyxFQUtBeG1DLElBQUEsU0FBQXduQyxHQUVBLE9BREE5MUMsS0FBQSsxQyxLQUFBRCxFQUNBOTFDLE1BTUFwSCxPQUFBLFNBQUFrOUMsR0FFQSxPQURBOTFDLEtBQUFnMkMsUUFBQUYsRUFDQTkxQyxNQU1BZ1QsT0FBQSxTQUFBOGlDLEdBRUEsT0FEQTkxQyxLQUFBaTJDLFFBQUFILEVBQ0E5MUMsTUFFQWlULFFBQUEsV0FDQSxJQUFBOGhDLEVBQUEvMEMsS0FBQW8xQyxLQUNBSixFQUFBaDFDLEtBQUFxMUMsS0FFQWEsS0FDQUMsS0FDQUMsS0FPQSxJQUxBWixFQUFBVCxLQUFBb0IsRUFBQSxnQkFBQW4yQyxNQUNBdzFDLEVBQUFSLEVBQUFrQixFQUFBRSxFQUFBLGdCQUFBcDJDLE1BSUExSSxFQUFBLEVBQWVBLEVBQUF5OUMsRUFBQXg5QyxPQUFtQkQsSUFBQSxDQUlsQyxVQUZBa0YsRUFBQTA1QyxFQURBNTJDLEVBQUE2MkMsRUFBQTcrQyxNQU1BZ1MsRUFBQTlNLEVBQUFqRixTQUdBLElBQUErUixJQUFBNHNDLEVBQUE1MkMsR0FBQSxNQUNBOUMsSUFBQW10QyxXQUVBdU0sRUFBQTUyQyxHQUFBLEtBR0FVLEtBQUFnMkMsU0FBQWgyQyxLQUFBZzJDLFFBQUF4NUMsRUFBQWxGLFFBRUEwSSxLQUFBaTJDLFNBQUFqMkMsS0FBQWkyQyxRQUFBMytDLEdBSUEsUUFBQUEsRUFBQSxFQUFtQkEsRUFBQTgrQyxFQUFBNytDLE9BQTBCRCxJQUFBLENBQzdDLElBQUFnSSxFQUFBODJDLEVBQUE5K0MsR0FFQSxHQUFBNCtDLEVBQUE1aEQsZUFBQWdMLEdBQUEsQ0FDQSxJQUFBOUMsRUFFQSxVQUZBQSxFQUFBMDVDLEVBQUE1MkMsSUFHQSxTQUlBLEdBQUE5QyxFQUFBakYsT0FHQSxRQUFBNEMsRUFBQSxFQUFBbVAsRUFBQTlNLEVBQUFqRixPQUEyQzRDLEVBQUFtUCxFQUFTblAsSUFDcEQ2RixLQUFBKzFDLE1BQUEvMUMsS0FBQSsxQyxLQUFBdjVDLEVBQUFyQyxTQUhBNkYsS0FBQSsxQyxNQUFBLzFDLEtBQUErMUMsS0FBQXY1QyxPQThCQSxJQUFBMEYsRUFBQTR5QyxFQUNBMTZDLEVBQUEwRCxRQUFBb0UsNkRDOUlBM00sRUFBQSx3Q0FFQTJyQixRQUZBLElBSUE5ZixFQUFBN0wsRUFBQSwyQ0FFQStpQixFQUFBL2lCLEVBQUEsNkNBRUF1L0MsRUFBQXYvQyxFQUFBLGlEQUVBc08sRUFBQXRPLEVBQUEsNkNBRUE4Z0QsRUFBQTlnRCxFQUFBLDBEQUVBK2dELEVBQUFELEVBQUFDLHVCQUNBQyxFQUFBRixFQUFBRSxvQkFJQUMsRUFGQWpoRCxFQUFBLDZEQUVBaWhELG9CQXlCQWp4QixFQUFBbmtCLEVBQUFta0IsU0FJQWt4QixFQUFBLFFBQ0FDLEdBQ0FDLE1BTEEsb0JBS0FDLGFBQUFDLE1BQUFELGFBQ0FFLElBTkEsb0JBTUFDLFdBQUFGLE1BQUFFLFdBRUFDLFFBQUFILE1BQ0FJLE9BQUFKLE1BQ0F2VixLQUFBdVYsT0FJQUssRUFkQSxvQkFjQUMsWUFBQU4sTUFBQU0sWUFDQUMsRUFmQSxvQkFlQUMsWUFBQVIsTUFBQVEsWUFFQSxTQUFBQyxFQUFBeDNDLEdBRUEsT0FBQUEsRUFBQXkzQyxVQUFBLE1BQUFMLEVBQUFFLEVBR0EsU0FBQUksRUFBQUMsR0FDQSxJQUFBQyxFQUFBRCxFQUFBajJDLFlBRUEsT0FBQWsyQyxJQUFBYixNQUFBWSxFQUFBaDlDLFFBQUEsSUFBQWk5QyxFQUFBRCxHQUdBLElBQUFFLEdBQUEsb0tBQ0FDLEdBQUEsNkNBRUEsU0FBQUMsRUFBQXRnQixFQUFBMzJCLEdBQ0FRLEVBQUFRLEtBQUErMUMsRUFBQXQ4QyxPQUFBdUYsRUFBQWszQyxzQkFBQSxTQUFBQyxHQUNBbjNDLEVBQUF0TSxlQUFBeWpELEtBQ0F4Z0IsRUFBQXdnQixHQUFBbjNDLEVBQUFtM0MsTUFHQXhnQixFQUFBdWdCLGlCQUFBbDNDLEVBQUFrM0MsaUJBQ0ExMkMsRUFBQVEsS0FBQWcyQyxFQUFBLFNBQUFHLEdBQ0F4Z0IsRUFBQXdnQixHQUFBMzJDLEVBQUF1ZixNQUFBL2YsRUFBQW0zQyxNQUVBeGdCLEVBQUF5Z0IsaUJBQUE1MkMsRUFBQXFGLE9BQUE3RixFQUFBbzNDLGtCQWlCQSxJQUFBMTBDLEVBQUEsU0FBQXVCLEVBQUErRSxHQUNBL0UsTUFBQSxTQUtBLElBSkEsSUFBQW96QyxLQUNBQyxLQUNBQyxLQUVBN2dELEVBQUEsRUFBaUJBLEVBQUF1TixFQUFBdE4sT0FBdUJELElBQUEsQ0FFeEMsSUFBQThnRCxFQUFBdnpDLEVBQUF2TixHQUVBOEosRUFBQXEwQixTQUFBMmlCLEtBQ0FBLEdBQ0FqaUQsS0FBQWlpRCxJQUlBLElBQUFDLEVBQUFELEVBQUFqaUQsS0FDQWlpRCxFQUFBcDlDLEtBQUFvOUMsRUFBQXA5QyxNQUFBLFFBRUFvOUMsRUFBQWh6QyxXQUNBZ3pDLEVBQUFoekMsU0FBQWl6QyxFQUNBRCxFQUFBRSxjQUFBLEdBR0FGLEVBQUEzeUMsVUFBQTJ5QyxFQUFBM3lDLGNBQ0F5eUMsRUFBQXBpRCxLQUFBdWlELEdBQ0FKLEVBQUFJLEdBQUFELEVBQ0FBLEVBQUFyOUIsTUFBQXpqQixFQUVBOGdELEVBQUFHLHdCQUNBSixFQUFBRSxPQVNBcjRDLEtBQUE2RSxXQUFBcXpDLEVBTUFsNEMsS0FBQXc0QyxnQkFBQVAsRUFLQWo0QyxLQUFBNEosWUFLQTVKLEtBQUFpbEMsU0FRQWpsQyxLQUFBeTRDLFNBQUEsS0FDQXo0QyxLQUFBMDRDLE9BQUEsRUFDQTE0QyxLQUFBdTNDLFVBQUEsRUFPQXYzQyxLQUFBMjRDLFlBS0EzNEMsS0FBQTQ0QyxhQUtBNTRDLEtBQUE2NEMsV0FPQTc0QyxLQUFBODRDLGlCQU9BOTRDLEtBQUErNEMsV0FPQS80QyxLQUFBeTJCLFdBT0F6MkIsS0FBQWc1QyxnQkFPQWg1QyxLQUFBaTVDLGlCQU9BajVDLEtBQUFrNUMsZ0JBT0FsNUMsS0FBQW01QyxlQU9BbjVDLEtBQUFvNUMsV0FBQSxJQU1BcDVDLEtBQUFxNUMsWUFBQSxFQU1BcjVDLEtBQUFzNUMsU0FVQXQ1QyxLQUFBdTVDLGNBTUF2NUMsS0FBQXdvQyxXQVFBeG9DLEtBQUF3NUMsc0JBT0F4NUMsS0FBQXk1QyxtQkFBQWpELEVBQUF4MkMsTUFNQUEsS0FBQTA1QyxvQkFBQXZCLEVBTUFuNEMsS0FBQWc0QyxxQkFHQTJCLEVBQUFyMkMsRUFBQWpQLFVBb1RBLFNBQUF1bEQsRUFBQTk1QyxFQUFBcUYsRUFBQTAwQyxHQUNBLElBQUExcUIsRUFFQSxTQUFBaHFCLEVBQUEsQ0FDQSxJQUFBMjBDLEVBQUFoNkMsRUFBQXM1QyxXQUNBVyxFQUFBaHRDLEtBQUE2akMsTUFBQWlKLEVBQUFDLEdBQ0FFLEVBQUFILEVBQUFDLEVBQ0F2MUMsRUFBQXpFLEVBQUErRSxXQUFBTSxHQUNBODBDLEVBQUFuNkMsRUFBQTY0QyxTQUFBcDBDLEdBQUF3MUMsR0FFQSxHQUFBRSxFQUFBLENBQ0E5cUIsRUFBQThxQixFQUFBRCxHQUNBLElBQUF6MEMsRUFBQXpGLEVBQUEwNEMsZ0JBQUFqMEMsR0FBQWdCLFlBRUFBLEtBQUE0bEMsV0FBQTV6QyxTQUNBNDNCLEVBQUE1cEIsRUFBQTRsQyxXQUFBaGMsS0FLQSxPQUFBQSxFQWtlQSxTQUFBK3FCLEVBQUExOUMsR0FDQSxPQUFBQSxFQUdBLFNBQUEyOUMsRUFBQTM5QyxHQUNBLE9BQUFBLEVBQUF3RCxLQUFBMDRDLFFBQUFsOEMsR0FBQSxFQUNBd0QsS0FBQXk0QyxTQUFBajhDLElBR0EsRUE2Q0EsU0FBQTQ5QyxFQUFBdDZDLEVBQUErNUMsR0FDQSxJQUFBbGlELEVBQUFtSSxFQUFBKzRDLFFBQUFnQixHQVdBLE9BVEEsTUFBQWxpRCxJQUNBQSxFQUFBaWlELEVBQUE5NUMsSUFBQXU2QyxVQUFBUixJQUdBLE1BQUFsaUQsSUFFQUEsRUFBQTgrQyxFQUFBb0QsR0FHQWxpRCxFQUdBLFNBQUEyaUQsRUFBQXoxQyxHQUtBLE9BSkF6RCxFQUFBNkUsUUFBQXBCLEtBQ0FBLE9BR0FBLEVBa1RBLFNBQUEwMUMsRUFBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUFBRixFQUFBMzFDLFdBQ0EvRSxFQUFBLElBQUF3RCxFQUFBbEMsRUFBQTFHLElBQUFnZ0QsRUFBQUYsRUFBQUcsaUJBQUFILEtBQUE1d0MsV0FFQWl1QyxFQUFBLzNDLEVBQUEwNkMsR0FJQSxJQUhBLElBQUFwZSxFQUFBdDhCLEVBQUE2NEMsWUFDQWlDLEVBQUFKLEVBQUE3QixTQUVBcmhELEVBQUEsRUFBaUJBLEVBQUFvakQsRUFBQW5qRCxPQUEwQkQsSUFBQSxDQUMzQyxJQUFBaU4sRUFBQW0yQyxFQUFBcGpELEdBRUFzakQsRUFBQXIyQyxLQUdBbkQsRUFBQXZMLFFBQUE0a0QsRUFBQWwyQyxJQUFBLEdBQ0E2M0IsRUFBQTczQixHQUFBczJDLEVBQUFELEVBQUFyMkMsSUFDQXpFLEVBQUF5NUMsV0FBQWgxQyxHQUFBdTJDLElBQ0FoN0MsRUFBQTBvQyxRQUFBamtDLEdBQUEsTUFHQTYzQixFQUFBNzNCLEdBQUFxMkMsRUFBQXIyQyxJQUtBLE9BQUF6RSxFQUdBLFNBQUErNkMsRUFBQUUsR0FHQSxJQUZBLElBQUFDLEVBQUEsSUFBQW5FLE1BQUFrRSxFQUFBeGpELFFBRUE0QyxFQUFBLEVBQWlCQSxFQUFBNGdELEVBQUF4akQsT0FBNkI0QyxJQUM5QzZnRCxFQUFBN2dELEdBQUFxOUMsRUFBQXVELEVBQUE1Z0QsSUFHQSxPQUFBNmdELEVBR0EsU0FBQUYsSUFDQSxPQUFBalAsVUE1c0NBOE4sRUFBQTMrQyxLQUFBLE9BTUEyK0MsRUFBQXJ6QyxlQUFBLEVBU0FxekMsRUFBQXNCLGFBQUEsU0FBQTEyQyxHQUtBLE9BSkFnVCxNQUFBaFQsS0FDQUEsRUFBQXZFLEtBQUE2RSxXQUFBTixPQUdBQSxHQVVBbzFDLEVBQUFnQixpQkFBQSxTQUFBcDJDLEdBRUEsT0FBQXZFLEtBQUF3NEMsZ0JBQUF4NEMsS0FBQWk3QyxhQUFBMTJDLEtBT0FvMUMsRUFBQXVCLHFCQUFBLFdBQ0EsT0FBQWw3QyxLQUFBeTVDLG1CQUFBMEIsZ0JBQUExZ0QsU0FhQWsvQyxFQUFBdndDLGFBQUEsU0FBQWhFLEVBQUE1SSxHQUNBLElBQUE0K0MsRUFBQXA3QyxLQUFBeTVDLG1CQUVBLFNBQUFqOUMsRUFDQSxPQUFBNCtDLEVBQUFDLHVCQUFBajJDLEdBR0EsSUFBQWsyQyxFQUFBRixFQUFBRyxPQUFBbjJDLEdBQ0EsV0FBQTVJLEdBQ0E4K0MsT0FBQTdnRCxRQUFBNmdELEtBQUE5K0MsSUFjQW05QyxFQUFBcHpDLFNBQUEsU0FBQXRKLEVBQUF5SixFQUFBYixJQUNBaEMsRUFBQUcsV0FBQS9HLElBQUFtRSxFQUFBbzZDLFlBQUF2K0MsTUFHQUEsRUFBQSxJQUFBczVDLEVBQUF0NUMsRUFBQStDLEtBQUE2RSxXQUFBdE4sU0FHQXlJLEtBQUFzNUMsU0FBQXI4QyxFQUVBK0MsS0FBQTI0QyxZQUNBMzRDLEtBQUF5NEMsU0FBQSxLQUNBejRDLEtBQUE0NEMsVUFBQWx5QyxNQUNBMUcsS0FBQTY0QyxXQUNBNzRDLEtBQUF5N0Msb0JBRUE1MUMsSUFDQTdGLEtBQUFzRyxlQUFBLEdBT0F0RyxLQUFBcUcsc0JBQUFpd0MsRUFBQXQyQyxLQUFBczVDLFNBQUEzeUMsWUFBQWIsY0FFQTlGLEtBQUEwN0MsZ0JBQUE3MUMsS0FBQTdGLEtBQUFxRyxzQkFFQXJHLEtBQUF1NUMsY0FFQXY1QyxLQUFBMjdDLHNCQUFBLEVBQUExK0MsRUFBQXNNLFNBR0F0TSxFQUFBMitDLE9BQ0E1N0MsS0FBQXNHLGVBQUEsSUFJQXF6QyxFQUFBa0MsWUFBQSxXQUNBLE9BQUE3N0MsS0FBQXM1QyxVQUdBSyxFQUFBbUMsV0FBQSxTQUFBNytDLEdBQ0EsSUFBQWk4QixFQUFBbDVCLEtBQUFzNUMsU0FDQWhzQyxFQUFBdE4sS0FBQXVKLFFBQ0EydkIsRUFBQTRpQixXQUFBNytDLEdBQ0EsSUFBQXFYLEVBQUE0a0IsRUFBQTN2QixRQUVBMnZCLEVBQUE2aUIsYUFDQXpuQyxHQUFBaEgsR0FHQXROLEtBQUEyN0Msc0JBQUFydUMsRUFBQWdILElBR0FxbEMsRUFBQWdDLHNCQUFBLFNBQUFydUMsRUFBQWdILEdBRUEsS0FBQWhILEdBQUFnSCxHQUFBLENBa0JBLElBZEEsSUFVQTBuQyxFQVZBbEMsRUFBQTk1QyxLQUFBbzVDLFdBQ0FsZ0IsRUFBQWw1QixLQUFBczVDLFNBQ0FsZCxFQUFBcDhCLEtBQUEyNEMsU0FDQTl6QyxFQUFBN0UsS0FBQTZFLFdBQ0FvM0MsRUFBQXAzQyxFQUFBdE4sT0FDQTJrRCxFQUFBbDhDLEtBQUF3NEMsZ0JBQ0E5eEMsRUFBQTFHLEtBQUE0NEMsVUFDQXVELEVBQUFuOEMsS0FBQTY0QyxRQUNBdUQsRUFBQXA4QyxLQUFBdTVDLFdBQ0E4QyxFQUFBcjhDLEtBQUF5N0Msb0JBRUFhLEVBQUF0OEMsS0FBQXE1QyxZQUNBa0QsRUFBQUQsRUFBQSxFQUVBaGxELEVBQUEsRUFBaUJBLEVBQUEya0QsRUFBWTNrRCxJQUFBLENBRzdCOGtELEVBRkE3M0MsRUFBQU0sRUFBQXZOLE1BR0E4a0QsRUFBQTczQyxHQUFBdTJDLEtBR0EsSUFBQXQyQyxFQUFBMDNDLEVBQUEzM0MsR0FFQSxJQUFBQyxFQUFBaUIsVUFBQUMsV0FDQXMyQyxFQUFBaDhDLEtBQUF3OEMsWUFBQWxsRCxHQUdBLElBQUFrTixFQUFBaUIsVUFBQWczQyxTQUNBejhDLEtBQUFxNkMsVUFBQS9pRCxHQUdBLElBQUFvbEQsRUFBQWhHLEVBQUFseUMsRUFBQXhKLE1BRUFvaEMsRUFBQTczQixLQUNBNjNCLEVBQUE3M0IsT0FHQSxJQUFBbzRDLEVBQUF2Z0IsRUFBQTczQixHQUFBZzRDLEdBRUEsR0FBQUksS0FBQXBsRCxPQUFBdWlELEVBQUEsQ0FJQSxJQUhBLElBQUE4QyxFQUFBLElBQUFGLEVBQUEzdkMsS0FBQXNLLElBQUEvQyxFQUFBaW9DLEVBQUF6QyxNQUdBMy9DLEVBQUEsRUFBcUJBLEVBQUF3aUQsRUFBQXBsRCxPQUE2QjRDLElBQ2xEeWlELEVBQUF6aUQsR0FBQXdpRCxFQUFBeGlELEdBR0FpaUMsRUFBQTczQixHQUFBZzRDLEdBQUFLLEVBSUEsUUFBQTFKLEVBQUFvSixFQUFBeEMsRUFBd0M1RyxFQUFBNStCLEVBQVM0K0IsR0FBQTRHLEVBQ2pEMWQsRUFBQTczQixHQUFBek8sS0FBQSxJQUFBNG1ELEVBQUEzdkMsS0FBQXNLLElBQUEvQyxFQUFBNCtCLEVBQUE0RyxLQUdBOTVDLEtBQUFxNUMsWUFBQWpkLEVBQUE3M0IsR0FBQWhOLE9BS0EsSUFGQSxJQUFBNGhDLEVBQUEsSUFBQTBkLE1BQUFvRixHQUVBei9DLEVBQUE4USxFQUF1QjlRLEVBQUE4WCxFQUFXOVgsSUFBQSxDQUVsQzI4QixFQUFBRCxFQUFBMmpCLFFBQUFyZ0QsRUFBQTI4QixHQU9BLElBQUE0Z0IsRUFBQWh0QyxLQUFBNmpDLE1BQUFwMEMsRUFBQXM5QyxHQUNBRSxFQUFBeDlDLEVBQUFzOUMsRUFFQSxJQUFBNUcsRUFBQSxFQUFtQkEsRUFBQStJLEVBQVkvSSxJQUFBLENBQy9CLElBQUEzdUMsRUFDQXU0QyxFQUFBMWdCLEVBREE3M0IsRUFBQU0sRUFBQXF1QyxJQUNBNkcsR0FFQTVxQixFQUFBbnZCLEtBQUEwN0MsZ0JBQUF2aUIsRUFBQTUwQixFQUFBL0gsRUFBQTAyQyxHQUVBNEosRUFBQTlDLEdBQUE3cUIsRUFDQSxJQUFBNHRCLEVBQUFYLEVBQUE3M0MsR0FFQTRxQixFQUFBNHRCLEVBQUEsS0FDQUEsRUFBQSxHQUFBNXRCLEdBR0FBLEVBQUE0dEIsRUFBQSxLQUNBQSxFQUFBLEdBQUE1dEIsR0FNQSxJQUFBK0osRUFBQTBpQixLQUFBLENBQ0EsSUFBQXpsRCxFQUFBdVEsRUFBQWxLLEdBRUEsR0FBQTI4QixHQUFBLE1BQUFoakMsRUFHQSxTQUFBZ2pDLEVBQUFoakMsS0FHQXVRLEVBQUFsSyxHQUFBckcsRUFBQWdqQyxFQUFBaGpDLFVBQ1MsU0FBQTZsRCxFQUFBLENBQ1QsSUFBQWdCLEVBQUFuNEMsRUFBQW0zQyxHQUNBaUIsRUFBQTdnQixFQUFBNGdCLEdBQUFqRCxHQUVBLEdBQUFrRCxFQUFBLENBQ0E5bUQsRUFBQThtRCxFQUFBakQsR0FDQSxJQUFBejBDLEVBQUEyMkMsRUFBQWMsR0FBQXozQyxZQUVBQSxLQUFBNGxDLFdBQUE1ekMsU0FDQXBCLEVBQUFvUCxFQUFBNGxDLFdBQUFoMUMsS0FRQSxJQUFBd0IsRUFBQSxNQUFBd2hDLEVBQUEsS0FBQUEsRUFBQXhoQyxHQUVBLE1BQUFBLEdBQUEsTUFBQXhCLElBRUFrbUQsRUFBQWxtRCxHQUFBa21ELEVBQUFsbUQsSUFBQSxFQUNBd0IsRUFBQXhCLEVBRUFrbUQsRUFBQWxtRCxHQUFBLElBQ0F3QixHQUFBLFNBQUEwa0QsRUFBQWxtRCxJQUdBa21ELEVBQUFsbUQsTUFHQSxNQUFBd0IsSUFBQXdrRCxFQUFBMy9DLEdBQUE3RSxLQUlBdWhDLEVBQUE2aUIsWUFBQTdpQixFQUFBZ2tCLE9BRUFoa0IsRUFBQWdrQixRQUdBbDlDLEtBQUF1M0MsVUFBQXYzQyxLQUFBMDRDLE9BQUFwa0MsRUFFQXRVLEtBQUF3b0MsV0FJQSxTQUFBMW9DLEdBQ0EsSUFBQXE0QyxFQUFBcjRDLEVBQUE0NUMsb0JBQ0F0NEMsRUFBQVEsS0FBQXUyQyxFQUFBLFNBQUFnRixFQUFBNTRDLEdBQ0EsSUFBQUMsRUFBQTFFLEVBQUEwNEMsZ0JBQUFqMEMsR0FFQWdCLEVBQUFmLEVBQUFlLFlBRUEsR0FBQUEsRUFBQSxDQUNBNDNDLEVBQUFoRixFQUFBNXpDLEdBQUEsSUFBQTJ5QyxFQUFBM3hDLEVBQUE0bEMsV0FBQTV6QyxRQUdBLFFBQUFELEVBQUEsRUFBcUJBLEVBQUE2bEQsRUFBQTVsRCxPQUE0QkQsSUFDakQ2bEQsRUFBQTdsRCxHQUFBNmdCLElBR0EsUUFBQTdnQixFQUFBLEVBQXFCQSxFQUFBd0ksRUFBQTQ0QyxPQUFpQnBoRCxJQUV0QzZsRCxFQUFBcjlDLEVBQUF4SixJQUFBaU8sRUFBQWpOLFNBcEJBOGxELENBQUFwOUMsUUFxREEyNUMsRUFBQXB3QyxNQUFBLFdBQ0EsT0FBQXZKLEtBQUEwNEMsUUFHQWlCLEVBQUEwRCxXQUFBLFdBQ0EsSUFDQUMsRUFBQXQ5QyxLQUFBeTRDLFNBRUEsR0FBQTZFLEVBQUEsQ0FDQSxJQUFBNUYsRUFBQTRGLEVBQUE5N0MsWUFDQSs3QyxFQUFBdjlDLEtBQUEwNEMsT0FFQSxHQUFBaEIsSUFBQWIsTUFBQSxDQUNBNVAsRUFBQSxJQUFBeVEsRUFBQTZGLEdBRUEsUUFBQWptRCxFQUFBLEVBQXFCQSxFQUFBaW1ELEVBQWVqbUQsSUFDcEMydkMsRUFBQTN2QyxHQUFBZ21ELEVBQUFobUQsUUFHQTJ2QyxFQUFBLElBQUF5USxFQUFBNEYsRUFBQUUsT0FBQSxFQUFBRCxPQUdBLEtBQ0F0VyxFQUFBLElBREF5USxFQUFBSixFQUFBdDNDLE9BQ0FBLEtBQUF1SixTQUVBLElBQUFqUyxFQUFBLEVBQW1CQSxFQUFBMnZDLEVBQUExdkMsT0FBdUJELElBQzFDMnZDLEVBQUEzdkMsS0FJQSxPQUFBMnZDLEdBV0EwUyxFQUFBcmpELElBQUEsU0FBQWlPLEVBQUEvSCxHQUdBLEtBQUFBLEdBQUEsR0FBQUEsRUFBQXdELEtBQUEwNEMsUUFDQSxPQUFBdmdDLElBR0EsSUFBQWlrQixFQUFBcDhCLEtBQUEyNEMsU0FFQSxJQUFBdmMsRUFBQTczQixHQUVBLE9BQUE0VCxJQUdBM2IsRUFBQXdELEtBQUF1dEIsWUFBQS93QixHQUNBLElBQUF1OUMsRUFBQWh0QyxLQUFBNmpDLE1BQUFwMEMsRUFBQXdELEtBQUFvNUMsWUFDQVksRUFBQXg5QyxFQUFBd0QsS0FBQW81QyxXQXFCQSxPQXBCQWhkLEVBQUE3M0IsR0FBQXcxQyxHQUNBQyxJQTRCQUwsRUFBQThELGNBQUEsU0FBQWw1QyxFQUFBbTVDLEdBQ0EsS0FBQUEsR0FBQSxHQUFBQSxFQUFBMTlDLEtBQUF1M0MsV0FDQSxPQUFBcC9CLElBR0EsSUFBQXdsQyxFQUFBMzlDLEtBQUEyNEMsU0FBQXAwQyxHQUVBLElBQUFvNUMsRUFFQSxPQUFBeGxDLElBR0EsSUFBQTRoQyxFQUFBaHRDLEtBQUE2akMsTUFBQThNLEVBQUExOUMsS0FBQW81QyxZQUNBWSxFQUFBMEQsRUFBQTE5QyxLQUFBbzVDLFdBRUEsT0FEQXVFLEVBQUE1RCxHQUNBQyxJQVNBTCxFQUFBaUUsU0FBQSxTQUFBcjVDLEVBQUFtNUMsR0FDQSxJQUFBM0QsRUFBQWh0QyxLQUFBNmpDLE1BQUE4TSxFQUFBMTlDLEtBQUFvNUMsWUFDQVksRUFBQTBELEVBQUExOUMsS0FBQW81QyxXQUVBLE9BREFwNUMsS0FBQTI0QyxTQUFBcDBDLEdBQUF3MUMsR0FDQUMsSUFVQUwsRUFBQTVvQixVQUFBLFNBQUFsc0IsRUFBQXJJLEdBR0EsSUFBQXFoRCxLQUVBejhDLEVBQUE2RSxRQUFBcEIsS0FFQXJJLEVBQUFxSSxFQUNBQSxFQUFBN0UsS0FBQTZFLFlBR0EsUUFBQXZOLEVBQUEsRUFBQWdTLEVBQUF6RSxFQUFBdE4sT0FBMENELEVBQUFnUyxFQUFTaFMsSUFDbkR1bUQsRUFBQS9uRCxLQUFBa0ssS0FBQTFKLElBQUF1TyxFQUFBdk4sR0FBQWtGLElBS0EsT0FBQXFoRCxHQVdBbEUsRUFBQW1FLFNBQUEsU0FBQXRoRCxHQUlBLElBSEEsSUFBQTIrQyxFQUFBbjdDLEtBQUF5NUMsbUJBQUEwQixnQkFDQWxELEVBQUFqNEMsS0FBQXc0QyxnQkFFQWxoRCxFQUFBLEVBQUFnUyxFQUFBNnhDLEVBQUE1akQsT0FBK0NELEVBQUFnUyxFQUFTaFMsSUFDeEQsR0FDQSxZQUFBMmdELEVBQUFrRCxFQUFBN2pELElBQUEwRCxNQUNBdWMsTUFBQXZYLEtBQUExSixJQUFBNmtELEVBQUE3akQsR0FBQWtGLElBQ0EsU0FJQSxVQVNBbTlDLEVBQUE5aEMsY0FBQSxTQUFBdFQsR0FJQUEsRUFBQXZFLEtBQUFpN0MsYUFBQTEyQyxHQUNBLElBQUF3NUMsRUFBQS85QyxLQUFBMjRDLFNBQUFwMEMsR0FDQXk1QyxFQUFBbEQsSUFFQSxJQUFBaUQsRUFDQSxPQUFBQyxFQUlBLElBUUFDLEVBUkFDLEVBQUFsK0MsS0FBQXVKLFFBVUEsSUFKQXZKLEtBQUF5NEMsU0FLQSxPQUFBejRDLEtBQUF1NUMsV0FBQWgxQyxHQUFBOUosUUFLQSxHQUZBd2pELEVBQUFqK0MsS0FBQXdvQyxRQUFBamtDLEdBR0EsT0FBQTA1QyxFQUFBeGpELFFBT0EsSUFIQSxJQUFBNGMsR0FEQTRtQyxFQUFBRCxHQUNBLEdBQ0E5cUMsRUFBQStxQyxFQUFBLEdBRUEzbUQsRUFBQSxFQUFpQkEsRUFBQTRtRCxFQUFhNW1ELElBQUEsQ0FFOUIsSUFBQWQsRUFBQXdKLEtBQUE0OUMsU0FBQXI1QyxFQUFBdkUsS0FBQXV0QixZQUFBajJCLElBRUFkLEVBQUE2Z0IsTUFBQTdnQixHQUNBQSxFQUFBMGMsTUFBQTFjLEdBS0EsT0FGQXluRCxHQUFBNW1DLEVBQUFuRSxHQUNBbFQsS0FBQXdvQyxRQUFBamtDLEdBQUEwNUMsRUFDQUEsR0FVQXRFLEVBQUF3RSxxQkFBQSxTQUFBNTVDLEdBSUEsT0FEQUEsRUFBQXZFLEtBQUFpN0MsYUFBQTEyQyxHQUNBdkUsS0FBQXc1QyxtQkFBQWoxQyxJQUFBdkUsS0FBQTZYLGNBQUF0VCxJQUtBbzFDLEVBQUF5RSxxQkFBQSxTQUFBeG1DLEVBQUFyVCxHQUdBQSxFQUFBdkUsS0FBQWk3QyxhQUFBMTJDLEdBQ0F2RSxLQUFBdzVDLG1CQUFBajFDLEdBQUFxVCxFQUFBbmQsU0FRQWsvQyxFQUFBMEUsbUJBQUEsU0FBQS8rQyxHQUNBLE9BQUFVLEtBQUFnNEMsaUJBQUExNEMsSUFRQXE2QyxFQUFBL3pDLG1CQUFBLFNBQUF0RyxFQUFBOUksR0FDQSt1QixFQUFBam1CLEdBQUE4QixFQUFBcUYsT0FBQXpHLEtBQUFnNEMsaUJBQUExNEMsR0FBQVUsS0FBQWc0QyxpQkFBQTE0QyxHQUFBOUksR0FRQW1qRCxFQUFBbGlDLE9BQUEsU0FBQWxULEdBR0EsSUFDQWlULEVBQUEsRUFFQSxHQUhBeFgsS0FBQTI0QyxTQUFBcDBDLEdBSUEsUUFBQWpOLEVBQUEsRUFBQWdTLEVBQUF0SixLQUFBdUosUUFBdUNqUyxFQUFBZ1MsRUFBU2hTLElBQUEsQ0FDaEQsSUFBQWQsRUFBQXdKLEtBQUExSixJQUFBaU8sRUFBQWpOLEdBSUFpZ0IsTUFBQS9nQixLQUNBZ2hCLEdBQUFoaEIsR0FLQSxPQUFBZ2hCLEdBUUFtaUMsRUFBQTJFLFVBQUEsU0FBQS81QyxHQUdBLElBQUFnNkMsS0FFQXYrQyxLQUFBNEIsS0FBQTJDLEVBQUEsU0FBQTRxQixFQUFBM3lCLEdBQ0ErYSxNQUFBNFgsSUFDQW92QixFQUFBem9ELEtBQUFxNUIsS0FNQSxJQUFBcXZCLEtBQUFuakQsT0FBQWtqRCxHQUFBcHBDLEtBQUEsU0FBQTNaLEVBQUFDLEdBQ0EsT0FBQUQsRUFBQUMsSUFFQTZOLEVBQUF0SixLQUFBdUosUUFFQSxXQUFBRCxFQUFBLEVBQUFBLEVBQUEsS0FBQWsxQyxHQUFBbDFDLEVBQUEsT0FBQWsxQyxFQUFBbDFDLEVBQUEsR0FBQWsxQyxFQUFBbDFDLEVBQUEsU0FtQ0Fxd0MsRUFBQThFLFdBQUEsU0FBQWw2QyxFQUFBL04sR0FDQSxJQUNBcWpELEdBREF0MUMsR0FBQXZFLEtBQUEwNUMsb0JBQUFuMUMsSUFDQS9OLEdBRUEsYUFBQXFqRCxHQUFBdGlDLE1BQUFzaUMsSUFDQSxFQUdBQSxHQVVBRixFQUFBcGUsWUFBQSxTQUFBcGxDLEdBQ0EsUUFBQW1CLEVBQUEsRUFBQWdTLEVBQUF0SixLQUFBdUosUUFBcUNqUyxFQUFBZ1MsRUFBU2hTLElBQzlDLEdBQUEwSSxLQUFBb0QsUUFBQTlMLEtBQUFuQixFQUNBLE9BQUFtQixFQUlBLFVBVUFxaUQsRUFBQStFLGdCQUFBLFNBQUE3RSxHQUNBLElBQUE3NUMsS0FBQXk0QyxTQUNBLE9BQUFvQixFQUdBLEdBQUFBLEdBQUE3NUMsS0FBQXUzQyxXQUFBc0MsRUFBQSxFQUNBLFNBSUEsSUFBQXlELEVBQUF0OUMsS0FBQXk0QyxTQUVBa0csRUFBQXJCLEVBQUF6RCxHQUVBLFNBQUE4RSxLQUFBMytDLEtBQUEwNEMsUUFBQWlHLElBQUE5RSxFQUNBLE9BQUFBLEVBTUEsSUFIQSxJQUFBeGdCLEVBQUEsRUFDQXdZLEVBQUE3eEMsS0FBQTA0QyxPQUFBLEVBRUFyZixHQUFBd1ksR0FBQSxDQUNBLElBQUErTSxHQUFBdmxCLEVBQUF3WSxHQUFBLElBRUEsR0FBQXlMLEVBQUFzQixHQUFBL0UsRUFDQXhnQixFQUFBdWxCLEVBQUEsTUFDSyxNQUFBdEIsRUFBQXNCLEdBQUEvRSxHQUdMLE9BQUErRSxFQUZBL00sRUFBQStNLEVBQUEsR0FNQSxVQVdBakYsRUFBQXZzQixpQkFBQSxTQUFBN29CLEVBQUEvTixFQUFBcW9ELEdBQ0EsSUFFQUMsS0FFQSxJQUpBOStDLEtBQUEyNEMsU0FDQXAwQyxHQUlBLE9BQUF1NkMsRUFHQSxNQUFBRCxJQUNBQSxFQUFBaFQsS0FNQSxJQUhBLElBQUFsZixFQUFBOVgsT0FBQUMsVUFDQThYLEdBQUEsRUFFQXQxQixFQUFBLEVBQUFnUyxFQUFBdEosS0FBQXVKLFFBQXFDalMsRUFBQWdTLEVBQVNoUyxJQUFBLENBQzlDLElBQUFvYixFQUFBbGMsRUFBQXdKLEtBQUExSixJQUFBaU8sRUFBQWpOLEdBR0FzZixFQUFBN0osS0FBQWlJLElBQUF0QyxHQUVBQSxHQUFBbXNDLEdBQUFqb0MsR0FBQStWLEtBSUEvVixFQUFBK1YsR0FBQWphLEdBQUEsR0FBQWthLEVBQUEsS0FDQUQsRUFBQS9WLEVBQ0FnVyxFQUFBbGEsRUFDQW9zQyxFQUFBdm5ELE9BQUEsR0FHQXVuRCxFQUFBaHBELEtBQUF3QixJQUlBLE9BQUF3bkQsR0FTQW5GLEVBQUFwc0IsWUFBQTJzQixFQW9CQVAsRUFBQW9GLGVBQUEsU0FBQXZpRCxHQUNBLEdBQUF3RCxLQUFBczVDLFNBQUF5QyxXQVVBLE9BQUEvN0MsS0FBQXM1QyxTQUFBdUQsUUFBQTc4QyxLQUFBdXRCLFlBQUEvd0IsSUFQQSxJQUZBLElBQUEyeUIsS0FFQTczQixFQUFBLEVBQW1CQSxFQUFBMEksS0FBQTZFLFdBQUF0TixPQUE0QkQsSUFBQSxDQUMvQyxJQUFBaU4sRUFBQXZFLEtBQUE2RSxXQUFBdk4sR0FDQTYzQixFQUFBcjVCLEtBQUFrSyxLQUFBMUosSUFBQWlPLEVBQUEvSCxJQUdBLE9BQUEyeUIsR0FZQXdxQixFQUFBdjJDLFFBQUEsU0FBQTVHLEdBQ0EsSUFBQXE5QyxFQUFBNzVDLEtBQUF1dEIsWUFBQS93QixHQUNBLE9BQUF3RCxLQUFBNDRDLFVBQUFpQixJQUFBRCxFQUFBNTVDLFVBQUF3OEMsWUFBQTNDLElBQUEsSUFTQUYsRUFBQVMsTUFBQSxTQUFBNTlDLEdBQ0EsT0FBQTQ5QyxFQUFBcDZDLFVBQUF1dEIsWUFBQS93QixLQWdEQW05QyxFQUFBLzNDLEtBQUEsU0FBQTA1QyxFQUFBcGhELEVBQUFpN0MsRUFBQTZKLEdBQ0EsYUFFQSxHQUFBaC9DLEtBQUEwNEMsT0FBQSxDQUlBLG1CQUFBNEMsSUFDQTBELEVBQUE3SixFQUNBQSxFQUFBajdDLEVBQ0FBLEVBQUFvaEQsRUFDQUEsTUFJQW5HLEtBQUE2SixHQUFBaC9DLEtBSUEsSUFGQSxJQUFBaS9DLEdBREEzRCxFQUFBbDZDLEVBQUExRyxJQUFBNC9DLEVBQUFnQixHQUFBdDdDLEtBQUFpN0MsYUFBQWo3QyxPQUNBekksT0FFQUQsRUFBQSxFQUFpQkEsRUFBQTBJLEtBQUF1SixRQUFrQmpTLElBRW5DLE9BQUEybkQsR0FDQSxPQUNBL2tELEVBQUEzRixLQUFBNGdELEVBQUE3OUMsR0FDQSxNQUVBLE9BQ0E0QyxFQUFBM0YsS0FBQTRnRCxFQUFBbjFDLEtBQUExSixJQUFBZ2xELEVBQUEsR0FBQWhrRCxNQUNBLE1BRUEsT0FDQTRDLEVBQUEzRixLQUFBNGdELEVBQUFuMUMsS0FBQTFKLElBQUFnbEQsRUFBQSxHQUFBaGtELEdBQUEwSSxLQUFBMUosSUFBQWdsRCxFQUFBLEdBQUFoa0QsTUFDQSxNQUVBLFFBSUEsSUFIQSxJQUFBNDdDLEVBQUEsRUFDQTE4QyxLQUVjMDhDLEVBQUErTCxFQUFhL0wsSUFDM0IxOEMsRUFBQTA4QyxHQUFBbHpDLEtBQUExSixJQUFBZ2xELEVBQUFwSSxHQUFBNTdDLEdBSUFkLEVBQUEwOEMsR0FBQTU3QyxFQUNBNEMsRUFBQXJDLE1BQUFzOUMsRUFBQTMrQyxNQVlBbWpELEVBQUF1RixXQUFBLFNBQUFyNkMsRUFBQTNLLEVBQUFpN0MsRUFBQTZKLEdBQ0EsYUFFQSxHQUFBaC9DLEtBQUEwNEMsT0FBQSxDQUlBLG1CQUFBN3pDLElBQ0FtNkMsRUFBQTdKLEVBQ0FBLEVBQUFqN0MsRUFDQUEsRUFBQTJLLEVBQ0FBLE1BSUFzd0MsS0FBQTZKLEdBQUFoL0MsS0FDQTZFLEVBQUF6RCxFQUFBMUcsSUFBQTQvQyxFQUFBejFDLEdBQUE3RSxLQUFBaTdDLGFBQUFqN0MsTUFTQSxJQVJBLElBQUF1SixFQUFBdkosS0FBQXVKLFFBRUEwOUIsRUFBQSxJQURBcVEsRUFBQXQzQyxNQUNBLENBQUF1SixHQUNBL1MsS0FDQXlvRCxFQUFBcDZDLEVBQUF0TixPQUNBNFYsRUFBQSxFQUNBZ3lDLEVBQUF0NkMsRUFBQSxHQUVBdk4sRUFBQSxFQUFpQkEsRUFBQWlTLEVBQVdqUyxJQUFBLENBQzVCLElBQUE4bkQsRUFDQTFCLEVBQUExOUMsS0FBQXV0QixZQUFBajJCLEdBRUEsT0FBQTJuRCxFQUNBRyxFQUFBbGxELEVBQUEzRixLQUFBNGdELEVBQUE3OUMsUUFDSyxPQUFBMm5ELEVBQUEsQ0FDTCxJQUFBOXZCLEVBQUFudkIsS0FBQTQ5QyxTQUFBdUIsRUFBQXpCLEdBRUEwQixFQUFBbGxELEVBQUEzRixLQUFBNGdELEVBQUFobUIsRUFBQTczQixPQUNLLENBQ0wsUUFBQTQ3QyxFQUFBLEVBQXFCQSxFQUFBK0wsRUFBYS9MLElBQ2xDMThDLEVBQUEwOEMsR0FBQWx6QyxLQUFBNDlDLFNBQUF1QixFQUFBekIsR0FHQWxuRCxFQUFBMDhDLEdBQUE1N0MsRUFDQThuRCxFQUFBbGxELEVBQUFyQyxNQUFBczlDLEVBQUEzK0MsR0FHQTRvRCxJQUNBblksRUFBQTk1QixLQUFBdXdDLEdBYUEsT0FSQXZ3QyxFQUFBNUQsSUFDQXZKLEtBQUF5NEMsU0FBQXhSLEdBR0FqbkMsS0FBQTA0QyxPQUFBdnJDLEVBRUFuTixLQUFBd29DLFdBQ0F4b0MsS0FBQXV0QixZQUFBdnRCLEtBQUF5NEMsU0FBQTBCLEVBQUFELEVBQ0FsNkMsT0FRQTI1QyxFQUFBMEYsWUFBQSxTQUFBQyxHQUNBLGFBRUEsR0FBQXQvQyxLQUFBMDRDLE9BQUEsQ0FJQSxJQUFBN3pDLEtBRUEsUUFBQU4sS0FBQSs2QyxFQUNBQSxFQUFBaHJELGVBQUFpUSxJQUNBTSxFQUFBL08sS0FBQXlPLEdBSUEsSUFBQTA2QyxFQUFBcDZDLEVBQUF0TixPQUVBLEdBQUEwbkQsRUFBQSxDQUlBLElBQUFNLEVBQUF2L0MsS0FBQXVKLFFBRUEwOUIsRUFBQSxJQURBcVEsRUFBQXQzQyxNQUNBLENBQUF1L0MsR0FDQXB5QyxFQUFBLEVBQ0FneUMsRUFBQXQ2QyxFQUFBLEdBQ0F3UyxFQUFBaW9DLEVBQUFILEdBQUEsR0FDQWpzQyxFQUFBb3NDLEVBQUFILEdBQUEsR0FDQUssR0FBQSxFQUVBLElBQUF4L0MsS0FBQXk0QyxTQUFBLENBRUEsSUFBQWo4QyxFQUFBLEVBRUEsT0FBQXlpRCxFQUFBLENBR0EsSUFGQSxJQUFBbkMsRUFBQTk4QyxLQUFBMjRDLFNBQUE5ekMsRUFBQSxJQUVBcXVDLEVBQUEsRUFBcUJBLEVBQUFsekMsS0FBQXE1QyxZQUFzQm5HLElBSTNDLElBSEEsSUFBQXVNLEVBQUEzQyxFQUFBNUosR0FDQTVwQyxFQUFBeUQsS0FBQXNLLElBQUFyWCxLQUFBMDRDLE9BQUF4RixFQUFBbHpDLEtBQUFvNUMsV0FBQXA1QyxLQUFBbzVDLFlBRUE5aEQsRUFBQSxFQUF1QkEsRUFBQWdTLEVBQVNoUyxJQUFBLEdBQ2hDNjNCLEVBQUFzd0IsRUFBQW5vRCxLQU1BK2YsR0FBQThYLEdBQUFqYyxHQUFBcUUsTUFBQTRYLE1BQ0E4WCxFQUFBOTVCLEtBQUEzUSxHQUdBQSxJQUlBZ2pELEdBQUEsT0FDSyxPQUFBUCxFQUFBLENBQ0xuQyxFQUFBOThDLEtBQUEyNEMsU0FBQXdHLEdBQUEsSUFDQU8sRUFBQTEvQyxLQUFBMjRDLFNBQUE5ekMsRUFBQSxJQUNBK3RDLEVBQUEwTSxFQUFBejZDLEVBQUEsT0FDQWd1QyxFQUFBeU0sRUFBQXo2QyxFQUFBLE9BRUEsSUFBQXF1QyxFQUFBLEVBQXFCQSxFQUFBbHpDLEtBQUFxNUMsWUFBc0JuRyxJQUMzQyxDQUFBdU0sRUFBQTNDLEVBQUE1SixHQUFBLElBQ0F5TSxFQUFBRCxFQUFBeE0sR0FHQSxJQUZBNXBDLEVBQUF5RCxLQUFBc0ssSUFBQXJYLEtBQUEwNEMsT0FBQXhGLEVBQUFsekMsS0FBQW81QyxXQUFBcDVDLEtBQUFvNUMsWUFFQTloRCxFQUFBLEVBQXVCQSxFQUFBZ1MsRUFBU2hTLElBQUEsQ0FDaEMsSUFBQTYzQixFQUFBc3dCLEVBQUFub0QsR0FDQXNvRCxFQUFBRCxFQUFBcm9ELElBRUE2M0IsR0FBQTlYLEdBQUE4WCxHQUFBamMsR0FBQXFFLE1BQUE0WCxNQUFBeXdCLEdBQUFoTixHQUFBZ04sR0FBQS9NLEdBQUF0N0IsTUFBQXFvQyxNQUNBM1ksRUFBQTk1QixLQUFBM1EsR0FHQUEsS0FJQWdqRCxHQUFBLEdBSUEsSUFBQUEsRUFDQSxPQUFBUCxFQUNBLElBQUEzbkQsRUFBQSxFQUFxQkEsRUFBQWlvRCxFQUFtQmpvRCxJQUFBLENBQ3hDLElBQUF1aUQsRUFBQTc1QyxLQUFBdXRCLFlBQUFqMkIsS0FFQTYzQixFQUFBbnZCLEtBQUE0OUMsU0FBQXVCLEVBQUF0RixLQUdBeGlDLEdBQUE4WCxHQUFBamMsR0FBQXFFLE1BQUE0WCxNQUNBOFgsRUFBQTk1QixLQUFBMHNDLFFBSUEsSUFBQXZpRCxFQUFBLEVBQXFCQSxFQUFBaW9ELEVBQW1Cam9ELElBQUEsQ0FDeEMsSUFBQThuRCxHQUFBLEVBR0EsSUFGQXZGLEVBQUE3NUMsS0FBQXV0QixZQUFBajJCLEdBRUE0N0MsRUFBQSxFQUF1QkEsRUFBQStMLEVBQWEvTCxJQUFBLENBQ3BDLElBQUEyTSxFQUFBaDdDLEVBQUFxdUMsS0FFQS9qQixFQUFBbnZCLEtBQUE0OUMsU0FBQXI1QyxFQUFBczFDLElBR0F5RixFQUFBTyxHQUFBLElBQUExd0IsRUFBQW13QixFQUFBTyxHQUFBLE1BQ0FULEdBQUEsR0FJQUEsSUFDQW5ZLEVBQUE5NUIsS0FBQW5OLEtBQUF1dEIsWUFBQWoyQixJQWVBLE9BUkE2VixFQUFBb3lDLElBQ0F2L0MsS0FBQXk0QyxTQUFBeFIsR0FHQWpuQyxLQUFBMDRDLE9BQUF2ckMsRUFFQW5OLEtBQUF3b0MsV0FDQXhvQyxLQUFBdXRCLFlBQUF2dEIsS0FBQXk0QyxTQUFBMEIsRUFBQUQsRUFDQWw2QyxRQVdBMjVDLEVBQUE1Z0IsU0FBQSxTQUFBbDBCLEVBQUEzSyxFQUFBaTdDLEVBQUE2SixHQUNBLGFBRUEsbUJBQUFuNkMsSUFDQW02QyxFQUFBN0osRUFDQUEsRUFBQWo3QyxFQUNBQSxFQUFBMkssRUFDQUEsTUFJQXN3QyxLQUFBNkosR0FBQWgvQyxLQUNBLElBQUFqRyxLQUlBLE9BSEFpRyxLQUFBNEIsS0FBQWlELEVBQUEsV0FDQTlLLEVBQUFqRSxLQUFBb0UsS0FBQXJDLE1BQUFtSSxLQUFBeUksYUFDRzBzQyxHQUNIcDdDLEdBc0RBNC9DLEVBQUFqL0MsSUFBQSxTQUFBbUssRUFBQTNLLEVBQUFpN0MsRUFBQTZKLEdBQ0EsYUFFQTdKLEtBQUE2SixHQUFBaC9DLEtBRUEsSUFBQUYsRUFBQXk2QyxFQUFBdjZDLEtBREE2RSxFQUFBekQsRUFBQTFHLElBQUE0L0MsRUFBQXoxQyxHQUFBN0UsS0FBQWk3QyxhQUFBajdDLE9BSUFGLEVBQUEyNEMsU0FBQXo0QyxLQUFBeTRDLFNBQ0EzNEMsRUFBQXl0QixZQUFBenRCLEVBQUEyNEMsU0FBQTBCLEVBQUFELEVBU0EsSUFSQSxJQUFBOWQsRUFBQXQ4QixFQUFBNjRDLFNBQ0FtSCxLQUNBaEcsRUFBQTk1QyxLQUFBbzVDLFdBQ0E2RixFQUFBcDZDLEVBQUF0TixPQUNBd29ELEVBQUEvL0MsS0FBQXVKLFFBQ0FzMEMsS0FDQXpCLEVBQUF0OEMsRUFBQXk1QyxXQUVBcjJDLEVBQUEsRUFBeUJBLEVBQUE2OEMsRUFBdUI3OEMsSUFBQSxDQUNoRCxRQUFBaUMsRUFBQSxFQUEwQkEsRUFBQTg1QyxFQUFvQjk1QyxJQUM5QzA0QyxFQUFBMTRDLEdBQUFuRixLQUFBMUosSUFBQXVPLEVBQUFNLEdBQUFqQyxHQUtBMjZDLEVBQUFvQixHQUFBLzdDLEVBQ0EsSUFBQTg4QyxFQUFBOWxELEtBQUFyQyxNQUFBczlDLEVBQUEwSSxHQUVBLFNBQUFtQyxFQUFBLENBRUEsaUJBQUFBLElBQ0FGLEVBQUEsR0FBQUUsRUFDQUEsRUFBQUYsR0FPQSxJQUpBLElBQUFqRyxFQUFBNzVDLEtBQUF1dEIsWUFBQXJxQixHQUNBNjJDLEVBQUFodEMsS0FBQTZqQyxNQUFBaUosRUFBQUMsR0FDQUUsRUFBQUgsRUFBQUMsRUFFQXhpRCxFQUFBLEVBQXFCQSxFQUFBMG9ELEVBQUF6b0QsT0FBcUJELElBQUEsQ0FDMUMsSUFBQWlOLEVBQUFNLEVBQUF2TixHQUNBNjNCLEVBQUE2d0IsRUFBQTFvRCxHQUNBMm9ELEVBQUE3RCxFQUFBNzNDLEdBQ0FvNUMsRUFBQXZoQixFQUFBNzNCLEdBRUFvNUMsSUFDQUEsRUFBQTVELEdBQUFDLEdBQUE3cUIsR0FHQUEsRUFBQTh3QixFQUFBLEtBQ0FBLEVBQUEsR0FBQTl3QixHQUdBQSxFQUFBOHdCLEVBQUEsS0FDQUEsRUFBQSxHQUFBOXdCLEtBTUEsT0FBQXJ2QixHQVdBNjVDLEVBQUF1RyxXQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBWUEsSUFYQSxJQUFBeGdELEVBQUF5NkMsRUFBQXY2QyxNQUFBbWdELElBQ0FJLEVBQUF6Z0QsRUFBQTY0QyxTQUNBNkgsS0FDQUMsRUFBQTF6QyxLQUFBNmpDLE1BQUEsRUFBQXdQLEdBQ0F6QyxFQUFBNEMsRUFBQUosR0FDQTcyQyxFQUFBdEosS0FBQXVKLFFBQ0F1d0MsRUFBQTk1QyxLQUFBbzVDLFdBQ0E2RyxFQUFBbmdELEVBQUF5NUMsV0FBQTRHLEdBQ0FsWixFQUFBLElBQUFxUSxFQUFBdDNDLE1BQUEsQ0FBQXNKLEdBQ0E2RCxFQUFBLEVBRUE3VixFQUFBLEVBQWlCQSxFQUFBZ1MsRUFBU2hTLEdBQUFtcEQsRUFBQSxDQUUxQkEsRUFBQW4zQyxFQUFBaFMsSUFDQW1wRCxFQUFBbjNDLEVBQUFoUyxFQUNBa3BELEVBQUFqcEQsT0FBQWtwRCxHQUdBLFFBQUF2TixFQUFBLEVBQW1CQSxFQUFBdU4sRUFBZXZOLElBQUEsQ0FDbEMsSUFBQXdOLEVBQUExZ0QsS0FBQXV0QixZQUFBajJCLEVBQUE0N0MsR0FDQXlOLEVBQUE1ekMsS0FBQTZqQyxNQUFBOFAsRUFBQTVHLEdBQ0E4RyxFQUFBRixFQUFBNUcsRUFDQTBHLEVBQUF0TixHQUFBeUssRUFBQWdELEdBQUFDLEdBR0EsSUFBQXBxRCxFQUFBNnBELEVBQUFHLEdBQ0FLLEVBQUE3Z0QsS0FBQXV0QixZQUFBeGdCLEtBQUFzSyxJQUFBL2YsRUFBQWdwRCxFQUFBRSxFQUFBaHFELElBQUEsRUFBQThTLEVBQUEsSUFFQXczQyxFQUFBRCxFQUFBL0csRUFFQTZELEVBSEE1d0MsS0FBQTZqQyxNQUFBaVEsRUFBQS9HLElBR0FnSCxHQUFBdHFELEVBRUFBLEVBQUF5cEQsRUFBQSxLQUNBQSxFQUFBLEdBQUF6cEQsR0FHQUEsRUFBQXlwRCxFQUFBLEtBQ0FBLEVBQUEsR0FBQXpwRCxHQUdBeXdDLEVBQUE5NUIsS0FBQTB6QyxFQU1BLE9BSEEvZ0QsRUFBQTQ0QyxPQUFBdnJDLEVBQ0FyTixFQUFBMjRDLFNBQUF4UixFQUNBbm5DLEVBQUF5dEIsWUFBQTRzQixFQUNBcjZDLEdBVUE2NUMsRUFBQTlxQyxhQUFBLFNBQUFyUyxHQUNBLElBQUFvTixFQUFBNUosS0FBQTRKLFVBQ0EsV0FBQTBPLEVBQUF0WSxLQUFBKytDLGVBQUF2aUQsR0FBQW9OLE9BQUFuSSxVQVNBazRDLEVBQUFqbkMsS0FBQSxTQUFBcXVDLEdBQ0EsSUFBQUMsRUFBQWhoRCxLQUNBLFdBQUE4MEMsRUFBQWlNLElBQUExRCxnQkFBQXI5QyxLQUFBcTlDLGFBQUEsU0FBQTdnRCxHQUNBLE9BQUE0OUMsRUFBQTJHLEVBQUF2a0QsSUFDRyxTQUFBQSxHQUNILE9BQUE0OUMsRUFBQTRHLEVBQUF4a0QsTUFTQW05QyxFQUFBM2UsVUFBQSxTQUFBMTdCLEdBQ0EsSUFBQTJoRCxFQUFBamhELEtBQUErNEMsUUFDQSxPQUFBa0ksS0FBQTNoRCxJQWVBcTZDLEVBQUF1SCxVQUFBLFNBQUE1aEQsRUFBQTZ2QixHQUNBLEdBQUE1SixFQUFBam1CLEdBQ0EsUUFBQW5KLEtBQUFtSixFQUNBQSxFQUFBaEwsZUFBQTZCLElBQ0E2SixLQUFBa2hELFVBQUEvcUQsRUFBQW1KLEVBQUFuSixTQU9BNkosS0FBQSs0QyxRQUFBLzRDLEtBQUErNEMsWUFDQS80QyxLQUFBKzRDLFFBQUF6NUMsR0FBQTZ2QixHQVNBd3FCLEVBQUF3SCxVQUFBLFNBQUE3aEQsRUFBQTZ2QixHQUNBLEdBQUE1SixFQUFBam1CLEdBQ0EsUUFBQW5KLEtBQUFtSixFQUNBQSxFQUFBaEwsZUFBQTZCLElBQ0E2SixLQUFBbWhELFVBQUFockQsRUFBQW1KLEVBQUFuSixTQU9BNkosS0FBQXkyQixRQUFBbjNCLEdBQUE2dkIsR0FTQXdxQixFQUFBeUgsVUFBQSxTQUFBOWhELEdBQ0EsT0FBQVUsS0FBQXkyQixRQUFBbjNCLElBUUFxNkMsRUFBQWx0QyxjQUFBLFNBQUFqUSxHQUNBLE9BQUF3RCxLQUFBazVDLGFBQUExOEMsSUFVQW05QyxFQUFBemhDLGNBQUEsU0FBQTFiLEVBQUFtUSxFQUFBMDBDLEdBQ0FyaEQsS0FBQWs1QyxhQUFBMThDLEdBQUE2a0QsRUFBQWpnRCxFQUFBcUYsT0FBQXpHLEtBQUFrNUMsYUFBQTE4QyxPQUE2RW1RLE1BTzdFZ3RDLEVBQUEySCxpQkFBQSxXQUNBdGhELEtBQUFrNUMsYUFBQTNoRCxPQUFBLEdBVUFvaUQsRUFBQXJxQyxjQUFBLFNBQUE5UyxFQUFBOEMsRUFBQWlpRCxHQUNBLElBQUFDLEVBQUF4aEQsS0FBQWc1QyxhQUFBeDhDLEdBQ0EyeUIsRUFBQXF5QixLQUFBbGlELEdBRUEsYUFBQTZ2QixHQUFBb3lCLEVBS0FweUIsRUFIQW52QixLQUFBZzdCLFVBQUExN0IsSUFvQkFxNkMsRUFBQThILGNBQUEsU0FBQWpsRCxFQUFBOEMsRUFBQTlJLEdBQ0EsSUFBQWdyRCxFQUFBeGhELEtBQUFnNUMsYUFBQXg4QyxPQUNBeThDLEVBQUFqNUMsS0FBQWk1QyxjQUdBLEdBRkFqNUMsS0FBQWc1QyxhQUFBeDhDLEdBQUFnbEQsRUFFQWo4QixFQUFBam1CLEdBQ0EsUUFBQW5KLEtBQUFtSixFQUNBQSxFQUFBaEwsZUFBQTZCLEtBQ0FxckQsRUFBQXJyRCxHQUFBbUosRUFBQW5KLEdBQ0E4aUQsRUFBQTlpRCxJQUFBLFFBT0FxckQsRUFBQWxpRCxHQUFBOUksRUFDQXlpRCxFQUFBMzVDLElBQUEsR0FPQXE2QyxFQUFBK0gsZUFBQSxXQUNBMWhELEtBQUErNEMsV0FDQS80QyxLQUFBZzVDLGdCQUNBaDVDLEtBQUFpNUMsa0JBR0EsSUFBQTBJLEVBQUEsU0FBQXZrRCxHQUNBQSxFQUFBaXdCLFlBQUFydEIsS0FBQXF0QixZQUNBandCLEVBQUE4RixVQUFBbEQsS0FBQWtELFVBQ0E5RixFQUFBNm5DLFNBQUFqbEMsS0FBQWlsQyxVQVNBMFUsRUFBQTltQyxpQkFBQSxTQUFBclcsRUFBQWtRLEdBQ0EsSUFBQTlDLEVBQUE1SixLQUFBNEosVUFFQThDLElBR0FBLEVBQUF4SixVQUFBMUcsRUFDQWtRLEVBQUF1NEIsU0FBQWpsQyxLQUFBaWxDLFNBQ0F2NEIsRUFBQTJnQixZQUFBempCLEtBQUF5akIsWUFFQSxVQUFBM2dCLEVBQUExUixNQUNBMFIsRUFBQXFaLFNBQUE0N0IsRUFBQWoxQyxJQUlBMU0sS0FBQW01QyxZQUFBMzhDLEdBQUFrUSxHQVFBaXRDLEVBQUFudEMsaUJBQUEsU0FBQWhRLEdBQ0EsT0FBQXdELEtBQUFtNUMsWUFBQTM4QyxJQVFBbTlDLEVBQUFpSSxrQkFBQSxTQUFBMW5ELEVBQUFpN0MsR0FDQS96QyxFQUFBUSxLQUFBNUIsS0FBQW01QyxZQUFBLFNBQUF6c0MsRUFBQWxRLEdBQ0FrUSxHQUNBeFMsS0FBQTNGLEtBQUE0Z0QsRUFBQXpvQyxFQUFBbFEsTUFVQW05QyxFQUFBa0ksYUFBQSxTQUFBL2hELEdBQ0EsSUFBQUEsRUFBQSxDQUNBLElBQUFnaUQsRUFBQTFnRCxFQUFBMUcsSUFBQXNGLEtBQUE2RSxXQUFBN0UsS0FBQTI2QyxpQkFBQTM2QyxNQUNBRixFQUFBLElBQUF3RCxFQUFBdytDLEVBQUE5aEQsS0FBQTRKLFdBT0EsR0FIQTlKLEVBQUE2NEMsU0FBQTM0QyxLQUFBMjRDLFNBQ0FkLEVBQUEvM0MsRUFBQUUsTUFFQUEsS0FBQXk0QyxTQUFBLENBQ0EsSUFBQWYsRUFBQTEzQyxLQUFBeTRDLFNBQUFqM0MsWUFDQTFCLEVBQUEyNEMsU0FBQSxJQUFBZixFQUFBMTNDLEtBQUF5NEMsZUFFQTM0QyxFQUFBMjRDLFNBQUEsS0FJQSxPQURBMzRDLEVBQUF5dEIsWUFBQXp0QixFQUFBMjRDLFNBQUEwQixFQUFBRCxFQUNBcDZDLEdBU0E2NUMsRUFBQW9JLFdBQUEsU0FBQXZsQixFQUFBd2xCLEdBQ0EsSUFBQUMsRUFBQWppRCxLQUFBdzhCLEdBRUEsbUJBQUF5bEIsSUFJQWppRCxLQUFBODNDLGlCQUFBOTNDLEtBQUE4M0MscUJBRUE5M0MsS0FBQTgzQyxpQkFBQWhpRCxLQUFBMG1DLEdBRUF4OEIsS0FBQXc4QixHQUFBLFdBQ0EsSUFBQTBsQixFQUFBRCxFQUFBcHFELE1BQUFtSSxLQUFBeUksV0FDQSxPQUFBdTVDLEVBQUFucUQsTUFBQW1JLE1BQUFraUQsR0FBQTdtRCxPQUFBK0YsRUFBQTNHLE1BQUFnTyxnQkFNQWt4QyxFQUFBd0ksc0JBQUEsbUNBRUF4SSxFQUFBeUksbUJBQUEsNEJBQ0EsSUFBQWxnRCxFQUFBb0IsRUFDQWxKLEVBQUEwRCxRQUFBb0Usb0VDaDZEQSxJQUFBc0UsRUFBQWpSLEVBQUEsMkNBRUFpaUMsRUFBQWh4QixFQUFBZ3hCLGNBQ0FqUyxFQUFBL2UsRUFBQStlLFNBQ0E3cUIsRUFBQThMLEVBQUE5TCxJQTRCQSxTQUFBMm5ELEVBQUF0K0MsR0FLQS9ELEtBQUFtckMsV0FBQXBuQyxFQUFBb25DLGVBTUFuckMsS0FBQXNpRCxhQUFBditDLEVBQUF3K0MsWUFNQXZpRCxLQUFBd2lELGVBQUF6K0MsRUFBQTArQyxjQU1BemlELEtBQUEwaUQsS0FRQUwsRUFBQU0sa0JBQUEsU0FBQWwrQyxHQUNBLElBQUE4RCxFQUFBOUQsRUFBQThELE9BQ0F0TCxFQUFBc0wsRUFBQXRMLEtBQ0FrdUMsRUFBQWx1QyxHQUFBdkMsRUFBQXVDLEVBQUFtRyxHQUNBLFdBQUFpL0MsR0FDQWxYLGFBQ0FvWCxhQUFBcFgsRUFFQXNYLGVBQUEsSUFBQWw2QyxFQUFBcTZDLGdCQUlBLElBQUFDLEVBQUFSLEVBQUFodUQsVUEwREEsU0FBQXl1RCxFQUFBdjlDLEdBQ0EsT0FBQUEsRUFBQW05QyxPQUFBbjlDLEVBQUFtOUMsS0FBQWxyQixFQUFBanlCLEVBQUE0bEMsYUFHQSxTQUFBL25DLEVBQUEyL0MsR0FDQSxPQUFBeDlCLEVBQUF3OUIsSUFBQSxNQUFBQSxFQUFBdnNELE1BQ0F1c0QsRUFBQXZzRCxNQUVBdXNELEVBQUEsR0E1REFGLEVBQUFHLFdBQUEsU0FBQUMsR0FDQSxPQUFBSCxFQUFBOWlELE1BQUExSixJQUFBMnNELElBUUFKLEVBQUFLLGdCQUFBLFNBQUFELEdBQ0EsSUFBQWxvQyxFQUNBd25DLEVBQUF2aUQsS0FBQXNpRCxhQU1BLG9CQUFBVyxJQUFBVixFQUNBLE9BQUFVLEVBV0EsR0FBQVYsSUFBQXZpRCxLQUFBd2lELGVBR0EsT0FGQXpuQyxFQUFBL2EsS0FBQW1yQyxXQUFBNXpDLE9BQ0F5SSxLQUFBbXJDLFdBQUFwd0IsR0FBQWtvQyxFQUNBbG9DLEVBR0EsSUFBQXJnQixFQUFBb29ELEVBQUE5aUQsTUFhQSxPQVZBLE9BRkErYSxFQUFBcmdCLEVBQUFwRSxJQUFBMnNELE1BR0FWLEdBQ0F4bkMsRUFBQS9hLEtBQUFtckMsV0FBQTV6QyxPQUNBeUksS0FBQW1yQyxXQUFBcHdCLEdBQUFrb0MsRUFDQXZvRCxFQUFBbkUsSUFBQTBzRCxFQUFBbG9DLElBRUFBLEVBQUE1QyxLQUlBNEMsR0FnQkEsSUFBQTdZLEVBQUFtZ0QsRUFDQWpvRCxFQUFBMEQsUUFBQW9FLCtEQ2xKQSxJQUFBc0UsRUFBQWpSLEVBQUEsMkNBRUFpaUMsRUFBQWh4QixFQUFBZ3hCLGNBQ0EyckIsRUFBQTM4QyxFQUFBMjhDLGFBSUFDLEVBRkE3dEQsRUFBQSw0Q0FFQTZ0RCxpQkFFQUMsRUFBQTl0RCxFQUFBLHdEQUVBaU8sRUFBQTYvQyxFQUFBNy9DLHVCQUNBNnlCLEVBQUFndEIsRUFBQWh0Qix3QkFDQWl0QixFQUFBRCxFQUFBQyxzQkFDQUMsRUFBQUYsRUFBQUUsMEJBQ0FDLEVBQUFILEVBQUFHLDRCQXFFQSxTQUFBMy9DLEVBQUFrRCxHQUlBL0csS0FBQXlqRCxZQUFBMThDLEVBQUEwOEMsWUFNQXpqRCxLQUFBL0MsS0FBQThKLEVBQUE5SixPQUFBOEosRUFBQWpCLGVBQUEwOUMsU0FPQXhqRCxLQUFBOEYsYUFBQWlCLEVBQUFqQixjQUFBdzlDLEVBT0F0akQsS0FBQXMyQixlQUFBdnZCLEVBQUF1dkIsZ0JBQUFELEVBT0FyMkIsS0FBQTBqRCxpQkFBQTM4QyxFQUFBMjhDLGlCQU9BMWpELEtBQUEyakQsYUFBQTU4QyxFQUFBNDhDLGNBQUFuc0IsRUFBQXp3QixFQUFBNDhDLGNBTUEzakQsS0FBQTRqRCxXQUFBNzhDLEVBQUE2OEMsWUFBQSxFQU1BNWpELEtBQUE2akQsc0JBQUE5OEMsRUFBQTg4QyxzQkFPQWhnRCxFQUFBSSxtQkFBQSxTQUFBaEgsR0FDQSxXQUFBNEcsR0FDQTVHLE9BQ0E2SSxhQUFBcTlDLEVBQUFsbUQsR0FBQXNtRCxFQUFBLy9DLEVBQ0FpZ0QsYUFBQSxLQUlBTCxFQUFBdi9DLEdBQ0EsSUFBQTNCLEVBQUEyQixFQUNBekosRUFBQTBELFFBQUFvRSxrRkN2SkEsSUFBQXNFLEVBQUFqUixFQUFBLDJDQUVBaWlDLEVBQUFoeEIsRUFBQWd4QixjQUNBNTFCLEVBQUE0RSxFQUFBNUUsS0FDQTZ6QixFQUFBanZCLEVBQUFpdkIsU0FDQWptQixFQUFBaEosRUFBQWdKLFNBQ0EvSSxFQUFBRCxFQUFBQyxPQUNBOGUsRUFBQS9lLEVBQUErZSxTQUNBNUUsRUFBQW5hLEVBQUFtYSxNQUlBbWpDLEVBRkF2dUQsRUFBQSw0Q0FFQXV1RCxpQkFJQUMsRUFGQXh1RCxFQUFBLDBEQUVBd3VELGFBRUFsZ0QsRUFBQXRPLEVBQUEsNkNBSUF5dUQsRUFGQXp1RCxFQUFBLDZEQUVBeXVELGlCQWdQQSxTQUFBQyxFQUFBOXRELEVBQUF1RSxFQUFBd3BELEdBQ0EsR0FBQUEsR0FBQSxNQUFBeHBELEVBQUFwRSxJQUFBSCxHQUFBLENBR0EsSUFGQSxJQUFBbUIsRUFBQSxFQUVBLE1BQUFvRCxFQUFBcEUsSUFBQUgsRUFBQW1CLElBQ0FBLElBR0FuQixHQUFBbUIsRUFJQSxPQURBb0QsRUFBQW5FLElBQUFKLEdBQUEsR0FDQUEsRUFHQSxJQUFBK0wsRUF0TEEsU0FBQWlpRCxFQUFBdmpELEVBQUFtRCxHQUNBRixFQUFBRyxXQUFBcEQsS0FDQUEsRUFBQWlELEVBQUFJLG1CQUFBckQsSUFHQW1ELFFBQ0FvZ0QsVUFBQTFwRCxRQVNBLElBUkEsSUFBQTJwRCxHQUFBcmdELEVBQUFxZ0QsYUFBQTNwRCxRQUNBNHBELEVBQUE3c0IsRUFBQXp6QixFQUFBc2dELFdBQ0FDLEVBQUE5c0IsSUFDQStzQixFQUFBL3NCLElBRUF6OUIsS0FDQXlxRCxFQStJQSxTQUFBNWpELEVBQUF1akQsRUFBQUMsRUFBQUssR0FHQSxJQUFBRCxFQUFBejNDLEtBQUFtRyxJQUFBdFMsRUFBQWlqRCx1QkFBQSxFQUFBTSxFQUFBNXNELE9BQUE2c0QsRUFBQTdzRCxPQUFBa3RELEdBQUEsR0FLQSxPQUpBN2lELEVBQUF1aUQsRUFBQSxTQUFBTyxHQUNBLElBQUFDLEVBQUFELEVBQUFOLFFBQ0FPLElBQUFILEVBQUF6M0MsS0FBQW1HLElBQUFzeEMsRUFBQUcsRUFBQXB0RCxXQUVBaXRELEVBdkpBSSxDQUFBaGtELEVBQUF1akQsRUFBQUMsRUFBQXJnRCxFQUFBeWdELFVBRUFsdEQsRUFBQSxFQUFpQkEsRUFBQWt0RCxFQUFjbHRELElBQUEsQ0FDL0IsSUFBQXV0RCxFQUFBVCxFQUFBOXNELEdBQUFtUCxLQUEyQzhlLEVBQUE2K0IsRUFBQTlzRCxJQUFBOHNELEVBQUE5c0QsSUFDM0NuQixLQUFBaXVELEVBQUE5c0QsS0FFQXd0RCxFQUFBRCxFQUFBMXVELEtBQ0E0dUQsRUFBQWhyRCxFQUFBekMsSUFDQW1PLGNBR0EsTUFBQXEvQyxHQUFBLE1BQUFSLEVBQUFodUQsSUFBQXd1RCxLQUlBQyxFQUFBNXVELEtBQUE0dUQsRUFBQUMsWUFBQUYsRUFDQVIsRUFBQS90RCxJQUFBdXVELEVBQUF4dEQsSUFHQSxNQUFBdXRELEVBQUE3cEQsT0FBQStwRCxFQUFBL3BELEtBQUE2cEQsRUFBQTdwRCxNQUNBLE1BQUE2cEQsRUFBQUcsY0FBQUQsRUFBQUMsWUFBQUgsRUFBQUcsYUFJQVgsRUFBQXppRCxLQUFBLFNBQUFxakQsRUFBQTcvQyxHQUNBNi9DLEVBQUFuQixFQUFBbUIsR0FBQXhxRCxRQUNBLElBQUF5cUQsRUFBQWIsRUFBQTl0RCxJQUFBNk8sTUFDQXhELEVBQUFxakQsRUFBQSxTQUFBRSxFQUFBM29ELEdBRUFpNUIsRUFBQTB2QixPQUFBYixFQUFBaHVELElBQUE2dUQsSUFFQSxNQUFBQSxLQUFBWCxJQUNBVSxFQUFBMW9ELEdBQUEyb0QsRUFDQUMsRUFBQXJyRCxFQUFBb3JELEdBQUEvL0MsRUFBQTVJLFFBS0EsSUFBQTZvRCxFQUFBLEVBcURBLFNBQUFELEVBQUFMLEVBQUEzL0MsRUFBQWt6QyxHQUNBLE1BQUEwTCxFQUFBMXRELElBQUE4TyxHQUNBMi9DLEVBQUF0L0MsVUFBQUwsR0FBQWt6QyxHQUVBeU0sRUFBQTMvQyxXQUNBMi9DLEVBQUF6TSxnQkFDQWlNLEVBQUFodUQsSUFBQTZPLEdBQUEsSUExREF4RCxFQUFBdWlELEVBQUEsU0FBQU8sRUFBQVksR0FDQSxJQUFBbGdELEVBRUF1L0MsRUFDQVksRUFFQSxHQUFBOXZCLEVBQUFpdkIsR0FDQXQvQyxFQUFBcy9DLEVBQ0FBLFNBQ0ssQ0FDTHQvQyxFQUFBcy9DLEVBQUF2dUQsS0FDQSxJQUFBb1AsRUFBQW0vQyxFQUFBbi9DLFlBQ0FtL0MsRUFBQW4vQyxZQUFBLE1BQ0FtL0MsRUFBQS9qQyxFQUFBK2pDLElBQ0FuL0MsY0FFQW8vQyxFQUFBRCxFQUFBTixRQUNBbUIsRUFBQWIsRUFBQWovQyxVQUNBaS9DLEVBQUF2dUQsS0FBQXV1RCxFQUFBdC9DLFNBQUFzL0MsRUFBQXBNLGNBQUFvTSxFQUFBTixRQUFBTSxFQUFBai9DLFVBQUEsS0FHQSxJQUFBdy9DLEVBQUFuQixFQUFBTyxFQUFBL3RELElBQUE4TyxJQUVBLElBQUE2L0MsRUFBQTF0RCxPQUNBLFFBQUFELEVBQUEsRUFBcUJBLEdBQUFxdEQsS0FBQXB0RCxRQUFBLEdBQTBERCxJQUFBLENBQy9FLEtBQUErdEQsRUFBQXRyRCxFQUFBeEMsUUFBQSxNQUFBd0MsRUFBQXNyRCxHQUFBamdELFVBQ0FpZ0QsSUFHQUEsRUFBQXRyRCxFQUFBeEMsUUFBQTB0RCxFQUFBbnZELEtBQUF1dkQsS0FLQXpqRCxFQUFBcWpELEVBQUEsU0FBQUUsRUFBQTdNLEdBQ0EsSUFBQXlNLEVBQUFockQsRUFBQW9yRCxHQUdBLEdBRkFDLEVBQUE1MUMsRUFBQXUxQyxFQUFBTCxHQUFBdC9DLEVBQUFrekMsR0FFQSxNQUFBeU0sRUFBQTV1RCxNQUFBd3VELEVBQUEsQ0FDQSxJQUFBYSxFQUFBYixFQUFBck0sSUFDQS95QixFQUFBaWdDLFFBQ0FydkQsS0FBQXF2RCxJQUVBVCxFQUFBNXVELEtBQUE0dUQsRUFBQUMsWUFBQVEsRUFBQXJ2RCxLQUNBNHVELEVBQUFVLGVBQUFELEVBQUFDLGVBSUFGLEdBQUEvMUMsRUFBQXUxQyxFQUFBdC9DLFVBQUE4L0MsT0FlQSxJQUFBcmdELEVBQUFuQixFQUFBbUIsY0FDQXdnRCxFQUFBM2hELEVBQUEyaEQsbUJBQ0F4QixFQUFBLE1BQUF3QixFQUNBQSxFQUFBeGdELEVBQUF3Z0QsR0FBQSxJQUdBLElBRkEsSUFBQUMsRUFBQXpnRCxHQUFBLFFBRUFpZ0QsRUFBQSxFQUE0QkEsRUFBQVgsRUFBeUJXLElBSXJELE9BSEFKLEVBQUFockQsRUFBQW9yRCxHQUFBcHJELEVBQUFvckQsUUFDQS8vQyxXQUdBMi9DLEVBQUEzL0MsU0FBQTYrQyxFQUFBMEIsRUFBQXBCLEVBQUFMLEdBQ0FhLEVBQUF6TSxjQUFBLElBRUFwekMsR0FBQXdnRCxHQUFBLEtBQ0FYLEVBQUFhLGNBQUEsR0FHQUYsS0FHQSxNQUFBWCxFQUFBNXVELE9BQUE0dUQsRUFBQTV1RCxLQUFBOHRELEVBQUFjLEVBQUEzL0MsU0FBQWsvQyxJQUVBLE1BQUFTLEVBQUEvcEQsTUFBQStvRCxFQUFBbmpELEVBQUF1a0QsRUFBQUosRUFBQTV1RCxRQUNBNHVELEVBQUEvcEQsS0FBQSxXQUlBLE9BQUFqQixHQXdDQUssRUFBQTBELFFBQUFvRSxnRkN0UkEsSUFBQTJqRCxFQUFBdHdELEVBQUEsZ0VBZ0RBNkUsRUFBQTBELFFBWEEsU0FBQThDLEVBQUFtRCxHQUVBLE9BQUE4aEQsR0FEQTloRCxTQUNBa0Isb0JBQUFyRSxHQUNBd2pELFFBQUFyZ0QsRUFBQTIvQyxrQkFBQTlpRCxFQUFBOGlELGlCQUNBVyxVQUFBdGdELEVBQUE0L0MsY0FBQS9pRCxFQUFBK2lELGFBQ0FhLFNBQUF6Z0QsRUFBQStoRCxnQkFDQTVnRCxjQUFBbkIsRUFBQW1CLGNBQ0F3Z0QsbUJBQUEzaEQsRUFBQTJoRCxnR0M1Q0Fud0QsRUFBQSx3Q0FFQTJyQixRQUZBLElBSUExYSxFQUFBalIsRUFBQSwyQ0FHQWtSLEdBREFELEVBQUEyOEMsYUFDQTM4QyxFQUFBQyxRQUVBN0UsR0FEQTRFLEVBQUF1L0MsT0FDQXYvQyxFQUFBNUUsTUFDQTJqQixFQUFBL2UsRUFBQStlLFNBRUFYLEVBQUFydkIsRUFBQSw0Q0FFQW1PLEVBQUFraEIsRUFBQWxoQixpQkFDQXNpRCxFQUFBcGhDLEVBQUFvaEMsaUJBSUFDLEVBRkExd0QsRUFBQSw2Q0FFQTB3RCxVQUVBcGlELEVBQUF0TyxFQUFBLDZDQUVBOHRELEVBQUE5dEQsRUFBQSx3REFFQWd1RCxFQUFBRixFQUFBRSwwQkFDQTJDLEVBQUE3QyxFQUFBNkMseUJBQ0ExaUQsRUFBQTYvQyxFQUFBNy9DLHVCQUNBMmlELEVBQUE5QyxFQUFBOEMsMEJBNEJBLFNBQUE1UCxFQUFBMzFDLEVBQUFxK0MsR0FDQXA3QyxFQUFBRyxXQUFBcEQsS0FDQUEsRUFBQWlELEVBQUFJLG1CQUFBckQsSUFHQVosS0FBQW9tRCxRQUFBeGxELEVBQ0EsSUFBQTNELEVBQUErQyxLQUFBcVMsTUFBQXpSLEVBQUEzRCxLQUNBNkksRUFBQWxGLEVBQUFrRixhQUVBQSxJQUFBeTlDLElBQ0F2akQsS0FBQXFtRCxRQUFBLEVBQ0FybUQsS0FBQXNtRCxTQUFBckgsRUFDQWovQyxLQUFBcVMsTUFBQXBWLEdBR0EsSUFBQXNwRCxFQUFBQyxFQUFBMWdELElBQUFvZ0QsRUFBQXBnRCxFQUFBLElBQUFsRixFQUFBMDFCLGVBQUF4d0IsR0FDQVcsRUFBQXpHLEtBQUF1bUQsR0FHQSxJQUFBRSxFQUFBbFEsRUFBQWxpRCxVQUVBb3lELEVBQUE3SyxNQUFBLEVBRUE2SyxFQUFBMUssWUFBQSxFQUVBMEssRUFBQTkvQyxVQUFBLFdBQ0EsT0FBQTNHLEtBQUFvbUQsU0FHQSxJQUFBSSxHQUNBRSxrQkFDQTlLLE1BQUEsRUFDQXJ5QyxNQUFBLFdBQ0EsT0FBQXdELEtBQUFtRyxJQUFBLEVBQUFsVCxLQUFBcVMsTUFBQTlhLE9BQUF5SSxLQUFBb21ELFFBQUF4QyxhQUVBL0csUUFBQSxTQUFBcmdELEdBQ0EsT0FBQXdELEtBQUFxUyxNQUFBN1YsRUFBQXdELEtBQUFvbUQsUUFBQXhDLGFBRUE5SCxXQUFBNkssR0FFQUMsZUFDQWhMLE1BQUEsRUFDQXJ5QyxNQUFBLFdBQ0EsSUFBQXM5QyxFQUFBN21ELEtBQUFxUyxNQUFBLEdBQ0EsT0FBQXcwQyxFQUFBOTVDLEtBQUFtRyxJQUFBLEVBQUEyekMsRUFBQXR2RCxPQUFBeUksS0FBQW9tRCxRQUFBeEMsWUFBQSxHQUVBL0csUUFBQSxTQUFBcmdELEdBQ0FBLEdBQUF3RCxLQUFBb21ELFFBQUF4QyxXQUlBLElBSEEsSUFBQWxvRCxLQUNBdUIsRUFBQStDLEtBQUFxUyxNQUVBL2EsRUFBQSxFQUFxQkEsRUFBQTJGLEVBQUExRixPQUFpQkQsSUFBQSxDQUN0QyxJQUFBdXZELEVBQUE1cEQsRUFBQTNGLEdBQ0FvRSxFQUFBNUYsS0FBQSt3RCxJQUFBcnFELEdBQUEsTUFHQSxPQUFBZCxHQUVBb2dELFdBQUEsV0FDQSxVQUFBaGtELE1BQUEsK0RBR0FndkQsWUFDQWxMLE1BQUEsRUFDQXJ5QyxNQUFBdzlDLEVBQ0FsSyxRQUFBbUssRUFDQWxMLFdBQUE2SyxHQUVBTSxjQUNBckwsTUFBQSxFQUNBcnlDLE1BQUEsV0FDQSxJQUFBbkQsRUFBQXBHLEtBQUFvbUQsUUFBQTFDLGlCQUFBLEdBQUF2dEQsS0FDQSt3RCxFQUFBbG5ELEtBQUFxUyxNQUFBak0sR0FDQSxPQUFBOGdELElBQUEzdkQsT0FBQSxHQUVBc2xELFFBQUEsU0FBQXJnRCxHQUlBLElBSEEsSUFBQWQsS0FDQTQvQyxFQUFBdDdDLEtBQUFvbUQsUUFBQTFDLGlCQUVBcHNELEVBQUEsRUFBcUJBLEVBQUFna0QsRUFBQS9qRCxPQUFpQkQsSUFBQSxDQUN0QyxJQUFBNHZELEVBQUFsbkQsS0FBQXFTLE1BQUFpcEMsRUFBQWhrRCxHQUFBbkIsTUFDQXVGLEVBQUE1RixLQUFBb3hELElBQUExcUQsR0FBQSxNQUdBLE9BQUFkLEdBRUFvZ0QsV0FBQSxTQUFBcUwsR0FDQSxJQUFBbHFELEVBQUErQyxLQUFBcVMsTUFDQXpRLEVBQUF1bEQsRUFBQSxTQUFBQyxFQUFBOW5ELEdBR0EsSUFGQSxJQUFBK25ELEVBQUFwcUQsRUFBQXFDLEtBQUFyQyxFQUFBcUMsT0FFQWhJLEVBQUEsRUFBdUJBLEdBQUE4dkQsT0FBQTd2RCxPQUEyQkQsSUFDbEQrdkQsRUFBQXZ4RCxLQUFBc3hELEVBQUE5dkQsUUFLQWtqRCxVQUNBanhDLE1BQUF3OUMsRUFDQWxLLFFBQUFtSyxFQUNBbEwsV0FBQTZLLEdBRUFXLFlBQ0F2TCxZQUFBLEVBQ0FILE1BQUEsRUFDQXJ5QyxNQUFBLFdBQ0EsT0FBQXZKLEtBQUFxUyxNQUFBclMsS0FBQXFTLE1BQUE5YSxPQUFBeUksS0FBQXNtRCxTQUFBLEdBRUF6SixRQUFBLFNBQUFyZ0QsRUFBQStxRCxHQUNBL3FELEdBQUF3RCxLQUFBcW1ELFFBQ0FrQixRQUdBLElBRkEsSUFBQXA2QyxFQUFBbk4sS0FBQXNtRCxTQUFBOXBELEVBRUFsRixFQUFBLEVBQXFCQSxFQUFBMEksS0FBQXNtRCxTQUFtQmh2RCxJQUN4Q2l3RCxFQUFBandELEdBQUEwSSxLQUFBcVMsTUFBQWxGLEVBQUE3VixHQUdBLE9BQUFpd0QsR0FFQXpMLFdBQUEsU0FBQXFMLEdBQ0FubkQsS0FBQXFTLE1BQUE4MEMsR0FHQWpLLE1BQUEsV0FFQWw5QyxLQUFBcW1ELFNBQUFybUQsS0FBQXVKLFFBQ0F2SixLQUFBcVMsTUFBQSxRQUtBLFNBQUEwMEMsSUFDQSxPQUFBL21ELEtBQUFxUyxNQUFBOWEsT0FHQSxTQUFBeXZELEVBQUF4cUQsR0FDQSxPQUFBd0QsS0FBQXFTLE1BQUE3VixHQUdBLFNBQUFtcUQsRUFBQVEsR0FDQSxRQUFBN3ZELEVBQUEsRUFBaUJBLEVBQUE2dkQsRUFBQTV2RCxPQUFvQkQsSUFDckMwSSxLQUFBcVMsTUFBQXZjLEtBQUFxeEQsRUFBQTd2RCxJQUlBLElBQUFrd0QsR0FDQUMsVUFBQUMsRUFDQVosV0FBQSxTQUFBM3RCLEVBQUFqMkIsRUFBQWlDLEVBQUFpQixHQUNBLGFBQUFqQixFQUFBZzBCLEVBQUEveUIsR0FBQSt5QixHQUVBOHRCLGFBQUFTLEVBQ0FsTixTQUFBLFNBQUFyaEIsRUFBQWoyQixFQUFBaUMsRUFBQWlCLEdBSUEsSUFBQTVQLEVBQUFrTixFQUFBeTFCLEdBQ0EsYUFBQWgwQixHQUFBM08sYUFBQXFnRCxNQUFBcmdELEVBQUEyTyxHQUFBM08sR0FFQTh3RCxXQUFBSSxHQUdBLFNBQUFBLEVBQUF2dUIsRUFBQWoyQixFQUFBaUMsRUFBQWlCLEdBQ0EsYUFBQWpCLEVBQUFnMEIsRUFBQWgwQixHQUFBZzBCLEVBR0EsSUFBQW1kLEdBQ0FtUixVQUFBRSxFQUNBYixXQUFBLFNBQUEzdEIsRUFBQS95QixFQUFBbEQsRUFBQWlDLEdBQ0EsT0FBQXlpRCxFQUFBenVCLEVBQUEveUIsR0FBQXBHLEtBQUF3NEMsZ0JBQUFweUMsS0FFQTZnRCxhQUFBVSxFQUNBbk4sU0FBQSxTQUFBcmhCLEVBQUEveUIsRUFBQWxELEVBQUFpQyxHQUtBLElBQUEzTyxFQUFBMmlDLElBQUEsTUFBQUEsRUFBQTNpQyxNQUFBMmlDLElBQUEzaUMsT0FNQSxPQUpBd0osS0FBQXM1QyxTQUFBc0MsTUFBQW9LLEVBQUE3c0IsS0FDQW41QixLQUFBc0csZUFBQSxHQUdBc2hELEVBQUFweEQsYUFBQXFnRCxNQUFBcmdELEVBQUEyTyxHQUNBM08sRUFBQXdKLEtBQUF3NEMsZ0JBQUFweUMsS0FFQWtoRCxXQUFBLFNBQUFudUIsRUFBQS95QixFQUFBbEQsRUFBQWlDLEdBQ0EsT0FBQWcwQixFQUFBaDBCLEtBSUEsU0FBQXdpRCxFQUFBeHVCLEVBQUEveUIsRUFBQWxELEVBQUFpQyxHQUNBLE9BQUF5aUQsRUFBQXp1QixFQUFBaDBCLEdBQUFuRixLQUFBdzRDLGdCQUFBcHlDLElBVUEsU0FBQXdoRCxFQUFBcHhELEVBQUFnTyxHQUVBLElBQUFxakQsRUFBQXJqRCxLQUFBeEosS0FFQSxlQUFBNnNELEVBQUEsQ0FFQSxJQUFBdGlELEVBQUFmLEtBQUFlLFlBQ0EsT0FBQUEsSUFBQTI5QyxnQkFBQTFzRCxLQVdBLE1BUkEsU0FBQXF4RCxHQUNBLGlCQUFBcnhELEdBQUEsTUFBQUEsR0FBQSxNQUFBQSxJQUNBQSxHQUFBeXZELEVBQUF6dkQsSUFNQSxNQUFBQSxHQUFBLEtBQUFBLEVBQUEyaEIsS0FFQTNoQixFQTZFQXNILEVBQUF5NEMsc0JBQ0F6NEMsRUFBQXc0Qyx5QkFDQXg0QyxFQUFBZ3FELGlCQTlEQSxTQUFBN3FELEVBQUFpRyxFQUFBcUIsR0FDQSxHQUFBdEgsRUFBQSxDQUtBLElBQUFrOEIsRUFBQWw4QixFQUFBOGhELGVBQUE3N0MsR0FFQSxTQUFBaTJCLEVBQUEsQ0FJQSxJQUNBL3lCLEVBQ0FqQixFQUZBVyxFQUFBN0ksRUFBQTQrQyxjQUFBbDFDLFlBQUFiLGFBR0F0QixFQUFBdkgsRUFBQTA5QyxpQkFBQXAyQyxHQU9BLE9BTEFDLElBQ0E0QixFQUFBNUIsRUFBQXJPLEtBQ0FnUCxFQUFBWCxFQUFBdVcsT0FHQXlzQyxFQUFBMWhELEdBQUFxekIsRUFBQWoyQixFQUFBaUMsRUFBQWlCLE1BeUNBdEksRUFBQXFLLGdCQXpCQSxTQUFBbEwsRUFBQWlHLEVBQUFxSyxHQUNBLEdBQUF0USxFQUFBLENBSUEsSUFBQTZJLEVBQUE3SSxFQUFBNCtDLGNBQUFsMUMsWUFBQWIsYUFFQSxHQUFBQSxJQUFBdEMsR0FBQXNDLElBQUFxZ0QsRUFBQSxDQUlBLElBQUFodEIsRUFBQWw4QixFQUFBOGhELGVBQUE3N0MsR0FNQSxPQUpBNEMsSUFBQXRDLEdBQUEraEIsRUFBQTRULEtBQ0FBLEVBQUEsTUFHQUEsRUFDQUEsRUFBQTVyQixRQURBLGtGQzdWQSxJQUFBL0csRUFBQWpSLEVBQUEsMkNBRUFxTSxFQUFBNEUsRUFBQTVFLEtBQ0E2ekIsRUFBQWp2QixFQUFBaXZCLFNBb0lBLFNBQUFzeUIsRUFBQTlxRCxFQUFBK3FELEdBS0EsUUFBQUEsT0FBQS9xRCxFQUFBb2hELG1CQUFBLG9CQW1CQXZnRCxFQUFBZ0csZ0JBbkhBLFNBQUFkLEVBQUE4K0MsRUFBQS85QyxHQUVBLElBSUFra0QsRUFDQUMsRUFDQUMsRUFDQUMsRUFQQUMsR0FEQXRrRCxTQUNBc2tELFFBQ0FDLEVBQUF2a0QsRUFBQXVrRCxzQkFFQUMsS0FBQXZsRCxNQUFBMU0sSUFBQSxVQWtDQSxHQTdCQXNMLEVBQUFrZ0QsRUFBQSxTQUFBMUosRUFBQXI5QixHQUNBMGEsRUFBQTJpQixLQUNBMEosRUFBQS9tQyxHQUFBcTlCLEdBQ0FqaUQsS0FBQWlpRCxJQUlBbVEsSUFBQW5RLEVBQUF3TixlQUVBeUMsR0FBQUosSUFBQTdQLEVBQUE3eUMsY0FDQTBpRCxFQUFBN1AsR0FJQThQLEdBQUEsWUFBQTlQLEVBQUFwOUMsTUFBQSxTQUFBbzlDLEVBQUFwOUMsTUFBQXN0RCxPQUFBbFEsRUFBQWh6QyxXQUNBOGlELEVBQUE5UCxPQUtBOFAsR0FBQUcsR0FBQUosSUFHQUksR0FBQSxHQU1BSCxFQUFBLENBRUFDLEVBQUEsb0JBQ0FDLEVBQUEsb0JBRUFILElBQ0FBLEVBQUExUCx1QkFBQSxHQUdBLElBQUFpUSxFQUFBTixFQUFBOWlELFNBQ0FxakQsRUFBQVAsRUFBQWx0RCxLQUNBMHRELEVBQUEsRUFDQTltRCxFQUFBa2dELEVBQUEsU0FBQTFKLEdBQ0FBLEVBQUFoekMsV0FBQW9qRCxHQUNBRSxNQUdBNUcsRUFBQWhzRCxNQUNBSyxLQUFBZ3lELEVBQ0EvaUQsU0FBQW9qRCxFQUNBbFEsY0FBQW9RLEVBQ0ExdEQsS0FBQXl0RCxFQUNBN0MsY0FBQSxFQUNBK0Msb0JBQUEsSUFFQUQsSUFDQTVHLEVBQUFoc0QsTUFDQUssS0FBQWl5RCxFQUdBaGpELFNBQUFnakQsRUFDQTlQLGNBQUFvUSxFQUNBMXRELEtBQUF5dEQsRUFDQTdDLGNBQUEsRUFDQStDLG9CQUFBLElBSUEsT0FDQUMsaUJBQUFWLEtBQUEveEQsS0FDQTB5RCxtQkFBQVosS0FBQTl4RCxLQUNBMnlELGlCQUFBVCxFQUNBRCx1QkFDQUQseUJBa0NBcnFELEVBQUFpcUQscUJBQ0FqcUQsRUFBQWlyRCxvQkFOQSxTQUFBOXJELEVBQUErckQsR0FDQSxPQUFBakIsRUFBQTlxRCxFQUFBK3JELEdBQUEvckQsRUFBQW9oRCxtQkFBQSx3QkFBQTJLLGdGQzVKQSxJQUFBeGlELEVBQUFqUixFQUFBLDJDQUVBcU0sRUFBQTRFLEVBQUE1RSxLQUNBNDFCLEVBQUFoeEIsRUFBQWd4QixjQXlCQXdzQixHQXhCQXg5QyxFQUFBdS9DLE9BRUF4d0QsRUFBQSx3Q0FFQTJyQixRQW9CQXNXLEdBQUEsc0RBMkdBMTVCLEVBQUFrbUQsbUJBQ0FsbUQsRUFBQTA0QyxvQkExR0EsU0FBQXY1QyxHQUNBLElBQUFnc0QsS0FDQTFOLEVBQUEwTixFQUFBMU4sVUFDQTJOLEVBQUExeEIsSUFDQTJ4QixLQUNBQyxLQUNBeG5ELEVBQUEzRSxFQUFBNEgsV0FBQSxTQUFBdUIsR0FDQSxJQUFBaWpELEVBQUFwc0QsRUFBQTA5QyxpQkFBQXYwQyxHQUNBaEIsRUFBQWlrRCxFQUFBamtELFNBRUEsR0FBQUEsRUFBQSxDQUNBLElBQUFra0QsRUFBQS9OLEVBQUFuMkMsR0FFQW0yQyxFQUFBam5ELGVBQUE4USxLQUNBa2tELEVBQUEvTixFQUFBbjJDLE9BR0Fra0QsRUFBQUQsRUFBQS9RLGVBQUFseUMsRUFFQWlqRCxFQUFBekQsZUFDQXNELEVBQUEzeUQsSUFBQTZPLEVBQUEsR0FtRUEsU0FBQXlpRCxHQUdBLG9CQUFBQSxHQUFBLFNBQUFBLEdBakVBMEIsQ0FBQUYsRUFBQXJ1RCxRQUNBbXVELEVBQUEsR0FBQS9pRCxJQUlBaWpELEVBQUE1RCxnQkFDQTJELEVBQUF0ekQsS0FBQXNRLEdBSUE0OUMsRUFBQXBpRCxLQUFBLFNBQUE0bkQsRUFBQUMsR0FDQSxJQUFBQyxFQUFBbk8sRUFBQWtPLEdBRUFsTyxFQUFBam5ELGVBQUFtMUQsS0FDQUMsRUFBQW5PLEVBQUFrTyxPQUdBLElBQUF0a0QsRUFBQWtrRCxFQUFBNWpELFVBQUFna0QsR0FFQSxNQUFBdGtELElBQUEsSUFBQUEsSUFDQXVrRCxFQUFBdmtELEdBQUFra0QsRUFBQWx6RCxVQUlBLElBQUFnbEQsS0FDQUUsS0FDQTZOLEVBQUF0bkQsS0FBQSxTQUFBNG5ELEVBQUFwa0QsR0FDQSxJQUFBdWtELEVBQUFwTyxFQUFBbjJDLEdBSUFpMkMsRUFBQWoyQyxHQUFBdWtELEVBQUEsR0FHQXhPLElBQUE5L0MsT0FBQXN1RCxLQUVBVixFQUFBOU4sa0JBQ0E4TixFQUFBNU4seUJBQ0EsSUFBQXVPLEVBQUFyTyxFQUFBbnhDLE1BR0F3L0MsS0FBQXJ5RCxTQUNBNHhELEVBQUFTLEVBQUFudkQsU0FHQSxJQUFBb3ZELEVBQUF0TyxFQUFBcDdCLFFBVUEsT0FSQTBwQyxLQUFBdHlELE9BQ0E2eEQsRUFBQVMsRUFBQXB2RCxRQUNHMnVELEVBQUE3eEQsU0FDSDZ4RCxFQUFBRCxFQUFBMXVELFNBR0E4Z0QsRUFBQTROLGlCQUNBNU4sRUFBQTZOLG1CQUNBSCxHQTJCQW5yRCxFQUFBMkYsdUJBeEJBLFNBQUFrQixHQUNBLG1CQUFBQSxFQUFBLG1CQUFBQSxFQUFBLDBGQ2xIQXBQLEVBQUEsd0NBRUEyckIsUUFGQSxJQUlBMEQsRUFBQXJ2QixFQUFBLDRDQUVBc1IsRUFBQStkLEVBQUEvZCxVQUNBbkQsRUFBQWtoQixFQUFBbGhCLGlCQUlBRSxFQUZBck8sRUFBQSxtREFFQXFPLDBCQUVBNEMsRUFBQWpSLEVBQUEsMkNBRUFpaUMsRUFBQWh4QixFQUFBZ3hCLGNBQ0E1MUIsRUFBQTRFLEVBQUE1RSxLQUNBbEgsRUFBQThMLEVBQUE5TCxJQUNBdUwsRUFBQU8sRUFBQVAsUUFDQXd2QixFQUFBanZCLEVBQUFpdkIsU0FDQWxRLEVBQUEvZSxFQUFBK2UsU0FDQTQ5QixFQUFBMzhDLEVBQUEyOEMsYUFDQTNILEVBQUFoMUMsRUFBQWcxQyxZQUNBLzBDLEVBQUFELEVBQUFDLE9BR0E1QyxHQUZBMkMsRUFBQXUvQyxPQUVBeHdELEVBQUEsOENBRUE4dEQsRUFBQTl0RCxFQUFBLHdEQUVBaU8sRUFBQTYvQyxFQUFBNy9DLHVCQUNBMGlELEVBQUE3QyxFQUFBNkMseUJBQ0FDLEVBQUE5QyxFQUFBOEMsMEJBQ0EzQyxFQUFBSCxFQUFBRyw0QkFDQUYsRUFBQUQsRUFBQUMsc0JBQ0FDLEVBQUFGLEVBQUFFLDBCQUNBdUcsRUFBQXpHLEVBQUF5RyxxQkFvQkFoakQsRUFBQUQsSUEyTkEsU0FBQWtqRCxFQUFBckcsR0FDQSxHQUFBQSxFQUFBLENBS0EsSUFBQXNHLEVBQUF4eUIsSUFDQSxPQUFBOThCLEVBQUFncEQsRUFBQSxTQUFBaG9ELEVBQUFxZixHQU9BLFVBTkFyZixFQUFBK0ssS0FBb0I4ZSxFQUFBN3BCLE1BQ3BCdkYsS0FBQXVGLEtBS0F2RixLQUNBLE9BQUF1RixFQUlBQSxFQUFBdkYsTUFBQSxHQU1BLE1BQUF1RixFQUFBc3BELGNBQ0F0cEQsRUFBQXNwRCxZQUFBdHBELEVBQUF2RixNQUdBLElBQUE4ekQsRUFBQUQsRUFBQTF6RCxJQUFBb0YsRUFBQXZGLE1BVUEsT0FSQTh6RCxFQUtBdnVELEVBQUF2RixNQUFBLElBQUE4ekQsRUFBQTFnRCxRQUpBeWdELEVBQUF6ekQsSUFBQW1GLEVBQUF2RixNQUNBb1QsTUFBQSxJQU1BN04sS0FJQSxTQUFBd3VELEVBQUFod0QsRUFBQW84QixFQUFBcjVCLEVBQUFrdEQsR0FHQSxHQUZBLE1BQUFBLE1BQUF0ZSxLQUVBdlYsSUFBQXd6QixFQUNBLFFBQUF4eUQsRUFBQSxFQUFtQkEsRUFBQTJGLEVBQUExRixRQUFBRCxFQUFBNnlELEVBQWdDN3lELElBQ25ENEMsRUFBQStDLEVBQUEzRixHQUFBMkYsRUFBQTNGLEdBQUEsUUFBQUEsT0FHQSxLQUFBOHlELEVBQUFudEQsRUFBQSxPQUVBLElBQUEzRixFQUFBLEVBQW1CQSxFQUFBOHlELEVBQUE3eUQsUUFBQUQsRUFBQTZ5RCxFQUFrQzd5RCxJQUNyRDRDLEVBQUFrd0QsRUFBQTl5RCxPQTRJQSxTQUFBK3lELEVBQUFwdEQsRUFBQTZJLEVBQUF3d0IsRUFBQW90QixFQUFBRSxFQUFBeitDLEdBQ0EsSUFBQXBMLEVBVUFxTSxFQU5BLEdBQUErOEMsRUFBQWxtRCxHQUNBLFNBWUEsR0FMQXltRCxJQUNBdDlDLEVBQUFzOUMsRUFBQXYrQyxHQUNBaUIsRUFBQW1mLEVBQUFuZixLQUFBalEsS0FBQWlRLEdBR0FOLElBQUFvZ0QsRUFDQSxHQUFBNXZCLElBQUF3ekIsR0FHQSxJQUZBLElBQUFRLEVBQUFydEQsRUFBQWtJLEdBRUE3TixFQUFBLEVBQXFCQSxHQUFBZ3pELE9BQUEveUQsUUFBQUQsRUFuQnJCLEVBbUIrREEsSUFDL0QsVUFBQXlDLEVBQUF3d0QsRUFBQUQsRUFBQTFHLEVBQUF0c0QsS0FDQSxPQUFBeUMsT0FJQSxJQUFBekMsRUFBQSxFQUFxQkEsRUFBQTJGLEVBQUExRixRQUFBRCxFQXpCckIsRUF5QnFEQSxJQUFBLENBQ3JELElBQUF1dkQsRUFBQTVwRCxFQUFBMm1ELEVBQUF0c0QsR0FFQSxHQUFBdXZELEdBQUEsT0FBQTlzRCxFQUFBd3dELEVBQUExRCxFQUFBMWhELEtBQ0EsT0FBQXBMLE9BSUcsR0FBQStMLElBQUFxZ0QsRUFBQSxDQUNILElBQUEvL0MsRUFDQSxPQUdBLElBQUE5TyxFQUFBLEVBQW1CQSxFQUFBMkYsRUFBQTFGLFFBQUFELEVBdENuQixFQXNDbURBLElBQUEsQ0FHbkQsSUFGQW9FLEVBQUF1QixFQUFBM0YsS0FFQSxPQUFBeUMsRUFBQXd3RCxFQUFBN3VELEVBQUEwSyxLQUNBLE9BQUFyTSxRQUdHLEdBQUErTCxJQUFBMDlDLEVBQUEsQ0FDSCxJQUFBcDlDLEVBQ0EsT0FLQSxLQUZBa2tELEVBQUFydEQsRUFBQW1KLEtBRUErOEMsRUFBQW1ILEdBQ0EsU0FHQSxJQUFBaHpELEVBQUEsRUFBbUJBLEVBQUFnekQsRUFBQS95RCxRQUFBRCxFQXhEbkIsRUF3RHFEQSxJQUNyRCxVQUFBeUMsRUFBQXd3RCxFQUFBRCxFQUFBaHpELEtBQ0EsT0FBQXlDLE9BR0csR0FBQStMLElBQUF0QyxFQUNILElBQUFsTSxFQUFBLEVBQW1CQSxFQUFBMkYsRUFBQTFGLFFBQUFELEVBOURuQixFQThEbURBLElBQUEsQ0FDbkQsSUFBQW9FLEVBQUF1QixFQUFBM0YsR0FDQTYzQixFQUFBenJCLEVBQUFoSSxHQUVBLElBQUF1SyxFQUFBa3BCLEdBQ0EsU0FHQSxVQUFBcDFCLEVBQUF3d0QsRUFBQXA3QixFQUFBaHFCLEtBQ0EsT0FBQXBMLEVBS0EsU0FBQXd3RCxFQUFBcDdCLEdBR0EsYUFBQUEsSUFBQTlQLFNBQUE4UCxJQUFBLEtBQUFBLFFBRUtzRyxFQUFBdEcsSUFBQSxNQUFBQSxTQUFBLEdBS0wsU0FHQXJ4QixFQUFBczRCLG1CQWxmQSxTQUFBbzBCLEdBQ0EsSUFBQXZ0RCxFQUFBdXRELEVBQUFqaUQsT0FBQTNILE9BQ0FrRixFQUFBdzlDLEVBRUEsR0FBQUgsRUFBQWxtRCxHQUNBNkksRUFBQXk5QyxPQUNHLEdBQUF0OUMsRUFBQWhKLEdBRUgsUUFBQTNGLEVBQUEsRUFBQWdTLEVBQUFyTSxFQUFBMUYsT0FBc0NELEVBQUFnUyxFQUFTaFMsSUFBQSxDQUMvQyxJQUFBb0UsRUFBQXVCLEVBQUEzRixHQUVBLFNBQUFvRSxFQUFBLENBRU8sR0FBQXVLLEVBQUF2SyxHQUFBLENBQ1BvSyxFQUFBb2dELEVBQ0EsTUFDTyxHQUFBM2dDLEVBQUE3cEIsR0FBQSxDQUNQb0ssRUFBQXFnRCxFQUNBLGFBR0csR0FBQTVnQyxFQUFBdG9CLElBQ0gsUUFBQXFDLEtBQUFyQyxFQUNBLEdBQUFBLEVBQUEzSSxlQUFBZ0wsSUFBQWs4QyxFQUFBditDLEVBQUFxQyxJQUFBLENBQ0F3RyxFQUFBMDlDLEVBQ0EsWUFHRyxTQUFBdm1ELEVBQ0gsVUFBQW5GLE1BQUEsZ0JBR0FnUCxFQUFBMGpELEdBQUExa0QsZ0JBbWRBaEksRUFBQTZJLFVBeGJBLFNBQUEzRCxHQUNBLE9BQUE4RCxFQUFBOUQsR0FBQXBDLFFBd2JBOUMsRUFBQTJzRCxxQkFoYkEsU0FBQWhwRCxHQUVBcUYsRUFBQXJGLEdBQUFpcEQsV0FBQWx6QixLQSthQTE1QixFQUFBNnNELGNBM1pBLFNBQUEzbkQsR0FDQSxJQUFBNG5ELEVBQUE1bkQsRUFBQXVGLE9BQ0F0TCxFQUFBMnRELEVBQUEzdEQsS0FDQTZJLEVBQUFxOUMsRUFBQWxtRCxHQUFBc21ELEVBQUEvL0MsRUFDQWlnRCxHQUFBLEVBQ0FudEIsRUFBQXMwQixFQUFBdDBCLGVBQ0FDLEVBQUFxMEIsRUFBQXIwQixhQUNBbXRCLEVBQUFrSCxFQUFBL2xELFdBQ0EybEQsRUF1UkEsU0FBQXhuRCxHQUNBLElBQUF1RixFQUFBdkYsRUFBQXVGLE9BUUEsSUFGQUEsRUFBQXRMLEtBR0EsT0FBQStGLEVBQUF2QixRQUFBbWhCLGFBQUEsVUFBQXJhLEVBQUFzaUQsY0FBQSxHQWpTQUMsQ0FBQTluRCxHQUVBLEdBQUF3bkQsRUFBQSxDQUNBLElBQUFPLEVBQUFQLEVBQUFqaUQsT0FDQXRMLEVBQUE4dEQsRUFBQW5xRCxPQUNBa0YsRUFBQWdCLEVBQUEwakQsR0FBQTFrRCxhQUNBMjlDLEdBQUEsRUFFQW50QixLQUFBeTBCLEVBQUF6MEIsZUFDQSxNQUFBQyxNQUFBdzBCLEVBQUF4MEIsY0FDQW10QixLQUFBcUgsRUFBQWxtRCxXQUdBLElBQUFtbUQsRUFxQkEsU0FBQS90RCxFQUFBNkksRUFBQXd3QixFQUFBQyxFQUFBbXRCLEdBQ0EsSUFBQXptRCxFQUNBLE9BQ0F5bUQsaUJBQUFxRyxFQUFBckcsSUFJQSxJQUFBRyxFQUNBRCxFQUNBcUgsRUFpREFDLEVBL0NBLEdBQUFwbEQsSUFBQW9nRCxFQUtBLFNBQUEzdkIsR0FBQSxNQUFBQSxFQUNBMnpCLEVBQUEsU0FBQS82QixHQUVBLE1BQUFBLEdBQUEsTUFBQUEsSUFDQXNHLEVBQUF0RyxHQUNBLE1BQUF5MEIsTUFBQSxHQUVBQSxFQUFBLElBSU90dEIsRUFBQXI1QixFQUFBLElBRVAybUQsRUFBQXJ0QixFQUFBLElBR0FtdEIsR0FBQSxJQUFBRSxJQUNBRixLQUNBd0csRUFBQSxTQUFBLzZCLEVBQUFwVSxHQUNBMm9DLEVBQUEzb0MsR0FBQSxNQUFBb1UsSUFBQSxJQUNPbUgsRUFBQXI1QixJQUdQNG1ELEVBQUFILElBQUFuc0QsT0FBQSsrQixJQUFBd3pCLEVBQUE3c0QsRUFBQTFGLE9BQUEwRixFQUFBLEdBQUFBLEVBQUEsR0FBQTFGLE9BQUEsVUFDRyxHQUFBdU8sSUFBQXFnRCxFQUNIekMsSUFDQUEsRUFpR0EsU0FBQXptRCxHQUlBLElBSEEsSUFDQThsRCxFQURBb0ksRUFBQSxFQUdBQSxFQUFBbHVELEVBQUExRixVQUFBd3JELEVBQUE5bEQsRUFBQWt1RCxRQUdBLEdBQUFwSSxFQUFBLENBQ0EsSUFBQWwrQyxLQUlBLE9BSEFqRCxFQUFBbWhELEVBQUEsU0FBQXZzRCxFQUFBOEksR0FDQXVGLEVBQUEvTyxLQUFBd0osS0FFQXVGLEdBN0dBdW1ELENBQUFudUQsR0FDQWd1RCxHQUFBLFFBRUcsR0FBQW5sRCxJQUFBMDlDLEVBQ0hFLElBQ0FBLEtBQ0F1SCxHQUFBLEVBQ0FycEQsRUFBQTNFLEVBQUEsU0FBQW91RCxFQUFBL3JELEdBQ0Fva0QsRUFBQTV0RCxLQUFBd0osV0FHRyxHQUFBd0csSUFBQXRDLEVBQUEsQ0FDSCxJQUFBNG1ELEVBQUExbUQsRUFBQXpHLEVBQUEsSUFDQTRtRCxFQUFBNTlDLEVBQUFta0QsTUFBQTd5RCxRQUFBLEVBYUEsT0FSQTB6RCxHQUNBcnBELEVBQUE4aEQsRUFBQSxTQUFBbi9DLEVBQUEvSCxHQUNBLFVBQUErb0IsRUFBQWhoQixLQUFBcE8sS0FBQW9PLEtBQ0EybUQsRUFBQTF1RCxNQU1Bb25ELGFBQ0FGLGlCQUFBcUcsRUFBQXJHLEdBQ0FHLHdCQUNBcUgseUJBN0ZBSSxDQUFBcnVELEVBQUE2SSxFQUFBd3dCLEVBQUFDLEVBQUFtdEIsR0FFQUMsRUFBQWlILEVBQUFyUCxRQUVBb0ksR0FBQTZHLElBQ0E3RyxFQThLQSxTQUFBM2dELEVBQUF3bkQsRUFBQXZ0RCxFQUFBNkksRUFBQXd3QixFQUFBMDBCLEdBQ0EsSUFBQTNtRCxFQUFBVCxFQUFBWixHQUNBdTRDLEtBR0FnUSxLQUNBQyxLQUNBbHBELEVBQUFVLEVBQUFGLFFBS0Eyb0QsRUFBQWowQixHQUFBLHVCQUNBazBCLEVBQUFsMEIsR0FBQSxnRkFJQSxHQUFBbnpCLEdBQUEsTUFBQXFuRCxFQUFBcDFELElBQUFnTSxHQUFBLENBQ0EsSUFBQWIsRUFBQXVCLEVBQUF2QixRQUNBaXBELEVBQUE1akQsRUFBQXJGLEdBQUFpcEQsV0FDQXByRCxFQUFBa3JELEVBQUF0K0MsSUFBQSxJQUFBb3FCLEVBQ0FxMUIsRUFBQWpCLEVBQUFwMEQsSUFBQWdKLElBQUFvckQsRUFBQW4wRCxJQUFBK0ksR0FDQXNzRCxlQUFBLEVBQ0FDLFlBQUEsSUFJQWpxRCxFQUFBeUMsRUFBQUMsYUFBQSxTQUFBYyxHQUVBLFNBQUFmLEVBQUFTLHNCQUFBLENBQ0EsSUFBQW1vQixFQUFBMCtCLEVBQUFFLGNBQ0F0USxFQUFBbjJDLEdBQUE2bkIsRUFPQXUrQixFQUFBMTFELEtBQUFtM0IsUUFHQSxHQUFBNW9CLEVBQUFpQixnQkFBQWhQLElBQUE4TyxHQUNBbTJDLEVBQUFuMkMsR0FBQSxFQUNBbW1ELEVBQUF6MUQsS0FBQSxPQUVBLENBQ0EsSUFBQW0zQixFQUFBMCtCLEVBQUFDLGlCQUNBclEsRUFBQW4yQyxHQUFBNm5CLEVBR0F1K0IsRUFBQTExRCxLQUFBbTNCLFdBTUEsU0FBQXcrQixFQUFBbjFELElBQUFnTSxHQUFBLENBSUEsSUFGQSxJQUFBd3BELEVBRUF4MEQsRUFBQSxFQUFxQkEsRUFBQSxTQUFBdzBELEVBQWtDeDBELElBQ3ZEK3lELEVBQUFwdEQsRUFBQTZJLEVBQUF3d0IsRUFBQTAwQixFQUFBdEgsaUJBQUFzSCxFQUFBcEgsV0FBQXRzRCxLQUNBdzBELEVBQUF4MEQsR0FJQSxTQUFBdzBELEVBQUEsQ0FDQXZRLEVBQUEva0QsTUFBQXMxRCxFQUNBLElBQUFDLEVBQUFmLEVBQUFFLHVCQUFBbitDLEtBQUFtRyxJQUFBNDRDLEVBQUEsS0FHQU4sRUFBQTExRCxLQUFBaTJELEdBQ0FSLEVBQUF6MUQsS0FBQWkyRCxJQVFBLE9BRkFSLEVBQUFoMEQsU0FBQWdrRCxFQUFBNzFDLFNBQUE2bEQsR0FDQUMsRUFBQWowRCxTQUFBZ2tELEVBQUExaUIsV0FBQTJ5QixHQUNBalEsRUE5UEF5USxDQUFBaHBELEVBQUF3bkQsRUFBQXZ0RCxFQUFBNkksRUFBQXd3QixFQUFBMDBCLElBR0Fsa0QsRUFBQTlELEdBQUFwQyxPQUFBLElBQUFpRCxHQUNBNUcsT0FDQXdtRCxjQUNBbnRCLGlCQUNBeHdCLGVBQ0E0OUMsaUJBQUFzSCxFQUFBdEgsaUJBQ0FFLFdBQUFvSCxFQUFBcEgsV0FDQUMsc0JBQUFtSCxFQUFBbkgsc0JBQ0FGLGtCQXVYQTdsRCxFQUFBaW1ELGFBckdBLFNBQUFuakQsRUFBQXVFLEdBQ0EsT0FBQWtsRCxFQUFBenBELEVBQUEzRCxLQUFBMkQsRUFBQWtGLGFBQUFsRixFQUFBMDFCLGVBQUExMUIsRUFBQThpRCxpQkFBQTlpRCxFQUFBZ2pELFdBQUF6K0MsMEVDcmJBckgsRUFBQTBGLHVCQVRBLFdBVUExRixFQUFBb29ELHlCQVRBLFlBVUFwb0QsRUFBQXFvRCwwQkFUQSxhQVVBcm9ELEVBQUEwbEQsNEJBVEEsZUFVQTFsRCxFQUFBd2xELHNCQVRBLFVBVUF4bEQsRUFBQXlsRCwwQkFSQSxhQVNBemxELEVBQUF1NEIsd0JBUkEsU0FTQXY0QixFQUFBZ3NELHFCQVJBLCtEQzNCQXYwRCxFQUFBLHdDQUVBMnJCLFFBRkEsSUFJQStxQyxFQUFBMTJELEVBQUEseUNBRUE2TCxFQUFBN0wsRUFBQSwyQ0FFQTIyRCxFQUFBMzJELEVBQUEsNENBRUEwN0IsRUFBQTE3QixFQUFBLDBDQUVBNDJELEVBQUE1MkQsRUFBQSw4Q0FFQTYyRCxFQUFBNzJELEVBQUEsZ0RBRUE4MkQsRUFBQTkyRCxFQUFBLDhDQUVBKzJELEVBQUEvMkQsRUFBQSw4Q0FFQStMLEVBQUEvTCxFQUFBLGtEQUVBZzNELEVBQUFoM0QsRUFBQSxxREFFQWkzRCxFQUFBajNELEVBQUEsNkRBRUFrM0QsRUFBQWwzRCxFQUFBLHFEQUVBMmdDLEVBQUEzZ0MsRUFBQSxpREFFQW0zRCxFQUFBbjNELEVBQUEsOENBRUE0Z0MsRUFBQTVnQyxFQUFBLGdEQUVBeVcsRUFBQXpXLEVBQUEsNENBRUF3VyxFQUFBeFcsRUFBQSw4Q0FFQXlTLEVBQUF6UyxFQUFBLDRDQUlBMnVCLEVBRkEzdUIsRUFBQSwrQ0FFQTJ1QixTQUVBeW9DLEVBQUFwM0QsRUFBQSxvREFFQXEzRCxFQUFBcjNELEVBQUEsNkNBRUFzM0QsRUFBQXQzRCxFQUFBLGlEQUVBdTNELEVBQUF2M0QsRUFBQSxrREFFQXczRCxFQUFBeDNELEVBQUEsNkNBRUF5M0QsRUFBQXozRCxFQUFBLDRDQUVBQSxFQUFBLG1EQW9CQSxJQUFBd3dELEVBQUEza0QsRUFBQTJrRCxPQUNBbmtELEVBQUFSLEVBQUFRLEtBQ0E4ekIsRUFBQXQwQixFQUFBczBCLFdBQ0FuUSxFQUFBbmtCLEVBQUFta0IsU0FDQTBuQyxFQUFBLzJCLEVBQUErMkIsZUFNQUMsRUFBQSxJQUVBQyxFQUFBLElBRUFDLEVBQUEsSUFLQTNxQyxHQUNBQyxXQUNBMnFDLE9BQUFILEVBQ0F2cUMsVUFYQSxLQWFBMnFDLFFBQ0FDLE9BQUFKLEVBQ0FLLE9BYkEsSUFjQUMsTUFBQUwsRUFDQU0sVUFiQSxJQWNBQyxNQVhBLE1BbUJBQyxFQUFBLHNCQUNBQyxFQUFBLGtCQUNBQyxFQUFBLGtCQUVBLFNBQUFDLEVBQUE5cUQsR0FDQSxnQkFBQStxRCxFQUFBNThCLEVBQUErakIsR0FFQTZZLE9BQUFDLGNBQ0E3QixFQUFBLzNELFVBQUE0TyxHQUFBMU8sS0FBQXlMLEtBQUFndUQsRUFBQTU4QixFQUFBK2pCLElBUUEsU0FBQStZLElBQ0E5QixFQUFBNzNELEtBQUF5TCxNQVdBLFNBQUFtdUQsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQUEsUUFFQSxpQkFBQUQsSUFDQUEsRUFBQUUsR0FBQUYsSUFPQXJ1RCxLQUFBckksR0FNQXFJLEtBQUFzUyxNQU1BdFMsS0FBQXd1RCxLQUFBSixFQUNBLElBTUFobUMsRUFBQXBvQixLQUFBbS9CLElBQUE4c0IsRUFBQTNqRCxLQUFBOGxELEdBQ0FLLFNBQUFILEVBQUFHLFVBUEEsU0FRQUMsaUJBQUFKLEVBQUFJLGlCQUNBampELE1BQUE2aUQsRUFBQTdpRCxNQUNBK0ksT0FBQTg1QyxFQUFBOTVDLFNBUUF4VSxLQUFBMnVELGtCQUFBenFDLEVBQUE5aUIsRUFBQTdCLEtBQUE2b0IsRUFBQXdtQyxNQUFBeG1DLEdBQUEsS0FDQWltQyxFQUFBanRELEVBQUF1ZixNQUFBMHRDLEtBQ0E3QixFQUFBNkIsR0FBQSxHQU1BcnVELEtBQUE2dUQsT0FBQVIsRUFNQXJ1RCxLQUFBOHVELGdCQU1BOXVELEtBQUErdUQsY0FNQS91RCxLQUFBZ3ZELG9CQU1BaHZELEtBQUFpdkQsa0JBTUFqdkQsS0FBQWt2RCxhQUFBLElBQUE1dEQsRUFNQSxJQUFBSSxFQUFBMUIsS0FBQTBtQixLQW93Q0EsU0FBQXlvQyxHQUNBLElBQUFDLEVBQUFELEVBQUFELGFBQ0EsT0FBQTl0RCxFQUFBcUYsT0FBQSxJQUFBNmxELEVBQUE2QyxJQUVBcHRELHFCQUFBWCxFQUFBN0IsS0FBQTZ2RCxFQUFBcnRELHFCQUFBcXRELEdBQ0FDLHNCQUFBLFNBQUEzaUQsR0FDQSxLQUFBQSxHQUFBLENBQ0EsSUFBQTRpRCxFQUFBNWlELEVBQUE2aUQsa0JBRUEsU0FBQUQsRUFDQSxPQUFBSCxFQUFBdnFDLE9BQUFoQyxhQUFBMHNDLEVBQUF6c0QsU0FBQXlzRCxFQUFBdjBDLE9BR0FyTyxJQUFBdlIsV0FqeENBcTBELENBQUF4dkQsTUFFQSxTQUFBeXZELEVBQUFqMEQsRUFBQUMsR0FDQSxPQUFBRCxFQUFBazBELE9BQUFqMEQsRUFBQWkwRCxPQUdBdkQsRUFBQXdELEdBQUFGLEdBQ0F0RCxFQUFBeUQsR0FBQUgsR0FLQXp2RCxLQUFBNnZELFdBQUEsSUFBQS9DLEVBQUE5c0QsS0FBQTBCLEVBQUFrdUQsR0FBQUQsSUFDQXZELEVBQUE3M0QsS0FBQXlMLE1BTUFBLEtBQUE4dkQsZUFBQSxJQUFBNUIsRUFFQWx1RCxLQUFBK3ZELGNBR0EvdkQsS0FBQWd3RCxPQUFBNXVELEVBQUE3QixLQUFBUyxLQUFBZ3dELE9BQUFod0QsTUFFQUEsS0FBQWl3RCxtQkFDQTduQyxFQUFBakYsVUFBQTNVLEdBQUEsUUFBQXhPLEtBQUFrd0QsU0FBQWx3RCxNQXc1QkEsU0FBQW9vQixFQUFBK25DLEdBQ0EvbkMsRUFBQTVaLEdBQUEsc0JBQ0EyaEQsRUFBQXp1QixRQUFBLGFBUUF0WixFQUFBakYsVUFBQWl0QyxjQUFBRCxFQUFBdEMsSUFBQXNDLEVBQUFOLFdBQUFRLFlBQUFGLEVBQUFGLGdCQUFBMTRELFFBQ0E0NEQsRUFBQXp1QixRQUFBLGNBbDZCQTR1QixDQUFBbG9DLEVBQUFwb0IsTUFFQW9CLEVBQUFtdkQsZUFBQXZ3RCxNQTVIQWt1RCxFQUFBNzVELFVBQUFtYSxHQUFBdS9DLEVBQUEsTUFDQUcsRUFBQTc1RCxVQUFBNGIsSUFBQTg5QyxFQUFBLE9BQ0FHLEVBQUE3NUQsVUFBQW04RCxJQUFBekMsRUFBQSxPQUNBM3NELEVBQUEwSyxNQUFBb2lELEVBQUE5QixHQTRIQSxJQUFBcUUsRUFBQXRDLEVBQUE5NUQsVUFxV0EsU0FBQXE4RCxFQUFBbDBCLEVBQUE3TixFQUFBbjRCLEdBQ0EsSUFJQXVELEVBSkEwSCxFQUFBekIsS0FBQTRrQixPQUVBK3JDLEVBQUEzd0QsS0FBQWt2RCxhQUFBbnRELHVCQUdBNHNCLEVBQUEzbUIsRUFBQTRvRCxZQUFBbnZELEVBQUFrdEIsR0FFQSxRQUFBcjNCLEVBQUEsRUFBaUJBLEVBQUFxNUQsRUFBQXA1RCxPQUF5QkQsSUFBQSxDQUMxQyxJQUFBd0ssRUFBQTZ1RCxFQUFBcjVELEdBRUEsR0FBQXdLLEVBQUEwNkIsSUFBQSxPQUFBemlDLEVBQUErSCxFQUFBMDZCLEdBQUEvNkIsRUFBQWt0QixFQUFBbjRCLElBQ0EsT0FBQXVELEdBL1dBMDJELEVBQUFQLFNBQUEsV0FDQSxJQUFBbHdELEtBQUE2d0QsVUFBQSxDQUlBLElBQUFDLEVBQUE5d0QsS0FBQTZ2RCxXQUVBLEdBQUE3dkQsS0FBQTZ0RCxHQUFBLENBQ0EsSUFBQXYwQyxFQUFBdFosS0FBQTZ0RCxHQUFBdjBDLE9BQ0F0WixLQUFBNHRELElBQUEsRUFDQW1ELEVBQUEvd0QsTUFDQWd4RCxFQUFBcDRELE9BQUFyRSxLQUFBeUwsTUFDQUEsS0FBQTR0RCxJQUFBLEVBQ0E1dEQsS0FBQTZ0RCxJQUFBLEVBQ0FvRCxFQUFBMThELEtBQUF5TCxLQUFBc1osR0FDQTQzQyxFQUFBMzhELEtBQUF5TCxLQUFBc1osUUFFQSxHQUFBdzNDLEVBQUFULFdBQUEsQ0FFQSxJQUFBYyxFQXBNQSxFQXFNQTF2RCxFQUFBekIsS0FBQTRrQixPQUNBbGpCLEVBQUExQixLQUFBMG1CLEtBQ0FvcUMsRUFBQVQsWUFBQSxFQUVBLEdBQ0EsSUFBQWUsR0FBQSxJQUFBQyxLQUNBUCxFQUFBUSxtQkFBQTd2RCxHQUVBcXZELEVBQUFTLDBCQUFBOXZELEdBQ0ErdkQsRUFBQXh4RCxLQUFBeUIsR0FPQXF2RCxFQUFBVyxtQkFBQWh3RCxHQUNBaXdELEdBQUExeEQsVUFBQTRrQixPQUFBbGpCLEVBQUEsVUFDQXl2RCxJQUFBLElBQUFFLEtBQUFELFFBQ09ELEVBQUEsR0FBQUwsRUFBQVQsWUFHUFMsRUFBQVQsWUFDQXJ3RCxLQUFBbS9CLElBQUF5dkIsV0FXQTZCLEVBQUFudUIsT0FBQSxXQUNBLE9BQUF0aUMsS0FBQXd1RCxNQU9BaUMsRUFBQTlyQyxNQUFBLFdBQ0EsT0FBQTNrQixLQUFBbS9CLEtBa0JBc3hCLEVBQUFrQixVQUFBLFNBQUFwcEQsRUFBQXFwRCxFQUFBQyxHQUNBLElBQUF2NEMsRUFVQSxHQVJBaU0sRUFBQXFzQyxLQUNBQyxFQUFBRCxFQUFBQyxXQUNBdjRDLEVBQUFzNEMsRUFBQXQ0QyxPQUNBczRDLGNBR0E1eEQsS0FBQTR0RCxJQUFBLEdBRUE1dEQsS0FBQTRrQixRQUFBZ3RDLEVBQUEsQ0FDQSxJQUFBRSxFQUFBLElBQUF2RixFQUFBdnNELEtBQUEwbUIsTUFDQTJuQyxFQUFBcnVELEtBQUE2dUQsT0FDQXB0RCxFQUFBekIsS0FBQTRrQixPQUFBLElBQUF5bkMsRUFBQSxVQUFBZ0MsRUFBQXlELEdBQ0Fyd0QsRUFBQXF2RCxVQUFBOXdELEtBQUE2dkQsV0FDQXB1RCxFQUFBNkcsS0FBQSxVQUFBK2xELEVBQUF5RCxHQUdBOXhELEtBQUE0a0IsT0FBQStzQyxVQUFBcHBELEVBQUF3cEQsSUFFQUYsR0FDQTd4RCxLQUFBNnRELElBQ0F2MEMsVUFFQXRaLEtBQUE0dEQsSUFBQSxJQUVBbUQsRUFBQS93RCxNQUNBZ3hELEVBQUFwNEQsT0FBQXJFLEtBQUF5TCxNQUdBQSxLQUFBbS9CLElBQUF5dkIsUUFFQTV1RCxLQUFBNnRELElBQUEsRUFDQTd0RCxLQUFBNHRELElBQUEsRUFDQXFELEVBQUExOEQsS0FBQXlMLEtBQUFzWixHQUNBNDNDLEVBQUEzOEQsS0FBQXlMLEtBQUFzWixLQVFBbTNDLEVBQUF1QixTQUFBLFdBQ0FoOEQsUUFBQWk4RCxJQUFBLG9EQU9BeEIsRUFBQTlnRCxTQUFBLFdBQ0EsT0FBQTNQLEtBQUE0a0IsUUFPQTZyQyxFQUFBeUIsVUFBQSxXQUNBLE9BQUFseUQsS0FBQTRrQixRQUFBNWtCLEtBQUE0a0IsT0FBQXN0QyxhQU9BekIsRUFBQXQ5QyxTQUFBLFdBQ0EsT0FBQW5ULEtBQUFtL0IsSUFBQWhzQixZQU9BczlDLEVBQUFyOUMsVUFBQSxXQUNBLE9BQUFwVCxLQUFBbS9CLElBQUEvckIsYUFPQXE5QyxFQUFBMEIsb0JBQUEsV0FDQSxPQUFBbnlELEtBQUFtL0IsSUFBQStCLFFBQUFreEIsS0FBQXQrRCxPQUFBNDZELGtCQUFBLEdBVUErQixFQUFBNEIsa0JBQUEsU0FBQS9ELEdBQ0EsR0FBQXI5QixFQUFBeU4sZ0JBY0EsT0FWQTR2QixTQUNBZ0UsV0FBQWhFLEVBQUFnRSxZQUFBLEVBQ0FoRSxFQUFBNXFDLGdCQUFBNHFDLEVBQUE1cUMsaUJBQUExakIsS0FBQTRrQixPQUFBdHVCLElBQUEsbUJBQ0EwSixLQUFBbS9CLElBT0ErQixRQUFBbXhCLGtCQUFBL0QsSUFRQW1DLEVBQUE4QixjQUFBLFdBQ0EsR0FBQXRoQyxFQUFBdWhDLGFBQUEsQ0FJQSxJQUFBcHFDLEVBQUFwb0IsS0FBQW0vQixJQUNBci9CLEVBQUFzb0IsRUFBQWdVLFFBQUFDLGlCQUtBLE9BSEFqN0IsRUFBQVEsS0FBQTlCLEVBQUEsU0FBQTRNLEdBQ0FBLEVBQUFxRCxlQUFBLEtBRUFxWSxFQUFBOFksUUFBQXV4QixrQkFZQWhDLEVBQUFpQyxXQUFBLFNBQUFwRSxHQUVBLElBQUFxRSxHQURBckUsU0FDQXFFLGtCQUNBbHhELEVBQUF6QixLQUFBNGtCLE9BQ0FndUMsS0FDQW56QixFQUFBei9CLEtBQ0E0QixFQUFBK3dELEVBQUEsU0FBQTU1QyxHQUNBdFgsRUFBQW1CLGVBQ0FDLFNBQUFrVyxHQUNLLFNBQUE4NUMsR0FDTCxJQUFBQyxFQUFBcnpCLEVBQUF3dkIsZUFBQTRELEVBQUFFLFVBRUFELEVBQUF4Z0QsTUFBQXBFLFNBQ0Ewa0QsRUFBQTk4RCxLQUFBZzlELEdBQ0FBLEVBQUF4Z0QsTUFBQXBFLFFBQUEsT0FJQSxJQUFBak4sRUFBQSxRQUFBakIsS0FBQW0vQixJQUFBK0IsUUFBQTh4QixVQUFBaHpELEtBQUF1eUQsZ0JBQUF2eUQsS0FBQXF5RCxrQkFBQS9ELEdBQUEyRSxVQUFBLFVBQUEzRSxLQUFBdHpELE1BQUEsUUFJQSxPQUhBNEcsRUFBQWd4RCxFQUFBLFNBQUFFLEdBQ0FBLEVBQUF4Z0QsTUFBQXBFLFFBQUEsSUFFQWpOLEdBV0F3dkQsRUFBQXlDLG9CQUFBLFNBQUE1RSxHQUNBLEdBQUFyOUIsRUFBQXlOLGdCQUFBLENBSUEsSUFBQXkwQixFQUFBbnpELEtBQUFzUyxNQUNBOGdELEVBQUFybUQsS0FBQXNLLElBQ0FnOEMsRUFBQXRtRCxLQUFBbUcsSUFHQSxHQUFBb2dELEdBQUFILEdBQUEsQ0FDQSxJQUFBOTVCLEVBSEF3UyxJQUlBdlMsRUFKQXVTLElBS0FnRyxHQUxBaEcsSUFNQWlHLEdBTkFqRyxJQU9BMG5CLEtBQ0FuQixFQUFBOUQsS0FBQWdFLFlBQUEsRUFDQWx4RCxFQUFBUSxLQUFBNHhELEdBQUEsU0FBQUMsRUFBQTk3RCxHQUNBLEdBQUE4N0QsRUFBQW5oRCxRQUFBNmdELEVBQUEsQ0FDQSxJQUFBTyxFQUFBRCxFQUFBcEIsa0JBQUFqeEQsRUFBQXVmLE1BQUEydEMsSUFDQXFGLEVBQUFGLEVBQUFueEIsU0FBQXN4Qix3QkFDQXY2QixFQUFBKzVCLEVBQUFPLEVBQUF0NkIsUUFDQUMsRUFBQTg1QixFQUFBTyxFQUFBcjZCLE9BQ0F1WSxFQUFBd2hCLEVBQUFNLEVBQUE5aEIsU0FDQUMsRUFBQXVoQixFQUFBTSxFQUFBN2hCLFVBQ0F5aEIsRUFBQXo5RCxNQUNBczRELElBQUFzRixFQUNBcjZCLEtBQUFzNkIsRUFBQXQ2QixLQUNBQyxJQUFBcTZCLEVBQUFyNkIsU0FRQSxJQUFBN3RCLEdBRkFvbUMsR0FBQXVnQixJQUZBLzRCLEdBQUErNEIsR0FLQTU5QyxHQUZBczlCLEdBQUFzZ0IsSUFGQTk0QixHQUFBODRCLEdBS0F5QixFQUFBenlELEVBQUEweUQsZUFDQUQsRUFBQXBvRCxRQUNBb29ELEVBQUFyL0MsU0FDQSxJQUFBNFQsRUFBQTZqQyxFQUFBM2pELEtBQUF1ckQsR0FZQSxPQVhBanlELEVBQUEyeEQsRUFBQSxTQUFBNzNELEdBQ0EsSUFBQXE0RCxFQUFBLElBQUFob0QsRUFBQWlvRCxPQUNBcmpELE9BQ0FGLEVBQUEvVSxFQUFBMjlCLEtBQUErNEIsRUFBQS80QixFQUNBM29CLEVBQUFoVixFQUFBNDlCLElBQUE4NEIsRUFBQTk0QixFQUNBMjZCLE1BQUF2NEQsRUFBQTB5RCxPQUdBaG1DLEVBQUE5WixJQUFBeWxELEtBRUEzckMsRUFBQThyQyxxQkFDQUwsRUFBQVosVUFBQSxVQUFBM0UsS0FBQXR6RCxNQUFBLFFBRUEsT0FBQWdGLEtBQUEweUQsV0FBQXBFLEtBdUJBbUMsRUFBQTBELGVBQUEveUQsRUFBQXlHLE1BQUE2b0QsRUFBQSxrQkFvQkFELEVBQUEyRCxpQkFBQWh6RCxFQUFBeUcsTUFBQTZvRCxFQUFBLG9CQXFDQUQsRUFBQTRELGFBQUEsU0FBQTFsQyxFQUFBbjRCLEdBQ0EsSUFDQXVELEVBREEwSCxFQUFBekIsS0FBQTRrQixPQWtCQSxPQWhCQStKLEVBQUEzbUIsRUFBQTRvRCxZQUFBbnZELEVBQUFrdEIsR0FDQXZ0QixFQUFBUSxLQUFBK3NCLEVBQUEsU0FBQTJsQyxFQUFBaDFELEdBQ0FBLEVBQUF6SixRQUFBLGNBQUF1TCxFQUFBUSxLQUFBMHlELEVBQUEsU0FBQXRwQyxHQUNBLElBQUFscEIsRUFBQWtwQixFQUFBNEYsaUJBRUEsR0FBQTl1QixLQUFBOFIsYUFDQTdaLEtBQUErSCxFQUFBOFIsYUFBQXBkLFFBQ08sb0JBQUE4SSxFQUFBLENBQ1AsSUFBQXd6RCxFQUFBOXlELEtBQUErdUQsV0FBQS9qQyxFQUFBK25DLFVBRUFELEtBQUFsL0MsZUFDQTdaLEdBQUErNEQsRUFBQWwvQyxhQUFBcGQsRUFBQXcwQixNQUdLaHJCLE9BQ0ZBLFFBQ0hqRyxHQW1CQTAyRCxFQUFBejFCLFVBQUEsU0FBQXJNLEVBQUE0bEMsR0FDQSxJQUFBOXlELEVBQUF6QixLQUFBNGtCLE9BS0EzbkIsR0FKQTB4QixFQUFBM21CLEVBQUE0b0QsWUFBQW52RCxFQUFBa3RCLEdBQ0E2bEMsZ0JBQUEsWUFFQXh4RCxZQUNBRyxVQUNBbXFCLEVBQUFxQixFQUFBcjZCLGVBQUEsbUJBQUFxNkIsRUFBQXJCLGdCQUFBcUIsRUFBQXI2QixlQUFBLGFBQUEySSxFQUFBeWhELGdCQUFBL3ZCLEVBQUF6ckIsV0FBQSxLQUNBLGFBQUFvcUIsRUFBQXJ3QixFQUFBcVMsY0FBQWdlLEVBQUFpbkMsR0FBQXQzRCxFQUFBKzlCLFVBQUF1NUIsSUFTQTlELEVBQUFnRSx3QkFBQSxTQUFBMzlCLEdBQ0EsT0FBQTkyQixLQUFBaXZELGVBQUFuNEIsRUFBQWk4QixXQVNBdEMsRUFBQWlFLHFCQUFBLFNBQUExeEQsR0FDQSxPQUFBaEQsS0FBQSt1RCxXQUFBL3JELEVBQUErdkQsV0FHQSxJQUFBL0IsR0FDQTJELGlCQUFBLFNBQUFqeUQsR0FDQXF1RCxFQUFBL3dELE1BQ0FneEQsRUFBQXA0RCxPQUFBckUsS0FBQXlMLEtBQUEwQyxJQU9BOUosT0FBQSxTQUFBOEosR0FFQSxJQUFBakIsRUFBQXpCLEtBQUE0a0IsT0FDQWxqQixFQUFBMUIsS0FBQTBtQixLQUNBMEIsRUFBQXBvQixLQUFBbS9CLElBQ0Fpd0IsRUFBQXB2RCxLQUFBa3ZELGFBQ0E0QixFQUFBOXdELEtBQUE2dkQsV0FFQSxHQUFBcHVELEVBQUEsQ0FJQXF2RCxFQUFBOEQsWUFBQW56RCxFQUFBaUIsR0FDQW91RCxFQUFBUSxtQkFBQTd2RCxHQU1BMnRELEVBQUEvdkQsT0FBQW9DLEVBQUFDLEdBQ0FvdkQsRUFBQVMsMEJBQUE5dkQsRUFBQWlCLEdBSUE4dUQsRUFBQXh4RCxLQUFBeUIsR0FLQTJ0RCxFQUFBeDJELE9BQUE2SSxFQUFBQyxHQUNBbXpELEVBQUFwekQsR0FDQXF2RCxFQUFBVyxtQkFBQWh3RCxFQUFBaUIsR0FDQXlQLEdBQUFuUyxLQUFBeUIsRUFBQUMsRUFBQWdCLEdBRUEsSUFBQWdoQixFQUFBamlCLEVBQUFuTCxJQUFBLGtDQUVBLEdBQUEyNkIsRUFBQXlOLGdCQVFBdFcsRUFBQTBzQyxtQkFBQXB4QyxPQVJBLENBQ0EsSUFBQXF4QyxFQUFBN0ksRUFBQXB6RCxNQUFBNHFCLEdBQ0FBLEVBQUF3b0MsRUFBQTFyRCxVQUFBdTBELEVBQUEsT0FFQSxJQUFBQSxFQUFBLEtBQ0FyeEMsRUFBQSxlQU1Bc3hDLEdBQUF2ekQsRUFBQUMsS0FPQThYLGdCQUFBLFNBQUE5VyxHQUNBLElBQUFqQixFQUFBekIsS0FBQTRrQixPQUNBdXJDLEVBQUFud0QsS0FDQTBCLEVBQUExQixLQUFBMG1CLEtBRUEsR0FBQWpsQixFQUFBLENBS0EsSUFBQXd6RCxLQUNBeHpELEVBQUFtQixjQUFBLFNBQUFtVyxFQUFBK2QsR0FDQSxJQUFBbytCLEVBQUEvRSxFQUFBc0Usd0JBQUEzOUIsR0FFQSxHQUFBbytCLEtBQUFDLFFBQ0EsR0FBQUQsRUFBQTE3QyxnQkFBQSxDQUNBLElBQUF6ZixFQUFBbTdELEVBQUExN0MsZ0JBQUFzZCxFQUFBcjFCLEVBQUFDLEVBQUFnQixHQUNBM0ksS0FBQW5CLFFBQUFxOEQsRUFBQW4vRCxLQUFBby9ELFFBRUFELEVBQUFuL0QsS0FBQW8vRCxLQUlBLElBQUFFLEVBQUFoMEQsRUFBQW8yQixnQkFDQS8xQixFQUFBNHlCLFdBQUEsU0FBQXJ4QixHQUNBLElBQUFxeUQsRUFBQWxGLEVBQUFwQixXQUFBL3JELEVBQUErdkQsVUFFQSxHQUFBc0MsRUFBQTc3QyxnQkFBQSxDQUNBLElBQUF6ZixFQUFBczdELEVBQUE3N0MsZ0JBQUF4VyxFQUFBdkIsRUFBQUMsRUFBQWdCLEdBQ0EzSSxLQUFBbkIsUUFBQXc4RCxFQUFBNytELElBQUF5TSxFQUFBa0osSUFBQSxRQUVBa3BELEVBQUE3K0QsSUFBQXlNLEVBQUFrSixJQUFBLEtBR0Eyb0QsRUFBQXB6RCxHQUdBekIsS0FBQTZ2RCxXQUFBNEIsbUJBQUFod0QsRUFBQWlCLEdBQ0E0eUQsVUFBQSxFQUNBQyxTQUFBSCxJQUtBMUQsR0FBQXZCLEVBQUExdUQsRUFBQUMsRUFBQWdCLEVBQUEweUQsR0FDQUosR0FBQXZ6RCxFQUFBekIsS0FBQTBtQixRQU9BOHVDLFdBQUEsU0FBQTl5RCxHQUNBLElBQUFqQixFQUFBekIsS0FBQTRrQixPQUVBbmpCLElBSUF1SyxFQUFBeXBELGlCQUFBL3lELEVBQUEsY0FDQW15RCxFQUFBcHpELEdBRUF6QixLQUFBNnZELFdBQUE0QixtQkFBQWh3RCxFQUFBaUIsR0FDQTR5RCxVQUFBLElBR0FuakQsR0FBQW5TLFVBQUE0a0IsT0FBQTVrQixLQUFBMG1CLEtBQUFoa0IsR0FDQXN5RCxHQUFBdnpELEVBQUF6QixLQUFBMG1CLFFBT0FndkMsYUFBQSxTQUFBaHpELEdBQ0FzdUQsRUFBQXA0RCxPQUFBckUsS0FBQXlMLEtBQUEwQyxJQWlCQWl6RCxhQUFBLFNBQUFqekQsR0FDQXN1RCxFQUFBcDRELE9BQUFyRSxLQUFBeUwsS0FBQTBDLEtBY0EsU0FBQXF1RCxFQUFBWixHQUNBLElBQUExdUQsRUFBQTB1RCxFQUFBdnJDLE9BQ0Frc0MsRUFBQVgsRUFBQU4sV0FDQWlCLEVBQUE4RSxpQkFBQW4wRCxHQUNBcXZELEVBQUErRSxvQkFDQUMsRUFBQTNGLEVBQUEsWUFBQTF1RCxFQUFBcXZELEdBQ0FnRixFQUFBM0YsRUFBQSxRQUFBMXVELEVBQUFxdkQsR0FDQUEsRUFBQWlGLE9BT0EsU0FBQUMsRUFBQTdGLEVBQUFsdEQsRUFBQVAsRUFBQUcsRUFBQUMsR0FDQSxJQUFBckIsRUFBQTB1RCxFQUFBdnJDLE9BRUEsR0FBQS9oQixFQUFBLENBUUEsSUFBQUUsS0FDQUEsRUFBQUYsRUFBQSxNQUFBSCxFQUFBRyxFQUFBLE1BQ0FFLEVBQUFGLEVBQUEsU0FBQUgsRUFBQUcsRUFBQSxTQUNBRSxFQUFBRixFQUFBLFFBQUFILEVBQUFHLEVBQUEsUUFDQSxJQUFBb3pELEdBQ0FwekQsV0FDQUUsU0FFQUQsSUFBQW16RCxFQUFBbnpELFdBRUEsSUFBQWc0QixFQUFBcDRCLEVBQUFvNEIsZ0JBRUEsTUFBQUEsSUFDQUEsRUFBQTE1QixFQUFBbzJCLGNBQUF4dkIsRUFBQTg3QyxpQkFBQWhwQixLQUlBcjVCLEtBQUFtQixjQUFBcXpELEVBQUEsU0FBQWpyQyxHQUNBOFAsR0FBQSxNQUFBQSxFQUFBeGtDLElBQUEwMEIsRUFBQXJ6QixLQUNBdStELEVBQUEvRixFQUFBLFdBQUF0dEQsRUFBQSwrQkFBQW1vQixFQUFBK25DLFlBRUc1QyxRQXpCSHZ1RCxFQUFBdXVELEVBQUFuQixpQkFBQTN6RCxPQUFBODBELEVBQUFyQixjQUFBb0gsR0EyQkEsU0FBQUEsRUFBQXBELEdBQ0FBLEtBQUFxQyxTQUFBckMsRUFBQTd2RCxJQUFBNnZELEVBQUE3dkQsR0FBQTZ2RCxFQUFBcUQsUUFBQTEwRCxFQUFBMHVELEVBQUF6cEMsS0FBQWhrQixJQWlDQSxTQUFBOHVELEVBQUFyQixFQUFBMXVELEdBQ0EsSUFBQTIwRCxFQUFBakcsRUFBQXBCLFdBQ0ErQixFQUFBWCxFQUFBTixXQUNBcHVELEVBQUE0eUIsV0FBQSxTQUFBcnhCLEdBQ0E4dEQsRUFBQVUsa0JBQUF4dUQsRUFBQW96RCxFQUFBcHpELEVBQUErdkQsYUFzR0EsU0FBQXNELEVBQUEzekQsRUFBQTRXLEdBQ0EsSUFBQWc5QyxFQUFBNXpELEVBQUExSCxLQUNBaTFCLEVBQUF2dEIsRUFBQXV0QixjQUNBc21DLEVBQUFDLEdBQUFGLEdBQ0E5ekQsRUFBQSt6RCxFQUFBL3pELFdBQ0FpMEQsR0FBQWowRCxFQUFBNUosUUFBQSxVQUFBODlELE1BQUEsS0FDQUMsRUFBQUYsRUFBQTU3RCxNQUNBNDdELEVBQUEsTUFBQUEsRUFBQSxJQUFBeEosRUFBQXdKLEVBQUEsSUFDQXoyRCxLQUFBNHRELElBQUEsRUFDQSxJQUFBZ0osR0FBQWwwRCxHQUNBbTBELEdBQUEsRUFFQW4wRCxFQUFBOHRCLFFBQ0FxbUMsR0FBQSxFQUNBRCxFQUFBeDFELEVBQUExRyxJQUFBZ0ksRUFBQTh0QixNQUFBLFNBQUE5MEIsR0FHQSxPQUZBQSxFQUFBMEYsRUFBQW9PLFNBQUFwTyxFQUFBcUYsVUFBNkMvSyxHQUFBZ0gsSUFDN0M4dEIsTUFBQSxLQUNBOTBCLEtBSUEsSUFDQW83RCxFQURBQyxLQUVBQyxFQUFBLGNBQUFWLEdBQUEsYUFBQUEsRUFDQTEwRCxFQUFBZzFELEVBQUEsU0FBQXZtQyxJQUlBeW1DLEdBRkFBLEVBQUFQLEVBQUFVLE9BQUE1bUMsRUFBQXJ3QixLQUFBNGtCLE9BQUE1a0IsS0FBQTBtQixRQUVBdGxCLEVBQUFxRixVQUEyQzRwQixJQUUzQ3IxQixLQUFBd0gsRUFBQWtGLE9BQUFvdkQsRUFBQTk3RCxLQUNBKzdELEVBQUFqaEUsS0FBQWdoRSxHQUVBRSxFQUVBaEIsRUFBQWgyRCxLQUFBMjJELEVBQUF0bUMsRUFBQSxVQUNLb21DLEdBQ0xULEVBQUFoMkQsS0FBQTIyRCxFQUFBdG1DLEVBQUFvbUMsRUFBQVMsS0FBQVQsRUFBQVUsTUFFR24zRCxNQUVILFNBQUEyMkQsR0FBQUssR0FBQVAsSUFFQXoyRCxLQUFBNnRELElBRUFrRCxFQUFBL3dELE1BQ0FneEQsRUFBQXA0RCxPQUFBckUsS0FBQXlMLEtBQUEwQyxHQUNBMUMsS0FBQTZ0RCxJQUFBLEdBRUFtRCxFQUFBMkYsR0FBQXBpRSxLQUFBeUwsS0FBQTBDLElBTUFvMEQsRUFEQUQsR0FFQTc3RCxLQUFBd0gsRUFBQWtGLE9BQUE0dUQsRUFDQXJtQyxnQkFDQU8sTUFBQXVtQyxHQUdBQSxFQUFBLEdBR0EvMkQsS0FBQTR0RCxJQUFBLEdBQ0F0MEMsR0FBQXRaLEtBQUE4dkQsZUFBQXB1QixRQUFBbzFCLEVBQUE5N0QsS0FBQTg3RCxHQUdBLFNBQUE3RixFQUFBMzNDLEdBR0EsSUFGQSxJQUFBODlDLEVBQUFwM0QsS0FBQWl3RCxnQkFFQW1ILEVBQUE3L0QsUUFBQSxDQUNBLElBQUFtTCxFQUFBMDBELEVBQUE1dEIsUUFDQTZzQixFQUFBOWhFLEtBQUF5TCxLQUFBMEMsRUFBQTRXLElBSUEsU0FBQTQzQyxFQUFBNTNDLElBQ0FBLEdBQUF0WixLQUFBMGhDLFFBQUEsV0FtRUEsU0FBQW8wQixFQUFBM0YsRUFBQW4xRCxFQUFBeUcsRUFBQXF2RCxHQU9BLElBTkEsSUFBQXVHLEVBQUEsY0FBQXI4RCxFQUNBczhELEVBQUFELEVBQUFsSCxFQUFBbkIsaUJBQUFtQixFQUFBckIsYUFDQXlJLEVBQUFGLEVBQUFsSCxFQUFBbEIsZUFBQWtCLEVBQUFwQixXQUNBM21DLEVBQUErbkMsRUFBQWh4QixJQUNBejlCLEVBQUF5dUQsRUFBQXpwQyxLQUVBcHZCLEVBQUEsRUFBaUJBLEVBQUFnZ0UsRUFBQS8vRCxPQUFxQkQsSUFDdENnZ0UsRUFBQWhnRSxHQUFBNjlELFNBQUEsRUFPQSxTQUFBcUMsRUFBQXhzQyxHQUVBLElBQUF5c0MsRUFBQSxPQUFBenNDLEVBQUFyekIsR0FBQSxJQUFBcXpCLEVBQUFod0IsS0FDQTgzRCxFQUFBeUUsRUFBQUUsR0FFQSxJQUFBM0UsRUFBQSxDQUNBLElBQUE0RSxFQUFBekssRUFBQWppQyxFQUFBaHdCLE9BRUE4M0QsRUFBQSxJQURBdUUsRUFBQWxoQyxFQUFBc1gsU0FBQWlxQixFQUFBUixLQUFBUSxFQUFBUCxLQUFBbnJELEVBQUF5aEMsU0FBQWlxQixFQUFBUCxPQUVBN3VELEtBQUE3RyxFQUFBQyxHQUNBNjFELEVBQUFFLEdBQUEzRSxFQUNBd0UsRUFBQXhoRSxLQUFBZzlELEdBQ0ExcUMsRUFBQTlaLElBQUF3a0QsRUFBQXhnRCxPQUdBMFksRUFBQStuQyxTQUFBRCxFQUFBNkUsS0FBQUYsRUFDQTNFLEVBQUFxQyxTQUFBLEVBQ0FyQyxFQUFBcUQsUUFBQW5yQyxFQUNBOG5DLEVBQUF4Z0QsTUFBQWk5QyxtQkFDQTFzRCxTQUFBbW9CLEVBQUFub0IsU0FDQWtZLE1BQUFpUSxFQUFBaFMsaUJBRUFxK0MsR0FBQXZHLEVBQUFnRixZQUFBaEQsRUFBQTluQyxFQUFBdnBCLEVBQUFDLEdBMUJBMjFELEVBQUE1MUQsRUFBQW1CLGNBQUEsU0FBQW1XLEVBQUFpUyxHQUNBLFdBQUFqUyxHQUFBeStDLEVBQUF4c0MsS0FDR3ZwQixFQUFBNHlCLFdBQUFtakMsR0EyQkgsSUFBQWxnRSxFQUFBLEVBQWlCQSxFQUFBZ2dFLEVBQUEvL0QsUUFBcUIsQ0FDdEMsSUFBQXU3RCxFQUFBd0UsRUFBQWhnRSxHQUVBdzdELEVBQUFxQyxRQVFBNzlELE1BUEErL0QsR0FBQXZFLEVBQUE4RSxXQUFBeDVELFVBQ0FncUIsRUFBQXBWLE9BQUE4L0MsRUFBQXhnRCxPQUNBd2dELEVBQUExMEQsUUFBQXFELEVBQUFDLEdBQ0E0MUQsRUFBQWo2RCxPQUFBL0YsRUFBQSxVQUNBaWdFLEVBQUF6RSxFQUFBNkUsTUFDQTdFLEVBQUE2RSxLQUFBN0UsRUFBQXhnRCxNQUFBaTlDLGtCQUFBLE9BNkJBLFNBQUFzRixFQUFBcHpELEdBQ0FBLEVBQUFvekQsb0JBQ0FwekQsRUFBQTR5QixXQUFBLFNBQUFyeEIsR0FDQUEsRUFBQTZ4RCxzQkFJQSxTQUFBMWlELEdBQUFnK0MsRUFBQTF1RCxFQUFBQyxFQUFBZ0IsSUFjQSxTQUFBeXRELEVBQUExdUQsRUFBQUMsRUFBQWdCLEVBQUFtMUQsR0FDQWoyRCxFQUFBaTJELEdBQUExSCxFQUFBbkIsaUJBQUEsU0FBQWtHLEdBQ0EsSUFBQXArQixFQUFBbytCLEVBQUFpQixRQUNBakIsRUFBQS9pRCxPQUFBMmtCLEVBQUFyMUIsRUFBQUMsRUFBQWdCLEdBQ0FvMUQsR0FBQWhoQyxFQUFBbytCLEtBakJBNkMsQ0FBQTVILEVBQUExdUQsRUFBQUMsRUFBQWdCLEdBQ0FkLEVBQUF1dUQsRUFBQXJCLGFBQUEsU0FBQTJFLEdBQ0FBLEVBQUEwQixTQUFBLElBRUF6RCxHQUFBdkIsRUFBQTF1RCxFQUFBQyxFQUFBZ0IsR0FFQWQsRUFBQXV1RCxFQUFBckIsYUFBQSxTQUFBMkUsR0FDQUEsRUFBQTBCLFNBQ0ExQixFQUFBemdELE9BQUF2UixFQUFBQyxLQWtCQSxTQUFBZ3dELEdBQUF2QixFQUFBMXVELEVBQUFDLEVBQUFnQixFQUFBNnlELEdBRUEsSUFDQWxGLEVBREFTLEVBQUFYLEVBQUFOLFdBRUFwdUQsRUFBQTR5QixXQUFBLFNBQUFyeEIsR0FDQSxJQUFBcXlELEVBQUFsRixFQUFBcEIsV0FBQS9yRCxFQUFBK3ZELFVBQ0FzQyxFQUFBRixTQUFBLEVBQ0EsSUFBQXlDLEVBQUF2QyxFQUFBdUMsV0FDQTlHLEVBQUFrSCxjQUFBSixFQUFBbDFELEdBRUE2eUQsS0FBQWovRCxJQUFBME0sRUFBQWtKLE1BQ0EwckQsRUFBQUssUUFHQTVILEdBQUF1SCxFQUFBTSxRQUFBcEgsRUFBQXFILGVBQUFQLElBQ0F2QyxFQUFBL2lELE1BQUFnSCxTQUFBdFcsRUFBQTFNLElBQUEsVUFDQXdoRSxHQUFBOTBELEVBQUFxeUQsR0EwSEEsU0FBQXJ5RCxFQUFBcXlELEdBQ0EsSUFBQStDLEVBQUFwMUQsRUFBQTFNLElBQUEsbUJBQ0ErK0QsRUFBQS9pRCxNQUFBeVQsU0FBQSxTQUFBclosR0FFQUEsRUFBQTJyRCxTQUVBM3JELEVBQUFpRSxNQUFBMm5ELFFBQUFGLEdBQ0ExckQsRUFBQW1GLFNBQUEsUUFBQXVtRCxHQUlBMXJELEVBQUE2ckQsd0JBQ0E3ckQsRUFBQTZyRCx1QkFBQSxTQUFBQyxHQUNBQSxFQUFBM21ELFNBQUEsUUFBQXVtRCxPQXRJQUssQ0FBQXoxRCxFQUFBcXlELEtBRUF2RSxFQUFBVCxjQThGQSxTQUFBam9DLEVBQUEzbUIsR0FDQSxJQUFBMjZCLEVBQUFoVSxFQUFBZ1UsUUFDQXM4QixFQUFBLEVBQ0F0OEIsRUFBQXJXLFNBQUEsU0FBQXJaLEdBQ0FBLEVBQUEyckQsU0FDQUssTUFJQUEsRUFBQWozRCxFQUFBbkwsSUFBQSx5QkFBQTI2QixFQUFBSyxNQUNBOEssRUFBQXJXLFNBQUEsU0FBQXJaLEdBQ0FBLEVBQUEyckQsVUFFQTNyRCxFQUFBNHZCLGVBQUEsS0F6R0FxOEIsQ0FBQXhJLEVBQUFoeEIsSUFBQTE5QixHQUVBbXJELEVBQUF1RCxFQUFBaHhCLElBQUFpdkIsSUFBQTNzRCxHQUdBLFNBQUF1ekQsR0FBQXZ6RCxFQUFBQyxHQUNBRSxFQUFBZzNELEdBQUEsU0FBQTlpQixHQUNBQSxFQUFBcjBDLEVBQUFDLEtBNVpBK3VELEVBQUFULE9BQUEsU0FBQTFCLEdBQ0F0dUQsS0FBQW0vQixJQUFBNndCLE9BQUExQixHQUVBLElBQUE3c0QsRUFBQXpCLEtBQUE0a0IsT0FJQSxHQUZBNWtCLEtBQUE2NEQsWUFBQTc0RCxLQUFBNjRELFdBQUE3SSxTQUVBdnVELEVBQUEsQ0FJQSxJQUFBcTNELEVBQUFyM0QsRUFBQXMzRCxZQUFBLFNBQ0F6L0MsRUFBQWcxQyxLQUFBaDFDLE9BQ0F0WixLQUFBNHRELElBQUEsRUFDQWtMLEdBQUEvSCxFQUFBL3dELE1BQ0FneEQsRUFBQXA0RCxPQUFBckUsS0FBQXlMLE1BQ0FBLEtBQUE0dEQsSUFBQSxFQUNBcUQsRUFBQTE4RCxLQUFBeUwsS0FBQXNaLEdBQ0E0M0MsRUFBQTM4RCxLQUFBeUwsS0FBQXNaLEtBaUJBbTNDLEVBQUF1SSxZQUFBLFNBQUE3aUUsRUFBQThpRSxHQVNBLEdBUkExekMsRUFBQXB2QixLQUNBOGlFLEVBQUE5aUUsRUFDQUEsRUFBQSxJQUdBQSxLQUFBLFVBQ0E2SixLQUFBazVELGNBRUFDLEdBQUFoakUsR0FBQSxDQUlBLElBQUF1VyxFQUFBeXNELEdBQUFoakUsR0FBQTZKLEtBQUEwbUIsS0FBQXV5QyxHQUNBN3dDLEVBQUFwb0IsS0FBQW0vQixJQUNBbi9CLEtBQUE2NEQsV0FBQW5zRCxFQUNBMGIsRUFBQTlaLElBQUE1QixLQU9BK2pELEVBQUF5SSxZQUFBLFdBQ0FsNUQsS0FBQTY0RCxZQUFBNzRELEtBQUFtL0IsSUFBQW5zQixPQUFBaFQsS0FBQTY0RCxZQUNBNzRELEtBQUE2NEQsV0FBQSxNQVFBcEksRUFBQTJJLG9CQUFBLFNBQUF0QyxHQUNBLElBQUFwMEQsRUFBQXRCLEVBQUFxRixVQUFnQ3F3RCxHQUVoQyxPQURBcDBELEVBQUExSCxLQUFBcStELEdBQUF2QyxFQUFBOTdELE1BQ0EwSCxHQWdCQSt0RCxFQUFBcmtELGVBQUEsU0FBQTFKLEVBQUFxQixHQUNBd2hCLEVBQUF4aEIsS0FDQUEsR0FDQXVWLFNBQUF2VixJQUlBeXlELEdBQUE5ekQsRUFBQTFILE9BS0FnRixLQUFBNGtCLFNBS0E1a0IsS0FBQTR0RCxHQUNBNXRELEtBQUFpd0QsZ0JBQUFuNkQsS0FBQTRNLElBS0EyekQsRUFBQTloRSxLQUFBeUwsS0FBQTBDLEVBQUFxQixFQUFBdVYsUUFFQXZWLEVBQUE2cUQsTUFDQTV1RCxLQUFBbS9CLElBQUF5dkIsT0FBQSxJQUNHLElBQUE3cUQsRUFBQTZxRCxPQUFBMzlCLEVBQUFxb0MsUUFBQUMsUUFNSHY1RCxLQUFBMnVELG9CQUdBc0MsRUFBQTE4RCxLQUFBeUwsS0FBQStELEVBQUF1VixRQUNBNDNDLEVBQUEzOEQsS0FBQXlMLEtBQUErRCxFQUFBdVYsV0F1SEFtM0MsRUFBQTNVLFdBQUEsU0FBQXJ5QyxHQUNBLElBQUE0akIsRUFBQTVqQixFQUFBNGpCLFlBQ0FydEIsS0FBQTJQLFdBQ0ErZ0IsaUJBQUFyRCxHQUNBeXVCLFdBQUFyeUMsR0FRQXpKLEtBQUE2dkQsV0FBQVEsWUFBQSxHQVFBSSxFQUFBamlELEdBQUF1L0MsRUFBQSxNQUNBMEMsRUFBQXhnRCxJQUFBODlDLEVBQUEsT0FDQTBDLEVBQUFELElBQUF6QyxFQUFBLE9BdUpBLElBQUF5TCxJQUFBLHVHQWtJQSxTQUFBMUIsR0FBQTlzQyxFQUFBOG5DLEdBQ0EsSUFBQXZvRCxFQUFBeWdCLEVBQUExMEIsSUFBQSxLQUNBZ1UsRUFBQTBnQixFQUFBMTBCLElBQUEsVUFFQXc4RCxFQUFBeGdELE1BQUF5VCxTQUFBLFNBQUFyWixHQUNBLFVBQUFBLEVBQUExUixPQUNBLE1BQUF1UCxJQUFBbUMsRUFBQW5DLEtBQ0EsTUFBQUQsSUFBQW9DLEVBQUFwQyxhQXBJQW1tRCxFQUFBVixZQUFBLFdBQ0FudUQsRUFBQTQzRCxHQUFBLFNBQUFDLEdBQ0F6NUQsS0FBQW0vQixJQUFBM3dCLEdBQUFpckQsRUFBQSxTQUFBL2lFLEdBQ0EsSUFFQStTLEVBRkFoSSxFQUFBekIsS0FBQTJQLFdBQ0FqRCxFQUFBaFcsRUFBQTZnQyxPQUdBLGlCQUFBa2lDLEVBQ0Fod0QsVUFDTyxHQUFBaUQsR0FBQSxNQUFBQSxFQUFBeEosVUFBQSxDQUNQLElBQUE4aEMsRUFBQXQ0QixFQUFBczRCLFdBQUF2akMsRUFBQWl2QixpQkFBQWhrQixFQUFBMmdCLGFBQ0E1akIsRUFBQXU3QixLQUFBeDdCLGNBQUFrRCxFQUFBeEosVUFBQXdKLEVBQUF1NEIsbUJBRUF2NEIsS0FBQW9NLFlBQ0FyUCxFQUFBckksRUFBQXFGLFVBQW1DaUcsRUFBQW9NLFlBR25DclAsSUFDQUEsRUFBQS9CLE1BQUFoUixFQUNBK1MsRUFBQXpPLEtBQUF5K0QsRUFDQXo1RCxLQUFBMGhDLFFBQUErM0IsRUFBQWh3RCxLQUVLekosT0FDRkEsTUFDSDRCLEVBQUF5M0QsR0FBQSxTQUFBSyxFQUFBam9DLEdBQ0F6eEIsS0FBQTh2RCxlQUFBdGhELEdBQUFpakIsRUFBQSxTQUFBL3BCLEdBQ0ExSCxLQUFBMGhDLFFBQUFqUSxFQUFBL3BCLElBQ0sxSCxPQUNGQSxPQU9IeXdELEVBQUFrSixXQUFBLFdBQ0EsT0FBQTM1RCxLQUFBNndELFdBT0FKLEVBQUExcEMsTUFBQSxXQUNBL21CLEtBQUEyeEQsV0FDQTdrQyxZQUNHLElBT0gyakMsRUFBQXJ5RCxRQUFBLFdBQ0EsSUFBQTRCLEtBQUE2d0QsVUFBQSxDQUlBN3dELEtBQUE2d0QsV0FBQSxFQUNBN29ELEVBQUE0eEQsYUFBQTU1RCxLQUFBc2lDLFNBQUF1M0IsR0FBQSxJQUNBLElBQUFuNEQsRUFBQTFCLEtBQUEwbUIsS0FDQWpsQixFQUFBekIsS0FBQTRrQixPQUNBaGpCLEVBQUE1QixLQUFBZ3ZELGlCQUFBLFNBQUE2RCxHQUNBQSxFQUFBejBELFFBQUFxRCxFQUFBQyxLQUVBRSxFQUFBNUIsS0FBQTh1RCxhQUFBLFNBQUEyRSxHQUNBQSxFQUFBcjFELFFBQUFxRCxFQUFBQyxLQUdBMUIsS0FBQW0vQixJQUFBL2dDLGlCQUVBbzFELEdBQUF4ekQsS0FBQXJJLE1BR0F5SixFQUFBMEssTUFBQXFpRCxFQUFBL0IsR0F1RkEsSUFBQW9LLE1BTUE2QyxNQU9BekosTUFNQW1DLE1BTUE2RyxNQU1BakosTUFNQXBCLE1BS0E0SyxNQUNBM0YsTUFDQUYsTUFDQXdHLEdBQUEsSUFBQXpJLEtBQUEsRUFDQTBJLEdBQUEsSUFBQTFJLEtBQUEsRUFDQXdJLEdBQUEscUJBQ0FHLE1Ba0dBLFNBQUFDLEdBQUE5RyxHQUNBRyxHQUFBSCxJQUFBLEVBT0EsSUFBQStHLEdBQUFELEdBd0JBLFNBQUFFLEdBQUEvTCxHQUNBLE9BQUFvRixHQUFBeHJELEVBQUFveUQsYUFBQWhNLEVBQUF5TCxLQWdCQSxTQUFBUSxHQUFBbGtFLEVBQUFrNEQsR0FDQUUsR0FBQXA0RCxHQUFBazRELEVBUUEsU0FBQTlyQyxHQUFBKzNDLEdBQ0F2SSxHQUFBajhELEtBQUF3a0UsR0FRQSxTQUFBeHlELEdBQUF5eUQsRUFBQUMsR0FDQUMsR0FBQTdLLEdBQUEySyxFQUFBQyxFQUFBdE4sR0E2QkEsU0FBQXpxRCxHQUFBRCxFQUFBd3JELEVBQUFpSixHQUNBLG1CQUFBakosSUFDQWlKLEVBQUFqSixFQUNBQSxFQUFBLElBR0EsSUFBQTBMLEVBQUFuMEMsRUFBQS9pQixLQUFBeEgsTUFBQXdILEtBQ0FrRixNQUFBc21ELElBQ0csR0FFSHhyRCxFQUFBa0YsT0FBQWxGLEVBQUFrRixPQUFBZ3lELEdBQUF6TCxjQUNBRCxFQUFBeHJELEVBQUFrRixNQUVBcStDLEVBQUErSCxFQUFBNXNELEtBQUF3NEQsSUFBQTVMLEVBQUE1c0QsS0FBQThzRCxJQUVBd0ksR0FBQWtELEtBQ0FsRCxHQUFBa0QsSUFDQXpDLFNBQ0F6MEQsZUFJQTYyRCxHQUFBckwsR0FBQTBMLEVBNENBLFNBQUEveEQsR0FBQTR5RCxFQUFBRyxHQUNBRCxHQUFBOUssR0FBQTRLLEVBQUFHLEVBQUF0TixFQUFBLFVBT0EsU0FBQXFOLEdBQUFweEQsRUFBQWt4RCxFQUFBL2tFLEVBQUFtbEUsRUFBQXBHLElBQ0E3K0IsRUFBQTZrQyxJQUFBaDFDLEVBQUFnMUMsTUFDQS9rRSxFQUFBK2tFLEVBQ0FBLEVBQUFJLEdBR0EsSUFBQUMsRUFBQTlOLEVBQUErTixpQkFBQXJsRSxFQUFBKytELEdBSUEsT0FIQXFHLEVBQUFsTCxPQUFBNkssRUFDQUssRUFBQUUsTUFBQXRsRSxFQUNBNlQsRUFBQXZULEtBQUE4a0UsR0FDQUEsRUFPQSxTQUFBRyxHQUFBNWtFLEVBQUE2a0UsR0FDQTdCLEdBQUFoakUsR0FBQTZrRSxFQW1JQXJ6RCxHQXgzREEsSUF3M0RBZ2xELEdBQ0FwcUMsR0FBQWlxQyxHQUNBMWtELEdBNTNEQSxJQTQzREEya0QsR0FDQXNPLEdBQUEsVUFBQWxPLEdBRUFwcUQsSUFDQXpILEtBQUEsWUFDQTBNLE1BQUEsWUFDQTlPLE9BQUEsYUFDQ3dJLEVBQUFzdEMsTUFDRGpzQyxJQUNBekgsS0FBQSxXQUNBME0sTUFBQSxXQUNBOU8sT0FBQSxZQUNDd0ksRUFBQXN0QyxNQUVEMnJCLEdBQUEsUUFBQXROLEdBQ0FzTixHQUFBLE9BQUFyTixHQUlBbHZELEVBQUFtOUQsUUFyNURBLFFBczVEQW45RCxFQUFBbTZCLGNBcDVEQWcwQixRQUFBLFNBcTVEQW51RCxFQUFBMmtCLFdBQ0Eza0IsRUFBQXdLLEtBcllBLFNBQUE4bEQsRUFBQUMsRUFBQUMsR0FDQSxJQUFBNE0sRUFBQWYsR0FBQS9MLEdBRUEsR0FBQThNLEVBQ0EsT0FBQUEsRUFHQSxJQUFBekgsRUFBQSxJQUFBdEYsRUFBQUMsRUFBQUMsRUFBQUMsR0FLQSxPQUpBbUYsRUFBQTk3RCxHQUFBLE1BQUFtaUUsS0FDQXRHLEdBQUFDLEVBQUE5N0QsSUFBQTg3RCxFQUNBenJELEVBQUE0eEQsYUFBQXhMLEVBQUF5TCxHQUFBcEcsRUFBQTk3RCxJQTdEQSxTQUFBODdELEdBQ0EsSUFHQTBILEVBQUEsd0JBRUEsU0FBQUMsRUFBQUMsRUFBQTFpRSxHQUNBLFFBQUFyQixFQUFBLEVBQW1CQSxFQUFBK2pFLEVBQUE5akUsT0FBbUJELElBQ3RDK2pFLEVBQUEvakUsR0FDQTZqRSxHQUFBeGlFLEVBSUFpSixFQUFBeTNELEdBQUEsU0FBQUssRUFBQWpvQyxHQUNBZ2lDLEVBQUEzRCxlQUFBdGhELEdBQUFpakIsRUFBQSxTQUFBL3BCLEdBQ0EsR0FBQTRyRCxHQUFBRyxFQUFBbmhELFFBZEEsSUFjQW1oRCxFQUFBMEgsR0FBQSxDQUNBLEdBQUF6ekQsS0FBQXVvQixjQUNBLE9BR0EsSUFBQWduQyxFQUFBeEQsRUFBQTJGLG9CQUFBMXhELEdBQ0E0ekQsS0FDQTE1RCxFQUFBNHhELEdBQUEsU0FBQStILEdBQ0FBLElBQUE5SCxHQUFBOEgsRUFBQWpwRCxRQUFBbWhELEVBQUFuaEQsT0FDQWdwRCxFQUFBeGxFLEtBQUF5bEUsS0FHQUgsRUFBQUUsRUExQkEsR0EyQkExNUQsRUFBQTA1RCxFQUFBLFNBQUFDLEdBMUJBLElBMkJBQSxFQUFBSixJQUNBSSxFQUFBbnZELGVBQUE2cUQsS0FHQW1FLEVBQUFFLEVBOUJBLFFBMkRBRSxDQUFBL0gsR0FDQUEsR0EwWEEzMUQsRUFBQTI5RCxRQW5YQSxTQUFBdEksR0FFQSxHQUFBL3hELEVBQUE2RSxRQUFBa3RELEdBQUEsQ0FDQSxJQUFBa0ksRUFBQWxJLEVBQ0FBLEVBQUEsS0FFQXZ4RCxFQUFBeTVELEVBQUEsU0FBQTVILEdBQ0EsTUFBQUEsRUFBQW5oRCxRQUNBNmdELEVBQUFNLEVBQUFuaEQsU0FHQTZnRCxLQUFBLEtBQUE0RyxLQUNBbjRELEVBQUF5NUQsRUFBQSxTQUFBNUgsR0FDQUEsRUFBQW5oRCxNQUFBNmdELElBS0EsT0FEQUcsR0FBQUgsSUFBQSxFQUNBQSxHQWtXQXIxRCxFQUFBbThELGNBQ0FuOEQsRUFBQW84RCxjQUNBcDhELEVBQUFNLFFBOVVBLFNBQUFxMUQsR0FDQSxpQkFBQUEsRUFDQUEsRUFBQUQsR0FBQUMsR0FDR0EsYUFBQXRGLElBRUhzRixFQUFBMEcsR0FBQTFHLElBR0FBLGFBQUF0RixJQUFBc0YsRUFBQWtHLGNBQ0FsRyxFQUFBcjFELFdBc1VBTixFQUFBcThELG9CQUNBcjhELEVBQUE0OUQsZ0JBclRBLFNBQUFwOEQsR0FDQSxPQUFBazBELEdBQUFsMEQsSUFxVEF4QixFQUFBdThELGlCQUNBdjhELEVBQUF5a0Isd0JBQ0F6a0IsRUFBQWdLLHFCQUNBaEssRUFBQTY5RCxtQkF0UkEsU0FBQUMsR0FDQWhELEdBQUE5aUUsS0FBQThsRSxJQXNSQTk5RCxFQUFBMkUsa0JBQ0EzRSxFQUFBKzlELHlCQXJPQSxTQUFBN2dFLEVBQUEySSxHQUNBckMsRUFBQVUsU0FBQWhILEVBQUEySSxJQXFPQTdGLEVBQUFnK0QsOEJBNU5BLFNBQUE5Z0UsR0FDQSxJQUFBK2dFLEVBQUF6NkQsRUFBQWhMLElBQUEwRSxHQUVBLEdBQUErZ0UsRUFDQSxPQUFBQSxFQUFBbjNELGtCQUFBbTNELEVBQUFuM0Qsb0JBQUFtM0QsRUFBQWwzRCxXQUFBcEssU0F5TkFxRCxFQUFBOEosZUE1TUEsU0FBQTJ5RCxFQUFBeUIsR0FDQXZCLEdBQUE5SyxHQUFBNEssRUFBQXlCLEVBQUE3TyxFQUFBLFdBNE1BcnZELEVBQUE2SixrQkFDQTdKLEVBQUFpOUQsbUJBQ0FqOUQsRUFBQWlsQixxQkFwS0EsU0FBQXVyQyxHQVFBLE9BQUFwNEIsRUFBQXp2QixPQUFBNm5ELElBNkpBeHdELEVBQUF1akIsb0JBckpBLFNBQUFpdEMsR0FRQSxPQUFBbjRCLEVBQUExdkIsT0FBQTZuRCxJQThJQXh3RCxFQUFBdUssa0JBdElBLFNBQUFpbUQsR0FTQSxPQUFBNUIsRUFBQWptRCxPQUFBNm5ELElBOEhBeHdELEVBQUFtK0QsZ0JBdEhBLFNBQUEzTixHQVNBLE9BQUF0aUQsRUFBQXZGLE9BQUE2bkQsSUE4R0F4d0QsRUFBQW8rRCxpQkExRkEsU0FBQUMsR0FDQS82RCxFQUFBZzdELFVBQUEsZUFBQUQsSUEwRkFyK0QsRUFBQXUrRCxZQXZFQSxTQUFBQyxFQUFBeG9CLEVBQUF5b0IsR0FDQXpvQixjQUFBSSxXQUNBcW9CLEVBQUF6b0IsRUFBQXlvQixhQUNBem9CLGFBR0EsaUJBQUFBLElBQ0FBLEVBQUEsb0JBQUFqN0MsV0FBQUMsTUFBQUQsS0FBQUMsTUFBQWc3QyxHQUFBLElBQUEwb0IsU0FBQSxXQUFBMW9CLEVBQUEsU0FHQWttQixHQUFBc0MsSUFDQXhvQixVQUNBeW9CLGlCQTREQXorRCxFQUFBMitELE9BbkRBLFNBQUFILEdBQ0EsT0FBQXRDLEdBQUFzQyxJQW1EQXgrRCxFQUFBNCtELFlBQ0EsSUFBQUMsR0FBQXBuRSxFQUFBLHlDQUNBLFdBQ0EsUUFBQStKLEtBQUFxOUQsR0FDQUEsR0FBQXJvRSxlQUFBZ0wsS0FDQXhCLEVBQUF3QixHQUFBcTlELEdBQUFyOUQsSUFIQSwyRENuZ0VBLElBQUEyc0QsRUFBQTEyRCxFQUFBLHlDQUVBdUksRUFBQW11RCxVQUVBLElBQUEveEMsRUFBQTNrQixFQUFBLDZDQUVBdUksRUFBQW9jLFNBRUEsSUFBQTBpRCxFQUFBcm5FLEVBQUEsNkNBRUF1SSxFQUFBOCtELFNBRUEsSUFBQXg3RCxFQUFBN0wsRUFBQSwyQ0FFQTIyRCxFQUFBMzJELEVBQUEsNENBRUF1SSxFQUFBdWxCLE1BQUE2b0MsRUFFQSxJQUFBbmdELEVBQUF4VyxFQUFBLDhDQUVBdUksRUFBQWlPLFVBRUEsSUFBQW0yQixFQUFBM3NDLEVBQUEsNkNBRUF1SSxFQUFBbTVDLE9BQUEvVSxFQUVBLElBQUE3cEIsRUFBQTlpQixFQUFBLDZDQUVBdUksRUFBQSsrRCxPQUFBeGtELEVBRUEsSUFBQXlrRCxFQUFBdm5FLEVBQUEsK0NBRUF1bkUsRUFBQTU0QyxTQUNBcG1CLEVBQUFvbUIsU0FBQTQ0QyxFQUFBNTRDLFNBRUEsSUFBQTY0QyxFQUFBeG5FLEVBQUEsd0NBRUF1SSxFQUFBay9ELE9BQUFELEVBRUEsSUFBQUUsRUFBQTFuRSxFQUFBLHdEQUVBdUksRUFBQW0vRCxlQUVBLElBQUFDLEVBQUEzbkUsRUFBQSwyQ0FFQXVJLEVBQUF3RixLQUFBNDVELEVBRUEsSUFBQUMsRUFBQTVuRSxFQUFBLDZDQUVBdUksRUFBQXdhLE1BQUE2a0QsRUFFQSxJQUFBQyxFQUFBN25FLEVBQUEsNENBRUF1SSxFQUFBeXFDLEtBQUE2MEIsRUFFQSxJQUFBQyxFQUFBOW5FLEVBQUEsMENBRUF1SSxFQUFBbXpCLElBQUFvc0MsRUF3QkEsSUFBQUMsRUFBQUwsRUFDQU0sS0FDQW44RCxFQUFBUSxNQUFBLHVLQUFBekwsR0FDQW9uRSxFQUFBcG5FLEdBQUFpTCxFQUFBakwsS0FFQTJILEVBQUF3L0QsZUFDQXgvRCxFQUFBMC9ELEtBQUFELDBEQ3ZGQSxJQUFBbjhELEVBQUE3TCxFQUFBLDJDQUVBa29FLEVBQUFsb0UsRUFBQSxrRUFFQW8vQixFQUFBcC9CLEVBQUEsa0RBRUFtb0UsRUFBQW5vRSxFQUFBLDREQUVBK2lCLEVBQUEvaUIsRUFBQSw2Q0FFQWtoQyxFQUFBbGhDLEVBQUEsNkNBRUFraEMsRUFBQUMsY0FDQTU0QixFQUFBNDRCLGNBQUFELEVBQUFDLGNBRUEsSUFBQWluQyxFQUFBcG9FLEVBQUEsNkRBRUF1TyxFQUFBNjVELEVBQUE3NUQsZ0JBQ0Fpa0QsRUFBQTRWLEVBQUE1VixtQkFDQWdCLEVBQUE0VSxFQUFBNVUsb0JBRUE2VSxFQUFBcm9FLEVBQUEsZ0VBRUF1SSxFQUFBK25ELG1CQUFBK1gsRUFFQSxJQUFBQyxFQUFBdG9FLEVBQUEsOERBRUF1SSxFQUFBeUYsaUJBQUFzNkQsRUFFQSxJQUFBQyxFQUFBdm9FLEVBQUEsNkNBRUF1SSxFQUFBMmEsYUFBQXFsRCxFQUFBcmxELGFBb0NBLElBQUFnMEMsR0FDQTFFLHFCQUNBamtELGtCQUNBaWxELHVCQWlEQWpyRCxFQUFBaWdFLFdBN0RBLFNBQUEvNkQsR0FDQSxPQUFBeTZELEVBQUF6NkQsRUFBQTJELFlBQUEzRCxJQTZEQWxGLEVBQUEydUQsWUFDQTN1RCxFQUFBa2dFLFlBakNBLFNBQUFuMUIsRUFBQXRnQyxHQUNBLElBQUE5RCxFQUFBOEQsRUFFQStQLEVBQUF0VSxXQUFBdUUsS0FDQTlELEVBQUEsSUFBQTZULEVBQUEvUCxHQUNBbkgsRUFBQTBLLE1BQUFySCxFQUFBaTVELElBR0EsSUFBQXJpRCxFQUFBc1osRUFBQTZZLG1CQUFBL29DLEdBR0EsT0FGQTRXLEVBQUF5dEIsVUFBQUQsRUFBQSxHQUFBQSxFQUFBLElBQ0FsVSxFQUFBcVksZ0JBQUEzeEIsRUFBQTVXLEdBQ0E0VyxHQXVCQXZkLEVBQUFtZ0UsNEJBUEEsU0FBQTNsRCxHQUNBbFgsRUFBQTBLLE1BQUF3TSxFQUFBb2xELHdEQ0RBdGpFLEVBQUEwRCxTQWhHQW9nRSxTQUNBQyxPQUNBQyxPQUNBcHRDLEtBQUEsT0FDQXVqQixRQUFBLEtBQ0E4cEIsTUFBQSxPQUNBQyxNQUFBLE9BQ0FsZixLQUFBLE9BQ0FyNEIsTUFBQSxTQUdBdzNDLFVBQ0FILE1BQUEsT0FDQUksTUFBQSxtQkFFQUMsVUFDQUwsT0FDQU0sS0FBQSxPQUNBQyxLQUFBLFdBR0FDLFdBQ0FSLE9BQ0E3eUMsS0FBQSxTQUNBc3pDLElBQUEsU0FDQUMsTUFBQSxRQUNBQyxNQUFBLFVBR0FDLFNBQ0FaLE1BQUEsTUFFQWEsYUFDQWIsTUFBQSxRQUNBSSxNQUFBLGFBR0ExeEMsUUFDQW95QyxXQUNBQyxJQUFBLEtBQ0FOLElBQUEsTUFDQXR6QyxLQUFBLE1BQ0E2ekMsUUFBQSxNQUNBQyxjQUFBLFFBQ0FDLE1BQUEsTUFDQUMsS0FBQSxLQUNBQyxRQUFBLE9BQ0FDLFFBQUEsTUFDQUMsWUFBQSxNQUNBeHNCLEVBQUEsTUFDQXlzQixRQUFBLE1BQ0FqbEUsSUFBQSxLQUNBa2xFLFNBQUEsUUFDQUMsTUFBQSxLQUNBQyxNQUFBLE1BQ0FDLE9BQUEsTUFDQUMsT0FBQSxNQUNBQyxNQUFBLE9BQ0FDLGFBQUEsT0FDQUMsV0FBQSxRQUNBQyxTQUFBLFFBR0F4VCxNQUNBeVQsU0FDQUMsVUFBQSxzQkFDQUMsYUFBQSxXQUVBenpDLFFBQ0EwekMsUUFDQUMsT0FBQSxHQUNBQyxTQUFBLG9DQUNBQyxZQUFBLHNCQUVBQyxVQUNBSCxPQUFBLDBCQUNBQyxTQUFBLGdEQUNBQyxZQUFBLGlDQUNBRSxXQUNBQyxPQUFBLElBQ0F4c0QsSUFBQSxPQUlBclgsTUFDQThqRSxRQUFBLFNBQ0FDLFlBQUEsdUJBQ0FOLFNBQUEsb0JBQ0FDLFlBQUEsVUFDQUUsV0FDQUMsT0FBQSxJQUNBeHNELElBQUEsdUVDOUdBLElBQUFsVCxFQUFBN0wsRUFBQSwyQ0FJQXdoQixFQUZBeGhCLEVBQUEsNkNBRUF3aEIsYUFJQWd4QyxFQUZBeHlELEVBQUEsNkRBRUF3eUQsbUJBRUFrWixFQUFBMXJFLEVBQUEsa0VBb0JBMnJFLEVBQUEsY0FFQUMsRUFBQSxvQkFBQUMsMEJBQUF2cUIsTUFFQSxTQUFBd3FCLEVBQUFyK0QsR0FDQSxPQUFBQSxFQUFBMU0sSUFBQSxVQUFBNHFFLEVBQUFsK0QsRUFBQXFxQixZQUdBLFNBQUFpMEMsRUFBQXRuRCxHQUNBLE9BQUFBLEVBQUF6VixJQUFBeVYsRUFBQWUsTUE2Q0EsU0FBQXF2QixFQUFBOW5DLEVBQUFiLEdBQ0EsSUFBQW9yQixLQU9BLE9BTkFwckIsRUFBQTBWLGlCQUFBN1UsRUFBQSxTQUFBVSxHQUVBdStELEVBQUF2K0QsS0FBQXcrRCxFQUFBeCtELElBQ0E2cEIsRUFBQS8yQixLQUFBa04sS0FHQTZwQixFQUdBLFNBQUF3ZCxFQUFBbzNCLEdBQ0EsSUFBQUMsS0FxQkEsT0FwQkF0Z0UsRUFBQVEsS0FBQTYvRCxFQUFBLFNBQUF6K0QsR0FDQSxJQUFBL0YsRUFBQStGLEVBQUFHLFVBRUF3K0QsRUFEQTMrRCxFQUFBNHRCLGlCQUNBMmEsY0FDQTFqQixFQUFBODVDLEVBQUExbkQsWUFDQTJSLEVBQUEsYUFBQSsxQyxFQUFBM21FLEtBQUEybUUsRUFBQWo2QyxlQUFBM2EsS0FBQWlJLElBQUE2UyxFQUFBLEdBQUFBLEVBQUEsSUFBQTVxQixFQUFBc00sUUFDQXE0RCxFQUFBN3FELEVBQUEvVCxFQUFBMU0sSUFBQSxZQUFBczFCLEdBQ0FpMkMsRUFBQTlxRCxFQUFBL1QsRUFBQTFNLElBQUEsZUFBQXMxQixHQUNBazJDLEVBQUE5K0QsRUFBQTFNLElBQUEsVUFDQXlyRSxFQUFBLytELEVBQUExTSxJQUFBLGtCQUNBb3JFLEVBQUE1ckUsTUFDQTgxQixZQUNBZzJDLFdBQ0FDLGNBQ0FDLFNBQ0FDLGlCQUNBQyxRQUFBVixFQUFBSyxHQUNBTSxRQUFBWixFQUFBcitELE9BR0FrL0QsRUFBQVIsR0FHQSxTQUFBUSxFQUFBUixHQUVBLElBQUFTLEtBQ0EvZ0UsRUFBQVEsS0FBQTgvRCxFQUFBLFNBQUFVLEVBQUE1bEUsR0FDQSxJQUFBd2xFLEVBQUFJLEVBQUFKLFFBQ0FwMkMsRUFBQXcyQyxFQUFBeDJDLFVBQ0F5MkMsRUFBQUYsRUFBQUgsS0FDQXAyQyxZQUNBMDJDLGNBQUExMkMsRUFDQTIyQyxlQUFBLEVBQ0FDLFlBQUEsTUFDQTdqRCxJQUFBLE1BQ0E4akQsV0FFQUEsRUFBQUosRUFBQUksT0FDQU4sRUFBQUgsR0FBQUssRUFDQSxJQUFBSixFQUFBRyxFQUFBSCxRQUVBUSxFQUFBUixJQUNBSSxFQUFBRSxpQkFHQUUsRUFBQVIsR0FBQVEsRUFBQVIsS0FDQXgyRCxNQUFBLEVBQ0FnVSxTQUFBLEdBT0EsSUFBQW1pRCxFQUFBUSxFQUFBUixTQUVBQSxJQUFBYSxFQUFBUixHQUFBeDJELFFBRUFnM0QsRUFBQVIsR0FBQXgyRCxNQUFBbTJELEVBQ0FBLEVBQUE3MEQsS0FBQXNLLElBQUFnckQsRUFBQUMsY0FBQVYsR0FDQVMsRUFBQUMsZUFBQVYsR0FHQSxJQUFBQyxFQUFBTyxFQUFBUCxZQUNBQSxJQUFBWSxFQUFBUixHQUFBeGlELFNBQUFvaUQsR0FDQSxJQUFBQyxFQUFBTSxFQUFBTixPQUNBLE1BQUFBLElBQUFPLEVBQUExakQsSUFBQW1qRCxHQUNBLElBQUFDLEVBQUFLLEVBQUFMLGVBQ0EsTUFBQUEsSUFBQU0sRUFBQUcsWUFBQVQsS0FFQSxJQUFBaG9FLEtBc0RBLE9BckRBcUgsRUFBQVEsS0FBQXVnRSxFQUFBLFNBQUFFLEVBQUFsK0QsR0FDQXBLLEVBQUFvSyxNQUNBLElBQUFzK0QsRUFBQUosRUFBQUksT0FDQTcyQyxFQUFBeTJDLEVBQUF6MkMsVUFDQTQyQyxFQUFBenJELEVBQUFzckQsRUFBQUcsWUFBQTUyQyxHQUNBODJDLEVBQUEzckQsRUFBQXNyRCxFQUFBMWpELElBQUEsR0FDQTJqRCxFQUFBRCxFQUFBQyxjQUNBQyxFQUFBRixFQUFBRSxlQUNBSSxHQUFBTCxFQUFBRSxJQUFBRCxLQUFBLEdBQUFHLEdBQ0FDLEVBQUE1MUQsS0FBQW1HLElBQUF5dkQsRUFBQSxHQUVBdmhFLEVBQUFRLEtBQUE2Z0UsRUFBQSxTQUFBRyxFQUFBOUQsR0FDQSxJQUFBci9DLEVBQUFtakQsRUFBQW5qRCxTQUVBQSxLQUFBa2pELElBQ0FsakQsRUFBQTFTLEtBQUFzSyxJQUFBb0ksRUFBQTZpRCxHQUVBTSxFQUFBbjNELFFBQ0FnVSxFQUFBMVMsS0FBQXNLLElBQUFvSSxFQUFBbWpELEVBQUFuM0QsUUFHQTYyRCxHQUFBN2lELEVBQ0FtakQsRUFBQW4zRCxNQUFBZ1UsRUFDQThpRCxPQUlBSSxHQUFBTCxFQUFBRSxJQUFBRCxLQUFBLEdBQUFHLEdBQ0FDLEVBQUE1MUQsS0FBQW1HLElBQUF5dkQsRUFBQSxHQUNBLElBQ0FFLEVBREFDLEVBQUEsRUFFQTFoRSxFQUFBUSxLQUFBNmdFLEVBQUEsU0FBQUcsRUFBQXBtRSxHQUNBb21FLEVBQUFuM0QsUUFDQW0zRCxFQUFBbjNELE1BQUFrM0QsR0FHQUUsRUFBQUQsRUFDQUUsR0FBQUYsRUFBQW4zRCxPQUFBLEVBQUFpM0QsS0FHQUcsSUFDQUMsR0FBQUQsRUFBQXAzRCxNQUFBaTNELEdBR0EsSUFBQXYxRCxHQUFBMjFELEVBQUEsRUFDQTFoRSxFQUFBUSxLQUFBNmdFLEVBQUEsU0FBQUcsRUFBQVgsR0FDQWxvRSxFQUFBb0ssR0FBQTg5RCxHQUFBbG9FLEVBQUFvSyxHQUFBODlELEtBQ0E5MEQsU0FDQTFCLE1BQUFtM0QsRUFBQW4zRCxPQUVBMEIsR0FBQXkxRCxFQUFBbjNELE9BQUEsRUFBQWkzRCxPQUdBM29FLEVBVUEsU0FBQXV3QyxFQUFBa0IsRUFBQXh4QixFQUFBaFgsR0FDQSxHQUFBd29DLEdBQUF4eEIsRUFBQSxDQUNBLElBQUFqZ0IsRUFBQXl4QyxFQUFBODFCLEVBQUF0bkQsSUFNQSxPQUpBLE1BQUFqZ0IsR0FBQSxNQUFBaUosSUFDQWpKLElBQUFzbkUsRUFBQXIrRCxLQUdBakosR0E2R0EsSUFBQWdwRSxHQUNBemdFLFdBQUEsTUFDQXl6RCxLQUFBa0wsSUFDQStCLE1BQUEsU0FBQWhnRSxHQUNBLEdBQUF1K0QsRUFBQXYrRCxJQUFBdytELEVBQUF4K0QsR0FBQSxDQUlBLElBQUEvRixFQUFBK0YsRUFBQUcsVUFDQTgvRCxFQUFBamdFLEVBQUE0dEIsaUJBQ0Erd0MsRUFBQXNCLEVBQUExM0IsY0FDQTIzQixFQUFBRCxFQUFBejRDLGFBQUFtM0MsR0FDQXg0RCxFQUFBbE0sRUFBQW1NLGFBQUE4NUQsRUFBQTMrRCxLQUNBNCtELEVBQUFsbUUsRUFBQW1NLGFBQUF1NEQsRUFBQXA5RCxLQUNBNitELEVBQUFGLEVBQUFwNUIsZUFDQXU1QixFQUFBRCxFQUFBLElBQ0F4QixFQUFBdDNCLEVBQUFELEdBQUFybkMsSUFBQTIrRCxFQUFBMytELEdBQUF5SSxNQU9BLE9BTEFtMkQsRUEvVUEsS0FpVkFBLEVBalZBLEtBcVZBMEIsU0FHQSxTQUFBNzVELEVBQUF4TSxHQUNBLElBQ0FpRyxFQURBcWdFLEVBQUEsSUFBQXBDLEVBQUEsRUFBQTEzRCxFQUFBRixPQUVBc1MsS0FDQTJuRCxLQUNBcjJELEVBQUEsRUFFQSxZQUFBakssRUFBQXVHLEVBQUFnWCxTQUNBK2lELEVBQUFILEdBQUFwbUUsRUFBQTNHLElBQUE2UyxFQUFBakcsR0FDQXNnRSxFQUFBLEVBQUFILEdBQUFwbUUsRUFBQTNHLElBQUE2c0UsRUFBQWpnRSxHQUNBMlksRUFBQW9uRCxFQUFBbnlDLFlBQUEweUMsRUFBQSxLQUFBM25ELEdBQ0EwbkQsRUFBQXAyRCxLQUFBME8sRUFBQSxHQUNBMG5ELEVBQUFwMkQsS0FBQTBPLEVBQUEsR0FHQTVlLEVBQUFra0QsV0FDQW9pQixjQUNBM0IsV0FDQTZCLGVBQUFDLEVBQUEvQixFQUFBdUIsR0FBQSxHQUNBRSw2QkFNQSxTQUFBN0IsRUFBQXYrRCxHQUNBLE9BQUFBLEVBQUE0dEIsa0JBQUEsZ0JBQUE1dEIsRUFBQTR0QixpQkFBQTUxQixLQUdBLFNBQUF3bUUsRUFBQXgrRCxHQUNBLE9BQUFBLEVBQUFnRSxpQkFBQWhFLEVBQUFnRSxnQkFBQUUsTUFHQSxTQUFBdzhELEVBQUEvQixFQUFBdUIsRUFBQVMsR0FDQSxPQUFBdmlFLEVBQUF2TCxRQUFBOHJFLEVBQUFud0Isa0JBQUEweEIsSUFBQSxHQUFBUyxFQUFBVCxFQUFBdjRDLGNBQUF1NEMsRUFBQWxsRCxZQUFBLElBQUFrbEQsRUFBQXo0QyxrQkFBQSxHQUdBM3NCLEVBQUE4bEUsZ0JBdldBLFNBQUE3L0QsR0FDQSxJQUFBMEYsS0FDQWs0RCxFQUFBNTlELEVBQUFpVyxLQUdBLGdCQUFBMm5ELEVBQUEzbUUsS0FBQSxDQU1BLElBRkEsSUFBQTR3QixFQUFBKzFDLEVBQUFqNkMsZUFFQXB3QixFQUFBLEVBQWlCQSxFQUFBeU0sRUFBQXdGLE1BQW9CalMsSUFDckNtUyxFQUFBM1QsS0FBQXNMLEVBQUFvTyxVQUNBb2MsWUFDQW8yQyxRQVhBLFFBWUFDLFFBQUFmLEVBQUE1cEUsR0FDS3lNLElBR0wsSUFBQTgvRCxFQUFBM0IsRUFBQXo0RCxHQUNBMVAsS0FFQSxJQUFBekMsRUFBQSxFQUFpQkEsRUFBQXlNLEVBQUF3RixNQUFlalMsSUFBQSxDQUNoQyxJQUFBb0UsRUFBQW1vRSxFQUFBLE1BQUEzQyxFQUFBNXBFLEdBQ0FvRSxFQUFBb29FLGFBQUFwb0UsRUFBQXlSLE9BQUF6UixFQUFBK1AsTUFBQSxFQUNBMVIsRUFBQWpFLEtBQUE0RixHQUdBLE9BQUEzQixJQTRVQStELEVBQUFzc0MseUJBQ0F0c0MsRUFBQXVzQyxtQkFDQXZzQyxFQUFBd3NDLHVCQUNBeHNDLEVBQUE2TyxPQXhLQSxTQUFBckssRUFBQWIsR0FDQSxJQUFBb3JCLEVBQUF1ZCxFQUFBOW5DLEVBQUFiLEdBQ0ErcEMsRUFBQW5CLEVBQUF4ZCxHQUNBazNDLEtBQ0FDLEtBQ0E1aUUsRUFBQVEsS0FBQWlyQixFQUFBLFNBQUE3cEIsR0FDQSxJQUFBL0YsRUFBQStGLEVBQUFHLFVBQ0E4L0QsRUFBQWpnRSxFQUFBNHRCLGlCQUNBK3dDLEVBQUFzQixFQUFBMTNCLGNBQ0EwMkIsRUFBQVosRUFBQXIrRCxHQUNBaWhFLEVBQUF6NEIsRUFBQTgxQixFQUFBSyxJQUFBTSxHQUNBaUMsRUFBQUQsRUFBQTkyRCxPQUNBZzNELEVBQUFGLEVBQUF4NEQsTUFDQXkzRCxFQUFBRCxFQUFBejRDLGFBQUFtM0MsR0FDQXlDLEVBQUFwaEUsRUFBQTFNLElBQUEsbUJBQ0F5dEUsRUFBQTlCLEdBQUE4QixFQUFBOUIsT0FDQStCLEVBQUEvQixHQUFBK0IsRUFBQS9CLE9BRUFobEUsRUFBQWtrRCxXQUNBaDBDLE9BQUErMkQsRUFDQTlzRCxLQUFBK3NELElBVUEsSUFSQSxJQUFBaDdELEVBQUFsTSxFQUFBbU0sYUFBQTg1RCxFQUFBMytELEtBQ0E0K0QsRUFBQWxtRSxFQUFBbU0sYUFBQXU0RCxFQUFBcDlELEtBQ0FvL0QsRUFBQTViLEVBQUE5cUQsRUFBQWtNLEdBR0FrN0QsRUFBQW5CLEVBQUFwNUIsZUFDQTI1QixFQUFBQyxFQUFBL0IsRUFBQXVCLEVBQUFTLEdBRUFubkUsRUFBQSxFQUFBOE0sRUFBQXJNLEVBQUFzTSxRQUF5Qy9NLEVBQUE4TSxFQUFXOU0sSUFBQSxDQUNwRCxJQUFBaEcsRUFBQXlHLEVBQUEzRyxJQUFBNlMsRUFBQTNNLEdBQ0E4bkUsRUFBQXJuRSxFQUFBM0csSUFBQTZzRSxFQUFBM21FLEdBRUEsSUFBQSthLE1BQUEvZ0IsR0FBQSxDQUlBLElBbUJBaWEsRUFDQUMsRUFDQWpGLEVBQ0ErSSxFQWVBcUgsRUFyQ0Ewb0QsRUFBQS90RSxHQUFBLFVBQ0FndUUsRUFBQWYsRUFHQUUsSUFFQUksRUFBQTlCLEdBQUFxQyxLQUNBUCxFQUFBOUIsR0FBQXFDLElBQ0Fqc0UsRUFBQW9yRSxFQUVBamtFLEVBQUFpa0UsSUFNQWUsRUFBQVQsRUFBQTlCLEdBQUFxQyxHQUFBQyxJQVFBRixHQUVBNXpELEVBQUErekQsRUFDQTl6RCxHQUZBbUwsRUFBQW9uRCxFQUFBbnlDLGFBQUF0NkIsRUFBQTh0RSxLQUVBLEdBQUFKLEVBQ0F6NEQsRUFBQW9RLEVBQUEsR0FBQTRuRCxFQUNBanZELEVBQUEydkQsRUFFQXAzRCxLQUFBaUksSUFBQXZKLEdBQUEyNEQsSUFDQTM0RCxLQUFBLFFBQUEyNEQsR0FHQVQsSUFBQUksRUFBQTlCLEdBQUFxQyxHQUFBQyxJQUFBOTRELEtBR0FnRixHQURBb0wsRUFBQW9uRCxFQUFBbnlDLGFBQUF3ekMsRUFBQTl0RSxLQUNBLEdBQUEwdEUsRUFDQXh6RCxFQUFBOHpELEVBQ0EvNEQsRUFBQTA0RCxFQUNBM3ZELEVBQUFxSCxFQUFBLEdBQUE0bkQsRUFFQTEyRCxLQUFBaUksSUFBQVIsR0FBQTR2RCxJQUVBNXZELE1BQUEsUUFBQTR2RCxHQUdBVCxJQUFBSSxFQUFBOUIsR0FBQXFDLEdBQUFDLElBQUEvdkQsSUFHQXZYLEVBQUFpYixjQUFBMWIsR0FDQWlVLElBQ0FDLElBQ0FqRixRQUNBK0ksY0FHR3hVLE9BeUVIbEMsRUFBQWlsRSwrRUNqYUEsSUFBQTNoRSxFQUFBN0wsRUFBQSwyQ0FFQXdXLEVBQUF4VyxFQUFBLDhDQW9CQW9lLEVBQUE1RyxLQUFBNEcsR0F3RkF2WixFQUFBMEQsUUE5RUEsU0FBQTRELEVBQUE0c0QsR0FDQUEsUUFDQWx0RCxFQUFBb08sU0FBQTgrQyxHQUNBdmdELEtBQUEsVUFDQXNWLE1BQUEsVUFDQXZGLFVBQUEsT0FDQTJtRCxVQUFBLDJCQUNBbjZELE9BQUEsSUFFQSxJQUFBbzZELEVBQUEsSUFBQTM0RCxFQUFBa2MsTUFDQXRYLE9BQ0FqQixLQUFBNCtDLEVBQUFtVyxXQUVBbjZELE9BQUFna0QsRUFBQWhrRCxPQUNBQyxFQUFBLE1BRUFvNkQsRUFBQSxJQUFBNTRELEVBQUE2NEQsS0FDQTMxRCxPQUNBcEUsWUFBQThJLEVBQUEsRUFDQTlHLFVBQUE4RyxFQUFBLEtBQ0EzVSxFQUFBLElBRUEyUixPQUNBbUIsT0FBQXc4QyxFQUFBanJDLE1BQ0FoSixRQUFBLFFBQ0E4YSxVQUFBLEdBRUE3cUIsT0FBQWdrRCxFQUFBaGtELE9BQ0FDLEVBQUEsUUFFQXM2RCxFQUFBLElBQUE5NEQsRUFBQWtjLE1BQ0F0WCxPQUNBakIsS0FBQSxPQUNBM0IsS0FBQXVnRCxFQUFBdmdELEtBQ0FnUixhQUFBLFFBQ0ErbEQsYUFBQSxHQUNBM21ELFNBQUFtd0MsRUFBQXh3QyxXQUVBeFQsT0FBQWdrRCxFQUFBaGtELE9BQ0FDLEVBQUEsUUFFQW82RCxFQUFBSSxjQUFBLEdBQUExM0QsS0FBQSxLQUNBUixTQUFBLEVBQUE4RyxFQUFBLElBQ0dyRyxNQUFBLGlCQUNIcTNELEVBQUFJLGNBQUEsR0FBQTEzRCxLQUFBLEtBQ0F4QyxXQUFBLEVBQUE4SSxFQUFBLElBQ0dtd0IsTUFBQSxLQUFBeDJCLE1BQUEsaUJBQ0gsSUFBQWdGLEVBQUEsSUFBQXZHLEVBQUEwQixNQTRCQSxPQTNCQTZFLEVBQUFoRSxJQUFBcTJELEdBQ0FyeUQsRUFBQWhFLElBQUF1MkQsR0FDQXZ5RCxFQUFBaEUsSUFBQW8yRCxHQUVBcHlELEVBQUEwOUMsT0FBQSxXQUNBLElBQUF4OEMsRUFBQTlSLEVBQUF5UixXQUFBLEVBQ0FNLEVBQUEvUixFQUFBMFIsWUFBQSxFQUNBdXhELEVBQUE1MUQsVUFDQXlFLEtBQ0FDLE9BRUEsSUFBQXpVLEVBQUEybEUsRUFBQTExRCxNQUFBalEsRUFDQTZsRSxFQUFBOTFELFVBQ0EwQixFQUFBK0MsRUFBQXhVLEVBQ0EwUixFQUFBK0MsRUFBQXpVLEVBQ0F5TSxNQUFBLEVBQUF6TSxFQUNBd1YsT0FBQSxFQUFBeFYsSUFFQTBsRSxFQUFBMzFELFVBQ0EwQixFQUFBLEVBQ0FDLEVBQUEsRUFDQWpGLE1BQUEvSixFQUFBeVIsV0FDQXFCLE9BQUE5UyxFQUFBMFIsZUFJQWQsRUFBQTA5QyxTQUNBMTlDLG9FQzNHQSxJQUFBbFIsRUFBQTdMLEVBQUEsMkNBRUEraUIsRUFBQS9pQixFQUFBLDZDQUVBeXZFLEVBQUF6dkUsRUFBQSxnREFFQTB2RSxFQUFBMXZFLEVBQUEsNENBRUEydkUsRUFBQUQsRUFBQUMsc0JBQ0FqWSxFQUFBZ1ksRUFBQWhZLGVBSUFwbUQsRUFGQXRSLEVBQUEsNENBRUFzUixVQUVBOEYsRUFBQXBYLEVBQUEsNkNBRUE0dkUsRUFBQTV2RSxFQUFBLHVEQTBCQXVSLEVBQUFELElBU0FxdkIsRUFBQTVkLEVBQUE3UixRQUNBekwsS0FBQSxZQU1BckQsR0FBQSxHQVdBeEIsS0FBQSxHQU1BME0sU0FBQSxHQU1BQyxRQUFBLEdBTUFrVyxlQUFBLEVBTUEzTyxjQUFBLEtBTUE1SSxRQUFBLEtBUUEyakUsbUJBTUFsNUQsSUFBQSxLQVFBZ3NCLFdBQUEsS0FDQW10QyxhQUFBLFNBQUE5OEQsRUFBQTZ2QixFQUFBMzJCLEVBQUE2akUsR0FDQWh0RCxFQUFBL2pCLEtBQUF5TCxLQUFBdUksRUFBQTZ2QixFQUFBMzJCLEVBQUE2akUsR0FDQXRsRSxLQUFBa00sSUFBQTg0RCxFQUFBTyxPQUFBLGlCQUVBajlELEtBQUEsU0FBQUMsRUFBQTZ2QixFQUFBMzJCLEVBQUE2akUsR0FDQXRsRSxLQUFBcTRCLHFCQUFBOXZCLEVBQUE5RyxJQUVBNDJCLHFCQUFBLFNBQUE5dkIsRUFBQTlHLEdBQ0EsSUFBQXkyQixFQUFBbDRCLEtBQUFrNEIsV0FDQXN0QyxFQUFBdHRDLEVBQUF2ckIsRUFBQTg0RCxnQkFBQWw5RCxNQUNBbTlELEVBQUFqa0UsRUFBQWtrRSxXQUNBdmtFLEVBQUFpZ0QsTUFBQTk0QyxFQUFBbTlELEVBQUFwdkUsSUFBQTBKLEtBQUE2QyxXQUNBekIsRUFBQWlnRCxNQUFBOTRDLEVBQUF2SSxLQUFBNGxFLG9CQUVBMXRDLEdBQ0F2ckIsRUFBQWs1RCxpQkFBQXQ5RCxFQUFBaTlELEVBQUF0dEMsSUFHQW52QixZQUFBLFNBQUFSLEVBQUErOEQsR0FDQWxrRSxFQUFBaWdELE1BQUFyaEQsS0FBQXVJLFVBQUEsR0FDQSxJQUFBMnZCLEVBQUFsNEIsS0FBQWs0QixXQUVBQSxHQUNBdnJCLEVBQUFrNUQsaUJBQUE3bEUsS0FBQXVJLFNBQUEydkIsSUFJQTFCLGNBQUEsU0FBQXN2QyxFQUFBMzlDLEtBQ0F5OUMsaUJBQUEsV0FDQSxJQUFBNytELEVBQUFELEVBQUE5RyxNQUVBLElBQUErRyxFQUFBc0QsY0FBQSxDQUlBLElBSEEsSUFBQTA3RCxLQUNBQyxFQUFBaG1FLEtBQUF3QixZQUVBd2tFLEdBQUEsQ0FDQSxJQUFBamlFLEVBQUFpaUUsRUFBQTN4RSxVQUFBZ1csY0FDQXRHLEdBQUFnaUUsRUFBQWp3RSxLQUFBaU8sR0FDQWlpRSxJQUFBQyxXQUtBLElBRkEsSUFBQTU3RCxLQUVBL1MsRUFBQXl1RSxFQUFBeHVFLE9BQUEsRUFBc0NELEdBQUEsRUFBUUEsSUFDOUMrUyxFQUFBakosRUFBQWlnRCxNQUFBaDNDLEVBQUEwN0QsRUFBQXp1RSxJQUFBLEdBR0F5UCxFQUFBc0QsZ0JBR0EsT0FBQXRELEVBQUFzRCxlQUVBNjdELHVCQUFBLFNBQUFyakUsR0FDQSxPQUFBN0MsS0FBQXlCLFFBQUEwa0UsaUJBQ0F0akUsV0FDQWtZLE1BQUEvYSxLQUFBMUosSUFBQXVNLEVBQUEsWUFDQWxMLEdBQUFxSSxLQUFBMUosSUFBQXVNLEVBQUEsY0FrQkFxaUUsRUFBQWh2QyxHQUNBa3dDLG9CQUFBLElBRUFwQixFQUFBcUIsdUJBQUFud0MsR0FFQTh1QyxFQUFBc0Isd0JBQUFwd0MsRUFFQSxTQUFBbmQsR0FDQSxJQUFBd3RELEtBQ0FubEUsRUFBQVEsS0FBQXMwQixFQUFBc3dDLHFCQUFBenRELEdBQUEsU0FBQWdKLEdBQ0F3a0QsSUFBQWxyRSxPQUFBMG1CLEVBQUExdEIsVUFBQTRqQyxvQkFHQXN1QyxFQUFBbmxFLEVBQUExRyxJQUFBNnJFLEVBQUEsU0FBQXZyRSxHQUNBLE9BQUFpeUQsRUFBQWp5RCxHQUFBazhELE9BR0EsWUFBQW4rQyxHQUFBM1gsRUFBQXZMLFFBQUEwd0UsRUFBQSxlQUNBQSxFQUFBNThCLFFBQUEsV0FHQSxPQUFBNDhCLElBR0FubEUsRUFBQTBLLE1BQUFvcUIsRUFBQWl2QyxHQUNBLElBQUFqakUsRUFBQWcwQixFQUNBOTdCLEVBQUEwRCxRQUFBb0UsZ0VDL05BM00sRUFBQSx3Q0FFQTJyQixRQUZBLElBSUExYSxFQUFBalIsRUFBQSwyQ0FFQXFNLEVBQUE0RSxFQUFBNUUsS0FDQTZ5QyxFQUFBanVDLEVBQUFpdUMsT0FDQS81QyxFQUFBOEwsRUFBQTlMLElBQ0F1TCxFQUFBTyxFQUFBUCxRQUNBcFEsRUFBQTJRLEVBQUEzUSxRQUNBMHZCLEVBQUEvZSxFQUFBK2UsU0FDQWtRLEVBQUFqdkIsRUFBQWl2QixTQUNBK0IsRUFBQWh4QixFQUFBZ3hCLGNBQ0F1dUIsRUFBQXYvQyxFQUFBdS9DLE9BQ0FwbEMsRUFBQW5hLEVBQUFtYSxNQUNBMGdDLEVBQUE3NkMsRUFBQTY2QyxNQUNBNTZDLEVBQUFELEVBQUFDLE9BQ0FxRixFQUFBdEYsRUFBQXNGLE1BRUE5RCxFQUFBelMsRUFBQSw0Q0FFQStpQixFQUFBL2lCLEVBQUEsNkNBRUEyZ0MsRUFBQTNnQyxFQUFBLGlEQUVBa3hFLEVBQUFseEUsRUFBQSxxREFFQW14RSxFQUFBbnhFLEVBQUEsMERBSUFrMUQsRUFGQWwxRCxFQUFBLDBEQUVBazFELHFCQXVDQWtjLEVBQUEsY0FTQXRhLEVBQUEvekMsRUFBQTdSLFFBQ0E2QixLQUFBLFNBQUFDLEVBQUE2dkIsRUFBQWkyQixFQUFBeUQsR0FDQXpELFFBQ0FydUQsS0FBQXVJLE9BQUEsS0FPQXZJLEtBQUE2dUQsT0FBQSxJQUFBdjJDLEVBQUErMUMsR0FLQXJ1RCxLQUFBNG1FLGVBQUE5VSxHQUVBSCxVQUFBLFNBQUFwcEQsRUFBQXdwRCxHQUNBaE0sSUFBQTRnQixLQUFBcCtELEdBQUEsZ0NBRUF2SSxLQUFBNG1FLGVBQUFqVixVQUFBcHBELEVBQUF3cEQsR0FFQS94RCxLQUFBKzRELFlBQUEsT0FVQUEsWUFBQSxTQUFBLzlELEdBQ0EsSUFBQTg5RCxHQUFBLEVBQ0FoSCxFQUFBOXhELEtBQUE0bUUsZUFFQSxJQUFBNXJFLEdBQUEsYUFBQUEsRUFBQSxDQUNBLElBQUE2ckUsRUFBQS9VLEVBQUFnVixZQUFBLGFBQUE5ckUsR0FFQWdGLEtBQUF1SSxRQUFBLGFBQUF2TixHQUdBZ0YsS0FBQTQwRCxjQUNBNTBELEtBQUErSSxZQUFBODlELElBMmVBLFNBQUFBLEdBQ0FBLElBR0E3bUUsS0FBQXVJLFVBQ0F2SSxLQUFBdUksT0FBQW8rRCxHQUFBLEVBUUEzbUUsS0FBQWl2RCxlQUFBejNCLEdBQ0ExSyxZQVNBOXNCLEtBQUErbUUsZUFDQS9tRSxLQUFBZ25FLGtCQTlDQSxTQUFBeitELEVBQUE4bEQsR0FHQSxJQUFBNFksRUFBQTErRCxFQUFBOGEsUUFBQTlhLEVBQUEyK0QsV0FDQXRsRSxFQUFBeXNELEVBQUEsU0FBQThZLEVBQUFoeEUsR0FDQSxlQUFBQSxHQUFBOHdFLEdBS0Evd0MsRUFBQWt4QyxTQUFBanhFLEtBQ0EsaUJBQUFneEUsRUFDQTUrRCxFQUFBcFMsR0FBQW9TLEVBQUFwUyxHQUFBa3JELEVBQUE5NEMsRUFBQXBTLEdBQUFneEUsR0FBQSxHQUFBeG1ELEVBQUF3bUQsR0FFQSxNQUFBNStELEVBQUFwUyxLQUNBb1MsRUFBQXBTLEdBQUFneEUsTUFnQ0FFLENBQUFSLEVBQUE3bUUsS0FBQTZ1RCxPQUFBdG1ELFFBRUE4NEMsRUFBQXdsQixFQUFBSixHQUFBLEdBQ0F6bUUsS0FBQStJLFlBQUE4OUQsSUExZ0JBdHlFLEtBQUF5TCxLQUFBNm1FLEdBTUEvTixHQUFBLEVBT0EsR0FKQSxhQUFBOTlELEdBQUEsVUFBQUEsR0FDQWdGLEtBQUE0MEQsZUFHQTU1RCxHQUFBLGFBQUFBLEdBQUEsYUFBQUEsRUFBQSxDQUNBLElBQUFzc0UsRUFBQXhWLEVBQUF5VixrQkFBQXZuRSxNQUNBc25FLElBQUF0bkUsS0FBQStJLFlBQUF1K0QsR0FBQXhPLEdBQUEsR0FHQSxJQUFBOTlELEdBQUEsYUFBQUEsR0FBQSxVQUFBQSxFQUFBLENBQ0EsSUFBQXdzRSxFQUFBMVYsRUFBQTJWLGVBQUF6bkUsVUFBQTBtQixNQUVBOGdELEVBQUFqd0UsUUFDQXFLLEVBQUE0bEUsRUFBQSxTQUFBRSxHQUNBMW5FLEtBQUErSSxZQUFBMitELEVBQUE1TyxHQUFBLElBQ1M5NEQsTUFJVCxPQUFBODRELEdBTUEvdkQsWUFBQSxTQUFBQyxHQUNBLElBQUFULEVBQUF2SSxLQUFBdUksT0FDQW8vRCxFQUFBM25FLEtBQUFpdkQsZUFDQTJZLEtBQ0FuZCxFQUFBenFELE1BR0E0QixFQUFBb0gsRUFBQSxTQUFBNitELEVBQUFobEUsR0FDQSxNQUFBZ2xFLElBSUEzeEMsRUFBQWt4QyxTQUFBdmtFLEdBR09BLEdBQ1Ara0UsRUFBQTl4RSxLQUFBK00sR0FGQTBGLEVBQUExRixHQUFBLE1BQUEwRixFQUFBMUYsR0FBQThkLEVBQUFrbkQsR0FBQXhtQixFQUFBOTRDLEVBQUExRixHQUFBZ2xFLEdBQUEsTUFLQTN4QyxFQUFBNHhDLGtCQUFBRixFQUFBMXhDLEVBQUE2eEMsdUJBRUEsU0FBQWxsRSxFQUFBbzFCLEdBQ0EsSUFBQSt2QyxFQUFBaGdFLEVBQUE4N0MsaUJBQUE5NkMsRUFBQW5HLElBQ0FvbEUsRUFBQWpnRSxFQUFBa2dFLGdCQUFBUCxFQUFBcnhFLElBQUF1TSxHQUFBbWxFLEdBQ0FoZ0UsRUFBQW1nRSxjQUFBRixHQUVBcm1FLEVBQUFxbUUsRUFBQSxTQUFBdnNFLEVBQUFxZixHQUNBLElBQUFoWCxFQUFBckksRUFBQTZNLE9BRUFnZCxFQUFBeGhCLEtBQ0FySSxFQUFBMHNFLFFBQUF2bEUsV0FDQW5ILEVBQUEwc0UsUUFBQXRsRSxRQWtlQSxTQUFBRCxFQUFBaWpFLEVBQUF1QyxHQUlBLE9BSEF2QyxFQUFBOXFFLEtBQUE4cUUsRUFBQTlxRSxLQUFBcXRFLElBQUF2bEUsUUFDQW96QixFQUFBb3lDLGlCQUFBemxFLEVBQUFpakUsR0FwZUF3QyxDQUFBemxFLEVBQUFrQixFQUFBckksRUFBQXV1RCxVQUdBLElBQUFtYixFQStjQSxTQUFBdUMsRUFBQVksR0FDQXRpRSxFQUFBc2lFLEtBQ0FBLFlBR0EsSUFBQUMsS0FJQSxPQUhBNW1FLEVBQUEybUUsRUFBQSxTQUFBdnRFLEdBQ0F3dEUsRUFBQXh0RSxJQUFBMnNFLEVBQUFyeEUsSUFBQTBFLFFBQUFQLFVBRUErdEUsRUF4ZEFDLENBQUFkLEVBQUExdkMsR0FDQTF2QixFQUFBMUYsTUFDQThrRSxFQUFBcHhFLElBQUFzTSxNQUNBakIsRUFBQXFtRSxFQUFBLFNBQUFsakIsRUFBQWhxQyxHQUNBLElBQUErYixFQUFBaXVCLEVBQUFrRixNQUNBNmIsRUFBQS9nQixFQUFBeDhDLE9BS0EsR0FKQXc5QyxFQUFBeGdDLEVBQUF1Z0QsSUFBQWh2QyxFQUFBLDhCQUlBZ3ZDLEVBR1MsQ0FDVCxJQUFBNEMsRUFBQXh5QyxFQUFBdVgsU0FBQTVxQyxFQUFBa2lELEVBQUFxakIsUUFBQXRsRSxTQUFBLEdBRUEsR0FBQWcwQixnQkFBQTR4QyxFQUNBNXhDLEVBQUEzZ0MsS0FBQTR1RCxFQUFBcWpCLFFBQUFqeUUsS0FFQTJnQyxFQUFBL3RCLFlBQUErOEQsRUFBQTlsRSxNQUNBODJCLEVBQUFOLGNBQUFzdkMsR0FBQSxPQUNXLENBRVgsSUFBQVIsRUFBQTcrRCxHQUNBMitELGtCQUNBcHNELGVBQUErQixHQUNhZ3FDLEVBQUFxakIsU0FDYnR4QyxFQUFBLElBQUE0eEMsRUFBQTVDLEVBQUE5bEUsVUFBQXNsRSxHQUNBNytELEVBQUFxd0IsRUFBQXd1QyxHQUNBeHVDLEVBQUF4dUIsS0FBQXc5RCxFQUFBOWxFLFVBQUFzbEUsR0FLQXh1QyxFQUFBTixjQUFBLGVBdkJBTSxFQUFBL3RCLGVBQXVDL0ksTUFDdkM4MkIsRUFBQU4sa0JBQXlDLEdBMEJ6Q214QyxFQUFBcnhFLElBQUF1TSxHQUFBa1ksR0FBQStiLEVBQ0F2dUIsRUFBQTFGLEdBQUFrWSxHQUFBK2IsRUFBQXZ1QixRQUNPdkksTUFFUCxXQUFBNkMsR0FDQThsRSxFQUFBM29FLEtBQUEybkUsRUFBQXJ4RSxJQUFBLFlBMURBMEosTUE4REFBLEtBQUFnbkUsa0JBQUF4dkMsRUFBQXgzQixLQUFBK21FLGVBQUEvbUUsS0FBQSttRSxxQkFRQTdVLFVBQUEsV0FDQSxJQUFBM3BELEVBQUFvWSxFQUFBM2dCLEtBQUF1SSxRQWdCQSxPQWZBM0csRUFBQTJHLEVBQUEsU0FBQStsRCxFQUFBenJELEdBQ0EsR0FBQXF6QixFQUFBa3hDLFNBQUF2a0UsR0FBQSxDQUdBLElBRkEsSUFFQXZMLEdBRkFnM0QsRUFBQXRtRCxFQUFBODdDLGlCQUFBd0ssSUFFQS8yRCxPQUFBLEVBQXFDRCxHQUFBLEVBQVFBLElBRTdDMFEsRUFBQTRnRSxVQUFBdGEsRUFBQWgzRCxLQUNBZzNELEVBQUFqeEQsT0FBQS9GLEVBQUEsR0FJQWlSLEVBQUExRixHQUFBeXJELFlBR0EvbEQsRUFBQW8rRCxHQUNBcCtELEdBTUFvOUQsU0FBQSxXQUNBLE9BQUEzbEUsS0FBQTZ1RCxRQVFBanNDLGFBQUEsU0FBQS9mLEVBQUFyRyxHQUNBLElBQUFzRCxFQUFBRSxLQUFBaXZELGVBQUEzNEQsSUFBQXVNLEdBRUEsR0FBQS9DLEVBQ0EsT0FBQUEsRUFBQXRELEdBQUEsSUFjQTJwRSxnQkFBQSxTQUFBbFEsR0FDQSxJQUFBcHpELEVBQUFvekQsRUFBQXB6RCxTQUVBLElBQUFBLEVBQ0EsU0FHQSxJQVVBOUksRUFWQWdoQixFQUFBazdDLEVBQUFsN0MsTUFDQXBqQixFQUFBcytELEVBQUF0K0QsR0FDQXhCLEVBQUE4L0QsRUFBQTkvRCxLQUVBMHlFLEVBQUE3b0UsS0FBQWl2RCxlQUFBMzRELElBQUF1TSxHQUVBLElBQUFnbUUsTUFBQXR4RSxPQUNBLFNBS0EsU0FBQXdqQixFQUNBOVUsRUFBQThVLEtBQ0FBLE9BR0FoaEIsRUFBQTA2QyxFQUFBLzVDLEVBQUFxZ0IsRUFBQSxTQUFBdmUsR0FDQSxPQUFBcXNFLEVBQUFyc0UsS0FDTyxTQUFBMnlCLEdBQ1AsUUFBQUEsU0FFSyxTQUFBeDNCLEVBQUEsQ0FDTCxJQUFBbXhFLEVBQUE3aUUsRUFBQXRPLEdBQ0FvQyxFQUFBMDZDLEVBQUFvMEIsRUFBQSxTQUFBRSxHQUNBLE9BQUFELEdBQUFqekUsRUFBQThCLEVBQUFveEUsRUFBQXB4RSxLQUFBLElBQUFteEUsR0FBQUMsRUFBQXB4RSxjQUVLLFNBQUF4QixFQUFBLENBQ0wsSUFBQTZ5RSxFQUFBL2lFLEVBQUE5UCxHQUNBNEQsRUFBQTA2QyxFQUFBbzBCLEVBQUEsU0FBQUUsR0FDQSxPQUFBQyxHQUFBbnpFLEVBQUFNLEVBQUE0eUUsRUFBQTV5RSxPQUFBLElBQUE2eUUsR0FBQUQsRUFBQTV5RSxnQkFJQTRELEVBQUE4dUUsRUFBQXB1RSxRQUdBLE9BQUF3dUUsRUFBQWx2RSxFQUFBazhELElBK0JBcDVCLGVBQUEsU0FBQW81QixHQUNBLElBQUFsekQsRUFBQWt6RCxFQUFBbHpELE1BQ0FGLEVBQUFvekQsRUFBQXB6RCxTQUNBcW1FLEVBSUEsU0FBQUMsR0FDQSxJQUFBQyxFQUFBdm1FLEVBQUEsUUFDQXdtRSxFQUFBeG1FLEVBQUEsS0FDQXltRSxFQUFBem1FLEVBQUEsT0FDQSxPQUFBc21FLEdBQUEsTUFBQUEsRUFBQUMsSUFBQSxNQUFBRCxFQUFBRSxJQUFBLE1BQUFGLEVBQUFHLEdBTU8sTUFMUHptRSxXQUVBa1ksTUFBQW91RCxFQUFBQyxHQUNBenhFLEdBQUF3eEUsRUFBQUUsR0FDQWx6RSxLQUFBZ3pFLEVBQUFHLElBYkFDLENBQUF4bUUsR0FFQSxPQWVBLFNBQUFtL0MsR0FDQSxPQUFBK1QsRUFBQXhoQixTQUFBeU4sRUFBQStULEVBQUF4aEIsUUFBQXlOLEVBaEJBc25CLENBQUFQLEVBREFDLEVBQUFscEUsS0FBQW1tRSxnQkFBQStDLEdBQUFscEUsS0FBQWl2RCxlQUFBMzRELElBQUF1TSxHQUNBb3pELEtBMkNBcnpELGNBQUEsU0FBQUMsRUFBQTNJLEVBQUFpN0MsR0FDQSxJQUFBd3lCLEVBQUEzbkUsS0FBQWl2RCxlQUVBLHNCQUFBcHNELEVBQ0FzeUMsRUFBQWo3QyxFQUNBQSxFQUFBMkksRUFDQThrRSxFQUFBL2xFLEtBQUEsU0FBQTZuRSxFQUFBMXdELEdBQ0FuWCxFQUFBNm5FLEVBQUEsU0FBQTVXLEVBQUE5M0MsR0FDQTdnQixFQUFBM0YsS0FBQTRnRCxFQUFBcDhCLEVBQUE4NUMsRUFBQTkzQyxZQUdLLEdBQUEwYSxFQUFBNXlCLEdBQ0xqQixFQUFBK2xFLEVBQUFyeEUsSUFBQXVNLEdBQUEzSSxFQUFBaTdDLFFBQ0ssR0FBQTV2QixFQUFBMWlCLEdBQUEsQ0FDTCxJQUFBNm1FLEVBQUExcEUsS0FBQTY4QixlQUFBaDZCLEdBQ0FqQixFQUFBOG5FLEVBQUF4dkUsRUFBQWk3QyxLQVFBcGEsZ0JBQUEsU0FBQTVrQyxHQUNBLElBQUEyMkIsRUFBQTlzQixLQUFBaXZELGVBQUEzNEQsSUFBQSxVQUVBLE9BQUFtK0MsRUFBQTNuQixFQUFBLFNBQUE2OEMsR0FDQSxPQUFBQSxFQUFBeHpFLFlBUUF1NkIsaUJBQUEsU0FBQXJELEdBQ0EsT0FBQXJ0QixLQUFBaXZELGVBQUEzNEQsSUFBQSxVQUFBKzJCLElBVUF1OEMsZ0JBQUEsU0FBQTltRSxHQUNBLElBQUFncUIsRUFBQTlzQixLQUFBaXZELGVBQUEzNEQsSUFBQSxVQUVBLE9BQUFtK0MsRUFBQTNuQixFQUFBLFNBQUE2OEMsR0FDQSxPQUFBQSxFQUFBN21FLGVBT0ErbUUsVUFBQSxXQUNBLE9BQUE3cEUsS0FBQWl2RCxlQUFBMzRELElBQUEsVUFBQW1FLFNBTUFxdkUsZUFBQSxXQUNBLE9BQUE5cEUsS0FBQWl2RCxlQUFBMzRELElBQUEsVUFBQWlCLFFBVUE4OEIsV0FBQSxTQUFBbjZCLEVBQUFpN0MsR0FFQXZ6QyxFQUFBNUIsS0FBQSttRSxlQUFBLFNBQUFnRCxHQUNBLElBQUFqOUMsRUFBQTlzQixLQUFBaXZELGVBQUEzNEQsSUFBQSxVQUFBeXpFLEdBRUE3dkUsRUFBQTNGLEtBQUE0Z0QsRUFBQXJvQixFQUFBaTlDLElBQ0svcEUsT0FTTDI0QixjQUFBLFNBQUF6K0IsRUFBQWk3QyxHQUNBdnpDLEVBQUE1QixLQUFBaXZELGVBQUEzNEQsSUFBQSxVQUFBNEQsRUFBQWk3QyxJQVdBaCtCLGlCQUFBLFNBQUFyVSxFQUFBNUksRUFBQWk3QyxHQUVBdnpDLEVBQUE1QixLQUFBK21FLGVBQUEsU0FBQWdELEdBQ0EsSUFBQWo5QyxFQUFBOXNCLEtBQUFpdkQsZUFBQTM0RCxJQUFBLFVBQUF5ekUsR0FFQWo5QyxFQUFBaHFCLGFBQ0E1SSxFQUFBM0YsS0FBQTRnRCxFQUFBcm9CLEVBQUFpOUMsSUFFSy9wRSxPQVVMZ3FFLG9CQUFBLFNBQUFsbkUsRUFBQTVJLEVBQUFpN0MsR0FDQSxPQUFBdnpDLEVBQUE1QixLQUFBNHBFLGdCQUFBOW1FLEdBQUE1SSxFQUFBaTdDLElBTUFuYyxpQkFBQSxTQUFBaDJCLEdBRUEsYUFBQWhELEtBQUFnbkUsa0JBQUExd0UsSUFBQTBNLEVBQUFnVyxpQkFNQWl4RCx3QkFBQSxXQUNBLE9BQUFqcUUsS0FBQSttRSxvQkFBQXRzRSxTQU9BcWlDLGFBQUEsU0FBQTVpQyxFQUFBaTdDLEdBR0F3ekIsRUFBQTNvRSxLQURBeTBDLEVBQUF6MEMsS0FBQWl2RCxlQUFBMzRELElBQUEsVUFBQTRELEVBQUFpN0MsS0FHQXlmLFlBQUEsU0FBQWx5RCxHQUNBLElBQUFpbEUsRUFBQTNuRSxLQUFBaXZELGVBQ0EwWixFQUFBM29FLEtBQUEybkUsRUFBQXJ4RSxJQUFBLFdBQ0EsSUFBQTR6RSxLQUNBdkMsRUFBQS9sRSxLQUFBLFNBQUE2bkUsRUFBQTF3RCxHQUNBbXhELEVBQUFwMEUsS0FBQWlqQixLQUVBbWQsRUFBQTR4QyxrQkFBQW9DLEVBQUFoMEMsRUFBQTZ4Qyx1QkFBQSxTQUFBaHZELEVBQUFrZixHQUNBcjJCLEVBQUErbEUsRUFBQXJ4RSxJQUFBeWlCLEdBQUEsU0FBQTg1QyxJQUNBLFdBQUE5NUMsSUFNQSxTQUFBL1YsRUFBQU4sR0FDQSxHQUFBQSxFQUFBLENBQ0EsSUFBQXFZLEVBQUFyWSxFQUFBeW5FLFlBQ0F4eUUsRUFBQStLLEVBQUE0SixTQUNBblcsRUFBQXVNLEVBQUFtMkIsV0FDQSxhQUFBOWQsR0FBQS9YLEVBQUFnVyxpQkFBQStCLEdBQUEsTUFBQXBqQixHQUFBcUwsRUFBQXJMLFFBQUEsTUFBQXhCLEdBQUE2TSxFQUFBN00sVUFYQWkwRSxDQUFBdlgsRUFBQW53RCxLQUFBbXdELEVBQUErQixxQkF5R0EsU0FBQStULEVBQUFsbkUsRUFBQW9yQixHQUNBcHJCLEVBQUF1bEUsa0JBQUF4dkMsRUFBQS8xQixFQUFBc2xFLGVBQUFyc0UsRUFBQW15QixFQUFBLFNBQUFDLEdBQ0EsT0FBQUEsRUFBQTlULHNCQVFBLFNBQUFpd0QsRUFBQVEsRUFBQXhULEdBR0EsT0FBQUEsRUFBQTNoRSxlQUFBLFdBQUFtZ0QsRUFBQWcxQixFQUFBLFNBQUFWLEdBQ0EsT0FBQUEsRUFBQWptRSxVQUFBbXpELEVBQUFuekQsVUFDRzJtRSxFQVNIMzlELEVBQUF1Z0QsRUFBQXFhLEdBQ0EsSUFBQXhrRSxFQUFBbXFELEVBQ0FqeUQsRUFBQTBELFFBQUFvRSwrRENoc0JBLElBQUFkLEVBQUE3TCxFQUFBLDJDQUVBMDdCLEVBQUExN0IsRUFBQSwwQ0FJQXNSLEVBRkF0UixFQUFBLDRDQUVBc1IsVUFFQW8rRCxFQUFBMXZFLEVBQUEsNENBRUF5MEIsRUFBQWk3QyxFQUFBajdDLGtCQUNBbzVCLEVBQUE2aEIsRUFBQTdoQixpQkFFQWluQixFQUFBOTBFLEVBQUEsdURBRUErMEUsRUFBQS8wRSxFQUFBLHVEQUVBZzFFLEVBQUFoMUUsRUFBQSx1REFFQWkxRSxFQUFBajFFLEVBQUEsdURBd0JBdVcsRUFBQTFLLEVBQUEwSyxNQUNBaEYsRUFBQUQsSUFTQSxTQUFBeVIsRUFBQS9QLEVBQUE2dkIsRUFBQTMyQixHQUtBekIsS0FBQW80QixjQU1BcDRCLEtBQUF5QixVQU1BekIsS0FBQXVJLFNBK0dBLFNBQUFraUUsRUFBQTFuQixFQUFBMm5CLEVBQUF0eUMsR0FDQSxRQUFBOWdDLEVBQUEsRUFBaUJBLEVBQUFvekUsRUFBQW56RSxVQUVqQm16RSxFQUFBcHpFLElBT0EsT0FGQXlyRCxLQUFBLGlCQUFBQSxJQUFBMm5CLEVBQUFwekUsSUFBQSxPQVBxQ0EsS0FrQnJDLE9BSkEsTUFBQXlyRCxHQUFBM3FCLElBQ0EycUIsRUFBQTNxQixFQUFBOWhDLElBQUFvMEUsSUFHQTNuQixFQUlBLFNBQUE0bkIsRUFBQTMvQyxFQUFBNC9DLEdBQ0EsSUFBQUMsRUFBQS9qRSxFQUFBa2tCLEdBQUEyL0MsVUFDQSxPQUFBRSxJQUFBdDJFLEtBQUF5MkIsRUFBQTQvQyxHQUFBNS9DLEVBQUFvTixZQTdIQTlmLEVBQUFqa0IsV0FDQW1OLFlBQUE4VyxFQU1BaFEsS0FBQSxLQUtBUyxZQUFBLFNBQUFSLEdBQ0FuSCxFQUFBaWdELE1BQUFyaEQsS0FBQXVJLFVBQUEsSUFRQWpTLElBQUEsU0FBQXMwRSxFQUFBcnBCLEdBQ0EsYUFBQXFwQixFQUNBNXFFLEtBQUF1SSxPQUdBa2lFLEVBQUF6cUUsS0FBQXVJLE9BQUF2SSxLQUFBOHFFLFVBQUFGLElBQUFycEIsR0FBQW9wQixFQUFBM3FFLEtBQUE0cUUsS0FRQTU3RCxXQUFBLFNBQUExUCxFQUFBaWlELEdBQ0EsSUFBQWg1QyxFQUFBdkksS0FBQXVJLE9BQ0E0bUIsRUFBQSxNQUFBNW1CLE1BQUFqSixHQUNBODRCLEdBQUFtcEIsR0FBQW9wQixFQUFBM3FFLEtBQUFWLEdBTUEsT0FKQSxNQUFBNnZCLEdBQUFpSixJQUNBakosRUFBQWlKLEVBQUFwcEIsV0FBQTFQLElBR0E2dkIsR0FRQXhmLFNBQUEsU0FBQWk3RCxFQUFBeHlDLEdBQ0EsSUFDQTJ5QyxFQUVBLFdBQUF6eUQsRUFIQSxNQUFBc3lELEVBQUE1cUUsS0FBQXVJLE9BQUFraUUsRUFBQXpxRSxLQUFBdUksT0FBQXFpRSxFQUFBNXFFLEtBQUE4cUUsVUFBQUYsSUFFQXh5QyxNQUFBMnlDLEVBQUFKLEVBQUEzcUUsS0FBQTRxRSxLQUFBRyxFQUFBcDdELFNBQUFpN0QsR0FDQTVxRSxLQUFBeUIsVUFNQXVwRSxRQUFBLFdBQ0EsYUFBQWhyRSxLQUFBdUksUUFFQXFzRCxZQUFBLGFBRUFqMEMsTUFBQSxXQUVBLFdBQUErMkIsRUFEQTEzQyxLQUFBd0IsYUFDQUosRUFBQXVmLE1BQUEzZ0IsS0FBQXVJLFVBRUEwaUUsWUFBQSxTQUFBeDRCLEtBR0FxNEIsVUFBQSxTQUFBRixHQUtBLE1BSkEsaUJBQUFBLElBQ0FBLElBQUFsVSxNQUFBLE1BR0FrVSxHQVFBTSxtQkFBQSxTQUFBTCxHQUNBL2pFLEVBQUE5RyxNQUFBMnFFLFVBQUFFLEdBRUEzNkQsbUJBQUEsV0FDQSxJQUFBK2dCLEVBQUFLLEtBQUEsQ0FDQSxTQUFBdHhCLEtBQUF1SSxPQUFBNGEsVUFDQSxRQUFBbmpCLEtBQUF1SSxPQUFBNGEsVUFDTyxHQUFBbmpCLEtBQUFvNEIsWUFDUCxPQUFBcDRCLEtBQUFvNEIsWUFBQWxvQix3QkFtQ0E4WixFQUFBMVIsR0FDQThxQyxFQUFBOXFDLEdBQ0F4TSxFQUFBd00sRUFBQSt4RCxHQUNBditELEVBQUF3TSxFQUFBZ3lELEdBQ0F4K0QsRUFBQXdNLEVBQUFpeUQsR0FDQXorRCxFQUFBd00sRUFBQWt5RCxHQUNBLElBQUF0b0UsRUFBQW9XLEVBQ0FsZSxFQUFBMEQsUUFBQW9FLHVFQ3pOQSxJQUFBZCxFQUFBN0wsRUFBQSwyQ0FFQXlTLEVBQUF6UyxFQUFBLDRDQUVBMmdDLEVBQUEzZ0MsRUFBQSxpREEwQkFxTSxFQUFBUixFQUFBUSxLQUNBK2UsRUFBQXZmLEVBQUF1ZixNQUNBam1CLEVBQUEwRyxFQUFBMUcsSUFDQTJtRCxFQUFBamdELEVBQUFpZ0QsTUFDQThwQixFQUFBLG1CQXlEQSxTQUFBNWUsRUFBQTdxRCxHQUtBMUIsS0FBQTBtQixLQUFBaGxCLEVBTUExQixLQUFBb3JFLG9CQU1BcHJFLEtBQUFxckUsY0FNQXJyRSxLQUFBc3JFLGNBUUF0ckUsS0FBQXVyRSx3QkFNQXZyRSxLQUFBd3JFLGNBTUF4ckUsS0FBQXlyRSxlQW9OQSxTQUFBQyxFQUFBM29FLEVBQUE0b0UsRUFBQUMsR0FDQSxJQUFBQyxHQUNBcGdFLE1BQUFrZ0UsRUFDQW4zRCxPQUFBbzNELEVBQ0FFLFlBQUFILEVBQUFDLEdBR0FHLEdBQUEsRUFlQSxPQWRBM3FFLEVBQUFRLEtBQUFtQixFQUFBLFNBQUF2TSxFQUFBK1csR0FDQSxJQUFBeStELEVBQUF6K0QsRUFBQTArRCxNQUFBZCxHQUVBLEdBQUFhLEtBQUEsSUFBQUEsRUFBQSxJQUlBLElBQUFFLEVBQUFGLEVBQUEsR0FDQUcsRUFBQUgsRUFBQSxHQUFBL2QsZUFTQSxTQUFBbWUsRUFBQUMsRUFBQUgsR0FDQSxjQUFBQSxFQUNBRSxHQUFBQyxFQUNHLFFBQUFILEVBQ0hFLEdBQUFDLEVBR0FELElBQUFDLEdBZEFDLENBQUFULEVBQUFNLEdBQUEzMUUsRUFBQTAxRSxLQUNBSCxHQUFBLE1BR0FBLEVBL05BeGYsRUFBQWw0RCxXQUNBbU4sWUFBQStxRCxFQVNBb0YsVUFBQSxTQUFBNGEsRUFBQXhhLEdBQ0F3YSxHQUVBbnJFLEVBQUFRLEtBQUFvRyxFQUFBODdDLGlCQUFBeW9CLEVBQUF6L0MsUUFBQSxTQUFBQSxHQUNBQSxLQUFBN3ZCLE1BQUFtRSxFQUFBK2hELGFBQUFyMkIsRUFBQTd2QixPQUFBbUUsRUFBQW12RCxlQUFBempDLEVBQUE3dkIsUUFPQXN2RSxFQUFBNXJELEVBQUE0ckQsR0FBQSxHQUdBLElBQUFDLEVBQUF4c0UsS0FBQXdyRSxjQUNBaUIsRUE2R0EsU0FBQUYsRUFBQXhhLEVBQUEyYSxHQUNBLElBRUFDLEVBQ0E5RixFQUhBK0YsS0FDQUMsS0FJQUMsRUFBQVAsRUFBQVEsU0FFQVIsRUFBQTFGLGFBQ0FBLEVBQUEwRixFQUFBMUYsYUFJQWlHLEdBQUFQLEVBQUF0eUUsV0FDQTRzRSxRQUNBK0YsR0FBQUwsRUFBQXR5RSxhQUFBUSxTQUlBLEdBQUE4eEUsRUFBQVMsTUFBQSxDQUNBbkcsUUFDQSxJQUFBbUcsRUFBQVQsRUFBQVMsTUFDQXByRSxFQUFBb3JFLEVBQUEsU0FBQUMsR0FDQUEsS0FBQTFrRSxTQUNBMGtFLEVBQUFscUUsTUFDQThwRSxFQUFBLzJFLEtBQUFtM0UsR0FDU04sSUFFVEEsRUFBQU0sTUFPQXBHLElBQ0FBLEVBQUEwRixHQUtBMUYsRUFBQWtHLFdBQ0FsRyxFQUFBa0csU0FBQUQsR0FXQSxPQVBBbHJFLEdBQUFpbEUsR0FBQXhyRSxPQUFBdXhFLEdBQUF2eEUsT0FBQStGLEVBQUExRyxJQUFBbXlFLEVBQUEsU0FBQUcsR0FDQSxPQUFBQSxFQUFBemtFLFVBQ0csU0FBQUEsR0FDSDNHLEVBQUFtd0QsRUFBQSxTQUFBbWIsR0FDQUEsRUFBQTNrRSxFQUFBbWtFLFFBSUE3RixhQUNBK0Ysa0JBQ0FELGVBQ0FFLGNBdEtBdDRFLEtBQUF5TCxLQUFBdXNFLEVBQUF4YSxHQUFBeWEsR0FDQXhzRSxLQUFBeXJFLGVBQUFnQixFQUFBNUYsV0FFQTJGLElBNE9BLFNBQUFXLEVBQUFua0UsR0FFQXBILEVBREFvSCxRQUNBLFNBQUFva0UsRUFBQXZxRSxHQUNBLFNBQUF1cUUsRUFBQSxDQUlBLElBQUFDLEVBQUFGLEVBQUF0cUUsR0FFQSxHQUFBcXpCLEVBQUFreEMsU0FBQXZrRSxHQUVLLENBQ0x1cUUsRUFBQXBsRSxFQUFBODdDLGlCQUFBc3BCLEdBQ0FDLEVBQUFybEUsRUFBQTg3QyxpQkFBQXVwQixHQUNBLElBQUFwRixFQUFBamdFLEVBQUFrZ0UsZ0JBQUFtRixFQUFBRCxHQUNBRCxFQUFBdHFFLEdBQUFuSSxFQUFBdXRFLEVBQUEsU0FBQXZzRSxHQUNBLE9BQUFBLEVBQUE2TSxRQUFBN00sRUFBQXV1RCxNQUFBNUksRUFBQTNsRCxFQUFBdXVELE1BQUF2dUQsRUFBQTZNLFFBQUEsR0FBQTdNLEVBQUF1dUQsT0FBQXZ1RCxFQUFBNk0sY0FOQTRrRSxFQUFBdHFFLEdBQUF3K0MsRUFBQWdzQixFQUFBRCxHQUFBLE1BcFBBcmtFLENBQUF5akUsRUFBQTNGLFdBQUE0RixFQUFBNUYsWUFJQTRGLEVBQUFHLGdCQUFBcjFFLFNBQ0FpMUUsRUFBQUksZ0JBQUFILEVBQUFHLGlCQUdBSCxFQUFBSSxVQUFBdDFFLFNBQ0FpMUUsRUFBQUssVUFBQUosRUFBQUksV0FHQUosRUFBQUUsZUFDQUgsRUFBQUcsYUFBQUYsRUFBQUUsZUFHQTNzRSxLQUFBd3JFLGNBQUFpQixHQVFBM0YsWUFBQSxTQUFBd0csR0FDQSxJQUFBQyxFQUFBdnRFLEtBQUF3ckUsY0FPQSxPQUpBeHJFLEtBQUFvckUsaUJBQUExd0UsRUFBQTZ5RSxFQUFBWCxnQkFBQWpzRCxHQUNBM2dCLEtBQUFxckUsV0FBQTN3RSxFQUFBNnlFLEVBQUFWLFVBQUFsc0QsR0FDQTNnQixLQUFBc3JFLGNBQUEzcUQsRUFBQTRzRCxFQUFBWixjQUNBM3NFLEtBQUF1ckUsd0JBQ0E1cUQsRUFBQTJzRCxFQUtBQyxFQUFBMUcsV0FBQTdtRSxLQUFBeXJFLGlCQU9BbEUsa0JBQUEsU0FBQTlsRSxHQUNBLElBQUE4RyxFQUNBcWtFLEVBQUE1c0UsS0FBQW9yRSxpQkFFQSxHQUFBd0IsRUFBQXIxRSxPQUFBLENBR0EsSUFBQWkyRSxFQUFBL3JFLEVBQUFtaEIsYUFBQSxZQUVBNHFELElBQ0FqbEUsRUFBQW9ZLEVBQUFpc0QsRUFBQVksRUFBQUMsb0JBQUEsSUFJQSxPQUFBbGxFLEdBT0FrL0QsZUFBQSxTQUFBaG1FLEdBQ0EsSUFBQWtxRSxFQUFBM3JFLEtBQUEwbUIsS0FBQXZULFdBRUF5NEQsRUFBQTVyRSxLQUFBMG1CLEtBQUF0VCxZQUVBeTVELEVBQUE3c0UsS0FBQXFyRSxXQUNBc0IsRUFBQTNzRSxLQUFBc3JFLGNBQ0FodUIsS0FDQXZqRCxLQUVBLElBQUE4eUUsRUFBQXQxRSxTQUFBbzFFLEVBQ0EsT0FBQTV5RSxFQUlBLFFBQUF6QyxFQUFBLEVBQUFnUyxFQUFBdWpFLEVBQUF0MUUsT0FBMkNELEVBQUFnUyxFQUFTaFMsSUFDcERvMEUsRUFBQW1CLEVBQUF2MUUsR0FBQXlMLE1BQUE0b0UsRUFBQUMsSUFDQXR1QixFQUFBeG5ELEtBQUF3QixHQWtCQSxPQVpBZ21ELEVBQUEvbEQsUUFBQW8xRSxJQUNBcnZCLElBQUEsSUFHQUEsRUFBQS9sRCxTQW1IQSxTQUFBbTJFLEVBQUFDLEdBRUEsT0FBQUQsRUFBQXp4RSxLQUFBLE9BQUEweEUsRUFBQTF4RSxLQUFBLEtBckhBMnhFLENBQUF0d0IsRUFBQXQ5QyxLQUFBdXJFLHdCQUNBeHhFLEVBQUFXLEVBQUE0aUQsRUFBQSxTQUFBdmlDLEdBQ0EsT0FBQTRGLEdBQUEsSUFBQTVGLEVBQUE0eEQsRUFBQXBrRSxPQUFBc2tFLEVBQUE5eEQsR0FBQXhTLFdBS0F2SSxLQUFBdXJFLHFCQUFBanVCLEVBQ0F2akQsSUE0SkEsSUFBQW1JLEVBQUFxcUQsRUFDQW55RCxFQUFBMEQsUUFBQW9FLGdFQ2hiQTNNLEVBQUEsd0NBRUEyckIsUUFGQSxJQUlBOWYsRUFBQTdMLEVBQUEsMkNBRUEwN0IsRUFBQTE3QixFQUFBLDBDQUVBczRFLEVBQUF0NEUsRUFBQSw2Q0FFQXU0RSxFQUFBRCxFQUFBQyxXQUNBcHBDLEVBQUFtcEMsRUFBQW5wQyxXQUNBcXBDLEVBQUFGLEVBQUFFLFVBQ0FDLEVBQUFILEVBQUFHLGlCQUVBaG1FLEVBQUF6UyxFQUFBLDRDQUVBMmdDLEVBQUEzZ0MsRUFBQSxpREFFQW14RSxFQUFBbnhFLEVBQUEsMERBRUEwNEUsRUFBQTE0RSxFQUFBLHdEQUVBa2hDLEVBQUFsaEMsRUFBQSw2Q0FFQWt3RSxFQUFBaHZDLEVBQUFndkMsZ0JBQ0FJLEVBQUFwdkMsRUFBQW92QyxpQkFJQXFJLEVBRkEzNEUsRUFBQSw2Q0FFQTI0RSxXQUVBQyxFQUFBNTRFLEVBQUEsMERBRUFvMUQsRUFBQXdqQixFQUFBeGpCLGNBQ0Foa0QsRUFBQXduRSxFQUFBeG5FLFVBSUFtaEQsRUFGQXZ5RCxFQUFBLDBEQUVBdXlELGlCQW9CQWhoRCxFQUFBa0IsRUFBQW5CLFlBQ0E2bEQsRUFBQXgyQixFQUFBenZCLFFBQ0F6TCxLQUFBLGtCQUtBcXlCLFlBQUEsRUFFQXVELGlCQUFBLEtBTUF2bUIsY0FBQSxLQU9BM0IsbUJBQUEsS0FLQTBsRSxzQkFBQSxrQkFRQWwyQyxXQUFBLEtBQ0E1dkIsS0FBQSxTQUFBQyxFQUFBNnZCLEVBQUEzMkIsRUFBQTZqRSxHQUtBdGxFLEtBQUFxdEIsWUFBQXJ0QixLQUFBZ1osZUFDQWhaLEtBQUFxdUUsU0FBQUgsR0FDQTNrRSxNQUFBK2tFLEVBQ0F0TCxNQUFBdUwsSUFFQXZ1RSxLQUFBcXVFLFNBQUFsNUIsU0FDQW5xQixNQUFBaHJCLE1BRUFBLEtBQUFxNEIscUJBQUE5dkIsRUFBQTlHLEdBQ0FrcEQsRUFBQTNxRCxNQUNBLElBQUEvQyxFQUFBK0MsS0FBQWtKLGVBQUFYLEVBQUE5RyxHQUNBK3NFLEVBQUF2eEUsRUFBQStDLE1BQ0FBLEtBQUFxdUUsU0FBQWw1QixRQUFBbDRDLE9BTUE2SixFQUFBOUcsTUFBQXl1RSxvQkFBQXh4RSxFQVdBeXhFLEVBQUExdUUsT0FRQXE0QixxQkFBQSxTQUFBOXZCLEVBQUE5RyxHQUNBLElBQUF5MkIsRUFBQWw0QixLQUFBazRCLFdBQ0FzdEMsRUFBQXR0QyxFQUFBdXRDLEVBQUFsOUQsTUFLQW9tRSxFQUFBM3VFLEtBQUE4QyxRQUVBb3pCLEVBQUFreEMsU0FBQXVILEtBQ0FBLEdBQUEsVUFHQXZ0RSxFQUFBaWdELE1BQUE5NEMsRUFBQTlHLEVBQUFra0UsV0FBQXJ2RSxJQUFBMEosS0FBQThDLFVBQ0ExQixFQUFBaWdELE1BQUE5NEMsRUFBQXZJLEtBQUE0bEUsb0JBRUE1OUQsRUFBQThCLGdCQUFBdkIsRUFBQSxrQkFDQXZJLEtBQUE0dUUsa0JBQUFybUUsRUFBQXRMLE1BRUFpN0IsR0FDQTJ0QyxFQUFBdDlELEVBQUFpOUQsRUFBQXR0QyxJQUdBbnZCLFlBQUEsU0FBQThsRSxFQUFBcHRFLEdBRUFvdEUsRUFBQXp0RSxFQUFBaWdELE1BQUFyaEQsS0FBQXVJLE9BQUFzbUUsR0FBQSxHQUNBN3VFLEtBQUE0dUUsa0JBQUFDLEVBQUE1eEUsTUFDQSxJQUFBaTdCLEVBQUFsNEIsS0FBQWs0QixXQUVBQSxHQUNBMnRDLEVBQUE3bEUsS0FBQXVJLE9BQUFzbUUsRUFBQTMyQyxHQUdBeXlCLEVBQUEzcUQsTUFDQSxJQUFBL0MsRUFBQStDLEtBQUFrSixlQUFBMmxFLEVBQUFwdEUsR0FDQStzRSxFQUFBdnhFLEVBQUErQyxNQUNBQSxLQUFBcXVFLFNBQUFwVyxRQUNBajRELEtBQUFxdUUsU0FBQWw1QixRQUFBbDRDLE9BQ0E2SixFQUFBOUcsTUFBQXl1RSxvQkFBQXh4RSxFQUNBeXhFLEVBQUExdUUsT0FFQTR1RSxrQkFBQSxTQUFBM3hFLEdBSUEsR0FBQUEsSUFBQW1FLEVBQUEraEQsYUFBQWxtRCxHQUdBLElBRkEsSUFBQWtvQixHQUFBLFFBRUE3dEIsRUFBQSxFQUFxQkEsRUFBQTJGLEVBQUExRixPQUFpQkQsSUFDdEMyRixFQUFBM0YsSUFBQTJGLEVBQUEzRixHQUFBOFMsT0FDQXBDLEVBQUE4QixnQkFBQTdNLEVBQUEzRixHQUFBLFFBQUE2dEIsSUFVQWpjLGVBQUEsYUFPQTR5QyxXQUFBLFNBQUFyeUMsR0FJQXpKLEtBQUEySSxhQUNBbXpDLFdBQUFyeUMsRUFBQXhNLE9BV0FrRyxRQUFBLFNBQUE4aEMsR0FDQSxJQUFBNnBDLEVBQUFDLEVBQUEvdUUsTUFFQSxHQUFBOHVFLEVBQUEsQ0FDQSxJQUFBN3hFLEVBQUE2eEUsRUFBQTM1QixRQUFBbDRDLEtBQ0EsYUFBQWdvQyxFQUFBaG9DLElBQUEreEUsY0FBQS9wQyxHQU1BLE9BQUFuK0IsRUFBQTlHLE1BQUEvQyxNQU9BZ3lFLFFBQUEsU0FBQWh5RSxHQUNBLElBQUE2eEUsRUFBQUMsRUFBQS91RSxNQUVBLEdBQUE4dUUsRUFBQSxDQUNBLElBQUEzNUIsRUFBQTI1QixFQUFBMzVCLFFBRUFBLEVBQUFsNEMsVUFBQTZ4RSxFQUFBSSxpQkFDQUosRUFBQUssYUFBQWx5RSxFQUFBc00sU0FHQTRyQyxFQUFBaTZCLFdBQUFueUUsRUFTQTZ4RSxJQUFBOXVFLEtBQUFxdUUsV0FDQWw1QixFQUFBbDRDLFFBSUE2SixFQUFBOUcsTUFBQS9DLFFBT0EwSixVQUFBLFdBQ0EsT0FBQUEsRUFBQTNHLE9BT0EySSxXQUFBLFdBQ0EsT0FBQTdCLEVBQUE5RyxNQUFBeXVFLHFCQVNBbGpDLFlBQUEsV0FDQSxJQUFBenBDLEVBQUE5QixLQUFBNHdCLGlCQUNBLE9BQUE5dUIsS0FBQXlwQyxhQUFBenBDLEVBQUF5cEMsZUFXQS9HLGNBQUEsU0FBQXRoQyxFQUFBbXNFLEVBQUFwcUMsR0FrQ0EsU0FBQXFxQyxFQUFBbmdELEdBQ0EsT0FBQXVWLEVBQUFxcEMsRUFBQTUrQyxJQUdBLElBQUFseUIsRUFBQStDLEtBQUFtRCxVQUNBb3NFLEVBQUF0eUUsRUFBQW1NLGFBQUEsdUJBQ0FvbUUsRUFBQUQsRUFBQWg0RSxPQUNBZixFQUFBd0osS0FBQXl2RSxZQUFBdnNFLEdBQ0F3c0UsRUFBQXR1RSxFQUFBNkUsUUFBQXpQLEdBQ0E2c0IsRUFBQXBtQixFQUFBcVMsY0FBQXBNLEVBQUEsU0FFQTlCLEVBQUFta0IsU0FBQWxDLE1BQUFzc0QsYUFDQXRzRCxLQUFBc3NELFdBQUEsUUFBd0N0c0QsT0FHeENBLEtBQUEsY0FFQSxJQUFBdXNELEVBQUFKLEVBQUEsR0FBQUUsSUFBQUYsRUFsREEsU0FBQWg1RSxHQUdBLElBQUFxNUUsRUFBQXp1RSxFQUFBaTJCLE9BQUE3Z0MsRUFBQSxTQUFBcTVFLEVBQUExZ0QsRUFBQTN5QixHQUNBLElBQUE2c0QsRUFBQXBzRCxFQUFBMDlDLGlCQUFBbitDLEdBQ0EsT0FBQXF6RSxHQUFBeG1CLElBQUEsSUFBQUEsRUFBQWxwQyxTQUFBLE1BQUFrcEMsRUFBQXJFLGNBQ08sR0FDUGpyRCxLQU1BLFNBQUErMUUsRUFBQTNnRCxFQUFBNXFCLEdBQ0EsSUFBQUMsRUFBQXZILEVBQUEwOUMsaUJBQUFwMkMsR0FFQSxHQUFBQyxJQUFBLElBQUFBLEVBQUFpQixVQUFBMGEsUUFBQSxDQUlBLElBQUEwbkMsRUFBQXJqRCxFQUFBeEosS0FDQSswRSxFQUFBL0IsR0FDQTNxRCxRQUNBcm9CLEtBQUEsWUFFQWcxRSxHQUFBSCxFQUFBRSxFQUFBcnJDLEVBQUFsZ0MsRUFBQXdnRCxhQUFBLGNBQ0F0Z0IsRUFBQSxZQUFBbWpCLEVBQUExNEIsRUFBQSxZQUFBMDRCLEVBQUF3bkIsRUFBQSxHQUFBdkIsRUFBQSxzQkFBQTMrQyxHQUFBNCtDLEVBQUE1K0MsSUFDQTZnRCxHQUFBajJFLEVBQUFqRSxLQUFBazZFLElBR0EsT0F0QkFULEVBQUFoNEUsT0FBQTZKLEVBQUFRLEtBQUEydEUsRUFBQSxTQUFBaHJFLEdBQ0F1ckUsRUFBQWhvQixFQUFBN3FELEVBQUFpRyxFQUFBcUIsUUFFQW5ELEVBQUFRLEtBQUFwTCxFQUFBczVFLElBbUJBRCxFQUFBLFlBQUE5MUUsRUFBQWtDLEtBQUE0ekUsRUFBQSxjQW9CQUksQ0FBQXo1RSxHQUFBODRFLEVBQUFFLEVBQUExbkIsRUFBQTdxRCxFQUFBaUcsRUFBQXFzRSxFQUFBLElBQUFHLEVBQUFsNUUsRUFBQSxHQUFBQSxHQUNBMDVFLEVBQUFsQyxFQUFBM3FELEdBQ0FsdEIsRUFBQThHLEVBQUFtRyxRQUFBRixHQUNBMjFCLEVBQUE3NEIsS0FBQTdKLEtBT0EsT0FMQTZSLEVBQUErdkIsZ0JBQUEvM0IsUUFDQTY0QixFQUFBLElBR0FBLElBQUE2TCxFQUFBN0wsSUFBQXcyQyxFQUFBLGlCQUNBQSxFQUFBYSxFQUFBcjNDLEVBQUErMkMsRUFBQS8yQyxFQUFBcTNDLEdBQUEvNUUsRUFBQXV1QyxFQUFBdnVDLEdBQUEsS0FBQXk1RSxNQU1BMS9ELG1CQUFBLFdBQ0EsR0FBQStnQixFQUFBSyxLQUNBLFNBR0EsSUFBQTYrQyxFQUFBbndFLEtBQUFnUCxXQUFBLGFBUUEsT0FOQW1oRSxHQUNBbndFLEtBQUFtRCxVQUFBb0csUUFBQXZKLEtBQUFnUCxXQUFBLHdCQUNBbWhFLEdBQUEsR0FJQUEsR0FFQXZiLFlBQUEsV0FDQTUwRCxLQUFBcXVFLFNBQUFwVyxTQUVBbVksb0JBQUEsU0FBQWo2RSxFQUFBazZFLEVBQUFDLEdBQ0EsSUFBQTd1RSxFQUFBekIsS0FBQXlCLFFBRUE0aEIsRUFBQXFqRCxFQUFBMEosb0JBQUE3N0UsS0FBQXlMLEtBQUE3SixFQUFBazZFLEVBQUFDLEdBTUEsT0FKQWp0RCxJQUNBQSxFQUFBNWhCLEVBQUEydUUsb0JBQUFqNkUsRUFBQWs2RSxFQUFBQyxJQUdBanRELEdBT0FrdEQsa0JBQUEsU0FBQW5yRSxHQUNBLE9BQUFwRixLQUFBMkksYUFBQVMsYUFBQWhFLEdBQUEsSUFPQW9yRSxlQUFBLFdBQ0EsT0FBQXh3RSxLQUFBMUosSUFBQSxnQkFPQW02RSx3QkFBQSxXQUNBLE9BQUF6d0UsS0FBQTFKLElBQUEseUJBV0E0MkIsbUJBQUEsS0FRQTJELG1CQUFBLEtBS0E2L0MsU0FBQSxLQU9BQyxtQkFBQSxLQU9BM3BFLGdCQUFBLE9BVUEsU0FBQTBuRSxFQUFBMXJFLEdBR0EsSUFBQTdNLEVBQUE2TSxFQUFBN00sS0FFQTZSLEVBQUErdkIsZ0JBQUEvMEIsS0FDQUEsRUFBQTdNLEtBSUEsU0FBQTZNLEdBQ0EsSUFBQS9GLEVBQUErRixFQUFBMkYsYUFDQXM4QyxFQUFBaG9ELEVBQUFtTSxhQUFBLGlCQUNBd25FLEtBS0EsT0FKQXh2RSxFQUFBUSxLQUFBcWpELEVBQUEsU0FBQWg0QixHQUNBLElBQUF6b0IsRUFBQXZILEVBQUEwOUMsaUJBQUExdEIsR0FDQXpvQixFQUFBd2dELGFBQUE0ckIsRUFBQTk2RSxLQUFBME8sRUFBQXdnRCxlQUVBNHJCLEVBQUEzMEUsS0FBQSxLQVpBNDBFLENBQUE3dEUsSUFBQTdNLEdBZUEsU0FBQW00RSxFQUFBbjVCLEdBQ0EsT0FBQUEsRUFBQW5xQixNQUFBcmlCLGFBQUFZLFFBR0EsU0FBQWdsRSxFQUFBcDVCLEdBQ0EsSUFBQW55QyxFQUFBbXlDLEVBQUFucUIsTUFFQSxPQURBaG9CLEVBQUFpc0UsUUFBQWpzRSxFQUFBMkYsYUFBQWs1QyxnQkFDQWl2QixFQUdBLFNBQUFBLEVBQUFDLEVBQUE1N0IsR0FFQTQ3QixFQUFBejhELElBQUE2Z0MsRUFBQWk2QixXQUFBN2xFLFNBQ0E0ckMsRUFBQW5xQixNQUFBcmlCLGFBQUFrNUMsYUFBQTFNLEVBQUFpNkIsWUFLQSxTQUFBWixFQUFBdnhFLEVBQUErRixHQUNBNUIsRUFBQVEsS0FBQTNFLEVBQUFtbEQsa0JBQUEsU0FBQTVsQixHQUNBdi9CLEVBQUE4a0QsV0FBQXZsQixFQUFBcDdCLEVBQUF5RyxNQUFBbXBFLEVBQUFodUUsTUFJQSxTQUFBZ3VFLEVBQUFodUUsR0FDQSxJQUFBOHJFLEVBQUFDLEVBQUEvckUsR0FFQThyRSxHQUVBQSxFQUFBSyxhQUFBbnZFLEtBQUF1SixTQUlBLFNBQUF3bEUsRUFBQS9yRSxHQUNBLElBQUE4dEQsR0FBQTl0RCxFQUFBdkIsYUFBNENxdkQsVUFDNUNtZ0IsRUFBQW5nQixLQUFBb2dCLFlBQUFsdUUsRUFBQWtKLEtBRUEsR0FBQStrRSxFQUFBLENBR0EsSUFBQW5DLEVBQUFtQyxFQUFBRSxZQUVBLEdBQUFyQyxFQUFBLENBQ0EsSUFBQXNDLEVBQUF0QyxFQUFBc0MsYUFFQUEsSUFDQXRDLEVBQUFzQyxFQUFBOTZFLElBQUEwTSxFQUFBa0osTUFJQSxPQUFBNGlFLEdBL0VBMXRFLEVBQUEwSyxNQUFBNGdELEVBQUF1aEIsR0FDQTdzRSxFQUFBMEssTUFBQTRnRCxFQUFBZ2EsR0FrRkEsSUFBQXhrRSxFQUFBd3FELEVBQ0F0eUQsRUFBQTBELFFBQUFvRSxxRUM1Z0JBLElBQUFtdkUsRUFBQSxHQUVBLG9CQUFBQyxZQUNBRCxFQUFBQyxVQUFBRCxVQUFBLElBR0EsSUFBQW52RSxHQVFBbWhCLE9BQUEsK0dBQ0FrdUQsZUFBQSwrQkFHQTF6RCxXQUlBMnpELFdBQUFILEVBQUFwRixNQUFBLHVDQUVBaHZDLFNBQUEsR0FDQXcwQyxVQUFBLFNBQ0F2MEMsV0FBQSxVQUtBazdCLFVBQUEsS0FDQWoxQyxVQUFBLE9BQ0F1dUQsa0JBQUEsSUFDQXR1RCx3QkFBQSxJQUNBdlgsZ0JBQUEsaUJBQ0FvMkIsc0JBQUEsV0FDQTFiLG1CQUFBLElBRUFvckQscUJBQUEsSUFDQXRxRSxZQUFBLElBTUF1cUUsb0JBQUEsSUFFQUMsUUFBQSxHQUVBejNFLEVBQUEwRCxRQUFBb0UseUVDcEVBLElBb0JBMnpCLEVBcEJBdGdDLEVBQUEsNERBb0JBdThFLEdBQUEsaUdBQ0E1dkUsR0FDQTJ6QixhQUFBLFNBQUFrOEMsRUFBQUMsR0FDQSxPQUFBbjhDLEVBQUE3MUIsS0FBQSt4RSxFQUFBQyxLQUdBNTNFLEVBQUEwRCxRQUFBb0UsdUVDSUE5SCxFQUFBMEQsU0FYQWs1QixtQkFBQSxXQUNBLE9BQ0FxQyxLQUFBcjVCLEtBQUExSixJQUFBLFFBQ0FnakMsSUFBQXQ1QixLQUFBMUosSUFBQSxPQUNBdTdDLE1BQUE3eEMsS0FBQTFKLElBQUEsU0FDQXc3QyxPQUFBOXhDLEtBQUExSixJQUFBLFVBQ0FtVixNQUFBekwsS0FBQTFKLElBQUEsU0FDQWtlLE9BQUF4VSxLQUFBMUosSUFBQSx1RkMxQkEsSUFBQXN1QixFQUFBcnZCLEVBQUEsNENBRUFzUixFQUFBK2QsRUFBQS9kLFVBQ0FpOUMsRUFBQWwvQixFQUFBay9CLGlCQW9CQWg5QyxFQUFBRCxJQWNBLElBQUEzRSxHQUNBMnlELGtCQUFBLFdBQ0EvdEQsRUFBQTlHLE1BQUFpeUUsU0FBQSxFQUNBbnJFLEVBQUE5RyxNQUFBa3lFLGlCQVVBOUIsb0JBQUEsU0FBQWo2RSxFQUFBazZFLEVBQUFDLEdBRUEsSUFBQTZCLEVBQUFyckUsRUFEQXVwRSxLQUFBcndFLE1BRUFpeUUsRUFBQUUsRUFBQUYsVUFBQSxFQUNBQyxFQUFBQyxFQUFBRCxhQUFBQyxFQUFBRCxpQkFFQSxHQUFBQSxFQUFBNTlFLGVBQUE2QixHQUNBLE9BQUErN0UsRUFBQS83RSxHQUdBLElBQUFpOEUsRUFBQXR1QixFQUFBOWpELEtBQUExSixJQUFBLGFBQ0ErN0UsRUFBQXJ5RSxLQUFBMUosSUFBQSxpQkFDQWc4RSxFQUFBLE1BQUFoQyxHQUFBK0IsRUFyQ0EsU0FBQUUsRUFBQWpDLEdBR0EsSUFGQSxJQUFBa0MsRUFBQUQsRUFBQWg3RSxPQUVBRCxFQUFBLEVBQWlCQSxFQUFBazdFLEVBQWdCbDdFLElBQ2pDLEdBQUFpN0UsRUFBQWo3RSxHQUFBQyxPQUFBKzRFLEVBQ0EsT0FBQWlDLEVBQUFqN0UsR0FJQSxPQUFBaTdFLEVBQUFDLEVBQUEsR0E0QkFDLENBQUFKLEVBQUEvQixHQUFBOEIsRUFJQSxJQUZBRSxLQUFBRixJQUVBRSxFQUFBLzZFLE9BQUEsQ0FJQSxJQUFBOHJCLEVBQUFpdkQsRUFBQUwsR0FPQSxPQUxBOTdFLElBQ0ErN0UsRUFBQS83RSxHQUFBa3RCLEdBR0E4dUQsRUFBQUYsWUFBQSxHQUFBSyxFQUFBLzZFLE9BQ0E4ckIsS0FHQWpwQixFQUFBMEQsUUFBQW9FLDBFQ2hGQSxJQUVBNGxELEVBRkF2eUQsRUFBQSwwREFFQXV5RCxpQkFFQStsQixFQUFBdDRFLEVBQUEsNkNBRUF5NEUsRUFBQUgsRUFBQUcsaUJBQ0F6b0MsRUFBQXNvQyxFQUFBdG9DLFVBb0JBbXRDLEVBQUEsY0FFQXh3RSxHQU9Bc0gsY0FBQSxTQUFBdEcsRUFBQStoQyxHQUNBLElBQUFob0MsRUFBQStDLEtBQUFtRCxRQUFBOGhDLEdBQ0EwdEMsRUFBQTN5RSxLQUFBeXZFLFlBQUF2c0UsRUFBQStoQyxHQUNBMFosRUFBQTFoRCxFQUFBc3dCLFlBQUFycUIsR0FDQS9NLEVBQUE4RyxFQUFBbUcsUUFBQUYsR0FDQWlELEVBQUFsSixFQUFBOGhELGVBQUE3N0MsR0FDQW1nQixFQUFBcG1CLEVBQUFxUyxjQUFBcE0sRUFBQSxTQUNBLE9BQ0E2VixjQUFBL1ksS0FBQTZDLFNBQ0ErdkUsaUJBQUE1eUUsS0FBQThDLFFBQ0FSLFdBQUEsV0FBQXRDLEtBQUE2QyxTQUFBN0MsS0FBQThDLFFBQUEsS0FDQXVxQixZQUFBcnRCLEtBQUFxdEIsWUFDQS9nQixTQUFBdE0sS0FBQXJJLEdBQ0FraEMsV0FBQTc0QixLQUFBN0osS0FDQUEsT0FDQStNLFVBQUF5N0MsRUFDQTFoRCxLQUFBa0osRUFDQTgrQixXQUNBenVDLE1BQUFtOEUsRUFDQXR2RCxRQUNBd3ZELE9BQUE3RSxFQUFBM3FELEdBRUF4WixPQUFBLCtCQWFBME0sa0JBQUEsU0FBQXJULEVBQUF2SyxFQUFBc3NDLEVBQUE5L0IsRUFBQTJ0RSxHQUNBbjZFLEtBQUEsU0FDQSxJQUFBc0UsRUFBQStDLEtBQUFtRCxRQUFBOGhDLEdBQ0FyMkIsRUFBQTNSLEVBQUE0UixhQUFBM0wsR0FDQXVHLEVBQUF6SixLQUFBd0osY0FBQXRHLEVBQUEraEMsR0FFQSxNQUFBOS9CLEdBQUFzRSxFQUFBalQsaUJBQUFxZ0QsUUFDQXB0QyxFQUFBalQsTUFBQWlULEVBQUFqVCxNQUFBMk8sSUFHQSxJQUFBaWIsRUFBQXhSLEVBQUF0WSxJQUFBLFdBQUFxQyxHQUFBbTZFLEdBQUEsc0JBQUFuNkUsRUFBQW02RSxHQUFBLHNCQUVBLHlCQUFBMXlELEdBQ0EzVyxFQUFBOVEsU0FDQXluQixFQUFBM1csSUFDSyxpQkFBQTJXLEVBQ0xtbEIsRUFBQW5sQixFQUFBM1csR0FHQXRJLFFBQUF1eEUsRUFBQSxTQUFBN2hFLEVBQUF0TSxHQUNBLElBQUErRSxFQUFBL0UsRUFBQWhOLE9BTUEsTUFKQSxNQUFBZ04sRUFBQXd1RSxPQUFBLFVBQUF4dUUsRUFBQXd1RSxPQUFBenBFLEVBQUEsS0FDQS9FLEtBQUE5SixNQUFBLEVBQUE2TyxFQUFBLElBR0F3K0MsRUFBQTdxRCxFQUFBaUcsRUFBQXFCLFVBWEssR0FzQkxrckUsWUFBQSxTQUFBanpFLEVBQUF5b0MsR0FDQSxPQUFBNmlCLEVBQUE5bkQsS0FBQW1ELFFBQUE4aEMsR0FBQXpvQyxJQVVBZ29DLGNBQUEsY0FHQXBxQyxFQUFBMEQsUUFBQW9FLHlFQzFIQSxJQW9CQTBOLEVBcEJBcmEsRUFBQSw0REFvQkF1OEUsR0FBQSxxTEFDQTV2RSxHQUNBME4sYUFBQSxTQUFBbWlFLEVBQUFDLEdBQ0EsSUFBQXJoRSxFQUFBZixFQUFBNVAsS0FBQSt4RSxFQUFBQyxHQUNBZ0IsRUFBQWh6RSxLQUFBaXpFLG9CQUVBLE9BREFELElBQUFyaUUsRUFBQXFpRSxZQUNBcmlFLEdBRUFzaUUsa0JBQUEsV0FDQSxJQUFBQyxFQUFBbHpFLEtBQUExSixJQUFBLGNBQ0EsZ0JBQUE0OEUsR0FBQSxNQUFBQSxFQUFBLGdCQUFBQSxHQUFBLGFBR0E5NEUsRUFBQTBELFFBQUFvRSx5RUNqQ0EsSUFvQkE2UCxFQXBCQXhjLEVBQUEsNERBb0JBdThFLEdBQUEseUhBQ0E1dkUsR0FDQTZQLGFBQUEsU0FBQWdnRSxHQUNBLElBQUFwaEUsRUFBQW9CLEVBQUEvUixLQUFBK3hFLEdBQ0FpQixFQUFBaHpFLEtBQUFtekUsWUFBQXhpRSxFQUFBd2tCLFdBRUEsT0FEQTY5QyxJQUFBcmlFLEVBQUFxaUUsWUFDQXJpRSxHQUVBd2lFLFlBQUEsU0FBQWgrQyxHQUNBLE1BQUFBLElBQ0FBLEVBQUEsR0FHQSxJQUFBKzlDLEVBQUFsekUsS0FBQTFKLElBQUEsUUFDQTg4RSxFQUFBcm1FLEtBQUFtRyxJQUFBaWlCLEVBQUEsR0FDQWsrQyxFQUFBLEVBQUFsK0MsRUFDQSxnQkFBQSs5QyxHQUFBLE1BQUFBLEVBQUEsZ0JBQUFBLEdBQUFHLE1BQUFELE9BR0FoNUUsRUFBQTBELFFBQUFvRSwrRUN2Q0EsSUFBQWQsRUFBQTdMLEVBQUEsMkNBbURBNkUsRUFBQTBELFFBN0JBLFNBQUEyMEMsR0FFQSxRQUFBbjdDLEVBQUEsRUFBaUJBLEVBQUFtN0MsRUFBQWw3QyxPQUF1QkQsSUFDeENtN0MsRUFBQW43QyxHQUFBLEtBQ0FtN0MsRUFBQW43QyxHQUFBLEdBQUFtN0MsRUFBQW43QyxHQUFBLElBSUEsZ0JBQUEwekIsRUFBQSttRCxFQUFBQyxHQUdBLElBRkEsSUFBQXJoRSxLQUVBclosRUFBQSxFQUFtQkEsRUFBQW03QyxFQUFBbDdDLE9BQXVCRCxJQUFBLENBQzFDLElBQUF5Z0QsRUFBQXRGLEVBQUFuN0MsR0FBQSxHQUVBLEtBQUF5NkUsR0FBQTN3RSxFQUFBdkwsUUFBQWs4RSxFQUFBaDZCLElBQUEsR0FBQWk2QixHQUFBNXdFLEVBQUF2TCxRQUFBbThFLEVBQUFqNkIsR0FBQSxJQUlBLElBQUE1b0IsRUFBQW5FLEVBQUFoYyxXQUFBK29DLEdBRUEsTUFBQTVvQixJQUNBeGUsRUFBQThoQyxFQUFBbjdDLEdBQUEsSUFBQTYzQixJQUlBLE9BQUF4ZSwyRUMvQ0EsSUFBQXFELEVBQUF6ZSxFQUFBLDhDQUVBKzlFLEVBQUEvOUUsRUFBQSw4Q0FvQkFnK0UsR0FBQSxxQkFDQXJ4RSxHQU1BNmIsYUFBQSxTQUFBeTFELEdBQ0EsSUFBQS94RSxFQUFBekIsS0FBQXlCLFFBQ0EsT0FBQXpCLEtBQUFnUCxXQUFBLFlBQUF3a0UsR0FBQS94RSxJQUFBbkwsSUFBQWk5RSxHQUFBLE9BT0FsOUQsUUFBQSxXQUNBLE9BQUFpOUQsRUFBQWo5RCxTQUNBbzdELFVBQUF6eEUsS0FBQWdQLFdBQUEsYUFDQWt1QixXQUFBbDlCLEtBQUFnUCxXQUFBLGNBQ0FpdUIsU0FBQWo5QixLQUFBZ1AsV0FBQSxZQUNBd2lFLFdBQUF4eEUsS0FBQWdQLFdBQUEsZUFDS2hQLEtBQUF5QixVQUVMNHNDLFlBQUEsU0FBQXRnQyxHQUNBLE9BQUFpRyxFQUFBeUMsZ0JBQUExSSxFQUFBL04sS0FBQXFXLFVBQUFyVyxLQUFBZ1AsV0FBQSxTQUFBaFAsS0FBQWdQLFdBQUEsa0JBQUFoUCxLQUFBZ1AsV0FBQSxZQUFBaFAsS0FBQWdQLFdBQUEsV0FBQWhQLEtBQUFnUCxXQUFBLFFBQUFoUCxLQUFBZ1AsV0FBQSxtQkFHQTVVLEVBQUEwRCxRQUFBb0UscUVDbERBM00sRUFBQSx3Q0FFQTJyQixRQUZBLElBSUExYSxFQUFBalIsRUFBQSwyQ0FFQWlpQyxFQUFBaHhCLEVBQUFneEIsY0FFQTUxQixHQURBNEUsRUFBQTRSLFNBQ0E1UixFQUFBNUUsTUErREEsSUFBQTZ4RSxHQUNBQyxZQUFBLFNBQUExd0UsRUFBQWpKLEVBQUEySyxFQUFBWSxHQUNBLElBQUFxdUUsRUFBQTN3RSxFQUFBa2pFLHVCQUFBLFlBQ0EwTixFQUFBNXdFLEVBQUFrakUsdUJBQUEsWUFDQW5zRSxFQUFBdUssY0FBQSxTQUNBSSxFQUFBbk8sSUFBQSxJQUFBbzlFLEdBQ0FqdkUsRUFBQW5PLElBQUEsSUFBQXE5RSxHQUVBOWxDLEVBQUE2bEMsS0FDQXJ1RSxFQUFBL08sSUFBQSxJQUFBbzlFLEdBQ0E1NUUsRUFBQStLLHNCQUFBLEdBR0FncEMsRUFBQThsQyxLQUNBdHVFLEVBQUEvTyxJQUFBLElBQUFxOUUsR0FDQTc1RSxFQUFBK0ssc0JBQUEsSUFHQSt1RSxXQUFBLFNBQUE3d0UsRUFBQWpKLEVBQUEySyxFQUFBWSxHQUNBLElBQUF3dUUsRUFBQTl3RSxFQUFBa2pFLHVCQUFBLGlCQUNBbnNFLEVBQUF1SyxjQUFBLFVBQ0FJLEVBQUFuTyxJQUFBLFNBQUF1OUUsR0FFQWhtQyxFQUFBZ21DLEtBQ0F4dUUsRUFBQS9PLElBQUEsU0FBQXU5RSxHQUNBLzVFLEVBQUErSyxzQkFBQSxJQUdBaXZFLE1BQUEsU0FBQS93RSxFQUFBakosRUFBQTJLLEVBQUFZLEdBQ0EsSUFBQTB1RSxFQUFBaHhFLEVBQUFrakUsdUJBQUEsWUFDQStOLEVBQUFELEVBQUFFLGNBQUEsY0FDQUMsRUFBQUgsRUFBQUUsY0FBQSxhQUNBbjZFLEVBQUF1SyxjQUFBLGtCQUNBSSxFQUFBbk8sSUFBQSxTQUFBMDlFLEdBQ0F2dkUsRUFBQW5PLElBQUEsUUFBQTQ5RSxHQUVBcm1DLEVBQUFtbUMsS0FDQTN1RSxFQUFBL08sSUFBQSxTQUFBMDlFLEdBQ0FsNkUsRUFBQStLLHNCQUFBLEdBR0FncEMsRUFBQXFtQyxLQUNBN3VFLEVBQUEvTyxJQUFBLFFBQUE0OUUsR0FDQXA2RSxFQUFBK0ssc0JBQUEsSUFHQTZ2QyxJQUFBLFNBQUEzeEMsRUFBQWpKLEVBQUEySyxFQUFBWSxHQUNBdkwsRUFBQXVLLGNBQUEsY0FFQXM3RCxTQUFBLFNBQUE1OEQsRUFBQWpKLEVBQUEySyxFQUFBWSxHQUNBLElBQUE3RCxFQUFBdUIsRUFBQXZCLFFBQ0EyeUUsRUFBQTN5RSxFQUFBbWhCLGFBQUEsV0FBQTVmLEVBQUExTSxJQUFBLGtCQUNBZ08sRUFBQXZLLEVBQUF1SyxhQUFBOHZFLEVBQUF2dkUsV0FBQXBLLFFBQ0FtSCxFQUFBd3lFLEVBQUFDLGtCQUFBLFNBQUEzcUQsRUFBQTNPLEdBQ0EsSUFBQXRXLEVBQUFoRCxFQUFBbWhCLGFBQUEsZUFBQThHLEdBQ0FELEVBQUFubEIsRUFBQXlXLEdBQ0FyVyxFQUFBbk8sSUFBQWt6QixFQUFBaGxCLEdBRUFxcEMsRUFBQXJwQyxJQUFBLE1BQUExSyxFQUFBK0ssd0JBQ0FRLEVBQUEvTyxJQUFBa3pCLEVBQUFobEIsR0FDQTFLLEVBQUErSyxzQkFBQWlXLE9BTUEsU0FBQSt5QixFQUFBcnBDLEdBQ0EsbUJBQUFBLEVBQUFuTyxJQUFBLFFBR0F3SCxFQUFBOEYsMEJBdEZBLFNBQUFaLEdBQ0EsSUFBQW1CLEVBQUFuQixFQUFBMU0sSUFBQSxvQkFDQXlELEdBQ0FvSyxlQUNBRyxnQkFDQUksUUFBQTh5QixJQUNBbHlCLGdCQUFBa3lCLEtBRUE4OEMsRUFBQWIsRUFBQXR2RSxHQUVBLEdBQUFtd0UsRUFFQSxPQURBQSxFQUFBdHhFLEVBQUFqSixJQUFBMkssUUFBQTNLLEVBQUF1TCxpQkFDQXZMLGdGQ25FQSxJQUFBeU0sRUFBQWpSLEVBQUEsMkNBRUFxTSxFQUFBNEUsRUFBQTVFLEtBQ0FxRSxFQUFBTyxFQUFBUCxRQUNBc2YsRUFBQS9lLEVBQUErZSxTQUVBZ3ZELEVBQUFoL0UsRUFBQSxpRUFJQXV1RCxFQUZBdnVELEVBQUEsNENBRUF1dUQsaUJBd0RBLFNBQUEwd0IsRUFBQWpzRSxHQUNBM0csRUFBQTZ5RSxFQUFBLFNBQUEva0MsR0FDQUEsRUFBQSxLQUFBbm5DLEtBQUFtbkMsRUFBQSxLQUFBbm5DLEtBQ0FBLEVBQUFtbkMsRUFBQSxJQUFBbm5DLEVBQUFtbkMsRUFBQSxPQUtBLElBQUEra0MsSUFBQSx3REFDQUMsR0FBQSxzRkE4Q0F0NkUsRUFBQTBELFFBNUNBLFNBQUF5SyxFQUFBb3NFLEdBQ0FKLEVBQUFoc0UsRUFBQW9zRSxHQUVBcHNFLEVBQUF1a0IsT0FBQWczQixFQUFBdjdDLEVBQUF1a0IsUUFDQWxyQixFQUFBMkcsRUFBQXVrQixPQUFBLFNBQUE4bkQsR0FDQSxHQUFBcnZELEVBQUFxdkQsR0FBQSxDQUlBLElBQUF0eUUsRUFBQXN5RSxFQUFBNTVFLEtBUUEsR0FOQSxRQUFBc0gsR0FBQSxVQUFBQSxHQUNBLE1BQUFzeUUsRUFBQUMsWUFDQUQsRUFBQWhxRSxVQUFBZ3FFLEVBQUFDLFdBSUEsVUFBQXZ5RSxFQUFBLENBQ0EsSUFBQXd5RSxFQWhFQSxTQUFBL3dFLEVBQUE2bUUsR0FDQUEsSUFBQWxVLE1BQUEsS0FHQSxJQUZBLElBQUEzVCxFQUFBaC9DLEVBRUF6TSxFQUFBLEVBQWlCQSxFQUFBc3pFLEVBQUFyekUsUUFHakIsT0FGQXdyRCxPQUFBNm5CLEVBQUF0ekUsS0FEa0NBLEtBUWxDLE9BQUF5ckQsRUFvREF6c0QsQ0FBQXMrRSxFQUFBLGlCQUNBLE1BQUFFLEdBbERBLFNBQUEvd0UsRUFBQTZtRSxFQUFBejdDLEVBQUE0bEQsR0FDQW5LLElBQUFsVSxNQUFBLEtBSUEsSUFIQSxJQUNBcDNELEVBREF5akQsRUFBQWgvQyxFQUdBek0sRUFBQSxFQUFpQkEsRUFBQXN6RSxFQUFBcnpFLE9BQUEsRUFBcUJELElBR3RDLE1BQUF5ckQsRUFGQXpqRCxFQUFBc3JFLEVBQUF0ekUsTUFHQXlyRCxFQUFBempELE9BR0F5akQsSUFBQXpqRCxJQUdBeTFFLEdBQUEsTUFBQWh5QixFQUFBNm5CLEVBQUF0ekUsT0FDQXlyRCxFQUFBNm5CLEVBQUF0ekUsSUFBQTYzQixHQWtDQTU0QixDQUFBcStFLEVBQUEseUJBQUFFLEdBR0FOLEVBQUFJLE1BR0Fyc0UsRUFBQXlzRSxZQUNBenNFLEVBQUEwc0UsVUFBQTFzRSxFQUFBeXNFLFdBR0FwekUsRUFBQTh5RSxFQUFBLFNBQUFRLEdBQ0EsSUFBQWo3RSxFQUFBc08sRUFBQTJzRSxHQUVBajdFLElBQ0FnTSxFQUFBaE0sS0FDQUEsT0FHQTJILEVBQUEzSCxFQUFBLFNBQUFzTyxHQUNBaXNFLEVBQUFqc0UsMEZDbkhBLElBQUFuSCxFQUFBN0wsRUFBQSwyQ0FFQXlTLEVBQUF6UyxFQUFBLDRDQW9CQXFNLEVBQUFSLEVBQUFRLEtBQ0EyakIsRUFBQW5rQixFQUFBbWtCLFNBQ0E0dkQsR0FBQSxrRkFFQSxTQUFBQyxFQUFBcnhFLEdBQ0EsSUFBQXN4RSxFQUFBdHhFLEtBQUEySCxVQUVBLEdBQUEycEUsRUFJQSxRQUFBLzlFLEVBQUEsRUFBQWdTLEVBQUE2ckUsRUFBQTU5RSxPQUErQ0QsRUFBQWdTLEVBQVNoUyxJQUFBLENBQ3hELElBQUFnK0UsRUFBQUgsRUFBQTc5RSxHQUNBaStFLEVBQUFGLEVBQUFHLE9BQ0FDLEVBQUFKLEVBQUFuckUsU0FFQXFyRSxLQUFBRCxLQUNBdnhFLEVBQUF1eEUsR0FBQXZ4RSxFQUFBdXhFLE9BRUF2eEUsRUFBQXV4RSxHQUFBRSxPQUdBcDBFLEVBQUFpZ0QsTUFBQXQ5QyxFQUFBdXhFLEdBQUFFLE9BQUFELEVBQUFELElBRkF2eEUsRUFBQXV4RSxHQUFBRSxPQUFBRCxFQUFBRCxHQUtBQyxFQUFBRCxHQUFBLE1BR0FHLEtBQUFILEtBQ0F2eEUsRUFBQXV4RSxHQUFBdnhFLEVBQUF1eEUsT0FFQXZ4RSxFQUFBdXhFLEdBQUFwckUsU0FHQTlJLEVBQUFpZ0QsTUFBQXQ5QyxFQUFBdXhFLEdBQUFwckUsU0FBQXVyRSxFQUFBSCxJQUZBdnhFLEVBQUF1eEUsR0FBQXByRSxTQUFBdXJFLEVBQUFILEdBS0FHLEVBQUFILEdBQUEsT0FLQSxTQUFBSSxFQUFBM3hFLEVBQUE0eEUsRUFBQUMsR0FDQSxHQUFBN3hFLEtBQUE0eEUsS0FBQTV4RSxFQUFBNHhFLEdBQUFILFFBQUF6eEUsRUFBQTR4RSxHQUFBenJFLFVBQUEsQ0FDQSxJQUFBMnJFLEVBQUE5eEUsRUFBQTR4RSxHQUFBSCxPQUNBTSxFQUFBL3hFLEVBQUE0eEUsR0FBQXpyRSxTQUVBMnJFLElBRUFELEdBQ0E3eEUsRUFBQTR4RSxHQUFBSCxPQUFBenhFLEVBQUE0eEUsR0FBQXpyRSxTQUFBLEtBQ0E5SSxFQUFBb08sU0FBQXpMLEVBQUE0eEUsR0FBQUUsSUFFQTl4RSxFQUFBNHhFLEdBQUFFLEdBSUFDLElBQ0EveEUsRUFBQW1HLFNBQUFuRyxFQUFBbUcsYUFDQW5HLEVBQUFtRyxTQUFBeXJFLEdBQUFHLElBS0EsU0FBQUMsRUFBQWh5RSxHQUNBMnhFLEVBQUEzeEUsRUFBQSxhQUNBMnhFLEVBQUEzeEUsRUFBQSxhQUNBMnhFLEVBQUEzeEUsRUFBQSxhQUNBMnhFLEVBQUEzeEUsRUFBQSxTQUNBMnhFLEVBQUEzeEUsRUFBQSxhQUVBMnhFLEVBQUEzeEUsRUFBQSxjQUVBMnhFLEVBQUEzeEUsRUFBQSxhQUdBLFNBQUFpeUUsRUFBQWp5RSxFQUFBZzBDLEdBRUEsSUFBQWsrQixFQUFBMXdELEVBQUF4aEIsTUFBQWcwQyxHQUNBbDZCLEVBQUEwSCxFQUFBMHdELE1BQUFwNEQsVUFFQSxHQUFBQSxFQUNBLFFBQUF2bUIsRUFBQSxFQUFBZ1MsRUFBQXRCLEVBQUFrdUUsbUJBQUEzK0UsT0FBOERELEVBQUFnUyxFQUFTaFMsSUFBQSxDQUN2RXlnRCxFQUFBL3ZDLEVBQUFrdUUsbUJBQUE1K0UsR0FFQXVtQixFQUFBdnBCLGVBQUF5akQsS0FDQWsrQixFQUFBbCtCLEdBQUFsNkIsRUFBQWs2QixLQU1BLFNBQUFvK0IsRUFBQXB5RSxHQUNBQSxJQUNBZ3lFLEVBQUFoeUUsR0FDQWl5RSxFQUFBanlFLEVBQUEsU0FDQUEsRUFBQW1HLFVBQUE4ckUsRUFBQWp5RSxFQUFBbUcsU0FBQSxVQWdIQSxTQUFBa3NFLEVBQUFyM0UsR0FDQSxPQUFBcUMsRUFBQTZFLFFBQUFsSCxjQUdBLFNBQUFzM0UsRUFBQXQzRSxHQUNBLE9BQUFxQyxFQUFBNkUsUUFBQWxILEtBQUEsR0FBQUEsT0ErREEzRSxFQUFBMEQsUUE1REEsU0FBQXlLLEVBQUFvc0UsR0FDQS95RSxFQUFBdzBFLEVBQUE3dEUsRUFBQXVrQixRQUFBLFNBQUE4bkQsR0FDQXJ2RCxFQUFBcXZELElBdEhBLFNBQUFBLEdBQ0EsR0FBQXJ2RCxFQUFBcXZELEdBQUEsQ0FJQVEsRUFBQVIsR0FDQW1CLEVBQUFuQixHQUNBb0IsRUFBQXBCLEVBQUEsU0FFQW9CLEVBQUFwQixFQUFBLGNBRUFvQixFQUFBcEIsRUFBQSxhQUVBQSxFQUFBMXFFLFdBQ0E4ckUsRUFBQXBCLEVBQUExcUUsU0FBQSxTQUVBOHJFLEVBQUFwQixFQUFBMXFFLFNBQUEsY0FFQThyRSxFQUFBcEIsRUFBQTFxRSxTQUFBLGVBR0Fvc0UsRUFBQTFCLEVBQUEwQixhQUdBbEIsRUFBQWtCLEdBQ0FILEVBQUFHLEtBR0FDLEVBQUEzQixFQUFBMkIsWUFHQW5CLEVBQUFtQixHQUNBSixFQUFBSSxJQUdBLElBQUFDLEVBQUE1QixFQUFBNEIsU0FFQUEsR0FDQUwsRUFBQUssR0FHQSxJQXlCQUYsRUFXQUMsRUFwQ0F0NUUsRUFBQTIzRSxFQUFBMzNFLEtBR0EsYUFBQTIzRSxFQUFBNTVFLEtBQUEsQ0FDQWlDLEtBQUEyM0UsRUFBQTZCLE1BQ0EsSUFBQUMsRUFBQTlCLEVBQUErQixPQUFBL0IsRUFBQWdDLE1BRUEsR0FBQUYsSUFBQXQxRSxFQUFBK2hELGFBQUF1ekIsR0FDQSxRQUFBcC9FLEVBQUEsRUFBcUJBLEVBQUFvL0UsRUFBQW4vRSxPQUFxQkQsSUFDMUM2K0UsRUFBQU8sRUFBQXAvRSxJQUlBOEosRUFBQVEsS0FBQWd6RSxFQUFBenBDLFdBQUEsU0FBQXBuQyxHQUNBZ3lFLEVBQUFoeUUsS0FJQSxHQUFBOUcsSUFBQW1FLEVBQUEraEQsYUFBQWxtRCxHQUNBLElBQUEzRixFQUFBLEVBQW1CQSxFQUFBMkYsRUFBQTFGLE9BQWlCRCxJQUNwQzYrRSxFQUFBbDVFLEVBQUEzRixJQU9BLElBRkFnL0UsRUFBQTFCLEVBQUEwQixZQUVBQSxFQUFBcjVFLEtBQ0EsS0FBQTQ1RSxFQUFBUCxFQUFBcjVFLEtBRUEsSUFBQTNGLEVBQUEsRUFBbUJBLEVBQUF1L0UsRUFBQXQvRSxPQUFtQkQsSUFDdEM2K0UsRUFBQVUsRUFBQXYvRSxJQU9BLElBRkFpL0UsRUFBQTNCLEVBQUEyQixXQUVBQSxFQUFBdDVFLEtBQ0EsS0FBQTY1RSxFQUFBUCxFQUFBdDVFLEtBRUEsSUFBQTNGLEVBQUEsRUFBbUJBLEVBQUF3L0UsRUFBQXYvRSxPQUFtQkQsSUFDdEM4SixFQUFBNkUsUUFBQTZ3RSxFQUFBeC9FLEtBQ0E2K0UsRUFBQVcsRUFBQXgvRSxHQUFBLElBQ0E2K0UsRUFBQVcsRUFBQXgvRSxHQUFBLEtBRUE2K0UsRUFBQVcsRUFBQXgvRSxJQU1BLFVBQUFzOUUsRUFBQTU1RSxNQUNBZzdFLEVBQUFwQixFQUFBLGFBQ0FvQixFQUFBcEIsRUFBQSxTQUNBb0IsRUFBQXBCLEVBQUEsV0FDRyxZQUFBQSxFQUFBNTVFLE1BQ0gwNkUsRUFBQWQsRUFBQW1DLFdBQUEsYUFDQTMxRSxFQUFBUSxLQUFBZ3pFLEVBQUFvQyxPQUFBLFNBQUFqekUsR0FDQWd5RSxFQUFBaHlFLE1BRUcsU0FBQTZ3RSxFQUFBNTVFLE1BQ0grNkUsRUFBQW5CLEVBQUFxQyxTQWVBQyxDQUFBdEMsS0FFQSxJQUFBdUMsR0FBQSw4RUFDQXhDLEdBQUF3QyxFQUFBcmhGLEtBQUEsaURBQ0E4TCxFQUFBdTFFLEVBQUEsU0FBQTU0RCxHQUNBM2MsRUFBQXcwRSxFQUFBN3RFLEVBQUFnVyxJQUFBLFNBQUE2NEQsR0FDQUEsSUFDQXBCLEVBQUFvQixFQUFBLGFBQ0FwQixFQUFBb0IsRUFBQXoxRCxZQUFBLGNBSUEvZixFQUFBdzBFLEVBQUE3dEUsRUFBQXEzRCxVQUFBLFNBQUF5WCxHQUNBLElBQUFDLEVBQUFELEtBQUFDLG9CQUNBdEIsRUFBQXNCLEVBQUEsYUFDQXRCLEVBQUFzQixLQUFBMzFELFlBQUEsV0FFQS9mLEVBQUF3MEUsRUFBQTd0RSxFQUFBZ3ZFLFVBQUEsU0FBQUMsR0FDQTlCLEVBQUE4QixFQUFBLGFBQ0F4QixFQUFBd0IsRUFBQSxZQUNBeEIsRUFBQXdCLEVBQUEsY0FDQXhCLEVBQUF3QixFQUFBLGVBR0E1MUUsRUFBQXcwRSxFQUFBN3RFLEVBQUErMkQsT0FBQSxTQUFBbVksR0FDQXpCLEVBQUF5QixFQUFBLFVBRUE3MUUsRUFBQXcwRSxFQUFBN3RFLEVBQUFvc0MsS0FBQSxTQUFBK2lDLEdBQ0FueUQsRUFBQW15RCxLQUNBdkIsRUFBQXVCLEdBQ0E5MUUsRUFBQXcwRSxFQUFBc0IsRUFBQUMsU0FBQSxTQUFBQyxHQUNBekIsRUFBQXlCLFFBSUFoMkUsRUFBQXcwRSxFQUFBN3RFLEVBQUF3a0UsVUFBQSxTQUFBRCxHQUNBcUosRUFBQXJKLEdBQ0E0SSxFQUFBNUksRUFBQSxTQUNBNEksRUFBQTVJLEVBQUEsYUFDQTRJLEVBQUE1SSxFQUFBLG1CQUNBLElBQUE3dkUsRUFBQTZ2RSxFQUFBN3ZFLEtBQ0FtRSxFQUFBNkUsUUFBQWhKLElBQUFtRSxFQUFBUSxLQUFBM0UsRUFBQSxTQUFBdkIsR0FDQTBGLEVBQUFta0IsU0FBQTdwQixLQUNBZzZFLEVBQUFoNkUsRUFBQSxTQUNBZzZFLEVBQUFoNkUsRUFBQSxrQkFJQWtHLEVBQUF3MEUsRUFBQTd0RSxFQUFBMjFELFNBQUEsU0FBQTJaLEdBQ0FuQyxFQUFBbUMsRUFBQSxhQUNBajJFLEVBQUFpMkUsRUFBQUMsUUFBQSxTQUFBQyxHQUNBckMsRUFBQXFDLEVBQUEsaUJBR0EvQixFQUFBSyxFQUFBOXRFLEVBQUFvWixhQUFBLFNBQ0FxMEQsRUFBQUssRUFBQTl0RSxFQUFBNFgsU0FBQXdCLFlBQUEsOEVDelBBdm5CLEVBQUEwRCxRQTVCQSxTQUFBd0UsR0FDQSxPQUNBQSxhQUNBMGdFLE1BQUEsU0FBQWhnRSxFQUFBdkIsR0FDQSxJQUFBbTdCLEVBQUFuN0IsRUFBQW83QixnQkFDQWg2QixTQUFBLFdBR0EsR0FBQSs1QixLQUFBcmxDLE9BQUEsQ0FJQSxJQUFBMEYsRUFBQStGLEVBQUFHLFVBQ0FsRyxFQUFBaWlELFdBQUEsU0FBQTFpRCxHQUdBLElBRkEsSUFBQXJHLEVBQUE4RyxFQUFBbUcsUUFBQTVHLEdBRUFsRixFQUFBLEVBQXVCQSxFQUFBc2xDLEVBQUFybEMsT0FBeUJELElBQ2hELElBQUFzbEMsRUFBQXRsQyxHQUFBK0wsV0FBQWxOLEdBQ0EsU0FJQSxvRkN4Q0EsSUFBQXFRLEVBQUFqUixFQUFBLDJDQUVBaWlDLEVBQUFoeEIsRUFBQWd4QixjQUNBNTFCLEVBQUE0RSxFQUFBNUUsS0F1REEsU0FBQW8yRSxFQUFBQyxHQUNBcjJFLEVBQUFxMkUsRUFBQSxTQUFBQyxFQUFBQyxHQUNBLElBQUFDLEtBQ0FDLEdBQUFsZ0UsU0FDQW1qQyxHQUFBNDhCLEVBQUEvdkIscUJBQUErdkIsRUFBQTl2QixzQkFDQWt3QixFQUFBSixFQUFBajdFLEtBQ0E2ckQsRUFBQW92QixFQUFBcHZCLGlCQUdBM0IsRUFBQW14QixFQUFBNTlFLElBQUE0Z0QsRUFBQSxTQUFBaTlCLEVBQUFDLEVBQUF0MUUsR0FDQSxJQU9BdTFFLEVBQ0FDLEVBUkFsaEUsRUFBQThnRSxFQUFBaGlGLElBQUE0aEYsRUFBQXR2QixpQkFBQTFsRCxHQUdBLEdBQUFxVSxNQUFBQyxHQUNBLE9BQUE2Z0UsRUFNQXZ2QixFQUNBNHZCLEVBQUFKLEVBQUEvcUQsWUFBQXJxQixHQUVBdTFFLEVBQUFILEVBQUFoaUYsSUFBQTRoRixFQUFBcnZCLG1CQUFBM2xELEdBTUEsSUFGQSxJQUFBeTFFLEVBQUF4Z0UsSUFFQWhlLEVBQUFnK0UsRUFBQSxFQUFrQ2grRSxHQUFBLEVBQVFBLElBQUEsQ0FDMUMsSUFBQXkrRSxFQUFBWCxFQUFBOTlFLEdBTUEsR0FKQTJ1RCxJQUNBNHZCLEVBQUFFLEVBQUEzN0UsS0FBQXdoRCxXQUFBbTZCLEVBQUEvdkIsbUJBQUE0dkIsSUFHQUMsR0FBQSxHQUNBLElBQUF2cEQsRUFBQXlwRCxFQUFBMzdFLEtBQUF3Z0QsY0FBQW03QixFQUFBendCLHFCQUFBdXdCLEdBRUEsR0FBQWxoRSxHQUFBLEdBQUEyWCxFQUFBLEdBQ0EzWCxHQUFBLEdBQUEyWCxFQUFBLEVBQ0EsQ0FDQTNYLEdBQUEyWCxFQUNBd3BELEVBQUF4cEQsRUFDQSxRQU9BLE9BRkFpcEQsRUFBQSxHQUFBNWdFLEVBQ0E0Z0UsRUFBQSxHQUFBTyxFQUNBUCxJQUVBRSxFQUFBMXVFLFVBQUFxbEUsUUFBQTluQixHQUVBK3dCLEVBQUFqN0UsS0FBQWtxRCxJQUlBL3NELEVBQUEwRCxRQXpGQSxTQUFBMkQsR0FDQSxJQUFBbzNFLEVBQUFyaEQsSUFDQS8xQixFQUFBNHlCLFdBQUEsU0FBQXJ4QixHQUNBLElBQUE4N0QsRUFBQTk3RCxFQUFBMU0sSUFBQSxTQUVBLEdBQUF3b0UsRUFBQSxDQUNBLElBQUFtWixFQUFBWSxFQUFBdmlGLElBQUF3b0UsSUFBQStaLEVBQUF0aUYsSUFBQXVvRSxNQUNBN2hFLEVBQUErRixFQUFBRyxVQUNBeTFFLEdBRUF6d0IscUJBQUFsckQsRUFBQW9oRCxtQkFBQSx3QkFDQStKLHFCQUFBbnJELEVBQUFvaEQsbUJBQUEsd0JBQ0F1SyxpQkFBQTNyRCxFQUFBb2hELG1CQUFBLG9CQUNBd0ssbUJBQUE1ckQsRUFBQW9oRCxtQkFBQSxzQkFDQXlLLGlCQUFBN3JELEVBQUFvaEQsbUJBQUEsb0JBQ0FwaEQsT0FDQStGLGVBR0EsSUFBQTQxRSxFQUFBaHdCLG1CQUFBZ3dCLEVBQUE5dkIsbUJBQUE4dkIsRUFBQS92QixtQkFDQSxPQUdBb3ZCLEVBQUExZ0YsUUFBQTBGLEVBQUEySSxtQkFBQSxrQkFBQXF5RSxJQUFBMWdGLE9BQUEsR0FBQXlMLGFBQ0FpMUUsRUFBQW5pRixLQUFBOGlGLE1BR0FDLEVBQUFqM0UsS0FBQW8yRSxvRUN2REEsSUFBQTkxQyxFQUFBM3NDLEVBQUEsNkNBRUE4aUIsRUFBQTlpQixFQUFBLDZDQUVBMjBDLEVBQUEzMEMsRUFBQSw2Q0FFQXluRSxFQUFBem5FLEVBQUEsOENBeUJBdWpGLEVBQUE1MkMsRUFBQXBELE1BTUFtTCxFQUFBQyxFQUFBempDLFFBQ0F6TCxLQUFBLFdBQ0ErOUUsVUFBQSxFQUNBQyxtQkFBQSxFQUNBbHdDLFVBQUEsU0FBQXg3QixFQUFBZ0gsR0FDQSxJQUFBMmtFLEVBQUFqNUUsS0FBQXdvQyxRQUVBanhCLE1BQUFqSyxLQUNBMnJFLEVBQUEsR0FBQUMsV0FBQTVyRSxJQUdBaUssTUFBQWpELEtBQ0Eya0UsRUFBQSxHQUFBQyxXQUFBNWtFLEtBR0E2a0UsWUFBQSxTQUFBQyxHQUNBLElBQUF4aEUsRUFBQTVYLEtBQUF3b0MsUUFDQTR3QyxFQUFBLEdBQUF4aEUsRUFBQSxLQUFBQSxFQUFBLEdBQUF3aEUsRUFBQSxJQUNBQSxFQUFBLEdBQUF4aEUsRUFBQSxLQUFBQSxFQUFBLEdBQUF3aEUsRUFBQSxJQUVBbnZDLEVBQUE1MUMsVUFBQXkwQyxVQUFBdjBDLEtBQUF5TCxLQUFBNFgsRUFBQSxHQUFBQSxFQUFBLEtBTUF5aEUsWUFBQSxXQUNBLE9BQUFyNUUsS0FBQSs0RSxXQU1BeHJDLFlBQUEsU0FBQUQsR0FDQXR0QyxLQUFBKzRFLFVBQUF6ckMsRUFHQXR0QyxLQUFBczVFLFlBQUF0NUUsS0FBQXdvQyxRQUFBL3RDLFFBQ0F1RixLQUFBZzVFLG1CQUFBaGMsRUFBQXVjLHFCQUFBanNDLElBTUFVLFNBQUEsV0FDQSxPQUFBZ3ZCLEVBQUF3YyxzQkFBQXg1RSxLQUFBKzRFLFVBQUEvNEUsS0FBQXdvQyxRQUFBeG9DLEtBQUFzNUUsWUFBQXQ1RSxLQUFBZzVFLHFCQVVBNWpELFNBQUEsU0FBQW40QixFQUFBOEcsR0FDQSxTQUFBOUcsRUFDQSxTQUdBLElBQUFzbUIsRUFBQXhmLEtBQUF3ZixVQVlBLE9BVkEsTUFBQUEsRUFDQUEsRUFBQTJlLEVBQUF1M0MsaUJBQUF4OEUsSUFBQSxFQUNLLFNBQUFzbUIsSUFFTEEsRUFBQXZqQixLQUFBZzVFLG9CQUtBLzdFLEVBQUE2N0UsRUFBQTc3RSxFQUFBc21CLEdBQUEsR0FDQWxMLEVBQUEwMUQsVUFBQTl3RSxJQVVBeThFLFVBQUEsU0FBQXpzQyxFQUFBRyxFQUFBQyxHQUNBSixLQUFBLEVBQ0EsSUFBQXIxQixFQUFBNVgsS0FBQXdvQyxRQUNBM2MsRUFBQWpVLEVBQUEsR0FBQUEsRUFBQSxHQUVBLEdBQUF5SCxTQUFBd00sR0FBQSxDQU1BQSxFQUFBLElBQ0FBLEtBQ0FqVSxFQUFBOGMsV0FHQSxJQUFBMzZCLEVBQUFpakUsRUFBQTJjLHVCQUFBL2hFLEVBQUFxMUIsRUFBQUcsRUFBQUMsR0FDQXJ0QyxLQUFBZzVFLG1CQUFBai9FLEVBQUE2L0Usa0JBQ0E1NUUsS0FBQSs0RSxVQUFBaC9FLEVBQUF1ekMsU0FDQXR0QyxLQUFBczVFLFlBQUF2L0UsRUFBQTgvRSxpQkFZQTFzQyxXQUFBLFNBQUFwcEMsR0FDQSxJQUFBNlQsRUFBQTVYLEtBQUF3b0MsUUFFQSxHQUFBNXdCLEVBQUEsS0FBQUEsRUFBQSxHQUNBLE9BQUFBLEVBQUEsSUFFQSxJQUFBa2lFLEVBQUFsaUUsRUFBQSxHQU1BN1QsRUFBQWduQyxPQUlBbnpCLEVBQUEsSUFBQWtpRSxFQUFBLEdBSEFsaUUsRUFBQSxJQUFBa2lFLEVBQUEsRUFDQWxpRSxFQUFBLElBQUFraUUsRUFBQSxRQUtBbGlFLEVBQUEsS0FJQSxJQUFBaVUsRUFBQWpVLEVBQUEsR0FBQUEsRUFBQSxHQUVBeUgsU0FBQXdNLEtBQ0FqVSxFQUFBLEtBQ0FBLEVBQUEsTUFHQTVYLEtBQUEwNUUsVUFBQTMxRSxFQUFBa3BDLFlBQUFscEMsRUFBQXFwQyxZQUFBcnBDLEVBQUFzcEMsYUFFQSxJQUFBQyxFQUFBdHRDLEtBQUErNEUsVUFFQWgxRSxFQUFBK21DLFNBQ0FsekIsRUFBQSxHQUFBa2hFLEVBQUEvckUsS0FBQTZqQyxNQUFBaDVCLEVBQUEsR0FBQTAxQixPQUdBdnBDLEVBQUFnbkMsU0FDQW56QixFQUFBLEdBQUFraEUsRUFBQS9yRSxLQUFBb2hDLEtBQUF2MkIsRUFBQSxHQUFBMDFCLFVBUUFyRCxFQUFBNXFDLE9BQUEsV0FDQSxXQUFBNHFDLEdBR0EsSUFBQS9uQyxFQUFBK25DLEVBQ0E3dkMsRUFBQTBELFFBQUFvRSw2REMxTUEsSUFBQWQsRUFBQTdMLEVBQUEsMkNBRUEyMEMsRUFBQTMwQyxFQUFBLDZDQUVBMnNDLEVBQUEzc0MsRUFBQSw2Q0FFQTAwQyxFQUFBMTBDLEVBQUEsZ0RBMEJBd2tGLEVBQUE3dkMsRUFBQTcxQyxVQUNBMmxGLEVBQUEvdkMsRUFBQTUxQyxVQUNBb2xGLEVBQUF2M0MsRUFBQXUzQyxpQkFDQVEsRUFBQS8zQyxFQUFBcEQsTUFDQW83QyxFQUFBbnRFLEtBQUE2akMsTUFDQXVwQyxFQUFBcHRFLEtBQUFvaEMsS0FDQWlzQyxFQUFBcnRFLEtBQUFzdEUsSUFDQUMsRUFBQXZ0RSxLQUFBa2xELElBQ0Fzb0IsRUFBQXJ3QyxFQUFBempDLFFBQ0F6TCxLQUFBLE1BQ0FreUMsS0FBQSxHQUNBbTRCLGFBQUEsV0FDQW43QixFQUFBcnlDLE1BQUFtSSxLQUFBeUksV0FDQXpJLEtBQUF3NkUsZUFBQSxJQUFBdndDLEdBTUErRCxTQUFBLFdBQ0EsSUFBQXlzQyxFQUFBejZFLEtBQUF3NkUsZUFDQTVpRSxFQUFBNVgsS0FBQXdvQyxRQUNBd0MsRUFBQXl2QyxFQUFBeGdFLFlBQ0EsT0FBQTdZLEVBQUExRyxJQUFBcy9FLEVBQUFoc0MsU0FBQXo1QyxLQUFBeUwsTUFBQSxTQUFBbXZCLEdBQ0EsSUFBQXVyRCxFQUFBeDRDLEVBQUFwRCxNQUFBczdDLEVBQUFwNkUsS0FBQWt0QyxLQUFBL2QsSUFJQSxPQUZBdXJELEVBQUF2ckQsSUFBQXZYLEVBQUEsSUFBQTZpRSxFQUFBRSxTQUFBQyxFQUFBRixFQUFBMXZDLEVBQUEsSUFBQTB2QyxFQUNBQSxFQUFBdnJELElBQUF2WCxFQUFBLElBQUE2aUUsRUFBQUksU0FBQUQsRUFBQUYsRUFBQTF2QyxFQUFBLElBQUEwdkMsR0FFSzE2RSxPQU9MbzFCLFNBQUE0a0QsRUFBQTVrRCxTQU1BL1osTUFBQSxTQUFBOFQsR0FFQSxPQURBQSxFQUFBNHFELEVBQUExK0QsTUFBQTltQixLQUFBeUwsS0FBQW12QixHQUNBaXJELEVBQUFwNkUsS0FBQWt0QyxLQUFBL2QsSUFPQTJaLFVBQUEsU0FBQXg3QixFQUFBZ0gsR0FDQSxJQUFBNDRCLEVBQUFsdEMsS0FBQWt0QyxLQUNBNS9CLEVBQUFndEUsRUFBQWh0RSxHQUFBZ3RFLEVBQUFwdEMsR0FDQTU0QixFQUFBZ21FLEVBQUFobUUsR0FBQWdtRSxFQUFBcHRDLEdBQ0E4c0MsRUFBQWx4QyxVQUFBdjBDLEtBQUF5TCxLQUFBc04sRUFBQWdILElBTUEyRixVQUFBLFdBQ0EsSUFBQWl6QixFQUFBbHRDLEtBQUFrdEMsS0FDQXQxQixFQUFBbWlFLEVBQUE5L0QsVUFBQTFsQixLQUFBeUwsTUFDQTRYLEVBQUEsR0FBQXdpRSxFQUFBbHRDLEVBQUF0MUIsRUFBQSxJQUNBQSxFQUFBLEdBQUF3aUUsRUFBQWx0QyxFQUFBdDFCLEVBQUEsSUFFQSxJQUFBNmlFLEVBQUF6NkUsS0FBQXc2RSxlQUNBeHZDLEVBQUF5dkMsRUFBQXhnRSxZQUdBLE9BRkF3Z0UsRUFBQUUsV0FBQS9pRSxFQUFBLEdBQUFnakUsRUFBQWhqRSxFQUFBLEdBQUFvekIsRUFBQSxLQUNBeXZDLEVBQUFJLFdBQUFqakUsRUFBQSxHQUFBZ2pFLEVBQUFoakUsRUFBQSxHQUFBb3pCLEVBQUEsS0FDQXB6QixHQU1BdWhFLFlBQUEsU0FBQXZoRSxHQUNBNVgsS0FBQXc2RSxlQUFBckIsWUFBQXZoRSxHQUVBLElBQUFzMUIsRUFBQWx0QyxLQUFBa3RDLEtBQ0F0MUIsRUFBQSxHQUFBMGlFLEVBQUExaUUsRUFBQSxJQUFBMGlFLEVBQUFwdEMsR0FDQXQxQixFQUFBLEdBQUEwaUUsRUFBQTFpRSxFQUFBLElBQUEwaUUsRUFBQXB0QyxHQUNBNnNDLEVBQUFaLFlBQUE1a0YsS0FBQXlMLEtBQUE0WCxJQU1Ba2pFLG9CQUFBLFNBQUE3OUUsRUFBQXNILEdBR0F2RSxLQUFBbTVFLFlBQUFsOEUsRUFBQWtoRCxxQkFBQTU1QyxLQU9BbTFFLFVBQUEsU0FBQXFCLEdBQ0FBLEtBQUEsR0FDQSxJQUFBbmpFLEVBQUE1WCxLQUFBd29DLFFBQ0EzYyxFQUFBalUsRUFBQSxHQUFBQSxFQUFBLEdBRUEsS0FBQWlVLElBQUFnZ0IsS0FBQWhnQixHQUFBLElBSUEsSUFBQXloQixFQUFBcEwsRUFBQTg0QyxTQUFBbnZELEdBUUEsSUFQQWt2RCxFQUFBbHZELEVBQUF5aEIsR0FFQSxLQUNBQSxHQUFBLEtBSUEvMUIsTUFBQSsxQixJQUFBdmdDLEtBQUFpSSxJQUFBczRCLEdBQUEsR0FBQXZnQyxLQUFBaUksSUFBQXM0QixHQUFBLEdBQ0FBLEdBQUEsR0FHQSxJQUFBSCxHQUFBakwsRUFBQXBELE1BQUFxN0MsRUFBQXZpRSxFQUFBLEdBQUEwMUIsTUFBQXBMLEVBQUFwRCxNQUFBbzdDLEVBQUF0aUUsRUFBQSxHQUFBMDFCLE9BQ0F0dEMsS0FBQSs0RSxVQUFBenJDLEVBQ0F0dEMsS0FBQXM1RSxZQUFBbnNDLElBT0FBLFdBQUEsU0FBQXBwQyxHQUNBaTJFLEVBQUE3c0MsV0FBQTU0QyxLQUFBeUwsS0FBQStELEdBQ0EsSUFBQTAyRSxFQUFBejZFLEtBQUF3NkUsZUFDQUMsRUFBQUUsU0FBQTUyRSxFQUFBK21DLE9BQ0EydkMsRUFBQUksU0FBQTkyRSxFQUFBZ25DLFVBY0EsU0FBQTZ2QyxFQUFBenJELEVBQUE4ckQsR0FDQSxPQUFBaEIsRUFBQTlxRCxFQUFBc3FELEVBQUF3QixJQVpBNzVFLEVBQUFRLE1BQUEsZ0NBQUE0NkIsR0FDQSs5QyxFQUFBbG1GLFVBQUFtb0MsR0FBQSxTQUFBck4sR0FFQSxPQURBQSxFQUFBbXJELEVBQUFuckQsR0FBQW1yRCxFQUFBdDZFLEtBQUFrdEMsTUFDQTZzQyxFQUFBdjlDLEdBQUFqb0MsS0FBQXlMLEtBQUFtdkIsTUFJQW9yRCxFQUFBbDdFLE9BQUEsV0FDQSxXQUFBazdFLEdBT0EsSUFBQXI0RSxFQUFBcTRFLEVBQ0FuZ0YsRUFBQTBELFFBQUFvRSxpRUN4TEEsSUFBQWQsRUFBQTdMLEVBQUEsMkNBRUEyMEMsRUFBQTMwQyxFQUFBLDZDQUVBOHNELEVBQUE5c0QsRUFBQSxrREE0QkF3a0YsRUFBQTd2QyxFQUFBNzFDLFVBQ0EyMUMsRUFBQUUsRUFBQXpqQyxRQUNBekwsS0FBQSxVQUtBc04sS0FBQSxTQUFBL0MsRUFBQXFTLEdBR0FyUyxJQUFBbkUsRUFBQTZFLFFBQUFWLEtBQ0FBLEVBQUEsSUFBQTg4QyxHQUNBbFgsV0FBQTVsQyxLQUlBdkYsS0FBQWs3RSxhQUFBMzFFLEVBQ0F2RixLQUFBd29DLFFBQUE1d0IsSUFBQSxFQUFBclMsRUFBQTRsQyxXQUFBNXpDLE9BQUEsSUFFQXVCLE1BQUEsU0FBQXEyQixHQUNBLHVCQUFBQSxFQUFBbnZCLEtBQUFrN0UsYUFBQWw0QixXQUFBN3pCLEdBQ0FwaUIsS0FBQSt4QixNQUFBM1AsSUFFQXlaLFFBQUEsU0FBQXV5QyxHQUVBLE9BREFBLEVBQUFuN0UsS0FBQWxILE1BQUFxaUYsR0FDQXBCLEVBQUFueEMsUUFBQXIwQyxLQUFBeUwsS0FBQW03RSxJQUFBLE1BQUFuN0UsS0FBQWs3RSxhQUFBL3ZDLFdBQUFnd0MsSUFRQW55QyxVQUFBLFNBQUE3WixHQUNBLE9BQUE0cUQsRUFBQS93QyxVQUFBejBDLEtBQUF5TCxVQUFBbEgsTUFBQXEyQixLQUVBOVQsTUFBQSxTQUFBOFQsR0FDQSxPQUFBcGlCLEtBQUEreEIsTUFBQWk3QyxFQUFBMStELE1BQUE5bUIsS0FBQXlMLEtBQUFtdkIsS0FNQTZlLFNBQUEsV0FLQSxJQUpBLElBQUE3RSxLQUNBdnhCLEVBQUE1WCxLQUFBd29DLFFBQ0EyeUMsRUFBQXZqRSxFQUFBLEdBRUF1akUsR0FBQXZqRSxFQUFBLElBQ0F1eEIsRUFBQXJ6QyxLQUFBcWxGLEdBQ0FBLElBR0EsT0FBQWh5QyxHQVFBL1QsU0FBQSxTQUFBNTFCLEdBQ0EsSUFBQVEsS0FBQXNiLFVBRUEsT0FBQXRiLEtBQUFrN0UsYUFBQS92QyxXQUFBM3JDLElBT0ErSixNQUFBLFdBQ0EsT0FBQXZKLEtBQUF3b0MsUUFBQSxHQUFBeG9DLEtBQUF3b0MsUUFBQSxNQU1Bc3lDLG9CQUFBLFNBQUE3OUUsRUFBQXNILEdBQ0F2RSxLQUFBbTVFLFlBQUFsOEUsRUFBQWtoRCxxQkFBQTU1QyxLQUVBaUIsZUFBQSxXQUNBLE9BQUF4RixLQUFBazdFLGNBRUF4QixVQUFBdDRFLEVBQUFzdEMsS0FDQXZCLFdBQUEvckMsRUFBQXN0QyxPQU1BMUUsRUFBQTNxQyxPQUFBLFdBQ0EsV0FBQTJxQyxHQUdBLElBQUE5bkMsRUFBQThuQyxFQUNBNXZDLEVBQUEwRCxRQUFBb0UsK0RDaElBLElBQUEyaUIsRUFBQXR2QixFQUFBLDRDQTZCQSxTQUFBMjBDLEVBQUFreEMsR0FDQXA3RSxLQUFBcTdFLFNBQUFELE1BT0FwN0UsS0FBQXdvQyxTQUFBcUQsVUFPQTdyQyxLQUFBKzRFLFVBQUEsRUFDQS80RSxLQUFBc0ksTUFBQXRJLEtBQUFzSSxLQUFBelEsTUFBQW1JLEtBQUF5SSxXQVNBeWhDLEVBQUE3MUMsVUFBQXlFLE1BQUEsU0FBQXEyQixHQUtBLE9BQUFBLEdBR0ErYSxFQUFBNzFDLFVBQUFpbkYsV0FBQSxTQUFBbmxGLEdBQ0EsT0FBQTZKLEtBQUFxN0UsU0FBQWxsRixJQUdBK3pDLEVBQUE3MUMsVUFBQXUwQyxRQUFBLFNBQUF6WixHQUNBLElBQUF2WCxFQUFBNVgsS0FBQXdvQyxRQUNBLE9BQUFyWixHQUFBdlgsRUFBQSxJQUFBdVgsR0FBQXZYLEVBQUEsSUFTQXN5QixFQUFBNzFDLFVBQUEyMEMsVUFBQSxTQUFBN1osR0FDQSxJQUFBdlgsRUFBQTVYLEtBQUF3b0MsUUFFQSxPQUFBNXdCLEVBQUEsS0FBQUEsRUFBQSxHQUNBLElBR0F1WCxFQUFBdlgsRUFBQSxLQUFBQSxFQUFBLEdBQUFBLEVBQUEsS0FTQXN5QixFQUFBNzFDLFVBQUFnbkIsTUFBQSxTQUFBOFQsR0FDQSxJQUFBdlgsRUFBQTVYLEtBQUF3b0MsUUFDQSxPQUFBclosR0FBQXZYLEVBQUEsR0FBQUEsRUFBQSxJQUFBQSxFQUFBLElBUUFzeUIsRUFBQTcxQyxVQUFBOGtGLFlBQUEsU0FBQUMsR0FDQSxJQUFBeGhFLEVBQUE1WCxLQUFBd29DLFFBQ0E0d0MsRUFBQSxHQUFBeGhFLEVBQUEsS0FBQUEsRUFBQSxHQUFBd2hFLEVBQUEsSUFDQUEsRUFBQSxHQUFBeGhFLEVBQUEsS0FBQUEsRUFBQSxHQUFBd2hFLEVBQUEsS0FVQWx2QyxFQUFBNzFDLFVBQUF5bUYsb0JBQUEsU0FBQTc5RSxFQUFBc0gsR0FDQXZFLEtBQUFtNUUsWUFBQWw4RSxFQUFBa2hELHFCQUFBNTVDLEtBUUEybEMsRUFBQTcxQyxVQUFBNGxCLFVBQUEsV0FDQSxPQUFBamEsS0FBQXdvQyxRQUFBL3RDLFNBU0F5dkMsRUFBQTcxQyxVQUFBeTBDLFVBQUEsU0FBQXg3QixFQUFBZ0gsR0FDQSxJQUFBMmtFLEVBQUFqNUUsS0FBQXdvQyxRQUVBanhCLE1BQUFqSyxLQUNBMnJFLEVBQUEsR0FBQTNyRSxHQUdBaUssTUFBQWpELEtBQ0Eya0UsRUFBQSxHQUFBM2tFLElBU0E0MUIsRUFBQTcxQyxVQUFBaW5CLFFBQUEsV0FDQSxPQUFBdGIsS0FBQXU3RSxVQU1BcnhDLEVBQUE3MUMsVUFBQTQyQyxTQUFBLFNBQUEzdkIsR0FDQXRiLEtBQUF1N0UsU0FBQWpnRSxHQVFBNHVCLEVBQUE3MUMsVUFBQStnQyxTQUFBLEtBQ0F2USxFQUFBbUYsa0JBQUFrZ0IsR0FDQXJsQixFQUFBcWdELHNCQUFBaDdCLEdBQ0FrOEIsb0JBQUEsSUFFQSxJQUFBbGtFLEVBQUFnb0MsRUFDQTl2QyxFQUFBMEQsUUFBQW9FLDhEQzlLQSxJQUFBZCxFQUFBN0wsRUFBQSwyQ0FFQTJzQyxFQUFBM3NDLEVBQUEsNkNBRUE4aUIsRUFBQTlpQixFQUFBLDZDQUVBaW1GLEVBQUFqbUYsRUFBQSw4Q0FFQTAwQyxFQUFBMTBDLEVBQUEsZ0RBNkJBeWtGLEVBQUEvdkMsRUFBQTUxQyxVQUNBOGxGLEVBQUFwdEUsS0FBQW9oQyxLQUNBK3JDLEVBQUFudEUsS0FBQTZqQyxNQXlCQTZxQyxFQUFBeHhDLEVBQUF4akMsUUFDQXpMLEtBQUEsT0FLQW82QixTQUFBLFNBQUFqRyxHQUNBLElBQUF1c0QsRUFBQTE3RSxLQUFBMjdFLFNBQ0FDLEVBQUEsSUFBQXZxQixLQUFBbGlDLEdBQ0EsT0FBQTlXLEVBQUF5MUQsV0FBQTROLEVBQUEsR0FBQUUsRUFBQTU3RSxLQUFBczdFLFdBQUEsWUFNQW51QyxXQUFBLFNBQUFwcEMsR0FDQSxJQUFBNlQsRUFBQTVYLEtBQUF3b0MsUUFTQSxHQVBBNXdCLEVBQUEsS0FBQUEsRUFBQSxLQUVBQSxFQUFBLElBekNBaWtFLE1BMENBamtFLEVBQUEsSUExQ0Fpa0UsT0E4Q0Fqa0UsRUFBQSxNQUFBaTBCLEtBQUFqMEIsRUFBQSxLQUFBaTBCLElBQUEsQ0FDQSxJQUFBaHRDLEVBQUEsSUFBQXd5RCxLQUNBejVDLEVBQUEsUUFBQXk1QyxLQUFBeHlELEVBQUFpOUUsY0FBQWo5RSxFQUFBazlFLFdBQUFsOUUsRUFBQW05RSxXQUNBcGtFLEVBQUEsR0FBQUEsRUFBQSxHQWpEQWlrRSxNQW9EQTc3RSxLQUFBMDVFLFVBQUEzMUUsRUFBQWtwQyxZQUFBbHBDLEVBQUFxcEMsWUFBQXJwQyxFQUFBc3BDLGFBRUEsSUFBQUMsRUFBQXR0QyxLQUFBKzRFLFVBRUFoMUUsRUFBQSttQyxTQUNBbHpCLEVBQUEsR0FBQXNxQixFQUFBcEQsTUFBQW83QyxFQUFBdGlFLEVBQUEsR0FBQTAxQixPQUdBdnBDLEVBQUFnbkMsU0FDQW56QixFQUFBLEdBQUFzcUIsRUFBQXBELE1BQUFxN0MsRUFBQXZpRSxFQUFBLEdBQUEwMUIsUUFPQW9zQyxVQUFBLFNBQUFxQixFQUFBM3RDLEVBQUFDLEdBQ0EwdEMsS0FBQSxHQUNBLElBQUFuakUsRUFBQTVYLEtBQUF3b0MsUUFDQTNjLEVBQUFqVSxFQUFBLEdBQUFBLEVBQUEsR0FDQXFrRSxFQUFBcHdELEVBQUFrdkQsRUFFQSxNQUFBM3RDLEdBQUE2dUMsRUFBQTd1QyxJQUNBNnVDLEVBQUE3dUMsR0FHQSxNQUFBQyxHQUFBNHVDLEVBQUE1dUMsSUFDQTR1QyxFQUFBNXVDLEdBR0EsSUFBQTZ1QyxFQUFBQyxFQUFBNWtGLE9BQ0FpRixFQWpGQSxTQUFBaEIsRUFBQWlWLEVBQUEyckUsRUFBQUMsR0FDQSxLQUFBRCxFQUFBQyxHQUFBLENBQ0EsSUFBQXo5QixFQUFBdzlCLEVBQUFDLElBQUEsRUFFQTdnRixFQUFBb2pELEdBQUEsR0FBQW51QyxFQUNBMnJFLEVBQUF4OUIsRUFBQSxFQUVBeTlCLEVBQUF6OUIsRUFJQSxPQUFBdzlCLEVBc0VBRSxDQUFBSCxFQUFBRixFQUFBLEVBQUFDLEdBQ0FLLEVBQUFKLEVBQUFwdkUsS0FBQXNLLElBQUE3YSxFQUFBMC9FLEVBQUEsSUFDQTV1QyxFQUFBaXZDLEVBQUEsR0FFQSxZQUFBQSxFQUFBLElBQ0EsSUFBQUMsRUFBQTN3RCxFQUFBeWhCLEVBSUFBLEdBREFwTCxFQUFBdTZDLEtBQUFELEVBQUF6QixHQUFBLEdBSUEsSUFBQTJCLEVBQUExOEUsS0FBQXM3RSxXQUFBLG1CQUFBanFCLE1BQUF6NUMsRUFBQSxLQUFBQSxFQUFBLElBQUEra0Usb0JBQUEsSUFDQXh2QyxHQUFBcGdDLEtBQUEreEIsTUFBQXE3QyxHQUFBdmlFLEVBQUEsR0FBQThrRSxHQUFBcHZDLEtBQUFvdkMsR0FBQTN2RSxLQUFBK3hCLE1BQUFvN0MsR0FBQXRpRSxFQUFBLEdBQUE4a0UsR0FBQXB2QyxLQUFBb3ZDLElBQ0FsQixFQUFBb0IsVUFBQXp2QyxFQUFBdjFCLEdBQ0E1WCxLQUFBMjdFLFNBQUFZLEVBRUF2OEUsS0FBQSs0RSxVQUFBenJDLEVBQ0F0dEMsS0FBQXM1RSxZQUFBbnNDLEdBRUFyMEMsTUFBQSxTQUFBcTJCLEdBRUEsT0FBQStTLEVBQUErakIsVUFBQTkyQixNQUdBL3RCLEVBQUFRLE1BQUEsZ0NBQUE0NkIsR0FDQWkvQyxFQUFBcG5GLFVBQUFtb0MsR0FBQSxTQUFBck4sR0FDQSxPQUFBNnFELEVBQUF4OUMsR0FBQWpvQyxLQUFBeUwsVUFBQWxILE1BQUFxMkIsT0FJQSxJQUFBZ3RELElBQ0EsV0F0SEEsTUF1SEEsV0FBQVUsTUFDQSxXQUFBQSxNQUNBLFdBQUFBLE9BQ0EsV0FBQUEsTUFDQSxlQTFIQUEsTUEySEEsZUFBQUMsTUFDQSxlQUFBQSxNQUNBLGVBQUFBLE1BQ0EsZUFBQUEsT0FDQSxlQTlIQUEsT0ErSEEsZUFBQWpCLE9BQ0EsZUFBQUEsUUFDQSxlQUFBQSxRQUNBLGNBaklBQSxRQWtJQSxjQUFBa0IsU0FDQSxjQUFBQSxTQUNBLGNBQUFBLFNBQ0EsY0FBQUEsUUFDQSxjQUFBQSxTQUNBLE9BQUFBLFNBQ0EsY0FBQUEsUUFDQSxPQUFBQSxVQUNBLE9BQUFBLFVBQ0EsUUFBQUEsVUFDQSxPQUFBQSxVQUNBLFFBQUFBLFVBQ0EsT0FBQUEsVUFDQSxVQUFBQSxTQUNBLFFBQUFBLFdBQ0EsUUFBQUEsVUFDQSxZQUFBQSxVQUNBLFFBQUFBLFdBQ0EsUUFBQUEsVUFDQSxPQUFBQSxVQU9BdEIsRUFBQXA4RSxPQUFBLFNBQUEyckIsR0FDQSxXQUFBeXdELEdBQ0E1SixPQUFBN21ELEVBQUF2cEIsUUFBQW5MLElBQUEsYUFJQSxJQUFBNEwsRUFBQXU1RSxFQUNBcmhGLEVBQUEwRCxRQUFBb0UsZ0VDOU1BLElBQUFnZ0MsRUFBQTNzQyxFQUFBLDZDQXdCQXVqRixFQUFBNTJDLEVBQUFwRCxNQW9DQSxTQUFBeTZDLEVBQUFqc0MsR0FFQSxPQUFBcEwsRUFBQXUzQyxpQkFBQW5zQyxHQUFBLEVBR0EsU0FBQXZFLEVBQUE4d0MsRUFBQXI5RSxFQUFBb2IsR0FDQWlpRSxFQUFBcjlFLEdBQUF1USxLQUFBbUcsSUFBQW5HLEtBQUFzSyxJQUFBd2lFLEVBQUFyOUUsR0FBQW9iLEVBQUEsSUFBQUEsRUFBQSxJQUlBLFNBQUFnbEUsRUFBQS9DLEVBQUFqaUUsSUFDQXlILFNBQUF3NkQsRUFBQSxNQUFBQSxFQUFBLEdBQUFqaUUsRUFBQSxLQUNBeUgsU0FBQXc2RCxFQUFBLE1BQUFBLEVBQUEsR0FBQWppRSxFQUFBLElBQ0FteEIsRUFBQTh3QyxFQUFBLEVBQUFqaUUsR0FDQW14QixFQUFBOHdDLEVBQUEsRUFBQWppRSxHQUVBaWlFLEVBQUEsR0FBQUEsRUFBQSxLQUNBQSxFQUFBLEdBQUFBLEVBQUEsSUE2Q0EvN0UsRUFBQTY3RSx1QkF4RkEsU0FBQS9oRSxFQUFBcTFCLEVBQUFHLEVBQUFDLEdBQ0EsSUFBQXR6QyxLQUNBOHhCLEVBQUFqVSxFQUFBLEdBQUFBLEVBQUEsR0FDQTAxQixFQUFBdnpDLEVBQUF1ekMsU0FBQXBMLEVBQUF1NkMsS0FBQTV3RCxFQUFBb2hCLEdBQUEsR0FFQSxNQUFBRyxHQUFBRSxFQUFBRixJQUNBRSxFQUFBdnpDLEVBQUF1ekMsU0FBQUYsR0FHQSxNQUFBQyxHQUFBQyxFQUFBRCxJQUNBQyxFQUFBdnpDLEVBQUF1ekMsU0FBQUQsR0FJQSxJQUFBOXBCLEVBQUF4cEIsRUFBQTYvRSxrQkFBQUwsRUFBQWpzQyxHQUlBLE9BREFzdkMsRUFEQTdpRixFQUFBOC9FLGdCQUFBZixFQUFBL3JFLEtBQUFvaEMsS0FBQXYyQixFQUFBLEdBQUEwMUIsS0FBQS9wQixHQUFBdTFELEVBQUEvckUsS0FBQTZqQyxNQUFBaDVCLEVBQUEsR0FBQTAxQixLQUFBL3BCLElBQ0EzTCxHQUNBN2QsR0F1RUErRCxFQUFBeTdFLHVCQUNBejdFLEVBQUE4K0UsWUFDQTkrRSxFQUFBMDdFLHNCQTVDQSxTQUFBbHNDLEVBQUExMUIsRUFBQWlpRSxFQUFBRCxHQUNBLElBQUF6d0MsS0FFQSxJQUFBbUUsRUFDQSxPQUFBbkUsRUFNQXZ4QixFQUFBLEdBQUFpaUUsRUFBQSxJQUNBMXdDLEVBQUFyekMsS0FBQThoQixFQUFBLElBS0EsSUFGQSxJQUFBMjBCLEVBQUFzdEMsRUFBQSxHQUVBdHRDLEdBQUFzdEMsRUFBQSxLQUNBMXdDLEVBQUFyekMsS0FBQXkyQyxJQUVBQSxFQUFBdXNDLEVBQUF2c0MsRUFBQWUsRUFBQXNzQyxNQUVBendDLElBQUE1eEMsT0FBQSxLQU1BLEdBQUE0eEMsRUFBQTV4QyxPQW5CQSxJQW9CQSxTQVVBLE9BSkFxZ0IsRUFBQSxJQUFBdXhCLEVBQUE1eEMsT0FBQTR4QyxJQUFBNXhDLE9BQUEsR0FBQXNpRixFQUFBLEtBQ0Exd0MsRUFBQXJ6QyxLQUFBOGhCLEVBQUEsSUFHQXV4QixxRUN2SEEsSUFBQTNpQyxFQUFBalIsRUFBQSwyQ0FFQXFNLEVBQUE0RSxFQUFBNUUsS0FDQWxILEVBQUE4TCxFQUFBOUwsSUFFQWc3QixHQURBbHZCLEVBQUFQLFFBQ0FPLEVBQUFrdkIsWUFDQThCLEVBQUFoeEIsRUFBQWd4QixjQUNBa1gsRUFBQWxvQyxFQUFBa29DLEtBSUF3L0IsRUFGQTM0RSxFQUFBLDZDQUVBMjRFLFdBSUEzSSxFQUZBaHdFLEVBQUEsZ0RBRUFnd0UsT0FFQWxaLEVBQUE5MkQsRUFBQSw4Q0FFQSsyRCxFQUFBLzJELEVBQUEsOENBSUF1dUQsRUFGQXZ1RCxFQUFBLDRDQUVBdXVELGlCQTRCQSxTQUFBZ0osRUFBQXFDLEVBQUF6dEQsRUFBQXM3RSxFQUFBQyxHQUNBajlFLEtBQUFtdkQsYUFDQW52RCxLQUFBMEIsTUFDQTFCLEtBQUFxd0QsV0FLQTJzQixFQUFBaDlFLEtBQUFrOUUsdUJBQUFGLEVBQUF2aUYsUUFDQXdpRixFQUFBajlFLEtBQUFtOUUsZ0JBQUFGLEVBQUF4aUYsUUFDQXVGLEtBQUFvOUUsYUFBQUosRUFBQTNoRixPQUFBNGhGLEdBYUFqOUUsS0FBQXE5RSxjQUFBN2xELElBR0EsSUFBQXFyQixFQUFBaUssRUFBQXo0RCxVQW1KQSxTQUFBaXBGLEVBQUF4c0IsRUFBQXlzQixFQUFBOTdFLEVBQUFpQixFQUFBcUIsR0FFQSxJQUFBc3NELEVBNkNBLFNBQUFtdEIsRUFBQXo1RSxFQUFBK3FFLEdBQ0EsT0FBQS9xRSxFQUFBdXhELFlBQUF2eEQsRUFBQXd4RCxVQUFBeHhELEVBQUF3eEQsU0FBQWovRCxJQUFBdzRFLEVBQUEyTyxXQUFBOWxGLEtBL0NBb00sUUFFQW5DLEVBQUEyN0UsRUFBQSxTQUFBM2lCLEVBQUFwK0QsR0FDQSxJQUFBdUgsRUFBQXd3RCxZQUFBeHdELEVBQUF3d0QsYUFBQXFHLEVBQUFyRyxXQUFBLENBSUEsSUFBQW1wQixFQUFBNXNCLEVBQUF1c0IsY0FBQS9tRixJQUFBc2tFLEVBQUExdUQsS0FFQXl4RSxFQUFBRCxFQUFBQyxjQUNBQyxFQUFBRixFQUFBRSxZQUVBLEdBQUFBLEVBQUEsQ0FDQSxJQUFBQyxFQUNBek0sRUFBQXdNLEVBQUF4TSxhQUNBQSxFQUFBeHZFLEtBQUEsU0FBQWs4RSxHQUNBTixFQUFBejVFLEVBQUErNUUsS0FDQUEsRUFBQTdsQixRQUNBNGxCLEdBQUEsS0FHQUEsR0FBQUQsRUFBQTNsQixRQUNBRCxFQUFBNGxCLEVBQUFsN0UsR0FDQSxJQUFBcTdFLEVBQUFqdEIsRUFBQXFILGVBQUF5bEIsRUFBQTc1RSxFQUFBaTZFLE9BS0E1TSxFQUFBeHZFLEtBQUEsU0FBQWs4RSxHQUNBQSxFQUFBNWxCLFFBQUE2bEIsS0FFQTF0QixHQUFBdXRCLEVBQUExbEIsUUFBQTZsQixRQUNLSixHQUNMQSxFQUFBLzdFLEtBQUEsU0FBQWt0RSxFQUFBbVAsR0FDQVQsRUFBQXo1RSxFQUFBK3FFLElBQ0FBLEVBQUE3VyxRQUdBLElBQUE4bEIsRUFBQWp0QixFQUFBcUgsZUFBQTJXLEVBQUEvcUUsRUFBQWk2RSxPQUNBRCxFQUFBRyxNQUFBdGpCLEVBQUF1akIsa0JBQUExOEUsRUFBQXUzQixpQkFBQTgxQyxFQUFBMzVCLFFBQUFucUIsT0FDQWd0QyxFQUFBOFcsRUFBQXBzRSxHQUNBMnRELEdBQUF5ZSxFQUFBNVcsUUFBQTZsQixRQVNBanRCLEVBQUFULGNBaE1BeE4sRUFBQStSLFlBQUEsU0FBQW56RCxFQUFBaUIsR0FpQkFqQixFQUFBbXpELFlBQUFseUQsR0FRQTFDLEtBQUFxOUUsY0FBQXo3RSxLQUFBLFNBQUF3OEUsR0FDQSxJQUFBUixFQUFBUSxFQUFBUixZQUNBQSxLQUFBM2xCLFdBS0FwVixFQUFBc1YsZUFBQSxTQUFBMlcsRUFBQXVQLEdBRUEsR0FBQXZQLEVBQUEyTyxXQUFBLENBSUEsSUFBQXhNLEVBQUFqeEUsS0FBQXMrRSxhQUFBaG9GLElBQUF3NEUsRUFBQTJPLFdBQUE5bEYsSUFFQTRtRixFQUFBdE4sRUFBQTk3QixRQUVBakgsR0FEQW13QyxHQUFBcE4sRUFBQXVOLHNCQUFBRCxLQUFBbjNFLG9CQUFBMG5FLEVBQUEyUCxnQkFBQXhOLEVBQUF5TixXQUNBek4sRUFBQS9pQyxLQUFBLEtBQ0F5d0MsRUFBQUosS0FBQUksYUFFQSxPQUNBendDLE9BQ0Ewd0MsTUFIQSxNQUFBRCxFQUFBNXhFLEtBQUFvaEMsS0FBQXd3QyxFQUFBendDLEdBQUEsS0FJQXl3QyxrQkFJQTk3QixFQUFBcXVCLFlBQUEsU0FBQStNLEdBQ0EsT0FBQWorRSxLQUFBcytFLGFBQUFob0YsSUFBQTJuRixJQVdBcDdCLEVBQUEyTyxrQkFBQSxTQUFBeHVELEVBQUE4dkQsR0FDQSxJQUFBbWUsRUFBQWp4RSxLQUFBcytFLGFBQUFob0YsSUFBQTBNLEVBQUFrSixLQUdBMnlFLEVBREE3N0UsRUFBQUcsVUFDQW9HLFFBTUFuQyxFQUFBNnBFLEVBQUF1TixvQkFBQTFyQixFQUFBZ3NCLDBCQUFBRCxHQUFBNU4sRUFBQThOLFVBQ0E3M0UsRUFBQWxFLEVBQUExTSxJQUFBLFVBQUF1b0YsR0FBQTc3RSxFQUFBMU0sSUFBQSxrQkFHQXFvRixFQUFBLFFBQUEzN0UsRUFBQTFNLElBQUEsd0JBQUF1b0YsRUFBQSxLQUNBNzdFLEVBQUFnRSxnQkFBQWlxRSxFQUFBOTdCLFNBQ0EvdEMsb0JBQ0F1M0UsZUFDQXozRSxVQUlBMjdDLEVBQUErUyxpQkFBQSxTQUFBbjBELEdBQ0EsSUFBQXF2RCxFQUFBOXdELEtBQ0FnL0UsRUFBQWx1QixFQUFBd3RCLGFBQUE5bUQsSUFDQS8xQixFQUFBNHlCLFdBQUEsU0FBQXJ4QixHQUNBLElBQUFxRSxFQUFBckUsRUFBQXd0RSxpQkFDQXlOLEVBQUFqN0UsRUFBQWtKLElBQ0E4eUUsRUFBQXpvRixJQUFBMG5GLEdBQ0F0bUYsR0FBQXNtRixFQUNBN2tGLEtBQUEsS0FDQTZsRixLQUFBLEtBQ0FGLFVBQUEvN0UsRUFBQXl0RSwwQkFDQStOLG1CQUFBbjNFLEtBQUFyRSxFQUFBMnRFLG9CQUFBM3RFLEVBQUEydEUsc0JBQ0ErTixZQUFBLEVBQ0F4d0MsS0FBQW5oQyxLQUFBK3hCLE1BQUF6M0IsR0FBQSxLQUNBa0MsTUFBQSxJQUVBMjFFLEVBQUFwdUIsRUFBQTl0RCxJQUFBcXJFLGFBSUF4ckIsRUFBQWdULGtCQUFBLFdBQ0EsSUFBQXNwQixFQUFBbi9FLEtBQUFxOUUsY0FDQTU3RSxFQUFBekIsS0FBQW12RCxXQUFBeC9DLFdBQ0FqTyxFQUFBMUIsS0FBQTBCLElBQ0FFLEVBQUE1QixLQUFBbzlFLGFBQUEsU0FBQWhzRCxHQUNBLElBQUFELEVBQUFndUQsRUFBQTdvRixJQUFBODZCLEVBQUFsbEIsTUFBQWl6RSxFQUFBNW9GLElBQUE2NkIsRUFBQWxsQixRQUNBa2xCLEVBQUE0eEMsT0FnSEEsU0FBQWxTLEVBQUE4SixFQUFBOGlCLEVBQUFqOEUsRUFBQUMsR0FDQSxJQUFBaThFLEVBQUFELEVBQUFDLGdCQUFBRCxFQUFBQyxjQUFBbm1ELEtBQ0FsMUIsRUFBQXM0RCxFQUFBdDRELFdBQ0E4OEUsRUFBQXhrQixFQUFBd2tCLGdCQUlBeGtCLEVBQUF5a0Isa0JBQ0E1OUUsRUFBQWszQixjQUFBdDVCLEdBQ0dpRCxFQUNIYixFQUFBdW9FLG9CQUFBMW5FLEVBQUFqRCxHQUNHKy9FLEdBQ0hBLEVBQUEzOUUsRUFBQUMsR0FBQUUsS0FBQXZDLEdBR0EsU0FBQUEsRUFBQTJELEdBQ0EsSUFBQWk3RSxFQUFBajdFLEVBQUFrSixJQUdBNGlFLEVBQUE2TyxFQUFBcm5GLElBQUEybkYsSUFBQU4sRUFBQXBuRixJQUFBMG5GLEVBQUEvUCxHQUNBblksS0FBQXVwQixFQUNBdGMsTUFBQXVjLEVBQ0FoMkUsTUFBQWkyRSxLQUVBMVEsRUFBQTM1QixTQUNBbnFCLE1BQUFob0IsRUFDQXZCLFVBQ0FDLE1BQ0ErOUUsZUFBQTdrQixFQUFBOGtCLFdBQUE5a0IsRUFBQStrQixTQUNBNXBCLEtBQUE2RSxFQUFBN0UsS0FDQWlOLE1BQUFwSSxFQUFBb0ksTUFDQWxTLGFBRUFvdUIsRUFBQXB1QixFQUFBOXRELEVBQUE4ckUsR0FJQSxJQUFBa1EsRUFBQWx1QixFQUFBd3RCLGFBQ0FYLEVBQUEvN0UsS0FBQSxTQUFBa3RFLEVBQUFtUCxHQUNBZSxFQUFBMW9GLElBQUEybkYsS0FDQW5QLEVBQUExd0UsVUFDQXUvRSxFQUFBaUMsVUFBQTNCLE1BekpBNEIsQ0FBQTcvRSxLQUFBb3hCLEVBQUFELEVBQUExdkIsRUFBQUMsR0FDQTB2QixFQUFBMHVELGNBNkpBLFNBQUFodkIsRUFBQThKLEVBQUE4aUIsRUFBQWo4RSxFQUFBQyxHQUNBLElBQUFrOEUsRUFBQUYsRUFBQUUsWUFBQUYsRUFBQUUsYUFDQTFQLEdBQ0FsTCxNQUFBK2MsSUFFQW5DLEVBQUF6b0MsU0FDQTF6QyxVQUNBQyxNQUNBbytFLGFBQUFsbEIsRUFBQWtsQixhQUNBaHZCLGFBR0EsSUFBQXNnQixFQUFBd00sRUFBQXhNLGFBQUF3TSxFQUFBeE0sY0FBQTU1QyxJQUNBbDFCLEVBQUFzNEQsRUFBQXQ0RCxXQUNBODhFLEVBQUF4a0IsRUFBQXdrQixnQkFDQVksR0FBQSxFQUNBOVEsRUFBQXRVLEVBQUFzVSxnQkFLQTVzRSxFQUNBYixFQUFBdW9FLG9CQUFBMW5FLEVBQUEyOUUsR0FDR2IsRUFDSEEsRUFBQTM5RSxFQUFBQyxHQUFBRSxLQUFBcStFLElBTUFELEdBQUEsRUFDQXArRSxFQUFBSCxFQUFBb29FLFlBQUFvVyxJQUdBLFNBQUFBLEVBQUFqOUUsR0FDQSxJQUFBaTdFLEVBQUFqN0UsRUFBQWtKLElBQ0E0eEUsRUFBQTFNLEVBQUE5NkUsSUFBQTJuRixHQUVBSCxJQUNBQSxFQUFBMU0sRUFBQTc2RSxJQUFBMG5GLEVBQUEvUCxHQUNBbEwsTUFBQWtkLEVBQ0FDLFFBQUFDLEtBSUF4QyxFQUFBM2xCLFNBR0E2bEIsRUFBQTNvQyxTQUNBbnFCLE1BQUFob0IsRUFDQWc5RSxrQkFDQTlRLG1CQUVBNE8sRUFBQXVDLE1BQUF6QyxFQUNBRSxFQUFBd0MsUUFBQU4sRUFDQWQsRUFBQXB1QixFQUFBOXRELEVBQUE4NkUsR0FJQSxJQUFBa0IsRUFBQWx1QixFQUFBd3RCLGFBQ0FsTixFQUFBeHZFLEtBQUEsU0FBQWs4RSxFQUFBRyxHQUNBZSxFQUFBMW9GLElBQUEybkYsS0FDQUgsRUFBQTEvRSxVQUdBdy9FLEVBQUEzbEIsUUFDQW1aLEVBQUF3TyxVQUFBM0IsTUEvTkFzQyxDQUFBdmdGLEtBQUFveEIsRUFBQUQsRUFBQTF2QixFQUFBQyxJQUNHMUIsT0FHSDZpRCxFQUFBaVQsWUFBQSxTQUFBaEQsRUFBQTluQyxFQUFBdnBCLEVBQUFDLEdBQ0EsSUFBQWsyRCxFQUFBOUUsRUFBQThFLFdBQ0F6aUIsRUFBQXlpQixFQUFBemlCLFFBQ0FBLEVBQUFucUIsUUFDQW1xQixFQUFBMXpDLFVBQ0EwekMsRUFBQXp6QyxNQUNBazJELEVBQUEwb0IsU0FBQXh0QixFQUFBZ3NCLHlCQUNBSSxFQUFBbC9FLEtBQUFnckIsRUFBQTRzQyxJQUdBL1UsRUFBQTBPLDBCQUFBLFNBQUE5dkQsRUFBQWlCLEdBRUE0NkUsRUFBQXQ5RSxVQUFBazlFLHVCQUFBejdFLEVBQUFpQixHQUNBczdFLE9BQUEsS0FPQW43QixFQUFBNE8sbUJBQUEsU0FBQWh3RCxFQUFBaUIsRUFBQXFCLEdBQ0F1NUUsRUFBQXQ5RSxVQUFBbTlFLGdCQUFBMTdFLEVBQUFpQixFQUFBcUIsSUF5REE4K0MsRUFBQXlPLG1CQUFBLFNBQUE3dkQsR0FDQSxJQUFBNHVELEVBQ0E1dUQsRUFBQTR5QixXQUFBLFNBQUFyeEIsR0FFQXF0RCxHQUFBcnRELEVBQUFxckUsU0FBQW5XLFlBRUFsNEQsS0FBQXF3RCxlQUdBeE4sRUFBQWtULEtBQUEsV0FFQS8xRCxLQUFBcytFLGFBQUExOEUsS0FBQSxTQUFBcXZFLEdBQ0EsSUFBQW5DLEVBQUFtQyxFQUFBZ08sS0FFQSxHQUNBLEdBQUFuUSxFQUFBd1IsUUFBQSxDQUNBclAsRUFBQXlOLFdBQUE1UCxFQUFBMlAsZ0JBQ0EsTUFHQTNQLElBQUEwUixvQkFDSzFSLE1BSUwsSUFBQTlXLEVBQUFuVixFQUFBbVYsY0FBQSxTQUFBOFcsRUFBQXBzRSxHQUNBLFdBQUFBLElBQUFvc0UsRUFBQTM1QixRQUFBenlDLFlBd0hBLFNBQUFxOUUsRUFBQTVxQyxHQUNBQSxFQUFBMnFDLGFBQUEzcUMsRUFBQTF6QyxRQUFBMHpDLEVBQUF6ekMsSUFBQXl6QyxFQUFBenlDLFNBR0EsU0FBQXc5RSxFQUFBL3FDLEVBQUFzckMsR0FDQSxPQUFBdHJDLEVBQUE2cUMsaUJBQUFVLEVBR0EsU0FBQUEsSUFDQTFnRixLQUFBcWdGLE1BQUFwb0IsUUFDQWo0RCxLQUFBMmdGLGdCQUFBMW9CLFFBR0EsU0FBQW1vQixJQUNBcGdGLEtBQUFxZ0YsT0FBQXJnRixLQUFBcWdGLE1BQUFwb0IsUUFHQSxTQUFBcW5CLEVBQUFucUMsR0FDQSxPQUFBQSxFQUFBNGdCLE1BQUE1Z0IsRUFBQTRnQixLQUFBNWdCLEVBQUFucUIsTUFBQW1xQixFQUFBMXpDLFFBQUEwekMsRUFBQXp6QyxJQUFBeXpDLEVBQUF6eUMsU0FHQSxTQUFBNjhFLEVBQUFwcUMsR0FDQUEsRUFBQXNxQyxnQkFDQXRxQyxFQUFBbDRDLEtBQUF5a0QsaUJBR0EsSUFBQWsvQixFQUFBenJDLEVBQUF5ckMsYUFBQTk4QixFQUFBM08sRUFBQTZ0QixNQUFBN3RCLEVBQUFucUIsTUFBQW1xQixFQUFBMXpDLFFBQUEwekMsRUFBQXp6QyxJQUFBeXpDLEVBQUF6eUMsVUFDQSxPQUFBaytFLEVBQUFycEYsT0FBQSxFQUFBbUQsRUFBQWttRixFQUFBLFNBQUFwM0IsRUFBQWh0RCxHQUNBLE9BQUFxa0YsRUFBQXJrRixLQUNHc2tGLEVBR0gsSUFBQUEsRUFBQUQsRUFBQSxHQUVBLFNBQUFBLEVBQUFFLEdBQ0EsZ0JBQUF0M0UsRUFBQTByQyxHQUNBLElBQUFsNEMsRUFBQWs0QyxFQUFBbDRDLEtBQ0ErakYsRUFBQTdyQyxFQUFBeXJDLGFBQUFHLEdBRUEsR0FBQUMsS0FBQUMsU0FDQSxRQUFBM3BGLEVBQUFtUyxFQUFBNkQsTUFBZ0NoVyxFQUFBbVMsRUFBQTZLLElBQWdCaGQsSUFDaEQwcEYsRUFBQUMsU0FBQWhrRixFQUFBM0YsUUFFSzBwRixLQUFBMWQsVUFDTDBkLEVBQUExZCxTQUFBNzVELEVBQUF4TSxJQUtBLFNBQUF1aUYsRUFBQXJxQyxHQUNBLE9BQUFBLEVBQUFsNEMsS0FBQXNNLFFBR0EsU0FBQTIxRSxFQUFBcHVCLEVBQUE5dEQsRUFBQThyRSxHQUNBLElBQUFtUCxFQUFBajdFLEVBQUFrSixJQUVBK2tFLEVBQUFuZ0IsRUFBQXd0QixhQUFBaG9GLElBQUEybkYsSUFFQWhOLEVBQUE3M0UsT0FBQTYzRSxFQUFBNzNFLEtBQUEwMUUsR0FDQW1DLEVBQUFnTyxNQUFBaE8sRUFBQWdPLEtBQUFDLEtBQUFwUSxHQUNBbUMsRUFBQWdPLEtBQUFuUSxFQUNBQSxFQUFBMlAsZ0JBQUF4TixFQUFBMW5FLFFBQ0F1bEUsRUFBQTJPLFdBQUF4TSxFQUdBbmtCLEVBQUErTixpQkFBQSxTQUFBRCxFQUFBckcsR0FVQSxPQVRBNytCLEVBQUFrbEMsS0FDQUEsR0FDQWtsQixhQUFBbGxCLEVBQ0F0NEQsV0FpQkEsU0FBQTQrRSxHQUNBNStFLEVBQUEsS0FFQSxJQUVBNCtFLEVBQUFDLEVBQUFDLEdBQ0csTUFBQTFxRixJQUVILE9BQUE0TCxFQXpCQSsrRSxDQUFBem1CLEtBSUFBLEVBQUExdUQsSUFBQXE1RCxFQUFBLGdCQUNBaFIsSUFBQXFHLEVBQUFyRyxjQUNBcUcsR0FzQkEsSUFFQXQ0RCxFQUZBNitFLEtBQ0FDLEtBZUEsU0FBQUUsRUFBQS9wRCxFQUFBZ3FELEdBQ0EsUUFBQXByRixLQUFBb3JGLEVBQUFsdEYsVUFFQWtqQyxFQUFBcGhDLEdBQUF1NEMsRUFoQkE0eUMsRUFBQUgsRUFBQTkwQixHQUNBaTFCLEVBQUFGLEVBQUE5MEIsR0FFQTYwQixFQUFBaHFFLGlCQUFBZ3FFLEVBQUFuWCxvQkFBQSxTQUFBaHZFLEdBQ0FzSCxFQUFBdEgsR0FHQW1tRixFQUFBditFLGNBQUEsU0FBQTQrRSxHQUNBLFdBQUFBLEVBQUEzK0UsVUFBQTIrRSxFQUFBMStFLFVBQ0FSLEVBQUFrL0UsRUFBQTErRSxVQVdBLElBQUFaLEVBQUE0cUQsRUFDQTF5RCxFQUFBMEQsUUFBQW9FLCtEQ2ppQkEsSUFBQXNFLEVBQUFqUixFQUFBLDJDQUdBMFEsR0FEQU8sRUFBQXUvQyxPQUNBdi9DLEVBQUFQLFNBRUExUSxFQUFBLHdDQUVBMnJCLFFBc0NBLFNBQUF1Z0UsRUFBQUMsR0FDQUEsUUFDQTFoRixLQUFBMmhGLE9BQUFELEVBQUExZSxNQUNBaGpFLEtBQUE0aEYsTUFBQUYsRUFBQTNyQixLQUNBLzFELEtBQUEwNEMsT0FBQWdwQyxFQUFBbjRFLE1BQ0F2SixLQUFBNmhGLFNBQUFILEVBQUF2QixRQUNBbmdGLEtBQUE4aEYsUUFBQSxFQUdBOWhGLEtBQUFtMUMsUUFHQSxJQUFBNHNDLEVBQUFOLEVBQUFwdEYsVUFTQTB0RixFQUFBN3BCLFFBQUEsU0FBQTZsQixHQUNBLElBY0FpRSxFQWRBQyxFQUFBamlGLEtBQUFraUYsVUFDQWhFLEVBQUFILEtBQUFHLEtBSUEsR0FBQWwrRSxLQUFBOGhGLFFBQUFHLEVBQUEsQ0FDQSxJQUFBOXNDLEVBQUFuMUMsS0FBQW0xQyxRQUNBQSxFQUFBbDRDLEtBQUFrNEMsRUFBQWk2QixXQUFBNlMsRUFBQTlzQyxRQUFBaTZCLFdBR0FwdkUsS0FBQXk5RSxhQUNBejlFLEtBQUF5OUUsV0FBQXRNLFlBQUFueEUsTUFLQUEsS0FBQTRoRixRQUFBMUQsSUFDQThELEVBQUFoaUYsS0FBQTRoRixNQUFBNWhGLEtBQUFtMUMsVUFLQSxJQWVBZ3RDLEVBZkFDLEVBQUFDLEVBQUFyaUYsS0FBQXNpRixRQUNBQyxFQUFBdmlGLEtBQUF3aUYsZUFBQSxFQUNBNUQsRUFBQXlELEVBQUF0RSxLQUFBYSxPQUNBRCxFQUFBWixLQUFBWSxjQUFBLEVBTUEsU0FBQTBELEVBQUFsekQsR0FHQSxRQUZBQSxHQUFBLEtBQUFBLEVBQUEsR0FFQUEsRUFQQWl6RCxJQUFBeEQsR0FBQTJELElBQUE1RCxJQUNBcUQsRUFBQSxVQVdBaGlGLEtBQUE4aEYsUUFBQSxVQUFBRSxLQUNBaGlGLEtBQUE4aEYsUUFBQSxFQUNBSyxFQWdHQSxTQUFBTSxFQUFBdkUsR0FHQSxJQUFBNWEsRUFDQTZlLEVBSEFNLEVBQUFDLFVBQUFELEVBQUFFLGNBQUFGLEVBQUFHLFFBQUEsRUFDQUgsRUFBQUksaUJBQUEsTUFJQTNFLEdBQUF1RSxFQUFBZCxVQUNBcmUsRUFBQW1mLEVBQUFkLE9BQUFjLEVBQUF0dEMsV0FFQW11QixhQUNBNmUsRUFBQTdlLEVBQUE2ZSxtQkFDQTdlLGNBSUFyOUQsRUFBQXE5RCxPQUFBL3JFLFNBQ0ErckUsRUFBQSxPQUlBbWYsRUFBQUssVUFBQXhmLEVBQ0FtZixFQUFBSCxPQUFBRyxFQUFBRCxjQUFBLEtBQ0EsSUFBQU8sRUFBQU4sRUFBQU8sWUFFQSxPQURBRCxLQUFBOXFCLFFBQ0FrcUIsRUF4SEFuZixDQUFBaGpFLEtBQUFrK0UsSUFHQWwrRSxLQUFBc2lGLE9BQUExRCxFQUNBNStFLEtBQUF3aUYsY0FBQTdELEVBQ0EsSUFBQXp3QyxFQUFBNnZDLEtBQUE3dkMsS0FXQSxHQVJBbHVDLEtBQUE0aUYsUUFEQVgsRUFDQUEsRUFBQVUsY0FHQTNpRixLQUFBMDRDLE9BQUExNEMsS0FBQTA0QyxPQUFBMTRDLEtBQUFtMUMsU0FBQXRKLElBS0E3ckMsS0FBQThpRixVQUFBLENBQ0EsSUFBQXgxRSxFQUFBdE4sS0FBQTBpRixVQUNBcHVFLEVBQUF2SCxLQUFBc0ssSUFBQSxNQUFBNjJCLEVBQUFsdUMsS0FBQTBpRixVQUFBeDBDLEVBQUFyQyxJQUFBN3JDLEtBQUE0aUYsU0FFQSxJQUFBMUUsSUFBQWlFLEdBQUE3MEUsRUFBQWdILEdBQUEsQ0FDQSxJQUFBZ3ZELEVBQUF0akUsS0FBQThpRixVQUVBLEdBQUE3OEUsRUFBQXE5RCxHQUNBLFFBQUFoc0UsRUFBQSxFQUF1QkEsRUFBQWdzRSxFQUFBL3JFLE9BQXFCRCxJQUM1QzJyRixFQUFBampGLEtBQUFzakUsRUFBQWhzRSxHQUFBZ1csRUFBQWdILEVBQUFzcUUsRUFBQUQsUUFHQXNFLEVBQUFqakYsS0FBQXNqRSxFQUFBaDJELEVBQUFnSCxFQUFBc3FFLEVBQUFELEdBSUEzK0UsS0FBQTBpRixVQUFBcHVFLEVBR0EsSUFBQTR1RSxFQUFBLE1BQUFsakYsS0FBQTZpRixpQkFBQTdpRixLQUFBNmlGLGlCQUFBdnVFLEVBQ0F0VSxLQUFBMmlGLGNBQUFPLE9BS0FsakYsS0FBQTBpRixVQUFBMWlGLEtBQUEyaUYsY0FBQSxNQUFBM2lGLEtBQUE2aUYsaUJBQUE3aUYsS0FBQTZpRixpQkFBQTdpRixLQUFBNGlGLFFBR0EsT0FBQTVpRixLQUFBcXdELGNBR0EsSUFBQTh5QixFQUFBLFdBQ0EsSUFBQTd1RSxFQUNBa00sRUFDQW8rRCxFQUNBRCxFQUNBeUUsRUFDQUMsR0FDQXJnQixNQUFBLFNBQUFyakUsRUFBQWpKLEVBQUE0c0YsRUFBQUMsR0FDQS9pRSxFQUFBN2dCLEVBQ0EyVSxFQUFBNWQsRUFDQWtvRixFQUFBMEUsRUFDQTNFLEVBQUE0RSxFQUNBSCxFQUFBcjJFLEtBQUFvaEMsS0FBQXd3QyxFQUFBQyxHQUNBeUUsRUFBQTVpRSxLQUFBbStELEVBQUEsR0FBQUQsRUFBQSxFQUFBNkUsRUFBQUMsSUFHQSxPQUFBSixFQUVBLFNBQUFJLElBQ0EsT0FBQWpqRSxFQUFBbE0sRUFBQWtNLElBQUEsS0FHQSxTQUFBZ2pFLElBQ0EsSUFBQXRnRixFQUFBc2QsRUFBQTRpRSxFQUFBeEUsRUFBQTd4RSxLQUFBb2hDLEtBQUEzdEIsRUFBQTRpRSxHQUNBcnBGLEVBQUF5bUIsR0FBQWxNLEVBQUEsS0FBQXBSLEVBQUF5N0UsRUFBQXo3RSxFQUVBc2QsRUFFQSxPQURBQSxJQUNBem1CLEdBNUJBLEdBcUNBLFNBQUFrcEYsRUFBQVIsRUFBQW5mLEVBQUFoMkQsRUFBQWdILEVBQUFzcUUsRUFBQUQsR0FDQXdFLEVBQUFuZ0IsTUFBQTExRCxFQUFBZ0gsRUFBQXNxRSxFQUFBRCxHQUNBOEQsRUFBQWlCLGlCQUFBcGdCLEVBRUFtZixFQUFBaUIsa0JBQ0FwMkUsUUFDQWdILE1BQ0EvSyxNQUFBK0ssRUFBQWhILEVBQ0FtVCxLQUFBMGlFLEVBQUExaUUsTUFDR2dpRSxFQUFBdHRDLFNBZEg0c0MsRUFBQTlwQixNQUFBLFdBQ0FqNEQsS0FBQThoRixRQUFBLEVBQ0E5aEYsS0FBQTZoRixVQUFBN2hGLEtBQUE2aEYsU0FBQTdoRixLQUFBbTFDLFVBOENBNHNDLEVBQUExeEIsV0FBQSxXQUNBLE9BQUFyd0QsS0FBQThpRixXQUFBOWlGLEtBQUEwaUYsVUFBQTFpRixLQUFBNGlGLFNBUUFiLEVBQUE3QyxLQUFBLFNBQUF5RSxJQUVBM2pGLEtBQUFnakYsY0FBQVcsR0FBQTNqRixLQUFBOGhGLFVBQ0E5aEYsS0FBQWdqRixZQUFBVyxFQUNBQSxFQUFBekIsVUFBQWxpRixLQUNBMmpGLEVBQUExckIsVUFJQThwQixFQUFBM2pGLFFBQUEsV0FDQTRCLEtBQUE2d0QsWUFJQTd3RCxLQUFBa2lGLFlBQUFsaUYsS0FBQWtpRixVQUFBYyxZQUFBLE1BQ0FoakYsS0FBQWdqRixjQUFBaGpGLEtBQUFnakYsWUFBQWQsVUFBQSxNQUNBbGlGLEtBQUE4aEYsUUFBQSxFQUNBOWhGLEtBQUE2d0QsV0FBQSxJQUdBa3hCLEVBQUF2QixZQUFBLFdBQ0EsT0FBQXhnRixLQUFBa2lGLFdBR0FILEVBQUFwQixjQUFBLFdBQ0EsT0FBQTNnRixLQUFBZ2pGLGFBR0FqQixFQUFBNVMsYUFBQSxTQUFBNzZELEdBTUF0VSxLQUFBMmlGLGNBQUEzaUYsS0FBQTZpRixpQkFBQXZ1RSxHQThDQXhXLEVBQUFvd0UsV0FwU0EsU0FBQXdULEdBQ0EsV0FBQUQsRUFBQUMsOERDZkEsSUFpQ0FwUCxHQUFBLCtHQUNBamtCLEdBQ0FockMsTUFBQWl2RCxFQUNBNXVELGdCQUFBLE9BQ0F2RCxTQUNBd0IsYUFDQW5XLFdBQ0E2WCxNQXhDQSxRQTBDQTBRLFlBQ0ExUSxNQTNDQSxVQStDQXVnRSxRQUNBL2xFLFdBQ0F3RixNQWpEQSxTQW9EQXhGLFdBQ0F3RixNQXJEQSxRQXVEQSs2QyxPQUNBdmdELFdBQ0F3RixNQXpEQSxTQTREQTY2QyxTQUNBMmxCLFdBQ0FyTyxRQUNBN3hELFlBL0RBLFVBbUVBODZDLFVBQ0E1Z0QsV0FDQXdGLE1BckVBLFNBd0VBNHhELFdBQ0FwM0QsV0FDQXdGLE1BMUVBLFNBNkVBMHBELFVBQ0F2aEUsV0FDQTZYLE1BL0VBLFFBaUZBM1gsV0FDQThwRSxRQUNBbnlELE1BQUFpdkQsRUFBQSxLQUdBbG9FLE9BQ0FvckUsUUFDQTMzRCxXQUNBd0YsTUF6RkEsVUE2RkF5Z0UsY0FDQXRPLFFBQ0FueUQsTUEvRkEsT0FnR0FNLFlBaEdBLFVBb0dBb2dFLFVBaEdBaHFFLFVBQ0F2TyxXQUNBNlgsTUFOQSxTQVNBMmdFLFVBQ0F4NEUsV0FDQTZYLE1BWEEsU0FjQTRnRSxXQUNBcG1FLFdBQ0F3RixNQWhCQSxTQW1CQTZnRSxXQUNBMTRFLFdBQ0F4USxLQUFBLFNBQ0Fxb0IsTUFBQSxTQUdBOGdFLFdBQ0FDLFdBQ0EvZ0UsTUEzQkEsVUFxR0FnaEUsU0FqR0F0cUUsVUFDQXZPLFdBQ0E2WCxNQU5BLFNBU0EyZ0UsVUFDQXg0RSxXQUNBNlgsTUFYQSxTQWNBNGdFLFdBQ0FwbUUsV0FDQXdGLE1BaEJBLFNBbUJBNmdFLFdBQ0ExNEUsV0FDQXhRLEtBQUEsU0FDQXFvQixNQUFBLFNBR0E4Z0UsV0FDQUMsV0FDQS9nRSxNQTNCQSxVQXNHQTYvQyxXQWxHQW5wRCxVQUNBdk8sV0FDQTZYLE1BTkEsU0FTQTJnRSxVQUNBeDRFLFdBQ0E2WCxNQVhBLFNBY0E0Z0UsV0FDQXBtRSxXQUNBd0YsTUFoQkEsU0FtQkE2Z0UsV0FDQTE0RSxXQUNBeFEsS0FBQSxTQUNBcW9CLE1BQUEsU0FHQThnRSxXQUNBQyxXQUNBL2dFLE1BM0JBLFVBdUdBaWhFLGNBbkdBdnFFLFVBQ0F2TyxXQUNBNlgsTUFOQSxTQVNBMmdFLFVBQ0F4NEUsV0FDQTZYLE1BWEEsU0FjQTRnRSxXQUNBcG1FLFdBQ0F3RixNQWhCQSxTQW1CQTZnRSxXQUNBMTRFLFdBQ0F4USxLQUFBLFNBQ0Fxb0IsTUFBQSxTQUdBOGdFLFdBQ0FDLFdBQ0EvZ0UsTUEzQkEsVUF3R0FrSSxNQUNBdlEsT0FBQSxVQUVBOGtELE9BQ0F6OEMsTUFBQWl2RCxHQUVBclMsT0FDQTdCLE9BQ0F2Z0QsV0FDQXdGLE1BakhBLFVBcUhBcThDLGFBQ0FoMEQsV0FDQThwRSxRQUNBbnlELE1BQUEsVUFDQWtoRSxPQUFBLFVBQ0E1Z0UsWUFBQSxVQUNBNmdFLGFBQUEsY0FLQW4yQixFQUFBaTJCLGFBQUFKLFVBQUEvNUUsTUFBQSxFQUNBLElBQUFqSSxFQUFBbXNELEVBQ0FqMEQsRUFBQTBELFFBQUFvRSw2RENsSUEsSUFBQXVpRixHQUFBLG1JQUNBdmlGLEdBQ0FtaEIsTUFBQW9oRSxFQUNBdmQsYUFBQSx5TEFBQXVkLElBRUFycUYsRUFBQTBELFFBQUFvRSw4REN2QkEzTSxFQUFBLHdDQUVBMnJCLFFBRkEsSUFJQTlmLEVBQUE3TCxFQUFBLDJDQW9CQW12RixFQUFBLElBQ0FDLEVBQUEsaUNBTUEsU0FBQTEzQixFQUFBbDBDLEdBQ0EsSUFBQXl2RCxHQUNBdFIsS0FBQSxHQUNBQyxJQUFBLElBU0EsT0FOQXArQyxJQUNBQSxJQUFBMjlDLE1BQUFndUIsR0FDQWxjLEVBQUF0UixLQUFBbitDLEVBQUEsT0FDQXl2RCxFQUFBclIsSUFBQXArQyxFQUFBLFFBR0F5dkQsRUF1Q0EsSUFBQW9jLEVBQUEsRUFzQkEsU0FBQTM3RSxFQUFBa3NDLEVBQUEzWSxHQUNBLElBQUFxb0QsRUFBQXpqRixFQUFBM0csTUFBQWdPLFVBQUEsR0FDQSxPQUFBekksS0FBQWltRSxXQUFBNXhFLFVBQUFtb0MsR0FBQTNrQyxNQUFBczlDLEVBQUEwdkMsR0FHQSxTQUFBcjhFLEVBQUEyc0MsRUFBQTNZLEVBQUFxb0QsR0FDQSxPQUFBN2tGLEtBQUFpbUUsV0FBQTV4RSxVQUFBbW9DLEdBQUEza0MsTUFBQXM5QyxFQUFBMHZDLEdBa0pBL21GLEVBQUFtdkQsaUJBQ0FudkQsRUFBQWtzQixrQkF2TUEsU0FBQTg2RCxFQUFBQyxHQUNBRCxFQUFBemYsYUFBQXlmLEVBRUFBLEVBQUFyK0UsT0FBQSxTQUFBbzhDLEdBQ0EsSUFBQW9qQixFQUFBam1FLEtBRUFnbEYsRUFBQSxXQUNBbmlDLEVBQUF3aUIsYUFHQXhpQixFQUFBd2lCLGFBQUF4dEUsTUFBQW1JLEtBQUF5SSxXQUZBdzlELEVBQUFwdUUsTUFBQW1JLEtBQUF5SSxZQVlBLE9BTkFySCxFQUFBcUYsT0FBQXUrRSxFQUFBM3dGLFVBQUF3dUQsR0FDQW1pQyxFQUFBditFLE9BQUF6RyxLQUFBeUcsT0FDQXUrRSxFQUFBLzdFLFlBQ0ErN0UsRUFBQXg4RSxhQUNBcEgsRUFBQTRRLFNBQUFnekUsRUFBQWhsRixNQUNBZ2xGLEVBQUEvZSxhQUNBK2UsSUFvTEFsbkYsRUFBQXNsRCxpQkF6S0EsU0FBQW0rQixHQUNBLElBQUEwRCxHQUFBLGFBQUFMLElBQUE3M0UsS0FBQWc0QixTQUFBbWdELFFBQUEsSUFBQWpwRixLQUFBLEtBQ0FzbEYsRUFBQWx0RixVQUFBNHdGLElBQUEsRUFFQTFELEVBQUF2OUUsV0FBQSxTQUFBKytDLEdBQ0EsU0FBQUEsTUFBQWtpQyxNQXFLQW5uRixFQUFBb25FLHNCQTNJQSxTQUFBaWdCLEVBQUFsckYsR0FDQUEsUUFVQSxJQUFBbWlDLEtBMkZBLEdBekZBK29ELEVBQUFDLGNBQUEsU0FBQXJqRSxFQUFBaEosR0FhQSxPQVpBQSxJQXBGQSxTQUFBQSxHQUNBM1gsRUFBQTJrRCxPQUFBLHFDQUFBN2tELEtBQUE2WCxHQUFBLGtCQUFBQSxFQUFBLGFBb0ZBc3NFLENBQUF0c0UsSUFDQUEsRUFBQWswQyxFQUFBbDBDLElBRUFvK0MsSUFFT3ArQyxFQUFBbytDLE1BQUF3dEIsS0F1RVAsU0FBQTVyRSxHQUNBLElBQUFrbUIsRUFBQTdDLEVBQUFyakIsRUFBQW0rQyxNQU9BLE9BTEFqNEIsS0FBQTBsRCxNQUNBMWxELEVBQUE3QyxFQUFBcmpCLEVBQUFtK0MsVUFDQXl0QixJQUFBLEdBR0ExbEQsRUE5RUFxbUQsQ0FBQXZzRSxJQUNBQSxFQUFBbytDLEtBQUFwMUMsR0FIQXFhLEVBQUFyakIsRUFBQW0rQyxNQUFBbjFDLEdBT0FBLEdBR0FvakUsRUFBQTEzQyxTQUFBLFNBQUE4M0MsRUFBQXppRixFQUFBMGlGLEdBQ0EsSUFBQXpqRSxFQUFBcWEsRUFBQW1wRCxHQU1BLEdBSkF4akUsS0FBQTRpRSxLQUNBNWlFLEVBQUFqZixFQUFBaWYsRUFBQWpmLEdBQUEsTUFHQTBpRixJQUFBempFLEVBQ0EsVUFBQWpxQixNQUFBZ0wsRUFBQSxhQUFBeWlGLEVBQUEsS0FBQXppRixHQUFBLGtDQUFBeWlGLEVBQUEsOEJBR0EsT0FBQXhqRSxHQUdBb2pFLEVBQUEzZSxxQkFBQSxTQUFBenRELEdBQ0FBLEVBQUFrMEMsRUFBQWwwQyxHQUNBLElBQUFoZixLQUNBZ3BELEVBQUEzbUIsRUFBQXJqQixFQUFBbStDLE1BVUEsT0FSQW5VLEtBQUE0aEMsR0FDQXZqRixFQUFBUSxLQUFBbWhELEVBQUEsU0FBQWhrRCxFQUFBL0QsR0FDQUEsSUFBQTJwRixHQUFBNXFGLEVBQUFqRSxLQUFBaUosS0FHQWhGLEVBQUFqRSxLQUFBaXRELEdBR0FocEQsR0FHQW9yRixFQUFBL2QsU0FBQSxTQUFBcnVELEdBR0EsT0FEQUEsRUFBQWswQyxFQUFBbDBDLEtBQ0FxakIsRUFBQXJqQixFQUFBbStDLE9BT0FpdUIsRUFBQXBkLHFCQUFBLFdBQ0EsSUFBQVEsS0FJQSxPQUhBbm5FLEVBQUFRLEtBQUF3NkIsRUFBQSxTQUFBMm1CLEVBQUEvbkQsR0FDQXV0RSxFQUFBenlFLEtBQUFrRixLQUVBdXRFLEdBU0E0YyxFQUFBTSxZQUFBLFNBQUExc0UsR0FDQUEsRUFBQWswQyxFQUFBbDBDLEdBQ0EsSUFBQWdxQyxFQUFBM21CLEVBQUFyakIsRUFBQW0rQyxNQUNBLE9BQUFuVSxLQUFBNGhDLElBR0FRLEVBQUFsNEIsaUJBYUFoekQsRUFBQW1zRSxtQkFBQSxDQUNBLElBQUFzZixFQUFBUCxFQUFBMStFLE9BRUFpL0UsSUFDQVAsRUFBQTErRSxPQUFBLFNBQUFvOEMsR0FDQSxJQUFBbWlDLEVBQUFVLEVBQUFueEYsS0FBQXlMLEtBQUE2aUQsR0FDQSxPQUFBc2lDLEVBQUFDLGNBQUFKLEVBQUFuaUMsRUFBQTduRCxRQUtBLE9BQUFtcUYsR0EyQkFybkYsRUFBQW10RSxZQXBCQSxTQUFBbG9CLEVBQUF0USxxRUNoUEEsSUFBQXJ4QyxFQUFBN0wsRUFBQSwyQ0FJQTAzRCxFQUZBMTNELEVBQUEsNENBRUEwM0QsZUFvQkEvZixFQUFBLEVBNEtBcHZDLEVBQUF5bkUsT0FyS0EsU0FBQXZxRSxHQUdBLE9BQUFBLEdBQUEsR0FBQWt5QyxJQUFBbmdDLEtBQUFnNEIsU0FBQW1nRCxRQUFBLElBQUFqcEYsS0FBQSxNQW1LQTZCLEVBQUF1b0UsdUJBNUpBLFNBQUE4ZSxHQUNBLElBQUFRLEtBcUJBLE9BbkJBUixFQUFBcnRELHlCQUFBLFNBQUEvZSxFQUFBNnNFLEdBQ0E3c0UsRUFBQWswQyxFQUFBbDBDLEdBQ0E0c0UsRUFBQTVzRSxFQUFBbStDLE1BQUEwdUIsR0FHQVQsRUFBQTdjLGlCQUFBLFNBQUF2dkQsRUFBQXhRLEdBQ0EsSUFBQXZOLEVBQUF1TixFQUFBdk4sS0FFQSxJQUFBQSxFQUFBLENBQ0EsSUFBQTZxRixFQUFBNTRCLEVBQUFsMEMsR0FBQW0rQyxLQUVBaXVCLEVBQUFNLFlBQUExc0UsSUFBQTRzRSxFQUFBRSxLQUNBN3FGLEVBQUEycUYsRUFBQUUsR0FBQXQ5RSxJQUlBLE9BQUF2TixHQUdBbXFGLEdBdUlBcm5GLEVBQUF3b0Usd0JBMUhBLFNBQUE2ZSxFQUFBVyxHQW9HQSxTQUFBQyxFQUFBam1CLEVBQUEzcEUsR0FRQSxPQVBBMnBFLEVBQUEzcEUsS0FDQTJwRSxFQUFBM3BFLElBQ0E2dkYsZUFDQUMsZUFJQW5tQixFQUFBM3BFLEdBbkdBZ3ZGLEVBQUFyZCxrQkFBQSxTQUFBb2UsRUFBQUMsRUFBQWpvRixFQUFBaTNDLEdBQ0EsR0FBQSt3QyxFQUFBM3VGLE9BQUEsQ0FJQSxJQUFBd0MsRUF1REEsU0FBQW9zRixHQUNBLElBQUFybUIsS0FDQXNtQixLQXVCQSxPQXRCQWhsRixFQUFBUSxLQUFBdWtGLEVBQUEsU0FBQWh3RixHQUNBLElBQUE0d0MsRUFBQWcvQyxFQUFBam1CLEVBQUEzcEUsR0FFQWt3RixFQW9DQSxTQUFBQyxFQUFBSCxHQUNBLElBQUFFLEtBSUEsT0FIQWpsRixFQUFBUSxLQUFBMGtGLEVBQUEsU0FBQXJvRixHQUNBbUQsRUFBQXZMLFFBQUFzd0YsRUFBQWxvRixJQUFBLEdBQUFvb0YsRUFBQXZ3RixLQUFBbUksS0FFQW9vRixFQXpDQUUsQ0FEQXgvQyxFQUFBdS9DLGFBQUFSLEVBQUEzdkYsR0FDQWd3RixHQUNBcC9DLEVBQUF5L0MsV0FBQUgsRUFBQTl1RixPQUVBLElBQUF3dkMsRUFBQXkvQyxZQUNBSixFQUFBdHdGLEtBQUFLLEdBR0FpTCxFQUFBUSxLQUFBeWtGLEVBQUEsU0FBQUksR0FDQXJsRixFQUFBdkwsUUFBQWt4QyxFQUFBaS9DLFlBQUFTLEdBQUEsR0FDQTEvQyxFQUFBaS9DLFlBQUFsd0YsS0FBQTJ3RixHQUdBLElBQUFDLEVBQUFYLEVBQUFqbUIsRUFBQTJtQixHQUVBcmxGLEVBQUF2TCxRQUFBNndGLEVBQUFULFVBQUFRLEdBQUEsR0FDQUMsRUFBQVQsVUFBQW53RixLQUFBSyxRQUtBMnBFLFFBQ0FzbUIsZUFsRkFPLENBQUFSLEdBQ0FybUIsRUFBQS9sRSxFQUFBK2xFLE1BQ0FoQixFQUFBL2tFLEVBQUFxc0YsWUFDQVEsS0FLQSxJQUpBeGxGLEVBQUFRLEtBQUFza0YsRUFBQSxTQUFBL3ZGLEdBQ0F5d0YsRUFBQXp3RixJQUFBLElBR0Eyb0UsRUFBQXZuRSxRQUFBLENBQ0EsSUFBQXN2RixFQUFBL25CLEVBQUFqa0UsTUFDQWlzRixFQUFBaG5CLEVBQUErbUIsR0FDQUUsSUFBQUgsRUFBQUMsR0FFQUUsSUFDQTdvRixFQUFBM0osS0FBQTRnRCxFQUFBMHhDLEVBQUFDLEVBQUFSLGFBQUE3ckYsZ0JBQ0Ftc0YsRUFBQUMsSUFHQXpsRixFQUFBUSxLQUFBa2xGLEVBQUFiLFVBQUFjLEVBQUFDLEVBQUFDLEdBR0E3bEYsRUFBQVEsS0FBQWdsRixFQUFBLFdBQ0EsVUFBQTl1RixNQUFBLGtDQUdBLFNBQUFtdkYsRUFBQUMsR0FDQXBuQixFQUFBb25CLEdBQUFWLGFBRUEsSUFBQTFtQixFQUFBb25CLEdBQUFWLFlBQ0ExbkIsRUFBQWhwRSxLQUFBb3hGLEdBVUEsU0FBQUYsRUFBQUUsR0FDQU4sRUFBQU0sSUFBQSxFQUNBRCxFQUFBQyxtRUNuSUEsSUFBQTlsRixFQUFBN0wsRUFBQSwyQ0FFQXllLEVBQUF6ZSxFQUFBLDhDQUVBMnNDLEVBQUEzc0MsRUFBQSw2Q0FxREEsSUFBQXkvQixFQUFBNXpCLEVBQUE0ekIsa0JBQ0FteUQsRUFBQSxhQUNBQyxHQUNBQyxJQUFBLFFBQ0FDLElBQUEsT0FDQUMsSUFBQSxPQUNBQyxJQUFBLFNBQ0FDLElBQUEsU0FHQSxTQUFBL2lELEVBQUE5akMsR0FDQSxhQUFBQSxFQUFBLElBQUFBLEVBQUEsSUFBQU8sUUFBQWdtRixFQUFBLFNBQUFPLEVBQUF6dUYsR0FDQSxPQUFBbXVGLEVBQUFudUYsS0FJQSxJQUFBMHVGLEdBQUEsNkJBRUFDLEVBQUEsU0FBQUMsRUFBQUMsR0FDQSxVQUFXRCxHQUFBLE1BQUFDLEVBQUEsR0FBQUEsR0FBQSxLQStFWCxTQUFBQyxFQUFBTCxFQUFBcCtFLEdBRUEsYUFBQTArRSxPQUFBLEVBQUExK0UsR0FEQW8rRSxHQUFBLElBQ0Fud0YsUUFBQW13RixFQXlDQSxJQUFBOW5FLEVBQUE1TCxFQUFBNEwsYUFDQXl1QixFQUFBcjZCLEVBQUF5QyxnQkFDQTNZLEVBQUFpd0UsVUExS0EsU0FBQXQ5RCxHQUNBLE9BQUE4RyxNQUFBOUcsR0FDQSxLQUdBQSxLQUFBLElBQUFpbUQsTUFBQSxNQUNBLEdBQUF2MUQsUUFBQSxpQ0FBMkMsUUFBQXNQLEVBQUFsWixPQUFBLE1BQUFrWixFQUFBLFFBcUszQzNTLEVBQUFtZ0MsWUE1SkEsU0FBQXlwRCxFQUFBTyxHQVNBLE9BUkFQLE1BQUEsSUFBQXo1QixjQUFBOXNELFFBQUEsaUJBQUE4cUUsRUFBQWljLEdBQ0EsT0FBQUEsRUFBQUMsZ0JBR0FGLEdBQUFQLElBQ0FBLElBQUEzVSxPQUFBLEdBQUFvVixjQUFBVCxFQUFBanRGLE1BQUEsSUFHQWl0RixHQW9KQTVwRixFQUFBazNCLG9CQUNBbDNCLEVBQUE0bUMsYUFDQTVtQyxFQUFBeW5DLFVBckhBLFNBQUErRyxFQUFBODdDLEVBQUE3c0MsR0FDQW42QyxFQUFBNkUsUUFBQW1pRixLQUNBQSxPQUdBLElBQUFDLEVBQUFELEVBQUE3d0YsT0FFQSxJQUFBOHdGLEVBQ0EsU0FLQSxJQUZBLElBQUF4K0UsRUFBQXUrRSxFQUFBLEdBQUF2K0UsVUFFQXZTLEVBQUEsRUFBaUJBLEVBQUF1UyxFQUFBdFMsT0FBa0JELElBQUEsQ0FDbkMsSUFBQWd4RixFQUFBWCxFQUFBcndGLEdBQ0FnMUMsSUFBQW5yQyxRQUFBeW1GLEVBQUFVLEdBQUFWLEVBQUFVLEVBQUEsSUFHQSxRQUFBUixFQUFBLEVBQXlCQSxFQUFBTyxFQUF1QlAsSUFDaEQsUUFBQTUwQyxFQUFBLEVBQW1CQSxFQUFBcnBDLEVBQUF0UyxPQUFrQjI3QyxJQUFBLENBQ3JDLElBQUEvakIsRUFBQWk1RCxFQUFBTixHQUFBaitFLEVBQUFxcEMsSUFDQTVHLElBQUFuckMsUUFBQXltRixFQUFBRCxFQUFBejBDLEdBQUE0MEMsR0FBQXZzQyxFQUFBN1csRUFBQXZWLE1BSUEsT0FBQW1kLEdBNkZBeHVDLEVBQUF5cUYsZ0JBakZBLFNBQUFqOEMsRUFBQXlrQyxFQUFBeDFCLEdBSUEsT0FIQW42QyxFQUFBUSxLQUFBbXZFLEVBQUEsU0FBQXY2RSxFQUFBOEksR0FDQWd0QyxJQUFBbnJDLFFBQUEsSUFBd0I3QixFQUFBLElBQVlpOEMsRUFBQTdXLEVBQUFsdUMsUUFFcEM4MUMsR0E4RUF4dUMsRUFBQWt3RSxpQkFuRUEsU0FBQWpxRSxFQUFBaStCLEdBS0EsSUFBQTNlLEdBSkF0ZixFQUFBM0MsRUFBQXEwQixTQUFBMXhCLElBQ0FzZixNQUFBdGYsRUFDQWkrQixnQkFDR2orQixPQUNIc2YsTUFDQXJvQixFQUFBK0ksRUFBQS9JLEtBR0EsT0FGQWduQyxFQUFBaitCLEVBQUFpK0IsYUFFQTNlLEVBSUEsWUFBQXJvQixFQUFBLG9KQUFvSzBwQyxFQUFBcmhCLEdBQUEsS0FBMkMyZSxHQUFBLGlJQUE0STBDLEVBQUFyaEIsR0FBQSxLQUEyQzJlLEdBQUEsZ0JBSHRZLElBMERBbGtDLEVBQUFnd0UsV0FyQ0EsU0FBQXhoQyxFQUFBOTFDLEVBQUFneUYsR0FDQSxTQUFBbDhDLEdBQUEsVUFBQUEsR0FBQSxZQUFBQSxHQUFBLGNBQUFBLEdBQUEsU0FBQUEsSUFDQUEsRUFBQSxlQUdBLElBQUFzdkMsRUFBQTE1QyxFQUFBK2pCLFVBQUF6dkQsR0FDQWl5RixFQUFBRCxFQUFBLFNBQ0E5M0UsRUFBQWtyRSxFQUFBLE1BQUE2TSxFQUFBLGNBQ0FDLEVBQUE5TSxFQUFBLE1BQUE2TSxFQUFBLGFBQ0E1cEYsRUFBQSs4RSxFQUFBLE1BQUE2TSxFQUFBLFVBQ0F2dkYsRUFBQTBpRixFQUFBLE1BQUE2TSxFQUFBLFdBQ0E3cEYsRUFBQWc5RSxFQUFBLE1BQUE2TSxFQUFBLGFBQ0E5b0YsRUFBQWk4RSxFQUFBLE1BQUE2TSxFQUFBLGFBQ0FFLEVBQUEvTSxFQUFBLE1BQUE2TSxFQUFBLGtCQUVBLE9BREFuOEMsSUFBQW5yQyxRQUFBLEtBQUE0bUYsRUFBQVcsRUFBQSxJQUFBdm5GLFFBQUEsSUFBQXVuRixHQUFBdm5GLFFBQUEsT0FBQXVQLEdBQUF2UCxRQUFBLEtBQUF1UCxFQUFBLEtBQUF2UCxRQUFBLEtBQUE0bUYsRUFBQWxwRixFQUFBLElBQUFzQyxRQUFBLElBQUF0QyxHQUFBc0MsUUFBQSxLQUFBNG1GLEVBQUE3dUYsRUFBQSxJQUFBaUksUUFBQSxJQUFBakksR0FBQWlJLFFBQUEsS0FBQTRtRixFQUFBbnBGLEVBQUEsSUFBQXVDLFFBQUEsSUFBQXZDLEdBQUF1QyxRQUFBLEtBQUE0bUYsRUFBQXBvRixFQUFBLElBQUF3QixRQUFBLElBQUF4QixHQUFBd0IsUUFBQSxNQUFBNG1GLEVBQUFZLEVBQUEsS0F3QkE3cUYsRUFBQThxRixhQWRBLFNBQUFsQixHQUNBLE9BQUFBLElBQUEzVSxPQUFBLEdBQUFvVixjQUFBVCxFQUFBTSxPQUFBLEdBQUFOLEdBY0E1cEYsRUFBQThoQixlQUNBOWhCLEVBQUF1d0MsNEVDbE5BLElBQUFqdEMsRUFBQTdMLEVBQUEsMkNBRUFzekYsRUFBQXR6RixFQUFBLDJDQUVBMjJELEVBQUEzMkQsRUFBQSw0Q0FFQTJrQixFQUFBM2tCLEVBQUEsNkNBRUFxbkUsRUFBQXJuRSxFQUFBLDZDQUVBdXpGLEVBQUF2ekYsRUFBQSw4Q0FFQXd6RixFQUFBeHpGLEVBQUEscURBRUF5ekYsRUFBQXp6RixFQUFBLCtDQUVBdUksRUFBQWsyRCxNQUFBZzFCLEVBRUEsSUFBQXY3RSxFQUFBbFksRUFBQSxpREFFQXVJLEVBQUEyUCxRQUVBLElBQUFPLEVBQUF6WSxFQUFBLDhDQUVBdUksRUFBQWtRLE9BRUEsSUFBQWk3RSxFQUFBMXpGLEVBQUEsc0RBRUF1SSxFQUFBbXJGLFNBRUEsSUFBQXQ3RSxFQUFBcFksRUFBQSxzREFFQXVJLEVBQUE2UCxTQUVBLElBQUF1N0UsRUFBQTN6RixFQUFBLG9EQUVBdUksRUFBQW9yRixPQUVBLElBQUFDLEVBQUE1ekYsRUFBQSx1REFFQXVJLEVBQUFxckYsVUFFQSxJQUFBcjdFLEVBQUF2WSxFQUFBLHdEQUVBdUksRUFBQWdRLFdBRUEsSUFBQW1hLEVBQUExeUIsRUFBQSxvREFFQXVJLEVBQUFtcUIsT0FFQSxJQUFBM04sRUFBQS9rQixFQUFBLG9EQUVBdUksRUFBQXdjLE9BRUEsSUFBQTh1RSxFQUFBN3pGLEVBQUEsMkRBRUF1SSxFQUFBc3JGLGNBRUEsSUFBQXhrQixFQUFBcnZFLEVBQUEsbURBRUF1SSxFQUFBOG1FLE1BRUEsSUFBQXlrQixFQUFBOXpGLEVBQUEsc0RBRUF1SSxFQUFBdXJGLGVBRUEsSUFBQUMsRUFBQS96RixFQUFBLHdEQUVBdUksRUFBQXdyRixpQkFFQSxJQUFBQyxFQUFBaDBGLEVBQUEsd0RBRUF1SSxFQUFBeXJGLGlCQUVBLElBQUFoL0MsRUFBQWgxQyxFQUFBLG1EQUVBdUksRUFBQXlzQyxlQUVBLElBQUFpL0MsRUFBQWowRixFQUFBLGdFQUVBdUksRUFBQTByRix5QkFvQkEsSUFBQTFxRCxFQUFBL3hCLEtBQUEreEIsTUFDQXUwQixFQUFBdG1ELEtBQUFtRyxJQUNBa2dELEVBQUFybUQsS0FBQXNLLElBQ0FveUUsS0F5QkEsU0FBQUMsRUFBQUMsRUFBQXI3QixFQUFBdDlCLEVBQUFya0IsR0FDQSxJQUFBaStELEVBQUFpZSxFQUFBZSxpQkFBQUQsRUFBQXI3QixHQUNBcUYsRUFBQWlYLEVBQUFuMEQsa0JBVUEsT0FSQXVhLElBQ0EsV0FBQXJrQixJQUNBcWtCLEVBQUE2NEQsRUFBQTc0RCxFQUFBMmlDLElBR0FtMkIsRUFBQWxmLEVBQUE1NUMsSUFHQTQ1QyxFQXlDQSxTQUFBaWYsRUFBQTc0RCxFQUFBMmlDLEdBRUEsSUFFQW4vQyxFQUZBNCtCLEVBQUF1Z0IsRUFBQWxvRCxNQUFBa29ELEVBQUFuL0MsT0FDQS9JLEVBQUF1bEIsRUFBQXhjLE9BQUE0K0IsRUFZQSxPQVJBNStCLEVBREEvSSxHQUFBdWxCLEVBQUF2bEIsTUFDQXVsQixFQUFBeGMsUUFFQS9JLEVBQUF1bEIsRUFBQXZsQixPQUNBMm5DLEdBTUEzaUMsRUFIQXVnQixFQUFBdmdCLEVBQUF1Z0IsRUFBQXZsQixNQUFBLEVBR0FBLEVBQUEsRUFDQWlGLEVBSEFzZ0IsRUFBQXRnQixFQUFBc2dCLEVBQUF4YyxPQUFBLEVBR0FBLEVBQUEsRUFDQS9JLFFBQ0ErSSxVQUlBLElBQUF1MUUsRUFBQWxCLEVBQUFrQixVQU9BLFNBQUFELEVBQUFsZixFQUFBNTVDLEdBQ0EsR0FBQTQ1QyxFQUFBaHlELGVBQUEsQ0FJQSxJQUNBaGEsRUFEQWdzRSxFQUFBbjBELGtCQUNBNDhCLG1CQUFBcmlCLEdBQ0E0NUMsRUFBQWh5RCxlQUFBaGEsSUFxRUEsU0FBQW9yRixFQUFBMytFLEVBQUE4cEIsRUFBQTgwRCxHQUdBLElBQUFDLEVBQUFwckQsRUFBQSxFQUFBenpCLEdBQ0EsT0FBQTYrRSxFQUFBcHJELEVBQUEzSixJQUFBLEtBQUErMEQsRUFBQSxHQUFBQSxHQUFBRCxFQUFBLFNBR0EsU0FBQUUsRUFBQUMsR0FDQSxhQUFBQSxHQUFBLFFBQUFBLEVBR0EsU0FBQUMsRUFBQWhuRSxHQUNBLHVCQUFBQSxFQUFBNm9DLEVBQUFvK0IsS0FBQWpuRSxHQUFBLElBQUFBLEVBT0EsU0FBQWtuRSxFQUFBNzlFLEdBQ0EsR0FBQUEsRUFBQTg5RSxnQkFBQSxDQUNBLElBQUExNEUsRUFBQXBGLEVBQUFpRSxNQUFBbUIsT0FDQXBDLEVBQUFoRCxFQUFBaUUsTUFBQWpCLEtBRUFHLEVBQUFuRCxFQUFBKzlFLFdBQ0E1NkUsRUFBQUgsS0FBQUcsRUFBQUgsT0FBQXk2RSxFQUFBejZFLEdBQUEyNkUsRUFBQTM2RSxHQUFBLE1BQ0FHLEVBQUFpQyxPQUFBakMsRUFBQWlDLFNBQUFxNEUsRUFBQXI0RSxHQUFBdTRFLEVBQUF2NEUsR0FBQSxNQUNBLElBQUE0NEUsS0FFQSxRQUFBdjBGLEtBQUEwWixFQUVBLE1BQUFBLEVBQUExWixLQUNBdTBGLEVBQUF2MEYsR0FBQXVXLEVBQUFpRSxNQUFBeGEsSUFJQXVXLEVBQUFpK0UsWUFBQUQsRUFDQWgrRSxFQUFBODlFLGlCQUFBLEdBUUEsU0FBQUksRUFBQWwrRSxHQUNBLElBQUFBLEVBQUFtK0UsVUFBQSxDQU1BLEdBRkFOLEVBQUE3OUUsR0FFQUEsRUFBQTR2QixjQUNBNXZCLEVBQUFvK0UsTUFBQXArRSxFQUFBbytFLEtBQUFDLFNBQUFyK0UsSUFBQSs5RSxnQkFDRyxDQUNILElBQUE5NUUsRUFBQWpFLEVBQUFpRSxNQUNBcTZFLEVBQUFyNkUsRUFBQXE2RSxrQkFJQUEsR0FrZEEsU0FBQXI2RSxHQUNBLElBQUFzNkUsRUFBQXQ2RSxFQUFBczZFLGVBRUFBLElBQ0F0NkUsRUFBQXdOLFNBQUE4c0UsRUFBQTlzRSxTQUNBeE4sRUFBQXU2RSxXQUFBRCxFQUFBQyxXQUNBdjZFLEVBQUF3NkUsZ0JBQUFGLEVBQUFFLGlCQXhkQUMsQ0FBQXo2RSxHQW9CQUEsRUFBQTA2RSxXQUFBMytFLEVBQUErOUUsWUFFQU8sSUFDQU0sRUFBQTM2RSxJQUFBNDZFLDJCQUFBUCxHQUVBLE1BQUFyNkUsRUFBQXdOLFdBQ0F4TixFQUFBd04sU0FBQTZzRSxFQUFBMTVFLFlBSUE1RSxFQUFBdXJELE9BQUEsR0FDQXZyRCxFQUFBa0IsSUFBQSxFQUdBbEIsRUFBQW0rRSxXQUFBLEdBT0EsU0FBQVcsRUFBQTkrRSxHQUNBLEdBQUFBLEVBQUFtK0UsVUFBQSxDQUlBLElBQUFZLEVBQUEvK0UsRUFBQWkrRSxZQUVBaitFLEVBQUE0dkIsY0FDQTV2QixFQUFBbytFLE1BQUFwK0UsRUFBQW8rRSxLQUFBWSxZQUFBaC9FLElBSUErK0UsR0FBQS8rRSxFQUFBbUYsU0FBQTQ1RSxHQUNBLytFLEVBQUFrQixJQUFBLEdBR0FsQixFQUFBbStFLFdBQUEsR0FPQSxTQUFBYyxFQUFBai9FLEdBQ0EsVUFBQUEsRUFBQTFSLEtBQUEwUixFQUFBcVosU0FBQSxTQUFBM29CLEdBQ0EsVUFBQUEsRUFBQXBDLE1BQ0E0dkYsRUFBQXh0RixLQUVHd3RGLEVBQUFsK0UsR0FHSCxTQUFBay9FLEVBQUFsL0UsR0FDQSxVQUFBQSxFQUFBMVIsS0FBQTBSLEVBQUFxWixTQUFBLFNBQUEzb0IsR0FDQSxVQUFBQSxFQUFBcEMsTUFDQXd3RixFQUFBcHVGLEtBRUdvdUYsRUFBQTkrRSxHQU9ILFNBQUFtL0UsRUFBQW4vRSxFQUFBby9FLEdBR0FwL0UsRUFBQSs5RSxXQUFBLzlFLEVBQUFtRCxZQUFBaThFLE1BQ0FwL0UsRUFBQTg5RSxpQkFBQSxFQUVBOTlFLEVBQUFtK0UsV0FDQU4sRUFBQTc5RSxHQVFBLFNBQUFxL0UsRUFBQXIxRixHQUNBc0osS0FBQWdzRixzQkFBQXQxRixFQUFBdTFGLFlBS0Fqc0YsS0FBQWtzRixjQUFBUCxFQUFBM3JGLE1BT0EsU0FBQW1zRixFQUFBejFGLEdBQ0FzSixLQUFBZ3NGLHNCQUFBdDFGLEVBQUF1MUYsWUFLQWpzRixLQUFBa3NGLGNBQUFOLEVBQUE1ckYsTUFPQSxTQUFBb3NGLElBQ0Fwc0YsS0FBQWtzRixjQUFBLEVBQ0FQLEVBQUEzckYsTUFPQSxTQUFBcXNGLElBQ0Fyc0YsS0FBQWtzRixjQUFBLEVBQ0FOLEVBQUE1ckYsTUFzR0EsU0FBQWtlLEVBQUFMLEVBQUFhLEVBQUE0dEUsRUFBQXZvRixFQUFBeXZFLEdBSUEsT0FIQStZLEVBQUExdUUsRUFBQWEsRUFBQTNhLEVBQUF5dkUsR0FDQThZLEdBQUFsckYsRUFBQXFGLE9BQUFvWCxFQUFBeXVFLEdBQ0F6dUUsRUFBQTJ1RSxNQUFBM3VFLEVBQUEydUUsS0FBQXYwQixPQUFBcDZDLEVBQUEydUUsS0FBQXYwQixPQUFBLEdBQ0FwNkMsRUE4Q0EsU0FBQTB1RSxFQUFBMXVFLEVBQUFhLEVBQUEzYSxFQUFBeXZFLEdBSUEsSUFGQXp2RSxLQUFBMGxGLEdBRUFnRCxXQUFBLENBQ0EsSUFBQTF0RSxFQUFBTCxFQUFBMVAsV0FBQSxjQUFBd2tFLEVBQUEsZUFHQSxZQUFBejBELE1BQUEsT0FDQWxCLEVBQUFrQixlQUNBbEIsRUFBQTZ1RSxXQUFBaHVFLEVBQUExUCxXQUFBLFVBQ0EsSUFBQXNILEVBQUFvSSxFQUFBMVAsV0FBQSxVQUNBLE1BQUFzSCxPQUFBdkosS0FBQTRHLEdBQUEsS0FDQWtLLEVBQUF5QyxhQUFBaEssRUFDQXVILEVBQUFpbkQsYUFBQTFqRSxFQUFBdXJGLFVBQUFqdUUsRUFBQTFQLFdBQUEsWUFBQXdrRSxFQUFBLFFBR0EsSUFpQkFvWixFQWpCQW5yRixFQUFBaWQsRUFBQWpkLFFBQ0FvckYsRUFBQXByRixLQUFBOEcsT0FBQXNWLFVBZUFpdkUsRUF3Q0EsU0FBQXB1RSxHQUVBLElBQUFxdUUsRUFFQSxLQUFBcnVFLFNBQUFqZCxTQUFBLENBQ0EsSUFBQXVyRixHQUFBdHVFLEVBQUFuVyxRQUFBa2hGLEdBQUF1RCxLQUVBLEdBQUFBLEVBR0EsUUFBQTcyRixLQUZBNDJGLFFBRUFDLEVBQ0FBLEVBQUExNEYsZUFBQTZCLEtBQ0E0MkYsRUFBQTUyRixHQUFBLEdBS0F1b0IsSUFBQTBaLFlBR0EsT0FBQTIwRCxFQTVEQUUsQ0FBQXZ1RSxHQUdBLEdBQUFvdUUsRUFHQSxRQUFBMzJGLEtBRkF5MkYsS0FFQUUsRUFDQSxHQUFBQSxFQUFBeDRGLGVBQUE2QixHQUFBLENBRUEsSUFBQSsyRixFQUFBeHVFLEVBQUEvTyxVQUFBLE9BQUF4WixJQUVBZzNGLEVBQUFQLEVBQUF6MkYsTUFBK0MrMkYsRUFBQUwsRUFBQTlvRixFQUFBeXZFLEdBWS9DLE9BUEEzMUQsRUFBQW12RSxLQUFBSixFQUNBTyxFQUFBdHZFLEVBQUFhLEVBQUFtdUUsRUFBQTlvRixFQUFBeXZFLEdBQUEsR0FFQXp2RSxFQUFBcXBGLFlBQUFycEYsRUFBQThaLFlBQ0E5WixFQUFBOFosY0FHQUEsRUF3Q0EsU0FBQXN2RSxFQUFBdHZFLEVBQUFhLEVBQUFtdUUsRUFBQTlvRixFQUFBeXZFLEVBQUE2SyxHQU9BLEdBTEF3TyxHQUFBclosR0FBQXFaLEdBQUFwRCxFQUNBNXJFLEVBQUFNLFNBQUFrdkUsRUFBQTN1RSxFQUFBMVAsV0FBQSxTQUFBakwsSUFBQThvRixFQUFBeHBFLE1BQ0F4RixFQUFBcXRFLFdBQUFtQyxFQUFBM3VFLEVBQUExUCxXQUFBLG1CQUFBakwsSUFBQThvRixFQUFBUyxnQkFDQXp2RSxFQUFBc3RFLGdCQUFBL3BGLEVBQUF1ckYsVUFBQWp1RSxFQUFBMVAsV0FBQSxtQkFBQTY5RSxFQUFBVSxrQkFFQS9aLEVBQUEsQ0FDQSxHQUFBNkssRUFBQSxDQUVBLElBQUFtUCxFQUFBM3ZFLEVBQUFrQixhQUNBbEIsRUFBQW90RSxlQUFBSyxFQUFBenRFLEVBQUEydkUsRUFBQXpwRixHQUdBOFosRUFBQTB0RSwyQkFBQWlDLEVBQ0EzdkUsRUFBQW10RSxrQkFBQWpuRixFQUlBLE1BQUE4WixFQUFBTSxXQUNBTixFQUFBTSxTQUFBcGEsRUFBQXVOLFdBT0F1TSxFQUFBNHpELFVBQUEveUQsRUFBQTFQLFdBQUEsY0FBQTY5RSxFQUFBcGIsVUFDQTV6RCxFQUFBcWYsV0FBQXhlLEVBQUExUCxXQUFBLGVBQUE2OUUsRUFBQTN2RCxXQUNBcmYsRUFBQW9mLFNBQUF2ZSxFQUFBMVAsV0FBQSxhQUFBNjlFLEVBQUE1dkQsU0FDQXBmLEVBQUEyekQsV0FBQTl5RCxFQUFBMVAsV0FBQSxlQUFBNjlFLEVBQUFyYixXQUNBM3pELEVBQUFwTSxVQUFBaU4sRUFBQTFQLFdBQUEsU0FDQTZPLEVBQUFuTSxrQkFBQWdOLEVBQUExUCxXQUFBLGtCQUFBMFAsRUFBQTFQLFdBQUEsWUFDQTZPLEVBQUE0dkUsZUFBQS91RSxFQUFBMVAsV0FBQSxjQUNBNk8sRUFBQTZ2RSxVQUFBaHZFLEVBQUExUCxXQUFBLFNBQ0E2TyxFQUFBOHZFLFdBQUFqdkUsRUFBQTFQLFdBQUEsVUFDQTZPLEVBQUErdkUsUUFBQWx2RSxFQUFBMVAsV0FBQSxPQUVBcXZFLEdBQUF0NkUsRUFBQXc1QixhQUNBMWYsRUFBQWd3RSxvQkFBQVIsRUFBQTN1RSxFQUFBMVAsV0FBQSxtQkFBQWpMLEdBQ0E4WixFQUFBaXdFLFlBQUFwdkUsRUFBQTFQLFdBQUEsV0FDQTZPLEVBQUF5dkUsZ0JBQUFELEVBQUEzdUUsRUFBQTFQLFdBQUEsZUFBQWpMLEdBQ0E4WixFQUFBMHZFLGdCQUFBN3VFLEVBQUExUCxXQUFBLGVBQ0E2TyxFQUFBa3dFLGlCQUFBcnZFLEVBQUExUCxXQUFBLGdCQUNBNk8sRUFBQW13RSxtQkFBQXR2RSxFQUFBMVAsV0FBQSxlQUNBNk8sRUFBQW93RSxrQkFBQXZ2RSxFQUFBMVAsV0FBQSxjQUNBNk8sRUFBQXF3RSxxQkFBQXh2RSxFQUFBMVAsV0FBQSxpQkFDQTZPLEVBQUFzd0UscUJBQUF6dkUsRUFBQTFQLFdBQUEsa0JBR0E2TyxFQUFBdXdFLGdCQUFBMXZFLEVBQUExUCxXQUFBLG9CQUFBNjlFLEVBQUF1QixnQkFDQXZ3RSxFQUFBd3dFLGVBQUEzdkUsRUFBQTFQLFdBQUEsbUJBQUE2OUUsRUFBQXdCLGVBQ0F4d0UsRUFBQXl3RSxrQkFBQTV2RSxFQUFBMVAsV0FBQSxzQkFBQTY5RSxFQUFBeUIsa0JBQ0F6d0UsRUFBQTB3RSxrQkFBQTd2RSxFQUFBMVAsV0FBQSxzQkFBQTY5RSxFQUFBMEIsa0JBR0EsU0FBQWxCLEVBQUFocUUsRUFBQXRmLEdBQ0EsZUFBQXNmLElBQUF0ZixLQUFBdU4sVUFBQXZOLEVBQUF1TixVQUFBLEtBR0EsU0FBQWc2RSxFQUFBenRFLEVBQUFrQixFQUFBaGIsR0FDQSxJQUNBa25GLEVBREExNUUsRUFBQXhOLEVBQUF3TixlQWtCQSxPQWZBLE1BQUFzTSxFQUFBTSxXQUFBLElBQUE1TSxLQUFBLElBQUFBLEdBQUF4TixFQUFBMG9GLFlBQUExdEUsR0FDQSxpQkFBQUEsS0FBQWxwQixRQUFBLGdCQUNBbzFGLEdBQ0E5c0UsU0FBQSxLQUNBK3NFLFdBQUFydEUsRUFBQXF0RSxXQUNBQyxnQkFBQXR0RSxFQUFBc3RFLGlCQUVBdHRFLEVBQUFNLFNBQUEsT0FFQSxNQUFBTixFQUFBcXRFLGFBQ0FydEUsRUFBQXF0RSxXQUFBbm5GLEVBQUF1TixVQUNBLE1BQUF1TSxFQUFBc3RFLGtCQUFBdHRFLEVBQUFzdEUsZ0JBQUEsS0FJQUYsRUFvQkEsU0FBQXVELEVBQUFDLEVBQUEvaEYsRUFBQXlZLEVBQUF1cEUsRUFBQXhyRixFQUFBaEosR0FXQSxHQVZBLG1CQUFBZ0osSUFDQWhKLEVBQUFnSixFQUNBQSxFQUFBLE1BTUF3ckYsS0FBQXgrRSxxQkFFQSxDQUNBLElBQUF5K0UsRUFBQUYsRUFBQSxZQUNBbndELEVBQUFvd0QsRUFBQTEvRSxXQUFBLG9CQUFBMi9FLEdBQ0E5aUYsRUFBQTZpRixFQUFBMS9FLFdBQUEsa0JBQUEyL0UsR0FDQUMsRUFBQUYsRUFBQTEvRSxXQUFBLGlCQUFBMi9FLEdBRUEsbUJBQUFDLElBQ0FBLElBQUExckYsRUFBQXdyRixFQUFBRyx3QkFBQUgsRUFBQUcsd0JBQUFuaUYsRUFBQXhKLEdBQUEsT0FHQSxtQkFBQW83QixJQUNBQSxJQUFBcDdCLElBR0FvN0IsRUFBQSxFQUFBNXhCLEVBQUFzRCxVQUFBbVYsRUFBQW1aLEVBQUFzd0QsR0FBQSxFQUFBL2lGLEVBQUEzUixRQUFBd1MsRUFBQXFELGdCQUFBckQsRUFBQWEsS0FBQTRYLEdBQUFqckIsYUFFQXdTLEVBQUFxRCxnQkFDQXJELEVBQUFhLEtBQUE0WCxHQUNBanJCLE9BMkJBLFNBQUFrVixHQUFBMUMsRUFBQXlZLEVBQUF1cEUsRUFBQXhyRixFQUFBaEosR0FDQXMwRixHQUFBLEVBQUE5aEYsRUFBQXlZLEVBQUF1cEUsRUFBQXhyRixFQUFBaEosR0FtREEsU0FBQTBlLEdBQUEyZSxFQUFBN2QsRUFBQW8xRSxHQVNBLE9BUkFwMUUsSUFBQXRZLEVBQUFvNkMsWUFBQTloQyxLQUNBQSxFQUFBcXZFLEVBQUEvbkUsa0JBQUF0SCxJQUdBbzFFLElBQ0FwMUUsRUFBQVEsRUFBQTQwRSxVQUFBcDFFLElBR0FrakQsRUFBQWhrRCxrQkFBQTJlLEVBQUE3ZCxHQXlJQTViLEVBQUFpeEYsWUFoOUJBLFNBQUF6Z0MsR0FDQSxPQUFBdzZCLEVBQUFyaUYsT0FBQTZuRCxJQWc5QkF4d0QsRUFBQWt4RixXQXo4QkEsU0FBQXJGLEVBQUFyN0IsR0FDQSxPQUFBdTZCLEVBQUFvRyxpQkFBQXRGLEVBQUFyN0IsSUF5OEJBeHdELEVBQUE0ckYsV0FDQTVyRixFQUFBb3hGLFVBeDZCQSxTQUFBQyxFQUFBbitELEVBQUFya0IsR0FDQSxJQUFBaStELEVBQUEsSUFBQW9lLEdBQ0FyNEUsT0FDQXNqRCxNQUFBazdCLEVBQ0ExK0UsRUFBQXVnQixFQUFBdmdCLEVBQ0FDLEVBQUFzZ0IsRUFBQXRnQixFQUNBakYsTUFBQXVsQixFQUFBdmxCLE1BQ0ErSSxPQUFBd2MsRUFBQXhjLFFBRUE0NkUsT0FBQSxTQUFBcjdCLEdBQ0EsY0FBQXBuRCxFQUFBLENBQ0EsSUFBQWduRCxHQUNBbG9ELE1BQUFzb0QsRUFBQXRvRCxNQUNBK0ksT0FBQXUvQyxFQUFBdi9DLFFBRUFvMkQsRUFBQS80RCxTQUFBZzRFLEVBQUE3NEQsRUFBQTJpQyxRQUlBLE9BQUFpWCxHQXM1QkE5c0UsRUFBQWlzRixZQUNBanNGLEVBQUFnc0YsYUFDQWhzRixFQUFBeWMscUJBdjFCQSxTQUFBdzJELEdBQ0EsSUFBQTloRSxFQUFBOGhFLEVBQUE5aEUsTUFDQWttQixFQUFBNDdDLEVBQUFwZ0UsTUFBQXdrQixVQVVBLE9BUkEySixFQUFBLEVBQUE3dkIsRUFBQThHLE1BQUErb0IsRUFBQSxFQUFBN3ZCLEVBQUFnSCxNQUNBaEgsRUFBQThHLEdBQUE5RyxFQUFBZ0gsR0FBQSt6RSxFQUFBLzZFLEVBQUE4RyxHQUFBb2YsR0FBQSxJQUdBMkosRUFBQSxFQUFBN3ZCLEVBQUErRyxNQUFBOG9CLEVBQUEsRUFBQTd2QixFQUFBaUgsTUFDQWpILEVBQUErRyxHQUFBL0csRUFBQWlILEdBQUE4ekUsRUFBQS82RSxFQUFBK0csR0FBQW1mLEdBQUEsSUFHQTQ3QyxHQTQwQkFqekUsRUFBQWdnQyxxQkEzekJBLFNBQUFpekMsR0FDQSxJQUFBOWhFLEVBQUE4aEUsRUFBQTloRSxNQUNBa21CLEVBQUE0N0MsRUFBQXBnRSxNQUFBd2tCLFVBQ0FrNkQsRUFBQXBnRixFQUFBd0IsRUFDQTYrRSxFQUFBcmdGLEVBQUF5QixFQUNBNitFLEVBQUF0Z0YsRUFBQXhELE1BQ0ErakYsRUFBQXZnRixFQUFBdUYsT0FLQSxPQUpBdkYsRUFBQXdCLEVBQUF1NUUsRUFBQS82RSxFQUFBd0IsRUFBQTBrQixHQUFBLEdBQ0FsbUIsRUFBQXlCLEVBQUFzNUUsRUFBQS82RSxFQUFBeUIsRUFBQXlrQixHQUFBLEdBQ0FsbUIsRUFBQXhELE1BQUFzQixLQUFBbUcsSUFBQTgyRSxFQUFBcUYsRUFBQUUsRUFBQXA2RCxHQUFBLEdBQUFsbUIsRUFBQXdCLEVBQUEsSUFBQTgrRSxFQUFBLEtBQ0F0Z0YsRUFBQXVGLE9BQUF6SCxLQUFBbUcsSUFBQTgyRSxFQUFBc0YsRUFBQUUsRUFBQXI2RCxHQUFBLEdBQUFsbUIsRUFBQXlCLEVBQUEsSUFBQTgrRSxFQUFBLEtBQ0F6ZSxHQWl6QkFqekUsRUFBQWtzRixtQkFDQWxzRixFQUFBc1MsY0E3a0JBLFNBQUExRCxFQUFBbUQsRUFBQTlMLEdBQ0EySSxFQUFBcy9FLHFCQUFBam9GLEtBQUEwckYsbUJBQ0EsVUFBQS9pRixFQUFBMVIsS0FBQTBSLEVBQUFxWixTQUFBLFNBQUEzb0IsR0FDQSxVQUFBQSxFQUFBcEMsTUFDQTZ3RixFQUFBenVGLEVBQUF5UyxLQUVHZzhFLEVBQUFuL0UsRUFBQW1ELEdBRUhuRCxFQUFBOEIsR0FBQSxZQUFBdTlFLEdBQUF2OUUsR0FBQSxXQUFBMjlFLEdBRUF6L0UsRUFBQThCLEdBQUEsV0FBQTQ5RSxHQUFBNTlFLEdBQUEsU0FBQTY5RSxJQW9rQkF2dUYsRUFBQW9ULGNBaGpCQSxTQUFBdzVFLEVBQUFnRixFQUFBQyxFQUFBQyxFQUFBN3JGLEVBQUE4ckYsRUFBQUMsR0FFQSxJQVVBQyxFQVZBNStFLEdBREFwTixLQUFBMGxGLEdBQ0F0NEUsYUFDQUMsRUFBQXJOLEVBQUFxTixlQUNBNCtFLEVBQUFqc0YsRUFBQWlzRixjQUdBQyxFQUFBTixFQUFBM2dGLFdBQUEsUUFDQWtoRixFQUFBTixFQUFBNWdGLFdBQUEsU0FNQWloRixHQUFBQyxLQUNBLytFLElBQ0E0K0UsRUFBQTUrRSxFQUFBb0Ysa0JBQUFuRixFQUFBLGNBQUE0K0UsSUFHQSxNQUFBRCxJQUNBQSxFQUFBM3VGLEVBQUFzMEIsV0FBQTN4QixFQUFBc04sYUFBQXROLEVBQUFzTixZQUFBRCxFQUFBck4sS0FBQXNOLGNBSUEsSUFBQTgrRSxFQUFBRixFQUFBRixFQUFBLEtBQ0FLLEVBQUFGLEVBQUE5dUYsRUFBQXVyRixVQUFBeDdFLElBQUFvRixrQkFBQW5GLEVBQUEsZ0JBQUE0K0UsR0FBQSxLQUFBRCxHQUFBLEtBRUEsTUFBQUksR0FBQSxNQUFBQyxJQU9BbHlFLEVBQUF3c0UsRUFBQWlGLEVBQUFFLEVBQUE5ckYsR0FDQW1hLEVBQUF3eEUsRUFBQUUsRUFBQUUsRUFBQS9yRixHQUFBLElBR0EybUYsRUFBQTM4RSxLQUFBb2lGLEVBQ0FULEVBQUEzaEYsS0FBQXFpRixHQTBnQkF0eUYsRUFBQW9nQixlQUNBcGdCLEVBQUF1eUYsUUEvZUEsU0FBQXh5RSxFQUFBL00sRUFBQXcvRSxHQUNBLElBR0E5YyxFQUhBenZFLEdBQ0Ewb0YsWUFBQSxJQUlBLElBQUE2RCxFQUNBOWMsR0FBQSxFQUdBenZFLEVBQUF1TixVQUFBZy9FLEVBR0EvRCxFQUFBMXVFLEVBQUEvTSxFQUFBL00sRUFBQXl2RSxHQUNBMzFELEVBQUEydUUsTUFBQTN1RSxFQUFBMnVFLEtBQUF2MEIsT0FBQXA2QyxFQUFBMnVFLEtBQUF2MEIsT0FBQSxJQWtlQW42RCxFQUFBdVksUUFsUkEsU0FBQXRTLEVBQUF0QyxHQUVBLElBQUE4dUYsRUFBQTl1RixLQUFBa08sU0FBQSxhQUNBLE9BQUF2TyxFQUFBb3ZGLE1BQ0F6c0YsRUFBQTB0RSxXQUFBOGUsS0FBQXZoRixXQUFBLGlCQUFBakwsRUFBQW01QixZQUFBcXpELEtBQUF2aEYsV0FBQSxtQkFBQWpMLEVBQUFrNUIsVUFBQXN6RCxLQUFBdmhGLFdBQUEsc0JBQUFqTCxFQUFBeXRFLFlBQUErZSxLQUFBdmhGLFdBQUEsNkJBQUEvUyxLQUFBLE9BK1FBNkIsRUFBQXNSLGVBQ0F0UixFQUFBcVIsVUFsTUEsU0FBQXpDLEVBQUF5WSxFQUFBdXBFLEVBQUF4ckYsRUFBQWhKLEdBQ0FzMEYsR0FBQSxFQUFBOWhGLEVBQUF5WSxFQUFBdXBFLEVBQUF4ckYsRUFBQWhKLElBa01BNEQsRUFBQTJ5RixhQXZMQSxTQUFBbDVELEVBQUFtNUQsR0FHQSxJQUZBLElBQUFDLEVBQUF6MkUsRUFBQTRHLGFBRUF5VyxPQUFBbTVELEdBQ0F4MkUsRUFBQTZHLElBQUE0dkUsRUFBQXA1RCxFQUFBdlcsb0JBQUEydkUsR0FDQXA1RCxJQUFBcDhCLE9BR0EsT0FBQXcxRixHQWdMQTd5RixFQUFBOGEsa0JBQ0E5YSxFQUFBOHlGLG1CQWpKQSxTQUFBcndFLEVBQUE3RyxFQUFBbzFFLEdBRUEsSUFBQStCLEVBQUEsSUFBQW4zRSxFQUFBLFFBQUFBLEVBQUEsUUFBQUEsRUFBQSxLQUFBM00sS0FBQWlJLElBQUEsRUFBQTBFLEVBQUEsR0FBQUEsRUFBQSxJQUNBbzNFLEVBQUEsSUFBQXAzRSxFQUFBLFFBQUFBLEVBQUEsUUFBQUEsRUFBQSxLQUFBM00sS0FBQWlJLElBQUEsRUFBQTBFLEVBQUEsR0FBQUEsRUFBQSxJQUNBcTNFLEdBQUEsU0FBQXh3RSxHQUFBc3dFLEVBQUEsVUFBQXR3RSxFQUFBc3dFLEVBQUEsVUFBQXR3RSxHQUFBdXdFLEVBQUEsV0FBQXZ3RSxFQUFBdXdFLEVBQUEsR0FFQSxPQURBQyxFQUFBbjRFLEdBQUFtNEUsRUFBQXIzRSxFQUFBbzFFLEdBQ0EvaEYsS0FBQWlJLElBQUErN0UsRUFBQSxJQUFBaGtGLEtBQUFpSSxJQUFBKzdFLEVBQUEsSUFBQUEsRUFBQSxvQkFBQUEsRUFBQSxxQkE0SUFqekYsRUFBQWt6RixnQkFwSUEsU0FBQUMsRUFBQUMsRUFBQXhDLEVBQUF4MEYsR0FDQSxHQUFBKzJGLEdBQUFDLEVBQUEsQ0EyQkEsSUFBQUMsRUF2QkEsU0FBQUMsR0FDQSxJQUFBQyxLQU1BLE9BTEFELEVBQUFyckUsU0FBQSxTQUFBclosSUFDQUEsRUFBQTJyRCxTQUFBM3JELEVBQUE4TixPQUNBNjJFLEVBQUEza0YsRUFBQThOLE1BQUE5TixLQUdBMmtGLEVBZ0JBQyxDQUFBTCxHQUNBQyxFQUFBbnJFLFNBQUEsU0FBQXJaLEdBQ0EsSUFBQUEsRUFBQTJyRCxTQUFBM3JELEVBQUE4TixLQUFBLENBQ0EsSUFBQSsyRSxFQUFBSixFQUFBemtGLEVBQUE4TixNQUVBLEdBQUErMkUsRUFBQSxDQUNBLElBQUFDLEVBQUFDLEVBQUEva0YsR0FDQUEsRUFBQWEsS0FBQWtrRixFQUFBRixJQUNBbmlGLEdBQUExQyxFQUFBOGtGLEVBQUE5QyxFQUFBaGlGLEVBQUF4SixlQXJCQSxTQUFBdXVGLEVBQUEva0YsR0FDQSxJQUFBcTJDLEdBQ0ExM0MsU0FBQXV4RCxFQUFBajhDLE1BQUFqVSxFQUFBckIsVUFDQXVGLFNBQUFsRSxFQUFBa0UsVUFPQSxPQUpBbEUsRUFBQXVDLFFBQ0E4ekMsRUFBQTl6QyxNQUFBN04sRUFBQXFGLFVBQWtDaUcsRUFBQXVDLFFBR2xDOHpDLElBNEdBamxELEVBQUE0ekYsaUJBaEZBLFNBQUFuaEYsRUFBQXlnQixHQUNBLE9BQUE1dkIsRUFBQTFHLElBQUE2VixFQUFBLFNBQUFzRCxHQUNBLElBQUFwRCxFQUFBb0QsRUFBQSxHQUNBcEQsRUFBQTRpRCxFQUFBNWlELEVBQUF1Z0IsRUFBQXZnQixHQUNBQSxFQUFBMmlELEVBQUEzaUQsRUFBQXVnQixFQUFBdmdCLEVBQUF1Z0IsRUFBQXZsQixPQUNBLElBQUFpRixFQUFBbUQsRUFBQSxHQUdBLE9BRkFuRCxFQUFBMmlELEVBQUEzaUQsRUFBQXNnQixFQUFBdGdCLElBRUFELEVBREFDLEVBQUEwaUQsRUFBQTFpRCxFQUFBc2dCLEVBQUF0Z0IsRUFBQXNnQixFQUFBeGMsWUEwRUExVyxFQUFBNnpGLGVBL0RBLFNBQUFDLEVBQUE1Z0UsR0FDQSxJQUFBdmdCLEVBQUE0aUQsRUFBQXUrQixFQUFBbmhGLEVBQUF1Z0IsRUFBQXZnQixHQUNBd0YsRUFBQW05QyxFQUFBdytCLEVBQUFuaEYsRUFBQW1oRixFQUFBbm1GLE1BQUF1bEIsRUFBQXZnQixFQUFBdWdCLEVBQUF2bEIsT0FDQWlGLEVBQUEyaUQsRUFBQXUrQixFQUFBbGhGLEVBQUFzZ0IsRUFBQXRnQixHQUNBd0YsRUFBQWs5QyxFQUFBdytCLEVBQUFsaEYsRUFBQWtoRixFQUFBcDlFLE9BQUF3YyxFQUFBdGdCLEVBQUFzZ0IsRUFBQXhjLFFBRUEsR0FBQXlCLEdBQUF4RixHQUFBeUYsR0FBQXhGLEVBQ0EsT0FDQUQsSUFDQUMsSUFDQWpGLE1BQUF3SyxFQUFBeEYsRUFDQStELE9BQUEwQixFQUFBeEYsSUFxREE1UyxFQUFBd3FCLFdBekNBLFNBQUF1cEUsRUFBQTl0RixFQUFBaXRCLEdBSUEsSUFBQXJnQixHQUhBNU0sRUFBQTNDLEVBQUFxRixRQUNBcXJGLFdBQUEsR0FDRy90RixJQUNINE0sT0FDQW9oRixlQUFBLEdBU0EsR0FQQS9nRSxNQUNBdmdCLEdBQUEsRUFDQUMsR0FBQSxFQUNBakYsTUFBQSxFQUNBK0ksT0FBQSxHQUdBcTlFLEVBQ0EsV0FBQUEsRUFBQWg4RixRQUFBLGFBQUE4YSxFQUFBc2pELE1BQUE0OUIsRUFBQXAzRixNQUFBLEdBQUEyRyxFQUFBb08sU0FBQW1CLEVBQUFxZ0IsR0FBQSxJQUFBZzRELEVBQUFqbEYsSUFBQTJsRixFQUFBbUksRUFBQTF3RixRQUFBLGNBQUE0QyxFQUFBaXRCLEVBQUEsd0VDeGpDQSxJQUFBNXZCLEVBQUE3TCxFQUFBLDJDQUVBZzFDLEVBQUFoMUMsRUFBQSxtREFJQXdoQixFQUZBeGhCLEVBQUEsNkNBRUF3aEIsYUFFQXNCLEVBQUE5aUIsRUFBQSw2Q0FxQkFxTSxFQUFBUixFQUFBUSxLQUtBb3dGLEdBQUEsZ0RBS0FDLElBQUEsbURBRUEsU0FBQUMsRUFBQTk0RCxFQUFBOW1CLEVBQUFxTSxFQUFBYyxFQUFBMHlFLEdBQ0EsSUFBQTFoRixFQUFBLEVBQ0FDLEVBQUEsRUFFQSxNQUFBK08sSUFDQUEsRUFBQW9zQixLQUdBLE1BQUFzbUQsSUFDQUEsRUFBQXRtRCxLQUdBLElBQUF1bUQsRUFBQSxFQUNBOS9FLEVBQUFNLFVBQUEsU0FBQXhWLEVBQUFaLEdBQ0EsSUFJQTYxRixFQUNBQyxFQUxBam5GLEVBQUFqTyxFQUFBaU8sU0FDQTJsQixFQUFBNXpCLEVBQUFxWixrQkFDQTg3RSxFQUFBamdGLEVBQUEzRCxRQUFBblMsRUFBQSxHQUNBZzJGLEVBQUFELEtBQUE5N0Usa0JBSUEsa0JBQUEyaUIsRUFBQSxDQUNBLElBQUFxNUQsRUFBQXpoRSxFQUFBdmxCLE9BQUErbUYsS0FBQS9oRixFQUFBdWdCLEVBQUF2Z0IsRUFBQSxJQUNBNGhGLEVBQUE1aEYsRUFBQWdpRixHQUdBaHpFLEdBQUFyaUIsRUFBQW8rQixTQUNBL3FCLEVBQUEsRUFDQTRoRixFQUFBSSxFQUNBL2hGLEdBQUEwaEYsRUFBQXp6RSxFQUNBeXpFLEVBQUFwaEUsRUFBQXhjLFFBR0E0OUUsRUFBQXJsRixLQUFBbUcsSUFBQWsvRSxFQUFBcGhFLEVBQUF4YyxZQUVLLENBQ0wsSUFBQWsrRSxFQUFBMWhFLEVBQUF4YyxRQUFBZytFLEtBQUE5aEYsRUFBQXNnQixFQUFBdGdCLEVBQUEsSUFDQTRoRixFQUFBNWhGLEVBQUFnaUYsR0FFQVAsR0FBQS8wRixFQUFBbytCLFNBQ0EvcUIsR0FBQTJoRixFQUFBenpFLEVBQ0FqTyxFQUFBLEVBQ0E0aEYsRUFBQUksRUFDQU4sRUFBQXBoRSxFQUFBdmxCLE9BRUEybUYsRUFBQXJsRixLQUFBbUcsSUFBQWsvRSxFQUFBcGhFLEVBQUF2bEIsT0FJQXJPLEVBQUFvK0IsVUFJQW53QixFQUFBLEdBQUFvRixFQUNBcEYsRUFBQSxHQUFBcUYsRUFDQSxlQUFBMG9CLEVBQUEzb0IsRUFBQTRoRixFQUFBMXpFLEVBQUFqTyxFQUFBNGhGLEVBQUEzekUsS0FhQSxJQUFBaVksRUFBQXM3RCxFQVNBUyxFQUFBdnhGLEVBQUF5RyxNQUFBcXFGLEVBQUEsWUFTQVUsRUFBQXh4RixFQUFBeUcsTUFBQXFxRixFQUFBLGNBb0RBLFNBQUF4N0QsRUFBQTJELEVBQUF3NEQsRUFBQXJ2RSxHQUNBQSxFQUFBbkwsRUFBQTJjLGtCQUFBeFIsR0FBQSxHQUNBLElBQUFzdkUsRUFBQUQsRUFBQXBuRixNQUNBc25GLEVBQUFGLEVBQUFyK0UsT0FDQTZrQixFQUFBdGlCLEVBQUFzakIsRUFBQWhCLEtBQUF5NUQsR0FDQXg1RCxFQUFBdmlCLEVBQUFzakIsRUFBQWYsSUFBQXk1RCxHQUNBbGhELEVBQUE5NkIsRUFBQXNqQixFQUFBd1gsTUFBQWloRCxHQUNBaGhELEVBQUEvNkIsRUFBQXNqQixFQUFBeVgsT0FBQWloRCxHQUNBdG5GLEVBQUFzTCxFQUFBc2pCLEVBQUE1dUIsTUFBQXFuRixHQUNBdCtFLEVBQUF1QyxFQUFBc2pCLEVBQUE3bEIsT0FBQXUrRSxHQUNBQyxFQUFBeHZFLEVBQUEsR0FBQUEsRUFBQSxHQUNBeXZFLEVBQUF6dkUsRUFBQSxHQUFBQSxFQUFBLEdBQ0E0dkIsRUFBQS9ZLEVBQUErWSxPQThDQSxPQTVDQTc3QixNQUFBOUwsS0FDQUEsRUFBQXFuRixFQUFBamhELEVBQUFvaEQsRUFBQTU1RCxHQUdBOWhCLE1BQUEvQyxLQUNBQSxFQUFBdStFLEVBQUFqaEQsRUFBQWtoRCxFQUFBMTVELEdBR0EsTUFBQThaLElBUUE3N0IsTUFBQTlMLElBQUE4TCxNQUFBL0MsS0FDQTQrQixFQUFBMC9DLEVBQUFDLEVBQ0F0bkYsRUFBQSxHQUFBcW5GLEVBRUF0K0UsRUFBQSxHQUFBdStFLEdBS0F4N0UsTUFBQTlMLEtBQ0FBLEVBQUEybkMsRUFBQTUrQixHQUdBK0MsTUFBQS9DLEtBQ0FBLEVBQUEvSSxFQUFBMm5DLElBS0E3N0IsTUFBQThoQixLQUNBQSxFQUFBeTVELEVBQUFqaEQsRUFBQXBtQyxFQUFBd25GLEdBR0ExN0UsTUFBQStoQixLQUNBQSxFQUFBeTVELEVBQUFqaEQsRUFBQXQ5QixFQUFBdytFLEdBSUEzNEQsRUFBQWhCLE1BQUFnQixFQUFBd1gsT0FDQSxhQUNBeFksRUFBQXk1RCxFQUFBLEVBQUFybkYsRUFBQSxFQUFBK1gsRUFBQSxHQUNBLE1BRUEsWUFDQTZWLEVBQUF5NUQsRUFBQXJuRixFQUFBd25GLEVBSUEsT0FBQTU0RCxFQUFBZixLQUFBZSxFQUFBeVgsUUFDQSxhQUNBLGFBQ0F4WSxFQUFBeTVELEVBQUEsRUFBQXYrRSxFQUFBLEVBQUFnUCxFQUFBLEdBQ0EsTUFFQSxhQUNBOFYsRUFBQXk1RCxFQUFBditFLEVBQUF3K0UsRUFLQTM1RCxLQUFBLEVBQ0FDLEtBQUEsRUFFQS9oQixNQUFBOUwsS0FFQUEsRUFBQXFuRixFQUFBRyxFQUFBNTVELEdBQUF3WSxHQUFBLElBR0F0NkIsTUFBQS9DLEtBRUFBLEVBQUF1K0UsRUFBQUMsRUFBQTE1RCxHQUFBd1ksR0FBQSxJQUdBLElBQUE5Z0IsRUFBQSxJQUFBdVosRUFBQWxSLEVBQUE3VixFQUFBLEdBQUE4VixFQUFBOVYsRUFBQSxHQUFBL1gsRUFBQStJLEdBRUEsT0FEQXdjLEVBQUF4TixTQUNBd04sRUFrTkEsU0FBQWtpRSxFQUFBMzdELEVBQUEzMkIsR0FJQSxPQUhBQSxHQUFBMjJCLEdBQUEzMUIsRUFBQW93RixFQUFBLFNBQUE3N0YsR0FDQXlLLEVBQUF0TSxlQUFBNkIsS0FBQW9oQyxFQUFBcGhDLEdBQUF5SyxFQUFBekssTUFFQW9oQyxFQUdBejVCLEVBQUFrMEYsa0JBQ0FsMEYsRUFBQW0wRixXQUNBbjBGLEVBQUE4NEIsTUFDQTk0QixFQUFBNjBGLE9BQ0E3MEYsRUFBQTgwRixPQUNBOTBGLEVBQUFxMUYsaUJBaFdBLFNBQUE5NEQsRUFBQXc0RCxFQUFBcnZFLEdBQ0EsSUFBQXN2RSxFQUFBRCxFQUFBcG5GLE1BQ0FzbkYsRUFBQUYsRUFBQXIrRSxPQUNBL0QsRUFBQXNHLEVBQUFzakIsRUFBQTVwQixFQUFBcWlGLEdBQ0FwaUYsRUFBQXFHLEVBQUFzakIsRUFBQTNwQixFQUFBcWlGLEdBQ0E5OEUsRUFBQWMsRUFBQXNqQixFQUFBcGtCLEdBQUE2OEUsR0FDQTU4RSxFQUFBYSxFQUFBc2pCLEVBQUFua0IsR0FBQTY4RSxHQU1BLE9BTEF4N0UsTUFBQTlHLElBQUE4RyxNQUFBMmhFLFdBQUE3K0MsRUFBQTVwQixTQUFBLElBQ0E4RyxNQUFBdEIsSUFBQXNCLE1BQUEyaEUsV0FBQTcrQyxFQUFBcGtCLFVBQUE2OEUsSUFDQXY3RSxNQUFBN0csSUFBQTZHLE1BQUEyaEUsV0FBQTcrQyxFQUFBM3BCLFNBQUEsSUFDQTZHLE1BQUFyQixJQUFBcUIsTUFBQTJoRSxXQUFBNytDLEVBQUFua0IsVUFBQTY4RSxHQUNBdnZFLEVBQUFuTCxFQUFBMmMsa0JBQUF4UixHQUFBLElBRUEvWCxNQUFBc0IsS0FBQW1HLElBQUErQyxFQUFBeEYsRUFBQStTLEVBQUEsR0FBQUEsRUFBQSxNQUNBaFAsT0FBQXpILEtBQUFtRyxJQUFBZ0QsRUFBQXhGLEVBQUE4UyxFQUFBLEdBQUFBLEVBQUEsUUFtVkExbEIsRUFBQTQ0QixnQkFDQTU0QixFQUFBKzRCLGdCQXRMQSxTQUFBbnFCLEVBQUEydEIsRUFBQXc0RCxFQUFBcnZFLEVBQUF6ZixHQUNBLElBQUE3SyxHQUFBNkssTUFBQXF2RixJQUFBcnZGLEVBQUFxdkYsR0FBQSxHQUNBNXBDLEdBQUF6bEQsTUFBQXF2RixJQUFBcnZGLEVBQUFxdkYsR0FBQSxHQUNBQyxFQUFBdHZGLEtBQUFzdkYsY0FBQSxNQUVBLEdBQUFuNkYsR0FBQXN3RCxFQUFBLENBSUEsSUFBQXg0QixFQUVBLFdBQUFxaUUsRUFDQXJpRSxFQUFBLFVBQUF0a0IsRUFBQTFSLEtBQUEsSUFBQXV2QyxFQUFBLEtBQUFsUSxFQUFBNXVCLE9BQUEsR0FBQTR1QixFQUFBN2xCLFFBQUEsR0FBQTlILEVBQUErSix1QkFJQSxHQUZBdWEsRUFBQXRrQixFQUFBK0osa0JBRUEvSixFQUFBNG1GLHFCQUFBLENBQ0EsSUFBQTU1RSxFQUFBaE4sRUFBQXNVLHFCQUdBZ1EsSUFBQXJRLFNBQ0EvSCxlQUFBYyxHQUtBMmdCLEVBQUEzRCxFQUFBdDFCLEVBQUFvTyxVQUNBL0QsTUFBQXVsQixFQUFBdmxCLE1BQ0ErSSxPQUFBd2MsRUFBQXhjLFFBQ0c2bEIsR0FBQXc0RCxFQUFBcnZFLEdBSUgsSUFBQSt2RSxFQUFBN21GLEVBQUFyQixTQUNBeUIsRUFBQTVULEVBQUFtaEMsRUFBQTVwQixFQUFBdWdCLEVBQUF2Z0IsRUFBQSxFQUNBeEQsRUFBQXU4QyxFQUFBbnZCLEVBQUEzcEIsRUFBQXNnQixFQUFBdGdCLEVBQUEsRUFDQWhFLEVBQUFhLEtBQUEsbUJBQUE4bEYsR0FBQXZtRixFQUFBRyxJQUFBc21GLEVBQUEsR0FBQXptRixFQUFBeW1GLEVBQUEsR0FBQXRtRixNQW1KQW5QLEVBQUEwMUYsZUEzSUEsU0FBQWpyRixFQUFBa3JGLEdBQ0EsYUFBQWxyRixFQUFBMHBGLEVBQUF3QixHQUFBLFdBQUFsckYsRUFBQTBwRixFQUFBd0IsR0FBQSxXQUFBbHJGLEVBQUEwcEYsRUFBQXdCLEdBQUEsS0EySUEzMUYsRUFBQStuRSxpQkE5R0EsU0FBQTZ0QixFQUFBMXFGLEVBQUFqRixJQUNBM0MsRUFBQW1rQixTQUFBeGhCLFdBQ0EsSUFBQW8wQixFQUFBcDBCLEVBQUFvMEIsWUFDQS8yQixFQUFBNkUsUUFBQWt5QixjQUNBLElBQUF3N0QsRUFBQXR5QyxFQUFBNHdDLEVBQUEsTUFDQTJCLEVBQUF2eUMsRUFBQTR3QyxFQUFBLE1BSUEsU0FBQTV3QyxFQUFBdm9CLEVBQUEyNkQsR0FDQSxJQUFBSSxLQUNBQyxFQUFBLEVBQ0FDLEtBQ0FDLEVBQUEsRUFhQSxHQVhBcHlGLEVBQUFrM0IsRUFBQSxTQUFBM2lDLEdBQ0E0OUYsRUFBQTU5RixHQUFBdTlGLEVBQUF2OUYsS0FFQXlMLEVBQUFrM0IsRUFBQSxTQUFBM2lDLEdBR0E4OUYsRUFBQWpyRixFQUFBN1MsS0FBQTA5RixFQUFBMTlGLEdBQUE0OUYsRUFBQTU5RixHQUFBNlMsRUFBQTdTLElBQ0EybkQsRUFBQSsxQyxFQUFBMTlGLElBQUEyOUYsSUFDQWgyQyxFQUFBaTJDLEVBQUE1OUYsSUFBQTY5RixNQUdBNzdELEVBQUFzN0QsR0FRQSxPQU5BMzFDLEVBQUE5MEMsRUFBQTh2QixFQUFBLElBQ0FpN0QsRUFBQWo3RCxFQUFBLFNBQ09nbEIsRUFBQTkwQyxFQUFBOHZCLEVBQUEsTUFDUGk3RCxFQUFBajdELEVBQUEsVUFHQWk3RCxFQU9BLEdBM0JBLElBMkJBQyxHQUFBRixFQUtBLElBQUFBLEdBaENBLEVBaUNBLE9BQUFELEVBR0EsUUFBQXY4RixFQUFBLEVBQXVCQSxFQUFBd2hDLEVBQUF2aEMsT0FBa0JELElBQUEsQ0FDekMsSUFBQW5CLEVBQUEyaUMsRUFBQXhoQyxHQUVBLElBQUEyOEYsRUFBQUosRUFBQTE5RixJQUFBODlGLEVBQUFQLEVBQUF2OUYsR0FBQSxDQUNBMDlGLEVBQUExOUYsR0FBQXU5RixFQUFBdjlGLEdBQ0EsT0FJQSxPQUFBMDlGLEVBakJBLE9BQUFFLEVBcUJBLFNBQUFFLEVBQUFseEMsRUFBQTVzRCxHQUNBLE9BQUE0c0QsRUFBQXp1RCxlQUFBNkIsR0FHQSxTQUFBMm5ELEVBQUFpRixFQUFBNXNELEdBQ0EsYUFBQTRzRCxFQUFBNXNELElBQUEsU0FBQTRzRCxFQUFBNXNELEdBR0EsU0FBQW05QyxFQUFBeGEsRUFBQXZCLEVBQUEzMkIsR0FDQWdCLEVBQUFrM0IsRUFBQSxTQUFBM2lDLEdBQ0FvaEMsRUFBQXBoQyxHQUFBeUssRUFBQXpLLEtBbkVBbTlDLEVBQUEyK0MsRUFBQSxHQUFBeUIsRUFBQUMsR0FDQXJnRCxFQUFBMitDLEVBQUEsR0FBQXlCLEVBQUFFLElBd0dBOTFGLEVBQUEybkUsZ0JBM0JBLFNBQUE3a0UsR0FDQSxPQUFBc3lGLEtBQTRCdHlGLElBMkI1QjlDLEVBQUFvMUYsK0VDdGZBLElBQUE5eEYsRUFBQTdMLEVBQUEsMkNBb0JBcU0sRUFBQVIsRUFBQVEsS0FDQTJqQixFQUFBbmtCLEVBQUFta0IsU0FDQXRmLEVBQUE3RSxFQUFBNkUsUUFPQWl1RixFQUFBLFdBT0EsU0FBQXB3QyxFQUFBdHRELEdBQ0EsT0FBQUEsYUFBQXFnRCxNQUFBcmdELEVBQUEsTUFBQUEsU0EwT0EsU0FBQW95RSxFQUFBdXJCLEdBQ0EsT0FBQTV1RSxFQUFBNHVFLE1BQUF4OEYsSUFBQSxLQUFBdzhGLEVBQUF4OEYsR0FBQSxJQUFBOUIsUUFBQSxZQTRHQSxJQUFBdStGLEVBQUEsRUFrRkEsU0FBQUMsRUFBQXR4QyxFQUFBclQsR0FDQSxPQUFBcVQsS0FBQXp1RCxlQUFBbzdDLEdBV0E1eEMsRUFBQWdtRCxtQkFDQWhtRCxFQUFBZ00sZ0JBbmFBLFNBQUEvRixFQUFBekUsRUFBQWcxRixHQUVBLEdBQUF2d0YsRUFBQSxDQUNBQSxFQUFBekUsR0FBQXlFLEVBQUF6RSxPQUNBeUUsRUFBQW1HLFNBQUFuRyxFQUFBbUcsYUFDQW5HLEVBQUFtRyxTQUFBNUssR0FBQXlFLEVBQUFtRyxTQUFBNUssT0FFQSxRQUFBaEksRUFBQSxFQUFBZ1MsRUFBQWdyRixFQUFBLzhGLE9BQXlDRCxFQUFBZ1MsRUFBU2hTLElBQUEsQ0FDbEQsSUFBQWk5RixFQUFBRCxFQUFBaDlGLElBRUF5TSxFQUFBbUcsU0FBQTVLLEdBQUFoTCxlQUFBaWdHLElBQUF4d0YsRUFBQXpFLEdBQUFoTCxlQUFBaWdHLEtBQ0F4d0YsRUFBQW1HLFNBQUE1SyxHQUFBaTFGLEdBQUF4d0YsRUFBQXpFLEdBQUFpMUYsT0F5WkF6MkYsRUFBQW80RSxvQkFuWkEseVhBb1pBcDRFLEVBQUE0RixpQkFyWUEsU0FBQXkxQixHQUNBLE9BQUE1VCxFQUFBNFQsSUFBQWx6QixFQUFBa3pCLGlCQUFBazRCLEtBQUFsNEIsSUFBQTNpQyxPQXFZQXNILEVBQUFrb0QsaUJBNVhBLFNBQUE3c0IsR0FDQSxPQUFBNVQsRUFBQTRULG1CQUFBMGQsUUE0WEEvNEMsRUFBQW9xRSxnQkE5V0EsU0FBQXNzQixFQUFBQyxHQU9BQSxVQUFBaDZGLFFBQ0EsSUFBQVYsRUFBQXFILEVBQUExRyxJQUFBODVGLE1BQUEsU0FBQXp4QyxFQUFBaG9DLEdBQ0EsT0FDQWt2QyxNQUFBbEgsS0ErREEsT0EzREFuaEQsRUFBQTZ5RixFQUFBLFNBQUFOLEVBQUFwNUUsR0FDQSxHQUFBd0ssRUFBQTR1RSxHQUFBLENBS0EsUUFBQTc4RixFQUFBLEVBQW1CQSxFQUFBeUMsRUFBQXhDLE9BQW1CRCxJQUN0QyxJQUFBeUMsRUFBQXpDLEdBQUFpUixRQUNBLE1BQUE0ckYsRUFBQXg4RixJQUFBb0MsRUFBQXpDLEdBQUEyeUQsTUFBQXR5RCxLQUFBdzhGLEVBQUF4OEYsR0FBQSxHQUdBLE9BRkFvQyxFQUFBekMsR0FBQWlSLE9BQUE0ckYsT0FDQU0sRUFBQTE1RSxHQUFBLE1BS0EsSUFBQXpqQixFQUFBLEVBQW1CQSxFQUFBeUMsRUFBQXhDLE9BQW1CRCxJQUFBLENBQ3RDLElBQUEyeUQsRUFBQWx3RCxFQUFBekMsR0FBQTJ5RCxNQUVBLEtBQUFsd0QsRUFBQXpDLEdBQUFpUixRQUVBLE1BQUEwaEQsRUFBQXR5RCxJQUFBLE1BQUF3OEYsRUFBQXg4RixJQUFBLE1BQUF3OEYsRUFBQWgrRixNQUFBeXlFLEVBQUF1ckIsSUFBQXZyQixFQUFBM2UsTUFBQTl6RCxPQUFBZytGLEVBQUFoK0YsS0FBQSxJQUdBLE9BRkE0RCxFQUFBekMsR0FBQWlSLE9BQUE0ckYsT0FDQU0sRUFBQTE1RSxHQUFBLFVBTUFuWixFQUFBNnlGLEVBQUEsU0FBQU4sRUFBQXA1RSxHQUNBLEdBQUF3SyxFQUFBNHVFLEdBQUEsQ0FNQSxJQUZBLElBQUE3OEYsRUFBQSxFQUVVQSxFQUFBeUMsRUFBQXhDLE9BQW1CRCxJQUFBLENBQzdCLElBQUEyeUQsRUFBQWx3RCxFQUFBekMsR0FBQTJ5RCxNQUVBLElBQUFsd0QsRUFBQXpDLEdBQUFpUixTQUlBcWdFLEVBQUEzZSxJQUtBLE1BQUFrcUMsRUFBQXg4RixHQUFBLENBQ0FvQyxFQUFBekMsR0FBQWlSLE9BQUE0ckYsRUFDQSxPQUlBNzhGLEdBQUF5QyxFQUFBeEMsUUFDQXdDLEVBQUFqRSxNQUNBeVMsT0FBQTRyRixPQUlBcDZGLEdBc1NBK0QsRUFBQXFxRSxjQXpSQSxTQUFBRixHQVVBLElBQUF5c0IsRUFBQXR6RixFQUFBbzJCLGdCQUNBNTFCLEVBQUFxbUUsRUFBQSxTQUFBdnNFLEVBQUFxZixHQUNBLElBQUE0NUUsRUFBQWo1RixFQUFBdXVELE1BQ0EwcUMsR0FBQUQsRUFBQW4rRixJQUFBbytGLEVBQUFoOUYsR0FBQStELEtBRUFrRyxFQUFBcW1FLEVBQUEsU0FBQXZzRSxFQUFBcWYsR0FDQSxJQUFBaFgsRUFBQXJJLEVBQUE2TSxPQUNBbkgsRUFBQTJrRCxRQUFBaGlELEdBQUEsTUFBQUEsRUFBQXBNLEtBQUErOEYsRUFBQXArRixJQUFBeU4sRUFBQXBNLEtBQUErOEYsRUFBQXArRixJQUFBeU4sRUFBQXBNLE1BQUErRCxFQUFBLG1CQUFBcUksS0FBQXBNLEtBQ0FvTSxHQUFBLE1BQUFBLEVBQUFwTSxJQUFBKzhGLEVBQUFuK0YsSUFBQXdOLEVBQUFwTSxHQUFBK0QsSUFDQUEsRUFBQTBzRSxVQUFBMXNFLEVBQUEwc0UsY0FHQXhtRSxFQUFBcW1FLEVBQUEsU0FBQXZzRSxFQUFBcWYsR0FDQSxJQUFBNDVFLEVBQUFqNUYsRUFBQXV1RCxNQUNBbG1ELEVBQUFySSxFQUFBNk0sT0FDQTYvRCxFQUFBMXNFLEVBQUEwc0UsUUFFQSxHQUFBN2lELEVBQUF4aEIsR0FBQSxDQVlBLEdBSkFxa0UsRUFBQWp5RSxLQUFBLE1BQUE0TixFQUFBNU4sS0FBQTROLEVBQUE1TixLQUFBLEdBQUF3K0YsSUFBQXgrRixLQUVBKzlGLEVBQUFuNUUsRUFFQTQ1RSxFQUNBdnNCLEVBQUF6d0UsR0FBQWc5RixFQUFBaDlGLFFBQ0ssU0FBQW9NLEVBQUFwTSxHQUNMeXdFLEVBQUF6d0UsR0FBQW9NLEVBQUFwTSxHQUFBLE9BQ0ssQ0FNTCxJQUFBaTlGLEVBQUEsRUFFQSxHQUNBeHNCLEVBQUF6d0UsR0FBQSxLQUFBeXdFLEVBQUFqeUUsS0FBQSxLQUFBeStGLFVBQ09GLEVBQUFwK0YsSUFBQTh4RSxFQUFBendFLEtBR1ArOEYsRUFBQW4rRixJQUFBNnhFLEVBQUF6d0UsR0FBQStELE9Ba09Bb0MsRUFBQWk2QixnQkE5TkEsU0FBQWpCLEdBQ0EsSUFBQTNnQyxFQUFBMmdDLEVBQUEzZ0MsS0FFQSxTQUFBQSxNQUFBTixRQUFBcStGLEtBNE5BcDJGLEVBQUE4cUUsWUFDQTlxRSxFQUFBKzJGLGdCQXZNQSxTQUFBQyxFQUFBQyxHQUNBLElBQUFDLEtBQ0FDLEtBR0EsT0FGQUMsRUFBQUosTUFBQUUsR0FDQUUsRUFBQUgsTUFBQUUsRUFBQUQsSUFDQUcsRUFBQUgsR0FBQUcsRUFBQUYsSUFFQSxTQUFBQyxFQUFBRSxFQUFBMTZGLEVBQUEyNkYsR0FDQSxRQUFBLzlGLEVBQUEsRUFBQWdTLEVBQUE4ckYsRUFBQTc5RixPQUE2Q0QsRUFBQWdTLEVBQVNoUyxJQUt0RCxJQUpBLElBQUFnVixFQUFBOG9GLEVBQUE5OUYsR0FBQWdWLFNBQ0EwZ0IsRUFBQTgyQixFQUFBc3hDLEVBQUE5OUYsR0FBQTRMLFdBQ0FveUYsRUFBQUQsS0FBQS9vRixHQUVBblMsRUFBQSxFQUFBbzdGLEVBQUF2b0UsRUFBQXoxQixPQUFnRDRDLEVBQUFvN0YsRUFBVXA3RixJQUFBLENBQzFELElBQUErSSxFQUFBOHBCLEVBQUE3eUIsR0FFQW03RixLQUFBcHlGLEdBQ0FveUYsRUFBQXB5RixHQUFBLE1BRUF4SSxFQUFBNFIsS0FBQTVSLEVBQUE0UixRQUErQ3BKLEdBQUEsR0FNL0MsU0FBQWl5RixFQUFBejZGLEVBQUE4NkYsR0FDQSxJQUFBejdGLEtBRUEsUUFBQXpDLEtBQUFvRCxFQUNBLEdBQUFBLEVBQUFwRyxlQUFBZ0QsSUFBQSxNQUFBb0QsRUFBQXBELEdBQ0EsR0FBQWsrRixFQUNBejdGLEVBQUFqRSxNQUFBd0IsT0FDUyxDQUNULElBQUEwMUIsRUFBQW1vRSxFQUFBejZGLEVBQUFwRCxJQUFBLEdBQ0EwMUIsRUFBQXoxQixRQUFBd0MsRUFBQWpFLE1BQ0F3VyxTQUFBaFYsRUFDQTRMLFVBQUE4cEIsSUFNQSxPQUFBanpCLElBOEpBK0QsRUFBQTZ5QixlQW5KQSxTQUFBMXpCLEVBQUF5RixHQUNBLGFBQUFBLEVBQUE0cUIsZ0JBQ0E1cUIsRUFBQTRxQixnQkFDRyxNQUFBNXFCLEVBQUFRLFVBQ0g5QixFQUFBNkUsUUFBQXZELEVBQUFRLFdBQUE5QixFQUFBMUcsSUFBQWdJLEVBQUFRLFVBQUEsU0FBQTFNLEdBQ0EsT0FBQXlHLEVBQUF5aEQsZ0JBQUFsb0QsS0FDS3lHLEVBQUF5aEQsZ0JBQUFoOEMsRUFBQVEsV0FDRixNQUFBUixFQUFBdk0sS0FDSGlMLEVBQUE2RSxRQUFBdkQsRUFBQXZNLE1BQUFpTCxFQUFBMUcsSUFBQWdJLEVBQUF2TSxLQUFBLFNBQUFLLEdBQ0EsT0FBQXlHLEVBQUFzK0IsWUFBQS9rQyxLQUNLeUcsRUFBQXMrQixZQUFBNzRCLEVBQUF2TSxXQUhGLEdBNklIMkgsRUFBQStJLFVBakhBLFdBRUEsSUFBQXZILEVBQUEsZ0JBQUE4MEYsSUFBQSxJQUFBcm5GLEtBQUFnNEIsU0FBQW1nRCxRQUFBLEdBQ0EsZ0JBQUF1USxHQUNBLE9BQUFBLEVBQUFuMkYsS0FBQW0yRixFQUFBbjJGLFNBOEdBeEIsRUFBQTh5RCxZQXJFQSxTQUFBbnZELEVBQUFrdEIsRUFBQTVxQixHQUNBLEdBQUEzQyxFQUFBcTBCLFNBQUE5RyxHQUFBLENBQ0EsSUFBQW8wQixLQUNBQSxFQUFBcDBCLEVBQUEsV0FDQUEsRUFBQW8wQixFQUdBLElBQUF5UixFQUFBendELEtBQUF5d0QsaUJBRUFBLEdBQUE2L0IsRUFBQTFsRSxFQUFBNmxDLEVBQUEsVUFBQTYvQixFQUFBMWxFLEVBQUE2bEMsRUFBQSxPQUFBNi9CLEVBQUExbEUsRUFBQTZsQyxFQUFBLFVBQ0E3bEMsRUFBQTZsQyxFQUFBLFlBR0EsSUFBQXo2RCxLQTZCQSxPQTVCQTZILEVBQUErc0IsRUFBQSxTQUFBbjRCLEVBQUE4SSxHQUdBLEdBRkE5SSxFQUFBbTRCLEVBQUFydkIsR0FFQSxjQUFBQSxHQUFBLG9CQUFBQSxFQUFBLENBS0EsSUFBQW8yRixFQUFBcDJGLEVBQUEyc0UsTUFBQSw4QkFDQXBwRSxFQUFBNnlGLEVBQUEsR0FDQUMsR0FBQUQsRUFBQSxRQUFBem5DLGNBRUEsTUFBQXByRCxJQUFBOHlGLEdBQUEsTUFBQW4vRixHQUFBLFVBQUFtL0YsR0FBQSxTQUFBbi9GLEdBQUF1TixLQUFBNnhGLGtCQUFBeDBGLEVBQUF2TCxRQUFBa08sRUFBQTZ4RixpQkFBQS95RixHQUFBLElBSUEsSUFBQWd6RixHQUNBaHpGLFlBR0EsVUFBQTh5RixHQUFBLFFBQUFuL0YsSUFDQXEvRixFQUFBRixHQUFBbi9GLEdBR0EsSUFBQTg5RCxFQUFBN3lELEVBQUEwa0UsZ0JBQUEwdkIsR0FDQTk3RixFQUFBOEksRUFBQSxVQUFBeXhELEVBQ0F2NkQsRUFBQThJLEVBQUEsU0FBQXl4RCxFQUFBLFNBdEJBdjZELEVBQUF1RixHQUFBOUksSUF3QkF1RCxHQTRCQStELEVBQUE4N0QsYUFyQkEsU0FBQXhMLEVBQUE5dUQsRUFBQTlJLEdBQ0E0M0QsRUFBQXdMLGFBQUF4TCxFQUFBd0wsYUFBQXQ2RCxFQUFBOUksR0FBQTQzRCxFQUFBOXVELEdBQUE5SSxHQXFCQXNILEVBQUFzOEQsYUFsQkEsU0FBQWhNLEVBQUE5dUQsR0FDQSxPQUFBOHVELEVBQUFnTSxhQUFBaE0sRUFBQWdNLGFBQUE5NkQsR0FBQTh1RCxFQUFBOXVELGlFQ3ZkQSxJQUFBOEIsRUFBQTdMLEVBQUEsMkNBb0JBdWdHLEVBQUEsS0E4UUEsSUFBQUMsRUFBQSxvSUF5RUEsU0FBQUMsRUFBQTdtRSxHQUNBLE9BQUFwaUIsS0FBQTZqQyxNQUFBN2pDLEtBQUFrbEQsSUFBQTlpQyxHQUFBcGlCLEtBQUFrcEYsTUE2SEFuNEYsRUFBQWtaLFVBcmNBLFNBQUFtWSxFQUFBK21FLEVBQUE1MkMsRUFBQXZXLEdBQ0EsSUFBQW90RCxFQUFBRCxFQUFBLEdBQUFBLEVBQUEsR0FDQUUsRUFBQTkyQyxFQUFBLEdBQUFBLEVBQUEsR0FFQSxPQUFBNjJDLEVBQ0EsV0FBQUMsRUFBQTkyQyxFQUFBLElBQUFBLEVBQUEsR0FBQUEsRUFBQSxNQVFBLEdBQUF2VyxFQUNBLEdBQUFvdEQsRUFBQSxHQUNBLEdBQUFobkUsR0FBQSttRSxFQUFBLEdBQ0EsT0FBQTUyQyxFQUFBLEdBQ08sR0FBQW53QixHQUFBK21FLEVBQUEsR0FDUCxPQUFBNTJDLEVBQUEsT0FFSyxDQUNMLEdBQUFud0IsR0FBQSttRSxFQUFBLEdBQ0EsT0FBQTUyQyxFQUFBLEdBQ08sR0FBQW53QixHQUFBK21FLEVBQUEsR0FDUCxPQUFBNTJDLEVBQUEsT0FHRyxDQUNILEdBQUFud0IsSUFBQSttRSxFQUFBLEdBQ0EsT0FBQTUyQyxFQUFBLEdBR0EsR0FBQW53QixJQUFBK21FLEVBQUEsR0FDQSxPQUFBNTJDLEVBQUEsR0FJQSxPQUFBbndCLEVBQUErbUUsRUFBQSxJQUFBQyxFQUFBQyxFQUFBOTJDLEVBQUEsSUFpYUF4aEQsRUFBQWlaLGFBclpBLFNBQUFwTixFQUFBMHNGLEdBQ0EsT0FBQTFzRixHQUNBLGFBQ0EsYUFDQUEsRUFBQSxNQUNBLE1BRUEsV0FDQSxVQUNBQSxFQUFBLEtBQ0EsTUFFQSxZQUNBLGFBQ0FBLEVBQUEsT0FJQSx1QkFBQUEsRUFqRkEsU0FBQSs5RSxHQUNBLE9BQUFBLEVBQUF2bUYsUUFBQSxXQUFBQSxRQUFBLFdBaUZBbTFGLENBQUEzc0YsR0FBQXNpRSxNQUFBLE1BQ0FpTixXQUFBdnZFLEdBQUEsSUFBQTBzRixFQUdBbmQsV0FBQXZ2RSxHQUdBLE1BQUFBLEVBQUF3TyxLQUFBeE8sR0E0WEE3TCxFQUFBZ2hDLE1BL1dBLFNBQUFydUIsRUFBQThTLEVBQUFnekUsR0FRQSxPQVBBLE1BQUFoekUsSUFDQUEsRUFBQSxJQUlBQSxFQUFBeFcsS0FBQXNLLElBQUF0SyxLQUFBbUcsSUFBQSxFQUFBcVEsR0FBQSxJQUNBOVMsT0FBQXkwRSxRQUFBM2hFLEdBQ0FnekUsRUFBQTlsRixNQXdXQTNTLEVBQUEwNEYsSUFyV0EsU0FBQS9nRCxHQUlBLE9BSEFBLEVBQUF0Z0MsS0FBQSxTQUFBM1osRUFBQUMsR0FDQSxPQUFBRCxFQUFBQyxJQUVBZzZDLEdBa1dBMzNDLEVBQUEyNEYsYUExVkEsU0FBQXRuRSxHQUdBLEdBRkFBLEtBRUE1WCxNQUFBNFgsR0FDQSxTQVVBLElBSEEsSUFBQXo0QixFQUFBLEVBQ0E2UyxFQUFBLEVBRUF3RCxLQUFBK3hCLE1BQUEzUCxFQUFBejRCLE9BQUF5NEIsR0FDQXo0QixHQUFBLEdBQ0E2UyxJQUdBLE9BQUFBLEdBd1VBekwsRUFBQTI3RSxpQkFoVUEsU0FBQXRxRCxHQUNBLElBQUF1NEQsRUFBQXY0RCxFQUFBcHZCLFdBRUEyMkYsRUFBQWhQLEVBQUE3eEYsUUFBQSxLQUVBLEdBQUE2Z0csRUFBQSxHQUNBLElBQUFuekUsR0FBQW1rRSxFQUFBanRGLE1BQUFpOEYsRUFBQSxHQUNBLE9BQUFuekUsRUFBQSxHQUFBQSxFQUFBLEVBRUEsSUFBQW96RSxFQUFBalAsRUFBQTd4RixRQUFBLEtBQ0EsT0FBQThnRyxFQUFBLElBQUFqUCxFQUFBbndGLE9BQUEsRUFBQW8vRixHQXVUQTc0RixFQUFBbXFDLGtCQTNTQSxTQUFBWSxFQUFBK3RELEdBQ0EsSUFBQTNrQyxFQUFBbGxELEtBQUFrbEQsSUFDQWdrQyxFQUFBbHBGLEtBQUFrcEYsS0FDQVksRUFBQTlwRixLQUFBNmpDLE1BQUFxaEIsRUFBQXBwQixFQUFBLEdBQUFBLEVBQUEsSUFBQW90RCxHQUNBYSxFQUFBL3BGLEtBQUEreEIsTUFBQW16QixFQUFBbGxELEtBQUFpSSxJQUFBNGhGLEVBQUEsR0FBQUEsRUFBQSxLQUFBWCxHQUVBMXlFLEVBQUF4VyxLQUFBc0ssSUFBQXRLLEtBQUFtRyxLQUFBMmpGLEVBQUFDLEVBQUEsT0FDQSxPQUFBejNFLFNBQUFrRSxLQUFBLElBcVNBemxCLEVBQUFtSyx3QkF0UkEsU0FBQXlCLEVBQUFsTixFQUFBK21CLEdBQ0EsSUFBQTdaLEVBQUFsTixHQUNBLFNBR0EsSUFBQWdiLEVBQUFwVyxFQUFBaTJCLE9BQUEzdEIsRUFBQSxTQUFBcXRGLEVBQUE1bkUsR0FDQSxPQUFBNG5FLEdBQUF4L0UsTUFBQTRYLEdBQUEsRUFBQUEsSUFDRyxHQUVILE9BQUEzWCxFQUNBLFNBbUJBLElBaEJBLElBQUF3L0UsRUFBQWpxRixLQUFBc3RFLElBQUEsR0FBQTkyRCxHQUNBMHpFLEVBQUE3MUYsRUFBQTFHLElBQUFnUCxFQUFBLFNBQUF5bEIsR0FDQSxPQUFBNVgsTUFBQTRYLEdBQUEsRUFBQUEsR0FBQTNYLEVBQUF3L0UsRUFBQSxNQUVBRSxFQUFBLElBQUFGLEVBQ0FHLEVBQUEvMUYsRUFBQTFHLElBQUF1OEYsRUFBQSxTQUFBRyxHQUVBLE9BQUFycUYsS0FBQTZqQyxNQUFBd21ELEtBRUFDLEVBQUFqMkYsRUFBQWkyQixPQUFBOC9ELEVBQUEsU0FBQUosRUFBQTVuRSxHQUNBLE9BQUE0bkUsRUFBQTVuRSxHQUNHLEdBQ0htb0UsRUFBQWwyRixFQUFBMUcsSUFBQXU4RixFQUFBLFNBQUFHLEVBQUE1NkYsR0FDQSxPQUFBNDZGLEVBQUFELEVBQUEzNkYsS0FHQTY2RixFQUFBSCxHQUFBLENBS0EsSUFIQSxJQUFBaGtGLEVBQUEyQixPQUFBMGlGLGtCQUNBQyxFQUFBLEtBRUFsZ0csRUFBQSxFQUFBZ1MsRUFBQWd1RixFQUFBLy9GLE9BQTJDRCxFQUFBZ1MsSUFBU2hTLEVBQ3BEZ2dHLEVBQUFoZ0csR0FBQTRiLElBQ0FBLEVBQUFva0YsRUFBQWhnRyxHQUNBa2dHLEVBQUFsZ0csS0FLQTYvRixFQUFBSyxHQUNBRixFQUFBRSxHQUFBLElBQ0FILEVBR0EsT0FBQUYsRUFBQTM2RixHQUFBdzZGLEdBd09BbDVGLEVBQUEyNUYsaUJBcE9BLGlCQXFPQTM1RixFQUFBMGEsVUE5TkEsU0FBQWsvRSxHQUNBLElBQUFDLEVBQUEsRUFBQTVxRixLQUFBNEcsR0FDQSxPQUFBK2pGLEVBQUFDLFFBNk5BNzVGLEVBQUF5YSxtQkFyTkEsU0FBQTRXLEdBQ0EsT0FBQUEsR0FBQTJtRSxHQUFBM21FLEVBQUEybUUsR0FxTkFoNEYsRUFBQW1vRCxVQWhNQSxTQUFBenZELEdBQ0EsR0FBQUEsYUFBQTY2RCxLQUNBLE9BQUE3NkQsRUFDRyxvQkFBQUEsRUFBQSxDQU1ILElBQUF5MUUsRUFBQThwQixFQUFBNkIsS0FBQXBoRyxHQUVBLElBQUF5MUUsRUFFQSxXQUFBNWEsS0FBQWw1QyxLQUlBLEdBQUE4ekQsRUFBQSxHQVdBLENBQ0EsSUFBQTRyQixHQUFBNXJCLEVBQUEsTUFNQSxNQUpBLE1BQUFBLEVBQUEsR0FBQWtjLGdCQUNBMFAsR0FBQTVyQixFQUFBLEdBQUF4eEUsTUFBQSxNQUdBLElBQUE0MkQsVUFBQXltQyxLQUFBN3JCLEVBQUEsS0FBQUEsRUFBQSxVQUFBQSxFQUFBLE1BQUE0ckIsSUFBQTVyQixFQUFBLFFBQUFBLEVBQUEsT0FBQUEsRUFBQSxRQWZBLFdBQUE1YSxNQUFBNGEsRUFBQSxLQUFBQSxFQUFBLFVBQUFBLEVBQUEsT0FBQUEsRUFBQSxRQUFBQSxFQUFBLFFBQUFBLEVBQUEsT0FBQUEsRUFBQSxPQWlCRyxhQUFBejFFLEVBQ0gsSUFBQTY2RCxLQUFBbDVDLEtBR0EsSUFBQWs1QyxLQUFBdGtELEtBQUEreEIsTUFBQXRvQyxLQXdKQXNILEVBQUFrOUUsU0E5SUEsU0FBQTdyRCxHQUNBLE9BQUFwaUIsS0FBQXN0RSxJQUFBLEdBQUEyYixFQUFBN21FLEtBOElBcnhCLEVBQUEyK0UsS0EzSEEsU0FBQXR0RCxFQUFBMlAsR0FDQSxJQUFBaTVELEVBQUEvQixFQUFBN21FLEdBQ0E2b0UsRUFBQWpyRixLQUFBc3RFLElBQUEsR0FBQTBkLEdBQ0E1akQsRUFBQWhsQixFQUFBNm9FLEVBaUNBLE9BSEE3b0UsR0ExQkEyUCxFQUNBcVYsRUFBQSxJQUNBLEVBQ0tBLEVBQUEsSUFDTCxFQUNLQSxFQUFBLEVBQ0wsRUFDS0EsRUFBQSxFQUNMLEVBRUEsR0FHQUEsRUFBQSxFQUNBLEVBQ0tBLEVBQUEsRUFDTCxFQUNLQSxFQUFBLEVBQ0wsRUFDS0EsRUFBQSxFQUNMLEVBRUEsSUFJQTZqRCxFQUdBRCxJQUFBLElBQUE1b0UsRUFBQSsxRCxRQUFBNlMsRUFBQSxHQUFBQSxFQUFBLEdBQUE1b0UsR0F3RkFyeEIsRUFBQW02RixnQkE5REEsU0FBQW40RixHQUNBQSxFQUFBcVYsS0FBQSxTQUFBM1osRUFBQUMsR0FDQSxPQTRCQSxTQUFBaXVDLEVBQUFsdUMsRUFBQUMsRUFBQXk4RixHQUNBLE9BQUExOEYsRUFBQTh4QyxTQUFBNHFELEdBQUF6OEYsRUFBQTZ4QyxTQUFBNHFELElBQUExOEYsRUFBQTh4QyxTQUFBNHFELEtBQUF6OEYsRUFBQTZ4QyxTQUFBNHFELEtBQUExOEYsRUFBQTI4RixNQUFBRCxHQUFBejhGLEVBQUEwOEYsTUFBQUQsUUFBQSxPQUFBQSxHQUFBeHVELEVBQUFsdUMsRUFBQUMsRUFBQSxJQTdCQWl1QyxDQUFBbHVDLEVBQUFDLEVBQUEsVUFLQSxJQUhBLElBQUEyOEYsR0FBQSxJQUNBQyxFQUFBLEVBRUEvZ0csRUFBQSxFQUFpQkEsRUFBQXdJLEVBQUF2SSxRQUFpQixDQUlsQyxJQUhBLElBQUErMUMsRUFBQXh0QyxFQUFBeEksR0FBQWcyQyxTQUNBNnFELEVBQUFyNEYsRUFBQXhJLEdBQUE2Z0csTUFFQUQsRUFBQSxFQUFvQkEsRUFBQSxFQUFRQSxJQUM1QjVxRCxFQUFBNHFELElBQUFFLElBQ0E5cUQsRUFBQTRxRCxHQUFBRSxFQUNBRCxFQUFBRCxLQUFBLElBQUFHLEdBR0FELEVBQUE5cUQsRUFBQTRxRCxHQUNBRyxFQUFBRixFQUFBRCxHQUdBNXFELEVBQUEsS0FBQUEsRUFBQSxJQUFBNnFELEVBQUEsR0FBQUEsRUFBQSxNQUNBcjRGLEVBQUF6QyxPQUFBL0YsRUFBQSxHQUVBQSxJQUlBLE9BQUF3SSxHQW1DQWhDLEVBQUF3NkYsVUFuQkEsU0FBQTl1QyxHQUNBLE9BQUFBLEVBQUEwdkIsV0FBQTF2QixJQUFBLGdFQ3RlQSxJQUFBcG9ELEVBQUE3TCxFQUFBLDJDQUVBd1csRUFBQXhXLEVBQUEsOENBRUFnMUMsRUFBQWgxQyxFQUFBLG1EQTBCQWdqRyxFQUFBeHNGLEVBQUFnakYsYUFDQS96RixLQUFBLFdBQ0FpVSxPQUNBdUUsR0FBQSxFQUNBQyxHQUFBLEVBQ0FoSSxNQUFBLEVBQ0ErSSxPQUFBLEdBRUFna0YsVUFBQSxTQUFBNXRCLEVBQUEzN0QsR0FDQSxJQUFBdUUsRUFBQXZFLEVBQUF1RSxHQUNBQyxFQUFBeEUsRUFBQXdFLEdBQ0FoSSxFQUFBd0QsRUFBQXhELE1BQUEsRUFDQStJLEVBQUF2RixFQUFBdUYsT0FBQSxFQUNBbzJELEVBQUE1cEMsT0FBQXh0QixFQUFBQyxFQUFBZSxHQUNBbzJELEVBQUE2dEIsT0FBQWpsRixFQUFBL0gsRUFBQWdJLEVBQUFlLEdBQ0FvMkQsRUFBQTZ0QixPQUFBamxGLEVBQUEvSCxFQUFBZ0ksRUFBQWUsR0FDQW8yRCxFQUFBOHRCLGVBUUFDLEVBQUE1c0YsRUFBQWdqRixhQUNBL3pGLEtBQUEsVUFDQWlVLE9BQ0F1RSxHQUFBLEVBQ0FDLEdBQUEsRUFDQWhJLE1BQUEsRUFDQStJLE9BQUEsR0FFQWdrRixVQUFBLFNBQUE1dEIsRUFBQTM3RCxHQUNBLElBQUF1RSxFQUFBdkUsRUFBQXVFLEdBQ0FDLEVBQUF4RSxFQUFBd0UsR0FDQWhJLEVBQUF3RCxFQUFBeEQsTUFBQSxFQUNBK0ksRUFBQXZGLEVBQUF1RixPQUFBLEVBQ0FvMkQsRUFBQTVwQyxPQUFBeHRCLEVBQUFDLEVBQUFlLEdBQ0FvMkQsRUFBQTZ0QixPQUFBamxGLEVBQUEvSCxFQUFBZ0ksR0FDQW0zRCxFQUFBNnRCLE9BQUFqbEYsRUFBQUMsRUFBQWUsR0FDQW8yRCxFQUFBNnRCLE9BQUFqbEYsRUFBQS9ILEVBQUFnSSxHQUNBbTNELEVBQUE4dEIsZUFRQUUsRUFBQTdzRixFQUFBZ2pGLGFBQ0EvekYsS0FBQSxNQUNBaVUsT0FFQXdCLEVBQUEsRUFDQUMsRUFBQSxFQUNBakYsTUFBQSxFQUNBK0ksT0FBQSxHQUVBZ2tGLFVBQUEsU0FBQTV0QixFQUFBMzdELEdBQ0EsSUFBQXdCLEVBQUF4QixFQUFBd0IsRUFDQUMsRUFBQXpCLEVBQUF5QixFQUNBbW9GLEVBQUE1cEYsRUFBQXhELE1BQUEsSUFFQXZTLEVBQUE2VCxLQUFBbUcsSUFBQTJsRixFQUFBNXBGLEVBQUF1RixRQUNBeFYsRUFBQTY1RixFQUFBLEVBRUE1ckYsRUFBQWpPLEtBQUE5RixFQUFBOEYsR0FDQXlVLEVBQUEvQyxFQUFBeFgsRUFBQThGLEVBQUFpTyxFQUNBZ0wsRUFBQWxMLEtBQUErckYsS0FBQTdyRixFQUFBak8sR0FFQThOLEVBQUFDLEtBQUFDLElBQUFpTCxHQUFBalosRUFDQSs1RixFQUFBaHNGLEtBQUFHLElBQUErSyxHQUNBK2dGLEVBQUFqc0YsS0FBQUMsSUFBQWlMLEdBQ0FnaEYsRUFBQSxHQUFBajZGLEVBQ0FrNkYsRUFBQSxHQUFBbDZGLEVBQ0E0ckUsRUFBQTVwQyxPQUFBdndCLEVBQUEzRCxFQUFBMkcsRUFBQXhHLEdBQ0EyOUQsRUFBQWpHLElBQUFsMEQsRUFBQWdELEVBQUF6VSxFQUFBK04sS0FBQTRHLEdBQUFzRSxFQUFBLEVBQUFsTCxLQUFBNEcsR0FBQXNFLEdBQ0EyeUQsRUFBQXV1QixjQUFBMW9GLEVBQUEzRCxFQUFBaXNGLEVBQUFFLEVBQUF4bEYsRUFBQXhHLEVBQUErckYsRUFBQUMsRUFBQXhvRixFQUFBQyxFQUFBd29GLEVBQUF6b0YsRUFBQUMsR0FDQWs2RCxFQUFBdXVCLGNBQUExb0YsRUFBQUMsRUFBQXdvRixFQUFBem9GLEVBQUEzRCxFQUFBaXNGLEVBQUFFLEVBQUF4bEYsRUFBQXhHLEVBQUErckYsRUFBQUMsRUFBQXhvRixFQUFBM0QsRUFBQTJHLEVBQUF4RyxHQUNBMjlELEVBQUE4dEIsZUFRQVUsRUFBQXJ0RixFQUFBZ2pGLGFBQ0EvekYsS0FBQSxRQUNBaVUsT0FDQXdCLEVBQUEsRUFDQUMsRUFBQSxFQUNBakYsTUFBQSxFQUNBK0ksT0FBQSxHQUVBZ2tGLFVBQUEsU0FBQWEsRUFBQXBxRixHQUNBLElBQUF1RixFQUFBdkYsRUFBQXVGLE9BQ0EvSSxFQUFBd0QsRUFBQXhELE1BQ0FnRixFQUFBeEIsRUFBQXdCLEVBQ0FDLEVBQUF6QixFQUFBeUIsRUFDQTVELEVBQUFyQixFQUFBLElBQ0E0dEYsRUFBQXI0RCxPQUFBdndCLEVBQUFDLEdBQ0Eyb0YsRUFBQVosT0FBQWhvRixFQUFBM0QsRUFBQTRELEVBQUE4RCxHQUNBNmtGLEVBQUFaLE9BQUFob0YsRUFBQUMsRUFBQThELEVBQUEsS0FDQTZrRixFQUFBWixPQUFBaG9GLEVBQUEzRCxFQUFBNEQsRUFBQThELEdBQ0E2a0YsRUFBQVosT0FBQWhvRixFQUFBQyxHQUNBMm9GLEVBQUFYLGVBUUFZLEdBQ0EvdEUsS0FBQXhmLEVBQUF1TyxLQUNBMFcsS0FBQWpsQixFQUFBa2MsS0FDQXN4RSxVQUFBeHRGLEVBQUFrYyxLQUNBdXhFLE9BQUF6dEYsRUFBQWtjLEtBQ0F3eEUsT0FBQTF0RixFQUFBazlFLE9BQ0F5USxRQUFBZixFQUNBZ0IsSUFBQWYsRUFDQWdCLE1BQUFSLEVBQ0FTLFNBQUF0QixHQUVBdUIsR0FDQXZ1RSxLQUFBLFNBQUE5YSxFQUFBQyxFQUFBbW9GLEVBQUEzL0YsRUFBQStWLEdBRUFBLEVBQUE4RyxHQUFBdEYsRUFDQXhCLEVBQUErRyxHQUFBdEYsRUFBQXhYLEVBQUEsRUFDQStWLEVBQUFnSCxHQUFBeEYsRUFBQW9vRixFQUNBNXBGLEVBQUFpSCxHQUFBeEYsRUFBQXhYLEVBQUEsR0FFQTgzQixLQUFBLFNBQUF2Z0IsRUFBQUMsRUFBQW1vRixFQUFBMy9GLEVBQUErVixHQUNBQSxFQUFBd0IsSUFDQXhCLEVBQUF5QixJQUNBekIsRUFBQXhELE1BQUFvdEYsRUFDQTVwRixFQUFBdUYsT0FBQXRiLEdBRUFxZ0csVUFBQSxTQUFBOW9GLEVBQUFDLEVBQUFtb0YsRUFBQTMvRixFQUFBK1YsR0FDQUEsRUFBQXdCLElBQ0F4QixFQUFBeUIsSUFDQXpCLEVBQUF4RCxNQUFBb3RGLEVBQ0E1cEYsRUFBQXVGLE9BQUF0YixFQUNBK1YsRUFBQWpRLEVBQUErTixLQUFBc0ssSUFBQXdoRixFQUFBMy9GLEdBQUEsR0FFQXNnRyxPQUFBLFNBQUEvb0YsRUFBQUMsRUFBQW1vRixFQUFBMy9GLEVBQUErVixHQUNBLElBQUFtSSxFQUFBckssS0FBQXNLLElBQUF3aEYsRUFBQTMvRixHQUNBK1YsRUFBQXdCLElBQ0F4QixFQUFBeUIsSUFDQXpCLEVBQUF4RCxNQUFBMkwsRUFDQW5JLEVBQUF1RixPQUFBNEMsR0FFQXFpRixPQUFBLFNBQUFocEYsRUFBQUMsRUFBQW1vRixFQUFBMy9GLEVBQUErVixHQUVBQSxFQUFBdUUsR0FBQS9DLEVBQUFvb0YsRUFBQSxFQUNBNXBGLEVBQUF3RSxHQUFBL0MsRUFBQXhYLEVBQUEsRUFDQStWLEVBQUFqUSxFQUFBK04sS0FBQXNLLElBQUF3aEYsRUFBQTMvRixHQUFBLEdBRUF3Z0csUUFBQSxTQUFBanBGLEVBQUFDLEVBQUFtb0YsRUFBQTMvRixFQUFBK1YsR0FDQUEsRUFBQXVFLEdBQUEvQyxFQUFBb29GLEVBQUEsRUFDQTVwRixFQUFBd0UsR0FBQS9DLEVBQUF4WCxFQUFBLEVBQ0ErVixFQUFBeEQsTUFBQW90RixFQUNBNXBGLEVBQUF1RixPQUFBdGIsR0FFQXlnRyxJQUFBLFNBQUFscEYsRUFBQUMsRUFBQW1vRixFQUFBMy9GLEVBQUErVixHQUNBQSxFQUFBd0IsSUFBQW9vRixFQUFBLEVBQ0E1cEYsRUFBQXlCLElBQUF4WCxFQUFBLEVBQ0ErVixFQUFBeEQsTUFBQW90RixFQUNBNXBGLEVBQUF1RixPQUFBdGIsR0FFQTBnRyxNQUFBLFNBQUFucEYsRUFBQUMsRUFBQW1vRixFQUFBMy9GLEVBQUErVixHQUNBQSxFQUFBd0IsSUFBQW9vRixFQUFBLEVBQ0E1cEYsRUFBQXlCLElBQUF4WCxFQUFBLEVBQ0ErVixFQUFBeEQsTUFBQW90RixFQUNBNXBGLEVBQUF1RixPQUFBdGIsR0FFQTJnRyxTQUFBLFNBQUFwcEYsRUFBQUMsRUFBQW1vRixFQUFBMy9GLEVBQUErVixHQUNBQSxFQUFBdUUsR0FBQS9DLEVBQUFvb0YsRUFBQSxFQUNBNXBGLEVBQUF3RSxHQUFBL0MsRUFBQXhYLEVBQUEsRUFDQStWLEVBQUF4RCxNQUFBb3RGLEVBQ0E1cEYsRUFBQXVGLE9BQUF0YixJQUdBNmdHLEtBQ0EzNEYsRUFBQVEsS0FBQTAzRixFQUFBLFNBQUE1aEQsRUFBQXZoRCxHQUNBNGpHLEVBQUE1akcsR0FBQSxJQUFBdWhELElBRUEsSUFBQXNpRCxFQUFBanVGLEVBQUFnakYsYUFDQS96RixLQUFBLFNBQ0FpVSxPQUNBaXNCLFdBQUEsR0FDQXpxQixFQUFBLEVBQ0FDLEVBQUEsRUFDQWpGLE1BQUEsRUFDQStJLE9BQUEsR0FFQXlsRixZQUFBLFdBQ0EsSUFBQXRwRixFQUFBM1EsS0FBQTJRLE1BR0EsUUFGQTNRLEtBQUFpUCxNQUVBaXNCLFlBQUEsV0FBQXZxQixFQUFBb08sZUFDQXBPLEVBQUFvTyxjQUFBLGFBQ0FwTyxFQUFBYyxVQUFBLFNBQ0FkLEVBQUFlLGtCQUFBLFdBR0E4bUYsVUFBQSxTQUFBYSxFQUFBcHFGLEVBQUFpckYsR0FDQSxJQUFBaC9ELEVBQUFqc0IsRUFBQWlzQixXQUNBaS9ELEVBQUFKLEVBQUE3K0QsR0FFQSxTQUFBanNCLEVBQUFpc0IsYUFDQWkvRCxJQUdBQSxFQUFBSixFQURBNytELEVBQUEsU0FJQTQrRCxFQUFBNStELEdBQUFqc0IsRUFBQXdCLEVBQUF4QixFQUFBeUIsRUFBQXpCLEVBQUF4RCxNQUFBd0QsRUFBQXVGLE9BQUEybEYsRUFBQWxyRixPQUNBa3JGLEVBQUEzQixVQUFBYSxFQUFBYyxFQUFBbHJGLE1BQUFpckYsT0FLQSxTQUFBRSxFQUFBLzJFLEVBQUFnM0UsR0FDQSxhQUFBcjZGLEtBQUFoRixLQUFBLENBQ0EsSUFBQXMvRixFQUFBdDZGLEtBQUEyUSxNQUNBNHBGLEVBQUF2NkYsS0FBQWlQLE1BRUFzckYsR0FBQSxTQUFBQSxFQUFBci9ELFdBQ0FvL0QsRUFBQXhvRixPQUFBdVIsRUFDS3JqQixLQUFBdzZGLGdCQUNMRixFQUFBeG9GLE9BQUF1UixFQUNBaTNFLEVBQUE1cUYsS0FBQTJxRixHQUFBLFNBR0FDLEVBQUE1cUYsT0FBQTRxRixFQUFBNXFGLEtBQUEyVCxHQUNBaTNFLEVBQUF4b0YsU0FBQXdvRixFQUFBeG9GLE9BQUF1UixJQUdBcmpCLEtBQUFpNEQsT0FBQSxJQWdEQW42RCxFQUFBMmEsYUFoQ0EsU0FBQXlpQixFQUFBenFCLEVBQUFDLEVBQUFtb0YsRUFBQTMvRixFQUFBbXFCLEVBQUFvM0UsR0FFQSxJQU1BQyxFQU5BMXZCLEVBQUEsSUFBQTl2QyxFQUFBcmxDLFFBQUEsU0EyQkEsT0F6QkFtMUUsSUFDQTl2QyxJQUFBOHNELE9BQUEsS0FBQS81QixjQUFBL3lCLEVBQUE4c0QsT0FBQSxLQU1BMFMsRUFEQSxJQUFBeC9ELEVBQUFybEMsUUFBQSxZQUNBa1csRUFBQW1qRixVQUFBaDBELEVBQUF6Z0MsTUFBQSxPQUFBOHZDLEVBQUE5NUIsRUFBQUMsRUFBQW1vRixFQUFBMy9GLEdBQUF1aEcsRUFBQSxrQkFDRyxJQUFBdi9ELEVBQUFybEMsUUFBQSxXQUNIa1csRUFBQTI5RSxTQUFBeHVELEVBQUF6Z0MsTUFBQSxNQUF5RCxJQUFBOHZDLEVBQUE5NUIsRUFBQUMsRUFBQW1vRixFQUFBMy9GLEdBQUF1aEcsRUFBQSxrQkFFekQsSUFBQVQsR0FDQS9xRixPQUNBaXNCLGFBQ0F6cUIsSUFDQUMsSUFDQWpGLE1BQUFvdEYsRUFDQXJrRixPQUFBdGIsTUFLQXNoRyxlQUFBeHZCLEVBQ0EwdkIsRUFBQUMsU0FBQVAsRUFDQU0sRUFBQUMsU0FBQXQzRSxHQUNBcTNFLGdFQ3pTQSxJQUFBRSxFQUFBLDJCQUNBQyxFQUFBLG1CQUNBQyxFQUFBLG1CQVdBLFNBQUE1MkUsRUFBQTF1QixFQUFBc3VDLEVBQUFpM0QsR0FDQSxJQUFBQyxFQUlBdG9GLEVBQ0EyOUQsRUFDQXdVLEVBQ0FvVyxFQU5BQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxLQU9BLFNBQUF4RCxJQUNBdUQsR0FBQSxJQUFBOXBDLE1BQUFncUMsVUFDQUQsRUFBQSxLQUNBNWxHLEVBQUFxQyxNQUFBdzRFLEVBQUF3VSxPQUxBL2dELEtBQUEsRUFRQSxJQUFBNXBDLEVBQUEsV0FDQThnRyxHQUFBLElBQUEzcEMsTUFBQWdxQyxVQUNBaHJCLEVBQUFyd0UsS0FDQTZrRixFQUFBcDhFLFVBQ0EsSUFBQTZ5RixFQUFBTCxHQUFBbjNELEVBQ0F5M0QsRUFBQU4sR0FBQUYsRUFDQUUsRUFBQSxLQUNBdm9GLEVBQUFzb0YsR0FBQU8sRUFBQUwsRUFBQUMsR0FBQUcsRUFDQTE3RCxhQUFBdzdELEdBU0FHLEVBQ0FILEVBQUE3NUQsV0FBQXEyRCxFQUFBMEQsR0FFQTVvRixHQUFBLEVBQ0FrbEYsSUFFQXdELEVBQUE3NUQsV0FBQXEyRCxHQUFBbGxGLEdBSUF3b0YsRUFBQUYsR0F1QkEsT0FmQTlnRyxFQUFBNnNCLE1BQUEsV0FDQXEwRSxJQUNBeDdELGFBQUF3N0QsR0FDQUEsRUFBQSxPQVFBbGhHLEVBQUErZ0csaUJBQUEsU0FBQU8sR0FDQVAsRUFBQU8sR0FHQXRoRyxFQXdFQTRELEVBQUFvbUIsV0FDQXBtQixFQUFBbXJCLGVBMUNBLFNBQUE4NUIsRUFBQTA0QyxFQUFBcjdDLEVBQUFzN0MsR0FDQSxJQUFBbG1HLEVBQUF1dEQsRUFBQTA0QyxHQUVBLEdBQUFqbUcsRUFBQSxDQUlBLElBQUFtbUcsRUFBQW5tRyxFQUFBb2xHLElBQUFwbEcsRUFDQW9tRyxFQUFBcG1HLEVBQUFzbEcsR0FHQSxHQUZBdGxHLEVBQUFxbEcsS0FFQXo2QyxHQUFBdzdDLElBQUFGLEVBQUEsQ0FDQSxTQUFBdDdDLElBQUFzN0MsRUFDQSxPQUFBMzRDLEVBQUEwNEMsR0FBQUUsR0FHQW5tRyxFQUFBdXRELEVBQUEwNEMsR0FBQXYzRSxFQUFBeTNFLEVBQUF2N0MsRUFBQSxhQUFBczdDLElBQ0FkLEdBQUFlLEVBQ0FubUcsRUFBQXNsRyxHQUFBWSxFQUNBbG1HLEVBQUFxbEcsR0FBQXo2QyxFQUdBLE9BQUE1cUQsSUFxQkFzSSxFQUFBaXBCLE1BVkEsU0FBQWc4QixFQUFBMDRDLEdBQ0EsSUFBQWptRyxFQUFBdXRELEVBQUEwNEMsR0FFQWptRyxLQUFBb2xHLEtBQ0E3M0MsRUFBQTA0QyxHQUFBam1HLEVBQUFvbEcsaUVDdEtBLElBRUFoNUYsRUFGQXJNLEVBQUEsMkNBRUFxTSxLQUVBNkwsRUFBQWxZLEVBQUEsaURBRUF5dkUsRUFBQXp2RSxFQUFBLGdEQUVBc3ZCLEVBQUF0dkIsRUFBQSw0Q0FFQXlTLEVBQUF6UyxFQUFBLDRDQUlBMjRFLEVBRkEzNEUsRUFBQSw2Q0FFQTI0RSxXQUVBak4sRUFBQTFyRSxFQUFBLGtFQW9CQXVSLEVBQUFrQixFQUFBbkIsWUFDQWcxRixFQUFBNTZCLElBRUEsU0FBQTY2QixJQUtBOTdGLEtBQUFzUyxNQUFBLElBQUE3RSxFQU1Bek4sS0FBQWtNLElBQUE4NEQsRUFBQU8sT0FBQSxhQUNBdmxFLEtBQUE0M0QsV0FBQXNXLEdBQ0FuWSxLQUFBZ21DLEVBQ0EvNEIsTUFBQWc1QixJQUVBaDhGLEtBQUE0M0QsV0FBQXppQixTQUNBMmQsS0FBQTl5RCxNQUlBODdGLEVBQUF6bkcsV0FDQTJHLEtBQUEsUUFPQXNOLEtBQUEsU0FBQTdHLEVBQUFDLEtBU0F5USxPQUFBLFNBQUFuUCxFQUFBdkIsRUFBQUMsRUFBQWdCLEtBU0F1NUYsVUFBQSxTQUFBajVGLEVBQUF2QixFQUFBQyxFQUFBZ0IsR0FDQXc1RixFQUFBbDVGLEVBQUFHLFVBQUFULEVBQUEsYUFVQXk1RixTQUFBLFNBQUFuNUYsRUFBQXZCLEVBQUFDLEVBQUFnQixHQUNBdzVGLEVBQUFsNUYsRUFBQUcsVUFBQVQsRUFBQSxXQVFBc1EsT0FBQSxTQUFBdlIsRUFBQUMsR0FDQTFCLEtBQUFzUyxNQUFBb29CLGFBUUF0OEIsUUFBQSxhQVNBMGdGLHlCQUFBLEtBU0FzZCxrQkFBQSxLQVVBNWlGLGdCQUFBLE1BVUEsSUFBQTZpRixFQUFBUCxFQUFBem5HLFVBWUEsU0FBQWlvRyxFQUFBNXZGLEVBQUE2dkYsR0FDQSxHQUFBN3ZGLElBQ0FBLEVBQUFnMUIsUUFBQTY2RCxHQUVBLFVBQUE3dkYsRUFBQTFSLE1BQ0EsUUFBQTFELEVBQUEsRUFBcUJBLEVBQUFvVixFQUFBOHZGLGFBQXFCbGxHLElBQzFDZ2xHLEVBQUE1dkYsRUFBQWlDLFFBQUFyWCxHQUFBaWxHLEdBWUEsU0FBQUwsRUFBQWovRixFQUFBeUYsRUFBQTY1RixHQUNBLElBQUFyNUYsRUFBQThFLEVBQUEyb0IsZUFBQTF6QixFQUFBeUYsR0FFQSxNQUFBUSxFQUNBdEIsRUFBQW9HLEVBQUE4N0MsaUJBQUE1Z0QsR0FBQSxTQUFBdzlDLEdBQ0E0N0MsRUFBQXIvRixFQUFBdVAsaUJBQUFrMEMsR0FBQTY3QyxLQUdBdC9GLEVBQUEya0Qsa0JBQUEsU0FBQWwxQyxHQUNBNHZGLEVBQUE1dkYsRUFBQTZ2RixLQWdCQSxTQUFBUixFQUFBNW1ELEdBQ0EsT0FBQTBtRCxFQUFBMW1ELEVBQUFucUIsT0FHQSxTQUFBZ3hFLEVBQUE3bUQsR0FDQSxJQUFBbnlDLEVBQUFteUMsRUFBQW5xQixNQUNBdnBCLEVBQUEwekMsRUFBQTF6QyxRQUNBQyxFQUFBeXpDLEVBQUF6ekMsSUFDQWdCLEVBQUF5eUMsRUFBQXp5QyxRQUVBMEUsRUFBQXBFLEVBQUFnRSxnQkFBQUksa0JBQ0EwckQsRUFBQTNkLEVBQUEyZCxLQUNBNkQsRUFBQWowRCxHQUFBb0UsRUFBQXBFLEdBQUFpMEQsYUFDQW42QixFQUFBcDFCLEVBQUEsMkJBQUF1dkQsR0FBQTdELEVBQUE2RCxLQUVBLFNBTUEsTUFKQSxXQUFBbjZCLEdBQ0FzMkIsRUFBQXQyQixHQUFBeDVCLEVBQUF2QixFQUFBQyxFQUFBZ0IsR0FHQSs1RixFQUFBamdFLEdBMUVBNi9ELEVBQUE3bUMsV0FBQTZtQyxFQUFBMW1DLGFBQUEwbUMsRUFBQTNtQyxhQUFBLFNBQUExeUQsRUFBQXZCLEVBQUFDLEVBQUFnQixHQUNBMUMsS0FBQW1TLE9BQUFuUCxFQUFBdkIsRUFBQUMsRUFBQWdCLElBMENBbWlCLEVBQUFtRixrQkFBQTh4RSxHQUFBLFlBRUFqM0UsRUFBQXFnRCxzQkFBQTQyQixHQUNBMTFCLG9CQUFBLElBR0EwMUIsRUFBQXJtQyxpQkFBQSxTQUFBL3lELEVBQUE4NUIsR0FDQTExQixFQUFBcEUsR0FBQWkwRCxhQUFBbjZCLEdBMkJBLElBQUFpZ0UsR0FDQTNkLDBCQUNBeGIsU0FBQSxTQUFBNzVELEVBQUEwckMsR0FDQUEsRUFBQTJkLEtBQUFzcEMsa0JBQUEzeUYsRUFBQTByQyxFQUFBbnFCLE1BQUFtcUIsRUFBQTF6QyxRQUFBMHpDLEVBQUF6ekMsSUFBQXl6QyxFQUFBenlDLFdBR0F5UCxRQUtBZ3dFLG9CQUFBLEVBQ0E3ZSxTQUFBLFNBQUE3NUQsRUFBQTByQyxHQUNBQSxFQUFBMmQsS0FBQTNnRCxPQUFBZ2pDLEVBQUFucUIsTUFBQW1xQixFQUFBMXpDLFFBQUEwekMsRUFBQXp6QyxJQUFBeXpDLEVBQUF6eUMsWUFJQVIsRUFBQTQ1RixFQUNBMWhHLEVBQUEwRCxRQUFBb0Usa0VDMVBBLElBQUF1TCxFQUFBbFksRUFBQSxpREFFQXl2RSxFQUFBenZFLEVBQUEsZ0RBRUFzdkIsRUFBQXR2QixFQUFBLDRDQW9CQXNpQyxFQUFBLFdBS0E3M0IsS0FBQXNTLE1BQUEsSUFBQTdFLEVBTUF6TixLQUFBa00sSUFBQTg0RCxFQUFBTyxPQUFBLGtCQVNBbTNCLEVBTkE3a0UsRUFBQXhqQyxXQUNBbU4sWUFBQXEyQixFQUNBdnZCLEtBQUEsU0FBQTdHLEVBQUFDLEtBQ0F5USxPQUFBLFNBQUEya0IsRUFBQXIxQixFQUFBQyxFQUFBZ0IsS0FDQXRFLFFBQUEsY0FJQXMrRixFQUFBbG5DLFdBQUFrbkMsRUFBQS9tQyxhQUFBK21DLEVBQUFobkMsYUFBQSxTQUFBMXlELEVBQUF2QixFQUFBQyxFQUFBZ0IsS0FJQW1pQixFQUFBbUYsa0JBQUE2TixHQUVBaFQsRUFBQXFnRCxzQkFBQXJ0QyxHQUNBdXVDLG9CQUFBLElBRUEsSUFBQWxrRSxFQUFBMjFCLEVBQ0F6OUIsRUFBQTBELFFBQUFvRSwrREN4REEsSUFBQWQsRUFBQTdMLEVBQUEsMkNBRUFpcEUsRUFBQWpwRSxFQUFBLHNDQUlBdXlELEVBRkF2eUQsRUFBQSwwREFFQXV5RCxpQkFrSkExdEQsRUFBQTBELFFBOUhBLFNBQUFzd0QsRUFBQTNzRCxHQUNBLElBQUFrN0YsRUFBQWw3RixFQUFBa08sU0FBQSxRQUVBLEdBQUFndEYsRUFBQXJtRyxJQUFBLFFBRUcsR0FBQXFtRyxFQUFBcm1HLElBQUEsZUFDSDgzRCxFQUFBd0wsYUFBQSxhQUFBK2lDLEVBQUFybUcsSUFBQSxvQkFERyxDQUtILElBQUFzbUcsRUFBQSxFQUNBbjdGLEVBQUE0eUIsV0FBQSxTQUFBcnhCLEVBQUF4RyxLQUNBb2dHLEdBQ0c1OEYsTUFDSCxJQUdBNjhGLEVBSEFDLEVBQUFILEVBQUFybUcsSUFBQSxxQkFDQXltRyxFQUFBSixFQUFBcm1HLElBQUEsdUJBQ0EwbUcsRUFBQWp3RixLQUFBc0ssSUFBQXVsRixFQUFBRyxHQUdBLEtBQUFILEVBQUEsSUFJQSxJQUFBeCtCLEVBd0ZBLFdBQ0EsSUFBQUEsRUFBQTM4RCxFQUFBa08sU0FBQSxTQUFBcEgsT0FNQSxPQUpBNjFELEtBQUE3bUUsU0FDQTZtRSxJQUFBLElBR0FBLEtBQUFyd0QsS0EvRkFrdkYsR0FHQUosRUFEQXorQixFQUNBajlELEVBQUErN0YsRUFBQSxzQkFDQTkrQixVQUdBOCtCLEVBQUEsd0JBR0EsSUFBQUMsS0FFQU4sR0FBQTE3RixFQUFBKzdGLEVBREFOLEVBQUEsb0RBRUFRLFlBQUFSLElBRUFuN0YsRUFBQTR5QixXQUFBLFNBQUFyeEIsRUFBQXhHLEdBQ0EsR0FBQUEsRUFBQXdnRyxFQUFBLENBQ0EsSUFBQUssRUFDQXhrRSxFQUFBNzFCLEVBQUExTSxJQUFBLFFBQ0FnbkcsRUFBQSxXQUFBVixFQUFBLDJCQUVBUyxFQUFBbDhGLEVBREFrOEYsRUFBQUgsRUFBQXJrRSxFQUFBeWtFLEVBQUEsV0FBQUEsRUFBQSxnQkFFQWh4RixTQUFBdEosRUFBQXFxQixZQUNBd0wsV0FBQTcxQixFQUFBMU0sSUFBQSxRQUNBZ00sV0EwRUEsU0FBQXRILEdBQ0EsT0FBQXdqRSxFQUFBMXhDLE9BQUFveUMsVUFBQWxrRSxJQUFBLE9BM0VBdWlHLENBQUF2NkYsRUFBQUYsV0FFQSxJQUFBN0YsRUFBQStGLEVBQUFHLFVBQ0FyUCxPQUFBbUosT0FFQUEsRUFBQXNNLFFBQUF1ekYsRUFFQU8sR0FBQWw4RixFQUFBKzdGLEVBQUEscUJBQ0FNLFdBQUFWLElBR0FPLEdBQUFILEVBQUEsZ0JBS0EsSUFGQSxJQUFBTyxLQUVBbm1HLEVBQUEsRUFBdUJBLEVBQUEyRixFQUFBc00sUUFBa0JqUyxJQUN6QyxHQUFBQSxFQUFBd2xHLEVBQUEsQ0FDQSxJQUFBM21HLEVBQUE4RyxFQUFBbUcsUUFBQTlMLEdBQ0FkLEVBQUFzeEQsRUFBQTdxRCxFQUFBM0YsR0FDQW1tRyxFQUFBM25HLEtBQUFxTCxFQUFBKzdGLEVBQUEvbUcsRUFBQSxxQ0FDQUEsT0FDQUssV0FLQTZtRyxHQUFBSSxFQUFBeGhHLEtBQUFpaEcsRUFBQSwwQkFBQUEsRUFBQSxzQkFDQUMsRUFBQXJuRyxLQUFBdW5HLE1BR0FSLEdBQUFNLEVBQUFsaEcsS0FBQWloRyxFQUFBLHFDQUFBQSxFQUFBLGlDQUNBOXVDLEVBQUF3TCxhQUFBLGFBQUFpakMsSUFHQSxTQUFBMTdGLEVBQUF1bUYsRUFBQWdXLEdBQ0Esb0JBQUFoVyxFQUNBLE9BQUFBLEVBR0EsSUFBQTN0RixFQUFBMnRGLEVBSUEsT0FIQXRtRixFQUFBUSxLQUFBODdGLEVBQUEsU0FBQWxuRyxFQUFBOEksR0FDQXZGLElBQUFvSCxRQUFBLElBQUF3OEYsT0FBQSxVQUE2Q3IrRixFQUFBLFVBQXNCLEtBQUE5SSxLQUVuRXVELEVBR0EsU0FBQW1qRyxFQUFBdHlCLEdBQ0EsSUFBQWd6QixFQUFBakIsRUFBQXJtRyxJQUFBczBFLEdBRUEsU0FBQWd6QixFQUFBLENBSUEsSUFIQSxJQUFBbHpCLEVBQUFFLEVBQUFsVSxNQUFBLEtBQ0EzOEQsRUFBQXlrRSxFQUFBNVIsS0FFQXQxRCxFQUFBLEVBQXFCQSxFQUFBb3pFLEVBQUFuekUsU0FBb0JELEVBQ3pDeUMsSUFBQTJ3RSxFQUFBcHpFLElBR0EsT0FBQXlDLEVBRUEsT0FBQTZqRyxzRUNySUEsSUFFQXBtRSxFQUZBamlDLEVBQUEsMkNBRUFpaUMsY0FtRUFwOUIsRUFBQTBELFFBNUNBLFNBQUF3RSxHQUNBLE9BQ0E4OEUsZ0JBQUEsU0FBQTM5RSxHQUVBLElBQUFvOEYsS0FDQUMsRUFBQXRtRSxJQUtBLE9BSkEvMUIsRUFBQTBWLGlCQUFBN1UsRUFBQSxTQUFBVSxHQUNBQSxFQUFBKzZGLGVBQUFGLEVBQ0FDLEVBQUF2bkcsSUFBQXlNLEVBQUFrSixJQUFBbEosS0FFQTg2RixHQUVBOTZCLE1BQUEsU0FBQWhnRSxFQUFBdkIsR0FDQSxJQUFBdThGLEVBQUFoN0YsRUFBQTJGLGFBQ0FzMUYsS0FDQWhoRyxFQUFBK0YsRUFBQUcsVUFDQWxHLEVBQUEyRSxLQUFBLFNBQUFwRixHQUNBLElBQUFraEQsRUFBQXpnRCxFQUFBc3dCLFlBQUEvd0IsR0FDQXloRyxFQUFBdmdELEdBQUFsaEQsSUFFQXdoRyxFQUFBcDhGLEtBQUEsU0FBQTg3QyxHQUNBLElBQUF3Z0QsRUFBQUQsRUFBQXZnRCxHQUVBeWdELEVBQUEsTUFBQUQsR0FBQWpoRyxFQUFBcVMsY0FBQTR1RixFQUFBLFlBRUEsR0FBQUMsRUFZQUgsRUFBQXY4QyxjQUFBL0QsRUFBQSxRQUFBeWdELE9BWkEsQ0FFQSxJQUNBOTZFLEVBREEyNkUsRUFBQW52RixhQUFBNnVDLEdBQ0FwbkQsSUFBQSxvQkFBQTBNLEVBQUFvdEUsb0JBQUE0dEIsRUFBQTU2RixRQUFBczZDLE1BQUEsR0FBQTE2QyxFQUFBKzZGLGVBQUFDLEVBQUF6MEYsU0FFQXkwRixFQUFBdjhDLGNBQUEvRCxFQUFBLFFBQUFyNkIsR0FFQSxNQUFBNjZFLEdBQ0FqaEcsRUFBQXdrRCxjQUFBeThDLEVBQUEsUUFBQTc2RSw2RUMxREEsSUFBQSs2RSxFQUFBN29HLEVBQUEsa0RBb0JBMk0sR0FDQW05RSxtQkFBQSxFQUNBbEIsa0JBQUEsRUFDQW5iLE1BQUEsU0FBQWhnRSxFQUFBdkIsR0FDQSxJQUFBeEUsRUFBQStGLEVBQUFHLFVBQ0FrN0YsR0FBQXI3RixFQUFBb3JFLHVCQUFBLG1CQUFBMVgsTUFBQSxLQUNBcnpDLEVBQUFyZ0IsRUFBQTFNLElBQUErbkcsSUFDQXI3RixFQUFBb3RFLG9CQUNBcHRFLEVBQUE3TSxLQUFBLEtBQUFzTCxFQUFBcW9FLGtCQUtBLEdBRkE3c0UsRUFBQWlrRCxVQUFBLFFBQUE3OUIsSUFFQTVoQixFQUFBdTNCLGlCQUFBaDJCLEdBQUEsQ0FDQSxtQkFBQXFnQixnQkFBQSs2RSxHQUNBbmhHLEVBQUEyRSxLQUFBLFNBQUFwRixHQUNBUyxFQUFBd2tELGNBQUFqbEQsRUFBQSxRQUFBNm1CLEVBQUFyZ0IsRUFBQXdHLGNBQUFoTixPQWNBLE9BQ0F5a0YsU0FBQWhrRixFQUFBcUosY0FWQSxTQUFBckosRUFBQVQsR0FDQSxJQUNBNm1CLEVBREFwbUIsRUFBQTRSLGFBQUFyUyxHQUNBbEcsSUFBQStuRyxHQUFBLEdBRUEsTUFBQWg3RSxHQUNBcG1CLEVBQUF3a0QsY0FBQWpsRCxFQUFBLFFBQUE2bUIsSUFLQSxTQUtBanBCLEVBQUEwRCxRQUFBb0UsOERDeERBLElBQUFvOEYsdUZBQ0EsU0FBQTVuRyxFQUFBUSxHQUFlLGFBQWEsaUJBQUFrRCxHQUFBLGlCQUFBQSxFQUFBMEQsUUFBQTFELEVBQUEwRCxRQUFBcEgsRUFBQTJDLFNBQUFuQyxFQUFBUixHQUFBLFlBQUFBLEdBQXVHLElBQUFBLEVBQUEyQyxTQUFBLFVBQUF2QixNQUFBLDRDQUEyRSxPQUFBWixFQUFBUixJQUFZUSxFQUFBUixHQUExTixDQUFnTyxvQkFBQTVDLGNBQUFrTSxLQUFBLFNBQUF0SixFQUFBUSxHQUFzRCxhQUFhLElBQUFzSSxLQUFBUixFQUFBdEksRUFBQTJDLFNBQUEvQixFQUFBbEQsT0FBQW1xRyxlQUFBeC9GLEVBQUFTLEVBQUEvRSxNQUFBZSxFQUFBZ0UsRUFBQW5FLE9BQUFzRSxFQUFBSCxFQUFBMUosS0FBQTBvRyxFQUFBaC9GLEVBQUEzSixRQUFBa0ksS0FBNEY5RSxFQUFBOEUsRUFBQWdDLFNBQUFvMEMsRUFBQXAyQyxFQUFBekosZUFBQStELEVBQUE4N0MsRUFBQXAwQyxTQUFBbEIsRUFBQXhHLEVBQUE5RCxLQUFBSCxRQUFBOEUsS0FBbUVrNEYsRUFBQSxTQUFBbDZGLEdBQWlCLHlCQUFBQSxHQUFBLGlCQUFBQSxFQUFBdW5HLFVBQXdEL3RGLEVBQUEsU0FBQXhaLEdBQWlCLGFBQUFBLFNBQUFwRCxRQUE2QjAxRCxHQUFJeHVELE1BQUEsRUFBQXRCLEtBQUEsRUFBQWdsRyxVQUFBLEdBQTRCLFNBQUE5L0YsRUFBQWxJLEVBQUFRLEVBQUFzSSxHQUFrQixJQUFBbEksRUFBQXlILEdBQUE3SCxLQUFBOEgsR0FBQXhGLGNBQUEsVUFBeUMsR0FBQXVGLEVBQUFnUCxLQUFBclgsRUFBQThJLEVBQUEsSUFBQWxJLEtBQUFreUQsRUFBQWhxRCxFQUFBbEksS0FBQXlILEVBQUF6SCxHQUFBa0ksRUFBQWxJLElBQTJDSixFQUFBa0MsS0FBQU8sWUFBQW9GLEdBQUE0L0YsV0FBQUMsWUFBQTcvRixHQUFnRCxTQUFBMFIsRUFBQS9aLEdBQWMsYUFBQUEsSUFBQSxvQkFBQUEsR0FBQSxtQkFBQUEsRUFBQXFILEVBQUE5RSxFQUFBMUUsS0FBQW1DLEtBQUEsZ0JBQUFBLEVBQTZGLElBQUFtaUcsRUFBQSxTQUFBbmlHLEVBQUFRLEdBQThCLFdBQUEyaEcsRUFBQXJqRyxHQUFBOFMsS0FBQTVSLEVBQUFRLElBQTBCMm5HLEVBQUEscUNBQW1oRixTQUFBQyxFQUFBcG9HLEdBQWMsSUFBQVEsSUFBQVIsR0FBQSxXQUFBQSxLQUFBYSxPQUFBaUksRUFBQWlSLEVBQUEvWixHQUF5QyxPQUFBMDZGLEVBQUExNkYsS0FBQWdhLEVBQUFoYSxLQUFBLFVBQUE4SSxHQUFBLElBQUF0SSxHQUFBLGlCQUFBQSxLQUFBLEdBQUFBLEVBQUEsS0FBQVIsR0FBbGlGbWlHLEVBQUFyakcsR0FBQXFqRyxFQUFBeGtHLFdBQWtCMHFHLE9BQUEsUUFBQXY5RixZQUFBcTNGLEVBQUF0aEcsT0FBQSxFQUFBeW5HLFFBQUEsV0FBeUQsT0FBQWpnRyxFQUFBeEssS0FBQXlMLE9BQW9CMUosSUFBQSxTQUFBSSxHQUFpQixhQUFBQSxFQUFBcUksRUFBQXhLLEtBQUF5TCxNQUFBdEosRUFBQSxFQUFBc0osS0FBQXRKLEVBQUFzSixLQUFBekksUUFBQXlJLEtBQUF0SixJQUE0RHVvRyxVQUFBLFNBQUF2b0csR0FBdUIsSUFBQVEsRUFBQTJoRyxFQUFBeDNDLE1BQUFyaEQsS0FBQXdCLGNBQUE5SyxHQUFvQyxPQUFBUSxFQUFBZ29HLFdBQUFsL0YsS0FBQTlJLEdBQTJCMEssS0FBQSxTQUFBbEwsR0FBa0IsT0FBQW1pRyxFQUFBajNGLEtBQUE1QixLQUFBdEosSUFBc0JnRSxJQUFBLFNBQUFoRSxHQUFpQixPQUFBc0osS0FBQWkvRixVQUFBcEcsRUFBQW4rRixJQUFBc0YsS0FBQSxTQUFBOUksRUFBQXNJLEdBQStDLE9BQUE5SSxFQUFBbkMsS0FBQTJDLEVBQUFzSSxFQUFBdEksT0FBd0J1RCxNQUFBLFdBQWtCLE9BQUF1RixLQUFBaS9GLFVBQUFsZ0csRUFBQWxILE1BQUFtSSxLQUFBeUksYUFBK0MwMkYsTUFBQSxXQUFrQixPQUFBbi9GLEtBQUFvL0YsR0FBQSxJQUFrQjcxRCxLQUFBLFdBQWlCLE9BQUF2cEMsS0FBQW8vRixJQUFBLElBQW1CQSxHQUFBLFNBQUExb0csR0FBZ0IsSUFBQVEsRUFBQThJLEtBQUF6SSxPQUFBaUksR0FBQTlJLEtBQUEsRUFBQVEsRUFBQSxHQUFpQyxPQUFBOEksS0FBQWkvRixVQUFBei9GLEdBQUEsR0FBQUEsRUFBQXRJLEdBQUE4SSxLQUFBUixTQUE4QzhVLElBQUEsV0FBZ0IsT0FBQXRVLEtBQUFrL0YsWUFBQWwvRixLQUFBd0IsZUFBMkMxTCxLQUFBNkosRUFBQXdWLEtBQUEzVixFQUFBMlYsS0FBQTlYLE9BQUFtQyxFQUFBbkMsUUFBb0N3N0YsRUFBQXB5RixPQUFBb3lGLEVBQUFyakcsR0FBQWlSLE9BQUEsV0FBaUMsSUFBQS9QLEVBQUFRLEVBQUFzSSxFQUFBUixFQUFBMUgsRUFBQXlILEVBQUF2RCxFQUFBaU4sVUFBQSxPQUFrQzlJLEVBQUEsRUFBQTYrRixFQUFBLzFGLFVBQUFsUixPQUFBd0csR0FBQSxFQUE2QixzQkFBQXZDLElBQUF1QyxFQUFBdkMsSUFBQWlOLFVBQUE5SSxPQUFnREEsS0FBQSxpQkFBQW5FLEdBQUE0MUYsRUFBQTUxRixXQUFxQ21FLElBQUE2K0YsSUFBQWhqRyxFQUFBd0UsS0FBQUwsS0FBc0JBLEVBQUE2K0YsRUFBSTcrRixJQUFBLFVBQUFqSixFQUFBK1IsVUFBQTlJLElBQUEsSUFBQXpJLEtBQUFSLEVBQUE4SSxFQUFBaEUsRUFBQXRFLEdBQUFzRSxLQUFBd0QsRUFBQXRJLEVBQUFRLE1BQUE2RyxHQUFBaUIsSUFBQTY1RixFQUFBd0csY0FBQXJnRyxLQUFBMUgsRUFBQXUvQyxNQUFBNXdDLFFBQUFqSCxNQUFBMUgsTUFBQSxFQUFBeUgsRUFBQVMsR0FBQXEzQyxNQUFBNXdDLFFBQUF6RyxTQUFBVCxFQUFBUyxHQUFBcTVGLEVBQUF3RyxjQUFBNy9GLFFBQWlMaEUsRUFBQXRFLEdBQUEyaEcsRUFBQXB5RixPQUFBMUksRUFBQWdCLEVBQUFDLFNBQUEsSUFBQUEsSUFBQXhELEVBQUF0RSxHQUFBOEgsSUFBNkMsT0FBQXhELEdBQVNxOUYsRUFBQXB5RixRQUFXNjRGLFFBQUEsa0JBQUF2eUYsS0FBQWc0QixVQUFBNWpDLFFBQUEsVUFBQW8rRixTQUFBLEVBQUFoaUcsTUFBQSxTQUFBN0csR0FBd0YsVUFBQW9CLE1BQUFwQixJQUFtQmc0QyxLQUFBLGFBQWtCMndELGNBQUEsU0FBQTNvRyxHQUEyQixJQUFBUSxFQUFBc0ksRUFBUSxTQUFBOUksR0FBQSxvQkFBQXVDLEVBQUExRSxLQUFBbUMsS0FBQVEsRUFBQUksRUFBQVosTUFBQSxtQkFBQThJLEVBQUEyMEMsRUFBQTUvQyxLQUFBMkMsRUFBQSxnQkFBQUEsRUFBQXNLLGNBQUFuSixFQUFBOUQsS0FBQWlMLEtBQUFYLEtBQXFJMmdHLGNBQUEsU0FBQTlvRyxHQUEyQixJQUFBUSxFQUFNLElBQUFBLEtBQUFSLEVBQUEsU0FBb0IsVUFBUytvRyxXQUFBLFNBQUEvb0csR0FBd0JrSSxFQUFBbEksSUFBS2tMLEtBQUEsU0FBQWxMLEVBQUFRLEdBQW9CLElBQUFzSSxFQUFBUixFQUFBLEVBQVUsR0FBQTgvRixFQUFBcG9HLEdBQVMsSUFBQThJLEVBQUE5SSxFQUFBYSxPQUFleUgsRUFBQVEsSUFBSSxJQUFBdEksRUFBQTNDLEtBQUFtQyxFQUFBc0ksS0FBQXRJLEVBQUFzSSxjQUFzQyxJQUFBQSxLQUFBdEksRUFBQSxRQUFBUSxFQUFBM0MsS0FBQW1DLEVBQUFzSSxLQUFBdEksRUFBQXNJLElBQUEsTUFBa0QsT0FBQXRJLEdBQVM4NUYsS0FBQSxTQUFBOTVGLEdBQWtCLGFBQUFBLEVBQUEsSUFBQUEsRUFBQSxJQUFBeUssUUFBQTA5RixFQUFBLEtBQXVDYSxVQUFBLFNBQUFocEcsRUFBQVEsR0FBeUIsSUFBQXNJLEVBQUF0SSxNQUFZLGFBQUFSLElBQUFvb0csRUFBQTFxRyxPQUFBc0MsSUFBQW1pRyxFQUFBeDNDLE1BQUE3aEQsRUFBQSxpQkFBQTlJLFNBQUFpSixFQUFBcEwsS0FBQWlMLEVBQUE5SSxJQUFBOEksR0FBaUZtZ0csUUFBQSxTQUFBanBHLEVBQUFRLEVBQUFzSSxHQUF5QixhQUFBdEksR0FBQSxFQUFBc25HLEVBQUFqcUcsS0FBQTJDLEVBQUFSLEVBQUE4SSxJQUFnQzZoRCxNQUFBLFNBQUEzcUQsRUFBQVEsR0FBcUIsUUFBQXNJLEdBQUF0SSxFQUFBSyxPQUFBeUgsRUFBQSxFQUFBMUgsRUFBQVosRUFBQWEsT0FBbUN5SCxFQUFBUSxFQUFJUixJQUFBdEksRUFBQVksS0FBQUosRUFBQThILEdBQWdCLE9BQUF0SSxFQUFBYSxPQUFBRCxFQUFBWixHQUFvQmtwRyxLQUFBLFNBQUFscEcsRUFBQVEsRUFBQXNJLEdBQXNCLFFBQUFsSSxLQUFBeUgsRUFBQSxFQUFBdkQsRUFBQTlFLEVBQUFhLE9BQUFvSSxHQUFBSCxFQUFtQ1QsRUFBQXZELEVBQUl1RCxLQUFBN0gsRUFBQVIsRUFBQXFJLFFBQUFZLEdBQUFySSxFQUFBeEIsS0FBQVksRUFBQXFJLElBQXFDLE9BQUF6SCxHQUFTb0QsSUFBQSxTQUFBaEUsRUFBQVEsRUFBQXNJLEdBQXFCLElBQUFSLEVBQUExSCxFQUFBeUgsRUFBQSxFQUFBWSxLQUFpQixHQUFBbS9GLEVBQUFwb0csR0FBQSxJQUFBc0ksRUFBQXRJLEVBQUFhLE9BQXVCd0gsRUFBQUMsRUFBSUQsSUFBQSxPQUFBekgsRUFBQUosRUFBQVIsRUFBQXFJLEtBQUFTLEtBQUFHLEVBQUE3SixLQUFBd0IsUUFBcUMsSUFBQXlILEtBQUFySSxFQUFBLE9BQUFZLEVBQUFKLEVBQUFSLEVBQUFxSSxLQUFBUyxLQUFBRyxFQUFBN0osS0FBQXdCLEdBQWlELE9BQUFrRSxFQUFBM0QsU0FBQThILElBQXFCa2dHLEtBQUEsRUFBQUMsUUFBQTVtRyxJQUFrQixtQkFBQStGLFNBQUE0NUYsRUFBQXJqRyxHQUFBeUosT0FBQWtrRixVQUFBM2pGLEVBQUFQLE9BQUFra0YsV0FBQTBWLEVBQUFqM0YsS0FBQSx1RUFBQTgwRCxNQUFBLGNBQUFoZ0UsRUFBQVEsR0FBK0s2RyxFQUFBLFdBQUE3RyxFQUFBLEtBQUFBLEVBQUErMkQsZ0JBQXlLLElBQUE4eEMsRUFBQSxTQUFBcnBHLEdBQWtCLElBQUFRLEVBQUFzSSxFQUFBUixFQUFBMUgsRUFBQXlILEVBQUF2RCxFQUFBbUUsRUFBQTYrRixFQUFBemdHLEVBQUE5RSxFQUFBazdDLEVBQUE5N0MsRUFBQXdHLEVBQUEzRixFQUFBazRGLEVBQUExZ0YsRUFBQTg0QyxFQUFBNXFELEVBQUE2UixFQUFBaFYsRUFBQSxlQUFBNDFELEtBQUF3bkMsRUFBQW5pRyxFQUFBMkMsU0FBQXdsRyxFQUFBLEVBQUFDLEVBQUEsRUFBQWlCLEVBQUFDLEtBQUE5c0QsRUFBQThzRCxLQUFBclgsRUFBQXFYLEtBQUFDLEVBQUEsU0FBQXZwRyxFQUFBUSxHQUEwSCxPQUFBUixJQUFBUSxJQUFBaTlDLEdBQUEsTUFBdUIrckQsS0FBSzVyRyxlQUFBNnJHLEtBQUFobUcsRUFBQWdtRyxFQUFBdGxHLElBQUFzdUUsRUFBQWczQixFQUFBcnFHLEtBQUFzcUcsRUFBQUQsRUFBQXJxRyxLQUFBdXFHLEVBQUFGLEVBQUExbEcsTUFBQTZsRyxFQUFBLFNBQUE1cEcsRUFBQVEsR0FBeUUsUUFBQXNJLEVBQUEsRUFBQVIsRUFBQXRJLEVBQUFhLE9BQXVCaUksRUFBQVIsRUFBSVEsSUFBQSxHQUFBOUksRUFBQThJLEtBQUF0SSxFQUFBLE9BQUFzSSxFQUF5QixVQUFTK2dHLEVBQUEsNkhBQUE3WCxFQUFBLHNCQUFBOFgsRUFBQSxnQ0FBQUMsRUFBQSxNQUFBL1gsRUFBQSxLQUFBOFgsRUFBQSxPQUFBOVgsRUFBQSxnQkFBQUEsRUFBQSwyREFBQThYLEVBQUEsT0FBQTlYLEVBQUEsT0FBQWdZLEVBQUEsS0FBQUYsRUFBQSx3RkFBQUMsRUFBQSxlQUFBRSxFQUFBLElBQUFoRCxPQUFBalYsRUFBQSxTQUFBa1ksRUFBQSxJQUFBakQsT0FBQSxJQUFBalYsRUFBQSw4QkFBQUEsRUFBQSxVQUFBbVksRUFBQSxJQUFBbEQsT0FBQSxJQUFBalYsRUFBQSxLQUFBQSxFQUFBLEtBQUFvWSxFQUFBLElBQUFuRCxPQUFBLElBQUFqVixFQUFBLFdBQUFBLEVBQUEsSUFBQUEsRUFBQSxLQUFBbitFLEVBQUEsSUFBQW96RixPQUFBLElBQUFqVixFQUFBLGlCQUFBQSxFQUFBLFlBQUFxWSxFQUFBLElBQUFwRCxPQUFBK0MsR0FBQU0sRUFBQSxJQUFBckQsT0FBQSxJQUFBNkMsRUFBQSxLQUFBUyxHQUFpcUJDLEdBQUEsSUFBQXZELE9BQUEsTUFBQTZDLEVBQUEsS0FBQVcsTUFBQSxJQUFBeEQsT0FBQSxRQUFBNkMsRUFBQSxLQUFBWSxJQUFBLElBQUF6RCxPQUFBLEtBQUE2QyxFQUFBLFNBQUFhLEtBQUEsSUFBQTFELE9BQUEsSUFBQThDLEdBQUFhLE9BQUEsSUFBQTNELE9BQUEsSUFBQStDLEdBQUFhLE1BQUEsSUFBQTVELE9BQUEseURBQUFqVixFQUFBLCtCQUFBQSxFQUFBLGNBQUFBLEVBQUEsYUFBQUEsRUFBQSxjQUFBOFksS0FBQSxJQUFBN0QsT0FBQSxPQUFBNEMsRUFBQSxVQUFBa0IsYUFBQSxJQUFBOUQsT0FBQSxJQUFBalYsRUFBQSxtREFBQUEsRUFBQSxtQkFBQUEsRUFBQSx5QkFBdWNnWixFQUFBLHNDQUFBQyxFQUFBLFNBQUFDLEVBQUEseUJBQStEQyxFQUFBLG1DQUFBQyxFQUFBLE9BQUFDLEVBQUEsSUFBQXBFLE9BQUEscUJBQThGalYsRUFBQSxNQUFBQSxFQUFBLGFBQUFzWixHQUFBLFNBQUF0ckcsRUFBQVEsRUFBQXNJLEdBQTRDLElBQUFSLEVBQUEsS0FBQTlILEVBQUEsTUFBbUIsT0FBQThILE1BQUFRLEVBQUF0SSxFQUFBOEgsRUFBQSxFQUFBaWpHLE9BQUFDLGFBQUFsakcsRUFBQSxPQUFBaWpHLE9BQUFDLGFBQUFsakcsR0FBQSxjQUFBQSxFQUFBLFFBQWlHbWpHLEdBQUEsc0RBQUFDLEdBQUEsU0FBQTFyRyxFQUFBUSxHQUEyRSxPQUFBQSxFQUFBLE9BQUFSLEVBQUEsSUFBQUEsRUFBQStELE1BQUEsV0FBQS9ELEVBQUFtOUMsV0FBQW45QyxFQUFBYSxPQUFBLEdBQUF3SSxTQUFBLGFBQUFySixHQUErRjJyRyxHQUFBLFdBQWVocUcsS0FBSWlxRyxHQUFBanRHLEdBQUEsU0FBQXFCLEdBQW1CLFdBQUFBLEVBQUE2ckcsV0FBQSxTQUFBN3JHLEdBQUEsVUFBQUEsS0FBbUR3ZCxJQUFBLGFBQUF1TSxLQUFBLFdBQWlDLElBQUkyL0UsRUFBQXZvRyxNQUFBc29HLEVBQUFFLEVBQUE5ckcsS0FBQXNrRyxFQUFBMkosWUFBQTNKLEVBQUEySixZQUFBckMsRUFBQXRILEVBQUEySixXQUFBanJHLFFBQUFrbkcsU0FBNkUsTUFBQS9uRyxHQUFTMHBHLEdBQUd2b0csTUFBQXNvRyxFQUFBNW9HLE9BQUEsU0FBQWIsRUFBQVEsR0FBNkJpeUUsRUFBQXR4RSxNQUFBbkIsRUFBQTJwRyxFQUFBOXJHLEtBQUEyQyxLQUFxQixTQUFBUixFQUFBUSxHQUFrQyxJQUFuQixJQUFBc0ksRUFBQTlJLEVBQUFhLE9BQUF5SCxFQUFBLEVBQW1CdEksRUFBQThJLEtBQUF0SSxFQUFBOEgsT0FBcUJ0SSxFQUFBYSxPQUFBaUksRUFBQSxJQUFlLFNBQUFpakcsR0FBQS9yRyxFQUFBUSxFQUFBOEgsRUFBQTFILEdBQXFCLElBQUF5SCxFQUFBWSxFQUFBNUIsRUFBQTlFLEVBQUFrN0MsRUFBQWo3QyxFQUFBc3dELEVBQUE1cUQsRUFBQTFILEtBQUF3ckcsY0FBQTdELEVBQUEzbkcsSUFBQXVuRyxTQUFBLEVBQXdELEdBQUF6L0YsUUFBQSxpQkFBQXRJLE9BQUEsSUFBQW1vRyxHQUFBLElBQUFBLEdBQUEsS0FBQUEsRUFBQSxPQUFBNy9GLEVBQWlFLElBQUExSCxLQUFBSixJQUFBd3JHLGVBQUF4ckcsRUFBQTJoRyxLQUFBaDZGLEdBQUF4RyxFQUFBbkIsUUFBQTJILEVBQUF1eUYsR0FBQSxDQUFzRCxRQUFBeU4sSUFBQTFxRCxFQUFBMHRELEVBQUFqSyxLQUFBbGhHLElBQUEsR0FBQXFJLEVBQUFvMUMsRUFBQSxJQUFvQyxPQUFBMHFELEVBQUEsQ0FBVSxLQUFBOWdHLEVBQUE3RyxFQUFBeXJHLGVBQUE1akcsSUFBQSxPQUFBQyxFQUFxQyxHQUFBakIsRUFBQXBHLEtBQUFvSCxFQUFBLE9BQUFDLEVBQUFsSixLQUFBaUksR0FBQWlCLE9BQStCLEdBQUFKLElBQUFiLEVBQUFhLEVBQUErakcsZUFBQTVqRyxLQUFBMFIsRUFBQXZaLEVBQUE2RyxNQUFBcEcsS0FBQW9ILEVBQUEsT0FBQUMsRUFBQWxKLEtBQUFpSSxHQUFBaUIsTUFBd0UsQ0FBSyxHQUFBbTFDLEVBQUEsVUFBQWlzRCxFQUFBdm9HLE1BQUFtSCxFQUFBOUgsRUFBQW9DLHFCQUFBNUMsSUFBQXNJLEVBQXNELElBQUFELEVBQUFvMUMsRUFBQSxLQUFBMzBDLEVBQUFvakcsd0JBQUExckcsRUFBQTByRyx1QkFBQSxPQUFBeEMsRUFBQXZvRyxNQUFBbUgsRUFBQTlILEVBQUEwckcsdUJBQUE3akcsSUFBQUMsRUFBZ0gsR0FBQVEsRUFBQXFqRyxNQUFBbGEsRUFBQWp5RixFQUFBLFFBQUFnYSxNQUFBeFAsS0FBQXhLLElBQUEsQ0FBdUMsT0FBQW1vRyxFQUFBamdHLEVBQUExSCxFQUFBc3lELEVBQUE5eUQsT0FBaUIsY0FBQVEsRUFBQTRyRyxTQUFBNzBDLGNBQUEsQ0FBb0ksS0FBdkZoMUQsRUFBQS9CLEVBQUFrakUsYUFBQSxPQUFBbmhFLElBQUFrSSxRQUFBZ2hHLEdBQUFDLElBQUFsckcsRUFBQTBpRSxhQUFBLEtBQUEzZ0UsRUFBQXdDLEdBQUFrRSxHQUFBekcsRUFBQXNDLEVBQUE5RSxJQUFBYSxPQUF1Rm9JLEtBQUF6RyxFQUFBeUcsR0FBQSxJQUFBMUcsRUFBQSxJQUFBOHBHLEdBQUE3cEcsRUFBQXlHLElBQWtDNnBELEVBQUF0d0QsRUFBQStDLEtBQUEsS0FBQTJDLEVBQUFrakcsRUFBQTVnRyxLQUFBeEssSUFBQXNzRyxHQUFBOXJHLEVBQUF5bkcsYUFBQXpuRyxFQUErQyxHQUFBc3lELEVBQUEsSUFBUyxPQUFBNDJDLEVBQUF2b0csTUFBQW1ILEVBQUFKLEVBQUFxa0csaUJBQUF6NUMsSUFBQXhxRCxFQUEwQyxNQUFBdEksSUFBVSxRQUFRdUMsSUFBQXdDLEdBQUF2RSxFQUFBZ3NHLGdCQUFBLFFBQWlDLE9BQUExRSxFQUFBOW5HLEVBQUF5SyxRQUFBeS9GLEVBQUEsTUFBQTFwRyxFQUFBOEgsRUFBQTFILEdBQWtDLFNBQUEwb0csS0FBYyxJQUFBdHBHLEtBQTRGLE9BQW5GLFNBQUFRLEVBQUFzSSxFQUFBbEksR0FBZ0IsT0FBQVosRUFBQVosS0FBQTBKLEVBQUEsS0FBQVIsRUFBQW1rRyxvQkFBQWpzRyxFQUFBUixFQUFBOHlDLFNBQUF0eUMsRUFBQXNJLEVBQUEsS0FBQWxJLEdBQTRFLFNBQUE4ckcsR0FBQTFzRyxHQUFlLE9BQUFBLEVBQUErRSxJQUFBLEVBQUEvRSxFQUFpQixTQUFBMnNHLEdBQUEzc0csR0FBZSxJQUFBUSxFQUFBMkgsRUFBQXJGLGNBQUEsWUFBa0MsSUFBSSxRQUFBOUMsRUFBQVEsR0FBYSxNQUFBUixHQUFTLFNBQVMsUUFBUVEsRUFBQXluRyxZQUFBem5HLEVBQUF5bkcsV0FBQUMsWUFBQTFuRyxLQUFBLE1BQWtELFNBQUFvc0csR0FBQTVzRyxFQUFBUSxHQUErQyxJQUE5QixJQUFBc0ksRUFBQTlJLEVBQUFnZ0UsTUFBQSxLQUFBcC9ELEVBQUFrSSxFQUFBakksT0FBOEJELEtBQUEwSCxFQUFBdWtHLFdBQUEvakcsRUFBQWxJLElBQUFKLEVBQStCLFNBQUFzc0csR0FBQTlzRyxFQUFBUSxHQUFpQixJQUFBc0ksRUFBQXRJLEdBQUFSLEVBQUFzSSxFQUFBUSxHQUFBLElBQUE5SSxFQUFBK25HLFVBQUEsSUFBQXZuRyxFQUFBdW5HLFVBQUEvbkcsRUFBQStzRyxZQUFBdnNHLEVBQUF1c0csWUFBNEUsR0FBQXprRyxFQUFBLE9BQUFBLEVBQWMsR0FBQVEsRUFBQSxLQUFBQSxJQUFBa2tHLGFBQUEsR0FBQWxrRyxJQUFBdEksRUFBQSxTQUE2QyxPQUFBUixFQUFBLEtBQWMsU0FBQWl0RyxHQUFBanRHLEdBQWUsZ0JBQUFRLEdBQW1CLGdCQUFBQSxFQUFBNHJHLFNBQUE3MEMsZUFBQS8yRCxFQUFBOEQsT0FBQXRFLEdBQXNELFNBQUFrdEcsR0FBQWx0RyxHQUFlLGdCQUFBUSxHQUFtQixJQUFBc0ksRUFBQXRJLEVBQUE0ckcsU0FBQTcwQyxjQUErQixpQkFBQXp1RCxHQUFBLFdBQUFBLElBQUF0SSxFQUFBOEQsT0FBQXRFLEdBQStDLFNBQUFtdEcsR0FBQW50RyxHQUFlLGdCQUFBUSxHQUFtQixlQUFBQSxJQUFBeW5HLGFBQUEsSUFBQXpuRyxFQUFBcXJHLFNBQUEsVUFBQXJyRyxFQUFBLFVBQUFBLEVBQUF5bkcsV0FBQXpuRyxFQUFBeW5HLFdBQUE0RCxXQUFBN3JHLEVBQUFRLEVBQUFxckcsV0FBQTdyRyxFQUFBUSxFQUFBNHNHLGFBQUFwdEcsR0FBQVEsRUFBQTRzRyxjQUFBcHRHLEdBQUE0ckcsR0FBQXByRyxLQUFBUixFQUFBUSxFQUFBcXJHLFdBQUE3ckcsRUFBQSxVQUFBUSxLQUFBcXJHLFdBQUE3ckcsR0FBc04sU0FBQXF0RyxHQUFBcnRHLEdBQWUsT0FBQTBzRyxHQUFBLFNBQUFsc0csR0FBc0IsT0FBQUEsS0FBQWtzRyxHQUFBLFNBQUE1akcsRUFBQVIsR0FBaUUsSUFBcEMsSUFBQTFILEVBQUF5SCxFQUFBckksS0FBQThJLEVBQUFqSSxPQUFBTCxHQUFBc0UsRUFBQXVELEVBQUF4SCxPQUFvQ2lFLEtBQUFnRSxFQUFBbEksRUFBQXlILEVBQUF2RCxNQUFBZ0UsRUFBQWxJLEtBQUEwSCxFQUFBMUgsR0FBQWtJLEVBQUFsSSxTQUE2QyxTQUFBMHJHLEdBQUF0c0csR0FBZSxPQUFBQSxRQUFBLElBQUFBLEVBQUE0QyxzQkFBQTVDLEVBQTJsVSxJQUFBUSxLQUFuaVVzSSxFQUFBaWpHLEdBQUEzQyxXQUFlL2dHLEVBQUEwakcsR0FBQXVCLE1BQUEsU0FBQXR0RyxHQUF3QixJQUFBUSxFQUFBUixNQUFBZ3NHLGVBQUFoc0csR0FBQXV0RyxnQkFBOEMsUUFBQS9zRyxHQUFBLFNBQUFBLEVBQUE0ckcsVUFBK0J6cUcsRUFBQW9xRyxHQUFBeUIsWUFBQSxTQUFBeHRHLEdBQThCLElBQUFRLEVBQUFJLEVBQUFrRSxFQUFBOUUsSUFBQWdzRyxlQUFBaHNHLEVBQUFtaUcsRUFBaUMsT0FBQXI5RixJQUFBcUQsR0FBQSxJQUFBckQsRUFBQWlqRyxVQUFBampHLEVBQUF5b0csaUJBQUEvcUcsR0FBQTJGLEVBQUFyRCxHQUFBeW9HLGdCQUFBN1MsR0FBQXJ5RixFQUFBRixHQUFBZzZGLElBQUFoNkYsSUFBQXZILEVBQUF1SCxFQUFBd2hDLGNBQUEvb0MsRUFBQWdpQyxNQUFBaGlDLE1BQUE2c0csaUJBQUE3c0csRUFBQTZzRyxpQkFBQSxTQUFBOUIsSUFBQSxHQUFBL3FHLEVBQUE4c0csYUFBQTlzRyxFQUFBOHNHLFlBQUEsV0FBQS9CLEtBQUE3aUcsRUFBQTZrRyxXQUFBaEIsR0FBQSxTQUFBM3NHLEdBQXNQLE9BQUFBLEVBQUE0dEcsVUFBQSxLQUFBNXRHLEVBQUEwakUsYUFBQSxlQUFvRDU2RCxFQUFBbEcscUJBQUErcEcsR0FBQSxTQUFBM3NHLEdBQXdDLE9BQUFBLEVBQUFpRCxZQUFBa0YsRUFBQTBsRyxjQUFBLE1BQUE3dEcsRUFBQTRDLHFCQUFBLEtBQUEvQixTQUE4RWlJLEVBQUFvakcsdUJBQUFoQixFQUFBMWdHLEtBQUFyQyxFQUFBK2pHLHdCQUFBcGpHLEVBQUFnbEcsUUFBQW5CLEdBQUEsU0FBQTNzRyxHQUFxRixPQUFBd0MsRUFBQVMsWUFBQWpELEdBQUFpQixHQUFBOEQsR0FBQW9ELEVBQUE0bEcsb0JBQUE1bEcsRUFBQTRsRyxrQkFBQWhwRyxHQUFBbEUsU0FBa0ZpSSxFQUFBZ2xHLFNBQUF4bEcsRUFBQXkxQyxPQUFBeXNELEdBQUEsU0FBQXhxRyxHQUFxQyxJQUFBUSxFQUFBUixFQUFBeUssUUFBQTRnRyxFQUFBQyxJQUFzQixnQkFBQXRyRyxHQUFtQixPQUFBQSxFQUFBMGpFLGFBQUEsUUFBQWxqRSxJQUFpQzhILEVBQUEwbEcsS0FBQXhELEdBQUEsU0FBQXhxRyxFQUFBUSxHQUF5QixZQUFBQSxFQUFBeXJHLGdCQUFBdlIsRUFBQSxDQUE0QyxJQUFBNXhGLEVBQUF0SSxFQUFBeXJHLGVBQUFqc0csR0FBMEIsT0FBQThJLGFBQWlCUixFQUFBeTFDLE9BQUF5c0QsR0FBQSxTQUFBeHFHLEdBQTJCLElBQUFRLEVBQUFSLEVBQUF5SyxRQUFBNGdHLEVBQUFDLElBQXNCLGdCQUFBdHJHLEdBQW1CLElBQUE4SSxPQUFBLElBQUE5SSxFQUFBaXVHLGtCQUFBanVHLEVBQUFpdUcsaUJBQUEsTUFBdUUsT0FBQW5sRyxLQUFBaEosUUFBQVUsSUFBdUI4SCxFQUFBMGxHLEtBQUF4RCxHQUFBLFNBQUF4cUcsRUFBQVEsR0FBeUIsWUFBQUEsRUFBQXlyRyxnQkFBQXZSLEVBQUEsQ0FBNEMsSUFBQTV4RixFQUFBUixFQUFBMUgsRUFBQXlILEVBQUE3SCxFQUFBeXJHLGVBQUFqc0csR0FBZ0MsR0FBQXFJLEVBQUEsQ0FBTSxJQUFBUyxFQUFBVCxFQUFBNGxHLGlCQUFBLFFBQUFubEcsRUFBQWhKLFFBQUFFLEVBQUEsT0FBQXFJLEdBQW9GLElBQTdCekgsRUFBQUosRUFBQXV0RyxrQkFBQS90RyxHQUFBc0ksRUFBQSxFQUE2QkQsRUFBQXpILEVBQUEwSCxNQUFBLElBQUFRLEVBQUFULEVBQUE0bEcsaUJBQUEsUUFBQW5sRyxFQUFBaEosUUFBQUUsRUFBQSxPQUFBcUksR0FBc0UsWUFBVUMsRUFBQTBsRyxLQUFBdEQsSUFBQTVoRyxFQUFBbEcscUJBQUEsU0FBQTVDLEVBQUFRLEdBQWtELGdCQUFBQSxFQUFBb0MscUJBQUFwQyxFQUFBb0MscUJBQUE1QyxHQUFBOEksRUFBQXFqRyxJQUFBM3JHLEVBQUErckcsaUJBQUF2c0csUUFBQSxHQUE4RyxTQUFBQSxFQUFBUSxHQUFlLElBQUFzSSxFQUFBUixLQUFBMUgsRUFBQSxFQUFBeUgsRUFBQTdILEVBQUFvQyxxQkFBQTVDLEdBQTJDLFNBQUFBLEVBQUEsQ0FBWSxLQUFBOEksRUFBQVQsRUFBQXpILE1BQUEsSUFBQWtJLEVBQUFpL0YsVUFBQXovRixFQUFBbEosS0FBQTBKLEdBQXlDLE9BQUFSLEVBQVMsT0FBQUQsR0FBU0MsRUFBQTBsRyxLQUFBdkQsTUFBQTNoRyxFQUFBb2pHLHdCQUFBLFNBQUFsc0csRUFBQVEsR0FBc0QsWUFBQUEsRUFBQTByRyx3QkFBQXhSLEVBQUEsT0FBQWw2RixFQUFBMHJHLHVCQUFBbHNHLElBQXNGOHlELEtBQUE5NEMsTUFBQWxSLEVBQUFxakcsSUFBQWpCLEVBQUExZ0csS0FBQXJDLEVBQUFva0cscUJBQUFJLEdBQUEsU0FBQTNzRyxHQUErRHdDLEVBQUFTLFlBQUFqRCxHQUFBK3BDLFVBQUEsVUFBQWhsQyxFQUFBLHFCQUFBQSxFQUFBLGtFQUFBL0UsRUFBQXVzRyxpQkFBQSx3QkFBQTFyRyxRQUFBbVosRUFBQTVhLEtBQUEsU0FBQTR5RixFQUFBLGdCQUFBaHlGLEVBQUF1c0csaUJBQUEsY0FBQTFyRyxRQUFBbVosRUFBQTVhLEtBQUEsTUFBQTR5RixFQUFBLGFBQUE2WCxFQUFBLEtBQUE3cEcsRUFBQXVzRyxpQkFBQSxRQUFBeG5HLEVBQUEsTUFBQWxFLFFBQUFtWixFQUFBNWEsS0FBQSxNQUFBWSxFQUFBdXNHLGlCQUFBLFlBQUExckcsUUFBQW1aLEVBQUE1YSxLQUFBLFlBQUFZLEVBQUF1c0csaUJBQUEsS0FBQXhuRyxFQUFBLE1BQUFsRSxRQUFBbVosRUFBQTVhLEtBQUEsY0FBOGN1dEcsR0FBQSxTQUFBM3NHLEdBQWlCQSxFQUFBK3BDLFVBQUEsb0ZBQWdHLElBQUF2cEMsRUFBQTJILEVBQUFyRixjQUFBLFNBQStCdEMsRUFBQTBpRSxhQUFBLGlCQUFBbGpFLEVBQUFpRCxZQUFBekMsR0FBQTBpRSxhQUFBLFlBQUFsakUsRUFBQXVzRyxpQkFBQSxZQUFBMXJHLFFBQUFtWixFQUFBNWEsS0FBQSxPQUFBNHlGLEVBQUEsbUJBQUFoeUYsRUFBQXVzRyxpQkFBQSxZQUFBMXJHLFFBQUFtWixFQUFBNWEsS0FBQSx3QkFBQW9ELEVBQUFTLFlBQUFqRCxHQUFBNnJHLFVBQUEsTUFBQTdyRyxFQUFBdXNHLGlCQUFBLGFBQUExckcsUUFBQW1aLEVBQUE1YSxLQUFBLHdCQUFBWSxFQUFBdXNHLGlCQUFBLFFBQUF2eUYsRUFBQTVhLEtBQUEsWUFBNFcwSixFQUFBb2xHLGdCQUFBaEQsRUFBQTFnRyxLQUFBdEMsRUFBQTFGLEVBQUEyckcsU0FBQTNyRyxFQUFBNHJHLHVCQUFBNXJHLEVBQUE2ckcsb0JBQUE3ckcsRUFBQThyRyxrQkFBQTlyRyxFQUFBK3JHLHFCQUFBNUIsR0FBQSxTQUFBM3NHLEdBQW1KOEksRUFBQTBsRyxrQkFBQXRtRyxFQUFBckssS0FBQW1DLEVBQUEsS0FBQWtJLEVBQUFySyxLQUFBbUMsRUFBQSxhQUFBOHlELEVBQUExekQsS0FBQSxLQUFBNHFHLEtBQXVFaHdGLElBQUFuWixRQUFBLElBQUFvbUcsT0FBQWp0RixFQUFBelUsS0FBQSxNQUFBdXRELElBQUFqeUQsUUFBQSxJQUFBb21HLE9BQUFuMEMsRUFBQXZ0RCxLQUFBLE1BQUEvRSxFQUFBMHFHLEVBQUExZ0csS0FBQWhJLEVBQUFpc0cseUJBQUExMEYsRUFBQXZaLEdBQUEwcUcsRUFBQTFnRyxLQUFBaEksRUFBQWtzRyxVQUFBLFNBQUExdUcsRUFBQVEsR0FBb0osSUFBQXNJLEVBQUEsSUFBQTlJLEVBQUErbkcsU0FBQS9uRyxFQUFBdXRHLGdCQUFBdnRHLEVBQUFzSSxFQUFBOUgsS0FBQXluRyxXQUEyRCxPQUFBam9HLElBQUFzSSxTQUFBLElBQUFBLEVBQUF5L0YsWUFBQWovRixFQUFBNGxHLFNBQUE1bEcsRUFBQTRsRyxTQUFBcG1HLEdBQUF0SSxFQUFBeXVHLHlCQUFBLEdBQUF6dUcsRUFBQXl1Ryx3QkFBQW5tRyxNQUE0SCxTQUFBdEksRUFBQVEsR0FBZSxHQUFBQSxFQUFBLEtBQUFBLElBQUF5bkcsWUFBQSxHQUFBem5HLElBQUFSLEVBQUEsU0FBNEMsVUFBU3VwRyxFQUFBL29HLEVBQUEsU0FBQVIsRUFBQVEsR0FBbUIsR0FBQVIsSUFBQVEsRUFBQSxPQUFBaTlDLEdBQUEsSUFBdUIsSUFBQW4xQyxHQUFBdEksRUFBQXl1Ryx5QkFBQWp1RyxFQUFBaXVHLHdCQUE0RCxPQUFBbm1HLElBQUEsR0FBQUEsR0FBQXRJLEVBQUFnc0csZUFBQWhzRyxNQUFBUSxFQUFBd3JHLGVBQUF4ckcsR0FBQVIsRUFBQXl1Ryx3QkFBQWp1RyxHQUFBLEtBQUFzSSxFQUFBNmxHLGNBQUFudUcsRUFBQWl1Ryx3QkFBQXp1RyxLQUFBc0ksRUFBQXRJLElBQUFtSSxHQUFBbkksRUFBQWdzRyxnQkFBQTdKLEdBQUFwb0YsRUFBQW9vRixFQUFBbmlHLElBQUEsRUFBQVEsSUFBQTJILEdBQUEzSCxFQUFBd3JHLGdCQUFBN0osR0FBQXBvRixFQUFBb29GLEVBQUEzaEcsR0FBQSxFQUFBK0IsRUFBQXFuRyxFQUFBcm5HLEVBQUF2QyxHQUFBNHBHLEVBQUFybkcsRUFBQS9CLEdBQUEsSUFBQThILEdBQUEsTUFBc1AsU0FBQXRJLEVBQUFRLEdBQWUsR0FBQVIsSUFBQVEsRUFBQSxPQUFBaTlDLEdBQUEsSUFBdUIsSUFBQTMwQyxFQUFBUixFQUFBLEVBQUExSCxFQUFBWixFQUFBaW9HLFdBQUE1L0YsRUFBQTdILEVBQUF5bkcsV0FBQW5qRyxHQUFBOUUsR0FBQWlKLEdBQUF6SSxHQUFvRCxJQUFBSSxJQUFBeUgsRUFBQSxPQUFBckksSUFBQW1JLEdBQUEsRUFBQTNILElBQUEySCxFQUFBLEVBQUF2SCxHQUFBLEVBQUF5SCxFQUFBLEVBQUE5RixFQUFBcW5HLEVBQUFybkcsRUFBQXZDLEdBQUE0cEcsRUFBQXJuRyxFQUFBL0IsR0FBQSxFQUE2RCxHQUFBSSxJQUFBeUgsRUFBQSxPQUFBeWtHLEdBQUE5c0csRUFBQVEsR0FBNEIsSUFBSnNJLEVBQUE5SSxFQUFJOEksSUFBQW0vRixZQUFBbmpHLEVBQUFtdUMsUUFBQW5xQyxHQUFzQyxJQUFKQSxFQUFBdEksRUFBSXNJLElBQUFtL0YsWUFBQWgvRixFQUFBZ3FDLFFBQUFucUMsR0FBa0MsS0FBQWhFLEVBQUF3RCxLQUFBVyxFQUFBWCxRQUFzQixPQUFBQSxFQUFBd2tHLEdBQUFob0csRUFBQXdELEdBQUFXLEVBQUFYLElBQUF4RCxFQUFBd0QsS0FBQTY1RixHQUFBLEVBQUFsNUYsRUFBQVgsS0FBQTY1RixFQUFBLEtBQWdEaDZGLE1BQU00akcsR0FBQW9DLFFBQUEsU0FBQW51RyxFQUFBUSxHQUEwQixPQUFBdXJHLEdBQUEvckcsRUFBQSxVQUFBUSxJQUF5QnVyRyxHQUFBbUMsZ0JBQUEsU0FBQWx1RyxFQUFBUSxHQUFrQyxJQUFBUixFQUFBZ3NHLGVBQUFoc0csS0FBQW1JLEdBQUF4RyxFQUFBM0IsR0FBQVEsSUFBQWlLLFFBQUFvSixFQUFBLFVBQUEvSyxFQUFBb2xHLGlCQUFBeFQsSUFBQXpJLEVBQUF6eEYsRUFBQSxRQUFBc3lELE1BQUF0b0QsS0FBQWhLLE9BQUF3WixNQUFBeFAsS0FBQWhLLElBQUEsSUFBa0ksSUFBQThILEVBQUFKLEVBQUFySyxLQUFBbUMsRUFBQVEsR0FBa0IsR0FBQThILEdBQUFRLEVBQUEwbEcsbUJBQUF4dUcsRUFBQTJDLFVBQUEsS0FBQTNDLEVBQUEyQyxTQUFBb2xHLFNBQUEsT0FBQXovRixFQUF5RSxNQUFBdEksSUFBVSxPQUFBK3JHLEdBQUF2ckcsRUFBQTJILEVBQUEsTUFBQW5JLElBQUFhLE9BQUEsR0FBaUNrckcsR0FBQTJDLFNBQUEsU0FBQTF1RyxFQUFBUSxHQUEyQixPQUFBUixFQUFBZ3NHLGVBQUFoc0csS0FBQW1JLEdBQUF4RyxFQUFBM0IsR0FBQStaLEVBQUEvWixFQUFBUSxJQUE0Q3VyRyxHQUFBbDFGLEtBQUEsU0FBQTdXLEVBQUFRLElBQXVCUixFQUFBZ3NHLGVBQUFoc0csS0FBQW1JLEdBQUF4RyxFQUFBM0IsR0FBK0IsSUFBQVksRUFBQTBILEVBQUF1a0csV0FBQXJzRyxFQUFBKzJELGVBQUFsdkQsRUFBQXpILEdBQUE0b0csRUFBQTNyRyxLQUFBeUssRUFBQXVrRyxXQUFBcnNHLEVBQUErMkQsZUFBQTMyRCxFQUFBWixFQUFBUSxHQUFBazZGLFFBQUEsRUFBK0YsZ0JBQUFyeUYsSUFBQVMsRUFBQTZrRyxhQUFBalQsRUFBQTE2RixFQUFBMGpFLGFBQUFsakUsSUFBQTZILEVBQUFySSxFQUFBaXVHLGlCQUFBenRHLEtBQUE2SCxFQUFBdW1HLFVBQUF2bUcsRUFBQXZJLE1BQUEsTUFBMkdpc0csR0FBQTdpRyxPQUFBLFNBQUFsSixHQUF1QixPQUFBQSxFQUFBLElBQUF5SyxRQUFBZ2hHLEdBQUFDLEtBQTRCSyxHQUFBbGxHLE1BQUEsU0FBQTdHLEdBQXNCLFVBQUFvQixNQUFBLDBDQUFBcEIsSUFBNkQrckcsR0FBQThDLFdBQUEsU0FBQTd1RyxHQUEyQixJQUFBUSxFQUFBOEgsS0FBQTFILEVBQUEsRUFBQXlILEVBQUEsRUFBbUIsR0FBQW8xQyxHQUFBMzBDLEVBQUFnbUcsaUJBQUF2c0csR0FBQXVHLEVBQUFpbUcsWUFBQS91RyxFQUFBK0QsTUFBQSxHQUFBL0QsRUFBQXllLEtBQUE4cUYsR0FBQTlyRCxFQUFBLENBQWtFLEtBQUFqOUMsRUFBQVIsRUFBQXFJLE1BQUE3SCxJQUFBUixFQUFBcUksS0FBQXpILEVBQUEwSCxFQUFBbEosS0FBQWlKLElBQXVDLEtBQUF6SCxLQUFBWixFQUFBMkcsT0FBQTJCLEVBQUExSCxHQUFBLEdBQTJCLE9BQUEyQixFQUFBLEtBQUF2QyxHQUFnQlksRUFBQW1yRyxHQUFBaUQsUUFBQSxTQUFBaHZHLEdBQTBCLElBQUFRLEVBQUFzSSxFQUFBLEdBQUFSLEVBQUEsRUFBQUQsRUFBQXJJLEVBQUErbkcsU0FBNEIsR0FBQTEvRixHQUFNLE9BQUFBLEdBQUEsSUFBQUEsR0FBQSxLQUFBQSxFQUFBLENBQXlCLG9CQUFBckksRUFBQWl2RyxZQUFBLE9BQUFqdkcsRUFBQWl2RyxZQUF1RCxJQUFBanZHLElBQUFrdkcsV0FBbUJsdkcsRUFBRUEsSUFBQWd0RyxZQUFBbGtHLEdBQUFsSSxFQUFBWixRQUF3QixPQUFBcUksR0FBQSxJQUFBQSxFQUFBLE9BQUFySSxFQUFBbXZHLGVBQXdDLEtBQUEzdUcsRUFBQVIsRUFBQXNJLE1BQUFRLEdBQUFsSSxFQUFBSixHQUE0QixPQUFBc0ksSUFBU1IsRUFBQXlqRyxHQUFBcUQsV0FBa0IzQyxZQUFBLEdBQUE0QyxhQUFBM0MsR0FBQW4zQixNQUFBZzFCLEVBQUFzQyxjQUFvRG1CLFFBQVFzQixVQUFXemUsS0FBS3J6RSxJQUFBLGFBQUFpckYsT0FBQSxHQUEwQjhHLEtBQU0veEYsSUFBQSxjQUFpQmd5RixLQUFNaHlGLElBQUEsa0JBQUFpckYsT0FBQSxHQUErQmdILEtBQU1qeUYsSUFBQSxvQkFBdUJreUYsV0FBWS9FLEtBQUEsU0FBQTNxRyxHQUFpQixPQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQXlLLFFBQUE0Z0csRUFBQUMsSUFBQXRyRyxFQUFBLElBQUFBLEVBQUEsSUFBQUEsRUFBQSxJQUFBQSxFQUFBLFFBQUF5SyxRQUFBNGdHLEVBQUFDLElBQUEsT0FBQXRyRyxFQUFBLEtBQUFBLEVBQUEsT0FBQUEsRUFBQSxRQUFBQSxFQUFBK0QsTUFBQSxNQUF1SDhtRyxNQUFBLFNBQUE3cUcsR0FBbUIsT0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUF1M0QsY0FBQSxRQUFBdjNELEVBQUEsR0FBQStELE1BQUEsTUFBQS9ELEVBQUEsSUFBQStyRyxHQUFBbGxHLE1BQUE3RyxFQUFBLElBQUFBLEVBQUEsS0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQUFBLEVBQUEsbUJBQUFBLEVBQUEsWUFBQUEsRUFBQSxLQUFBQSxFQUFBLEtBQUFBLEVBQUEsR0FBQUEsRUFBQSxZQUFBQSxFQUFBLEtBQUFBLEVBQUEsSUFBQStyRyxHQUFBbGxHLE1BQUE3RyxFQUFBLElBQUFBLEdBQWlNNHFHLE9BQUEsU0FBQTVxRyxHQUFvQixJQUFBUSxFQUFBc0ksR0FBQTlJLEVBQUEsSUFBQUEsRUFBQSxHQUFvQixPQUFBdXFHLEVBQUFNLE1BQUFyZ0csS0FBQXhLLEVBQUEsVUFBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFBQUEsRUFBQSxPQUFBOEksR0FBQXVoRyxFQUFBNy9GLEtBQUExQixLQUFBdEksRUFBQXNFLEVBQUFnRSxHQUFBLE1BQUF0SSxFQUFBc0ksRUFBQTNKLFFBQUEsSUFBQTJKLEVBQUFqSSxPQUFBTCxHQUFBc0ksRUFBQWpJLFVBQUFiLEVBQUEsR0FBQUEsRUFBQSxHQUFBK0QsTUFBQSxFQUFBdkQsR0FBQVIsRUFBQSxHQUFBOEksRUFBQS9FLE1BQUEsRUFBQXZELElBQUFSLEVBQUErRCxNQUFBLFFBQW9MZzZDLFFBQVMyc0QsSUFBQSxTQUFBMXFHLEdBQWdCLElBQUFRLEVBQUFSLEVBQUF5SyxRQUFBNGdHLEVBQUFDLElBQUEvekMsY0FBb0MsWUFBQXYzRCxFQUFBLFdBQXlCLFVBQVMsU0FBQUEsR0FBYSxPQUFBQSxFQUFBb3NHLFVBQUFwc0csRUFBQW9zRyxTQUFBNzBDLGdCQUFBLzJELElBQWlEaXFHLE1BQUEsU0FBQXpxRyxHQUFtQixJQUFBUSxFQUFBNm9HLEVBQUFycEcsRUFBQSxLQUFlLE9BQUFRLE1BQUEsSUFBQXltRyxPQUFBLE1BQUFqVixFQUFBLElBQUFoeUYsRUFBQSxJQUFBZ3lGLEVBQUEsU0FBQXFYLEVBQUFycEcsRUFBQSxTQUFBQSxHQUFxRSxPQUFBUSxFQUFBZ0ssS0FBQSxpQkFBQXhLLEVBQUE0dEcsV0FBQTV0RyxFQUFBNHRHLGdCQUFBLElBQUE1dEcsRUFBQTBqRSxjQUFBMWpFLEVBQUEwakUsYUFBQSxpQkFBNEhpbkMsS0FBQSxTQUFBM3FHLEVBQUFRLEVBQUFzSSxHQUFzQixnQkFBQVIsR0FBbUIsSUFBQTFILEVBQUFtckcsR0FBQWwxRixLQUFBdk8sRUFBQXRJLEdBQW1CLGFBQUFZLEVBQUEsT0FBQUosT0FBQUksR0FBQSxTQUFBSixFQUFBSSxJQUFBa0ksRUFBQSxPQUFBdEksRUFBQUksSUFBQWtJLEVBQUEsT0FBQXRJLEVBQUFzSSxHQUFBLElBQUFsSSxFQUFBekIsUUFBQTJKLEdBQUEsT0FBQXRJLEVBQUFzSSxHQUFBbEksRUFBQXpCLFFBQUEySixJQUFBLFNBQUF0SSxFQUFBc0ksR0FBQWxJLEVBQUFtRCxPQUFBK0UsRUFBQWpJLFVBQUFpSSxFQUFBLE9BQUF0SSxHQUFBLElBQUFJLEVBQUE2SixRQUFBdy9GLEVBQUEsVUFBQTlxRyxRQUFBMkosSUFBQSxTQUFBdEksSUFBQUksSUFBQWtJLEdBQUFsSSxFQUFBbUQsTUFBQSxFQUFBK0UsRUFBQWpJLE9BQUEsS0FBQWlJLEVBQUEsUUFBaVEraEcsTUFBQSxTQUFBN3FHLEVBQUFRLEVBQUFzSSxFQUFBUixFQUFBMUgsR0FBMkIsSUFBQXlILEVBQUEsUUFBQXJJLEVBQUErRCxNQUFBLEtBQUFlLEVBQUEsU0FBQTlFLEVBQUErRCxPQUFBLEdBQUFrRixFQUFBLFlBQUF6SSxFQUFrRSxXQUFBOEgsR0FBQSxJQUFBMUgsRUFBQSxTQUFBWixHQUFnQyxRQUFBQSxFQUFBaW9HLFlBQXFCLFNBQUF6bkcsRUFBQXNJLEVBQUFnL0YsR0FBaUIsSUFBQXpnRyxFQUFBOUUsRUFBQWs3QyxFQUFBOTdDLEVBQUF3RyxFQUFBM0YsRUFBQWs0RixFQUFBcnlGLElBQUF2RCxFQUFBLGdDQUFBa1YsRUFBQXhaLEVBQUF5bkcsV0FBQW4xQyxFQUFBN3BELEdBQUF6SSxFQUFBNHJHLFNBQUE3MEMsY0FBQXJ2RCxHQUFBNC9GLElBQUE3K0YsRUFBQThRLEdBQUEsRUFBbUgsR0FBQUMsRUFBQSxDQUFNLEdBQUEzUixFQUFBLENBQU0sS0FBQXF5RixHQUFBLENBQWEsSUFBSi80RixFQUFBbkIsRUFBSW1CLElBQUErNEYsSUFBQSxHQUFBenhGLEVBQUF0SCxFQUFBeXFHLFNBQUE3MEMsZ0JBQUF6RSxFQUFBLElBQUFueEQsRUFBQW9tRyxTQUFBLFNBQXVFdmxHLEVBQUFrNEYsRUFBQSxTQUFBMTZGLElBQUF3QyxHQUFBLGNBQWtDLFNBQVMsR0FBQUEsR0FBQXNDLEVBQUFrVixFQUFBazFGLFdBQUFsMUYsRUFBQTIxRixXQUFBN3FHLEdBQUFvRCxHQUE2SixJQUFySDZSLEdBQUE1UixHQUFBZCxHQUFBOUUsR0FBQWs3QyxHQUFBOTdDLEVBQUFxWSxHQUFBalYsS0FBQXBELEVBQUFvRCxRQUFnQ3BELEVBQUFpdUcsWUFBQW55RCxFQUFBOTdDLEVBQUFpdUcsZUFBaUM1dkcsUUFBQSxLQUFBbW9HLEdBQUE5Z0csRUFBQSxLQUFBQSxFQUFBLEdBQUExRixFQUFBd0csR0FBQTZSLEVBQUE4eEYsV0FBQTNqRyxHQUFvRHhHLElBQUF3RyxHQUFBeEcsS0FBQSs0RixLQUFBM2dGLEVBQUE1UixFQUFBLElBQUEzRixFQUFBMkIsT0FBQSxPQUFBeEMsRUFBQW9tRyxZQUFBaHVGLEdBQUFwWSxJQUFBbkIsRUFBQSxDQUFzRStCLEVBQUF2QyxJQUFBbW9HLEVBQUFoZ0csRUFBQTRSLEdBQWEsWUFBTyxHQUFBN1IsSUFBQTZSLEVBQUE1UixHQUFBZCxHQUFBOUUsR0FBQWs3QyxHQUFBOTdDLEVBQUFuQixHQUFBdUUsS0FBQXBELEVBQUFvRCxRQUEyQ3BELEVBQUFpdUcsWUFBQW55RCxFQUFBOTdDLEVBQUFpdUcsZUFBaUM1dkcsUUFBQSxLQUFBbW9HLEdBQUE5Z0csRUFBQSxTQUFBMFMsRUFBQSxNQUFBcFksSUFBQXdHLEdBQUF4RyxLQUFBKzRGLEtBQUEzZ0YsRUFBQTVSLEVBQUEsSUFBQTNGLEVBQUEyQixVQUFBOEUsRUFBQXRILEVBQUF5cUcsU0FBQTcwQyxnQkFBQXpFLEVBQUEsSUFBQW54RCxFQUFBb21HLGNBQUFodUYsSUFBQTdSLEtBQUEzRixHQUFBazdDLEVBQUE5N0MsRUFBQW9ELEtBQUFwRCxFQUFBb0QsUUFBeUpwRCxFQUFBaXVHLFlBQUFueUQsRUFBQTk3QyxFQUFBaXVHLGVBQWlDNXZHLElBQUFtb0csRUFBQXB1RixJQUFBcFksSUFBQW5CLE1BQTBCLE9BQUF1WixHQUFBblosS0FBQTBILEdBQUF5UixFQUFBelIsR0FBQSxHQUFBeVIsRUFBQXpSLEdBQUEsS0FBbUNzaUcsT0FBQSxTQUFBNXFHLEVBQUFRLEdBQXNCLElBQUFzSSxFQUFBbEksRUFBQTBILEVBQUF1bkcsUUFBQTd2RyxJQUFBc0ksRUFBQXduRyxXQUFBOXZHLEVBQUF1M0QsZ0JBQUF3MEMsR0FBQWxsRyxNQUFBLHVCQUFBN0csR0FBd0YsT0FBQVksRUFBQW1FLEdBQUFuRSxFQUFBSixHQUFBSSxFQUFBQyxPQUFBLEdBQUFpSSxHQUFBOUksSUFBQSxHQUFBUSxHQUFBOEgsRUFBQXduRyxXQUFBbHlHLGVBQUFvQyxFQUFBdTNELGVBQUFtMUMsR0FBQSxTQUFBMXNHLEVBQUE4SSxHQUFrSSxJQUExQixJQUFBUixFQUFBRCxFQUFBekgsRUFBQVosRUFBQVEsR0FBQXNFLEVBQUF1RCxFQUFBeEgsT0FBMEJpRSxLQUFBOUUsRUFBQXNJLEVBQUFzaEcsRUFBQTVwRyxFQUFBcUksRUFBQXZELE9BQUFnRSxFQUFBUixHQUFBRCxFQUFBdkQsTUFBc0MsU0FBQTlFLEdBQWMsT0FBQVksRUFBQVosRUFBQSxFQUFBOEksS0FBZ0JsSSxJQUFLaXZHLFNBQVVFLElBQUFyRCxHQUFBLFNBQUExc0csR0FBbUIsSUFBQVEsS0FBQXNJLEtBQUFSLEVBQUFXLEVBQUFqSixFQUFBeUssUUFBQXkvRixFQUFBLE9BQXFDLE9BQUE1aEcsRUFBQXZELEdBQUEybkcsR0FBQSxTQUFBMXNHLEVBQUFRLEVBQUFzSSxFQUFBbEksR0FBbUUsSUFBbEMsSUFBQXlILEVBQUF2RCxFQUFBd0QsRUFBQXRJLEVBQUEsS0FBQVksTUFBQXFJLEVBQUFqSixFQUFBYSxPQUFrQ29JLE1BQUFaLEVBQUF2RCxFQUFBbUUsTUFBQWpKLEVBQUFpSixLQUFBekksRUFBQXlJLEdBQUFaLE1BQXFDLFNBQUFySSxFQUFBWSxFQUFBeUgsR0FBa0IsT0FBQTdILEVBQUEsR0FBQVIsRUFBQXNJLEVBQUE5SCxFQUFBLEtBQUE2SCxFQUFBUyxHQUFBdEksRUFBQSxTQUFBc0ksRUFBQTNFLFNBQWdEdzVGLElBQUErTyxHQUFBLFNBQUExc0csR0FBcUIsZ0JBQUFRLEdBQW1CLE9BQUF1ckcsR0FBQS9yRyxFQUFBUSxHQUFBSyxPQUFBLEtBQXlCNnRHLFNBQUFoQyxHQUFBLFNBQUExc0csR0FBMEIsT0FBQUEsSUFBQXlLLFFBQUE0Z0csRUFBQUMsSUFBQSxTQUFBOXFHLEdBQXFDLE9BQUFBLEVBQUF5dUcsYUFBQXp1RyxFQUFBd3ZHLFdBQUFwdkcsRUFBQUosSUFBQXJCLFFBQUFhLElBQUEsS0FBd0Q4bkUsS0FBQTRrQyxHQUFBLFNBQUExc0csR0FBc0IsT0FBQXNxRyxFQUFBOS9GLEtBQUF4SyxHQUFBLEtBQUErckcsR0FBQWxsRyxNQUFBLHFCQUFBN0csT0FBQXlLLFFBQUE0Z0csRUFBQUMsSUFBQS96QyxjQUFBLFNBQUEvMkQsR0FBbUcsSUFBQXNJLEVBQU0sR0FBRyxHQUFBQSxFQUFBNHhGLEVBQUFsNkYsRUFBQXNuRSxLQUFBdG5FLEVBQUFrakUsYUFBQSxhQUFBbGpFLEVBQUFrakUsYUFBQSxlQUFBNTZELElBQUF5dUQsaUJBQUF2M0QsR0FBQSxJQUFBOEksRUFBQTNKLFFBQUFhLEVBQUEsWUFBcUhRLElBQUF5bkcsYUFBQSxJQUFBem5HLEVBQUF1bkcsVUFBd0MsWUFBVWxuRSxPQUFBLFNBQUFyZ0MsR0FBcUIsSUFBQXNJLEVBQUE5SSxFQUFBaXdHLFVBQUFqd0csRUFBQWl3RyxTQUFBQyxLQUFrQyxPQUFBcG5HLEtBQUEvRSxNQUFBLEtBQUF2RCxFQUFBUyxJQUE0Qmt2RyxLQUFBLFNBQUFud0csR0FBa0IsT0FBQUEsSUFBQXdDLEdBQWE0dEcsTUFBQSxTQUFBcHdHLEdBQW1CLE9BQUFBLElBQUFtSSxFQUFBa29HLGlCQUFBbG9HLEVBQUFtb0csVUFBQW5vRyxFQUFBbW9HLGdCQUFBdHdHLEVBQUFzRSxNQUFBdEUsRUFBQXV3RyxPQUFBdndHLEVBQUF3d0csV0FBeUZDLFFBQUF0RCxJQUFBLEdBQUF0QixTQUFBc0IsSUFBQSxHQUFBdUQsUUFBQSxTQUFBMXdHLEdBQW9ELElBQUFRLEVBQUFSLEVBQUFvc0csU0FBQTcwQyxjQUErQixnQkFBQS8yRCxLQUFBUixFQUFBMHdHLFNBQUEsV0FBQWx3RyxLQUFBUixFQUFBaU0sVUFBMkRBLFNBQUEsU0FBQWpNLEdBQXNCLE9BQUFBLEVBQUFpb0csWUFBQWpvRyxFQUFBaW9HLFdBQUEwSSxlQUFBLElBQUEzd0csRUFBQWlNLFVBQWdFMmtHLE1BQUEsU0FBQTV3RyxHQUFtQixJQUFBQSxJQUFBa3ZHLFdBQW1CbHZHLEVBQUVBLElBQUFndEcsWUFBQSxHQUFBaHRHLEVBQUErbkcsU0FBQSxXQUF5QyxVQUFTdGpHLE9BQUEsU0FBQXpFLEdBQW9CLE9BQUFzSSxFQUFBdW5HLFFBQUFlLE1BQUE1d0csSUFBMEI2d0csT0FBQSxTQUFBN3dHLEdBQW9CLE9BQUFpckcsRUFBQXpnRyxLQUFBeEssRUFBQW9zRyxXQUEwQjBFLE1BQUEsU0FBQTl3RyxHQUFtQixPQUFBZ3JHLEVBQUF4Z0csS0FBQXhLLEVBQUFvc0csV0FBMEIyRSxPQUFBLFNBQUEvd0csR0FBb0IsSUFBQVEsRUFBQVIsRUFBQW9zRyxTQUFBNzBDLGNBQStCLGdCQUFBLzJELEdBQUEsV0FBQVIsRUFBQXNFLE1BQUEsV0FBQTlELEdBQW1ENlcsS0FBQSxTQUFBclgsR0FBa0IsSUFBQVEsRUFBTSxnQkFBQVIsRUFBQW9zRyxTQUFBNzBDLGVBQUEsU0FBQXYzRCxFQUFBc0UsT0FBQSxPQUFBOUQsRUFBQVIsRUFBQTBqRSxhQUFBLG1CQUFBbGpFLEVBQUErMkQsZ0JBQXdIa3hDLE1BQUE0RSxHQUFBLFdBQXFCLFlBQVV4NkQsS0FBQXc2RCxHQUFBLFNBQUFydEcsRUFBQVEsR0FBd0IsT0FBQUEsRUFBQSxLQUFZa29HLEdBQUEyRSxHQUFBLFNBQUFydEcsRUFBQVEsRUFBQXNJLEdBQXdCLE9BQUFBLEVBQUEsRUFBQUEsRUFBQXRJLEVBQUFzSSxLQUFrQmtvRyxLQUFBM0QsR0FBQSxTQUFBcnRHLEVBQUFRLEdBQXdCLFFBQUFzSSxFQUFBLEVBQVlBLEVBQUF0SSxFQUFJc0ksR0FBQSxFQUFBOUksRUFBQVosS0FBQTBKLEdBQWUsT0FBQTlJLElBQVNpeEcsSUFBQTVELEdBQUEsU0FBQXJ0RyxFQUFBUSxHQUF1QixRQUFBc0ksRUFBQSxFQUFZQSxFQUFBdEksRUFBSXNJLEdBQUEsRUFBQTlJLEVBQUFaLEtBQUEwSixHQUFlLE9BQUE5SSxJQUFTa3hHLEdBQUE3RCxHQUFBLFNBQUFydEcsRUFBQVEsRUFBQXNJLEdBQXdCLFFBQUFSLEVBQUFRLEVBQUEsRUFBQUEsRUFBQXRJLEVBQUFzSSxJQUFvQlIsR0FBQSxHQUFPdEksRUFBQVosS0FBQWtKLEdBQVcsT0FBQXRJLElBQVNteEcsR0FBQTlELEdBQUEsU0FBQXJ0RyxFQUFBUSxFQUFBc0ksR0FBd0IsUUFBQVIsRUFBQVEsRUFBQSxFQUFBQSxFQUFBdEksRUFBQXNJLElBQW9CUixFQUFBOUgsR0FBTVIsRUFBQVosS0FBQWtKLEdBQVcsT0FBQXRJLE9BQVk2dkcsUUFBQXVCLElBQUE5b0csRUFBQXVuRyxRQUFBbkgsSUFBb0MySSxPQUFBLEVBQUFDLFVBQUEsRUFBQUMsTUFBQSxFQUFBQyxVQUFBLEVBQUFqMEMsT0FBQSxHQUFrRGoxRCxFQUFBdW5HLFFBQUFydkcsR0FBQXlzRyxHQUFBenNHLEdBQW9CLElBQUFBLEtBQVNpeEcsUUFBQSxFQUFBbmxDLE9BQUEsR0FBbUJoa0UsRUFBQXVuRyxRQUFBcnZHLEdBQUEwc0csR0FBQTFzRyxHQUFvQixTQUFBa3hHLE1BQXFoQixTQUFBckYsR0FBQXJzRyxHQUFlLFFBQUFRLEVBQUEsRUFBQXNJLEVBQUE5SSxFQUFBYSxPQUFBeUgsRUFBQSxHQUE0QjlILEVBQUFzSSxFQUFJdEksSUFBQThILEdBQUF0SSxFQUFBUSxHQUFBVixNQUFrQixPQUFBd0ksRUFBUyxTQUFBM0osR0FBQXFCLEVBQUFRLEVBQUFzSSxHQUFtQixJQUFBUixFQUFBOUgsRUFBQWdkLElBQUE1YyxFQUFBSixFQUFBdXBCLEtBQUExaEIsRUFBQXpILEdBQUEwSCxFQUFBeEQsRUFBQWdFLEdBQUEsZUFBQVQsRUFBQVksRUFBQW0vRixJQUF3RCxPQUFBNW5HLEVBQUFpb0csTUFBQSxTQUFBam9HLEVBQUFzSSxFQUFBbEksR0FBK0IsS0FBQUosSUFBQThILElBQUEsT0FBQTlILEVBQUF1bkcsVUFBQWpqRyxFQUFBLE9BQUE5RSxFQUFBUSxFQUFBc0ksRUFBQWxJLEdBQWtELFVBQVMsU0FBQUosRUFBQXNJLEVBQUFnL0YsR0FBaUIsSUFBQXpnRyxFQUFBOUUsRUFBQWs3QyxFQUFBOTdDLEdBQUF3bUcsRUFBQWwvRixHQUFrQixHQUFBNitGLEdBQU0sS0FBQXRuRyxJQUFBOEgsSUFBQSxRQUFBOUgsRUFBQXVuRyxVQUFBampHLElBQUE5RSxFQUFBUSxFQUFBc0ksRUFBQWcvRixHQUFBLGNBQXVELEtBQUF0bkcsSUFBQThILElBQUEsT0FBQTlILEVBQUF1bkcsVUFBQWpqRyxFQUFBLEdBQTBEdkMsR0FBMURrN0MsRUFBQWo5QyxFQUFBdUUsS0FBQXZFLEVBQUF1RSxRQUEwRHZFLEVBQUFvdkcsWUFBQW55RCxFQUFBajlDLEVBQUFvdkcsY0FBb0NodkcsT0FBQUosRUFBQTRyRyxTQUFBNzBDLGNBQUEvMkQsSUFBQThILElBQUE5SCxNQUE0QyxDQUFLLElBQUE2RyxFQUFBOUUsRUFBQThGLEtBQUFoQixFQUFBLEtBQUE4Z0csR0FBQTlnRyxFQUFBLEtBQUE0QixFQUFBLE9BQUF0SCxFQUFBLEdBQUEwRixFQUFBLEdBQWlELEdBQUE5RSxFQUFBOEYsR0FBQTFHLElBQUEsR0FBQTNCLEVBQUFRLEVBQUFzSSxFQUFBZy9GLEdBQUEsU0FBaUMsVUFBVSxTQUFBNkosR0FBQTN4RyxHQUFlLE9BQUFBLEVBQUFhLE9BQUEsV0FBQUwsRUFBQXNJLEVBQUFSLEdBQWlELElBQWYsSUFBQTFILEVBQUFaLEVBQUFhLE9BQWVELEtBQUEsSUFBQVosRUFBQVksR0FBQUosRUFBQXNJLEVBQUFSLEdBQUEsU0FBbUMsVUFBU3RJLEVBQUEsR0FBOEUsU0FBQTR4RyxHQUFBNXhHLEVBQUFRLEVBQUFzSSxFQUFBUixFQUFBMUgsR0FBdUIsUUFBQXlILEVBQUF2RCxLQUFBbUUsRUFBQSxFQUFBNitGLEVBQUE5bkcsRUFBQWEsT0FBQXdHLEVBQUEsTUFBQTdHLEVBQXdDeUksRUFBQTYrRixFQUFJNytGLEtBQUFaLEVBQUFySSxFQUFBaUosTUFBQUgsTUFBQVQsRUFBQUMsRUFBQTFILEtBQUFrRSxFQUFBMUYsS0FBQWlKLEdBQUFoQixHQUFBN0csRUFBQXBCLEtBQUE2SixLQUF1RCxPQUFBbkUsRUFBUyxTQUFBK3NHLEdBQUE3eEcsRUFBQVEsRUFBQXNJLEVBQUFSLEVBQUExSCxFQUFBeUgsR0FBeUIsT0FBQUMsTUFBQXZELEtBQUF1RCxFQUFBdXBHLEdBQUF2cEcsSUFBQTFILE1BQUFtRSxLQUFBbkUsRUFBQWl4RyxHQUFBanhHLEVBQUF5SCxJQUFBcWtHLEdBQUEsU0FBQXJrRyxFQUFBdkQsRUFBQW1FLEVBQUE2K0YsR0FBc0UsSUFBQXpnRyxFQUFBOUUsRUFBQWs3QyxFQUFBOTdDLEtBQUF3RyxLQUFBM0YsRUFBQXNDLEVBQUFqRSxPQUFBNjVGLEVBQUFyeUYsR0FBMVMsU0FBQXJJLEVBQUFRLEVBQUFzSSxHQUFtQixRQUFBUixFQUFBLEVBQUExSCxFQUFBSixFQUFBSyxPQUF1QnlILEVBQUExSCxFQUFJMEgsSUFBQXlqRyxHQUFBL3JHLEVBQUFRLEVBQUE4SCxHQUFBUSxHQUFpQixPQUFBQSxFQUEyT2dwRyxDQUFBdHhHLEdBQUEsSUFBQXlJLEVBQUE4K0YsVUFBQTkrRixTQUFBK1EsR0FBQWhhLElBQUFxSSxHQUFBN0gsRUFBQWs2RixFQUFBa1gsR0FBQWxYLEVBQUEvNEYsRUFBQTNCLEVBQUFpSixFQUFBNitGLEdBQUFoMUMsRUFBQWhxRCxFQUFBbEksSUFBQXlILEVBQUFySSxFQUFBd0MsR0FBQThGLE1BQUF4RCxFQUFBa1YsRUFBd0gsR0FBQWxSLEtBQUFrUixFQUFBODRDLEVBQUE3cEQsRUFBQTYrRixHQUFBeC9GLEVBQXFELElBQWpDakIsRUFBQXVxRyxHQUFBOStDLEVBQUEzcUQsR0FBQUcsRUFBQWpCLEtBQUE0QixFQUFBNitGLEdBQUF2bEcsRUFBQThFLEVBQUF4RyxPQUFpQzBCLE1BQUFrN0MsRUFBQXAyQyxFQUFBOUUsTUFBQXV3RCxFQUFBM3FELEVBQUE1RixNQUFBeVgsRUFBQTdSLEVBQUE1RixJQUFBazdDLElBQTJDLEdBQUFwMUMsR0FBTSxHQUFBekgsR0FBQVosRUFBQSxDQUFTLEdBQUFZLEVBQUEsQ0FBc0IsSUFBaEJ5RyxLQUFBOUUsRUFBQXV3RCxFQUFBanlELE9BQWdCMEIsTUFBQWs3QyxFQUFBcVYsRUFBQXZ3RCxLQUFBOEUsRUFBQWpJLEtBQUE0YSxFQUFBelgsR0FBQWs3QyxHQUFtQzc4QyxFQUFBLEtBQUFreUQsS0FBQXpyRCxFQUFBeWdHLEdBQTRCLElBQVh2bEcsRUFBQXV3RCxFQUFBanlELE9BQVcwQixNQUFBazdDLEVBQUFxVixFQUFBdndELE1BQUE4RSxFQUFBekcsRUFBQWdwRyxFQUFBdmhHLEVBQUFvMUMsR0FBQTk3QyxFQUFBWSxLQUFBLElBQUE4RixFQUFBaEIsS0FBQXZDLEVBQUF1QyxHQUFBbzJDLFVBQTREcVYsRUFBQTgrQyxHQUFBOStDLElBQUFodUQsRUFBQWd1RCxFQUFBbnNELE9BQUFuRSxFQUFBc3dELEVBQUFqeUQsUUFBQWl5RCxHQUFBbHlELElBQUEsS0FBQWtFLEVBQUFndUQsRUFBQWcxQyxHQUFBNEIsRUFBQXZvRyxNQUFBMkQsRUFBQWd1RCxLQUF1RSxTQUFBaS9DLEdBQUEveEcsR0FBZSxRQUFBUSxFQUFBc0ksRUFBQWxJLEVBQUF5SCxFQUFBckksRUFBQWEsT0FBQWlFLEVBQUF3RCxFQUFBZ25HLFNBQUF0dkcsRUFBQSxHQUFBc0UsTUFBQTJFLEVBQUFuRSxHQUFBd0QsRUFBQWduRyxTQUFBLEtBQUF4SCxFQUFBaGpHLEVBQUEsSUFBQXZDLEVBQUE1RCxHQUFBLFNBQUFxQixHQUErRixPQUFBQSxJQUFBUSxHQUFheUksR0FBQSxHQUFBdzBDLEVBQUE5K0MsR0FBQSxTQUFBcUIsR0FBd0IsT0FBQTRwRyxFQUFBcHBHLEVBQUFSLElBQUEsR0FBaUJpSixHQUFBLEdBQUF0SCxHQUFBLFNBQUEzQixFQUFBOEksRUFBQVIsR0FBMEIsSUFBQTFILEdBQUFrRSxJQUFBd0QsR0FBQVEsSUFBQXpCLE1BQUE3RyxFQUFBc0ksR0FBQWkvRixTQUFBeGxHLEVBQUF2QyxFQUFBOEksRUFBQVIsR0FBQW0xQyxFQUFBejlDLEVBQUE4SSxFQUFBUixJQUF5RCxPQUFBOUgsRUFBQSxLQUFBSSxJQUFrQmtuRyxFQUFBei9GLEVBQUl5L0YsSUFBQSxHQUFBaC9GLEVBQUFSLEVBQUFnbkcsU0FBQXR2RyxFQUFBOG5HLEdBQUF4akcsTUFBQTNDLEdBQUFoRCxHQUFBZ3pHLEdBQUFod0csR0FBQW1ILFFBQStDLENBQUssSUFBQUEsRUFBQVIsRUFBQXkxQyxPQUFBLzlDLEVBQUE4bkcsR0FBQXhqRyxNQUFBbkQsTUFBQSxLQUFBbkIsRUFBQThuRyxHQUFBcUcsVUFBQXBwRyxHQUFBLENBQXdELElBQUFuRSxJQUFBa25HLEVBQVVsbkcsRUFBQXlILElBQUlDLEVBQUFnbkcsU0FBQXR2RyxFQUFBWSxHQUFBMEQsTUFBQTFELEtBQW1DLE9BQUFpeEcsR0FBQS9KLEVBQUEsR0FBQTZKLEdBQUFod0csR0FBQW1tRyxFQUFBLEdBQUF1RSxHQUFBcnNHLEVBQUErRCxNQUFBLEVBQUErakcsRUFBQSxHQUFBbmpHLFFBQW9EN0UsTUFBQSxNQUFBRSxFQUFBOG5HLEVBQUEsR0FBQXhqRyxLQUFBLFVBQStCbUcsUUFBQXkvRixFQUFBLE1BQUFwaEcsRUFBQWcvRixFQUFBbG5HLEdBQUFteEcsR0FBQS94RyxFQUFBK0QsTUFBQStqRyxFQUFBbG5HLE1BQUF5SCxHQUFBMHBHLEdBQUEveEcsSUFBQStELE1BQUFuRCxNQUFBeUgsR0FBQWdrRyxHQUFBcnNHLElBQTZFMkIsRUFBQXZDLEtBQUEwSixHQUFVLE9BQUE2b0csR0FBQWh3RyxHQUFhLFNBQUFxd0csR0FBQWh5RyxFQUFBUSxHQUFpQixJQUFBc0ksRUFBQXRJLEVBQUFLLE9BQUEsRUFBQUQsRUFBQVosRUFBQWEsT0FBQSxFQUFBd0gsRUFBQSxTQUFBQSxFQUFBdkQsRUFBQW1FLEVBQUE2K0YsRUFBQXZsRyxHQUFvRCxJQUFBazdDLEVBQUFqN0MsRUFBQXdYLEVBQUE4NEMsRUFBQSxFQUFBNXFELEVBQUEsSUFBQTZSLEVBQUExUixNQUFBdEQsS0FBQW85RixFQUFBOTZGLEVBQUErZ0csRUFBQS8vRixHQUFBekgsR0FBQTBILEVBQUEwbEcsS0FBQXRELElBQUEsSUFBQW5vRyxHQUFBOG1HLEVBQUFsQixHQUFBLE1BQUFoRyxFQUFBLEVBQUE5ckYsS0FBQWc0QixVQUFBLEdBQUFtTyxFQUFBNHJELEVBQUF2bkcsT0FBMkcsSUFBQTBCLElBQUE4RSxFQUFBdkMsSUFBQXFELEdBQUFyRCxHQUFBdkMsR0FBdUIyRixJQUFBczBDLEdBQUEsT0FBQWlCLEVBQUEycUQsRUFBQWxnRyxJQUFzQkEsSUFBQSxDQUFLLEdBQUF0SCxHQUFBNjhDLEVBQUEsQ0FBaUQsSUFBeENqN0MsRUFBQSxFQUFBc0MsR0FBQTI0QyxFQUFBdXVELGdCQUFBN2pHLElBQUF4RyxFQUFBODdDLEdBQUF4MEMsR0FBQXl4RixHQUF3QzFnRixFQUFBaGEsRUFBQXdDLE1BQUEsR0FBQXdYLEVBQUF5akMsRUFBQTM0QyxHQUFBcUQsRUFBQWMsR0FBQSxDQUErQjYrRixFQUFBMW9HLEtBQUFxK0MsR0FBVSxNQUFNbDdDLElBQUE0bEcsRUFBQWtCLEdBQVN2Z0csS0FBQTIwQyxHQUFBempDLEdBQUF5akMsSUFBQXFWLElBQUF6cUQsR0FBQTBSLEVBQUEzYSxLQUFBcStDLElBQWlDLEdBQUFxVixHQUFBNXFELEVBQUFZLEdBQUFaLElBQUE0cUQsRUFBQSxDQUFzQixJQUFKdHdELEVBQUEsRUFBSXdYLEVBQUF4WixFQUFBZ0MsTUFBQXdYLEVBQUFELEVBQUFoVixFQUFBRCxFQUFBbUUsR0FBMEIsR0FBQVosRUFBQSxDQUFNLEdBQUF5cUQsRUFBQSxPQUFBNXFELEtBQUE2UixFQUFBN1IsSUFBQW5ELEVBQUFtRCxLQUFBbkQsRUFBQW1ELEdBQUF6RSxFQUFBNUYsS0FBQWlxRyxJQUE4Qy9pRyxFQUFBNnNHLEdBQUE3c0csR0FBUTJrRyxFQUFBdm9HLE1BQUEybUcsRUFBQS9pRyxHQUFBeEMsSUFBQThGLEdBQUF0RCxFQUFBbEUsT0FBQSxHQUFBaXlELEVBQUF0eUQsRUFBQUssT0FBQSxHQUFBa3JHLEdBQUE4QyxXQUFBL0csR0FBK0QsT0FBQXZsRyxJQUFBNGxHLEVBQUFrQixFQUFBaGlHLEVBQUE4NkYsR0FBQXBvRixHQUF1QixPQUFBalIsRUFBQTRqRyxHQUFBcmtHLEtBQWlCLE9BQTNqR3FwRyxHQUFBL3pHLFVBQUEySyxFQUFBMnBHLFFBQUEzcEcsRUFBQXVuRyxRQUFBdm5HLEVBQUF3bkcsV0FBQSxJQUFBNEIsR0FBQTVzRyxFQUFBaW5HLEdBQUFtRyxTQUFBLFNBQUFseUcsRUFBQVEsR0FBaUYsSUFBQXNJLEVBQUFsSSxFQUFBeUgsRUFBQXZELEVBQUFtRSxFQUFBNitGLEVBQUF6Z0csRUFBQTlFLEVBQUFpNkMsRUFBQXg4QyxFQUFBLEtBQTZCLEdBQUF1QyxFQUFBLE9BQUEvQixFQUFBLEVBQUErQixFQUFBd0IsTUFBQSxHQUFrRCxJQUF2QmtGLEVBQUFqSixFQUFBOG5HLEtBQUF6Z0csRUFBQWlCLEVBQUFvbkcsVUFBdUJ6bUcsR0FBQSxDQUEySyxJQUFBbkUsS0FBbEtnRSxLQUFBbEksRUFBQXVwRyxFQUFBakosS0FBQWo0RixNQUFBckksSUFBQXFJLElBQUFsRixNQUFBbkQsRUFBQSxHQUFBQyxTQUFBb0ksR0FBQTYrRixFQUFBMW9HLEtBQUFpSixPQUFBUyxHQUFBLEdBQUFsSSxFQUFBd3BHLEVBQUFsSixLQUFBajRGLE1BQUFILEVBQUFsSSxFQUFBa3lDLFFBQUF6cUMsRUFBQWpKLE1BQTBHVSxNQUFBZ0osRUFBQXhFLEtBQUExRCxFQUFBLEdBQUE2SixRQUFBeS9GLEVBQUEsT0FBaUNqaEcsSUFBQWxGLE1BQUErRSxFQUFBakksU0FBdUJ5SCxFQUFBeTFDLFNBQUFuOUMsRUFBQTJwRyxFQUFBemxHLEdBQUFvOEYsS0FBQWo0RixLQUFBNUIsRUFBQXZDLE1BQUFsRSxFQUFBeUcsRUFBQXZDLEdBQUFsRSxNQUFBa0ksRUFBQWxJLEVBQUFreUMsUUFBQXpxQyxFQUFBakosTUFBOEVVLE1BQUFnSixFQUFBeEUsS0FBQVEsRUFBQXFwRyxRQUFBdnRHLElBQXlCcUksSUFBQWxGLE1BQUErRSxFQUFBakksU0FBdUIsSUFBQWlJLEVBQUEsTUFBWSxPQUFBdEksRUFBQXlJLEVBQUFwSSxPQUFBb0ksRUFBQThpRyxHQUFBbGxHLE1BQUE3RyxHQUFBdzhDLEVBQUF4OEMsRUFBQThuRyxHQUFBL2pHLE1BQUEsSUFBc21Ga0YsRUFBQThpRyxHQUFBb0csUUFBQSxTQUFBbnlHLEVBQUFRLEdBQWtDLElBQUFzSSxFQUFBUixLQUFBMUgsS0FBQXlILEVBQUE0cEYsRUFBQWp5RixFQUFBLEtBQTJCLElBQUFxSSxFQUFBLENBQThCLElBQXZCN0gsTUFBQXNFLEVBQUE5RSxJQUFBOEksRUFBQXRJLEVBQUFLLE9BQXVCaUksTUFBQVQsRUFBQTBwRyxHQUFBdnhHLEVBQUFzSSxLQUFBL0QsR0FBQXVELEVBQUFsSixLQUFBaUosR0FBQXpILEVBQUF4QixLQUFBaUosSUFBOENBLEVBQUE0cEYsRUFBQWp5RixFQUFBZ3lHLEdBQUFweEcsRUFBQTBILEtBQUE4cEcsU0FBQXB5RyxFQUE0QixPQUFBcUksR0FBU3kvRixFQUFBaUUsR0FBQWhyRSxPQUFBLFNBQUEvZ0MsRUFBQVEsRUFBQXNJLEVBQUFsSSxHQUErQixJQUFBeUgsRUFBQXkvRixFQUFBemdHLEVBQUE5RSxFQUFBazdDLEVBQUE5N0MsRUFBQSxtQkFBQTNCLEtBQUFtSSxHQUFBdkgsR0FBQWtFLEVBQUE5RSxFQUFBMkIsRUFBQXl3RyxVQUFBcHlHLEdBQWlFLEdBQUE4SSxRQUFBLElBQUFYLEVBQUF0SCxPQUFBLENBQXlCLElBQUFpbkcsRUFBQTMvRixFQUFBLEdBQUFBLEVBQUEsR0FBQXBFLE1BQUEsSUFBQWxELE9BQUEsV0FBQXdHLEVBQUF5Z0csRUFBQSxJQUFBeGpHLE1BQUEsSUFBQTlELEVBQUF1bkcsVUFBQXJOLEdBQUFweUYsRUFBQWduRyxTQUFBeEgsRUFBQSxHQUFBeGpHLE1BQUEsQ0FBb0csS0FBQTlELEdBQUE4SCxFQUFBMGxHLEtBQUF4RCxHQUFBbmpHLEVBQUE4bUcsUUFBQSxHQUFBMWpHLFFBQUE0Z0csRUFBQUMsSUFBQTlxRyxRQUFBLFdBQUFzSSxFQUFrRW5ILElBQUFuQixJQUFBeW5HLFlBQUFqb0csSUFBQStELE1BQUErakcsRUFBQWgxRCxRQUFBaHpDLE1BQUFlLFFBQTBGLElBQXBDd0gsRUFBQWtpRyxFQUFBUSxhQUFBdmdHLEtBQUF4SyxHQUFBLEVBQUE4bkcsRUFBQWpuRyxPQUFvQ3dILE1BQVdoQixFQUFBeWdHLEVBQUF6L0YsSUFBQUMsRUFBQWduRyxTQUFBL3NHLEVBQUE4RSxFQUFBL0MsUUFBcUMsSUFBQW01QyxFQUFBbjFDLEVBQUEwbEcsS0FBQXpyRyxNQUFBM0IsRUFBQTY4QyxFQUFBcDJDLEVBQUE4bUcsUUFBQSxHQUFBMWpHLFFBQUE0Z0csRUFBQUMsSUFBQUYsRUFBQTVnRyxLQUFBczlGLEVBQUEsR0FBQXhqRyxPQUFBZ29HLEdBQUE5ckcsRUFBQXluRyxhQUFBem5HLElBQUEsQ0FBNEYsR0FBQXNuRyxFQUFBbmhHLE9BQUEwQixFQUFBLEtBQUFySSxFQUFBWSxFQUFBQyxRQUFBd3JHLEdBQUF2RSxJQUFBLE9BQUE0QixFQUFBdm9HLE1BQUEySCxFQUFBbEksR0FBQWtJLEVBQTRELE9BQVEsT0FBQW5ILEdBQUFzSCxFQUFBakosRUFBQW1JLElBQUF2SCxFQUFBSixHQUFBazZGLEVBQUE1eEYsR0FBQXRJLEdBQUE0cUcsRUFBQTVnRyxLQUFBeEssSUFBQXNzRyxHQUFBOXJHLEVBQUF5bkcsYUFBQXpuRyxHQUFBc0ksR0FBaUVBLEVBQUFpbUcsV0FBQWhxRyxFQUFBaTdELE1BQUEsSUFBQXZoRCxLQUFBOHFGLEdBQUFoa0csS0FBQSxNQUFBUixFQUFBK0QsRUFBQWdtRyxtQkFBQXJ4RCxFQUFBOTdDLElBQUFtSCxFQUFBNmxHLGFBQUFoQyxHQUFBLFNBQUEzc0csR0FBd0csU0FBQUEsRUFBQXl1Ryx3QkFBQXRtRyxFQUFBckYsY0FBQSxlQUFnRTZwRyxHQUFBLFNBQUEzc0csR0FBaUIsT0FBQUEsRUFBQStwQyxVQUFBLHlCQUFBL3BDLEVBQUFrdkcsV0FBQXhyQyxhQUFBLFdBQThFa3BDLEdBQUEsa0NBQUE1c0csRUFBQVEsRUFBQXNJLEdBQStDLElBQUFBLEVBQUEsT0FBQTlJLEVBQUEwakUsYUFBQWxqRSxFQUFBLFNBQUFBLEVBQUErMkQsY0FBQSxPQUE0RHp1RCxFQUFBNmtHLFlBQUFoQixHQUFBLFNBQUEzc0csR0FBK0IsT0FBQUEsRUFBQStwQyxVQUFBLFdBQUEvcEMsRUFBQWt2RyxXQUFBaHNDLGFBQUEsaUJBQUFsakUsRUFBQWt2RyxXQUFBeHJDLGFBQUEsWUFBNEdrcEMsR0FBQSxpQkFBQTVzRyxFQUFBUSxFQUFBc0ksR0FBOEIsSUFBQUEsR0FBQSxVQUFBOUksRUFBQW9zRyxTQUFBNzBDLGNBQUEsT0FBQXYzRCxFQUFBcXlHLGVBQWdFMUYsR0FBQSxTQUFBM3NHLEdBQWlCLGFBQUFBLEVBQUEwakUsYUFBQSxlQUF3Q2twQyxHQUFBL0MsRUFBQSxTQUFBN3BHLEVBQUFRLEVBQUFzSSxHQUF3QixJQUFBUixFQUFNLElBQUFRLEVBQUEsV0FBQTlJLEVBQUFRLEtBQUErMkQsZUFBQWp2RCxFQUFBdEksRUFBQWl1RyxpQkFBQXp0RyxLQUFBOEgsRUFBQXNtRyxVQUFBdG1HLEVBQUF4SSxNQUFBLE9BQTBGaXNHLEdBQXptbUIsQ0FBOG1tQi9yRyxHQUFJbWlHLEVBQUE2TCxLQUFBM0UsRUFBQWxILEVBQUFtUSxLQUFBakosRUFBQStGLFVBQUFqTixFQUFBbVEsS0FBQSxLQUFBblEsRUFBQW1RLEtBQUF6QyxRQUFBMU4sRUFBQTBNLFdBQUExTSxFQUFBb1EsT0FBQWxKLEVBQUF3RixXQUFBMU0sRUFBQTlxRixLQUFBZ3lGLEVBQUEyRixRQUFBN00sRUFBQXFRLFNBQUFuSixFQUFBaUUsTUFBQW5MLEVBQUF1TSxTQUFBckYsRUFBQXFGLFNBQUF2TSxFQUFBc1EsZUFBQXBKLEVBQUFuZ0csT0FBOEssSUFBQXN6QyxFQUFBLFNBQUF4OEMsRUFBQVEsRUFBQXNJLEdBQTRDLElBQXRCLElBQUFSLEtBQUExSCxPQUFBLElBQUFrSSxHQUFzQjlJLElBQUFRLEtBQUEsSUFBQVIsRUFBQStuRyxVQUFBLE9BQUEvbkcsRUFBQStuRyxTQUFBLENBQWtELEdBQUFubkcsR0FBQXVoRyxFQUFBbmlHLEdBQUEweUcsR0FBQTVwRyxHQUFBLE1BQXVCUixFQUFBbEosS0FBQVksR0FBVSxPQUFBc0ksR0FBUzJwRixFQUFBLFNBQUFqeUYsRUFBQVEsR0FBaUIsUUFBQXNJLEtBQWE5SSxFQUFFQSxJQUFBZ3RHLFlBQUEsSUFBQWh0RyxFQUFBK25HLFVBQUEvbkcsSUFBQVEsR0FBQXNJLEVBQUExSixLQUFBWSxHQUFpRCxPQUFBOEksR0FBU3lnRyxFQUFBcEgsRUFBQW1RLEtBQUEvOEIsTUFBQXcxQixhQUE2QixTQUFBdkIsRUFBQXhwRyxFQUFBUSxHQUFnQixPQUFBUixFQUFBb3NHLFVBQUFwc0csRUFBQW9zRyxTQUFBNzBDLGdCQUFBLzJELEVBQUErMkQsY0FBOEQsSUFBQWt5QyxFQUFBLGtFQUF3RSxTQUFBaG1HLEVBQUF6RCxFQUFBUSxFQUFBc0ksR0FBa0IsT0FBQTR4RixFQUFBbDZGLEdBQUEyaEcsRUFBQStHLEtBQUFscEcsRUFBQSxTQUFBQSxFQUFBc0ksR0FBbUMsUUFBQTlILEVBQUEzQyxLQUFBbUMsRUFBQXNJLEVBQUF0SSxLQUFBOEksSUFBMEJ0SSxFQUFBdW5HLFNBQUE1RixFQUFBK0csS0FBQWxwRyxFQUFBLFNBQUFBLEdBQWtDLE9BQUFBLElBQUFRLElBQUFzSSxJQUFpQixpQkFBQXRJLEVBQUEyaEcsRUFBQStHLEtBQUFscEcsRUFBQSxTQUFBQSxHQUEwQyxPQUFBOG5HLEVBQUFqcUcsS0FBQTJDLEVBQUFSLElBQUEsSUFBQThJLElBQTBCcTVGLEVBQUFwa0QsT0FBQXY5QyxFQUFBUixFQUFBOEksR0FBa0JxNUYsRUFBQXBrRCxPQUFBLFNBQUEvOUMsRUFBQVEsRUFBQXNJLEdBQXlCLElBQUFSLEVBQUE5SCxFQUFBLEdBQVcsT0FBQXNJLElBQUE5SSxFQUFBLFFBQUFBLEVBQUEsU0FBQVEsRUFBQUssUUFBQSxJQUFBeUgsRUFBQXkvRixTQUFBNUYsRUFBQTZMLEtBQUFFLGdCQUFBNWxHLEVBQUF0SSxJQUFBc0ksTUFBQTY1RixFQUFBNkwsS0FBQUcsUUFBQW51RyxFQUFBbWlHLEVBQUErRyxLQUFBMW9HLEVBQUEsU0FBQVIsR0FBa0ksV0FBQUEsRUFBQStuRyxhQUF5QjVGLEVBQUFyakcsR0FBQWlSLFFBQWNpK0YsS0FBQSxTQUFBaHVHLEdBQWlCLElBQUFRLEVBQUFzSSxFQUFBUixFQUFBZ0IsS0FBQXpJLE9BQUFELEVBQUEwSSxLQUE2QixvQkFBQXRKLEVBQUEsT0FBQXNKLEtBQUFpL0YsVUFBQXBHLEVBQUFuaUcsR0FBQSs5QyxPQUFBLFdBQW1FLElBQUF2OUMsRUFBQSxFQUFRQSxFQUFBOEgsRUFBSTlILElBQUEsR0FBQTJoRyxFQUFBdU0sU0FBQTl0RyxFQUFBSixHQUFBOEksTUFBQSxZQUF5QyxJQUFBUixFQUFBUSxLQUFBaS9GLGNBQUEvbkcsRUFBQSxFQUE2QkEsRUFBQThILEVBQUk5SCxJQUFBMmhHLEVBQUE2TCxLQUFBaHVHLEVBQUFZLEVBQUFKLEdBQUFzSSxHQUFxQixPQUFBUixFQUFBLEVBQUE2NUYsRUFBQTBNLFdBQUEvbEcsTUFBNkJpMUMsT0FBQSxTQUFBLzlDLEdBQW9CLE9BQUFzSixLQUFBaS9GLFVBQUE5a0csRUFBQTZGLEtBQUF0SixPQUFBLEtBQXdDK3ZHLElBQUEsU0FBQS92RyxHQUFpQixPQUFBc0osS0FBQWkvRixVQUFBOWtHLEVBQUE2RixLQUFBdEosT0FBQSxLQUF3QzB5RyxHQUFBLFNBQUExeUcsR0FBZ0IsUUFBQXlELEVBQUE2RixLQUFBLGlCQUFBdEosR0FBQXVwRyxFQUFBLytGLEtBQUF4SyxHQUFBbWlHLEVBQUFuaUcsVUFBQSxHQUFBYSxVQUFzRSxJQUFBNHhFLEVBQUFpM0IsRUFBQSx1Q0FBOEN2SCxFQUFBcmpHLEdBQUE4UyxLQUFBLFNBQUE1UixFQUFBUSxFQUFBc0ksR0FBMkIsSUFBQWxJLEVBQUF5SCxFQUFRLElBQUFySSxFQUFBLE9BQUFzSixLQUFrQixHQUFBUixLQUFBMnBFLEVBQUEsaUJBQUF6eUUsRUFBQSxDQUE4QixLQUFBWSxFQUFBLE1BQUFaLEVBQUEsVUFBQUEsSUFBQWEsT0FBQSxJQUFBYixFQUFBYSxRQUFBLFFBQUFiLEVBQUEsTUFBQTBwRyxFQUFBeEksS0FBQWxoRyxNQUFBWSxFQUFBLElBQUFKLEVBQUEsT0FBQUEsS0FBQTZuRyxRQUFBN25HLEdBQUFzSSxHQUFBa2xHLEtBQUFodUcsR0FBQXNKLEtBQUF3QixZQUFBdEssR0FBQXd0RyxLQUFBaHVHLEdBQXFKLEdBQUFZLEVBQUEsSUFBUyxHQUFBSixlQUFBMmhHLEVBQUEzaEcsRUFBQSxHQUFBQSxFQUFBMmhHLEVBQUF4M0MsTUFBQXJoRCxLQUFBNjRGLEVBQUF3USxVQUFBL3hHLEVBQUEsR0FBQUosS0FBQXVuRyxTQUFBdm5HLEVBQUF3ckcsZUFBQXhyRyxFQUFBOEgsR0FBQSxJQUFBbWhHLEVBQUFqL0YsS0FBQTVKLEVBQUEsS0FBQXVoRyxFQUFBd0csY0FBQW5vRyxHQUFBLElBQUFJLEtBQUFKLEVBQUFrNkYsRUFBQXB4RixLQUFBMUksSUFBQTBJLEtBQUExSSxHQUFBSixFQUFBSSxJQUFBMEksS0FBQXVOLEtBQUFqVyxFQUFBSixFQUFBSSxJQUF3TCxPQUFBMEksS0FBWSxPQUFBakIsRUFBQUMsRUFBQTJqRyxlQUFBcnJHLEVBQUEsT0FBQTBJLEtBQUEsR0FBQWpCLEVBQUFpQixLQUFBekksT0FBQSxHQUFBeUksS0FBaUUsT0FBQXRKLEVBQUErbkcsVUFBQXorRixLQUFBLEdBQUF0SixFQUFBc0osS0FBQXpJLE9BQUEsRUFBQXlJLE1BQUFveEYsRUFBQTE2RixRQUFBLElBQUE4SSxFQUFBOHBHLE1BQUE5cEcsRUFBQThwRyxNQUFBNXlHLEtBQUFtaUcsS0FBQTZHLFVBQUFocEcsRUFBQXNKLFFBQTJHM0wsVUFBQXdrRyxFQUFBcmpHLEdBQUEyekUsRUFBQTB2QixFQUFBNzVGLEdBQXdCLElBQUFxaEcsRUFBQSxpQ0FBQUMsR0FBMEN2cUcsVUFBQSxFQUFBd3pHLFVBQUEsRUFBQTlvRixNQUFBLEVBQUErb0YsTUFBQSxHQUF3eUIsU0FBQWpKLEVBQUE3cEcsRUFBQVEsR0FBZ0IsTUFBQVIsSUFBQVEsS0FBQSxJQUFBUixFQUFBK25HLFdBQWdDLE9BQUEvbkcsRUFBL3lCbWlHLEVBQUFyakcsR0FBQWlSLFFBQWE0dEYsSUFBQSxTQUFBMzlGLEdBQWdCLElBQUFRLEVBQUEyaEcsRUFBQW5pRyxFQUFBc0osTUFBQVIsRUFBQXRJLEVBQUFLLE9BQTJCLE9BQUF5SSxLQUFBeTBDLE9BQUEsV0FBOEIsUUFBQS85QyxFQUFBLEVBQVlBLEVBQUE4SSxFQUFJOUksSUFBQSxHQUFBbWlHLEVBQUF1TSxTQUFBcGxHLEtBQUE5SSxFQUFBUixJQUFBLFlBQXdDK3lHLFFBQUEsU0FBQS95RyxFQUFBUSxHQUF1QixJQUFBc0ksRUFBQVIsRUFBQSxFQUFBMUgsRUFBQTBJLEtBQUF6SSxPQUFBd0gsS0FBQXZELEVBQUEsaUJBQUE5RSxHQUFBbWlHLEVBQUFuaUcsR0FBd0QsSUFBQXVwRyxFQUFBLytGLEtBQUF4SyxHQUFBLEtBQW1Cc0ksRUFBQTFILEVBQUkwSCxJQUFBLElBQUFRLEVBQUFRLEtBQUFoQixHQUFrQlEsT0FBQXRJLEVBQVNzSSxJQUFBbS9GLFdBQUEsR0FBQW4vRixFQUFBaS9GLFNBQUEsS0FBQWpqRyxJQUFBdWYsTUFBQXZiLElBQUEsTUFBQUEsRUFBQWkvRixVQUFBNUYsRUFBQTZMLEtBQUFFLGdCQUFBcGxHLEVBQUE5SSxJQUFBLENBQWdHcUksRUFBQWpKLEtBQUEwSixHQUFVLE1BQU0sT0FBQVEsS0FBQWkvRixVQUFBbGdHLEVBQUF4SCxPQUFBLEVBQUFzaEcsRUFBQTBNLFdBQUF4bUcsT0FBb0RnYyxNQUFBLFNBQUFya0IsR0FBbUIsT0FBQUEsRUFBQSxpQkFBQUEsRUFBQThuRyxFQUFBanFHLEtBQUFza0csRUFBQW5pRyxHQUFBc0osS0FBQSxJQUFBdytGLEVBQUFqcUcsS0FBQXlMLEtBQUF0SixFQUFBcW9HLE9BQUFyb0csRUFBQSxHQUFBQSxHQUFBc0osS0FBQSxJQUFBQSxLQUFBLEdBQUEyK0YsV0FBQTMrRixLQUFBbS9GLFFBQUF1SyxVQUFBbnlHLFFBQUEsR0FBMkkrVyxJQUFBLFNBQUE1WCxFQUFBUSxHQUFtQixPQUFBOEksS0FBQWkvRixVQUFBcEcsRUFBQTBNLFdBQUExTSxFQUFBeDNDLE1BQUFyaEQsS0FBQTFKLE1BQUF1aUcsRUFBQW5pRyxFQUFBUSxPQUFnRXl5RyxRQUFBLFNBQUFqekcsR0FBcUIsT0FBQXNKLEtBQUFzTyxJQUFBLE1BQUE1WCxFQUFBc0osS0FBQWsvRixXQUFBbC9GLEtBQUFrL0YsV0FBQXpxRCxPQUFBLzlDLE9BQStIbWlHLEVBQUFqM0YsTUFBUXpHLE9BQUEsU0FBQXpFLEdBQW1CLElBQUFRLEVBQUFSLEVBQUFpb0csV0FBbUIsT0FBQXpuRyxHQUFBLEtBQUFBLEVBQUF1bkcsU0FBQXZuRyxFQUFBLE1BQWlDdEIsUUFBQSxTQUFBYyxHQUFxQixPQUFBdzhDLEVBQUF4OEMsRUFBQSxlQUF5Qmt6RyxhQUFBLFNBQUFsekcsRUFBQVEsRUFBQXNJLEdBQThCLE9BQUEwekMsRUFBQXg4QyxFQUFBLGFBQUE4SSxJQUEyQmloQixLQUFBLFNBQUEvcEIsR0FBa0IsT0FBQTZwRyxFQUFBN3BHLEVBQUEsZ0JBQTBCOHlHLEtBQUEsU0FBQTl5RyxHQUFrQixPQUFBNnBHLEVBQUE3cEcsRUFBQSxvQkFBOEJtekcsUUFBQSxTQUFBbnpHLEdBQXFCLE9BQUF3OEMsRUFBQXg4QyxFQUFBLGdCQUEwQmd6RyxRQUFBLFNBQUFoekcsR0FBcUIsT0FBQXc4QyxFQUFBeDhDLEVBQUEsb0JBQThCb3pHLFVBQUEsU0FBQXB6RyxFQUFBUSxFQUFBc0ksR0FBMkIsT0FBQTB6QyxFQUFBeDhDLEVBQUEsY0FBQThJLElBQTRCdXFHLFVBQUEsU0FBQXJ6RyxFQUFBUSxFQUFBc0ksR0FBMkIsT0FBQTB6QyxFQUFBeDhDLEVBQUEsa0JBQUE4SSxJQUFnQ3dxRyxTQUFBLFNBQUF0ekcsR0FBc0IsT0FBQWl5RixHQUFBanlGLEVBQUFpb0csZ0JBQTBCaUgsV0FBQWx2RyxJQUFnQlgsU0FBQSxTQUFBVyxHQUFzQixPQUFBaXlGLEVBQUFqeUYsRUFBQWt2RyxhQUF1QjJELFNBQUEsU0FBQTd5RyxHQUFzQixPQUFBd3BHLEVBQUF4cEcsRUFBQSxVQUFBQSxFQUFBdXpHLGlCQUFBL0osRUFBQXhwRyxFQUFBLGNBQUFBLElBQUF1SixTQUFBdkosR0FBQW1pRyxFQUFBeDNDLFNBQUEzcUQsRUFBQThyRyxlQUFxRyxTQUFBOXJHLEVBQUFRLEdBQWUyaEcsRUFBQXJqRyxHQUFBa0IsR0FBQSxTQUFBOEksRUFBQVIsR0FBc0IsSUFBQTFILEVBQUF1aEcsRUFBQW4rRixJQUFBc0YsS0FBQTlJLEVBQUFzSSxHQUFzQixnQkFBQTlJLEVBQUErRCxPQUFBLEtBQUF1RSxFQUFBUSxHQUFBUixHQUFBLGlCQUFBQSxJQUFBMUgsRUFBQXVoRyxFQUFBcGtELE9BQUF6MUMsRUFBQTFILElBQUEwSSxLQUFBekksT0FBQSxJQUFBK29HLEVBQUE1cEcsSUFBQW1pRyxFQUFBME0sV0FBQWp1RyxHQUFBK29HLEVBQUFuL0YsS0FBQXhLLElBQUFZLEVBQUFvOUIsV0FBQTEwQixLQUFBaS9GLFVBQUEzbkcsTUFBK0osSUFBQW94RixFQUFBLG9CQUFtbkMsU0FBQStYLEVBQUEvcEcsR0FBYyxPQUFBQSxFQUFTLFNBQUFncUcsRUFBQWhxRyxHQUFjLE1BQUFBLEVBQVEsU0FBQWlxRyxFQUFBanFHLEVBQUFRLEVBQUFzSSxFQUFBUixHQUFvQixJQUFBMUgsRUFBTSxJQUFJWixHQUFBMDZGLEVBQUE5NUYsRUFBQVosRUFBQXlDLFNBQUE3QixFQUFBL0MsS0FBQW1DLEdBQUF3ekcsS0FBQWh6RyxHQUFBaXpHLEtBQUEzcUcsR0FBQTlJLEdBQUEwNkYsRUFBQTk1RixFQUFBWixFQUFBRyxNQUFBUyxFQUFBL0MsS0FBQW1DLEVBQUFRLEVBQUFzSSxHQUFBdEksRUFBQVcsV0FBQSxHQUFBbkIsR0FBQStELE1BQUF1RSxJQUFzRyxNQUFBdEksR0FBUzhJLEVBQUEzSCxXQUFBLEdBQUFuQixLQUFyc0NtaUcsRUFBQXVSLFVBQUEsU0FBQTF6RyxHQUF3QkEsRUFBQSxpQkFBQUEsRUFBdEcsU0FBQUEsR0FBYyxJQUFBUSxLQUFTLE9BQUEyaEcsRUFBQWozRixLQUFBbEwsRUFBQXUxRSxNQUFBeWMsT0FBQSxTQUFBaHlGLEVBQUE4SSxHQUEyQ3RJLEVBQUFzSSxJQUFBLElBQVF0SSxFQUE0QnNwRyxDQUFBOXBHLEdBQUFtaUcsRUFBQXB5RixVQUFxQy9QLEdBQUksSUFBQVEsRUFBQXNJLEVBQUFSLEVBQUExSCxFQUFBeUgsS0FBQXZELEtBQUFtRSxHQUFBLEVBQUE2K0YsRUFBQSxXQUF3QyxJQUFBbG5HLEtBQUFaLEVBQUEyekcsS0FBQXJyRyxFQUFBOUgsR0FBQSxFQUF1QnNFLEVBQUFqRSxPQUFTb0ksR0FBQSxFQUFrQixJQUFaSCxFQUFBaEUsRUFBQWd1QyxVQUFZN3BDLEVBQUFaLEVBQUF4SCxTQUFBLElBQUF3SCxFQUFBWSxHQUFBOUgsTUFBQTJILEVBQUEsR0FBQUEsRUFBQSxLQUFBOUksRUFBQTR6RyxjQUFBM3FHLEVBQUFaLEVBQUF4SCxPQUFBaUksR0FBQSxHQUFnRjlJLEVBQUE2ekcsU0FBQS9xRyxHQUFBLEdBQUF0SSxHQUFBLEVBQUFJLElBQUF5SCxFQUFBUyxLQUFBLEtBQXFDekIsR0FBSXVRLElBQUEsV0FBZSxPQUFBdlAsSUFBQVMsSUFBQXRJLElBQUF5SSxFQUFBWixFQUFBeEgsT0FBQSxFQUFBaUUsRUFBQTFGLEtBQUEwSixJQUFBLFNBQUF0SSxFQUFBc0ksR0FBeURxNUYsRUFBQWozRixLQUFBcEMsRUFBQSxTQUFBQSxFQUFBUixHQUF1Qm95RixFQUFBcHlGLEdBQUF0SSxFQUFBdXlHLFFBQUFsckcsRUFBQXMyRixJQUFBcjFGLElBQUFELEVBQUFqSixLQUFBa0osUUFBQXpILFFBQUEsV0FBQWtaLEVBQUF6UixJQUFBOUgsRUFBQThILEtBQWhGLENBQXdKeUosV0FBQWpKLElBQUF0SSxHQUFBc25HLEtBQUF4K0YsTUFBNkJnVCxPQUFBLFdBQW1CLE9BQUE2bEYsRUFBQWozRixLQUFBNkcsVUFBQSxTQUFBL1IsRUFBQVEsR0FBNEMsSUFBTixJQUFBc0ksR0FBTUEsRUFBQXE1RixFQUFBOEcsUUFBQXpvRyxFQUFBNkgsRUFBQVMsS0FBQSxHQUFBVCxFQUFBMUIsT0FBQW1DLEVBQUEsR0FBQUEsR0FBQUcsU0FBc0RLLE1BQU9xMEYsSUFBQSxTQUFBMzlGLEdBQWlCLE9BQUFBLEVBQUFtaUcsRUFBQThHLFFBQUFqcEcsRUFBQXFJLElBQUEsRUFBQUEsRUFBQXhILE9BQUEsR0FBc0MrdkcsTUFBQSxXQUFrQixPQUFBdm9HLFVBQUFpQixNQUFzQndxRyxRQUFBLFdBQW9CLE9BQUFsekcsRUFBQWtFLEtBQUF1RCxFQUFBUyxFQUFBLEdBQUFRLE1BQTBCdWlHLFNBQUEsV0FBcUIsT0FBQXhqRyxHQUFTMHJHLEtBQUEsV0FBaUIsT0FBQW56RyxFQUFBa0UsS0FBQWdFLEdBQUF0SSxJQUFBNkgsRUFBQVMsRUFBQSxJQUFBUSxNQUFrQzBxRyxPQUFBLFdBQW1CLFFBQUFwekcsR0FBVXF6RyxTQUFBLFNBQUFqMEcsRUFBQThJLEdBQXdCLE9BQUFsSSxJQUFBa0ksR0FBQTlJLEdBQUE4SSxTQUFBL0UsTUFBQStFLEVBQUEvRSxRQUFBK0UsR0FBQWhFLEVBQUExRixLQUFBMEosR0FBQXRJLEdBQUFzbkcsS0FBQXgrRixNQUFvRTRxRyxLQUFBLFdBQWlCLE9BQUE3c0csRUFBQTRzRyxTQUFBM3FHLEtBQUF5SSxXQUFBekksTUFBdUM2cUcsTUFBQSxXQUFrQixRQUFBN3JHLElBQVksT0FBQWpCLEdBQXlOODZGLEVBQUFweUYsUUFBVXFrRyxTQUFBLFNBQUE1ekcsR0FBcUIsSUFBQXNJLElBQUEsb0JBQUFxNUYsRUFBQXVSLFVBQUEsVUFBQXZSLEVBQUF1UixVQUFBLCtCQUFBdlIsRUFBQXVSLFVBQUEsZUFBQXZSLEVBQUF1UixVQUFBLDhDQUFBdlIsRUFBQXVSLFVBQUEsZUFBQXZSLEVBQUF1UixVQUFBLDhCQUFBcHJHLEVBQUEsVUFBQTFILEdBQXNRaWxHLE1BQUEsV0FBaUIsT0FBQXY5RixHQUFTK3JHLE9BQUEsV0FBbUIsT0FBQWhzRyxFQUFBbXJHLEtBQUF6aEcsV0FBQTBoRyxLQUFBMWhHLFdBQUF6SSxNQUE4Q2dyRyxNQUFBLFNBQUF0MEcsR0FBcUIsT0FBQVksRUFBQVQsS0FBQSxLQUFBSCxJQUFzQndvRixLQUFBLFdBQWlCLElBQUF4b0YsRUFBQStSLFVBQWdCLE9BQUFvd0YsRUFBQWlTLFNBQUEsU0FBQTV6RyxHQUE4QjJoRyxFQUFBajNGLEtBQUFwQyxFQUFBLFNBQUFBLEVBQUFSLEdBQXVCLElBQUExSCxFQUFBODVGLEVBQUExNkYsRUFBQXNJLEVBQUEsTUFBQXRJLEVBQUFzSSxFQUFBLElBQTBCRCxFQUFBQyxFQUFBLGVBQW1CLElBQUF0SSxFQUFBWSxLQUFBTyxNQUFBbUksS0FBQXlJLFdBQWlDL1IsR0FBQTA2RixFQUFBMTZGLEVBQUF5QyxTQUFBekMsRUFBQXlDLFVBQUFtcUUsU0FBQXBzRSxFQUFBK3pHLFFBQUFmLEtBQUFoekcsRUFBQWUsU0FBQWt5RyxLQUFBanpHLEVBQUFnQixRQUFBaEIsRUFBQThILEVBQUEsV0FBQWdCLEtBQUExSSxHQUFBWixHQUFBK1IsZUFBcUgvUixFQUFBLE9BQVN5QyxXQUFZdEMsS0FBQSxTQUFBSyxFQUFBOEgsRUFBQTFILEdBQXNCLElBQUF5SCxFQUFBLEVBQVEsU0FBQXZELEVBQUF0RSxFQUFBc0ksRUFBQVIsRUFBQTFILEdBQW9CLGtCQUFrQixJQUFBcUksRUFBQUssS0FBQXcrRixFQUFBLzFGLFVBQUExSyxFQUFBLFdBQW9DLElBQUFySCxFQUFBcUgsRUFBUSxLQUFBN0csRUFBQTZILEdBQUEsQ0FBVyxJQUFBckksRUFBQXNJLEVBQUFuSCxNQUFBOEgsRUFBQTYrRixNQUFBaC9GLEVBQUFyRyxVQUFBLFVBQUEreEcsVUFBQSw0QkFBa0ZudEcsRUFBQXJILElBQUEsaUJBQUFBLEdBQUEsbUJBQUFBLE1BQUFHLEtBQUF1NkYsRUFBQXJ6RixHQUFBekcsRUFBQXlHLEVBQUF4SixLQUFBbUMsRUFBQThFLEVBQUF1RCxFQUFBUyxFQUFBaWhHLEVBQUFucEcsR0FBQWtFLEVBQUF1RCxFQUFBUyxFQUFBa2hHLEVBQUFwcEcsS0FBQXlILElBQUFoQixFQUFBeEosS0FBQW1DLEVBQUE4RSxFQUFBdUQsRUFBQVMsRUFBQWloRyxFQUFBbnBHLEdBQUFrRSxFQUFBdUQsRUFBQVMsRUFBQWtoRyxFQUFBcHBHLEdBQUFrRSxFQUFBdUQsRUFBQVMsRUFBQWloRyxFQUFBamhHLEVBQUEyckcsZUFBQW5zRyxJQUFBeWhHLElBQUE5Z0csT0FBQSxFQUFBNitGLEdBQUE5bkcsS0FBQVksR0FBQWtJLEVBQUE0ckcsYUFBQXpyRyxFQUFBNitGLE1BQThNdmxHLEVBQUEzQixFQUFBeUcsRUFBQSxXQUFrQixJQUFJQSxJQUFJLE1BQUFySCxHQUFTbWlHLEVBQUFpUyxTQUFBTyxlQUFBeFMsRUFBQWlTLFNBQUFPLGNBQUEzMEcsRUFBQXVDLEVBQUFxeUcsWUFBQXAwRyxFQUFBLEdBQUE2SCxJQUFBQyxJQUFBMGhHLElBQUEvZ0csT0FBQSxFQUFBNitGLEdBQUE5bkcsSUFBQThJLEVBQUErckcsV0FBQTVyRyxFQUFBNitGLE1BQXlIdG5HLEVBQUErQixLQUFBNC9GLEVBQUFpUyxTQUFBVSxlQUFBdnlHLEVBQUFxeUcsV0FBQXpTLEVBQUFpUyxTQUFBVSxnQkFBQTkwRyxFQUFBNnFDLFdBQUF0b0MsS0FBMkYsT0FBQTQvRixFQUFBaVMsU0FBQSxTQUFBcDBHLEdBQThCOEksRUFBQSxNQUFBOE8sSUFBQTlTLEVBQUEsRUFBQTlFLEVBQUEwNkYsRUFBQTk1RixLQUFBbXBHLEVBQUEvcEcsRUFBQXkwRyxhQUFBM3JHLEVBQUEsTUFBQThPLElBQUE5UyxFQUFBLEVBQUE5RSxFQUFBMDZGLEVBQUFsNkYsS0FBQXVwRyxJQUFBamhHLEVBQUEsTUFBQThPLElBQUE5UyxFQUFBLEVBQUE5RSxFQUFBMDZGLEVBQUFweUYsS0FBQTBoRyxNQUFvR3ZuRyxXQUFZQSxRQUFBLFNBQUF6QyxHQUFxQixhQUFBQSxFQUFBbWlHLEVBQUFweUYsT0FBQS9QLEVBQUFZLE9BQWdDeUgsS0FBTSxPQUFBODVGLEVBQUFqM0YsS0FBQXBDLEVBQUEsU0FBQTlJLEVBQUFRLEdBQThCLElBQUFzRSxFQUFBdEUsRUFBQSxHQUFBeUksRUFBQXpJLEVBQUEsR0FBa0JJLEVBQUFKLEVBQUEsSUFBQXNFLEVBQUE4UyxJQUFBM08sR0FBQW5FLEVBQUE4UyxJQUFBLFdBQWtDdFAsRUFBQVcsR0FBSUgsRUFBQSxFQUFBOUksR0FBQSxHQUFBOHpHLFFBQUFockcsRUFBQSxFQUFBOUksR0FBQSxHQUFBOHpHLFFBQUFockcsRUFBQSxNQUFBaXJHLEtBQUFqckcsRUFBQSxNQUFBaXJHLE1BQUFqdkcsRUFBQThTLElBQUFwWCxFQUFBLEdBQUEwekcsTUFBQTdyRyxFQUFBN0gsRUFBQSxlQUFvRyxPQUFBNkgsRUFBQTdILEVBQUEsV0FBQThJLE9BQUFqQixPQUFBLEVBQUFpQixLQUFBeUksV0FBQXpJLE1BQTJEakIsRUFBQTdILEVBQUEsV0FBQXNFLEVBQUFtdkcsV0FBMkJyekcsRUFBQTZCLFFBQUE0RixHQUFBN0gsS0FBQTNDLEtBQUF3SyxRQUFnQ3NPLEtBQUEsU0FBQTNXLEdBQWtCLElBQUFRLEVBQUF1UixVQUFBbFIsT0FBQWlJLEVBQUF0SSxFQUFBOEgsRUFBQTYzQyxNQUFBcjNDLEdBQUFsSSxFQUFBeUgsRUFBQXhLLEtBQUFrVSxXQUFBak4sRUFBQXE5RixFQUFBaVMsV0FBQW5yRyxFQUFBLFNBQUFqSixHQUF1RixnQkFBQThJLEdBQW1CUixFQUFBdEksR0FBQXNKLEtBQUExSSxFQUFBWixHQUFBK1IsVUFBQWxSLE9BQUEsRUFBQXdILEVBQUF4SyxLQUFBa1UsV0FBQWpKLElBQUF0SSxHQUFBc0UsRUFBQTR2RyxZQUFBcHNHLEVBQUExSCxLQUFnRixHQUFBSixHQUFBLElBQUF5cEcsRUFBQWpxRyxFQUFBOEUsRUFBQTB1RyxLQUFBdnFHLEVBQUFILElBQUF2SCxRQUFBdUQsRUFBQXRELFFBQUFoQixHQUFBLFlBQUFzRSxFQUFBK2dHLFNBQUFuTCxFQUFBOTVGLEVBQUFrSSxJQUFBbEksRUFBQWtJLEdBQUEzSSxPQUFBLE9BQUEyRSxFQUFBM0UsT0FBMkcsS0FBQTJJLEtBQUFtaEcsRUFBQXJwRyxFQUFBa0ksR0FBQUcsRUFBQUgsR0FBQWhFLEVBQUF0RCxRQUFnQyxPQUFBc0QsRUFBQXJDLGFBQXNCLElBQUF5bkcsRUFBQSx5REFBK0QvSCxFQUFBaVMsU0FBQU8sY0FBQSxTQUFBbjBHLEVBQUFzSSxHQUF1QzlJLEVBQUFWLFNBQUFVLEVBQUFWLFFBQUFDLE1BQUFpQixHQUFBMHBHLEVBQUExL0YsS0FBQWhLLEVBQUFmLE9BQUFPLEVBQUFWLFFBQUFDLEtBQUEsOEJBQUFpQixFQUFBdTBHLFFBQUF2MEcsRUFBQTRuRSxNQUFBdC9ELElBQWdIcTVGLEVBQUE2UyxlQUFBLFNBQUF4MEcsR0FBOEJSLEVBQUE2cUMsV0FBQSxXQUF3QixNQUFBcnFDLEtBQVcsSUFBQTJwRyxFQUFBaEksRUFBQWlTLFdBQXFSLFNBQUFoSyxJQUFhOWhHLEVBQUEyc0csb0JBQUEsbUJBQUE3SyxHQUFBcHFHLEVBQUFpMUcsb0JBQUEsT0FBQTdLLEdBQUFqSSxFQUFBeVEsUUFBL1F6USxFQUFBcmpHLEdBQUE4ekcsTUFBQSxTQUFBNXlHLEdBQXVCLE9BQUFtcUcsRUFBQWhxRyxLQUFBSCxHQUFBLGVBQUFBLEdBQXNDbWlHLEVBQUE2UyxlQUFBaDFHLEtBQW9Cc0osTUFBTzY0RixFQUFBcHlGLFFBQVc4NEYsU0FBQSxFQUFBcU0sVUFBQSxFQUFBdEMsTUFBQSxTQUFBNXlHLEtBQXlDLElBQUFBLElBQUFtaUcsRUFBQStTLFVBQUEvUyxFQUFBMEcsV0FBQTFHLEVBQUEwRyxTQUFBLE9BQUE3b0csS0FBQW1pRyxFQUFBK1MsVUFBQSxHQUFBL0ssRUFBQXVLLFlBQUFwc0csR0FBQTY1RixRQUFnR0EsRUFBQXlRLE1BQUF6eUcsS0FBQWdxRyxFQUFBaHFHLEtBQXlILGFBQUFtSSxFQUFBdEcsWUFBQSxZQUFBc0csRUFBQXRHLGFBQUFzRyxFQUFBaWxHLGdCQUFBNEgsU0FBQW4xRyxFQUFBNnFDLFdBQUFzM0QsRUFBQXlRLFFBQUF0cUcsRUFBQW1sRyxpQkFBQSxtQkFBQXJELEdBQUFwcUcsRUFBQXl0RyxpQkFBQSxPQUFBckQsSUFBK0ssSUFBQXYyRixFQUFBLFNBQUE3VCxFQUFBUSxFQUFBc0ksRUFBQVIsRUFBQTFILEVBQUF5SCxFQUFBdkQsR0FBOEIsSUFBQW1FLEVBQUEsRUFBQTYrRixFQUFBOW5HLEVBQUFhLE9BQUF3RyxFQUFBLE1BQUF5QixFQUE2QixjQUFBaVIsRUFBQWpSLEdBQXlCLElBQUFHLEtBQUxySSxHQUFBLEVBQUtrSSxFQUFBK0ssRUFBQTdULEVBQUFRLEVBQUF5SSxFQUFBSCxFQUFBRyxJQUFBLEVBQUFaLEVBQUF2RCxRQUFnQyxZQUFBd0QsSUFBQTFILEdBQUEsRUFBQTg1RixFQUFBcHlGLEtBQUF4RCxHQUFBLEdBQUF1QyxJQUFBdkMsR0FBQXRFLEVBQUEzQyxLQUFBbUMsRUFBQXNJLEdBQUE5SCxFQUFBLE9BQUE2RyxFQUFBN0csSUFBQSxTQUFBUixFQUFBUSxFQUFBc0ksR0FBeUYsT0FBQXpCLEVBQUF4SixLQUFBc2tHLEVBQUFuaUcsR0FBQThJLE1BQXNCdEksR0FBQSxLQUFXeUksRUFBQTYrRixFQUFJNytGLElBQUF6SSxFQUFBUixFQUFBaUosR0FBQUgsRUFBQWhFLEVBQUF3RCxJQUFBekssS0FBQW1DLEVBQUFpSixLQUFBekksRUFBQVIsRUFBQWlKLEdBQUFILEtBQTJDLE9BQUFsSSxFQUFBWixFQUFBcUgsRUFBQTdHLEVBQUEzQyxLQUFBbUMsR0FBQThuRyxFQUFBdG5HLEVBQUFSLEVBQUEsR0FBQThJLEdBQUFULEdBQXFDZ2lHLEVBQUEsUUFBQUMsRUFBQSxZQUF5QixTQUFBQyxFQUFBdnFHLEVBQUFRLEdBQWdCLE9BQUFBLEVBQUFpeEYsY0FBdUIsU0FBQXVaLEVBQUFockcsR0FBYyxPQUFBQSxFQUFBeUssUUFBQTQvRixFQUFBLE9BQUE1L0YsUUFBQTYvRixFQUFBQyxHQUF1QyxJQUFBVSxFQUFBLFNBQUFqckcsR0FBa0IsV0FBQUEsRUFBQStuRyxVQUFBLElBQUEvbkcsRUFBQStuRyxZQUFBL25HLEVBQUErbkcsVUFBcUQsU0FBQW1ELElBQWE1aEcsS0FBQXMvRixRQUFBekcsRUFBQXlHLFFBQUFzQyxFQUFBMTFGLE1BQStCMDFGLEVBQUExMUYsSUFBQSxFQUFBMDFGLEVBQUF2dEcsV0FBcUJzN0MsTUFBQSxTQUFBajVDLEdBQWtCLElBQUFRLEVBQUFSLEVBQUFzSixLQUFBcy9GLFNBQXNCLE9BQUFwb0csU0FBZXlxRyxFQUFBanJHLE9BQUErbkcsU0FBQS9uRyxFQUFBc0osS0FBQXMvRixTQUFBcG9HLEVBQUE5QyxPQUFBcUMsZUFBQUMsRUFBQXNKLEtBQUFzL0YsU0FBMkU5b0csTUFBQVUsRUFBQWQsY0FBQSxNQUF3QmMsR0FBTVgsSUFBQSxTQUFBRyxFQUFBUSxFQUFBc0ksR0FBcUIsSUFBQVIsRUFBQTFILEVBQUEwSSxLQUFBMnZDLE1BQUFqNUMsR0FBc0Isb0JBQUFRLEVBQUFJLEVBQUFvcUcsRUFBQXhxRyxJQUFBc0ksT0FBZ0MsSUFBQVIsS0FBQTlILEVBQUFJLEVBQUFvcUcsRUFBQTFpRyxJQUFBOUgsRUFBQThILEdBQTZCLE9BQUExSCxHQUFTaEIsSUFBQSxTQUFBSSxFQUFBUSxHQUFtQixnQkFBQUEsRUFBQThJLEtBQUEydkMsTUFBQWo1QyxLQUFBc0osS0FBQXMvRixVQUFBNW9HLEVBQUFzSixLQUFBcy9GLFNBQUFvQyxFQUFBeHFHLEtBQXVFNDBHLE9BQUEsU0FBQXAxRyxFQUFBUSxFQUFBc0ksR0FBd0IsZ0JBQUF0SSxNQUFBLGlCQUFBQSxRQUFBLElBQUFzSSxFQUFBUSxLQUFBMUosSUFBQUksRUFBQVEsSUFBQThJLEtBQUF6SixJQUFBRyxFQUFBUSxFQUFBc0ksUUFBQSxJQUFBQSxJQUFBdEksSUFBb0c4YixPQUFBLFNBQUF0YyxFQUFBUSxHQUFzQixJQUFBc0ksRUFBQVIsRUFBQXRJLEVBQUFzSixLQUFBcy9GLFNBQXdCLFlBQUF0Z0csRUFBQSxDQUFlLFlBQUE5SCxFQUFBLENBQWVzSSxHQUFBdEksRUFBQTIvQyxNQUFBNXdDLFFBQUEvTyxLQUFBd0QsSUFBQWduRyxJQUFBeHFHLEVBQUF3cUcsRUFBQXhxRyxNQUFBOEgsR0FBQTlILEtBQUErMEUsTUFBQXljLFFBQUFueEYsT0FBdUUsS0FBQWlJLFlBQUFSLEVBQUE5SCxFQUFBc0ksVUFBeUIsSUFBQXRJLEdBQUEyaEcsRUFBQTJHLGNBQUF4Z0csTUFBQXRJLEVBQUErbkcsU0FBQS9uRyxFQUFBc0osS0FBQXMvRixjQUFBLFNBQUE1b0csRUFBQXNKLEtBQUFzL0YsWUFBOEZ5TSxRQUFBLFNBQUFyMUcsR0FBcUIsSUFBQVEsRUFBQVIsRUFBQXNKLEtBQUFzL0YsU0FBc0IsZ0JBQUFwb0csSUFBQTJoRyxFQUFBMkcsY0FBQXRvRyxLQUF5QyxJQUFBMnFHLEVBQUEsSUFBQUQsRUFBQUUsR0FBQSxJQUFBRixFQUFBRyxHQUFBLGdDQUFzQ0MsR0FBQSxTQUFtSSxTQUFBSSxHQUFBMXJHLEVBQUFRLEVBQUFzSSxHQUFtQixJQUFBUixFQUFNLFlBQUFRLEdBQUEsSUFBQTlJLEVBQUErbkcsU0FBQSxHQUFBei9GLEVBQUEsUUFBQTlILEVBQUFpSyxRQUFBNmdHLEdBQUEsT0FBQS96QyxjQUFBLGlCQUFBenVELEVBQUE5SSxFQUFBMGpFLGFBQUFwN0QsSUFBQSxDQUFvSCxJQUFJUSxFQUF4UCxTQUFBOUksR0FBZSxlQUFBQSxHQUFBLFVBQUFBLElBQUEsU0FBQUEsRUFBQSxLQUFBQSxPQUFBLElBQUFBLEVBQUFxckcsR0FBQTdnRyxLQUFBeEssR0FBQW1DLEtBQUFDLE1BQUFwQyxNQUF5T3lyRyxDQUFBM2lHLEdBQVEsTUFBQTlJLElBQVVvckcsR0FBQXZyRyxJQUFBRyxFQUFBUSxFQUFBc0ksUUFBYUEsT0FBQSxFQUFjLE9BQUFBLEVBQVNxNUYsRUFBQXB5RixRQUFVc2xHLFFBQUEsU0FBQXIxRyxHQUFvQixPQUFBb3JHLEdBQUFpSyxRQUFBcjFHLElBQUFtckcsRUFBQWtLLFFBQUFyMUcsSUFBa0N1RyxLQUFBLFNBQUF2RyxFQUFBUSxFQUFBc0ksR0FBc0IsT0FBQXNpRyxHQUFBZ0ssT0FBQXAxRyxFQUFBUSxFQUFBc0ksSUFBdUJ3c0csV0FBQSxTQUFBdDFHLEVBQUFRLEdBQTBCNHFHLEdBQUE5dUYsT0FBQXRjLEVBQUFRLElBQWNtYixNQUFBLFNBQUEzYixFQUFBUSxFQUFBc0ksR0FBdUIsT0FBQXFpRyxFQUFBaUssT0FBQXAxRyxFQUFBUSxFQUFBc0ksSUFBdUJ5c0csWUFBQSxTQUFBdjFHLEVBQUFRLEdBQTJCMnFHLEVBQUE3dUYsT0FBQXRjLEVBQUFRLE1BQWUyaEcsRUFBQXJqRyxHQUFBaVIsUUFBZXhKLEtBQUEsU0FBQXZHLEVBQUFRLEdBQW1CLElBQUFzSSxFQUFBUixFQUFBMUgsRUFBQXlILEVBQUFpQixLQUFBLEdBQUF4RSxFQUFBdUQsS0FBQXNsRyxXQUFzQyxZQUFBM3RHLEVBQUEsQ0FBZSxHQUFBc0osS0FBQXpJLFNBQUFELEVBQUF3cUcsR0FBQXhyRyxJQUFBeUksR0FBQSxJQUFBQSxFQUFBMC9GLFdBQUFvRCxFQUFBdnJHLElBQUF5SSxFQUFBLGtCQUFrRixJQUFYUyxFQUFBaEUsRUFBQWpFLE9BQVdpSSxLQUFBaEUsRUFBQWdFLElBQUEsS0FBQVIsRUFBQXhELEVBQUFnRSxHQUFBckosTUFBQU4sUUFBQSxXQUFBbUosRUFBQTBpRyxFQUFBMWlHLEVBQUF2RSxNQUFBLElBQUEybkcsR0FBQXJqRyxFQUFBQyxFQUFBMUgsRUFBQTBILEtBQW1GNmlHLEVBQUF0ckcsSUFBQXdJLEVBQUEsbUJBQTJCLE9BQUF6SCxFQUFTLHVCQUFBWixFQUFBc0osS0FBQTRCLEtBQUEsV0FBOENrZ0csR0FBQXZyRyxJQUFBeUosS0FBQXRKLEtBQWM2VCxFQUFBdkssS0FBQSxTQUFBOUksR0FBcUIsSUFBQXNJLEVBQU0sR0FBQVQsUUFBQSxJQUFBN0gsRUFBQSxDQUFrQixhQUFBc0ksRUFBQXNpRyxHQUFBeHJHLElBQUF5SSxFQUFBckksSUFBQSxPQUFBOEksRUFBb0MsYUFBQUEsRUFBQTRpRyxHQUFBcmpHLEVBQUFySSxJQUFBLE9BQUE4SSxPQUFpQ1EsS0FBQTRCLEtBQUEsV0FBMEJrZ0csR0FBQXZyRyxJQUFBeUosS0FBQXRKLEVBQUFRLE1BQWtCLEtBQUFBLEVBQUF1UixVQUFBbFIsT0FBQSxZQUFvQ3kwRyxXQUFBLFNBQUF0MUcsR0FBd0IsT0FBQXNKLEtBQUE0QixLQUFBLFdBQTRCa2dHLEdBQUE5dUYsT0FBQWhULEtBQUF0SixRQUFvQm1pRyxFQUFBcHlGLFFBQVlqTSxNQUFBLFNBQUE5RCxFQUFBUSxFQUFBc0ksR0FBc0IsSUFBQVIsRUFBTSxHQUFBdEksRUFBQSxPQUFBUSxNQUFBLGNBQUE4SCxFQUFBNmlHLEVBQUF2ckcsSUFBQUksRUFBQVEsR0FBQXNJLEtBQUFSLEdBQUE2M0MsTUFBQTV3QyxRQUFBekcsR0FBQVIsRUFBQTZpRyxFQUFBaUssT0FBQXAxRyxFQUFBUSxFQUFBMmhHLEVBQUE2RyxVQUFBbGdHLElBQUFSLEVBQUFsSixLQUFBMEosSUFBQVIsT0FBc0hrdEcsUUFBQSxTQUFBeDFHLEVBQUFRLEdBQXVCQSxLQUFBLEtBQVUsSUFBQXNJLEVBQUFxNUYsRUFBQXIrRixNQUFBOUQsRUFBQVEsR0FBQThILEVBQUFRLEVBQUFqSSxPQUFBRCxFQUFBa0ksRUFBQWdxQyxRQUFBenFDLEVBQUE4NUYsRUFBQXNULFlBQUF6MUcsRUFBQVEsR0FBNEYsZUFBQUksTUFBQWtJLEVBQUFncUMsUUFBQXhxQyxLQUFBMUgsSUFBQSxPQUFBSixHQUFBc0ksRUFBQW1xQyxRQUFBLHFCQUFBNXFDLEVBQUEycEIsS0FBQXB4QixFQUFBL0MsS0FBQW1DLEVBQTVGLFdBQTRFbWlHLEVBQUFxVCxRQUFBeDFHLEVBQUFRLElBQWdCNkgsS0FBQUMsR0FBQUQsS0FBQXVvRyxNQUFBc0QsUUFBNkh1QixZQUFBLFNBQUF6MUcsRUFBQVEsR0FBMkIsSUFBQXNJLEVBQUF0SSxFQUFBLGFBQXFCLE9BQUEycUcsRUFBQXZyRyxJQUFBSSxFQUFBOEksSUFBQXFpRyxFQUFBaUssT0FBQXAxRyxFQUFBOEksR0FBaUM4bkcsTUFBQXpPLEVBQUF1UixVQUFBLGVBQUE5N0YsSUFBQSxXQUFnRHV6RixFQUFBN3VGLE9BQUF0YyxHQUFBUSxFQUFBLFFBQUFzSSxXQUErQnE1RixFQUFBcmpHLEdBQUFpUixRQUFlak0sTUFBQSxTQUFBOUQsRUFBQVEsR0FBb0IsSUFBQXNJLEVBQUEsRUFBUSx1QkFBQTlJLElBQUFRLEVBQUFSLElBQUEsS0FBQThJLEtBQUFpSixVQUFBbFIsT0FBQWlJLEVBQUFxNUYsRUFBQXIrRixNQUFBd0YsS0FBQSxHQUFBdEosUUFBQSxJQUFBUSxFQUFBOEksVUFBQTRCLEtBQUEsV0FBc0gsSUFBQXBDLEVBQUFxNUYsRUFBQXIrRixNQUFBd0YsS0FBQXRKLEVBQUFRLEdBQXdCMmhHLEVBQUFzVCxZQUFBbnNHLEtBQUF0SixHQUFBLE9BQUFBLEdBQUEsZUFBQThJLEVBQUEsSUFBQXE1RixFQUFBcVQsUUFBQWxzRyxLQUFBdEosTUFBeUV3MUcsUUFBQSxTQUFBeDFHLEdBQXFCLE9BQUFzSixLQUFBNEIsS0FBQSxXQUE0QmkzRixFQUFBcVQsUUFBQWxzRyxLQUFBdEosTUFBb0IwMUcsV0FBQSxTQUFBMTFHLEdBQXdCLE9BQUFzSixLQUFBeEYsTUFBQTlELEdBQUEsVUFBOEJ5QyxRQUFBLFNBQUF6QyxFQUFBUSxHQUF1QixJQUFBc0ksRUFBQVIsRUFBQSxFQUFBMUgsRUFBQXVoRyxFQUFBaVMsV0FBQS9yRyxFQUFBaUIsS0FBQXhFLEVBQUF3RSxLQUFBekksT0FBQW9JLEVBQUEsYUFBMkRYLEdBQUExSCxFQUFBOHpHLFlBQUFyc0csUUFBd0UsSUFBN0MsaUJBQUFySSxJQUFBUSxFQUFBUixTQUFBLEdBQUFBLEtBQUEsS0FBNkM4RSxNQUFBZ0UsRUFBQXFpRyxFQUFBdnJHLElBQUF5SSxFQUFBdkQsR0FBQTlFLEVBQUEsZ0JBQUE4SSxFQUFBOG5HLFFBQUF0b0csSUFBQVEsRUFBQThuRyxNQUFBaDVGLElBQUEzTyxJQUF3RSxPQUFBQSxJQUFBckksRUFBQTZCLFFBQUFqQyxNQUEyQixJQUFBbXJHLEdBQUEsc0NBQUF6aEcsT0FBQTBoRyxHQUFBLElBQUEzRSxPQUFBLGlCQUFBMEUsR0FBQSxtQkFBQUksSUFBQSwrQkFBQXpDLEdBQUEsU0FBQXRwRyxFQUFBUSxHQUE2SixnQkFBQVIsRUFBQVEsR0FBQVIsR0FBQWlhLE1BQUE2dkIsU0FBQSxLQUFBOXBDLEVBQUFpYSxNQUFBNnZCLFNBQUFxNEQsRUFBQXVNLFNBQUExdUcsRUFBQWdzRyxjQUFBaHNHLElBQUEsU0FBQW1pRyxFQUFBd1QsSUFBQTMxRyxFQUFBLFlBQXdIMHNHLEdBQUEsU0FBQTFzRyxFQUFBUSxFQUFBc0ksRUFBQVIsR0FBc0IsSUFBQTFILEVBQUF5SCxFQUFBdkQsS0FBYSxJQUFBdUQsS0FBQTdILEVBQUFzRSxFQUFBdUQsR0FBQXJJLEVBQUFpYSxNQUFBNVIsR0FBQXJJLEVBQUFpYSxNQUFBNVIsR0FBQTdILEVBQUE2SCxHQUE4RCxJQUFBQSxLQUFuQnpILEVBQUFrSSxFQUFBM0gsTUFBQW5CLEVBQUFzSSxPQUFtQjlILEVBQUFSLEVBQUFpYSxNQUFBNVIsR0FBQXZELEVBQUF1RCxHQUEyQixPQUFBekgsR0FBVSxTQUFBK3JHLEdBQUEzc0csRUFBQVEsRUFBQXNJLEVBQUFSLEdBQXFCLElBQUExSCxFQUFBeUgsRUFBQXZELEVBQUEsR0FBQW1FLEVBQUFYLEVBQUEsV0FBNEIsT0FBQUEsRUFBQXN0RyxPQUFlLFdBQVksT0FBQXpULEVBQUF3VCxJQUFBMzFHLEVBQUFRLEVBQUEsS0FBcUJzbkcsRUFBQTcrRixJQUFBNUIsRUFBQXlCLEtBQUEsS0FBQXE1RixFQUFBMFQsVUFBQXIxRyxHQUFBLFNBQUErQixHQUFBNC9GLEVBQUEwVCxVQUFBcjFHLElBQUEsT0FBQTZHLElBQUF5Z0csSUFBQThELEdBQUExSyxLQUFBaUIsRUFBQXdULElBQUEzMUcsRUFBQVEsSUFBaUcsR0FBQStCLEtBQUEsS0FBQThFLEVBQUEsQ0FBdUMsSUFBdkJ5Z0csR0FBQSxFQUFBemdHLEtBQUE5RSxFQUFBLEdBQUFBLEdBQUF1bEcsR0FBQSxFQUF1QmhqRyxLQUFBcTlGLEVBQUFsb0YsTUFBQWphLEVBQUFRLEVBQUErQixFQUFBOEUsSUFBQSxFQUFBZ0IsSUFBQSxHQUFBQSxFQUFBWSxJQUFBNitGLEdBQUEsVUFBQWhqRyxFQUFBLEdBQUF2QyxHQUFBOEYsRUFBa0U5RixHQUFBLEVBQUE0L0YsRUFBQWxvRixNQUFBamEsRUFBQVEsRUFBQStCLEVBQUE4RSxHQUFBeUIsUUFBOEIsT0FBQUEsSUFBQXZHLE9BQUF1bEcsR0FBQSxFQUFBbG5HLEVBQUFrSSxFQUFBLEdBQUF2RyxHQUFBdUcsRUFBQSxNQUFBQSxFQUFBLElBQUFBLEVBQUEsR0FBQVIsTUFBQXd0RyxLQUFBenVHLEVBQUFpQixFQUFBc08sTUFBQXJVLEVBQUErRixFQUFBc1YsSUFBQWhkLE1BQXVGLElBQUFnc0csTUFBVSxTQUFBRSxHQUFBOXNHLEdBQWUsSUFBQVEsRUFBQXNJLEVBQUE5SSxFQUFBZ3NHLGNBQUExakcsRUFBQXRJLEVBQUFvc0csU0FBQXhyRyxFQUFBZ3NHLEdBQUF0a0csR0FBNkMsT0FBQTFILElBQUFKLEVBQUFzSSxFQUFBaXRHLEtBQUE5eUcsWUFBQTZGLEVBQUFoRyxjQUFBd0YsSUFBQTFILEVBQUF1aEcsRUFBQXdULElBQUFuMUcsRUFBQSxXQUFBQSxFQUFBeW5HLFdBQUFDLFlBQUExbkcsR0FBQSxTQUFBSSxNQUFBLFNBQUFnc0csR0FBQXRrRyxHQUFBMUgsS0FBd0ksU0FBQXFzRyxHQUFBanRHLEVBQUFRLEdBQWlCLFFBQUFzSSxFQUFBUixFQUFBMUgsS0FBQXlILEVBQUEsRUFBQXZELEVBQUE5RSxFQUFBYSxPQUFnQ3dILEVBQUF2RCxFQUFJdUQsS0FBQUMsRUFBQXRJLEVBQUFxSSxJQUFBNFIsUUFBQW5SLEVBQUFSLEVBQUEyUixNQUFBNnZCLFFBQUF0cEMsR0FBQSxTQUFBc0ksSUFBQWxJLEVBQUF5SCxHQUFBOGlHLEVBQUF2ckcsSUFBQTBJLEVBQUEsaUJBQUExSCxFQUFBeUgsS0FBQUMsRUFBQTJSLE1BQUE2dkIsUUFBQSxVQUFBeGhDLEVBQUEyUixNQUFBNnZCLFNBQUF3L0QsR0FBQWhoRyxLQUFBMUgsRUFBQXlILEdBQUF5a0csR0FBQXhrRyxLQUFBLFNBQUFRLElBQUFsSSxFQUFBeUgsR0FBQSxPQUFBOGlHLEVBQUF0ckcsSUFBQXlJLEVBQUEsVUFBQVEsS0FBNE0sSUFBQVQsRUFBQSxFQUFRQSxFQUFBdkQsRUFBSXVELElBQUEsTUFBQXpILEVBQUF5SCxLQUFBckksRUFBQXFJLEdBQUE0UixNQUFBNnZCLFFBQUFscEMsRUFBQXlILElBQTBDLE9BQUFySSxFQUFTbWlHLEVBQUFyakcsR0FBQWlSLFFBQWEwRCxLQUFBLFdBQWdCLE9BQUF3NUYsR0FBQTNqRyxNQUFBLElBQW1CMm1CLEtBQUEsV0FBaUIsT0FBQWc5RSxHQUFBM2pHLE9BQWdCMHNHLE9BQUEsU0FBQWgyRyxHQUFvQix3QkFBQUEsSUFBQXNKLEtBQUFtSyxPQUFBbkssS0FBQTJtQixPQUFBM21CLEtBQUE0QixLQUFBLFdBQXlFbytGLEdBQUFoZ0csTUFBQTY0RixFQUFBNzRGLE1BQUFtSyxPQUFBMHVGLEVBQUE3NEYsTUFBQTJtQixZQUE0QyxJQUFBaTlFLEdBQUEsd0JBQUFDLEdBQUEsaUNBQUFFLEdBQUEscUNBQUFmLElBQStHejZGLFFBQUEsOENBQUFva0csT0FBQSx3QkFBQXpsRCxLQUFBLDZDQUFBMGxELElBQUEsdUNBQUFDLElBQUEsZ0RBQUEzcUcsVUFBQSxVQUE4VSxTQUFBa21HLEdBQUExeEcsRUFBQVEsR0FBaUIsSUFBQXNJLEVBQU0sT0FBQUEsT0FBQSxJQUFBOUksRUFBQTRDLHFCQUFBNUMsRUFBQTRDLHFCQUFBcEMsR0FBQSxjQUFBUixFQUFBdXNHLGlCQUFBdnNHLEVBQUF1c0csaUJBQUEvckcsR0FBQSxpQkFBQUEsTUFBQWdwRyxFQUFBeHBHLEVBQUFRLEdBQUEyaEcsRUFBQXgzQyxPQUFBM3FELEdBQUE4SSxLQUErTCxTQUFBdWpHLEdBQUFyc0csRUFBQVEsR0FBaUIsUUFBQXNJLEVBQUEsRUFBQVIsRUFBQXRJLEVBQUFhLE9BQXVCaUksRUFBQVIsRUFBSVEsSUFBQXFpRyxFQUFBdHJHLElBQUFHLEVBQUE4SSxHQUFBLGNBQUF0SSxHQUFBMnFHLEVBQUF2ckcsSUFBQVksRUFBQXNJLEdBQUEsZUFBdFZ3akcsR0FBQThKLFNBQUE5SixHQUFBejZGLE9BQUF5NkYsR0FBQStKLE1BQUEvSixHQUFBZ0ssTUFBQWhLLEdBQUFpSyxTQUFBakssR0FBQWtLLFFBQUFsSyxHQUFBMkosTUFBQTNKLEdBQUFtSyxHQUFBbkssR0FBQTZKLEdBQWdaLElBQUF4M0csR0FBQSxZQUFtQixTQUFBZ3pHLEdBQUEzeEcsRUFBQVEsRUFBQXNJLEVBQUFSLEVBQUExSCxHQUF1QixRQUFBeUgsRUFBQXZELEVBQUFtRSxFQUFBNitGLEVBQUF6Z0csRUFBQTlFLEVBQUFrN0MsRUFBQWo5QyxFQUFBazJHLHlCQUFBLzBHLEtBQUF3RyxFQUFBLEVBQUEzRixFQUFBeEMsRUFBQWEsT0FBcUVzSCxFQUFBM0YsRUFBSTJGLElBQUEsSUFBQUUsRUFBQXJJLEVBQUFtSSxLQUFBLElBQUFFLEVBQUEsY0FBQTBSLEVBQUExUixHQUFBODVGLEVBQUF4M0MsTUFBQWhwRCxFQUFBMEcsRUFBQTAvRixVQUFBMS9GLFdBQXNFLEdBQUExSixHQUFBNkwsS0FBQW5DLEdBQUEsQ0FBNkssSUFBekp2RCxLQUFBMjRDLEVBQUF4NkMsWUFBQXpDLEVBQUFzQyxjQUFBLFFBQUFtRyxHQUFBa2tHLEdBQUFqTSxLQUFBNzRGLEtBQUEsV0FBQWt2RCxjQUFBdXdDLEVBQUF3RSxHQUFBcmpHLElBQUFxakcsR0FBQTlnRyxTQUFBMUcsRUFBQWlsQyxVQUFBKzlELEVBQUEsR0FBQTNGLEVBQUF3VSxjQUFBdHVHLEdBQUF5L0YsRUFBQSxHQUFBdmxHLEVBQUF1bEcsRUFBQSxHQUF5SnZsRyxLQUFBdUMsSUFBQTZxRyxVQUF3QnhOLEVBQUF4M0MsTUFBQWhwRCxFQUFBbUQsRUFBQWduRyxhQUFBaG5HLEVBQUEyNEMsRUFBQXl4RCxZQUFBRCxZQUFBLFFBQXdEdHRHLEVBQUF2QyxLQUFBb0IsRUFBQW8yRyxlQUFBdnVHLElBQXNELElBQXJCbzFDLEVBQUF3eEQsWUFBQSxHQUFBOW1HLEVBQUEsRUFBcUJFLEVBQUExRyxFQUFBd0csTUFBQSxHQUFBRyxHQUFBNjVGLEVBQUE4RyxRQUFBNWdHLEVBQUFDLElBQUEsRUFBQTFILEtBQUF4QixLQUFBaUosUUFBb0QsR0FBQWhCLEVBQUE4NkYsRUFBQXVNLFNBQUFybUcsRUFBQTJqRyxjQUFBM2pHLEdBQUF2RCxFQUFBNHNHLEdBQUFqMEQsRUFBQXg2QyxZQUFBb0YsR0FBQSxVQUFBaEIsR0FBQWdsRyxHQUFBdm5HLEdBQUFnRSxFQUF3RixJQUFKdkcsRUFBQSxFQUFJOEYsRUFBQXZELEVBQUF2QyxNQUFBOHFHLEdBQUE3aUcsS0FBQW5DLEVBQUEvRCxNQUFBLEtBQUF3RSxFQUFBMUosS0FBQWlKLEdBQThDLE9BQUFvMUMsR0FBUyxXQUFZLElBQUF6OUMsRUFBQXNJLEVBQUFvdUcseUJBQUF6ekcsWUFBQXFGLEVBQUF4RixjQUFBLFFBQUF0QyxFQUFBOEgsRUFBQXhGLGNBQUEsU0FBZ0d0QyxFQUFBMGlFLGFBQUEsZ0JBQUExaUUsRUFBQTBpRSxhQUFBLHFCQUFBMWlFLEVBQUEwaUUsYUFBQSxZQUFBbGpFLEVBQUFpRCxZQUFBekMsR0FBQWdDLEVBQUFxMEcsV0FBQTcyRyxFQUFBODJHLFdBQUEsR0FBQUEsV0FBQSxHQUFBbkgsVUFBQWUsUUFBQTF3RyxFQUFBK3BDLFVBQUEseUJBQUF2bkMsRUFBQXUwRyxpQkFBQS8yRyxFQUFBODJHLFdBQUEsR0FBQW5ILFVBQUEwQyxhQUE1RyxHQUEwWCxJQUFBUCxHQUFBeHBHLEVBQUFpbEcsZ0JBQUFxRSxHQUFBLE9BQUFDLEdBQUEsaURBQUFFLEdBQUEsc0JBQWdILFNBQUFDLEtBQWMsU0FBUyxTQUFBZ0YsS0FBYyxTQUFTLFNBQUFDLEtBQWMsSUFBSSxPQUFBM3VHLEVBQUErbkcsY0FBdUIsTUFBQXJ3RyxLQUFXLFNBQUFrM0csR0FBQWwzRyxFQUFBUSxFQUFBc0ksRUFBQVIsRUFBQTFILEVBQUF5SCxHQUF5QixJQUFBdkQsRUFBQW1FLEVBQVEsb0JBQUF6SSxFQUFBLENBQTZELElBQUF5SSxJQUF0QyxpQkFBQUgsSUFBQVIsS0FBQVEsU0FBQSxHQUFzQ3RJLEVBQUEwMkcsR0FBQWwzRyxFQUFBaUosRUFBQUgsRUFBQVIsRUFBQTlILEVBQUF5SSxHQUFBWixHQUE4QixPQUFBckksRUFBUyxTQUFBc0ksR0FBQSxNQUFBMUgsS0FBQWtJLEVBQUFSLEVBQUFRLE9BQUEsU0FBQWxJLElBQUEsaUJBQUFrSSxHQUFBbEksRUFBQTBILFNBQUEsSUFBQTFILEVBQUEwSCxJQUFBUSxTQUFBLFNBQUFsSSxJQUFBbzJHLFFBQWlILElBQUFwMkcsRUFBQSxPQUFBWixFQUFvQixXQUFBcUksSUFBQXZELEVBQUFsRSxLQUFBLFNBQUFaLEdBQWtDLE9BQUFtaUcsSUFBQTVvRixJQUFBdlosR0FBQThFLEVBQUEzRCxNQUFBbUksS0FBQXlJLGFBQTBDbzNGLEtBQUFya0csRUFBQXFrRyxPQUFBcmtHLEVBQUFxa0csS0FBQWhILEVBQUFnSCxTQUFBbnBHLEVBQUFrTCxLQUFBLFdBQW9EaTNGLEVBQUFueEYsTUFBQTRHLElBQUF0TyxLQUFBOUksRUFBQUksRUFBQTBILEVBQUFRLEtBQTRCcTVGLEVBQUFueEYsT0FBU3FnQyxVQUFTejVCLElBQUEsU0FBQTVYLEVBQUFRLEVBQUFzSSxFQUFBUixFQUFBMUgsR0FBeUIsSUFBQXlILEVBQUF2RCxFQUFBbUUsRUFBQTYrRixFQUFBemdHLEVBQUE5RSxFQUFBazdDLEVBQUE5N0MsRUFBQXdHLEVBQUEzRixFQUFBazRGLEVBQUExZ0YsRUFBQW14RixFQUFBdnJHLElBQUFJLEdBQXFDLEdBQUFnYSxFQUF1VCxJQUFqVGxSLEVBQUE0eEIsVUFBQTV4QixHQUFBVCxFQUFBUyxHQUFBNHhCLFFBQUE5NUIsRUFBQXlILEVBQUErcEcsVUFBQXh4RyxHQUFBdWhHLEVBQUE2TCxLQUFBRSxnQkFBQTRELEdBQUFseEcsR0FBQWtJLEVBQUFxZ0csT0FBQXJnRyxFQUFBcWdHLEtBQUFoSCxFQUFBZ0gsU0FBQXJCLEVBQUE5dEYsRUFBQW05RixVQUFBclAsRUFBQTl0RixFQUFBbTlGLFlBQWdJcnlHLEVBQUFrVixFQUFBb1QsVUFBQXRvQixFQUFBa1YsRUFBQW9ULE9BQUEsU0FBQTVzQixHQUF3QyxnQkFBQTJoRyxLQUFBbnhGLE1BQUFvbUcsWUFBQTUyRyxFQUFBOEQsS0FBQTY5RixFQUFBbnhGLE1BQUFxNEIsU0FBQWxvQyxNQUFBbkIsRUFBQStSLGdCQUFBLElBQW1HMUssR0FBQTdHLE1BQUEsSUFBQSswRSxNQUFBeWMsS0FBQSxLQUFBbnhGLE9BQXNDd0csS0FBQWMsRUFBQXV5RixHQUFBenhGLEVBQUE4b0csR0FBQTdRLEtBQUExZ0csRUFBQTZHLFNBQUEsR0FBQTdFLEdBQUF5RyxFQUFBLFFBQUErMkQsTUFBQSxLQUFBdmhELE9BQUF0VyxJQUFBczFDLEVBQUEwa0QsRUFBQW54RixNQUFBcW1HLFFBQUFsdkcsT0FBa0dBLEdBQUF2SCxFQUFBNjhDLEVBQUE2NUQsYUFBQTc1RCxFQUFBODVELFdBQUFwdkcsRUFBQXMxQyxFQUFBMGtELEVBQUFueEYsTUFBQXFtRyxRQUFBbHZHLE9BQTRENUYsRUFBQTQvRixFQUFBcHlGLFFBQWF6TCxLQUFBNkQsRUFBQXF2RyxTQUFBOWMsRUFBQW4wRixLQUFBK0IsRUFBQW95QixRQUFBNXhCLEVBQUFxZ0csS0FBQXJnRyxFQUFBcWdHLEtBQUFpSixTQUFBeHhHLEVBQUFtcUcsYUFBQW5xRyxHQUFBdWhHLEVBQUFtUSxLQUFBLzhCLE1BQUF3MUIsYUFBQXZnRyxLQUFBNUosR0FBQTYyRyxVQUFBajFHLEVBQUErQyxLQUFBLE1BQWtJOEMsSUFBQTFHLEVBQUFtbUcsRUFBQTMvRixPQUFBeEcsRUFBQW1tRyxFQUFBMy9GLE9BQUF1dkcsY0FBQSxFQUFBajZELEVBQUFrNkQsUUFBQSxJQUFBbDZELEVBQUFrNkQsTUFBQTk1RyxLQUFBbUMsRUFBQXNJLEVBQUE5RixFQUFBc0MsSUFBQTlFLEVBQUF5dEcsa0JBQUF6dEcsRUFBQXl0RyxpQkFBQXRsRyxFQUFBckQsSUFBQTI0QyxFQUFBN2xDLE1BQUE2bEMsRUFBQTdsQyxJQUFBL1osS0FBQW1DLEVBQUF1QyxLQUFBbTRCLFFBQUF5dUUsT0FBQTVtRyxFQUFBbTRCLFFBQUF5dUUsS0FBQXJnRyxFQUFBcWdHLE9BQUF2b0csRUFBQWUsRUFBQWdGLE9BQUFoRixFQUFBKzFHLGdCQUFBLEVBQUFuMUcsR0FBQVosRUFBQXZDLEtBQUFtRCxHQUFBNC9GLEVBQUFueEYsTUFBQXFnQyxPQUFBbHBDLElBQUEsSUFBaVFtVSxPQUFBLFNBQUF0YyxFQUFBUSxFQUFBc0ksRUFBQVIsRUFBQTFILEdBQTRCLElBQUF5SCxFQUFBdkQsRUFBQW1FLEVBQUE2K0YsRUFBQXpnRyxFQUFBOUUsRUFBQWs3QyxFQUFBOTdDLEVBQUF3RyxFQUFBM0YsRUFBQWs0RixFQUFBMWdGLEVBQUFteEYsRUFBQWtLLFFBQUFyMUcsSUFBQW1yRyxFQUFBdnJHLElBQUFJLEdBQW1ELEdBQUFnYSxJQUFBOHRGLEVBQUE5dEYsRUFBQW05RixRQUFBLENBQXdELElBQXBDOXZHLEdBQUE3RyxNQUFBLElBQUErMEUsTUFBQXljLEtBQUEsS0FBQW54RixPQUFvQ3dHLEtBQUEsR0FBQWMsRUFBQXV5RixHQUFBenhGLEVBQUE4b0csR0FBQTdRLEtBQUExZ0csRUFBQTZHLFNBQUEsR0FBQTdFLEdBQUF5RyxFQUFBLFFBQUErMkQsTUFBQSxLQUFBdmhELE9BQUF0VyxFQUFBLENBQThOLElBQWxKczFDLEVBQUEwa0QsRUFBQW54RixNQUFBcW1HLFFBQUFsdkcsT0FBd0J4RyxFQUFBbW1HLEVBQUEzL0YsR0FBQUcsRUFBQW0xQyxFQUFBNjVELGFBQUE3NUQsRUFBQTg1RCxXQUFBcHZHLE9BQUFjLElBQUEsUUFBQWcrRixPQUFBLFVBQUF6a0csRUFBQStDLEtBQUEsNEJBQUFULEVBQUF1RCxFQUFBMUcsRUFBQWQsT0FBMEh3SCxLQUFBOUYsRUFBQVosRUFBQTBHLElBQUF6SCxHQUFBODVGLElBQUFuNEYsRUFBQWkxRyxVQUFBMXVHLEtBQUFxZ0csT0FBQTVtRyxFQUFBNG1HLE1BQUFsZ0csTUFBQXVCLEtBQUFqSSxFQUFBazFHLFlBQUFudkcsT0FBQS9GLEVBQUE2dkcsV0FBQSxPQUFBOXBHLElBQUEvRixFQUFBNnZHLFlBQUF6d0csRUFBQWdGLE9BQUEwQixFQUFBLEdBQUE5RixFQUFBNnZHLFVBQUF6d0csRUFBQSsxRyxnQkFBQWo2RCxFQUFBbmhDLFFBQUFtaEMsRUFBQW5oQyxPQUFBemUsS0FBQW1DLEVBQUF1QyxJQUF5TXVDLElBQUFuRCxFQUFBZCxTQUFBNDhDLEVBQUFtNkQsV0FBQSxJQUFBbjZELEVBQUFtNkQsU0FBQS81RyxLQUFBbUMsRUFBQXdDLEVBQUF3WCxFQUFBb1QsU0FBQSswRSxFQUFBMFYsWUFBQTczRyxFQUFBbUksRUFBQTZSLEVBQUFvVCxlQUFBMDZFLEVBQUEzL0YsU0FBd0csSUFBQUEsS0FBQTIvRixFQUFBM0YsRUFBQW54RixNQUFBc0wsT0FBQXRjLEVBQUFtSSxFQUFBM0gsRUFBQTZHLEdBQUF5QixFQUFBUixHQUFBLEdBQWdENjVGLEVBQUEyRyxjQUFBaEIsSUFBQXFELEVBQUE3dUYsT0FBQXRjLEVBQUEsbUJBQWlEcXBDLFNBQUEsU0FBQXJwQyxHQUFzQixJQUFBOEksRUFBQVIsRUFBQTFILEVBQUF5SCxFQUFBdkQsRUFBQW1FLEVBQUF6SSxFQUFBMmhHLEVBQUFueEYsTUFBQThtRyxJQUFBOTNHLEdBQUE4bkcsRUFBQSxJQUFBM25ELE1BQUFwdUMsVUFBQWxSLFFBQUF3RyxHQUFBOGpHLEVBQUF2ckcsSUFBQTBKLEtBQUEsZUFBMEY5SSxFQUFBOEQsVUFBQS9CLEVBQUE0L0YsRUFBQW54RixNQUFBcW1HLFFBQUE3MkcsRUFBQThELFVBQTRDLElBQUF3akcsRUFBQSxHQUFBdG5HLEVBQUFzSSxFQUFBLEVBQWVBLEVBQUFpSixVQUFBbFIsT0FBbUJpSSxJQUFBZy9GLEVBQUFoL0YsR0FBQWlKLFVBQUFqSixHQUFzQixHQUFBdEksRUFBQXUzRyxlQUFBenVHLE1BQUEvRyxFQUFBeTFHLGNBQUEsSUFBQXoxRyxFQUFBeTFHLFlBQUFuNkcsS0FBQXlMLEtBQUE5SSxHQUFBLENBQWdILElBQXRDeUksRUFBQWs1RixFQUFBbnhGLE1BQUFpbkcsU0FBQXA2RyxLQUFBeUwsS0FBQTlJLEVBQUE2RyxHQUFBeUIsRUFBQSxHQUFzQ1QsRUFBQVksRUFBQUgsUUFBQXRJLEVBQUEwM0csd0JBQXdFLElBQTNCMTNHLEVBQUEyM0csY0FBQTl2RyxFQUFBK3ZHLEtBQUE5dkcsRUFBQSxHQUEyQnhELEVBQUF1RCxFQUFBNHZHLFNBQUEzdkcsUUFBQTlILEVBQUE2M0csaUNBQUE3M0csRUFBQTgzRyxhQUFBOTNHLEVBQUE4M0csV0FBQTl0RyxLQUFBMUYsRUFBQTJ5RyxhQUFBajNHLEVBQUErM0csVUFBQXp6RyxFQUFBdEUsRUFBQStGLEtBQUF6QixFQUFBeUIsVUFBQSxLQUFBM0YsSUFBQXVoRyxFQUFBbnhGLE1BQUFxbUcsUUFBQXZ5RyxFQUFBMHlHLGVBQXVMcHFGLFFBQUF0b0IsRUFBQTQxQixTQUFBdjVCLE1BQUFrSCxFQUFBK3ZHLEtBQUF0USxNQUFBLEtBQUF0bkcsRUFBQTZDLE9BQUF6QyxLQUFBSixFQUFBZzRHLGlCQUFBaDRHLEVBQUFpNEcsb0JBQW9HLE9BQUFsMkcsRUFBQW0yRyxjQUFBbjJHLEVBQUFtMkcsYUFBQTc2RyxLQUFBeUwsS0FBQTlJLEtBQUE2QyxTQUE2RDQwRyxTQUFBLFNBQUFqNEcsRUFBQVEsR0FBd0IsSUFBQXNJLEVBQUFSLEVBQUExSCxFQUFBeUgsRUFBQXZELEVBQUFtRSxLQUFBNitGLEVBQUF0bkcsRUFBQWszRyxjQUFBcndHLEVBQUFySCxFQUFBNmdDLE9BQWdELEdBQUFpbkUsR0FBQXpnRyxFQUFBMGdHLFlBQUEsVUFBQS9uRyxFQUFBc0UsTUFBQXRFLEVBQUErd0csUUFBQSxRQUF3RDFwRyxJQUFBaUMsS0FBU2pDLElBQUE0Z0csWUFBQTMrRixLQUFBLE9BQUFqQyxFQUFBMGdHLFdBQUEsVUFBQS9uRyxFQUFBc0UsT0FBQSxJQUFBK0MsRUFBQXdrRyxVQUFBLENBQTZFLElBQUF4akcsS0FBQXZELEtBQWFnRSxFQUFBLEVBQUtBLEVBQUFnL0YsRUFBSWgvRixTQUFBLElBQUFoRSxFQUFBbEUsR0FBQTBILEVBQUE5SCxFQUFBc0ksSUFBQXNwRyxTQUFBLE9BQUF0dEcsRUFBQWxFLEdBQUEwSCxFQUFBeWlHLGFBQUE1SSxFQUFBdmhHLEVBQUEwSSxNQUFBK2EsTUFBQWhkLElBQUEsRUFBQTg2RixFQUFBNkwsS0FBQXB0RyxFQUFBMEksS0FBQSxNQUFBakMsSUFBQXhHLFFBQUFpRSxFQUFBbEUsSUFBQXlILEVBQUFqSixLQUFBa0osR0FBb0lELEVBQUF4SCxRQUFBb0ksRUFBQTdKLE1BQWtCZzVHLEtBQUEvd0csRUFBQTR3RyxTQUFBNXZHLElBQW9CLE9BQUFoQixFQUFBaUMsS0FBQXcrRixFQUFBdG5HLEVBQUFLLFFBQUFvSSxFQUFBN0osTUFBa0NnNUcsS0FBQS93RyxFQUFBNHdHLFNBQUF6M0csRUFBQXVELE1BQUErakcsS0FBMkI3K0YsR0FBSTB2RyxRQUFBLFNBQUEzNEcsRUFBQVEsR0FBdUI5QyxPQUFBcUMsZUFBQW9pRyxFQUFBeVcsTUFBQWo3RyxVQUFBcUMsR0FBMkNMLFlBQUEsRUFBQUQsY0FBQSxFQUFBRSxJQUFBODZGLEVBQUFsNkYsR0FBQSxXQUFrRCxHQUFBOEksS0FBQXV2RyxjQUFBLE9BQUFyNEcsRUFBQThJLEtBQUF1dkcsZ0JBQW1ELFdBQVksR0FBQXZ2RyxLQUFBdXZHLGNBQUEsT0FBQXZ2RyxLQUFBdXZHLGNBQUE3NEcsSUFBbURILElBQUEsU0FBQVcsR0FBaUI5QyxPQUFBcUMsZUFBQXVKLEtBQUF0SixHQUE4QkwsWUFBQSxFQUFBRCxjQUFBLEVBQUFvNUcsVUFBQSxFQUFBaDVHLE1BQUFVLFFBQXVEczNHLElBQUEsU0FBQTkzRyxHQUFpQixPQUFBQSxFQUFBbWlHLEVBQUF5RyxTQUFBNW9HLEVBQUEsSUFBQW1pRyxFQUFBeVcsTUFBQTU0RyxJQUFxQ3EzRyxTQUFVMEIsTUFBTUMsVUFBQSxHQUFZNUksT0FBUXBsRSxRQUFBLFdBQW1CLEdBQUExaEMsT0FBQTJ0RyxNQUFBM3RHLEtBQUE4bUcsTUFBQSxPQUFBOW1HLEtBQUE4bUcsU0FBQSxHQUFrRGtILGFBQUEsV0FBd0IyQixNQUFPanVFLFFBQUEsV0FBbUIsR0FBQTFoQyxPQUFBMnRHLE1BQUEzdEcsS0FBQTJ2RyxLQUFBLE9BQUEzdkcsS0FBQTJ2RyxRQUFBLEdBQWdEM0IsYUFBQSxZQUF5QjRCLE9BQVFsdUUsUUFBQSxXQUFtQixnQkFBQTFoQyxLQUFBaEYsTUFBQWdGLEtBQUE0dkcsT0FBQTFQLEVBQUFsZ0csS0FBQSxnQkFBQUEsS0FBQTR2RyxTQUFBLEdBQThFMXRHLFNBQUEsU0FBQXhMLEdBQXNCLE9BQUF3cEcsRUFBQXhwRyxFQUFBNmdDLE9BQUEsT0FBd0JzNEUsY0FBZVQsYUFBQSxTQUFBMTRHLFFBQXlCLElBQUFBLEVBQUFxRCxRQUFBckQsRUFBQTY0RyxnQkFBQTc0RyxFQUFBNjRHLGNBQUFPLFlBQUFwNUcsRUFBQXFELFlBQThFOCtGLEVBQUEwVixZQUFBLFNBQUE3M0csRUFBQVEsRUFBQXNJLEdBQStCOUksRUFBQWkxRyxxQkFBQWoxRyxFQUFBaTFHLG9CQUFBejBHLEVBQUFzSSxJQUFrRHE1RixFQUFBeVcsTUFBQSxTQUFBNTRHLEVBQUFRLEdBQXVCLEtBQUE4SSxnQkFBQTY0RixFQUFBeVcsT0FBQSxXQUFBelcsRUFBQXlXLE1BQUE1NEcsRUFBQVEsR0FBc0RSLEtBQUFzRSxNQUFBZ0YsS0FBQXV2RyxjQUFBNzRHLEVBQUFzSixLQUFBaEYsS0FBQXRFLEVBQUFzRSxLQUFBZ0YsS0FBQSt2RyxtQkFBQXI1RyxFQUFBczVHLHVCQUFBLElBQUF0NUcsRUFBQXM1RyxtQkFBQSxJQUFBdDVHLEVBQUFvNUcsWUFBQXBILEdBQUFnRixHQUFBMXRHLEtBQUF1M0IsT0FBQTdnQyxFQUFBNmdDLFFBQUEsSUFBQTdnQyxFQUFBNmdDLE9BQUFrbkUsU0FBQS9uRyxFQUFBNmdDLE9BQUFvbkUsV0FBQWpvRyxFQUFBNmdDLE9BQUF2M0IsS0FBQTZ1RyxjQUFBbjRHLEVBQUFtNEcsY0FBQTd1RyxLQUFBaXdHLGNBQUF2NUcsRUFBQXU1RyxlQUFBandHLEtBQUFoRixLQUFBdEUsRUFBQVEsR0FBQTJoRyxFQUFBcHlGLE9BQUF6RyxLQUFBOUksR0FBQThJLEtBQUFrd0csVUFBQXg1RyxLQUFBdzVHLFdBQUE3K0MsS0FBQTgrQyxNQUFBbndHLEtBQUE2NEYsRUFBQXlHLFVBQUEsR0FBZ1l6RyxFQUFBeVcsTUFBQWo3RyxXQUFvQm1OLFlBQUFxM0YsRUFBQXlXLE1BQUFTLG1CQUFBckMsR0FBQWtCLHFCQUFBbEIsR0FBQXFCLDhCQUFBckIsR0FBQTBDLGFBQUEsRUFBQWxCLGVBQUEsV0FBNEksSUFBQXg0RyxFQUFBc0osS0FBQXV2RyxjQUF5QnZ2RyxLQUFBK3ZHLG1CQUFBckgsR0FBQWh5RyxJQUFBc0osS0FBQW93RyxhQUFBMTVHLEVBQUF3NEcsa0JBQW9FQyxnQkFBQSxXQUE0QixJQUFBejRHLEVBQUFzSixLQUFBdXZHLGNBQXlCdnZHLEtBQUE0dUcscUJBQUFsRyxHQUFBaHlHLElBQUFzSixLQUFBb3dHLGFBQUExNUcsRUFBQXk0RyxtQkFBdUVrQix5QkFBQSxXQUFxQyxJQUFBMzVHLEVBQUFzSixLQUFBdXZHLGNBQXlCdnZHLEtBQUErdUcsOEJBQUFyRyxHQUFBaHlHLElBQUFzSixLQUFBb3dHLGFBQUExNUcsRUFBQTI1RywyQkFBQXJ3RyxLQUFBbXZHLG9CQUFpSHRXLEVBQUFqM0YsTUFBUzB1RyxRQUFBLEVBQUFDLFNBQUEsRUFBQUMsWUFBQSxFQUFBQyxnQkFBQSxFQUFBQyxTQUFBLEVBQUFDLFFBQUEsRUFBQUMsWUFBQSxFQUFBQyxTQUFBLEVBQUFDLE9BQUEsRUFBQUMsT0FBQSxFQUFBQyxVQUFBLEVBQUFsK0MsTUFBQSxFQUFBbStDLE1BQUEsRUFBQUMsVUFBQSxFQUFBNXhHLEtBQUEsRUFBQTZ4RyxTQUFBLEVBQUExSixRQUFBLEVBQUEySixTQUFBLEVBQUFDLFNBQUEsRUFBQUMsU0FBQSxFQUFBOXNGLFNBQUEsRUFBQUMsU0FBQSxFQUFBOHNGLFdBQUEsRUFBQUMsYUFBQSxFQUFBQyxTQUFBLEVBQUFDLFNBQUEsRUFBQUMsZUFBQSxFQUFBQyxXQUFBLEVBQUFDLFNBQUEsRUFBQUMsTUFBQSxTQUFBcDdHLEdBQStWLElBQUFRLEVBQUFSLEVBQUErd0csT0FBZSxhQUFBL3dHLEVBQUFvN0csT0FBQXhKLEdBQUFwbkcsS0FBQXhLLEVBQUFzRSxNQUFBLE1BQUF0RSxFQUFBdzZHLFNBQUF4NkcsRUFBQXc2RyxTQUFBeDZHLEVBQUF5NkcsU0FBQXo2RyxFQUFBbzdHLFlBQUEsSUFBQTU2RyxHQUFBcXhHLEdBQUFybkcsS0FBQXhLLEVBQUFzRSxNQUFBLEVBQUE5RCxFQUFBLElBQUFBLEVBQUEsSUFBQUEsRUFBQSxJQUFBUixFQUFBbzdHLFFBQStJalosRUFBQW54RixNQUFBMm5HLFNBQUF4VyxFQUFBajNGLE1BQTBCbXdHLFdBQUEsWUFBQUMsV0FBQSxXQUFBQyxhQUFBLGNBQUFDLGFBQUEsY0FBa0csU0FBQXg3RyxFQUFBUSxHQUFlMmhHLEVBQUFueEYsTUFBQXFtRyxRQUFBcjNHLElBQW9CczNHLGFBQUE5MkcsRUFBQSsyRyxTQUFBLzJHLEVBQUE0c0IsT0FBQSxTQUFBcHRCLEdBQTZDLElBQUE4SSxFQUFBbEksRUFBQVosRUFBQXU1RyxjQUFBbHhHLEVBQUFySSxFQUFBdTRHLFVBQTZDLE9BQUEzM0csUUFBN0MwSSxNQUE2QzY0RixFQUFBdU0sU0FBN0NwbEcsS0FBNkMxSSxNQUFBWixFQUFBc0UsS0FBQStELEVBQUFtdkcsU0FBQTF1RyxFQUFBVCxFQUFBcXlCLFFBQUF2NUIsTUFBQW1JLEtBQUF5SSxXQUFBL1IsRUFBQXNFLEtBQUE5RCxHQUFBc0ksTUFBdUdxNUYsRUFBQXJqRyxHQUFBaVIsUUFBZStILEdBQUEsU0FBQTlYLEVBQUFRLEVBQUFzSSxFQUFBUixHQUFxQixPQUFBNHVHLEdBQUE1dEcsS0FBQXRKLEVBQUFRLEVBQUFzSSxFQUFBUixJQUF3Qnd4RCxJQUFBLFNBQUE5NUQsRUFBQVEsRUFBQXNJLEVBQUFSLEdBQXVCLE9BQUE0dUcsR0FBQTV0RyxLQUFBdEosRUFBQVEsRUFBQXNJLEVBQUFSLEVBQUEsSUFBMEJpUixJQUFBLFNBQUF2WixFQUFBUSxFQUFBc0ksR0FBcUIsSUFBQVIsRUFBQTFILEVBQVEsR0FBQVosS0FBQXc0RyxnQkFBQXg0RyxFQUFBdTRHLFVBQUEsT0FBQWp3RyxFQUFBdEksRUFBQXU0RyxVQUFBcFcsRUFBQW5pRyxFQUFBKzNHLGdCQUFBeCtGLElBQUFqUixFQUFBbXZHLFVBQUFudkcsRUFBQWt2RyxTQUFBLElBQUFsdkcsRUFBQW12RyxVQUFBbnZHLEVBQUFrdkcsU0FBQWx2RyxFQUFBOHBHLFNBQUE5cEcsRUFBQW95QixTQUFBcHhCLEtBQThKLG9CQUFBdEosRUFBQSxDQUF1QixJQUFBWSxLQUFBWixFQUFBc0osS0FBQWlRLElBQUEzWSxFQUFBSixFQUFBUixFQUFBWSxJQUE4QixPQUFBMEksS0FBWSxXQUFBOUksR0FBQSxtQkFBQUEsSUFBQXNJLEVBQUF0SSxTQUFBLFFBQUFzSSxNQUFBa3VHLElBQUExdEcsS0FBQTRCLEtBQUEsV0FBdUZpM0YsRUFBQW54RixNQUFBc0wsT0FBQWhULEtBQUF0SixFQUFBOEksRUFBQXRJLFFBQWdDLElBQUFpN0csR0FBQSw4RkFBQUMsR0FBQSx3QkFBQUMsR0FBQSxvQ0FBQUMsR0FBQSwyQ0FBcU4sU0FBQUMsR0FBQTc3RyxFQUFBUSxHQUFpQixPQUFBZ3BHLEVBQUF4cEcsRUFBQSxVQUFBd3BHLEVBQUEsS0FBQWhwRyxFQUFBdW5HLFNBQUF2bkcsSUFBQTB1RyxXQUFBLE9BQUEvTSxFQUFBbmlHLEdBQUFYLFNBQUEsYUFBQVcsRUFBMkYsU0FBQTg3RyxHQUFBOTdHLEdBQWUsT0FBQUEsRUFBQXNFLE1BQUEsT0FBQXRFLEVBQUEwakUsYUFBQSxhQUFBMWpFLEVBQUFzRSxLQUFBdEUsRUFBMkQsU0FBQSs3RyxHQUFBLzdHLEdBQWUsaUJBQUFBLEVBQUFzRSxNQUFBLElBQUFQLE1BQUEsS0FBQS9ELEVBQUFzRSxLQUFBdEUsRUFBQXNFLEtBQUFQLE1BQUEsR0FBQS9ELEVBQUF3c0csZ0JBQUEsUUFBQXhzRyxFQUEyRixTQUFBZzhHLEdBQUFoOEcsRUFBQVEsR0FBaUIsSUFBQXNJLEVBQUFSLEVBQUExSCxFQUFBeUgsRUFBQXZELEVBQUFtRSxFQUFBNitGLEVBQUF6Z0csRUFBb0IsT0FBQTdHLEVBQUF1bkcsU0FBQSxDQUFtQixHQUFBb0QsRUFBQWtLLFFBQUFyMUcsS0FBQXFJLEVBQUE4aUcsRUFBQWlLLE9BQUFwMUcsR0FBQThFLEVBQUFxbUcsRUFBQXRyRyxJQUFBVyxFQUFBNkgsR0FBQWhCLEVBQUFnQixFQUFBOHVHLFFBQXNGLElBQUF2MkcsWUFBNUJrRSxFQUFBc29CLE9BQUF0b0IsRUFBQXF5RyxVQUE0Qjl2RyxFQUFBLElBQUF5QixFQUFBLEVBQUFSLEVBQUFqQixFQUFBekcsR0FBQUMsT0FBaUNpSSxFQUFBUixFQUFJUSxJQUFBcTVGLEVBQUFueEYsTUFBQTRHLElBQUFwWCxFQUFBSSxFQUFBeUcsRUFBQXpHLEdBQUFrSSxJQUE2QnNpRyxHQUFBaUssUUFBQXIxRyxLQUFBaUosRUFBQW1pRyxHQUFBZ0ssT0FBQXAxRyxHQUFBOG5HLEVBQUEzRixFQUFBcHlGLFVBQTBDOUcsR0FBQW1pRyxHQUFBdnJHLElBQUFXLEVBQUFzbkcsS0FBaUIsU0FBQW1VLEdBQUFqOEcsRUFBQVEsR0FBaUIsSUFBQXNJLEVBQUF0SSxFQUFBNHJHLFNBQUE3MEMsY0FBK0IsVUFBQXp1RCxHQUFBb2tHLEdBQUExaUcsS0FBQXhLLEVBQUFzRSxNQUFBOUQsRUFBQWt3RyxRQUFBMXdHLEVBQUEwd0csUUFBQSxVQUFBNW5HLEdBQUEsYUFBQUEsSUFBQXRJLEVBQUE2eEcsYUFBQXJ5RyxFQUFBcXlHLGNBQThHLFNBQUE2SixHQUFBbDhHLEVBQUFRLEVBQUFzSSxFQUFBUixHQUFxQjlILEVBQUFzRSxFQUFBM0QsU0FBQVgsR0FBZ0IsSUFBQUksRUFBQXlILEVBQUFZLEVBQUE2K0YsRUFBQXpnRyxFQUFBOUUsRUFBQWs3QyxFQUFBLEVBQUE5N0MsRUFBQTNCLEVBQUFhLE9BQUFzSCxFQUFBeEcsRUFBQSxFQUFBcVksRUFBQXhaLEVBQUEsR0FBQXN5RCxFQUFBNG5DLEVBQUExZ0YsR0FBbUQsR0FBQTg0QyxHQUFBbnhELEVBQUEsb0JBQUFxWSxJQUFBeFgsRUFBQXEwRyxZQUFBOEUsR0FBQW54RyxLQUFBd1AsR0FBQSxPQUFBaGEsRUFBQWtMLEtBQUEsU0FBQXRLLEdBQW1GLElBQUF5SCxFQUFBckksRUFBQTBvRyxHQUFBOW5HLEdBQWNreUQsSUFBQXR5RCxFQUFBLEdBQUF3WixFQUFBbmMsS0FBQXlMLEtBQUExSSxFQUFBeUgsRUFBQXVtQyxTQUFBc3RFLEdBQUE3ekcsRUFBQTdILEVBQUFzSSxFQUFBUixLQUFnRCxHQUFBM0csSUFBQTBHLEdBQUF6SCxFQUFBK3dHLEdBQUFueEcsRUFBQVIsRUFBQSxHQUFBZ3NHLGVBQUEsRUFBQWhzRyxFQUFBc0ksSUFBQTRtRyxXQUFBLElBQUF0dUcsRUFBQWtyRyxXQUFBanJHLFNBQUFELEVBQUF5SCxNQUFBQyxHQUFBLENBQThGLElBQUF3L0YsR0FBQTcrRixFQUFBazVGLEVBQUFuK0YsSUFBQTB0RyxHQUFBOXdHLEVBQUEsVUFBQWs3RyxLQUFBajdHLE9BQTBDNDhDLEVBQUE5N0MsRUFBSTg3QyxJQUFBcDJDLEVBQUF6RyxFQUFBNjhDLElBQUF0MUMsSUFBQWQsRUFBQTg2RixFQUFBbDRFLE1BQUE1aUIsR0FBQSxNQUFBeWdHLEdBQUEzRixFQUFBeDNDLE1BQUExaEQsRUFBQXlvRyxHQUFBcnFHLEVBQUEsWUFBQXlCLEVBQUFqTCxLQUFBbUMsRUFBQXk5QyxHQUFBcDJDLEVBQUFvMkMsR0FBa0YsR0FBQXFxRCxFQUFBLElBQUF2bEcsRUFBQTBHLElBQUFwSSxPQUFBLEdBQUFtckcsY0FBQTdKLEVBQUFuK0YsSUFBQWlGLEVBQUE4eUcsSUFBQXQrRCxFQUFBLEVBQXVEQSxFQUFBcXFELEVBQUlycUQsSUFBQXAyQyxFQUFBNEIsRUFBQXcwQyxHQUFBNHZELEdBQUE3aUcsS0FBQW5ELEVBQUEvQyxNQUFBLE1BQUE2bUcsRUFBQWlLLE9BQUEvdEcsRUFBQSxlQUFBODZGLEVBQUF1TSxTQUFBbnNHLEVBQUE4RSxPQUFBckUsS0FBQSxZQUFBcUUsRUFBQS9DLE1BQUEsSUFBQWl6RCxjQUFBNHFDLEVBQUFnYSxVQUFBaGEsRUFBQWdhLFNBQUE5MEcsRUFBQXJFLEtBQUFrRixFQUFBYixFQUFBNG5HLFlBQUF4a0csUUFBQW14RyxHQUFBLElBQUFyNUcsRUFBQThFLElBQTZMLE9BQUFySCxFQUFTLFNBQUFvOEcsR0FBQXA4RyxFQUFBUSxFQUFBc0ksR0FBbUIsUUFBQVIsRUFBQTFILEVBQUFKLEVBQUEyaEcsRUFBQXBrRCxPQUFBdjlDLEVBQUFSLEtBQUFxSSxFQUFBLEVBQWtDLE9BQUFDLEVBQUExSCxFQUFBeUgsSUFBZUEsSUFBQVMsR0FBQSxJQUFBUixFQUFBeS9GLFVBQUE1RixFQUFBa2EsVUFBQTNLLEdBQUFwcEcsTUFBQTIvRixhQUFBbi9GLEdBQUFxNUYsRUFBQXVNLFNBQUFwbUcsRUFBQTBqRyxjQUFBMWpHLElBQUErakcsR0FBQXFGLEdBQUFwcEcsRUFBQSxXQUFBQSxFQUFBMi9GLFdBQUFDLFlBQUE1L0YsSUFBMkksT0FBQXRJLEVBQVNtaUcsRUFBQXB5RixRQUFVNG1HLGNBQUEsU0FBQTMyRyxHQUEwQixPQUFBQSxFQUFBeUssUUFBQWd4RyxHQUFBLGNBQWlDeHhGLE1BQUEsU0FBQWpxQixFQUFBUSxFQUFBc0ksR0FBdUIsSUFBQVIsRUFBQTFILEVBQUF5SCxFQUFBdkQsRUFBQW1FLEVBQUFqSixFQUFBODJHLFdBQUEsR0FBQWhQLEVBQUEzRixFQUFBdU0sU0FBQTF1RyxFQUFBZ3NHLGNBQUFoc0csR0FBOEQsS0FBQXdDLEVBQUF1MEcsZ0JBQUEsSUFBQS8yRyxFQUFBK25HLFVBQUEsS0FBQS9uRyxFQUFBK25HLFVBQUE1RixFQUFBcVEsU0FBQXh5RyxJQUFBLElBQUE4RSxFQUFBNHNHLEdBQUF6b0csR0FBQVgsRUFBQSxFQUFBMUgsR0FBQXlILEVBQUFxcEcsR0FBQTF4RyxJQUFBYSxPQUEwR3lILEVBQUExSCxFQUFJMEgsSUFBQTJ6RyxHQUFBNXpHLEVBQUFDLEdBQUF4RCxFQUFBd0QsSUFBa0IsR0FBQTlILEVBQUEsR0FBQXNJLEVBQUEsSUFBQVQsS0FBQXFwRyxHQUFBMXhHLEdBQUE4RSxLQUFBNHNHLEdBQUF6b0csR0FBQVgsRUFBQSxFQUFBMUgsRUFBQXlILEVBQUF4SCxPQUFtRHlILEVBQUExSCxFQUFJMEgsSUFBQTB6RyxHQUFBM3pHLEVBQUFDLEdBQUF4RCxFQUFBd0QsU0FBa0IwekcsR0FBQWg4RyxFQUFBaUosR0FBYSxPQUFBbkUsRUFBQTRzRyxHQUFBem9HLEVBQUEsV0FBQXBJLE9BQUEsR0FBQXdyRyxHQUFBdm5HLEdBQUFnakcsR0FBQTRKLEdBQUExeEcsRUFBQSxXQUFBaUosR0FBOERvekcsVUFBQSxTQUFBcjhHLEdBQXVCLFFBQUFRLEVBQUFzSSxFQUFBUixFQUFBMUgsRUFBQXVoRyxFQUFBbnhGLE1BQUFxbUcsUUFBQWh2RyxFQUFBLE9BQW9DLEtBQUFTLEVBQUE5SSxFQUFBcUksSUFBa0JBLElBQUEsR0FBQTRpRyxFQUFBbmlHLEdBQUEsQ0FBYSxHQUFBdEksRUFBQXNJLEVBQUFxaUcsRUFBQXZDLFNBQUEsQ0FBbUIsR0FBQXBvRyxFQUFBMjJHLE9BQUEsSUFBQTd1RyxLQUFBOUgsRUFBQTIyRyxPQUFBdjJHLEVBQUEwSCxHQUFBNjVGLEVBQUFueEYsTUFBQXNMLE9BQUF4VCxFQUFBUixHQUFBNjVGLEVBQUEwVixZQUFBL3VHLEVBQUFSLEVBQUE5SCxFQUFBNHNCLFFBQW1GdGtCLEVBQUFxaUcsRUFBQXZDLGNBQUEsRUFBb0I5L0YsRUFBQXNpRyxHQUFBeEMsV0FBQTkvRixFQUFBc2lHLEdBQUF4QyxjQUFBLE9BQXNDekcsRUFBQXJqRyxHQUFBaVIsUUFBZXVzRyxPQUFBLFNBQUF0OEcsR0FBbUIsT0FBQW84RyxHQUFBOXlHLEtBQUF0SixHQUFBLElBQXFCc2MsT0FBQSxTQUFBdGMsR0FBb0IsT0FBQW84RyxHQUFBOXlHLEtBQUF0SixJQUFrQnFYLEtBQUEsU0FBQXJYLEdBQWtCLE9BQUE2VCxFQUFBdkssS0FBQSxTQUFBdEosR0FBMEIsZ0JBQUFBLEVBQUFtaUcsRUFBQTlxRixLQUFBL04sV0FBQXNuRyxRQUFBMWxHLEtBQUEsV0FBNEQsSUFBQTVCLEtBQUF5K0YsVUFBQSxLQUFBeitGLEtBQUF5K0YsVUFBQSxJQUFBeitGLEtBQUF5K0YsV0FBQXorRixLQUFBMmxHLFlBQUFqdkcsTUFBaUYsS0FBQUEsRUFBQStSLFVBQUFsUixTQUEwQjA3RyxPQUFBLFdBQW1CLE9BQUFMLEdBQUE1eUcsS0FBQXlJLFVBQUEsU0FBQS9SLEdBQXFDLElBQUFzSixLQUFBeStGLFVBQUEsS0FBQXorRixLQUFBeStGLFVBQUEsSUFBQXorRixLQUFBeStGLFVBQUE4VCxHQUFBdnlHLEtBQUF0SixHQUFBaUQsWUFBQWpELE1BQXNGdzhHLFFBQUEsV0FBb0IsT0FBQU4sR0FBQTV5RyxLQUFBeUksVUFBQSxTQUFBL1IsR0FBcUMsT0FBQXNKLEtBQUF5K0YsVUFBQSxLQUFBeitGLEtBQUF5K0YsVUFBQSxJQUFBeitGLEtBQUF5K0YsU0FBQSxDQUE2RCxJQUFBdm5HLEVBQUFxN0csR0FBQXZ5RyxLQUFBdEosR0FBaUJRLEVBQUFpOEcsYUFBQXo4RyxFQUFBUSxFQUFBMHVHLGdCQUFrQ3dOLE9BQUEsV0FBbUIsT0FBQVIsR0FBQTV5RyxLQUFBeUksVUFBQSxTQUFBL1IsR0FBcUNzSixLQUFBMitGLFlBQUEzK0YsS0FBQTIrRixXQUFBd1UsYUFBQXo4RyxFQUFBc0osU0FBd0RxekcsTUFBQSxXQUFrQixPQUFBVCxHQUFBNXlHLEtBQUF5SSxVQUFBLFNBQUEvUixHQUFxQ3NKLEtBQUEyK0YsWUFBQTMrRixLQUFBMitGLFdBQUF3VSxhQUFBejhHLEVBQUFzSixLQUFBMGpHLGdCQUFvRTRELE1BQUEsV0FBa0IsUUFBQTV3RyxFQUFBUSxFQUFBLEVBQWMsT0FBQVIsRUFBQXNKLEtBQUE5SSxJQUFrQkEsSUFBQSxJQUFBUixFQUFBK25HLFdBQUE1RixFQUFBa2EsVUFBQTNLLEdBQUExeEcsR0FBQSxJQUFBQSxFQUFBaXZHLFlBQUEsSUFBNkQsT0FBQTNsRyxNQUFZMmdCLE1BQUEsU0FBQWpxQixFQUFBUSxHQUFxQixPQUFBUixFQUFBLE1BQUFBLEtBQUFRLEVBQUEsTUFBQUEsRUFBQVIsRUFBQVEsRUFBQThJLEtBQUF0RixJQUFBLFdBQXNELE9BQUFtK0YsRUFBQWw0RSxNQUFBM2dCLEtBQUF0SixFQUFBUSxNQUEyQm91QyxLQUFBLFNBQUE1dUMsR0FBa0IsT0FBQTZULEVBQUF2SyxLQUFBLFNBQUF0SixHQUEwQixJQUFBUSxFQUFBOEksS0FBQSxPQUFpQlIsRUFBQSxFQUFBUixFQUFBZ0IsS0FBQXpJLE9BQW1CLFlBQUFiLEdBQUEsSUFBQVEsRUFBQXVuRyxTQUFBLE9BQUF2bkcsRUFBQXVwQyxVQUFpRCxvQkFBQS9wQyxJQUFBMDdHLEdBQUFseEcsS0FBQXhLLEtBQUFzc0csSUFBQWEsR0FBQWpNLEtBQUFsaEcsS0FBQSxXQUFBdTNELGVBQUEsQ0FBaUZ2M0QsRUFBQW1pRyxFQUFBd1UsY0FBQTMyRyxHQUFxQixJQUFJLEtBQUs4SSxFQUFBUixFQUFJUSxJQUFBLEtBQUF0SSxFQUFBOEksS0FBQVIsUUFBc0JpL0YsV0FBQTVGLEVBQUFrYSxVQUFBM0ssR0FBQWx4RyxHQUFBLElBQUFBLEVBQUF1cEMsVUFBQS9wQyxHQUFrRFEsRUFBQSxFQUFJLE1BQUFSLEtBQVdRLEdBQUE4SSxLQUFBc25HLFFBQUEyTCxPQUFBdjhHLElBQTBCLEtBQUFBLEVBQUErUixVQUFBbFIsU0FBMEIrN0csWUFBQSxXQUF3QixJQUFBNThHLEtBQVMsT0FBQWs4RyxHQUFBNXlHLEtBQUF5SSxVQUFBLFNBQUF2UixHQUFxQyxJQUFBc0ksRUFBQVEsS0FBQTIrRixXQUFzQjlGLEVBQUE4RyxRQUFBMy9GLEtBQUF0SixHQUFBLElBQUFtaUcsRUFBQWthLFVBQUEzSyxHQUFBcG9HLE9BQUFSLEtBQUErekcsYUFBQXI4RyxFQUFBOEksUUFBdUV0SixNQUFLbWlHLEVBQUFqM0YsTUFBVTR4RyxTQUFBLFNBQUFDLFVBQUEsVUFBQU4sYUFBQSxTQUFBTyxZQUFBLFFBQUFDLFdBQUEsZUFBeUcsU0FBQWo5RyxFQUFBUSxHQUFlMmhHLEVBQUFyakcsR0FBQWtCLEdBQUEsU0FBQUEsR0FBb0IsUUFBQThJLEVBQUFSLEtBQUExSCxFQUFBdWhHLEVBQUFuaUcsR0FBQXFJLEVBQUF6SCxFQUFBQyxPQUFBLEVBQUFpRSxFQUFBLEVBQXVDQSxHQUFBdUQsRUFBS3ZELElBQUFnRSxFQUFBaEUsSUFBQXVELEVBQUFpQixVQUFBMmdCLE9BQUEsR0FBQWs0RSxFQUFBdmhHLEVBQUFrRSxJQUFBdEUsR0FBQXNJLEdBQUFHLEVBQUE5SCxNQUFBbUgsRUFBQVEsRUFBQWxKLE9BQWlFLE9BQUEwSixLQUFBaS9GLFVBQUFqZ0csTUFBNEIsSUFBQTQwRyxHQUFBLElBQUFqVyxPQUFBLEtBQUEwRSxHQUFBLHVCQUFBd1IsR0FBQSxTQUFBMzhHLEdBQWdFLElBQUFzSSxFQUFBdEksRUFBQXdyRyxjQUFBcmlFLFlBQWtDLE9BQUE3Z0MsS0FBQXMwRyxTQUFBdDBHLEVBQUE5SSxHQUFBOEksRUFBQThnQyxpQkFBQXBwQyxJQUFnRDY4RyxHQUFBLElBQUFwVyxPQUFBOEUsR0FBQXhtRyxLQUFBLFVBQTIvQixTQUFBKzNHLEdBQUF0OUcsRUFBQVEsRUFBQXNJLEdBQW1CLElBQUFSLEVBQUExSCxFQUFBeUgsRUFBQXZELEVBQUFtRSxFQUFBakosRUFBQWlhLE1BQXNCLE9BQUFuUixLQUFBcTBHLEdBQUFuOUcsTUFBQSxNQUFBOEUsRUFBQWdFLEVBQUF5MEcsaUJBQUEvOEcsSUFBQXNJLEVBQUF0SSxLQUFBMmhHLEVBQUF1TSxTQUFBMXVHLEVBQUFnc0csY0FBQWhzRyxLQUFBOEUsRUFBQXE5RixFQUFBbG9GLE1BQUFqYSxFQUFBUSxLQUFBZ0MsRUFBQWc3RyxrQkFBQU4sR0FBQTF5RyxLQUFBMUYsSUFBQXU0RyxHQUFBN3lHLEtBQUFoSyxLQUFBOEgsRUFBQVcsRUFBQThMLE1BQUFuVSxFQUFBcUksRUFBQXcwRyxTQUFBcDFHLEVBQUFZLEVBQUE4ZixTQUFBOWYsRUFBQXcwRyxTQUFBeDBHLEVBQUE4ZixTQUFBOWYsRUFBQThMLE1BQUFqUSxJQUFBZ0UsRUFBQWlNLE1BQUE5TCxFQUFBOEwsTUFBQXpNLEVBQUFXLEVBQUF3MEcsU0FBQTc4RyxFQUFBcUksRUFBQThmLFNBQUExZ0IsU0FBQSxJQUFBdkQsSUFBQSxHQUFBQSxFQUErUixTQUFBNDRHLEdBQUExOUcsRUFBQVEsR0FBaUIsT0FBT1osSUFBQSxXQUFlLElBQUFJLElBQUEsT0FBQXNKLEtBQUExSixJQUFBWSxHQUFBVyxNQUFBbUksS0FBQXlJLGtCQUFpRHpJLEtBQUExSixPQUExM0MsV0FBWSxTQUFBWSxJQUFhLEdBQUErQixFQUFBLENBQU04RSxFQUFBNFMsTUFBQXl0QixRQUFBLCtFQUFxRm5sQyxFQUFBMFgsTUFBQXl0QixRQUFBLDRIQUE4SW9xRSxHQUFBN3VHLFlBQUFvRSxHQUFBcEUsWUFBQVYsR0FBeUMsSUFBQS9CLEVBQUFSLEVBQUE0cEMsaUJBQUFybkMsR0FBNEIzQixFQUFBLE9BQUFKLEVBQUFvaUMsSUFBQWtsRSxFQUFBLEtBQUFoL0YsRUFBQXRJLEVBQUFtOUcsWUFBQXA3RyxFQUFBMFgsTUFBQWtoQyxNQUFBLE1BQUFseUMsRUFBQSxLQUFBSCxFQUFBdEksRUFBQTI2QyxPQUFBOXlDLEVBQUEsS0FBQVMsRUFBQXRJLEVBQUF1VSxPQUFBeFMsRUFBQTBYLE1BQUF0RixTQUFBLFdBQUE3UCxFQUFBLEtBQUF2QyxFQUFBcTdHLGFBQUEsV0FBQTlMLEdBQUE1SixZQUFBN2dHLEdBQUE5RSxFQUFBLE1BQXFMLFNBQUF1RyxFQUFBOUksR0FBYyxPQUFBcVcsS0FBQSt4QixNQUFBbzZDLFdBQUF4aUYsSUFBaUMsSUFBQVksRUFBQXlILEVBQUF2RCxFQUFBbUUsRUFBQTYrRixFQUFBemdHLEVBQUFpQixFQUFBeEYsY0FBQSxPQUFBUCxFQUFBK0YsRUFBQXhGLGNBQUEsT0FBZ0VQLEVBQUEwWCxRQUFBMVgsRUFBQTBYLE1BQUE0akcsZUFBQSxjQUFBdDdHLEVBQUF1MEcsV0FBQSxHQUFBNzhGLE1BQUE0akcsZUFBQSxHQUFBcjdHLEVBQUFzN0csZ0JBQUEsZ0JBQUF2N0csRUFBQTBYLE1BQUE0akcsZUFBQTFiLEVBQUFweUYsT0FBQXZOLEdBQTRKdTdHLGtCQUFBLFdBQTZCLE9BQUF2OUcsSUFBQTZILEdBQWFtMUcsZUFBQSxXQUEyQixPQUFBaDlHLElBQUF5SSxHQUFhKzBHLGNBQUEsV0FBMEIsT0FBQXg5RyxJQUFBSSxHQUFhcTlHLG1CQUFBLFdBQStCLE9BQUF6OUcsSUFBQXNuRyxHQUFhb1csY0FBQSxXQUEwQixPQUFBMTlHLElBQUFzRSxNQUF0OEIsR0FBNDRDLElBQUFxNUcsR0FBQSw0QkFBQUMsR0FBQSxNQUFBQyxJQUFnRDFwRyxTQUFBLFdBQUEycEcsV0FBQSxTQUFBeDBFLFFBQUEsU0FBd0R5MEUsSUFBS0MsY0FBQSxJQUFBaDRFLFdBQUEsT0FBbUNpNEUsSUFBQSxxQkFBQUMsR0FBQXAyRyxFQUFBeEYsY0FBQSxPQUFBbVgsTUFBb0wsU0FBQTBrRyxHQUFBMytHLEdBQWUsSUFBQVEsRUFBQTJoRyxFQUFBeWMsU0FBQTUrRyxHQUFvQixPQUFBUSxNQUFBMmhHLEVBQUF5YyxTQUFBNStHLEdBQTdKLFNBQUFBLEdBQWUsR0FBQUEsS0FBQTArRyxHQUFBLE9BQUExK0csRUFBb0UsSUFBaEQsSUFBQVEsRUFBQVIsRUFBQSxHQUFBeXhGLGNBQUF6eEYsRUFBQStELE1BQUEsR0FBQStFLEVBQUEyMUcsR0FBQTU5RyxPQUFnRGlJLEtBQUEsSUFBQTlJLEVBQUF5K0csR0FBQTMxRyxHQUFBdEksS0FBQWsrRyxHQUFBLE9BQUExK0csRUFBMEU2K0csQ0FBQTcrRyxPQUFBUSxFQUF1QyxTQUFBcytHLEdBQUE5K0csRUFBQVEsRUFBQXNJLEdBQW1CLElBQUFSLEVBQUFzakcsR0FBQTFLLEtBQUExZ0csR0FBaUIsT0FBQThILEVBQUErTixLQUFBbUcsSUFBQSxFQUFBbFUsRUFBQSxJQUFBUSxHQUFBLEtBQUFSLEVBQUEsVUFBQTlILEVBQWdELFNBQUF1K0csR0FBQS8rRyxFQUFBUSxFQUFBc0ksRUFBQVIsRUFBQTFILEVBQUF5SCxHQUF5QixJQUFBdkQsRUFBQSxVQUFBdEUsRUFBQSxJQUFBeUksRUFBQSxFQUFBNitGLEVBQUEsRUFBOEIsR0FBQWgvRixLQUFBUixFQUFBLDZCQUF1QyxLQUFLeEQsRUFBQSxFQUFJQSxHQUFBLGFBQUFnRSxJQUFBZy9GLEdBQUEzRixFQUFBd1QsSUFBQTMxRyxFQUFBOEksRUFBQWlqRyxHQUFBam5HLElBQUEsRUFBQWxFLElBQUEwSCxHQUFBLFlBQUFRLElBQUFnL0YsR0FBQTNGLEVBQUF3VCxJQUFBMzFHLEVBQUEsVUFBQStyRyxHQUFBam5HLElBQUEsRUFBQWxFLElBQUEsV0FBQWtJLElBQUFnL0YsR0FBQTNGLEVBQUF3VCxJQUFBMzFHLEVBQUEsU0FBQStyRyxHQUFBam5HLEdBQUEsV0FBQWxFLE1BQUFrbkcsR0FBQTNGLEVBQUF3VCxJQUFBMzFHLEVBQUEsVUFBQStyRyxHQUFBam5HLElBQUEsRUFBQWxFLEdBQUEsWUFBQWtJLEVBQUFnL0YsR0FBQTNGLEVBQUF3VCxJQUFBMzFHLEVBQUEsU0FBQStyRyxHQUFBam5HLEdBQUEsV0FBQWxFLEdBQUFxSSxHQUFBazVGLEVBQUF3VCxJQUFBMzFHLEVBQUEsU0FBQStyRyxHQUFBam5HLEdBQUEsV0FBQWxFLElBQTZSLE9BQUEwSCxHQUFBRCxHQUFBLElBQUF5L0YsR0FBQXp4RixLQUFBbUcsSUFBQSxFQUFBbkcsS0FBQW9oQyxLQUFBejNDLEVBQUEsU0FBQVEsRUFBQSxHQUFBaXhGLGNBQUFqeEYsRUFBQXVELE1BQUEsSUFBQXNFLEVBQUF5L0YsRUFBQTcrRixFQUFBLE1BQUE2K0YsRUFBaUcsU0FBQWtYLEdBQUFoL0csRUFBQVEsRUFBQXNJLEdBQW1CLElBQUFSLEVBQUE2MEcsR0FBQW45RyxHQUFBWSxFQUFBMDhHLEdBQUF0OUcsRUFBQVEsRUFBQThILEdBQUFELEVBQUEsZUFBQTg1RixFQUFBd1QsSUFBQTMxRyxFQUFBLGVBQUFzSSxHQUFBeEQsRUFBQXVELEVBQXVFLEdBQUE2MEcsR0FBQTF5RyxLQUFBNUosR0FBQSxDQUFlLElBQUFrSSxFQUFBLE9BQUFsSSxFQUFlQSxFQUFBLE9BQVMsT0FBQWtFLE1BQUF0QyxFQUFBdTdHLHFCQUFBbjlHLElBQUFaLEVBQUFpYSxNQUFBelosS0FBQSxTQUFBSSxJQUFBNGhGLFdBQUE1aEYsSUFBQSxXQUFBdWhHLEVBQUF3VCxJQUFBMzFHLEVBQUEsYUFBQXNJLE1BQUExSCxFQUFBWixFQUFBLFNBQUFRLEVBQUEsR0FBQWl4RixjQUFBanhGLEVBQUF1RCxNQUFBLElBQUFlLEdBQUEsSUFBQWxFLEVBQUE0aEYsV0FBQTVoRixJQUFBLEdBQUFtK0csR0FBQS8rRyxFQUFBUSxFQUFBc0ksSUFBQVQsRUFBQSxvQkFBQXZELEVBQUF3RCxFQUFBMUgsR0FBQSxLQUErOUUsU0FBQXErRyxHQUFBai9HLEVBQUFRLEVBQUFzSSxFQUFBUixFQUFBMUgsR0FBdUIsV0FBQXErRyxHQUFBdGhILFVBQUFpVSxLQUFBNVIsRUFBQVEsRUFBQXNJLEVBQUFSLEVBQUExSCxHQUEzd0V1aEcsRUFBQXB5RixRQUFVbXZHLFVBQVVoa0csU0FBU3RiLElBQUEsU0FBQUksRUFBQVEsR0FBa0IsR0FBQUEsRUFBQSxDQUFNLElBQUFzSSxFQUFBdzBHLEdBQUF0OUcsRUFBQSxXQUFzQixXQUFBOEksRUFBQSxJQUFBQSxNQUFzQitzRyxXQUFZc0oseUJBQUEsRUFBQUMsYUFBQSxFQUFBQyxhQUFBLEVBQUFDLFVBQUEsRUFBQUMsWUFBQSxFQUFBLzRFLFlBQUEsRUFBQWc1RSxZQUFBLEVBQUF0a0csU0FBQSxFQUFBdWtHLE9BQUEsRUFBQUMsU0FBQSxFQUFBQyxRQUFBLEVBQUFDLFFBQUEsRUFBQTUzQyxNQUFBLEdBQTBLNDJDLFlBQVkza0csTUFBQSxTQUFBamEsRUFBQVEsRUFBQXNJLEVBQUFSLEdBQXlCLEdBQUF0SSxHQUFBLElBQUFBLEVBQUErbkcsVUFBQSxJQUFBL25HLEVBQUErbkcsVUFBQS9uRyxFQUFBaWEsTUFBQSxDQUErQyxJQUFBclosRUFBQXlILEVBQUF2RCxFQUFBbUUsRUFBQStoRyxFQUFBeHFHLEdBQUFzbkcsRUFBQXNXLEdBQUE1ekcsS0FBQWhLLEdBQUE2RyxFQUFBckgsRUFBQWlhLE1BQXdDLEdBQUE2dEYsSUFBQXRuRyxFQUFBbStHLEdBQUExMUcsSUFBQW5FLEVBQUFxOUYsRUFBQStjLFNBQUExK0csSUFBQTJoRyxFQUFBK2MsU0FBQWoyRyxRQUFBLElBQUFILEVBQUEsT0FBQWhFLEdBQUEsUUFBQUEsUUFBQSxLQUFBbEUsRUFBQWtFLEVBQUFsRixJQUFBSSxHQUFBLEVBQUFzSSxJQUFBMUgsRUFBQXlHLEVBQUE3RyxHQUFpSCxXQUFBNkgsU0FBQVMsS0FBQWxJLEVBQUFnckcsR0FBQTFLLEtBQUFwNEYsS0FBQWxJLEVBQUEsS0FBQWtJLEVBQUE2akcsR0FBQTNzRyxFQUFBUSxFQUFBSSxHQUFBeUgsRUFBQSxnQkFBQVMsVUFBQSxXQUFBVCxJQUFBUyxHQUFBbEksS0FBQSxLQUFBdWhHLEVBQUEwVCxVQUFBNXNHLEdBQUEsVUFBQXpHLEVBQUFzN0csaUJBQUEsS0FBQWgxRyxHQUFBLElBQUF0SSxFQUFBckIsUUFBQSxnQkFBQWtJLEVBQUE3RyxHQUFBLFdBQUFzRSxHQUFBLFFBQUFBLFFBQUEsS0FBQWdFLEVBQUFoRSxFQUFBakYsSUFBQUcsRUFBQThJLEVBQUFSLE1BQUF3L0YsRUFBQXpnRyxFQUFBdzRHLFlBQUFyL0csRUFBQXNJLEdBQUF6QixFQUFBN0csR0FBQXNJLE1BQStSNnNHLElBQUEsU0FBQTMxRyxFQUFBUSxFQUFBc0ksRUFBQVIsR0FBdUIsSUFBQTFILEVBQUF5SCxFQUFBdkQsRUFBQW1FLEVBQUEraEcsRUFBQXhxRyxHQUFpQixPQUFBNDlHLEdBQUE1ekcsS0FBQWhLLE9BQUFtK0csR0FBQTExRyxLQUFBbkUsRUFBQXE5RixFQUFBK2MsU0FBQTErRyxJQUFBMmhHLEVBQUErYyxTQUFBajJHLEtBQUEsUUFBQW5FLElBQUFsRSxFQUFBa0UsRUFBQWxGLElBQUFJLEdBQUEsRUFBQThJLFNBQUEsSUFBQWxJLE1BQUEwOEcsR0FBQXQ5RyxFQUFBUSxFQUFBOEgsSUFBQSxXQUFBMUgsR0FBQUosS0FBQSs5RyxLQUFBMzlHLEVBQUEyOUcsR0FBQS85RyxJQUFBLEtBQUFzSSxNQUFBVCxFQUFBbTZFLFdBQUE1aEYsSUFBQSxJQUFBa0ksR0FBQTZmLFNBQUF0Z0IsTUFBQSxFQUFBekgsUUFBaU51aEcsRUFBQWozRixNQUFBLDJCQUFBbEwsRUFBQVEsR0FBMEMyaEcsRUFBQStjLFNBQUExK0csSUFBZVosSUFBQSxTQUFBSSxFQUFBOEksRUFBQVIsR0FBb0IsR0FBQVEsRUFBQSxPQUFBcTFHLEdBQUEzekcsS0FBQTIzRixFQUFBd1QsSUFBQTMxRyxFQUFBLGFBQUFBLEVBQUE4L0csaUJBQUFqL0csUUFBQWIsRUFBQWs5RCx3QkFBQW5vRCxNQUFBaXFHLEdBQUFoL0csRUFBQVEsRUFBQThILEdBQUFva0csR0FBQTFzRyxFQUFBcStHLEdBQUEsV0FBaUksT0FBQVcsR0FBQWgvRyxFQUFBUSxFQUFBOEgsTUFBbUJ6SSxJQUFBLFNBQUFHLEVBQUE4SSxFQUFBUixHQUFxQixJQUFBMUgsRUFBQXlILEVBQUE4MEcsR0FBQW45RyxHQUFBOEUsRUFBQSxlQUFBcTlGLEVBQUF3VCxJQUFBMzFHLEVBQUEsZUFBQXFJLEdBQUFZLEVBQUFYLEdBQUF5MkcsR0FBQS8rRyxFQUFBUSxFQUFBOEgsRUFBQXhELEVBQUF1RCxHQUE0RSxPQUFBdkQsR0FBQXRDLEVBQUEwN0csa0JBQUE3MUcsRUFBQXNNLFdBQUExTCxHQUFBb04sS0FBQW9oQyxLQUFBejNDLEVBQUEsU0FBQVEsRUFBQSxHQUFBaXhGLGNBQUFqeEYsRUFBQXVELE1BQUEsSUFBQXkrRSxXQUFBbjZFLEVBQUE3SCxJQUFBdStHLEdBQUEvK0csRUFBQVEsRUFBQSxZQUFBNkgsR0FBQSxLQUFBWSxJQUFBckksRUFBQWdyRyxHQUFBMUssS0FBQXA0RixLQUFBLFFBQUFsSSxFQUFBLFlBQUFaLEVBQUFpYSxNQUFBelosR0FBQXNJLElBQUFxNUYsRUFBQXdULElBQUEzMUcsRUFBQVEsSUFBQXMrRyxHQUFBOStHLEVBQUE4SSxFQUFBRyxPQUE4Tms1RixFQUFBK2MsU0FBQXZCLFdBQUFELEdBQUFsN0csRUFBQXk3RyxtQkFBQSxTQUFBaitHLEVBQUFRLEdBQThELEdBQUFBLEVBQUEsT0FBQWdpRixXQUFBODZCLEdBQUF0OUcsRUFBQSxnQkFBQUEsRUFBQWs5RCx3QkFBQXY2QixLQUFBK3BFLEdBQUExc0csR0FBaUYyOUcsV0FBQSxHQUFhLFdBQVksT0FBQTM5RyxFQUFBazlELHdCQUFBdjZCLFFBQXNDLE9BQVF3L0QsRUFBQWozRixNQUFVNGhCLE9BQUEsR0FBQUMsUUFBQSxHQUFBZ3pGLE9BQUEsU0FBb0MsU0FBQS8vRyxFQUFBUSxHQUFlMmhHLEVBQUErYyxTQUFBbC9HLEVBQUFRLElBQWlCdy9HLE9BQUEsU0FBQWwzRyxHQUFtQixRQUFBUixFQUFBLEVBQUExSCxLQUFnQnlILEVBQUEsaUJBQUFTLElBQUFrM0QsTUFBQSxNQUFBbDNELEdBQXVDUixFQUFBLEVBQUlBLElBQUExSCxFQUFBWixFQUFBK3JHLEdBQUF6akcsR0FBQTlILEdBQUE2SCxFQUFBQyxJQUFBRCxFQUFBQyxFQUFBLElBQUFELEVBQUEsR0FBb0MsT0FBQXpILElBQVUsV0FBQVosSUFBQW1pRyxFQUFBK2MsU0FBQWwvRyxFQUFBUSxHQUFBWCxJQUFBaS9HLE1BQXdDM2MsRUFBQXJqRyxHQUFBaVIsUUFBZTRsRyxJQUFBLFNBQUEzMUcsRUFBQVEsR0FBa0IsT0FBQXFULEVBQUF2SyxLQUFBLFNBQUF0SixFQUFBUSxFQUFBc0ksR0FBOEIsSUFBQVIsRUFBQTFILEVBQUF5SCxLQUFZdkQsRUFBQSxFQUFLLEdBQUFxN0MsTUFBQTV3QyxRQUFBL08sR0FBQSxDQUFxQixJQUFBOEgsRUFBQTYwRyxHQUFBbjlHLEdBQUFZLEVBQUFKLEVBQUFLLE9BQXVCaUUsRUFBQWxFLEVBQUlrRSxJQUFBdUQsRUFBQTdILEVBQUFzRSxJQUFBcTlGLEVBQUF3VCxJQUFBMzFHLEVBQUFRLEVBQUFzRSxJQUFBLEVBQUF3RCxHQUErQixPQUFBRCxFQUFTLGdCQUFBUyxFQUFBcTVGLEVBQUFsb0YsTUFBQWphLEVBQUFRLEVBQUFzSSxHQUFBcTVGLEVBQUF3VCxJQUFBMzFHLEVBQUFRLElBQTRDUixFQUFBUSxFQUFBdVIsVUFBQWxSLE9BQUEsTUFBMkZzaEcsRUFBQThkLE1BQUFoQixNQUFBdGhILFdBQXlCbU4sWUFBQW0wRyxHQUFBcnRHLEtBQUEsU0FBQTVSLEVBQUFRLEVBQUFzSSxFQUFBUixFQUFBMUgsRUFBQXlILEdBQTBDaUIsS0FBQTh1RyxLQUFBcDRHLEVBQUFzSixLQUFBMHZDLEtBQUFsd0MsRUFBQVEsS0FBQTQyRyxPQUFBdC9HLEdBQUF1aEcsRUFBQStkLE9BQUExMEcsU0FBQWxDLEtBQUEvRixRQUFBL0MsRUFBQThJLEtBQUFzTixNQUFBdE4sS0FBQW13RyxJQUFBbndHLEtBQUFzc0csTUFBQXRzRyxLQUFBc1UsSUFBQXRWLEVBQUFnQixLQUFBd3NHLEtBQUF6dEcsSUFBQTg1RixFQUFBMFQsVUFBQS9zRyxHQUFBLFVBQXdKOHNHLElBQUEsV0FBZ0IsSUFBQTUxRyxFQUFBaS9HLEdBQUFrQixVQUFBNzJHLEtBQUEwdkMsTUFBOEIsT0FBQWg1QyxLQUFBSixJQUFBSSxFQUFBSixJQUFBMEosTUFBQTIxRyxHQUFBa0IsVUFBQTMwRyxTQUFBNUwsSUFBQTBKLE9BQTREODJHLElBQUEsU0FBQXBnSCxHQUFpQixJQUFBUSxFQUFBc0ksRUFBQW0yRyxHQUFBa0IsVUFBQTcyRyxLQUFBMHZDLE1BQWdDLE9BQUExdkMsS0FBQS9GLFFBQUFxa0MsU0FBQXQrQixLQUFBaWIsSUFBQS9qQixFQUFBMmhHLEVBQUErZCxPQUFBNTJHLEtBQUE0MkcsUUFBQWxnSCxFQUFBc0osS0FBQS9GLFFBQUFxa0MsU0FBQTVuQyxFQUFBLElBQUFzSixLQUFBL0YsUUFBQXFrQyxVQUFBdCtCLEtBQUFpYixJQUFBL2pCLEVBQUFSLEVBQUFzSixLQUFBbXdHLEtBQUFud0csS0FBQXNVLElBQUF0VSxLQUFBc04sT0FBQXBXLEVBQUE4SSxLQUFBc04sTUFBQXROLEtBQUEvRixRQUFBaTBDLE1BQUFsdUMsS0FBQS9GLFFBQUFpMEMsS0FBQTM1QyxLQUFBeUwsS0FBQTh1RyxLQUFBOXVHLEtBQUFtd0csSUFBQW53RyxNQUFBUixLQUFBakosSUFBQWlKLEVBQUFqSixJQUFBeUosTUFBQTIxRyxHQUFBa0IsVUFBQTMwRyxTQUFBM0wsSUFBQXlKLGFBQTBTMjFHLEdBQUF0aEgsVUFBQWlVLEtBQUFqVSxVQUFBc2hILEdBQUF0aEgsVUFBQXNoSCxHQUFBa0IsV0FBd0QzMEcsVUFBVTVMLElBQUEsU0FBQUksR0FBZ0IsSUFBQVEsRUFBTSxXQUFBUixFQUFBbzRHLEtBQUFyUSxVQUFBLE1BQUEvbkcsRUFBQW80RyxLQUFBcDRHLEVBQUFnNUMsT0FBQSxNQUFBaDVDLEVBQUFvNEcsS0FBQW4rRixNQUFBamEsRUFBQWc1QyxNQUFBaDVDLEVBQUFvNEcsS0FBQXA0RyxFQUFBZzVDLE9BQUF4NEMsRUFBQTJoRyxFQUFBd1QsSUFBQTMxRyxFQUFBbzRHLEtBQUFwNEcsRUFBQWc1QyxLQUFBLGVBQUF4NEMsSUFBQSxHQUF3SVgsSUFBQSxTQUFBRyxHQUFpQm1pRyxFQUFBa2UsR0FBQTdvRSxLQUFBeDNDLEVBQUFnNUMsTUFBQW1wRCxFQUFBa2UsR0FBQTdvRSxLQUFBeDNDLEVBQUFnNUMsTUFBQWg1QyxHQUFBLElBQUFBLEVBQUFvNEcsS0FBQXJRLFVBQUEsTUFBQS9uRyxFQUFBbzRHLEtBQUFuK0YsTUFBQWtvRixFQUFBeWMsU0FBQTUrRyxFQUFBZzVDLFNBQUFtcEQsRUFBQStjLFNBQUFsL0csRUFBQWc1QyxNQUFBaDVDLEVBQUFvNEcsS0FBQXA0RyxFQUFBZzVDLE1BQUFoNUMsRUFBQXk1RyxJQUFBdFgsRUFBQWxvRixNQUFBamEsRUFBQW80RyxLQUFBcDRHLEVBQUFnNUMsS0FBQWg1QyxFQUFBeTVHLElBQUF6NUcsRUFBQTgxRyxTQUFtTG1KLEdBQUFrQixVQUFBRyxVQUFBckIsR0FBQWtCLFVBQUFJLFlBQWlEMWdILElBQUEsU0FBQUcsR0FBZ0JBLEVBQUFvNEcsS0FBQXJRLFVBQUEvbkcsRUFBQW80RyxLQUFBblEsYUFBQWpvRyxFQUFBbzRHLEtBQUFwNEcsRUFBQWc1QyxNQUFBaDVDLEVBQUF5NUcsT0FBNER0WCxFQUFBK2QsUUFBV00sT0FBQSxTQUFBeGdILEdBQW1CLE9BQUFBLEdBQVN5Z0gsTUFBQSxTQUFBemdILEdBQW1CLFNBQUFxVyxLQUFBQyxJQUFBdFcsRUFBQXFXLEtBQUE0RyxJQUFBLEdBQStCelIsU0FBQSxTQUFrQjIyRixFQUFBa2UsR0FBQXBCLEdBQUF0aEgsVUFBQWlVLEtBQUF1d0YsRUFBQWtlLEdBQUE3b0UsUUFBcUMsSUFBQWtwRSxHQUFBQyxHQUFBaDBCLEdBQUEseUJBQUFpMEIsR0FBQSxjQUF1RCxTQUFBQyxLQUFjRixNQUFBLElBQUFyNEcsRUFBQXc0RyxRQUFBOWdILEVBQUErZ0gsc0JBQUEvZ0gsRUFBQStnSCxzQkFBQUYsSUFBQTdnSCxFQUFBNnFDLFdBQUFnMkUsR0FBQTFlLEVBQUFrZSxHQUFBenBFLFVBQUF1ckQsRUFBQWtlLEdBQUF4cUUsUUFBb0gsU0FBQW1yRSxLQUFjLE9BQUFoaEgsRUFBQTZxQyxXQUFBLFdBQStCNjFFLFFBQUEsSUFBVUEsR0FBQS9sRCxLQUFBOCtDLE1BQWdCLFNBQUF3SCxHQUFBamhILEVBQUFRLEdBQWlCLElBQUFzSSxFQUFBUixFQUFBLEVBQUExSCxHQUFha2QsT0FBQTlkLEdBQVUsSUFBQVEsSUFBQSxJQUFZOEgsRUFBQSxFQUFJQSxHQUFBLEVBQUE5SCxFQUFBSSxFQUFBLFVBQUFrSSxFQUFBaWpHLEdBQUF6akcsS0FBQTFILEVBQUEsVUFBQWtJLEdBQUE5SSxFQUE4QyxPQUFBUSxJQUFBSSxFQUFBc2EsUUFBQXRhLEVBQUFtVSxNQUFBL1UsR0FBQVksRUFBa0MsU0FBQXN3RyxHQUFBbHhHLEVBQUFRLEVBQUFzSSxHQUFtQixRQUFBUixFQUFBMUgsR0FBQXNnSCxHQUFBQyxTQUFBM2dILFFBQUFtRSxPQUFBdThHLEdBQUFDLFNBQUEsTUFBQTk0RyxFQUFBLEVBQUF2RCxFQUFBbEUsRUFBQUMsT0FBeUV3SCxFQUFBdkQsRUFBSXVELElBQUEsR0FBQUMsRUFBQTFILEVBQUF5SCxHQUFBeEssS0FBQWlMLEVBQUF0SSxFQUFBUixHQUFBLE9BQUFzSSxFQUFrbkQsU0FBQTQ0RyxHQUFBbGhILEVBQUFRLEVBQUFzSSxHQUFtQixJQUFBUixFQUFBMUgsRUFBQXlILEVBQUEsRUFBQXZELEVBQUFvOEcsR0FBQUUsV0FBQXZnSCxPQUFBb0ksRUFBQWs1RixFQUFBaVMsV0FBQUMsT0FBQSxrQkFBb0V2TSxFQUFBc1EsT0FBY3RRLEVBQUEsV0FBZSxHQUFBbG5HLEVBQUEsU0FBYyxRQUFBSixFQUFBa2dILElBQUFNLEtBQUFsNEcsRUFBQXVOLEtBQUFtRyxJQUFBLEVBQUFuVixFQUFBcXpELFVBQUFyekQsRUFBQXVnQyxTQUFBcG5DLEdBQUE4SCxFQUFBLEdBQUFRLEVBQUF6QixFQUFBdWdDLFVBQUEsR0FBQXYvQixFQUFBLEVBQUF2RCxFQUFBdUMsRUFBQWc2RyxPQUFBeGdILE9BQXNHd0gsRUFBQXZELEVBQUl1RCxJQUFBaEIsRUFBQWc2RyxPQUFBaDVHLEdBQUErM0csSUFBQTkzRyxHQUF1QixPQUFBVyxFQUFBd3JHLFdBQUF6MEcsR0FBQXFILEVBQUFpQixFQUFBUSxJQUFBUixFQUFBLEdBQUF4RCxFQUFBZ0UsR0FBQWhFLEdBQUFtRSxFQUFBd3JHLFdBQUF6MEcsR0FBQXFILEVBQUEsTUFBQTRCLEVBQUF5ckcsWUFBQTEwRyxHQUFBcUgsS0FBQSxJQUE2RkEsRUFBQTRCLEVBQUF4RyxTQUFjMjFHLEtBQUFwNEcsRUFBQXl1QixNQUFBMHpFLEVBQUFweUYsVUFBd0J2UCxHQUFBbzNELEtBQUF1cUMsRUFBQXB5RixRQUFBLEdBQXNCdXhHLGlCQUFnQnBCLE9BQUEvZCxFQUFBK2QsT0FBQTEwRyxVQUEwQjFDLEdBQUF5NEcsbUJBQUEvZ0gsRUFBQWdoSCxnQkFBQTE0RyxFQUFBNHhELFVBQUFnbUQsSUFBQU0sS0FBQXA1RSxTQUFBOStCLEVBQUE4K0IsU0FBQXk1RSxVQUFBSSxZQUFBLFNBQUFqaEgsRUFBQXNJLEdBQXNILElBQUFSLEVBQUE2NUYsRUFBQThkLE1BQUFqZ0gsRUFBQXFILEVBQUF1d0QsS0FBQXAzRCxFQUFBc0ksRUFBQXpCLEVBQUF1d0QsS0FBQTBwRCxjQUFBOWdILElBQUE2RyxFQUFBdXdELEtBQUFzb0QsUUFBbUUsT0FBQTc0RyxFQUFBZzZHLE9BQUFqaUgsS0FBQWtKLE1BQTBCMHBCLEtBQUEsU0FBQXh4QixHQUFrQixJQUFBc0ksRUFBQSxFQUFBUixFQUFBOUgsRUFBQTZHLEVBQUFnNkcsT0FBQXhnSCxPQUFBLEVBQThCLEdBQUFELEVBQUEsT0FBQTBJLEtBQWlCLElBQUExSSxHQUFBLEVBQVNrSSxFQUFBUixFQUFJUSxJQUFBekIsRUFBQWc2RyxPQUFBdjRHLEdBQUFzM0csSUFBQSxHQUF1QixPQUFBNS9HLEdBQUF5SSxFQUFBd3JHLFdBQUF6MEcsR0FBQXFILEVBQUEsTUFBQTRCLEVBQUF5ckcsWUFBQTEwRyxHQUFBcUgsRUFBQTdHLEtBQUF5SSxFQUFBNHJHLFdBQUE3MEcsR0FBQXFILEVBQUE3RyxJQUFBOEksUUFBc0YvRyxFQUFBOEUsRUFBQW9uQixNQUFZLElBQWxsQyxTQUFBenVCLEVBQUFRLEdBQWlCLElBQUFzSSxFQUFBUixFQUFBMUgsRUFBQXlILEVBQUF2RCxFQUFjLElBQUFnRSxLQUFBOUksRUFBQSxHQUFBWSxFQUFBSixFQUFBOEgsRUFBQTBpRyxFQUFBbGlHLElBQUFULEVBQUFySSxFQUFBOEksR0FBQXEzQyxNQUFBNXdDLFFBQUFsSCxLQUFBekgsRUFBQXlILEVBQUEsR0FBQUEsRUFBQXJJLEVBQUE4SSxHQUFBVCxFQUFBLElBQUFTLElBQUFSLElBQUF0SSxFQUFBc0ksR0FBQUQsU0FBQXJJLEVBQUE4SSxLQUFBaEUsRUFBQXE5RixFQUFBK2MsU0FBQTUyRyxLQUFBLFdBQUF4RCxFQUFpSyxJQUFBZ0UsS0FBMUJULEVBQUF2RCxFQUFBazdHLE9BQUEzM0csVUFBQXJJLEVBQUFzSSxHQUEwQkQsRUFBQVMsS0FBQTlJLE1BQUE4SSxHQUFBVCxFQUFBUyxHQUFBdEksRUFBQXNJLEdBQUFsSSxRQUFzQ0osRUFBQThILEdBQUExSCxFQUE0MkI4Z0gsQ0FBQW4vRyxFQUFBOEUsRUFBQXV3RCxLQUFBMHBELGVBQStCajVHLEVBQUF2RCxFQUFJdUQsSUFBQSxHQUFBQyxFQUFBNDRHLEdBQUFFLFdBQUEvNEcsR0FBQXhLLEtBQUF3SixFQUFBckgsRUFBQXVDLEVBQUE4RSxFQUFBdXdELE1BQUEsT0FBQThpQyxFQUFBcHlGLEVBQUEwcEIsUUFBQW13RSxFQUFBc1QsWUFBQXB1RyxFQUFBK3dHLEtBQUEvd0csRUFBQXV3RCxLQUFBOXpELE9BQUFrdUIsS0FBQTFwQixFQUFBMHBCLEtBQUFucEIsS0FBQVAsTUFBMEgsT0FBQTY1RixFQUFBbitGLElBQUF6QixFQUFBMnVHLEdBQUE3cEcsR0FBQXF6RixFQUFBcnpGLEVBQUF1d0QsS0FBQWhoRCxRQUFBdlAsRUFBQXV3RCxLQUFBaGhELE1BQUEvWSxLQUFBbUMsRUFBQXFILEtBQUF1bEUsU0FBQXZsRSxFQUFBdXdELEtBQUFnVixVQUFBNG1DLEtBQUFuc0csRUFBQXV3RCxLQUFBNDdDLEtBQUFuc0csRUFBQXV3RCxLQUFBK3BELFVBQUFsTyxLQUFBcHNHLEVBQUF1d0QsS0FBQTY3QyxNQUFBWSxPQUFBaHRHLEVBQUF1d0QsS0FBQXk4QyxRQUFBbFMsRUFBQWtlLEdBQUEzYixNQUFBdkMsRUFBQXB5RixPQUFBKzNGLEdBQTBMc1EsS0FBQXA0RyxFQUFBNGhILEtBQUF2NkcsRUFBQXZELE1BQUF1RCxFQUFBdXdELEtBQUE5ekQsU0FBaUN1RCxFQUFLODZGLEVBQUEwZixVQUFBMWYsRUFBQXB5RixPQUFBbXhHLElBQXlCQyxVQUFVVyxLQUFBLFNBQUE5aEgsRUFBQVEsR0FBbUIsSUFBQXNJLEVBQUFRLEtBQUFtNEcsWUFBQXpoSCxFQUFBUSxHQUE0QixPQUFBbXNHLEdBQUE3akcsRUFBQXN2RyxLQUFBcDRHLEVBQUE0ckcsR0FBQTFLLEtBQUExZ0csR0FBQXNJLFFBQXFDaTVHLFFBQUEsU0FBQS9oSCxFQUFBUSxHQUF1Qms2RixFQUFBMTZGLElBQUFRLEVBQUFSLEtBQUEsTUFBQUEsSUFBQXUxRSxNQUFBeWMsR0FBZ0MsUUFBQWxwRixFQUFBUixFQUFBLEVBQUExSCxFQUFBWixFQUFBYSxPQUF5QnlILEVBQUExSCxFQUFJMEgsSUFBQVEsRUFBQTlJLEVBQUFzSSxHQUFBNDRHLEdBQUFDLFNBQUFyNEcsR0FBQW80RyxHQUFBQyxTQUFBcjRHLE9BQUFvNEcsR0FBQUMsU0FBQXI0RyxHQUFBbXFDLFFBQUF6eUMsSUFBdUU0Z0gsWUFBOWpHLFNBQUFwaEgsRUFBQVEsRUFBQXNJLEdBQW1CLElBQUFSLEVBQUExSCxFQUFBeUgsRUFBQXZELEVBQUFtRSxFQUFBNitGLEVBQUF6Z0csRUFBQTlFLEVBQUFrN0MsRUFBQSxVQUFBajlDLEdBQUEsV0FBQUEsRUFBQW1CLEVBQUEySCxLQUFBbkIsS0FBMkQzRixFQUFBeEMsRUFBQWlhLE1BQUF5Z0YsRUFBQTE2RixFQUFBK25HLFVBQUF1QixHQUFBdHBHLEdBQUFnYSxFQUFBbXhGLEVBQUF2ckcsSUFBQUksRUFBQSxVQUE0UixJQUFBc0ksS0FBek9RLEVBQUFoRixRQUFBLE9BQUFnQixFQUFBcTlGLEVBQUFzVCxZQUFBejFHLEVBQUEsT0FBQWdpSCxXQUFBbDlHLEVBQUFrOUcsU0FBQSxFQUFBLzRHLEVBQUFuRSxFQUFBOHJHLE1BQUFzRCxLQUFBcHZHLEVBQUE4ckcsTUFBQXNELEtBQUEsV0FBeUdwdkcsRUFBQWs5RyxVQUFBLzRHLE1BQWdCbkUsRUFBQWs5RyxXQUFBcmdILEVBQUEweUcsT0FBQSxXQUFtQzF5RyxFQUFBMHlHLE9BQUEsV0FBb0J2dkcsRUFBQWs5RyxXQUFBN2YsRUFBQXIrRixNQUFBOUQsRUFBQSxNQUFBYSxRQUFBaUUsRUFBQThyRyxNQUFBc0QsWUFBeUQxekcsRUFBQSxHQUFBSSxFQUFBSixFQUFBOEgsR0FBQXFrRixHQUFBbmlGLEtBQUE1SixHQUFBLENBQWlDLFVBQUFKLEVBQUE4SCxHQUFBRCxLQUFBLFdBQUF6SCxPQUFBODVGLEVBQUEsZ0JBQXdELFlBQUE5NUYsSUFBQW9aLFFBQUEsSUFBQUEsRUFBQTFSLEdBQUEsU0FBMENveUYsR0FBQSxFQUFLdnlGLEVBQUFHLEdBQUEwUixLQUFBMVIsSUFBQTY1RixFQUFBbG9GLE1BQUFqYSxFQUFBc0ksR0FBMkIsSUFBQXcvRixHQUFBM0YsRUFBQTJHLGNBQUF0b0csTUFBQTJoRyxFQUFBMkcsY0FBQTNnRyxHQUF3a0IsSUFBQUcsS0FBdmhCbTFDLEdBQUEsSUFBQXo5QyxFQUFBK25HLFdBQUFqL0YsRUFBQW01RyxVQUFBei9HLEVBQUF5L0csU0FBQXovRyxFQUFBMC9HLFVBQUExL0csRUFBQTIvRyxXQUFBLE9BQUE5NkcsRUFBQTJTLEtBQUE4dkIsV0FBQXppQyxFQUFBOGpHLEVBQUF2ckcsSUFBQUksRUFBQSxzQkFBQXVDLEVBQUE0L0YsRUFBQXdULElBQUEzMUcsRUFBQSxjQUFBcUgsRUFBQTlFLEVBQUE4RSxHQUFBNGxHLElBQUFqdEcsSUFBQSxHQUFBcUgsRUFBQXJILEVBQUFpYSxNQUFBNnZCLFNBQUF6aUMsRUFBQTlFLEVBQUE0L0YsRUFBQXdULElBQUEzMUcsRUFBQSxXQUFBaXRHLElBQUFqdEcsT0FBQSxXQUFBdUMsR0FBQSxpQkFBQUEsR0FBQSxNQUFBOEUsSUFBQSxTQUFBODZGLEVBQUF3VCxJQUFBMzFHLEVBQUEsV0FBQThuRyxJQUFBbm1HLEVBQUE2eEcsS0FBQSxXQUEwVGh4RyxFQUFBc25DLFFBQUF6aUMsSUFBWSxNQUFBQSxJQUFBOUUsRUFBQUMsRUFBQXNuQyxRQUFBemlDLEVBQUEsU0FBQTlFLEVBQUEsR0FBQUEsSUFBQUMsRUFBQXNuQyxRQUFBLGlCQUFBaGhDLEVBQUFtNUcsV0FBQXovRyxFQUFBeS9HLFNBQUEsU0FBQXRnSCxFQUFBMHlHLE9BQUEsV0FBNEg3eEcsRUFBQXkvRyxTQUFBbjVHLEVBQUFtNUcsU0FBQSxHQUFBei9HLEVBQUEwL0csVUFBQXA1RyxFQUFBbTVHLFNBQUEsR0FBQXovRyxFQUFBMi9HLFVBQUFyNUcsRUFBQW01RyxTQUFBLE1BQTZFbmEsR0FBQSxFQUFRMy9GLEVBQUEyL0YsSUFBQTl0RixFQUFBLFdBQUFBLElBQUEwZ0YsRUFBQTFnRixFQUFBOG1HLFFBQUE5bUcsRUFBQW14RixFQUFBaUssT0FBQXAxRyxFQUFBLFVBQW1FOHBDLFFBQUF6aUMsSUFBVWdCLElBQUEyUixFQUFBOG1HLFFBQUFwbUIsTUFBQXVTLElBQUFqdEcsSUFBQSxHQUFBMkIsRUFBQTZ4RyxLQUFBLFdBQW1GLElBQUFsckcsS0FBaENveUYsR0FBQXVTLElBQUFqdEcsSUFBQW1yRyxFQUFBN3VGLE9BQUF0YyxFQUFBLFVBQWdDbUksRUFBQWc2RixFQUFBbG9GLE1BQUFqYSxFQUFBc0ksRUFBQUgsRUFBQUcsT0FBNkJ3L0YsRUFBQW9KLEdBQUF4VyxFQUFBMWdGLEVBQUExUixHQUFBLEVBQUFBLEVBQUEzRyxHQUFBMkcsS0FBQTBSLE1BQUExUixHQUFBdy9GLEVBQUFseEYsTUFBQThqRixJQUFBb04sRUFBQWxxRixJQUFBa3FGLEVBQUFseEYsTUFBQWt4RixFQUFBbHhGLE1BQUEsTUFBNHlEd3JHLFVBQUEsU0FBQXBpSCxFQUFBUSxHQUF5Q0EsRUFBQTBnSCxHQUFBRSxXQUFBbnVFLFFBQUFqekMsR0FBQWtoSCxHQUFBRSxXQUFBaGlILEtBQUFZLE1BQWtEbWlHLEVBQUFrZ0IsTUFBQSxTQUFBcmlILEVBQUFRLEVBQUFzSSxHQUEwQixJQUFBUixFQUFBdEksR0FBQSxpQkFBQUEsRUFBQW1pRyxFQUFBcHlGLFVBQXVDL1AsSUFBSzJoSCxTQUFBNzRHLE9BQUF0SSxHQUFBazZGLEVBQUExNkYsTUFBQTRuQyxTQUFBNW5DLEVBQUFrZ0gsT0FBQXAzRyxHQUFBdEksT0FBQWs2RixFQUFBbDZGLE9BQWdFLE9BQUEyaEcsRUFBQWtlLEdBQUE5bUcsSUFBQWpSLEVBQUFzL0IsU0FBQSxtQkFBQXQvQixFQUFBcy9CLFdBQUF0L0IsRUFBQXMvQixZQUFBdTZELEVBQUFrZSxHQUFBaUMsT0FBQWg2RyxFQUFBcy9CLFNBQUF1NkQsRUFBQWtlLEdBQUFpQyxPQUFBaDZHLEVBQUFzL0IsVUFBQXQvQixFQUFBcy9CLFNBQUF1NkQsRUFBQWtlLEdBQUFpQyxPQUFBOTJHLFVBQUEsTUFBQWxELEVBQUF4RSxRQUFBLElBQUF3RSxFQUFBeEUsUUFBQXdFLEVBQUF4RSxNQUFBLE1BQUF3RSxFQUFBaTZHLElBQUFqNkcsRUFBQXE1RyxTQUFBcjVHLEVBQUFxNUcsU0FBQSxXQUE0T2puQixFQUFBcHlGLEVBQUFpNkcsTUFBQWo2RyxFQUFBaTZHLElBQUExa0gsS0FBQXlMLE1BQUFoQixFQUFBeEUsT0FBQXErRixFQUFBcVQsUUFBQWxzRyxLQUFBaEIsRUFBQXhFLFFBQTREd0UsR0FBRzY1RixFQUFBcmpHLEdBQUFpUixRQUFjeXlHLE9BQUEsU0FBQXhpSCxFQUFBUSxFQUFBc0ksRUFBQVIsR0FBeUIsT0FBQWdCLEtBQUF5MEMsT0FBQXVyRCxJQUFBcU0sSUFBQSxhQUFBbGlHLE9BQUFtSyxNQUFBbEgsU0FBOER3RSxRQUFBMWEsR0FBVVIsRUFBQThJLEVBQUFSLElBQVFvTyxRQUFBLFNBQUExVyxFQUFBUSxFQUFBc0ksRUFBQVIsR0FBMkIsSUFBQTFILEVBQUF1aEcsRUFBQTJHLGNBQUE5b0csR0FBQXFJLEVBQUE4NUYsRUFBQWtnQixNQUFBN2hILEVBQUFzSSxFQUFBUixHQUFBeEQsRUFBQSxXQUF1RCxJQUFBdEUsRUFBQTBnSCxHQUFBNTNHLEtBQUE2NEYsRUFBQXB5RixVQUF5Qi9QLEdBQUFxSSxJQUFPekgsR0FBQXVxRyxFQUFBdnJHLElBQUEwSixLQUFBLFlBQUE5SSxFQUFBd3hCLE1BQUEsSUFBdUMsT0FBQWx0QixFQUFBMjlHLE9BQUEzOUcsRUFBQWxFLElBQUEsSUFBQXlILEVBQUF2RSxNQUFBd0YsS0FBQTRCLEtBQUFwRyxHQUFBd0UsS0FBQXhGLE1BQUF1RSxFQUFBdkUsTUFBQWdCLElBQXFFa3RCLEtBQUEsU0FBQWh5QixFQUFBUSxFQUFBc0ksR0FBc0IsSUFBQVIsRUFBQSxTQUFBdEksR0FBa0IsSUFBQVEsRUFBQVIsRUFBQWd5QixZQUFhaHlCLEVBQUFneUIsS0FBQXh4QixFQUFBc0ksSUFBb0IsdUJBQUE5SSxJQUFBOEksRUFBQXRJLElBQUFSLFNBQUEsR0FBQVEsSUFBQSxJQUFBUixHQUFBc0osS0FBQXhGLE1BQUE5RCxHQUFBLFNBQUFzSixLQUFBNEIsS0FBQSxXQUFvRyxJQUFBMUssR0FBQSxFQUFBSSxFQUFBLE1BQUFaLEtBQUEsYUFBQXFJLEVBQUE4NUYsRUFBQXVnQixPQUFBNTlHLEVBQUFxbUcsRUFBQXZyRyxJQUFBMEosTUFBNEQsR0FBQTFJLEVBQUFrRSxFQUFBbEUsSUFBQWtFLEVBQUFsRSxHQUFBb3hCLE1BQUExcEIsRUFBQXhELEVBQUFsRSxTQUE4QixJQUFBQSxLQUFBa0UsSUFBQWxFLElBQUFrRSxFQUFBbEUsR0FBQW94QixNQUFBNHVGLEdBQUFwMkcsS0FBQTVKLElBQUEwSCxFQUFBeEQsRUFBQWxFLElBQXFELElBQUFBLEVBQUF5SCxFQUFBeEgsT0FBZUQsS0FBSXlILEVBQUF6SCxHQUFBdzNHLE9BQUE5dUcsTUFBQSxNQUFBdEosR0FBQXFJLEVBQUF6SCxHQUFBa0QsUUFBQTlELElBQUFxSSxFQUFBekgsR0FBQWdoSCxLQUFBNXZGLEtBQUFscEIsR0FBQXRJLEdBQUEsRUFBQTZILEVBQUExQixPQUFBL0YsRUFBQSxLQUFtRkosR0FBQXNJLEdBQUFxNUYsRUFBQXFULFFBQUFsc0csS0FBQXRKLE1BQTJCeWlILE9BQUEsU0FBQXppSCxHQUFvQixXQUFBQSxTQUFBLE1BQUFzSixLQUFBNEIsS0FBQSxXQUErQyxJQUFBMUssRUFBQXNJLEVBQUFxaUcsRUFBQXZyRyxJQUFBMEosTUFBQWhCLEVBQUFRLEVBQUE5SSxFQUFBLFNBQUFZLEVBQUFrSSxFQUFBOUksRUFBQSxjQUFBcUksRUFBQTg1RixFQUFBdWdCLE9BQUE1OUcsRUFBQXdELElBQUF6SCxPQUFBLEVBQWlGLElBQUFpSSxFQUFBMjVHLFFBQUEsRUFBQXRnQixFQUFBcitGLE1BQUF3RixLQUFBdEosTUFBQVksS0FBQW94QixNQUFBcHhCLEVBQUFveEIsS0FBQW4wQixLQUFBeUwsTUFBQSxHQUFBOUksRUFBQTZILEVBQUF4SCxPQUE4RUwsS0FBSTZILEVBQUE3SCxHQUFBNDNHLE9BQUE5dUcsTUFBQWpCLEVBQUE3SCxHQUFBc0QsUUFBQTlELElBQUFxSSxFQUFBN0gsR0FBQW9oSCxLQUFBNXZGLE1BQUEsR0FBQTNwQixFQUFBMUIsT0FBQW5HLEVBQUEsSUFBc0UsSUFBQUEsRUFBQSxFQUFRQSxFQUFBc0UsRUFBSXRFLElBQUE4SCxFQUFBOUgsSUFBQThILEVBQUE5SCxHQUFBaWlILFFBQUFuNkcsRUFBQTlILEdBQUFpaUgsT0FBQTVrSCxLQUFBeUwsYUFBOENSLEVBQUEyNUcsWUFBbUJ0Z0IsRUFBQWozRixNQUFBLGlDQUFBbEwsRUFBQVEsR0FBZ0QsSUFBQXNJLEVBQUFxNUYsRUFBQXJqRyxHQUFBMEIsR0FBYzJoRyxFQUFBcmpHLEdBQUEwQixHQUFBLFNBQUFSLEVBQUFzSSxFQUFBMUgsR0FBd0IsYUFBQVosR0FBQSxrQkFBQUEsRUFBQThJLEVBQUEzSCxNQUFBbUksS0FBQXlJLFdBQUF6SSxLQUFBb04sUUFBQXVxRyxHQUFBemdILEdBQUEsR0FBQVIsRUFBQXNJLEVBQUExSCxNQUEwRnVoRyxFQUFBajNGLE1BQVV5M0csVUFBQTFCLEdBQUEsUUFBQTJCLFFBQUEzQixHQUFBLFFBQUE0QixZQUFBNUIsR0FBQSxVQUFBNkIsUUFBeUU1bkcsUUFBQSxRQUFlNm5HLFNBQVU3bkcsUUFBQSxRQUFlOG5HLFlBQWE5bkcsUUFBQSxXQUFrQixTQUFBbGIsRUFBQVEsR0FBZTJoRyxFQUFBcmpHLEdBQUFrQixHQUFBLFNBQUFBLEVBQUE4SSxFQUFBUixHQUF3QixPQUFBZ0IsS0FBQW9OLFFBQUFsVyxFQUFBUixFQUFBOEksRUFBQVIsTUFBOEI2NUYsRUFBQXVnQixVQUFBdmdCLEVBQUFrZSxHQUFBeHFFLEtBQUEsV0FBbUMsSUFBQTcxQyxFQUFBUSxFQUFBLEVBQUFzSSxFQUFBcTVGLEVBQUF1Z0IsT0FBcUIsSUFBQWhDLEdBQUEvbEQsS0FBQTgrQyxNQUFrQmo1RyxFQUFBc0ksRUFBQWpJLE9BQVdMLEtBQUFSLEVBQUE4SSxFQUFBdEksT0FBQXNJLEVBQUF0SSxLQUFBUixHQUFBOEksRUFBQW5DLE9BQUFuRyxJQUFBLEdBQTBDc0ksRUFBQWpJLFFBQUFzaEcsRUFBQWtlLEdBQUFydUYsT0FBQTB1RixRQUFBLEdBQWdDdmUsRUFBQWtlLEdBQUEzYixNQUFBLFNBQUExa0csR0FBd0JtaUcsRUFBQXVnQixPQUFBdGpILEtBQUFZLEdBQUFtaUcsRUFBQWtlLEdBQUF6cEcsU0FBOEJ1ckYsRUFBQWtlLEdBQUF6cEUsU0FBQSxHQUFBdXJELEVBQUFrZSxHQUFBenBHLE1BQUEsV0FBd0MrcEcsU0FBQSxFQUFBRSxPQUFpQjFlLEVBQUFrZSxHQUFBcnVGLEtBQUEsV0FBc0IydUYsR0FBQSxNQUFReGUsRUFBQWtlLEdBQUFpQyxRQUFjVyxLQUFBLElBQUFDLEtBQUEsSUFBQTEzRyxTQUFBLEtBQStCMjJGLEVBQUFyakcsR0FBQXN1QyxNQUFBLFNBQUE1c0MsRUFBQXNJLEdBQTBCLE9BQUF0SSxFQUFBMmhHLEVBQUFrZSxJQUFBbGUsRUFBQWtlLEdBQUFpQyxPQUFBOWhILE1BQUFzSSxLQUFBLEtBQUFRLEtBQUF4RixNQUFBZ0YsRUFBQSxTQUFBQSxFQUFBUixHQUF1RSxJQUFBMUgsRUFBQVosRUFBQTZxQyxXQUFBL2hDLEVBQUF0SSxHQUF3QjhILEVBQUEwcEIsS0FBQSxXQUFrQmh5QixFQUFBa3BDLGFBQUF0b0MsT0FBcUIsV0FBWSxJQUFBWixFQUFBc0ksRUFBQXhGLGNBQUEsU0FBQXRDLEVBQUE4SCxFQUFBeEYsY0FBQSxVQUFBRyxZQUFBcUYsRUFBQXhGLGNBQUEsV0FBa0c5QyxFQUFBc0UsS0FBQSxXQUFBOUIsRUFBQTJnSCxRQUFBLEtBQUFuakgsRUFBQUYsTUFBQTBDLEVBQUE0Z0gsWUFBQTVpSCxFQUFBeUwsVUFBQWpNLEVBQUFzSSxFQUFBeEYsY0FBQSxVQUFBaEQsTUFBQSxJQUFBRSxFQUFBc0UsS0FBQSxRQUFBOUIsRUFBQTZnSCxXQUFBLE1BQUFyakgsRUFBQUYsTUFBOUcsR0FBb1EsSUFBQXdqSCxHQUFBQyxHQUFBcGhCLEVBQUFtUSxLQUFBekYsV0FBNEIxSyxFQUFBcmpHLEdBQUFpUixRQUFhOEcsS0FBQSxTQUFBN1csRUFBQVEsR0FBbUIsT0FBQXFULEVBQUF2SyxLQUFBNjRGLEVBQUF0ckYsS0FBQTdXLEVBQUFRLEVBQUF1UixVQUFBbFIsT0FBQSxJQUE2QzJpSCxXQUFBLFNBQUF4akgsR0FBd0IsT0FBQXNKLEtBQUE0QixLQUFBLFdBQTRCaTNGLEVBQUFxaEIsV0FBQWw2RyxLQUFBdEosUUFBd0JtaUcsRUFBQXB5RixRQUFZOEcsS0FBQSxTQUFBN1csRUFBQVEsRUFBQXNJLEdBQXFCLElBQUFSLEVBQUExSCxFQUFBeUgsRUFBQXJJLEVBQUErbkcsU0FBcUIsT0FBQTEvRixHQUFBLElBQUFBLEdBQUEsSUFBQUEsRUFBQSxnQkFBQXJJLEVBQUEwakUsYUFBQXkrQixFQUFBbnBELEtBQUFoNUMsRUFBQVEsRUFBQXNJLElBQUEsSUFBQVQsR0FBQTg1RixFQUFBcVEsU0FBQXh5RyxLQUFBWSxFQUFBdWhHLEVBQUFzaEIsVUFBQWpqSCxFQUFBKzJELGlCQUFBNHFDLEVBQUFtUSxLQUFBLzhCLE1BQUF1MUIsS0FBQXRnRyxLQUFBaEssR0FBQThpSCxRQUFBLGFBQUF4NkcsRUFBQSxPQUFBQSxPQUFBcTVGLEVBQUFxaEIsV0FBQXhqSCxFQUFBUSxHQUFBSSxHQUFBLFFBQUFBLFFBQUEsS0FBQTBILEVBQUExSCxFQUFBZixJQUFBRyxFQUFBOEksRUFBQXRJLElBQUE4SCxHQUFBdEksRUFBQWtqRSxhQUFBMWlFLEVBQUFzSSxFQUFBLElBQUFBLEdBQUFsSSxHQUFBLFFBQUFBLEdBQUEsUUFBQTBILEVBQUExSCxFQUFBaEIsSUFBQUksRUFBQVEsSUFBQThILEVBQUEsT0FBQUEsRUFBQTY1RixFQUFBNkwsS0FBQW4zRixLQUFBN1csRUFBQVEsU0FBQSxFQUFBOEgsSUFBd1dtN0csV0FBWW4vRyxNQUFNekUsSUFBQSxTQUFBRyxFQUFBUSxHQUFrQixJQUFBZ0MsRUFBQTZnSCxZQUFBLFVBQUE3aUgsR0FBQWdwRyxFQUFBeHBHLEVBQUEsVUFBNkMsSUFBQThJLEVBQUE5SSxFQUFBRixNQUFjLE9BQUFFLEVBQUFrakUsYUFBQSxPQUFBMWlFLEdBQUFzSSxJQUFBOUksRUFBQUYsTUFBQWdKLEdBQUF0SSxNQUFvRGdqSCxXQUFBLFNBQUF4akgsRUFBQVEsR0FBMEIsSUFBQXNJLEVBQUFSLEVBQUEsRUFBQTFILEVBQUFKLEtBQUErMEUsTUFBQXljLEdBQTBCLEdBQUFweEYsR0FBQSxJQUFBWixFQUFBK25HLFNBQUEsS0FBQWovRixFQUFBbEksRUFBQTBILE1BQUF0SSxFQUFBd3NHLGdCQUFBMWpHLE1BQTBEdzZHLElBQU16akgsSUFBQSxTQUFBRyxFQUFBUSxFQUFBc0ksR0FBb0IsV0FBQXRJLEVBQUEyaEcsRUFBQXFoQixXQUFBeGpILEVBQUE4SSxHQUFBOUksRUFBQWtqRSxhQUFBcDZELFNBQXNEcTVGLEVBQUFqM0YsS0FBQWkzRixFQUFBbVEsS0FBQS84QixNQUFBdTFCLEtBQUE1Z0csT0FBQXFyRSxNQUFBLGlCQUFBdjFFLEVBQUFRLEdBQTZELElBQUFzSSxFQUFBeTZHLEdBQUEvaUgsSUFBQTJoRyxFQUFBNkwsS0FBQW4zRixLQUF5QjBzRyxHQUFBL2lILEdBQUEsU0FBQVIsRUFBQVEsRUFBQThILEdBQXNCLElBQUExSCxFQUFBeUgsRUFBQXZELEVBQUF0RSxFQUFBKzJELGNBQTBCLE9BQUFqdkQsSUFBQUQsRUFBQWs3RyxHQUFBeitHLEdBQUF5K0csR0FBQXorRyxHQUFBbEUsSUFBQSxNQUFBa0ksRUFBQTlJLEVBQUFRLEVBQUE4SCxHQUFBeEQsRUFBQSxLQUFBeStHLEdBQUF6K0csR0FBQXVELEdBQUF6SCxLQUFpRSxJQUFBdXdHLEdBQUEsc0NBQUF1UyxHQUFBLGdCQUF3akMsU0FBQUMsR0FBQTNqSCxHQUFlLE9BQUFBLEVBQUF1MUUsTUFBQXljLFFBQUF6c0YsS0FBQSxLQUFpQyxTQUFBcStHLEdBQUE1akgsR0FBZSxPQUFBQSxFQUFBMGpFLGNBQUExakUsRUFBQTBqRSxhQUFBLGFBQW1ELFNBQUFtZ0QsR0FBQTdqSCxHQUFlLE9BQUFtZ0QsTUFBQTV3QyxRQUFBdlAsS0FBQSxpQkFBQUEsS0FBQXUxRSxNQUFBeWMsT0FBem5DbVEsRUFBQXJqRyxHQUFBaVIsUUFBYWlwQyxLQUFBLFNBQUFoNUMsRUFBQVEsR0FBbUIsT0FBQXFULEVBQUF2SyxLQUFBNjRGLEVBQUFucEQsS0FBQWg1QyxFQUFBUSxFQUFBdVIsVUFBQWxSLE9BQUEsSUFBNkNpakgsV0FBQSxTQUFBOWpILEdBQXdCLE9BQUFzSixLQUFBNEIsS0FBQSxrQkFBNEI1QixLQUFBNjRGLEVBQUE0aEIsUUFBQS9qSCxZQUFnQ21pRyxFQUFBcHlGLFFBQVlpcEMsS0FBQSxTQUFBaDVDLEVBQUFRLEVBQUFzSSxHQUFxQixJQUFBUixFQUFBMUgsRUFBQXlILEVBQUFySSxFQUFBK25HLFNBQXFCLE9BQUExL0YsR0FBQSxJQUFBQSxHQUFBLElBQUFBLEVBQUEsV0FBQUEsR0FBQTg1RixFQUFBcVEsU0FBQXh5RyxLQUFBUSxFQUFBMmhHLEVBQUE0aEIsUUFBQXZqSCxNQUFBSSxFQUFBdWhHLEVBQUFnZSxVQUFBMy9HLFNBQUEsSUFBQXNJLEVBQUFsSSxHQUFBLFFBQUFBLFFBQUEsS0FBQTBILEVBQUExSCxFQUFBZixJQUFBRyxFQUFBOEksRUFBQXRJLElBQUE4SCxFQUFBdEksRUFBQVEsR0FBQXNJLEVBQUFsSSxHQUFBLFFBQUFBLEdBQUEsUUFBQTBILEVBQUExSCxFQUFBaEIsSUFBQUksRUFBQVEsSUFBQThILEVBQUF0SSxFQUFBUSxJQUFnTTIvRyxXQUFZM1AsVUFBVTV3RyxJQUFBLFNBQUFJLEdBQWdCLElBQUFRLEVBQUEyaEcsRUFBQTZMLEtBQUFuM0YsS0FBQTdXLEVBQUEsWUFBZ0MsT0FBQVEsRUFBQW93QyxTQUFBcHdDLEVBQUEsSUFBQTJ3RyxHQUFBM21HLEtBQUF4SyxFQUFBb3NHLFdBQUFzWCxHQUFBbDVHLEtBQUF4SyxFQUFBb3NHLFdBQUFwc0csRUFBQXV3RyxLQUFBLFFBQWdGd1QsU0FBVUMsSUFBQSxVQUFBQyxNQUFBLGVBQXFDemhILEVBQUE0Z0gsY0FBQWpoQixFQUFBZ2UsVUFBQWwwRyxVQUF3Q3JNLElBQUEsU0FBQUksR0FBZ0IsSUFBQVEsRUFBQVIsRUFBQWlvRyxXQUFtQixPQUFBem5HLEtBQUF5bkcsWUFBQXpuRyxFQUFBeW5HLFdBQUEwSSxjQUFBLE1BQXdEOXdHLElBQUEsU0FBQUcsR0FBaUIsSUFBQVEsRUFBQVIsRUFBQWlvRyxXQUFtQnpuRyxNQUFBbXdHLGNBQUFud0csRUFBQXluRyxZQUFBem5HLEVBQUF5bkcsV0FBQTBJLGtCQUErRHhPLEVBQUFqM0YsTUFBQSx1SUFBaUppM0YsRUFBQTRoQixRQUFBejZHLEtBQUFpdUQsZUFBQWp1RCxPQUFxTzY0RixFQUFBcmpHLEdBQUFpUixRQUFhbTBHLFNBQUEsU0FBQWxrSCxHQUFxQixJQUFBUSxFQUFBc0ksRUFBQVIsRUFBQTFILEVBQUF5SCxFQUFBdkQsRUFBQW1FLEVBQUE2K0YsRUFBQSxFQUFzQixHQUFBcE4sRUFBQTE2RixHQUFBLE9BQUFzSixLQUFBNEIsS0FBQSxTQUFBMUssR0FBcUMyaEcsRUFBQTc0RixNQUFBNDZHLFNBQUFsa0gsRUFBQW5DLEtBQUF5TCxLQUFBOUksRUFBQW9qSCxHQUFBdDZHLFVBQTRDLElBQUE5SSxFQUFBcWpILEdBQUE3akgsSUFBQWEsT0FBQSxLQUFBaUksRUFBQVEsS0FBQXcrRixNQUFBLEdBQUFsbkcsRUFBQWdqSCxHQUFBOTZHLEdBQUFSLEVBQUEsSUFBQVEsRUFBQWkvRixVQUFBLElBQUE0YixHQUFBL2lILEdBQUEsS0FBc0YsSUFBSmtFLEVBQUEsRUFBSXVELEVBQUE3SCxFQUFBc0UsTUFBQXdELEVBQUFuSixRQUFBLElBQUFrSixFQUFBLFNBQUFDLEdBQUFELEVBQUEsS0FBa0R6SCxLQUFBcUksRUFBQTA2RyxHQUFBcjdHLEtBQUFRLEVBQUFvNkQsYUFBQSxRQUFBajZELEdBQXlDLE9BQUFLLE1BQVk2NkcsWUFBQSxTQUFBbmtILEdBQXlCLElBQUFRLEVBQUFzSSxFQUFBUixFQUFBMUgsRUFBQXlILEVBQUF2RCxFQUFBbUUsRUFBQTYrRixFQUFBLEVBQXNCLEdBQUFwTixFQUFBMTZGLEdBQUEsT0FBQXNKLEtBQUE0QixLQUFBLFNBQUExSyxHQUFxQzJoRyxFQUFBNzRGLE1BQUE2NkcsWUFBQW5rSCxFQUFBbkMsS0FBQXlMLEtBQUE5SSxFQUFBb2pILEdBQUF0NkcsVUFBK0MsSUFBQXlJLFVBQUFsUixPQUFBLE9BQUF5SSxLQUFBdU4sS0FBQSxZQUFrRCxJQUFBclcsRUFBQXFqSCxHQUFBN2pILElBQUFhLE9BQUEsS0FBQWlJLEVBQUFRLEtBQUF3K0YsTUFBQSxHQUFBbG5HLEVBQUFnakgsR0FBQTk2RyxHQUFBUixFQUFBLElBQUFRLEVBQUFpL0YsVUFBQSxJQUFBNGIsR0FBQS9pSCxHQUFBLEtBQXNGLElBQUprRSxFQUFBLEVBQUl1RCxFQUFBN0gsRUFBQXNFLE1BQUEsS0FBQXdELEVBQUFuSixRQUFBLElBQUFrSixFQUFBLFNBQUFDLElBQUFtQyxRQUFBLElBQUFwQyxFQUFBLFNBQXdFekgsS0FBQXFJLEVBQUEwNkcsR0FBQXI3RyxLQUFBUSxFQUFBbzZELGFBQUEsUUFBQWo2RCxHQUF5QyxPQUFBSyxNQUFZODZHLFlBQUEsU0FBQXBrSCxFQUFBUSxHQUEyQixJQUFBc0ksU0FBQTlJLEVBQUFzSSxFQUFBLFdBQUFRLEdBQUFxM0MsTUFBQTV3QyxRQUFBdlAsR0FBZ0Qsd0JBQUFRLEdBQUE4SCxFQUFBOUgsRUFBQThJLEtBQUE0NkcsU0FBQWxrSCxHQUFBc0osS0FBQTY2RyxZQUFBbmtILEdBQUEwNkYsRUFBQTE2RixHQUFBc0osS0FBQTRCLEtBQUEsU0FBQXBDLEdBQStGcTVGLEVBQUE3NEYsTUFBQTg2RyxZQUFBcGtILEVBQUFuQyxLQUFBeUwsS0FBQVIsRUFBQTg2RyxHQUFBdDZHLE1BQUE5SSxRQUFpRDhJLEtBQUE0QixLQUFBLFdBQXVCLElBQUExSyxFQUFBSSxFQUFBeUgsRUFBQXZELEVBQVksR0FBQXdELEVBQTRCLElBQXRCMUgsRUFBQSxFQUFBeUgsRUFBQTg1RixFQUFBNzRGLE1BQUF4RSxFQUFBKytHLEdBQUE3akgsR0FBc0JRLEVBQUFzRSxFQUFBbEUsTUFBQXlILEVBQUFxb0UsU0FBQWx3RSxHQUFBNkgsRUFBQTg3RyxZQUFBM2pILEdBQUE2SCxFQUFBNjdHLFNBQUExakgsYUFBNEQsSUFBQVIsR0FBQSxZQUFBOEksS0FBQXRJLEVBQUFvakgsR0FBQXQ2RyxRQUFBNmhHLEVBQUF0ckcsSUFBQXlKLEtBQUEsZ0JBQUE5SSxHQUFBOEksS0FBQTQ1RCxjQUFBNTVELEtBQUE0NUQsYUFBQSxRQUFBMWlFLElBQUEsSUFBQVIsRUFBQSxHQUFBbXJHLEVBQUF2ckcsSUFBQTBKLEtBQUEsMEJBQTJLb25FLFNBQUEsU0FBQTF3RSxHQUFzQixJQUFBUSxFQUFBc0ksRUFBQVIsRUFBQSxFQUF3QixJQUFaOUgsRUFBQSxJQUFBUixFQUFBLElBQVk4SSxFQUFBUSxLQUFBaEIsTUFBQSxPQUFBUSxFQUFBaS9GLFdBQUEsSUFBQTRiLEdBQUFDLEdBQUE5NkcsSUFBQSxLQUFBM0osUUFBQXFCLElBQUEsV0FBZ0YsWUFBWSxJQUFBNmpILEdBQUEsTUFBYWxpQixFQUFBcmpHLEdBQUFpUixRQUFhMG9CLElBQUEsU0FBQXo0QixHQUFnQixJQUFBUSxFQUFBc0ksRUFBQVIsRUFBQTFILEVBQUEwSSxLQUFBLEdBQXFCLE9BQUF5SSxVQUFBbFIsUUFBQXlILEVBQUFveUYsRUFBQTE2RixHQUFBc0osS0FBQTRCLEtBQUEsU0FBQXBDLEdBQXdELElBQUFsSSxFQUFNLElBQUEwSSxLQUFBeStGLFdBQUEsT0FBQW5uRyxFQUFBMEgsRUFBQXRJLEVBQUFuQyxLQUFBeUwsS0FBQVIsRUFBQXE1RixFQUFBNzRGLE1BQUFtdkIsT0FBQXo0QixHQUFBWSxFQUFBLG9CQUFBQSxLQUFBLEdBQUF1L0MsTUFBQTV3QyxRQUFBM08sT0FBQXVoRyxFQUFBbitGLElBQUFwRCxFQUFBLFNBQUFaLEdBQXNJLGFBQUFBLEVBQUEsR0FBQUEsRUFBQSxPQUF1QlEsRUFBQTJoRyxFQUFBbWlCLFNBQUFoN0csS0FBQWhGLE9BQUE2OUYsRUFBQW1pQixTQUFBaDdHLEtBQUE4aUcsU0FBQTcwQyxpQkFBQSxRQUFBLzJELFFBQUEsSUFBQUEsRUFBQVgsSUFBQXlKLEtBQUExSSxFQUFBLFdBQUEwSSxLQUFBeEosTUFBQWMsT0FBb0lBLEdBQUFKLEVBQUEyaEcsRUFBQW1pQixTQUFBMWpILEVBQUEwRCxPQUFBNjlGLEVBQUFtaUIsU0FBQTFqSCxFQUFBd3JHLFNBQUE3MEMsaUJBQUEsUUFBQS8yRCxRQUFBLEtBQUFzSSxFQUFBdEksRUFBQVosSUFBQWdCLEVBQUEsVUFBQWtJLEVBQUEsaUJBQUFBLEVBQUFsSSxFQUFBZCxPQUFBZ0osRUFBQTJCLFFBQUE0NUcsR0FBQSxVQUFBdjdHLEVBQUEsR0FBQUEsT0FBQSxLQUFnTHE1RixFQUFBcHlGLFFBQVl1MEcsVUFBVXp5RyxRQUFRalMsSUFBQSxTQUFBSSxHQUFnQixJQUFBUSxFQUFBMmhHLEVBQUE2TCxLQUFBbjNGLEtBQUE3VyxFQUFBLFNBQTZCLGFBQUFRLElBQUFtakgsR0FBQXhoQixFQUFBOXFGLEtBQUFyWCxNQUFnQytnQyxRQUFTbmhDLElBQUEsU0FBQUksR0FBZ0IsSUFBQVEsRUFBQXNJLEVBQUFSLEVBQUExSCxFQUFBWixFQUFBdUQsUUFBQThFLEVBQUFySSxFQUFBMndHLGNBQUE3ckcsRUFBQSxlQUFBOUUsRUFBQXNFLEtBQUEyRSxFQUFBbkUsRUFBQSxRQUFBZ2pHLEVBQUFoakcsRUFBQXVELEVBQUEsRUFBQXpILEVBQUFDLE9BQTZGLElBQUF5SCxFQUFBRCxFQUFBLEVBQUF5L0YsRUFBQWhqRyxFQUFBdUQsRUFBQSxFQUFrQkMsRUFBQXcvRixFQUFJeC9GLElBQUEsS0FBQVEsRUFBQWxJLEVBQUEwSCxJQUFBMkQsVUFBQTNELElBQUFELEtBQUFTLEVBQUEraUcsWUFBQS9pRyxFQUFBbS9GLFdBQUE0RCxXQUFBckMsRUFBQTFnRyxFQUFBbS9GLFdBQUEsY0FBdUcsR0FBQXpuRyxFQUFBMmhHLEVBQUFyNUYsR0FBQTJ2QixNQUFBM3pCLEVBQUEsT0FBQXRFLEVBQTJCeUksRUFBQTdKLEtBQUFvQixHQUFVLE9BQUF5SSxHQUFTcEosSUFBQSxTQUFBRyxFQUFBUSxHQUFtRSxJQUFoRCxJQUFBc0ksRUFBQVIsRUFBQTFILEVBQUFaLEVBQUF1RCxRQUFBOEUsRUFBQTg1RixFQUFBNkcsVUFBQXhvRyxHQUFBc0UsRUFBQWxFLEVBQUFDLE9BQWdEaUUsT0FBQXdELEVBQUExSCxFQUFBa0UsSUFBQW1ILFNBQUFrMkYsRUFBQThHLFFBQUE5RyxFQUFBbWlCLFNBQUF6eUcsT0FBQWpTLElBQUEwSSxHQUFBRCxJQUFBLEtBQUFTLEdBQUEsR0FBK0UsT0FBQUEsSUFBQTlJLEVBQUEyd0csZUFBQSxHQUFBdG9HLE9BQW9DODVGLEVBQUFqM0YsTUFBQSwrQkFBeUNpM0YsRUFBQW1pQixTQUFBaDdHLE9BQWtCekosSUFBQSxTQUFBRyxFQUFBUSxHQUFrQixHQUFBMi9DLE1BQUE1d0MsUUFBQS9PLEdBQUEsT0FBQVIsRUFBQTB3RyxRQUFBdk8sRUFBQThHLFFBQUE5RyxFQUFBbmlHLEdBQUF5NEIsTUFBQWo0QixJQUFBLElBQWlFZ0MsRUFBQTJnSCxVQUFBaGhCLEVBQUFtaUIsU0FBQWg3RyxNQUFBMUosSUFBQSxTQUFBSSxHQUE4QyxjQUFBQSxFQUFBMGpFLGFBQUEsY0FBQTFqRSxFQUFBRixVQUFxRDBDLEVBQUEraEgsUUFBQSxjQUFBdmtILEVBQTRCLElBQUF3a0gsR0FBQSxrQ0FBQUMsR0FBQSxTQUFBemtILEdBQXdEQSxFQUFBeTRHLG1CQUFxQnRXLEVBQUFweUYsT0FBQW95RixFQUFBbnhGLE9BQWtCZzZCLFFBQUEsU0FBQXhxQyxFQUFBc0ksRUFBQWxJLEVBQUF5SCxHQUEwQixJQUFBdkQsRUFBQW1FLEVBQUE2K0YsRUFBQXpnRyxFQUFBOUUsRUFBQVosRUFBQXdHLEVBQUEzRixFQUFBc3dELEdBQUFseUQsR0FBQTBILEdBQUFKLEVBQUF1MUMsRUFBQTUvQyxLQUFBMkMsRUFBQSxRQUFBQSxFQUFBOEQsS0FBQTlELEVBQUF1WixFQUFBMGpDLEVBQUE1L0MsS0FBQTJDLEVBQUEsYUFBQUEsRUFBQWkzRyxVQUFBejNDLE1BQUEsUUFBMkcsR0FBQS8yRCxFQUFBekcsRUFBQXNsRyxFQUFBbG5HLEtBQUEwSCxFQUFBLElBQUExSCxFQUFBbW5HLFVBQUEsSUFBQW5uRyxFQUFBbW5HLFdBQUF5YyxHQUFBaDZHLEtBQUF0QyxFQUFBaTZGLEVBQUFueEYsTUFBQW9tRyxhQUFBbHZHLEVBQUEvSSxRQUFBLFVBQUErSSxHQUFBNlIsRUFBQTdSLEVBQUE4M0QsTUFBQSxNQUFBbHRCLFFBQUEvNEIsRUFBQTBFLFFBQUFsYyxFQUFBMkYsRUFBQS9JLFFBQUEsYUFBQStJLEdBQUExSCxJQUFBMmhHLEVBQUF5RyxTQUFBcG9HLEVBQUEsSUFBQTJoRyxFQUFBeVcsTUFBQTF3RyxFQUFBLGlCQUFBMUgsT0FBQWtrSCxVQUFBcjhHLEVBQUEsSUFBQTdILEVBQUFpM0csVUFBQTE5RixFQUFBeFUsS0FBQSxLQUFBL0UsRUFBQTgzRyxXQUFBOTNHLEVBQUFpM0csVUFBQSxJQUFBeFEsT0FBQSxVQUFBbHRGLEVBQUF4VSxLQUFBLGlDQUFBL0UsRUFBQTZDLFlBQUEsRUFBQTdDLEVBQUFxZ0MsU0FBQXJnQyxFQUFBcWdDLE9BQUFqZ0MsR0FBQWtJLEVBQUEsTUFBQUEsR0FBQXRJLEdBQUEyaEcsRUFBQTZHLFVBQUFsZ0csR0FBQXRJLElBQUEySCxFQUFBZzZGLEVBQUFueEYsTUFBQXFtRyxRQUFBbnZHLE9BQTBiRyxJQUFBRixFQUFBNmlDLFVBQUEsSUFBQTdpQyxFQUFBNmlDLFFBQUE3cEMsTUFBQVAsRUFBQWtJLElBQUEsQ0FBNEMsSUFBQVQsSUFBQUYsRUFBQTZ3RyxXQUFBaC9GLEVBQUFwWixHQUFBLENBQTJCLElBQUF5RyxFQUFBYyxFQUFBbXZHLGNBQUFwdkcsRUFBQXM4RyxHQUFBaDZHLEtBQUFuRCxFQUFBYSxLQUFBZSxJQUFBZy9GLFlBQXVEaC9GLEVBQUVBLElBQUFnL0YsV0FBQW4xQyxFQUFBMXpELEtBQUE2SixHQUFBNitGLEVBQUE3K0YsRUFBNkI2K0YsS0FBQWxuRyxFQUFBb3JHLGVBQUExakcsSUFBQXdxRCxFQUFBMXpELEtBQUEwb0csRUFBQW4rRCxhQUFBbStELEVBQUE2YyxjQUFBM2tILEdBQXVFLElBQUo4RSxFQUFBLEdBQUltRSxFQUFBNnBELEVBQUFodUQsUUFBQXRFLEVBQUEwM0csd0JBQUExMUcsRUFBQXlHLEVBQUF6SSxFQUFBOEQsS0FBQVEsRUFBQSxFQUFBdUMsRUFBQWMsRUFBQW92RyxVQUFBcnZHLEdBQUF2RyxHQUFBd3BHLEVBQUF2ckcsSUFBQXFKLEVBQUEsZUFBb0d6SSxFQUFBOEQsT0FBQTZtRyxFQUFBdnJHLElBQUFxSixFQUFBLFlBQUF0SCxFQUFBUixNQUFBOEgsRUFBQUgsSUFBQW5ILEVBQUFZLEdBQUEwRyxFQUFBMUcsS0FBQVosRUFBQVIsT0FBQThwRyxFQUFBaGlHLEtBQUF6SSxFQUFBNkMsT0FBQTFCLEVBQUFSLE1BQUE4SCxFQUFBSCxJQUFBLElBQUF0SSxFQUFBNkMsUUFBQTdDLEVBQUFnNEcsa0JBQWtJLE9BQUFoNEcsRUFBQThELEtBQUE0RCxFQUFBRyxHQUFBN0gsRUFBQTY0RyxzQkFBQWx4RyxFQUFBcUQsV0FBQSxJQUFBckQsRUFBQXFELFNBQUFySyxNQUFBMnhELEVBQUEzdUQsTUFBQTJFLEtBQUFtaUcsRUFBQXJxRyxJQUFBMkIsR0FBQW00RixFQUFBOTVGLEVBQUFzSCxNQUFBOFIsRUFBQXBaLE1BQUFrbkcsRUFBQWxuRyxFQUFBMkIsTUFBQTNCLEVBQUEyQixHQUFBLE1BQUE0L0YsRUFBQW54RixNQUFBb21HLFVBQUFsdkcsRUFBQTFILEVBQUEwM0csd0JBQUExMUcsRUFBQWlyRyxpQkFBQXZsRyxFQUFBdThHLElBQUE3akgsRUFBQXNILEtBQUExSCxFQUFBMDNHLHdCQUFBMTFHLEVBQUF5eUcsb0JBQUEvc0csRUFBQXU4RyxJQUFBdGlCLEVBQUFueEYsTUFBQW9tRyxlQUFBLEVBQUF0UCxJQUFBbG5HLEVBQUEyQixHQUFBdWxHLElBQUF0bkcsRUFBQTZDLFNBQThUdWhILFNBQUEsU0FBQTVrSCxFQUFBUSxFQUFBc0ksR0FBMEIsSUFBQVIsRUFBQTY1RixFQUFBcHlGLE9BQUEsSUFBQW95RixFQUFBeVcsTUFBQTl2RyxHQUE4QnhFLEtBQUF0RSxFQUFBMDVHLGFBQUEsSUFBd0J2WCxFQUFBbnhGLE1BQUFnNkIsUUFBQTFpQyxFQUFBLEtBQUE5SCxNQUEyQjJoRyxFQUFBcmpHLEdBQUFpUixRQUFlaTdCLFFBQUEsU0FBQWhyQyxFQUFBUSxHQUFzQixPQUFBOEksS0FBQTRCLEtBQUEsV0FBNEJpM0YsRUFBQW54RixNQUFBZzZCLFFBQUFockMsRUFBQVEsRUFBQThJLFNBQTRCdTdHLGVBQUEsU0FBQTdrSCxFQUFBUSxHQUE4QixJQUFBc0ksRUFBQVEsS0FBQSxHQUFjLEdBQUFSLEVBQUEsT0FBQXE1RixFQUFBbnhGLE1BQUFnNkIsUUFBQWhyQyxFQUFBUSxFQUFBc0ksR0FBQSxNQUF1Q3RHLEVBQUEraEgsU0FBQXBpQixFQUFBajNGLE1BQXFCa2xHLE1BQUEsVUFBQTZJLEtBQUEsWUFBZ0MsU0FBQWo1RyxFQUFBUSxHQUFlLElBQUFzSSxFQUFBLFNBQUE5SSxHQUFrQm1pRyxFQUFBbnhGLE1BQUE0ekcsU0FBQXBrSCxFQUFBUixFQUFBNmdDLE9BQUFzaEUsRUFBQW54RixNQUFBOG1HLElBQUE5M0csS0FBNkNtaUcsRUFBQW54RixNQUFBcW1HLFFBQUE3MkcsSUFBb0JtM0csTUFBQSxXQUFpQixJQUFBcnZHLEVBQUFnQixLQUFBMGlHLGVBQUExaUcsS0FBQTFJLEVBQUF1cUcsRUFBQWlLLE9BQUE5c0csRUFBQTlILEdBQStDSSxHQUFBMEgsRUFBQW1sRyxpQkFBQXp0RyxFQUFBOEksR0FBQSxHQUFBcWlHLEVBQUFpSyxPQUFBOXNHLEVBQUE5SCxHQUFBSSxHQUFBLE9BQXFEZzNHLFNBQUEsV0FBcUIsSUFBQXR2RyxFQUFBZ0IsS0FBQTBpRyxlQUFBMWlHLEtBQUExSSxFQUFBdXFHLEVBQUFpSyxPQUFBOXNHLEVBQUE5SCxHQUFBLEVBQWlESSxFQUFBdXFHLEVBQUFpSyxPQUFBOXNHLEVBQUE5SCxFQUFBSSxJQUFBMEgsRUFBQTJzRyxvQkFBQWoxRyxFQUFBOEksR0FBQSxHQUFBcWlHLEVBQUE3dUYsT0FBQWhVLEVBQUE5SCxRQUFvRSxJQUFBc2tILEdBQUE5a0gsRUFBQWl3RyxTQUFBOFUsR0FBQXBxRCxLQUFBOCtDLE1BQUF1TCxHQUFBLEtBQXdDN2lCLEVBQUE4aUIsU0FBQSxTQUFBemtILEdBQXVCLElBQUFzSSxFQUFNLElBQUF0SSxHQUFBLGlCQUFBQSxFQUFBLFlBQXNDLElBQUlzSSxHQUFBLElBQUE5SSxFQUFBa2xILFdBQUFDLGdCQUFBM2tILEVBQUEsWUFBa0QsTUFBQVIsR0FBUzhJLE9BQUEsRUFBUyxPQUFBQSxNQUFBbEcscUJBQUEsZUFBQS9CLFFBQUFzaEcsRUFBQXQ3RixNQUFBLGdCQUFBckcsR0FBQXNJLEdBQXVGLElBQUFzOEcsR0FBQSxRQUFBQyxHQUFBLFNBQUFDLEdBQUEsd0NBQUFDLEdBQUEscUNBQThHLFNBQUFDLEdBQUF4bEgsRUFBQVEsRUFBQXNJLEVBQUFSLEdBQXFCLElBQUExSCxFQUFNLEdBQUF1L0MsTUFBQTV3QyxRQUFBL08sR0FBQTJoRyxFQUFBajNGLEtBQUExSyxFQUFBLFNBQUFBLEVBQUFJLEdBQTJDa0ksR0FBQXM4RyxHQUFBNTZHLEtBQUF4SyxHQUFBc0ksRUFBQXRJLEVBQUFZLEdBQUE0a0gsR0FBQXhsSCxFQUFBLHNCQUFBWSxHQUFBLE1BQUFBLEVBQUFKLEVBQUEsUUFBQUksRUFBQWtJLEVBQUFSLFVBQThFLEdBQUFRLEdBQUEsV0FBQWlSLEVBQUF2WixHQUFBOEgsRUFBQXRJLEVBQUFRLFFBQWtDLElBQUFJLEtBQUFKLEVBQUFnbEgsR0FBQXhsSCxFQUFBLElBQUFZLEVBQUEsSUFBQUosRUFBQUksR0FBQWtJLEVBQUFSLEdBQXlDNjVGLEVBQUE5bkIsTUFBQSxTQUFBcjZFLEVBQUFRLEdBQXNCLElBQUFzSSxFQUFBUixLQUFBMUgsRUFBQSxTQUFBWixFQUFBUSxHQUEyQixJQUFBc0ksRUFBQTR4RixFQUFBbDZGLFNBQWlCOEgsSUFBQXpILFFBQUFnSixtQkFBQTdKLEdBQUEsSUFBQTZKLG1CQUFBLE1BQUFmLEVBQUEsR0FBQUEsSUFBd0UsR0FBQXEzQyxNQUFBNXdDLFFBQUF2UCxNQUFBcW9HLFNBQUFsRyxFQUFBd0csY0FBQTNvRyxHQUFBbWlHLEVBQUFqM0YsS0FBQWxMLEVBQUEsV0FBdUVZLEVBQUEwSSxLQUFBN0osS0FBQTZKLEtBQUF4SixjQUEwQixJQUFBZ0osS0FBQTlJLEVBQUF3bEgsR0FBQTE4RyxFQUFBOUksRUFBQThJLEdBQUF0SSxFQUFBSSxHQUErQixPQUFBMEgsRUFBQS9DLEtBQUEsTUFBbUI0OEYsRUFBQXJqRyxHQUFBaVIsUUFBYzAxRyxVQUFBLFdBQXFCLE9BQUF0akIsRUFBQTluQixNQUFBL3dFLEtBQUFvOEcsbUJBQXNDQSxlQUFBLFdBQTJCLE9BQUFwOEcsS0FBQXRGLElBQUEsV0FBMkIsSUFBQWhFLEVBQUFtaUcsRUFBQW5wRCxLQUFBMXZDLEtBQUEsWUFBOEIsT0FBQXRKLEVBQUFtaUcsRUFBQTZHLFVBQUFocEcsR0FBQXNKLE9BQTZCeTBDLE9BQUEsV0FBb0IsSUFBQS85QyxFQUFBc0osS0FBQWhGLEtBQWdCLE9BQUFnRixLQUFBN0osT0FBQTBpRyxFQUFBNzRGLE1BQUFvcEcsR0FBQSxjQUFBNlMsR0FBQS82RyxLQUFBbEIsS0FBQThpRyxZQUFBa1osR0FBQTk2RyxLQUFBeEssS0FBQXNKLEtBQUFvbkcsVUFBQXhELEdBQUExaUcsS0FBQXhLLE1BQTZHZ0UsSUFBQSxTQUFBaEUsRUFBQVEsR0FBb0IsSUFBQXNJLEVBQUFxNUYsRUFBQTc0RixNQUFBbXZCLE1BQW9CLGFBQUEzdkIsRUFBQSxLQUFBcTNDLE1BQUE1d0MsUUFBQXpHLEdBQUFxNUYsRUFBQW4rRixJQUFBOEUsRUFBQSxTQUFBOUksR0FBeUQsT0FBT1AsS0FBQWUsRUFBQWYsS0FBQUssTUFBQUUsRUFBQXlLLFFBQUE0NkcsR0FBQSxZQUEyQzVsSCxLQUFBZSxFQUFBZixLQUFBSyxNQUFBZ0osRUFBQTJCLFFBQUE0NkcsR0FBQSxXQUF3Q3psSCxTQUFXLElBQUErbEgsR0FBQSxPQUFBQyxHQUFBLE9BQUFDLEdBQUEsZ0JBQUFDLEdBQUEsNkJBQUFDLEdBQUEsaUJBQUFDLEdBQUEsUUFBQUMsTUFBOEtDLE1BQU1DLEdBQUEsS0FBQXhoSCxPQUFBLEtBQUF5aEgsR0FBQTk5RyxFQUFBeEYsY0FBQSxLQUE2RCxTQUFBdWpILEdBQUFybUgsR0FBZSxnQkFBQVEsRUFBQXNJLEdBQXFCLGlCQUFBdEksSUFBQXNJLEVBQUF0SSxJQUFBLEtBQWdDLElBQUE4SCxFQUFBMUgsRUFBQSxFQUFBeUgsRUFBQTdILEVBQUErMkQsY0FBQWdlLE1BQUF5YyxPQUF5QyxHQUFBMEksRUFBQTV4RixHQUFBLEtBQUFSLEVBQUFELEVBQUF6SCxNQUFBLE1BQUEwSCxFQUFBLElBQUFBLElBQUF2RSxNQUFBLFNBQUEvRCxFQUFBc0ksR0FBQXRJLEVBQUFzSSxRQUFBMnFDLFFBQUFucUMsS0FBQTlJLEVBQUFzSSxHQUFBdEksRUFBQXNJLFFBQUFsSixLQUFBMEosSUFBMEcsU0FBQXc5RyxHQUFBdG1ILEVBQUFRLEVBQUFzSSxFQUFBUixHQUFxQixJQUFBMUgsS0FBUXlILEVBQUFySSxJQUFBa21ILEdBQVUsU0FBQXBoSCxFQUFBbUUsR0FBYyxJQUFBNitGLEVBQU0sT0FBQWxuRyxFQUFBcUksSUFBQSxFQUFBazVGLEVBQUFqM0YsS0FBQWxMLEVBQUFpSixPQUFBLFNBQUFqSixFQUFBaUosR0FBNkMsSUFBQTVCLEVBQUE0QixFQUFBekksRUFBQXNJLEVBQUFSLEdBQWUsdUJBQUFqQixHQUFBZ0IsR0FBQXpILEVBQUF5RyxHQUFBZ0IsSUFBQXkvRixFQUFBemdHLFFBQUEsR0FBQTdHLEVBQUErbEgsVUFBQXR6RSxRQUFBNXJDLEdBQUF2QyxFQUFBdUMsSUFBQSxLQUFtRnlnRyxFQUFJLE9BQUFoakcsRUFBQXRFLEVBQUErbEgsVUFBQSxNQUFBM2xILEVBQUEsTUFBQWtFLEVBQUEsS0FBMEMsU0FBQTBoSCxHQUFBeG1ILEVBQUFRLEdBQWlCLElBQUFzSSxFQUFBUixFQUFBMUgsRUFBQXVoRyxFQUFBc2tCLGFBQUFDLGdCQUF5QyxJQUFBNTlHLEtBQUF0SSxPQUFBLElBQUFBLEVBQUFzSSxNQUFBbEksRUFBQWtJLEdBQUE5SSxFQUFBc0ksV0FBMkNRLEdBQUF0SSxFQUFBc0ksSUFBWSxPQUFBUixHQUFBNjVGLEVBQUFweUYsUUFBQSxFQUFBL1AsRUFBQXNJLEdBQUF0SSxFQUFobEJvbUgsR0FBQTdWLEtBQUF1VSxHQUFBdlUsS0FBd2pEcE8sRUFBQXB5RixRQUFVOVEsT0FBQSxFQUFBMG5ILGdCQUF3QkMsUUFBUUgsY0FBZWw4RyxJQUFBdTZHLEdBQUF2VSxLQUFBanNHLEtBQUEsTUFBQXVpSCxRQUFsMUQsNERBQWsxRHI4RyxLQUFBczZHLEdBQUFnQyxVQUFBejFFLFFBQUEsRUFBQTAxRSxhQUFBLEVBQUFDLE9BQUEsRUFBQUMsWUFBQSxtREFBcUlDLFNBQXlCcEYsSUFBQXFFLEdBQUE5dUcsS0FBQSxhQUFBdTNCLEtBQUEsWUFBQXU0RSxJQUFBLDRCQUFBOXBFLEtBQUEscUNBQW1IdzFELFVBQVdzVSxJQUFBLFVBQUF2NEUsS0FBQSxTQUFBeU8sS0FBQSxZQUE0QytwRSxnQkFBaUJELElBQUEsY0FBQTl2RyxLQUFBLGVBQUFnbUMsS0FBQSxnQkFBMERncUUsWUFBYUMsU0FBQS9iLE9BQUFnYyxhQUFBLEVBQUFDLFlBQUFybEgsS0FBQUMsTUFBQXFsSCxXQUFBdGxCLEVBQUE4aUIsVUFBNEV5QixhQUFjbjhHLEtBQUEsRUFBQWswQyxTQUFBLElBQW1CaXBFLFVBQUEsU0FBQTFuSCxFQUFBUSxHQUF5QixPQUFBQSxFQUFBZ21ILE1BQUF4bUgsRUFBQW1pRyxFQUFBc2tCLGNBQUFqbUgsR0FBQWdtSCxHQUFBcmtCLEVBQUFza0IsYUFBQXptSCxJQUF5RDJuSCxjQUFBdEIsR0FBQUosSUFBQTJCLGNBQUF2QixHQUFBSCxJQUFBMkIsS0FBQSxTQUFBcm5ILEVBQUFzSSxHQUE4RCxpQkFBQXRJLElBQUFzSSxFQUFBdEksU0FBQSxHQUFBc0ksUUFBMkMsSUFBQWxJLEVBQUF5SCxFQUFBdkQsRUFBQW1FLEVBQUE2K0YsRUFBQXpnRyxFQUFBOUUsRUFBQWs3QyxFQUFBOTdDLEVBQUF3RyxFQUFBM0YsRUFBQTIvRixFQUFBdWxCLGFBQXdDNStHLEdBQUE0eEYsRUFBQWw0RixFQUFBaThDLFNBQUFqOEMsRUFBQXdYLEVBQUF4WCxFQUFBaThDLFVBQUFpOEMsRUFBQXFOLFVBQUFyTixFQUFBMk4sUUFBQWxHLEVBQUF6SCxHQUFBeUgsRUFBQW54RixNQUFBOGhELEVBQUFxdkMsRUFBQWlTLFdBQUFsc0csRUFBQWk2RixFQUFBdVIsVUFBQSxlQUFBMzVGLEVBQUF2WCxFQUFBc2xILGVBQWtJL2lILEtBQUtvakcsS0FBS0MsRUFBQSxXQUFBaUIsR0FBaUJybkcsV0FBQSxFQUFBK2xILGtCQUFBLFNBQUEvbkgsR0FBMkMsSUFBQVEsRUFBTSxHQUFBK0IsRUFBQSxDQUFNLElBQUEwRyxFQUFZLElBQUxBLEtBQUt6SSxFQUFBc2xILEdBQUE1a0IsS0FBQXA4RixJQUFBbUUsRUFBQXpJLEVBQUEsR0FBQSsyRCxlQUFBLzJELEVBQUEsR0FBOENBLEVBQUF5SSxFQUFBakosRUFBQXUzRCxlQUFxQixhQUFBLzJELEVBQUEsS0FBQUEsR0FBc0J3bkgsc0JBQUEsV0FBa0MsT0FBQXpsSCxFQUFBdUMsRUFBQSxNQUFnQm1qSCxpQkFBQSxTQUFBam9ILEVBQUFRLEdBQWdDLGFBQUErQixJQUFBdkMsRUFBQW1vRyxFQUFBbm9HLEVBQUF1M0QsZUFBQTR3QyxFQUFBbm9HLEVBQUF1M0QsZ0JBQUF2M0QsRUFBQStFLEVBQUEvRSxHQUFBUSxHQUFBOEksTUFBeUU0K0csaUJBQUEsU0FBQWxvSCxHQUE4QixhQUFBdUMsSUFBQUMsRUFBQTJsSCxTQUFBbm9ILEdBQUFzSixNQUFvQ3crRyxXQUFBLFNBQUE5bkgsR0FBd0IsSUFBQVEsRUFBTSxHQUFBUixFQUFBLEdBQUF1QyxFQUFBOG1HLEVBQUFnTCxPQUFBcjBHLEVBQUFxcEcsRUFBQXBuRyxjQUFnQyxJQUFBekIsS0FBQVIsRUFBQStaLEVBQUF2WixJQUFBdVosRUFBQXZaLEdBQUFSLEVBQUFRLElBQWlDLE9BQUE4SSxNQUFZOCtHLE1BQUEsU0FBQXBvSCxHQUFtQixJQUFBUSxFQUFBUixHQUFBb29HLEVBQVcsT0FBQXhuRyxLQUFBd25ILE1BQUE1bkgsR0FBQWc4QyxFQUFBLEVBQUFoOEMsR0FBQThJLE9BQW1DLEdBQUF3cEQsRUFBQXJ3RCxRQUFBNG1HLEdBQUE3bUcsRUFBQStILE1BQUEvSixHQUFBZ0MsRUFBQStILEtBQUF1NkcsR0FBQXZVLE1BQUEsSUFBQTlsRyxRQUFBdTdHLEdBQUFsQixHQUFBZ0MsU0FBQSxNQUFBdGtILEVBQUE4QixLQUFBd0UsRUFBQXlELFFBQUF6RCxFQUFBeEUsTUFBQTlCLEVBQUErSixRQUFBL0osRUFBQThCLEtBQUE5QixFQUFBK2pILFdBQUEvakgsRUFBQStyQyxVQUFBLEtBQUFncEIsY0FBQWdlLE1BQUF5YyxLQUFBLFVBQUF4dkYsRUFBQTZsSCxZQUFBLENBQXNNaGhILEVBQUFpQixFQUFBeEYsY0FBQSxLQUF1QixJQUFJdUUsRUFBQWtwRyxLQUFBL3RHLEVBQUErSCxJQUFBbEQsRUFBQWtwRyxLQUFBbHBHLEVBQUFrcEcsS0FBQS90RyxFQUFBNmxILFlBQUFqQyxHQUFBVSxTQUFBLEtBQUFWLEdBQUF0d0IsTUFBQXp1RixFQUFBeS9HLFNBQUEsS0FBQXovRyxFQUFBeXVGLEtBQTBGLE1BQUE5MUYsR0FBU3dDLEVBQUE2bEgsYUFBQSxHQUFrQixHQUFBN2xILEVBQUErRCxNQUFBL0QsRUFBQXVrSCxhQUFBLGlCQUFBdmtILEVBQUErRCxPQUFBL0QsRUFBQStELEtBQUE0N0YsRUFBQTluQixNQUFBNzNFLEVBQUErRCxLQUFBL0QsRUFBQThsSCxjQUFBaEMsR0FBQUwsR0FBQXpqSCxFQUFBc0csRUFBQXVnRyxHQUFBOW1HLEVBQUEsT0FBQThtRyxFQUE0L0IsSUFBQTFuRyxLQUExNEI4N0MsRUFBQTBrRCxFQUFBbnhGLE9BQUF4TyxFQUFBNnVDLFNBQUEsR0FBQTh3RCxFQUFBbGpHLFVBQUFrakcsRUFBQW54RixNQUFBZzZCLFFBQUEsYUFBQXhvQyxFQUFBOEIsS0FBQTlCLEVBQUE4QixLQUFBbXRGLGNBQUFqdkYsRUFBQStsSCxZQUFBeEMsR0FBQXY3RyxLQUFBaEksRUFBQThCLE1BQUErRCxFQUFBN0YsRUFBQStILElBQUFFLFFBQUFtN0csR0FBQSxJQUFBcGpILEVBQUErbEgsV0FBQS9sSCxFQUFBK0QsTUFBQS9ELEVBQUF1a0gsYUFBQSxLQUFBdmtILEVBQUF5a0gsYUFBQSxJQUFBOW5ILFFBQUEsdUNBQUFxRCxFQUFBK0QsS0FBQS9ELEVBQUErRCxLQUFBa0UsUUFBQWs3RyxHQUFBLE9BQUF4OUcsRUFBQTNGLEVBQUErSCxJQUFBeEcsTUFBQXNFLEVBQUF4SCxRQUFBMkIsRUFBQStELE9BQUEvRCxFQUFBdWtILGFBQUEsaUJBQUF2a0gsRUFBQStELFFBQUE4QixJQUFBMjhHLEdBQUF4NkcsS0FBQW5DLEdBQUEsU0FBQTdGLEVBQUErRCxZQUFBL0QsRUFBQStELE9BQUEsSUFBQS9ELEVBQUF5MkMsUUFBQTV3QyxJQUFBb0MsUUFBQW83RyxHQUFBLE1BQUExOUcsR0FBQTY4RyxHQUFBeDZHLEtBQUFuQyxHQUFBLGNBQUEwOEcsS0FBQTU4RyxHQUFBM0YsRUFBQStILElBQUFsQyxFQUFBRixHQUFBM0YsRUFBQWdtSCxhQUFBcm1CLEVBQUF3a0IsYUFBQXQrRyxJQUFBZ2hHLEVBQUE0ZSxpQkFBQSxvQkFBQTlsQixFQUFBd2tCLGFBQUF0K0csSUFBQTg1RixFQUFBeWtCLEtBQUF2K0csSUFBQWdoRyxFQUFBNGUsaUJBQUEsZ0JBQUE5bEIsRUFBQXlrQixLQUFBditHLE1BQUE3RixFQUFBK0QsTUFBQS9ELEVBQUErbEgsYUFBQSxJQUFBL2xILEVBQUF5a0gsYUFBQW4rRyxFQUFBbStHLGNBQUE1ZCxFQUFBNGUsaUJBQUEsZUFBQXpsSCxFQUFBeWtILGFBQUE1ZCxFQUFBNGUsaUJBQUEsU0FBQXpsSCxFQUFBK2pILFVBQUEsSUFBQS9qSCxFQUFBMGtILFFBQUExa0gsRUFBQStqSCxVQUFBLElBQUEvakgsRUFBQTBrSCxRQUFBMWtILEVBQUErakgsVUFBQSxXQUFBL2pILEVBQUErakgsVUFBQSxRQUFBSixHQUFBLFdBQTYyQixJQUFBM2pILEVBQUEwa0gsUUFBQSxNQUE2QjFrSCxFQUFBaW1ILFFBQUFwZixFQUFBNGUsaUJBQUF0bUgsRUFBQWEsRUFBQWltSCxRQUFBOW1ILElBQXNELEdBQUFhLEVBQUFrbUgsY0FBQSxJQUFBbG1ILEVBQUFrbUgsV0FBQTdxSCxLQUFBNjhGLEVBQUEyTyxFQUFBN21HLElBQUFELEdBQUEsT0FBQThtRyxFQUFBK2UsUUFBcUUsR0FBQWhnQixFQUFBLFFBQUFsZ0csRUFBQTBQLElBQUFwVixFQUFBbS9HLFVBQUF0WSxFQUFBbUssS0FBQWh4RyxFQUFBbW1ILFNBQUF0ZixFQUFBb0ssS0FBQWp4RyxFQUFBcUUsT0FBQWpHLEVBQUEwbEgsR0FBQUosR0FBQTFqSCxFQUFBc0csRUFBQXVnRyxHQUFBLENBQWlGLEdBQUFBLEVBQUFybkcsV0FBQSxFQUFBeTdDLEdBQUF6akMsRUFBQWd4QixRQUFBLFlBQUFxK0QsRUFBQTdtRyxJQUFBRCxFQUFBLE9BQUE4bUcsRUFBNEQ3bUcsRUFBQXdrSCxPQUFBeGtILEVBQUFYLFFBQUEsSUFBQWltRyxFQUFBOW5HLEVBQUE2cUMsV0FBQSxXQUFpRHcrRCxFQUFBK2UsTUFBQSxZQUFtQjVsSCxFQUFBWCxVQUFhLElBQUlVLEdBQUEsRUFBQTNCLEVBQUFrQixLQUFBaUQsRUFBQXkzQyxHQUFpQixNQUFBeDhDLEdBQVMsR0FBQXVDLEVBQUEsTUFBQXZDLEVBQWF3OEMsR0FBQSxFQUFBeDhDLFNBQVN3OEMsR0FBQSxrQkFBMEIsU0FBQUEsRUFBQWg4QyxFQUFBc0ksRUFBQVIsRUFBQVcsR0FBb0IsSUFBQTVCLEVBQUExRixFQUFBd0csRUFBQXBELEVBQUFvakcsRUFBQUMsRUFBQXQvRixFQUFrQnZHLE9BQUEsRUFBQXVsRyxHQUFBOW5HLEVBQUFrcEMsYUFBQTQrRCxHQUFBbG5HLE9BQUEsRUFBQWtFLEVBQUFtRSxHQUFBLEdBQUFvZ0csRUFBQXJuRyxXQUFBeEIsRUFBQSxNQUFBNkcsRUFBQTdHLEdBQUEsS0FBQUEsRUFBQSxXQUFBQSxFQUFBOEgsSUFBQXZELEVBQXJ0SSxTQUFBL0UsRUFBQVEsRUFBQXNJLEdBQTBELElBQXZDLElBQUFSLEVBQUExSCxFQUFBeUgsRUFBQXZELEVBQUFtRSxFQUFBakosRUFBQTZ5RyxTQUFBL0ssRUFBQTluRyxFQUFBdW1ILFVBQXVDLE1BQUF6ZSxFQUFBLElBQUFBLEVBQUFoMUQsYUFBQSxJQUFBeHFDLE1BQUF0SSxFQUFBbW9ILFVBQUEzbkgsRUFBQXVuSCxrQkFBQSxpQkFBMkYsR0FBQXovRyxFQUFBLElBQUExSCxLQUFBcUksRUFBQSxHQUFBQSxFQUFBckksSUFBQXFJLEVBQUFySSxHQUFBNEosS0FBQWxDLEdBQUEsQ0FBdUN3L0YsRUFBQTcwRCxRQUFBcnlDLEdBQWEsTUFBTSxHQUFBa25HLEVBQUEsS0FBQWgvRixFQUFBVCxFQUFBeS9GLEVBQUEsT0FBbUIsQ0FBSyxJQUFBbG5HLEtBQUFrSSxFQUFBLENBQVksSUFBQWcvRixFQUFBLElBQUE5bkcsRUFBQXFuSCxXQUFBem1ILEVBQUEsSUFBQWtuRyxFQUFBLEtBQW9Dei9GLEVBQUF6SCxFQUFJLE1BQU1rRSxNQUFBbEUsR0FBU3lILEtBQUF2RCxFQUFPLEdBQUF1RCxFQUFBLE9BQUFBLElBQUF5L0YsRUFBQSxJQUFBQSxFQUFBNzBELFFBQUE1cUMsR0FBQVMsRUFBQVQsR0FBbzZIdWdILENBQUFwbUgsRUFBQTZtRyxFQUFBL2dHLElBQUF2RCxFQUE1M0gsU0FBQS9FLEVBQUFRLEVBQUFzSSxFQUFBUixHQUFxQixJQUFBMUgsRUFBQXlILEVBQUF2RCxFQUFBbUUsRUFBQTYrRixFQUFBemdHLEtBQWtCOUUsRUFBQXZDLEVBQUF1bUgsVUFBQXhpSCxRQUF1QixHQUFBeEIsRUFBQSxPQUFBdUMsS0FBQTlFLEVBQUFxbkgsV0FBQWhnSCxFQUFBdkMsRUFBQXl5RCxlQUFBdjNELEVBQUFxbkgsV0FBQXZpSCxHQUE2RSxJQUFadUQsRUFBQTlGLEVBQUF1d0MsUUFBWXpxQyxHQUFBLEdBQUFySSxFQUFBb25ILGVBQUEvK0csS0FBQVMsRUFBQTlJLEVBQUFvbkgsZUFBQS8rRyxJQUFBN0gsSUFBQXNuRyxHQUFBeC9GLEdBQUF0SSxFQUFBK1EsYUFBQXZRLEVBQUFSLEVBQUErUSxXQUFBdlEsRUFBQVIsRUFBQXV1QyxXQUFBdTVELEVBQUF6L0YsSUFBQTlGLEVBQUF1d0MsUUFBQSxTQUFBenFDLElBQUF5L0YsT0FBOEksU0FBQUEsT0FBQXovRixFQUFBLENBQXdCLEtBQUF2RCxFQUFBdUMsRUFBQXlnRyxFQUFBLElBQUF6L0YsSUFBQWhCLEVBQUEsS0FBQWdCLElBQUEsSUFBQXpILEtBQUF5RyxFQUFBLElBQUE0QixFQUFBckksRUFBQW8vRCxNQUFBLFdBQUEzM0QsSUFBQXZELEVBQUF1QyxFQUFBeWdHLEVBQUEsSUFBQTcrRixFQUFBLEtBQUE1QixFQUFBLEtBQUE0QixFQUFBLE9BQXNHLElBQUFuRSxJQUFBdUMsRUFBQXpHLElBQUEsSUFBQXlHLEVBQUF6RyxLQUFBeUgsRUFBQVksRUFBQSxHQUFBMUcsRUFBQTB3QyxRQUFBaHFDLEVBQUEsS0FBa0QsTUFBTSxRQUFBbkUsRUFBQSxHQUFBQSxHQUFBOUUsRUFBQSxPQUFBUSxFQUFBc0UsRUFBQXRFLFFBQW1DLElBQVNBLEVBQUFzRSxFQUFBdEUsR0FBTyxNQUFBUixHQUFTLE9BQU82bEcsTUFBQSxjQUFBaC9GLE1BQUEvQixFQUFBOUUsRUFBQSxzQkFBQThuRyxFQUFBLE9BQUF6L0YsSUFBaUUsT0FBT3c5RixNQUFBLFVBQUF0L0YsS0FBQS9GLEdBQWt5R3FvSCxDQUFBcm1ILEVBQUF1QyxFQUFBc2tHLEVBQUFoaUcsTUFBQTdFLEVBQUFnbUgsY0FBQXJnQixFQUFBa0IsRUFBQTBlLGtCQUFBLG9CQUFBNWxCLEVBQUF3a0IsYUFBQXQrRyxHQUFBOC9GLE1BQUFrQixFQUFBMGUsa0JBQUEsV0FBQTVsQixFQUFBeWtCLEtBQUF2K0csR0FBQTgvRixJQUFBLE1BQUEzbkcsR0FBQSxTQUFBZ0MsRUFBQThCLEtBQUE4akcsRUFBQSxrQkFBQTVuRyxFQUFBNG5HLEVBQUEsZUFBQUEsRUFBQXJqRyxFQUFBOGdHLE1BQUFsa0csRUFBQW9ELEVBQUF3QixLQUFBYyxJQUFBYyxFQUFBcEQsRUFBQThCLFVBQUFzQixFQUFBaWdHLEdBQUE1bkcsR0FBQTRuRyxNQUFBLFFBQUE1bkcsRUFBQSxJQUFBQSxFQUFBLEtBQUE2b0csRUFBQXBuRyxPQUFBekIsRUFBQTZvRyxFQUFBeWYsWUFBQWhnSCxHQUFBcy9GLEdBQUEsR0FBQS9nRyxFQUFBeXJELEVBQUE0aEQsWUFBQWhhLEdBQUEvNEYsRUFBQXltRyxFQUFBaUIsSUFBQXYyQyxFQUFBK2hELFdBQUFuYSxHQUFBMk8sRUFBQWpCLEVBQUFqZ0csSUFBQWtoRyxFQUFBeWUsV0FBQS90RyxVQUFBLEVBQUEwakMsR0FBQXpqQyxFQUFBZ3hCLFFBQUEzakMsRUFBQSwyQkFBQWdpRyxFQUFBN21HLEVBQUE2RSxFQUFBMUYsRUFBQXdHLElBQUFELEVBQUErckcsU0FBQXZaLEdBQUEyTyxFQUFBakIsSUFBQTNxRCxJQUFBempDLEVBQUFneEIsUUFBQSxnQkFBQXErRCxFQUFBN21HLE1BQUEyL0YsRUFBQWxqRyxRQUFBa2pHLEVBQUFueEYsTUFBQWc2QixRQUFBLGNBQTRvQixPQUFBcStELEdBQVMwZixRQUFBLFNBQUEvb0gsRUFBQVEsRUFBQXNJLEdBQXlCLE9BQUFxNUYsRUFBQXZpRyxJQUFBSSxFQUFBUSxFQUFBc0ksRUFBQSxTQUEyQmtnSCxVQUFBLFNBQUFocEgsRUFBQVEsR0FBeUIsT0FBQTJoRyxFQUFBdmlHLElBQUFJLE9BQUEsRUFBQVEsRUFBQSxhQUFtQzJoRyxFQUFBajNGLE1BQUEsdUJBQUFsTCxFQUFBUSxHQUFzQzJoRyxFQUFBM2hHLEdBQUEsU0FBQVIsRUFBQThJLEVBQUFSLEVBQUExSCxHQUF1QixPQUFBODVGLEVBQUE1eEYsS0FBQWxJLEtBQUEwSCxJQUFBUSxTQUFBLEdBQUFxNUYsRUFBQTBsQixLQUFBMWxCLEVBQUFweUYsUUFBb0R4RixJQUFBdkssRUFBQXNFLEtBQUE5RCxFQUFBK3RDLFNBQUEzdEMsRUFBQTJGLEtBQUF1QyxFQUFBNi9HLFFBQUFyZ0gsR0FBeUM2NUYsRUFBQXdHLGNBQUEzb0csV0FBMEJtaUcsRUFBQWdhLFNBQUEsU0FBQW44RyxHQUF5QixPQUFBbWlHLEVBQUEwbEIsTUFBZXQ5RyxJQUFBdkssRUFBQXNFLEtBQUEsTUFBQWlxQyxTQUFBLFNBQUEwSyxPQUFBLEVBQUErdEUsT0FBQSxFQUFBMzFFLFFBQUEsRUFBQTQzRSxRQUFBLEtBQTZFOW1CLEVBQUFyakcsR0FBQWlSLFFBQWNtNUcsUUFBQSxTQUFBbHBILEdBQW9CLElBQUFRLEVBQU0sT0FBQThJLEtBQUEsS0FBQW94RixFQUFBMTZGLFNBQUFuQyxLQUFBeUwsS0FBQSxLQUFBOUksRUFBQTJoRyxFQUFBbmlHLEVBQUFzSixLQUFBLEdBQUEwaUcsZUFBQXRELEdBQUEsR0FBQXorRSxPQUFBLEdBQUEzZ0IsS0FBQSxHQUFBMitGLFlBQUF6bkcsRUFBQWk4RyxhQUFBbnpHLEtBQUEsSUFBQTlJLEVBQUF3RCxJQUFBLFdBQWdLLElBQVgsSUFBQWhFLEVBQUFzSixLQUFXdEosRUFBQW1wSCxtQkFBQW5wSCxJQUFBbXBILGtCQUFnRCxPQUFBbnBILElBQVN1OEcsT0FBQWp6RyxhQUFxQjgvRyxVQUFBLFNBQUFwcEgsR0FBdUIsT0FBQTA2RixFQUFBMTZGLEdBQUFzSixLQUFBNEIsS0FBQSxTQUFBMUssR0FBa0MyaEcsRUFBQTc0RixNQUFBOC9HLFVBQUFwcEgsRUFBQW5DLEtBQUF5TCxLQUFBOUksTUFBa0M4SSxLQUFBNEIsS0FBQSxXQUF1QixJQUFBMUssRUFBQTJoRyxFQUFBNzRGLE1BQUFSLEVBQUF0SSxFQUFBcXlHLFdBQTZCL3BHLEVBQUFqSSxPQUFBaUksRUFBQW9nSCxRQUFBbHBILEdBQUFRLEVBQUErN0csT0FBQXY4RyxNQUFvQ3FwSCxLQUFBLFNBQUFycEgsR0FBa0IsSUFBQVEsRUFBQWs2RixFQUFBMTZGLEdBQVcsT0FBQXNKLEtBQUE0QixLQUFBLFNBQUFwQyxHQUE2QnE1RixFQUFBNzRGLE1BQUE0L0csUUFBQTFvSCxFQUFBUixFQUFBbkMsS0FBQXlMLEtBQUFSLEdBQUE5SSxNQUFzQ3NwSCxPQUFBLFNBQUF0cEgsR0FBb0IsT0FBQXNKLEtBQUE3RSxPQUFBekUsR0FBQSt2RyxJQUFBLFFBQUE3a0csS0FBQSxXQUFrRGkzRixFQUFBNzRGLE1BQUFzekcsWUFBQXR6RyxLQUFBd2lHLGNBQXFDeGlHLFFBQVE2NEYsRUFBQW1RLEtBQUF6QyxRQUFBaVIsT0FBQSxTQUFBOWdILEdBQW9DLE9BQUFtaUcsRUFBQW1RLEtBQUF6QyxRQUFBMFosUUFBQXZwSCxJQUFpQ21pRyxFQUFBbVEsS0FBQXpDLFFBQUEwWixRQUFBLFNBQUF2cEgsR0FBb0MsU0FBQUEsRUFBQTQ5RyxhQUFBNTlHLEVBQUF3cEgsY0FBQXhwSCxFQUFBOC9HLGlCQUFBai9HLFNBQW1Fc2hHLEVBQUFza0IsYUFBQWdELElBQUEsV0FBK0IsSUFBSSxXQUFBenBILEVBQUF5QixlQUE0QixNQUFBekIsTUFBWSxJQUFBMHBILElBQVFDLEVBQUEsSUFBQUMsS0FBQSxLQUFlQyxHQUFBMW5CLEVBQUFza0IsYUFBQWdELE1BQXlCam5ILEVBQUFzbkgsT0FBQUQsSUFBQSxvQkFBQUEsR0FBQXJuSCxFQUFBcWxILEtBQUFnQyxRQUFBMW5CLEVBQUF5bEIsY0FBQSxTQUFBcG5ILEdBQStFLElBQUFzSSxFQUFBUixFQUFRLEdBQUE5RixFQUFBc25ILE1BQUFELEtBQUFycEgsRUFBQTZuSCxZQUFBLE9BQXFDdm1ILEtBQUEsU0FBQWxCLEVBQUF5SCxHQUFtQixJQUFBdkQsRUFBQW1FLEVBQUF6SSxFQUFBaXBILE1BQWdCLEdBQUF4Z0gsRUFBQXJILEtBQUFwQixFQUFBOEQsS0FBQTlELEVBQUErSixJQUFBL0osRUFBQXdtSCxNQUFBeG1ILEVBQUF1cEgsU0FBQXZwSCxFQUFBZ3hHLFVBQUFoeEcsRUFBQXdwSCxVQUFBLElBQUFsbEgsS0FBQXRFLEVBQUF3cEgsVUFBQS9nSCxFQUFBbkUsR0FBQXRFLEVBQUF3cEgsVUFBQWxsSCxHQUF5UCxJQUFBQSxLQUE5SXRFLEVBQUEybkgsVUFBQWwvRyxFQUFBaS9HLGtCQUFBai9HLEVBQUFpL0csaUJBQUExbkgsRUFBQTJuSCxVQUFBM25ILEVBQUE2bkgsYUFBQXpuSCxFQUFBLHNCQUFBQSxFQUFBLHNDQUE4SUEsRUFBQXFJLEVBQUFnL0csaUJBQUFuakgsRUFBQWxFLEVBQUFrRSxJQUFzQ2dFLEVBQUEsU0FBQTlJLEdBQWMsa0JBQWtCOEksTUFBQVIsRUFBQVcsRUFBQXl2RixPQUFBenZGLEVBQUFnaEgsUUFBQWhoSCxFQUFBaWhILFFBQUFqaEgsRUFBQWtoSCxVQUFBbGhILEVBQUFsSCxtQkFBQSxlQUFBL0IsRUFBQWlKLEVBQUFtL0csUUFBQSxVQUFBcG9ILEVBQUEsaUJBQUFpSixFQUFBaEgsT0FBQW9HLEVBQUEsV0FBQUEsRUFBQVksRUFBQWhILE9BQUFnSCxFQUFBNi9HLFlBQUF6Z0gsRUFBQXFoSCxHQUFBemdILEVBQUFoSCxTQUFBZ0gsRUFBQWhILE9BQUFnSCxFQUFBNi9HLFdBQUEsVUFBQTcvRyxFQUFBbWhILGNBQUEsMEJBQUFuaEgsRUFBQTVHLGNBQXVSZ29ILE9BQUFwaEgsRUFBQXFoSCxXQUFvQmp6RyxLQUFBcE8sRUFBQTVHLGNBQW9CNEcsRUFBQSsrRyw0QkFBOEIvK0csRUFBQXl2RixPQUFBNXZGLElBQUFSLEVBQUFXLEVBQUFnaEgsUUFBQWhoSCxFQUFBa2hILFVBQUFyaEgsRUFBQSxrQkFBQUcsRUFBQWloSCxRQUFBamhILEVBQUFpaEgsUUFBQTVoSCxFQUFBVyxFQUFBbEgsbUJBQUEsV0FBZ0gsSUFBQWtILEVBQUFqSCxZQUFBaEMsRUFBQTZxQyxXQUFBLFdBQTBDL2hDLEdBQUFSLE9BQVNRLElBQUEsU0FBYyxJQUFJRyxFQUFBbkgsS0FBQXRCLEVBQUErbkgsWUFBQS9uSCxFQUFBK0YsTUFBQSxNQUFtQyxNQUFBdkcsR0FBUyxHQUFBOEksRUFBQSxNQUFBOUksSUFBY29vSCxNQUFBLFdBQWtCdC9HLFdBQVNxNUYsRUFBQXdsQixjQUFBLFNBQUEzbkgsR0FBOEJBLEVBQUFxb0gsY0FBQXJvSCxFQUFBNnlHLFNBQUFod0csUUFBQSxLQUFzQ3MvRixFQUFBdWxCLFdBQWVSLFNBQVNya0gsT0FBQSw2RkFBbUdnd0csVUFBV2h3RyxPQUFBLDJCQUFpQ3drSCxZQUFha0QsY0FBQSxTQUFBdnFILEdBQTBCLE9BQUFtaUcsRUFBQTRHLFdBQUEvb0csU0FBMkJtaUcsRUFBQXdsQixjQUFBLGtCQUFBM25ILFFBQXVDLElBQUFBLEVBQUFpNUMsUUFBQWo1QyxFQUFBaTVDLE9BQUEsR0FBQWo1QyxFQUFBcW9ILGNBQUFyb0gsRUFBQXNFLEtBQUEsU0FBNkQ2OUYsRUFBQXlsQixjQUFBLGtCQUFBNW5ILEdBQXlELElBQUFRLEVBQUFzSSxFQUFsQixHQUFBOUksRUFBQXFvSCxZQUEwQixPQUFPdm1ILEtBQUEsU0FBQWxCLEVBQUF5SCxHQUFtQjdILEVBQUEyaEcsRUFBQSxZQUFBbnBELE1BQXNCajJDLFFBQUEvQyxFQUFBd3FILGNBQUF4bkgsSUFBQWhELEVBQUF1SyxNQUFrQ3VOLEdBQUEsYUFBQWhQLEVBQUEsU0FBQTlJLEdBQWdDUSxFQUFBOGIsU0FBQXhULEVBQUEsS0FBQTlJLEdBQUFxSSxFQUFBLFVBQUFySSxFQUFBc0UsS0FBQSxRQUFBdEUsRUFBQXNFLFFBQXdEZ0UsRUFBQTVGLEtBQUFPLFlBQUF6QyxFQUFBLEtBQTJCNG5ILE1BQUEsV0FBa0J0L0csV0FBWSxJQUFBMmhILE1BQUFDLEdBQUEsb0JBQWlDdm9CLEVBQUF1bEIsV0FBYWlELE1BQUEsV0FBQUMsY0FBQSxXQUEwQyxJQUFBNXFILEVBQUF5cUgsR0FBQXRtSCxPQUFBZytGLEVBQUF5RyxRQUFBLElBQUFtYyxLQUFtQyxPQUFBejdHLEtBQUF0SixJQUFBLEVBQUFBLEtBQXFCbWlHLEVBQUF3bEIsY0FBQSxzQkFBQW5uSCxFQUFBc0ksRUFBQVIsR0FBK0MsSUFBQTFILEVBQUF5SCxFQUFBdkQsRUFBQW1FLEdBQUEsSUFBQXpJLEVBQUFtcUgsUUFBQUQsR0FBQWxnSCxLQUFBaEssRUFBQStKLEtBQUEsdUJBQUEvSixFQUFBK0YsTUFBQSxLQUFBL0YsRUFBQXltSCxhQUFBLElBQUE5bkgsUUFBQSxzQ0FBQXVySCxHQUFBbGdILEtBQUFoSyxFQUFBK0YsT0FBQSxRQUF3SyxHQUFBMEMsR0FBQSxVQUFBekksRUFBQStsSCxVQUFBLFVBQUEzbEgsRUFBQUosRUFBQW9xSCxjQUFBbHdCLEVBQUFsNkYsRUFBQW9xSCxlQUFBcHFILEVBQUFvcUgsZ0JBQUFwcUgsRUFBQW9xSCxjQUFBM2hILEVBQUF6SSxFQUFBeUksR0FBQXpJLEVBQUF5SSxHQUFBd0IsUUFBQWlnSCxHQUFBLEtBQUE5cEgsSUFBQSxJQUFBSixFQUFBbXFILFFBQUFucUgsRUFBQStKLE1BQUF5NkcsR0FBQXg2RyxLQUFBaEssRUFBQStKLEtBQUEsU0FBQS9KLEVBQUFtcUgsTUFBQSxJQUFBL3BILEdBQUFKLEVBQUE2bUgsV0FBQSwwQkFBaVAsT0FBQXZpSCxHQUFBcTlGLEVBQUF0N0YsTUFBQWpHLEVBQUEsbUJBQUFrRSxFQUFBLElBQTRDdEUsRUFBQStsSCxVQUFBLFVBQUFsK0csRUFBQXJJLEVBQUFZLEdBQUFaLEVBQUFZLEdBQUEsV0FBOENrRSxFQUFBaU4sV0FBWXpKLEVBQUErckcsT0FBQSxnQkFBcUIsSUFBQWhzRyxFQUFBODVGLEVBQUFuaUcsR0FBQThqSCxXQUFBbGpILEdBQUFaLEVBQUFZLEdBQUF5SCxFQUFBN0gsRUFBQUksS0FBQUosRUFBQW9xSCxjQUFBOWhILEVBQUE4aEgsY0FBQUgsR0FBQXJySCxLQUFBd0IsSUFBQWtFLEdBQUE0MUYsRUFBQXJ5RixNQUFBdkQsRUFBQSxJQUFBQSxFQUFBdUQsT0FBQSxJQUFvSCxXQUFXN0YsRUFBQXFvSCxtQkFBQSxXQUFrQyxJQUFBN3FILEVBQUFzSSxFQUFBd2lILGVBQUFELG1CQUFBLElBQUE5VSxLQUFtRCxPQUFBLzFHLEVBQUErcEMsVUFBQSxpQ0FBQS9wQyxFQUFBOHJHLFdBQUFqckcsT0FBckYsR0FBNkpzaEcsRUFBQXdRLFVBQUEsU0FBQTN5RyxFQUFBUSxFQUFBc0ksR0FBK0IsdUJBQUE5SSxNQUErQixrQkFBQVEsSUFBQXNJLEVBQUF0SSxLQUFBLEdBQTBDQSxJQUFBZ0MsRUFBQXFvSCxxQkFBQWpxSCxHQUFBSixFQUFBOEgsRUFBQXdpSCxlQUFBRCxtQkFBQSxLQUFBL25ILGNBQUEsU0FBQXl0RyxLQUFBam9HLEVBQUEybkcsU0FBQU0sS0FBQS92RyxFQUFBa0MsS0FBQU8sWUFBQXJDLElBQUFKLEVBQUE4SCxHQUFBRCxFQUFBb2hHLEVBQUF2SSxLQUFBbGhHLEdBQUE4RSxHQUFBZ0UsTUFBQVQsR0FBQTdILEVBQUFzQyxjQUFBdUYsRUFBQSxNQUFBQSxFQUFBc3BHLElBQUEzeEcsR0FBQVEsRUFBQXNFLFFBQUFqRSxRQUFBc2hHLEVBQUFyOUYsR0FBQXdYLFNBQUE2bEYsRUFBQXgzQyxTQUFBdGlELEVBQUF5akcsY0FBVixJQUFBbHJHLEVBQUF5SCxFQUFBdkQsR0FBcVJxOUYsRUFBQXJqRyxHQUFBaTZHLEtBQUEsU0FBQS80RyxFQUFBUSxFQUFBc0ksR0FBMkIsSUFBQVIsRUFBQTFILEVBQUF5SCxFQUFBdkQsRUFBQXdFLEtBQUFMLEVBQUFqSixFQUFBYixRQUFBLEtBQWtDLE9BQUE4SixHQUFBLElBQUFYLEVBQUFxN0csR0FBQTNqSCxFQUFBK0QsTUFBQWtGLElBQUFqSixJQUFBK0QsTUFBQSxFQUFBa0YsSUFBQXl4RixFQUFBbDZGLElBQUFzSSxFQUFBdEksU0FBQSxHQUFBQSxHQUFBLGlCQUFBQSxJQUFBSSxFQUFBLFFBQUFrRSxFQUFBakUsT0FBQSxHQUFBc2hHLEVBQUEwbEIsTUFBeUh0OUcsSUFBQXZLLEVBQUFzRSxLQUFBMUQsR0FBQSxNQUFBMnRDLFNBQUEsT0FBQWhvQyxLQUFBL0YsSUFBMkNnekcsS0FBQSxTQUFBeHpHLEdBQW1CcUksRUFBQTBKLFVBQUFqTixFQUFBOHBDLEtBQUF0bUMsRUFBQTY1RixFQUFBLFNBQUFvYSxPQUFBcGEsRUFBQXdRLFVBQUEzeUcsSUFBQWd1RyxLQUFBMWxHLEdBQUF0SSxLQUFrRXEwRyxPQUFBdnJHLEdBQUEsU0FBQTlJLEVBQUFRLEdBQTBCc0UsRUFBQW9HLEtBQUEsV0FBa0JwQyxFQUFBM0gsTUFBQW1JLEtBQUFqQixJQUFBckksRUFBQXFDLGFBQUE3QixFQUFBUixRQUF3Q3NKLE1BQU82NEYsRUFBQWozRixNQUFBLHFGQUFBbEwsRUFBQVEsR0FBbUcyaEcsRUFBQXJqRyxHQUFBMEIsR0FBQSxTQUFBUixHQUFvQixPQUFBc0osS0FBQXdPLEdBQUF0WCxFQUFBUixNQUFxQm1pRyxFQUFBbVEsS0FBQXpDLFFBQUFrYixTQUFBLFNBQUEvcUgsR0FBc0MsT0FBQW1pRyxFQUFBK0csS0FBQS9HLEVBQUF1Z0IsT0FBQSxTQUFBbGlILEdBQW1DLE9BQUFSLElBQUFRLEVBQUE0M0csT0FBa0J2M0csUUFBU3NoRyxFQUFBMXJGLFFBQVd1MEcsVUFBQSxTQUFBaHJILEVBQUFRLEVBQUFzSSxHQUEwQixJQUFBUixFQUFBMUgsRUFBQXlILEVBQUF2RCxFQUFBbUUsRUFBQTYrRixFQUFBdmxHLEVBQUE0L0YsRUFBQXdULElBQUEzMUcsRUFBQSxZQUFBeTlDLEVBQUEwa0QsRUFBQW5pRyxHQUFBMkIsS0FBb0QsV0FBQVksSUFBQXZDLEVBQUFpYSxNQUFBdEYsU0FBQSxZQUFBMUwsRUFBQXcwQyxFQUFBaG5DLFNBQUFwTyxFQUFBODVGLEVBQUF3VCxJQUFBMzFHLEVBQUEsT0FBQThuRyxFQUFBM0YsRUFBQXdULElBQUEzMUcsRUFBQSxzQkFBQXVDLEdBQUEsVUFBQUEsS0FBQThGLEVBQUF5L0YsR0FBQTNvRyxRQUFBLFlBQUEyRixHQUFBd0QsRUFBQW0xQyxFQUFBOW9DLFlBQUFpdUIsSUFBQWhpQyxFQUFBMEgsRUFBQXE2QixPQUFBNzlCLEVBQUEwOUUsV0FBQW42RSxJQUFBLEVBQUF6SCxFQUFBNGhGLFdBQUFzbEIsSUFBQSxHQUFBcE4sRUFBQWw2RixTQUFBM0MsS0FBQW1DLEVBQUE4SSxFQUFBcTVGLEVBQUFweUYsVUFBaVE5RyxLQUFBLE1BQUF6SSxFQUFBb2lDLE1BQUFqaEMsRUFBQWloQyxJQUFBcGlDLEVBQUFvaUMsSUFBQTM1QixFQUFBMjVCLElBQUE5OUIsR0FBQSxNQUFBdEUsRUFBQW1pQyxPQUFBaGhDLEVBQUFnaEMsS0FBQW5pQyxFQUFBbWlDLEtBQUExNUIsRUFBQTA1QixLQUFBL2hDLEdBQUEsVUFBQUosSUFBQXlxSCxNQUFBcHRILEtBQUFtQyxFQUFBMkIsR0FBQTg3QyxFQUFBazRELElBQUFoMEcsS0FBd0h3Z0csRUFBQXJqRyxHQUFBaVIsUUFBYzBHLE9BQUEsU0FBQXpXLEdBQW1CLEdBQUErUixVQUFBbFIsT0FBQSxnQkFBQWIsRUFBQXNKLFVBQUE0QixLQUFBLFNBQUExSyxHQUFpRTJoRyxFQUFBMXJGLE9BQUF1MEcsVUFBQTFoSCxLQUFBdEosRUFBQVEsS0FBK0IsSUFBQUEsRUFBQXNJLEVBQUFSLEVBQUFnQixLQUFBLEdBQWtCLE9BQUFoQixJQUFBdzNHLGlCQUFBai9HLFFBQUFMLEVBQUE4SCxFQUFBNDBELHdCQUFBcDBELEVBQUFSLEVBQUEwakcsY0FBQXJpRSxhQUFrRy9HLElBQUFwaUMsRUFBQW9pQyxJQUFBOTVCLEVBQUFvaUgsWUFBQXZvRixLQUFBbmlDLEVBQUFtaUMsS0FBQTc1QixFQUFBcWlILGVBQXFEdm9GLElBQUEsRUFBQUQsS0FBQSxRQUF2SixHQUFxS2h1QixTQUFBLFdBQXFCLEdBQUFyTCxLQUFBLElBQVksSUFBQXRKLEVBQUFRLEVBQUFzSSxFQUFBUixFQUFBZ0IsS0FBQSxHQUFBMUksR0FBdUJnaUMsSUFBQSxFQUFBRCxLQUFBLEdBQWMsYUFBQXcvRCxFQUFBd1QsSUFBQXJ0RyxFQUFBLFlBQUE5SCxFQUFBOEgsRUFBQTQwRCw0QkFBNkQsQ0FBMkUsSUFBdEUxOEQsRUFBQThJLEtBQUFtTixTQUFBM04sRUFBQVIsRUFBQTBqRyxjQUFBaHNHLEVBQUFzSSxFQUFBOGlILGNBQUF0aUgsRUFBQXlrRyxnQkFBc0V2dEcsUUFBQThJLEVBQUFpdEcsTUFBQS8xRyxJQUFBOEksRUFBQXlrRyxrQkFBQSxXQUFBcEwsRUFBQXdULElBQUEzMUcsRUFBQSxhQUFBQSxJQUFBaW9HLFdBQTRGam9HLE9BQUFzSSxHQUFBLElBQUF0SSxFQUFBK25HLFlBQUFubkcsRUFBQXVoRyxFQUFBbmlHLEdBQUF5VyxVQUFBbXNCLEtBQUF1L0QsRUFBQXdULElBQUEzMUcsRUFBQSxxQkFBQVksRUFBQStoQyxNQUFBdy9ELEVBQUF3VCxJQUFBMzFHLEVBQUEsdUJBQXNILE9BQU80aUMsSUFBQXBpQyxFQUFBb2lDLElBQUFoaUMsRUFBQWdpQyxJQUFBdS9ELEVBQUF3VCxJQUFBcnRHLEVBQUEsZ0JBQUFxNkIsS0FBQW5pQyxFQUFBbWlDLEtBQUEvaEMsRUFBQStoQyxLQUFBdy9ELEVBQUF3VCxJQUFBcnRHLEVBQUEsb0JBQXNGOGlILGFBQUEsV0FBeUIsT0FBQTloSCxLQUFBdEYsSUFBQSxXQUFtRCxJQUF4QixJQUFBaEUsRUFBQXNKLEtBQUE4aEgsYUFBd0JwckgsR0FBQSxXQUFBbWlHLEVBQUF3VCxJQUFBMzFHLEVBQUEsYUFBQUEsSUFBQW9ySCxhQUF5RCxPQUFBcHJILEdBQUE4eEcsUUFBZ0IzUCxFQUFBajNGLE1BQVVxMUcsV0FBQSxjQUFBRCxVQUFBLGVBQWlELFNBQUF0Z0gsRUFBQVEsR0FBZSxJQUFBc0ksRUFBQSxnQkFBQXRJLEVBQXdCMmhHLEVBQUFyakcsR0FBQWtCLEdBQUEsU0FBQXNJLEdBQW9CLE9BQUF1TCxFQUFBdkssS0FBQSxTQUFBdEosRUFBQXNJLEVBQUExSCxHQUE4QixJQUFBeUgsRUFBTSxHQUFBMlIsRUFBQWhhLEdBQUFxSSxFQUFBckksRUFBQSxJQUFBQSxFQUFBK25HLFdBQUExL0YsRUFBQXJJLEVBQUEycEMsa0JBQUEsSUFBQS9vQyxFQUFBLE9BQUF5SCxJQUFBN0gsR0FBQVIsRUFBQXNJLEdBQTRFRCxJQUFBZ2pILFNBQUF2aUgsRUFBQVQsRUFBQThpSCxZQUFBdnFILEVBQUFrSSxFQUFBbEksRUFBQXlILEVBQUE2aUgsYUFBQWxySCxFQUFBc0ksR0FBQTFILEdBQXlEWixFQUFBc0ksRUFBQXlKLFVBQUFsUixXQUF3QnNoRyxFQUFBajNGLE1BQUEsdUJBQUFsTCxFQUFBUSxHQUFzQzJoRyxFQUFBK2MsU0FBQTErRyxHQUFBazlHLEdBQUFsN0csRUFBQXc3RyxjQUFBLFNBQUFoK0csRUFBQThJLEdBQStDLEdBQUFBLEVBQUEsT0FBQUEsRUFBQXcwRyxHQUFBdDlHLEVBQUFRLEdBQUEwOEcsR0FBQTF5RyxLQUFBMUIsR0FBQXE1RixFQUFBbmlHLEdBQUEyVSxXQUFBblUsR0FBQSxLQUFBc0ksTUFBNkRxNUYsRUFBQWozRixNQUFVb2dILE9BQUEsU0FBQUMsTUFBQSxTQUE4QixTQUFBdnJILEVBQUFRLEdBQWUyaEcsRUFBQWozRixNQUFRNmhCLFFBQUEsUUFBQS9zQixFQUFBdUosUUFBQS9JLEVBQUFnckgsR0FBQSxRQUFBeHJILEdBQXlDLFNBQUE4SSxFQUFBUixHQUFlNjVGLEVBQUFyakcsR0FBQXdKLEdBQUEsU0FBQTFILEVBQUF5SCxHQUFzQixJQUFBdkQsRUFBQWlOLFVBQUFsUixTQUFBaUksR0FBQSxrQkFBQWxJLEdBQUFxSSxFQUFBSCxLQUFBLElBQUFsSSxJQUFBLElBQUF5SCxFQUFBLG1CQUF5RixPQUFBd0wsRUFBQXZLLEtBQUEsU0FBQTlJLEVBQUFzSSxFQUFBbEksR0FBOEIsSUFBQXlILEVBQU0sT0FBQTJSLEVBQUF4WixHQUFBLElBQUE4SCxFQUFBbkosUUFBQSxTQUFBcUIsRUFBQSxRQUFBUixHQUFBUSxFQUFBbUMsU0FBQTRxRyxnQkFBQSxTQUFBdnRHLEdBQUEsSUFBQVEsRUFBQXVuRyxVQUFBMS9GLEVBQUE3SCxFQUFBK3NHLGdCQUFBbDNGLEtBQUFtRyxJQUFBaGMsRUFBQXUxRyxLQUFBLFNBQUEvMUcsR0FBQXFJLEVBQUEsU0FBQXJJLEdBQUFRLEVBQUF1MUcsS0FBQSxTQUFBLzFHLEdBQUFxSSxFQUFBLFNBQUFySSxHQUFBcUksRUFBQSxTQUFBckksVUFBQSxJQUFBWSxFQUFBdWhHLEVBQUF3VCxJQUFBbjFHLEVBQUFzSSxFQUFBRyxHQUFBazVGLEVBQUFsb0YsTUFBQXpaLEVBQUFzSSxFQUFBbEksRUFBQXFJLElBQStQekksRUFBQXNFLEVBQUFsRSxPQUFBLEVBQUFrRSxRQUFvQnE5RixFQUFBajNGLEtBQUEsd0xBQUE4MEQsTUFBQSxjQUFBaGdFLEVBQUFRLEdBQTBOMmhHLEVBQUFyakcsR0FBQTBCLEdBQUEsU0FBQVIsRUFBQThJLEdBQXNCLE9BQUFpSixVQUFBbFIsT0FBQSxFQUFBeUksS0FBQXdPLEdBQUF0WCxFQUFBLEtBQUFSLEVBQUE4SSxHQUFBUSxLQUFBMGhDLFFBQUF4cUMsTUFBK0QyaEcsRUFBQXJqRyxHQUFBaVIsUUFBZTA3RyxNQUFBLFNBQUF6ckgsRUFBQVEsR0FBb0IsT0FBQThJLEtBQUEreEcsV0FBQXI3RyxHQUFBczdHLFdBQUE5NkcsR0FBQVIsTUFBNENtaUcsRUFBQXJqRyxHQUFBaVIsUUFBZWxILEtBQUEsU0FBQTdJLEVBQUFRLEVBQUFzSSxHQUFxQixPQUFBUSxLQUFBd08sR0FBQTlYLEVBQUEsS0FBQVEsRUFBQXNJLElBQTJCNGlILE9BQUEsU0FBQTFySCxFQUFBUSxHQUFzQixPQUFBOEksS0FBQWlRLElBQUF2WixFQUFBLEtBQUFRLElBQTBCbXJILFNBQUEsU0FBQTNySCxFQUFBUSxFQUFBc0ksRUFBQVIsR0FBNEIsT0FBQWdCLEtBQUF3TyxHQUFBdFgsRUFBQVIsRUFBQThJLEVBQUFSLElBQXdCc2pILFdBQUEsU0FBQTVySCxFQUFBUSxFQUFBc0ksR0FBNEIsV0FBQWlKLFVBQUFsUixPQUFBeUksS0FBQWlRLElBQUF2WixFQUFBLE1BQUFzSixLQUFBaVEsSUFBQS9ZLEVBQUFSLEdBQUEsS0FBQThJLE1BQW9FcTVGLEVBQUEwcEIsTUFBQSxTQUFBN3JILEVBQUFRLEdBQXdCLElBQUFzSSxFQUFBUixFQUFBMUgsRUFBVSxvQkFBQUosSUFBQXNJLEVBQUE5SSxFQUFBUSxLQUFBUixJQUFBOEksR0FBQTR4RixFQUFBMTZGLEdBQUEsT0FBQXNJLEVBQUFELEVBQUF4SyxLQUFBa1UsVUFBQSxJQUFBblIsRUFBQSxXQUF1RixPQUFBWixFQUFBbUIsTUFBQVgsR0FBQThJLEtBQUFoQixFQUFBM0QsT0FBQTBELEVBQUF4SyxLQUFBa1UsZUFBb0RvM0YsS0FBQW5wRyxFQUFBbXBHLEtBQUFucEcsRUFBQW1wRyxNQUFBaEgsRUFBQWdILE9BQUF2b0csR0FBa0N1aEcsRUFBQTJwQixVQUFBLFNBQUE5ckgsR0FBeUJBLEVBQUFtaUcsRUFBQStTLFlBQUEvUyxFQUFBeVEsT0FBQSxJQUE0QnpRLEVBQUE1eUYsUUFBQTR3QyxNQUFBNXdDLFFBQUE0eUYsRUFBQTRwQixVQUFBNXBILEtBQUFDLE1BQUErL0YsRUFBQWlLLFNBQUE1QyxFQUFBckgsRUFBQW5qRSxXQUFBMDdELEVBQUF5SCxFQUFBNnBCLFNBQUFoeUcsRUFBQW1vRixFQUFBaDZELFVBQUE2aUUsRUFBQTdJLEVBQUE3OUYsS0FBQXlWLEVBQUFvb0YsRUFBQXNYLElBQUE5K0MsS0FBQTgrQyxJQUFBdFgsRUFBQVAsVUFBQSxTQUFBNWhHLEdBQXVKLElBQUFRLEVBQUEyaEcsRUFBQTc5RixLQUFBdEUsR0FBZ0Isa0JBQUFRLEdBQUEsV0FBQUEsS0FBQXFnQixNQUFBN2dCLEVBQUF3aUYsV0FBQXhpRixLQUE0RG5CLEVBQUEsd0RBQStFbUosS0FBL0U0L0YsRUFBQSxXQUFzRSxPQUFBekYsR0FBU2hoRyxNQUFBaUcsU0FBQTFELEVBQUEwRCxRQUFBd2dHLElBQUUsSUFBQXFrQixHQUFBanNILEVBQUFrc0gsT0FBQUMsR0FBQW5zSCxFQUFBaXFHLEVBQXVCLE9BQUE5SCxFQUFBaXFCLFdBQUEsU0FBQTVySCxHQUFnQyxPQUFBUixFQUFBaXFHLElBQUE5SCxJQUFBbmlHLEVBQUFpcUcsRUFBQWtpQixJQUFBM3JILEdBQUFSLEVBQUFrc0gsU0FBQS9wQixJQUFBbmlHLEVBQUFrc0gsT0FBQUQsSUFBQTlwQixHQUEwRDNoRyxJQUFBUixFQUFBa3NILE9BQUFsc0gsRUFBQWlxRyxFQUFBOUgsdUVDSWh5cEYsSUFBQWtxQixLQVdBQyxFQVRBLFNBQUF4dEgsR0FDQSxJQUFBeXRILEVBRUEsa0JBRUEsWUFEQSxJQUFBQSxNQUFBenRILEVBQUFxQyxNQUFBbUksS0FBQXlJLFlBQ0F3NkcsR0FJQUMsQ0FBQSxXQU1BLE9BQUFwdkgsUUFBQXVGLG1CQUFBZzlGLE1BQUF2aUcsT0FBQXF2SCxPQU9BQyxFQUFBLFNBQUE1dEgsR0FDQSxJQUFBeXRILEtBRUEsZ0JBQUExckYsR0FNQSxzQkFBQUEsRUFDQSxPQUFBQSxJQUVBLFlBQUEwckYsRUFBQTFyRixHQUFBLENBQ0EsSUFBQThyRixFQWpCQSxTQUFBOXJGLEdBQ0EsT0FBQWwrQixTQUFBaXFILGNBQUEvckYsSUFnQkFoakMsS0FBQXlMLEtBQUF1M0IsR0FFQSxHQUFBempDLE9BQUF5dkgsbUJBQUFGLGFBQUF2dkgsT0FBQXl2SCxrQkFDQSxJQUdBRixJQUFBcFosZ0JBQUE3d0csS0FDSyxNQUFBMUMsR0FDTDJzSCxFQUFBLEtBR0FKLEVBQUExckYsR0FBQThyRixFQUVBLE9BQUFKLEVBQUExckYsSUExQkEsR0E4QkFpc0YsRUFBQSxLQUNBQyxFQUFBLEVBQ0FDLEtBRUFDLEVBQUFwdUgsRUFBQSwyQ0FxREEsU0FBQXF1SCxFQUFBQyxFQUFBNXBILEdBQ0EsUUFBQTNDLEVBQUEsRUFBZ0JBLEVBQUF1c0gsRUFBQXRzSCxPQUFtQkQsSUFBQSxDQUNuQyxJQUFBb0UsRUFBQW1vSCxFQUFBdnNILEdBQ0FpcEMsRUFBQXdpRixFQUFBcm5ILEVBQUEvRCxJQUVBLEdBQUE0b0MsRUFBQSxDQUNBQSxFQUFBdWpGLE9BRUEsUUFBQTNwSCxFQUFBLEVBQWlCQSxFQUFBb21DLEVBQUF3akYsTUFBQXhzSCxPQUEyQjRDLElBQzVDb21DLEVBQUF3akYsTUFBQTVwSCxHQUFBdUIsRUFBQXFvSCxNQUFBNXBILElBR0EsS0FBUUEsRUFBQXVCLEVBQUFxb0gsTUFBQXhzSCxPQUF1QjRDLElBQy9Cb21DLEVBQUF3akYsTUFBQWp1SCxLQUFBa3VILEVBQUF0b0gsRUFBQXFvSCxNQUFBNXBILEdBQUFGLFFBRUcsQ0FDSCxJQUFBOHBILEtBRUEsSUFBQTVwSCxFQUFBLEVBQWlCQSxFQUFBdUIsRUFBQXFvSCxNQUFBeHNILE9BQXVCNEMsSUFDeEM0cEgsRUFBQWp1SCxLQUFBa3VILEVBQUF0b0gsRUFBQXFvSCxNQUFBNXBILEdBQUFGLElBR0E4b0gsRUFBQXJuSCxFQUFBL0QsS0FBMkJBLEdBQUErRCxFQUFBL0QsR0FBQW1zSCxLQUFBLEVBQUFDLFdBSzNCLFNBQUFFLEVBQUFua0gsRUFBQTdGLEdBSUEsSUFIQSxJQUFBNHBILEtBQ0FLLEtBRUE1c0gsRUFBQSxFQUFnQkEsRUFBQXdJLEVBQUF2SSxPQUFpQkQsSUFBQSxDQUNqQyxJQUFBb0UsRUFBQW9FLEVBQUF4SSxHQUNBSyxFQUFBc0MsRUFBQWl6QyxLQUFBeHhDLEVBQUEsR0FBQXpCLEVBQUFpekMsS0FBQXh4QyxFQUFBLEdBSUF5b0gsR0FBYzlYLElBSGQzd0csRUFBQSxHQUdjc3hFLE1BRmR0eEUsRUFBQSxHQUVjMkUsVUFEZDNFLEVBQUEsSUFHQXdvSCxFQUFBdnNILEdBQ0F1c0gsRUFBQXZzSCxHQUFBb3NILE1BQUFqdUgsS0FBQXF1SCxHQURBTixFQUFBL3RILEtBQUFvdUgsRUFBQXZzSCxJQUFrREEsS0FBQW9zSCxPQUFBSSxLQUlsRCxPQUFBTixFQUdBLFNBQUFPLEVBQUFucUgsRUFBQTBXLEdBQ0EsSUFBQTRtQixFQUFBNnJGLEVBQUFucEgsRUFBQW9xSCxZQUVBLElBQUE5c0YsRUFDQSxVQUFBei9CLE1BQUEsK0dBR0EsSUFBQXdzSCxFQUFBWixJQUFBbnNILE9BQUEsR0FFQSxXQUFBMEMsRUFBQXNxSCxTQUNBRCxFQUVHQSxFQUFBNWdCLFlBQ0huc0UsRUFBQTQ3RSxhQUFBeGlHLEVBQUEyekcsRUFBQTVnQixhQUVBbnNFLEVBQUE1OUIsWUFBQWdYLEdBSkE0bUIsRUFBQTQ3RSxhQUFBeGlHLEVBQUE0bUIsRUFBQXF1RSxZQU1BOGQsRUFBQTV0SCxLQUFBNmEsUUFDRSxjQUFBMVcsRUFBQXNxSCxTQUNGaHRGLEVBQUE1OUIsWUFBQWdYLE9BQ0UscUJBQUExVyxFQUFBc3FILFdBQUF0cUgsRUFBQXNxSCxTQUFBblIsT0FJRixVQUFBdDdHLE1BQUEsOExBSEEsSUFBQTRyRyxFQUFBMGYsRUFBQW5wSCxFQUFBb3FILFdBQUEsSUFBQXBxSCxFQUFBc3FILFNBQUFuUixRQUNBNzdFLEVBQUE0N0UsYUFBQXhpRyxFQUFBK3lGLElBTUEsU0FBQThnQixFQUFBN3pHLEdBQ0EsVUFBQUEsRUFBQWd1RixXQUFBLFNBQ0FodUYsRUFBQWd1RixXQUFBQyxZQUFBanVGLEdBRUEsSUFBQW5VLEVBQUFrbkgsRUFBQTd0SCxRQUFBOGEsR0FDQW5VLEdBQUEsR0FDQWtuSCxFQUFBcm1ILE9BQUFiLEVBQUEsR0FJQSxTQUFBaW9ILEVBQUF4cUgsR0FDQSxJQUFBMFcsRUFBQXRYLFNBQUFHLGNBQUEsU0FTQSxZQVBBa0YsSUFBQXpFLEVBQUF5cUgsTUFBQTFwSCxPQUNBZixFQUFBeXFILE1BQUExcEgsS0FBQSxZQUdBMnBILEVBQUFoMEcsRUFBQTFXLEVBQUF5cUgsT0FDQU4sRUFBQW5xSCxFQUFBMFcsR0FFQUEsRUFpQkEsU0FBQWcwRyxFQUFBajRHLEVBQUFnNEcsR0FDQXR3SCxPQUFBdUksS0FBQStuSCxHQUFBOW5ILFFBQUEsU0FBQTBDLEdBQ0FvTixFQUFBa3RELGFBQUF0NkQsRUFBQW9sSCxFQUFBcGxILE1BSUEsU0FBQTBrSCxFQUFBamhFLEVBQUE5b0QsR0FDQSxJQUFBMFcsRUFBQS9YLEVBQUFvYSxFQUFBalosRUFHQSxHQUFBRSxFQUFBeWYsV0FBQXFwQyxFQUFBc3BELElBQUEsQ0FHQSxLQUZBdHlHLEVBQUFFLEVBQUF5ZixVQUFBcXBDLEVBQUFzcEQsTUFTQSxvQkFKQXRwRCxFQUFBc3BELElBQUF0eUcsRUFVQSxHQUFBRSxFQUFBdXBILFVBQUEsQ0FDQSxJQUFBb0IsRUFBQW5CLElBRUE5eUcsRUFBQTZ5RyxNQUFBaUIsRUFBQXhxSCxJQUVBckIsRUFBQWlzSCxFQUFBdGxILEtBQUEsS0FBQW9SLEVBQUFpMEcsR0FBQSxHQUNBNXhHLEVBQUE2eEcsRUFBQXRsSCxLQUFBLEtBQUFvUixFQUFBaTBHLEdBQUEsUUFHQTdoRSxFQUFBMWlELFdBQ0EsbUJBQUF5a0gsS0FDQSxtQkFBQUEsSUFBQUMsaUJBQ0EsbUJBQUFELElBQUFFLGlCQUNBLG1CQUFBQyxNQUNBLG1CQUFBOWtILE1BRUF3USxFQXhEQSxTQUFBMVcsR0FDQSxJQUFBdW9CLEVBQUFucEIsU0FBQUcsY0FBQSxRQVVBLFlBUkFrRixJQUFBekUsRUFBQXlxSCxNQUFBMXBILE9BQ0FmLEVBQUF5cUgsTUFBQTFwSCxLQUFBLFlBRUFmLEVBQUF5cUgsTUFBQVEsSUFBQSxhQUVBUCxFQUFBbmlHLEVBQUF2b0IsRUFBQXlxSCxPQUNBTixFQUFBbnFILEVBQUF1b0IsR0FFQUEsRUE2Q0EyaUcsQ0FBQWxySCxHQUNBckIsRUFpRkEsU0FBQTRwQixFQUFBdm9CLEVBQUE4b0QsR0FDQSxJQUFBc3BELEVBQUF0cEQsRUFBQXNwRCxJQUNBaHNHLEVBQUEwaUQsRUFBQTFpRCxVQVFBK2tILE9BQUExbUgsSUFBQXpFLEVBQUFvckgsdUJBQUFobEgsR0FFQXBHLEVBQUFvckgsdUJBQUFELEtBQ0EvWSxFQUFBc1gsRUFBQXRYLElBR0Foc0csSUFFQWdzRyxHQUFBLHVEQUF1RGxzRyxLQUFBRyxTQUFBQyxtQkFBQTFILEtBQUEySCxVQUFBSCxNQUFBLE9BR3ZELElBQUFpbEgsRUFBQSxJQUFBTCxNQUFBNVksSUFBNkJyeEcsS0FBQSxhQUU3QnVxSCxFQUFBL2lHLEVBQUF5a0YsS0FFQXprRixFQUFBeWtGLEtBQUE2ZCxJQUFBQyxnQkFBQU8sR0FFQUMsR0FBQVQsSUFBQUUsZ0JBQUFPLElBNUdBaG1ILEtBQUEsS0FBQW9SLEVBQUExVyxHQUNBK1ksRUFBQSxXQUNBd3hHLEVBQUE3ekcsR0FFQUEsRUFBQXMyRixNQUFBNmQsSUFBQUUsZ0JBQUFyMEcsRUFBQXMyRixTQUdBdDJGLEVBQUE4ekcsRUFBQXhxSCxHQUNBckIsRUFzREEsU0FBQStYLEVBQUFveUMsR0FDQSxJQUFBc3BELEVBQUF0cEQsRUFBQXNwRCxJQUNBci9CLEVBQUFqcUIsRUFBQWlxQixNQUVBQSxHQUNBcjhELEVBQUFpcEQsYUFBQSxRQUFBb1QsR0FHQSxHQUFBcjhELEVBQUE2MEcsV0FDQTcwRyxFQUFBNjBHLFdBQUFwbkYsUUFBQWl1RSxNQUNFLENBQ0YsS0FBQTE3RixFQUFBaTFGLFlBQ0FqMUYsRUFBQWl1RixZQUFBanVGLEVBQUFpMUYsWUFHQWoxRixFQUFBaFgsWUFBQU4sU0FBQWkwRyxlQUFBakIsTUFyRUE5c0csS0FBQSxLQUFBb1IsR0FDQXFDLEVBQUEsV0FDQXd4RyxFQUFBN3pHLEtBTUEsT0FGQS9YLEVBQUFtcUQsR0FFQSxTQUFBMGlFLEdBQ0EsR0FBQUEsRUFBQSxDQUNBLEdBQ0FBLEVBQUFwWixNQUFBdHBELEVBQUFzcEQsS0FDQW9aLEVBQUF6NEMsUUFBQWpxQixFQUFBaXFCLE9BQ0F5NEMsRUFBQXBsSCxZQUFBMGlELEVBQUExaUQsVUFFQSxPQUdBekgsRUFBQW1xRCxFQUFBMGlFLFFBRUF6eUcsS0F6T0E1WSxFQUFBMEQsUUFBQSxTQUFBZ0MsRUFBQTdGLEdBQ0EsdUJBQUF5ckgsY0FDQSxpQkFBQXJzSCxTQUFBLFVBQUF2QixNQUFBLGlFQUdBbUMsU0FFQXlxSCxNQUFBLGlCQUFBenFILEVBQUF5cUgsTUFBQXpxSCxFQUFBeXFILFNBSUF6cUgsRUFBQXVwSCxXQUFBLGtCQUFBdnBILEVBQUF1cEgsWUFBQXZwSCxFQUFBdXBILFVBQUFSLEtBR0Evb0gsRUFBQW9xSCxhQUFBcHFILEVBQUFvcUgsV0FBQSxRQUdBcHFILEVBQUFzcUgsV0FBQXRxSCxFQUFBc3FILFNBQUEsVUFFQSxJQUFBVixFQUFBSSxFQUFBbmtILEVBQUE3RixHQUlBLE9BRkEycEgsRUFBQUMsRUFBQTVwSCxHQUVBLFNBQUEwckgsR0FHQSxJQUZBLElBQUFDLEtBRUF0dUgsRUFBQSxFQUFpQkEsRUFBQXVzSCxFQUFBdHNILE9BQW1CRCxJQUFBLENBQ3BDLElBQUFvRSxFQUFBbW9ILEVBQUF2c0gsSUFDQWlwQyxFQUFBd2lGLEVBQUFybkgsRUFBQS9ELEtBRUFtc0gsT0FDQThCLEVBQUE5dkgsS0FBQXlxQyxHQUdBb2xGLEdBRUEvQixFQURBSyxFQUFBMEIsRUFBQTFySCxHQUNBQSxHQUdBLElBQUEzQyxFQUFBLEVBQWlCQSxFQUFBc3VILEVBQUFydUgsT0FBc0JELElBQUEsQ0FDdkMsSUFBQWlwQyxFQUVBLFFBRkFBLEVBQUFxbEYsRUFBQXR1SCxJQUVBd3NILEtBQUEsQ0FDQSxRQUFBM3BILEVBQUEsRUFBbUJBLEVBQUFvbUMsRUFBQXdqRixNQUFBeHNILE9BQTJCNEMsSUFBQW9tQyxFQUFBd2pGLE1BQUE1cEgsWUFFOUM0b0gsRUFBQXhpRixFQUFBNW9DLFFBaU1BLElBQUFrdUgsRUFBQSxXQUNBLElBQUFDLEtBRUEsZ0JBQUEvcUcsRUFBQWdyRyxHQUdBLE9BRkFELEVBQUEvcUcsR0FBQWdyRyxFQUVBRCxFQUFBcnhFLE9BQUF1eEUsU0FBQS9wSCxLQUFBLE9BTkEsR0FVQSxTQUFBNG9ILEVBQUFsMEcsRUFBQW9LLEVBQUEvSCxFQUFBK3ZDLEdBQ0EsSUFBQXNwRCxFQUFBcjVGLEVBQUEsR0FBQSt2QyxFQUFBc3BELElBRUEsR0FBQTE3RixFQUFBNjBHLFdBQ0E3MEcsRUFBQTYwRyxXQUFBcG5GLFFBQUF5bkYsRUFBQTlxRyxFQUFBc3hGLE9BQ0UsQ0FDRixJQUFBNFosRUFBQTVzSCxTQUFBaTBHLGVBQUFqQixHQUNBN0osRUFBQTd4RixFQUFBNnhGLFdBRUFBLEVBQUF6bkYsSUFBQXBLLEVBQUFpdUYsWUFBQTRELEVBQUF6bkYsSUFFQXluRixFQUFBanJHLE9BQ0FvWixFQUFBd2lHLGFBQUE4UyxFQUFBempCLEVBQUF6bkYsSUFFQXBLLEVBQUFoWCxZQUFBc3NILDhEQ3pUQTdySCxFQUFBMEQsUUFBQSxTQUFBdXVHLEdBRUEsSUFBQTFGLEVBQUEsb0JBQUE3eUcsZUFBQTZ5RyxTQUVBLElBQUFBLEVBQ0EsVUFBQTd1RyxNQUFBLG9DQUlBLElBQUF1MEcsR0FBQSxpQkFBQUEsRUFDQSxPQUFBQSxFQUdBLElBQUE2WixFQUFBdmYsRUFBQTZXLFNBQUEsS0FBQTdXLEVBQUFuYSxLQUNBMjVCLEVBQUFELEVBQUF2ZixFQUFBeWYsU0FBQWpsSCxRQUFBLGlCQTJEQSxPQS9CQWtyRyxFQUFBbHJHLFFBQUEsK0RBQUFrbEgsRUFBQUMsR0FFQSxJQVdBQyxFQVhBQyxFQUFBRixFQUNBOTFCLE9BQ0FydkYsUUFBQSxvQkFBQXBDLEVBQUEwbkgsR0FBd0MsT0FBQUEsSUFDeEN0bEgsUUFBQSxvQkFBQXBDLEVBQUEwbkgsR0FBd0MsT0FBQUEsSUFHeEMsMERBQUF2bEgsS0FBQXNsSCxHQUNBSCxHQVFBRSxFQUZBLElBQUFDLEVBQUEzd0gsUUFBQSxNQUVBMndILEVBQ0csSUFBQUEsRUFBQTN3SCxRQUFBLEtBRUhxd0gsRUFBQU0sRUFHQUwsRUFBQUssRUFBQXJsSCxRQUFBLFlBSUEsT0FBQXRJLEtBQUEySCxVQUFBK2xILEdBQUEsd0VDbkZBLFNBQUFHLEdBQ0F0c0gsRUFBQTBELFFBQUE0b0gsNEVDREEsSUFBQXQxQixFQUdBQSxFQUFBLFdBQ0EsT0FBQXB4RixLQURBLEdBSUEsSUFFQW94RixLQUFBNTBCLFNBQUEsY0FBQUEsS0FBQSxFQUFBbXFELE1BQUEsUUFDQyxNQUFBandILEdBRUQsaUJBQUE1QyxTQUFBczlGLEVBQUF0OUYsUUFPQXNHLEVBQUEwRCxRQUFBc3pGLDJEQ25CQSxJQUFBeU8sRUFBQXRxRyxFQUFBLDJDQUVBNjJELEVBQUE3MkQsRUFBQSxnREFFQXd6RixFQUFBeHpGLEVBQUEscURBRUFxeEgsRUFBQXJ4SCxFQUFBLGtEQUVBNkwsRUFBQTdMLEVBQUEsMkNBU0FzeEgsRUFBQSxTQUFBdjRELEdBRUF5NkIsRUFBQXgwRixLQUFBeUwsS0FBQXN1RCxHQUNBbEMsRUFBQTczRCxLQUFBeUwsS0FBQXN1RCxHQUNBczRELEVBQUFyeUgsS0FBQXlMLEtBQUFzdUQsR0FNQXR1RCxLQUFBckksR0FBQTIyRCxFQUFBMzJELElBQUFrb0csS0FHQWduQixFQUFBeHlILFdBTUEyRyxLQUFBLFVBT0E3RSxLQUFBLEdBUUEyMEYsS0FBQSxLQVNBNThFLFFBQUEsRUFTQXdGLFNBQUEsS0FNQTJrRCxTQUFBLEVBT0F4dkMsTUFBQSxTQUFBL2IsRUFBQUcsR0FDQSxPQUFBak4sS0FBQXdvQixXQUNBLGlCQUNBdmIsRUFBQSxFQUNBLE1BRUEsZUFDQUgsRUFBQSxFQUlBLElBQUFsTyxFQUFBb0IsS0FBQTBaLFVBRUE5YSxJQUNBQSxFQUFBb0IsS0FBQTBaLFdBQUEsY0FHQTlhLEVBQUEsSUFBQWtPLEVBQ0FsTyxFQUFBLElBQUFxTyxFQUNBak4sS0FBQXFlLHFCQUNBcmUsS0FBQWk0RCxPQUFBLElBTUE2dUQsYUFBQSxhQUtBQyxZQUFBLGFBS0FudUgsT0FBQSxXQUNBb0gsS0FBQXdaLG1CQU9BdU0sU0FBQSxTQUFBN3JCLEVBQUFpN0MsS0FLQTZ4RSxPQUFBLFNBQUExbkgsRUFBQTlJLEdBQ0EsZ0JBQUE4SSxHQUFBLFVBQUFBLEdBQUEsV0FBQUEsR0FFQSxHQUFBOUksRUFBQSxDQUNBLElBQUErZ0MsRUFBQXYzQixLQUFBVixHQUVBaTRCLElBQ0FBLEVBQUF2M0IsS0FBQVYsT0FHQWk0QixFQUFBLEdBQUEvZ0MsRUFBQSxHQUNBK2dDLEVBQUEsR0FBQS9nQyxFQUFBLFNBR0F3SixLQUFBVixHQUFBOUksR0FPQW13QixLQUFBLFdBQ0EzbUIsS0FBQWtPLFFBQUEsRUFDQWxPLEtBQUE4cUYsTUFBQTlxRixLQUFBOHFGLEtBQUFtOEIsV0FNQTk4RyxLQUFBLFdBQ0FuSyxLQUFBa08sUUFBQSxFQUNBbE8sS0FBQThxRixNQUFBOXFGLEtBQUE4cUYsS0FBQW04QixXQU9BMTVHLEtBQUEsU0FBQWpPLEVBQUE5SSxHQUNBLG9CQUFBOEksRUFDQVUsS0FBQWduSCxPQUFBMW5ILEVBQUE5SSxRQUNLLEdBQUE0SyxFQUFBbWtCLFNBQUFqbUIsR0FDTCxRQUFBbkosS0FBQW1KLEVBQ0FBLEVBQUFoTCxlQUFBNkIsSUFDQTZKLEtBQUFnbkgsT0FBQTd3SCxFQUFBbUosRUFBQW5KLElBTUEsT0FEQTZKLEtBQUFpNEQsT0FBQSxHQUNBajRELE1BTUFzVCxZQUFBLFNBQUFJLEdBQ0EsSUFBQTBVLEVBQUFwb0IsS0FBQThxRixLQUVBMWlFLEdBQ0ExVSxFQUFBd3pHLFlBQUE5K0YsR0FJQXBvQixLQUFBMFQsVUFBQTFULEtBQUEwVCxjQUNBMVQsS0FBQXFULGlCQUdBclQsS0FBQTBULFdBQ0FBLEVBQUFvM0UsS0FBQTFpRSxFQUNBMVUsRUFBQXl6RyxhQUFBbm5ILEtBQ0FBLEtBQUFpNEQsT0FBQSxJQUtBNWtELGVBQUEsV0FDQSxJQUFBSyxFQUFBMVQsS0FBQTBULFNBRUFBLElBQ0FBLEVBQUFvM0UsTUFDQXAzRSxFQUFBMHpHLGlCQUFBMXpHLEVBQUFvM0UsTUFHQXAzRSxFQUFBbzNFLEtBQUEsS0FDQXAzRSxFQUFBeXpHLGFBQUEsS0FDQW5uSCxLQUFBMFQsU0FBQSxLQUNBMVQsS0FBQWk0RCxPQUFBLEtBU0FpdkQsWUFBQSxTQUFBOStGLEdBQ0Fwb0IsS0FBQThxRixLQUFBMWlFLEVBRUEsSUFBQWkvRixFQUFBcm5ILEtBQUFxbkgsVUFFQSxHQUFBQSxFQUNBLFFBQUEvdkgsRUFBQSxFQUFxQkEsRUFBQSt2SCxFQUFBOXZILE9BQXNCRCxJQUMzQzh3QixFQUFBakYsVUFBQW1rRyxZQUFBRCxFQUFBL3ZILElBSUEwSSxLQUFBMFQsVUFDQTFULEtBQUEwVCxTQUFBd3pHLFlBQUE5K0YsSUFTQWcvRixpQkFBQSxTQUFBaC9GLEdBQ0Fwb0IsS0FBQThxRixLQUFBLEtBRUEsSUFBQXU4QixFQUFBcm5ILEtBQUFxbkgsVUFFQSxHQUFBQSxFQUNBLFFBQUEvdkgsRUFBQSxFQUFxQkEsRUFBQSt2SCxFQUFBOXZILE9BQXNCRCxJQUMzQzh3QixFQUFBakYsVUFBQW9rRyxlQUFBRixFQUFBL3ZILElBSUEwSSxLQUFBMFQsVUFDQTFULEtBQUEwVCxTQUFBMHpHLGlCQUFBaC9GLEtBSUFobkIsRUFBQTBLLE1BQUErNkcsRUFBQUQsR0FDQXhsSCxFQUFBMEssTUFBQSs2RyxFQUFBOTlCLEdBQ0EzbkYsRUFBQTBLLE1BQUErNkcsRUFBQXo2RCxHQUNBLElBQUFscUQsRUFBQTJrSCxFQUNBenNILEVBQUEwRCxRQUFBb0UsMkRDNVFBLElBQUFzN0QsRUFBQWpvRSxFQUFBLDJDQUVBNjhDLEVBQUE3OEMsRUFBQSw2Q0FFQWl5SCxFQUFBanlILEVBQUEsaURBRUE2MkQsRUFBQTcyRCxFQUFBLGdEQUVBa3lILEVBQUEsU0F1QkEsU0FBQUMsS0FFQUEsRUFBQXJ6SCxVQUFBK0osUUFBQSxhQUVBLElBQUF1cEgsR0FBQSw0RkFXQUMsRUFBQSxTQUFBeHJGLEVBQUE4RSxFQUFBcWhGLEVBQUFzRixHQUNBejdELEVBQUE3M0QsS0FBQXlMLE1BQ0FBLEtBQUFvOEIsVUFDQXA4QixLQUFBa2hDLFVBQ0FsaEMsS0FBQTZuSCxjQUNBdEYsS0FBQSxJQUFBbUYsRUFLQTFuSCxLQUFBdWlILE1BQUEsS0FPQXZpSCxLQUFBOG5ILFlBTUE5bkgsS0FBQStuSCxpQkFNQS9uSCxLQUFBZ2pDLE9BTUFoakMsS0FBQWlqQyxPQUNBdWtGLEVBQUFqekgsS0FBQXlMLE1BQ0FBLEtBQUFnb0gsZ0JBQUF6RixJQW9OQSxTQUFBMEYsRUFBQXp2RCxFQUFBL25ELEVBQUFDLEdBQ0EsR0FBQThuRCxJQUFBczVCLFVBQUEseUJBQUFyaEYsRUFBQUMsR0FBQSxDQUlBLElBSEEsSUFDQTZNLEVBREE3USxFQUFBOHJELEVBR0E5ckQsR0FBQSxDQUlBLEdBQUFBLEVBQUFnSCxXQUFBaEgsRUFBQWdILFNBQUFrMUIsUUFBQW40QixFQUFBQyxHQUNBLFNBR0FoRSxFQUFBNE0sU0FDQWlFLEdBQUEsR0FHQTdRLElBQUF2UixPQUdBLE9BQUFvaUIsR0FBQWtxRyxFQUdBLFNBeE9BRyxFQUFBdnpILFdBQ0FtTixZQUFBb21ILEVBQ0FJLGdCQUFBLFNBQUF6RixHQUNBdmlILEtBQUF1aUgsT0FDQXZpSCxLQUFBdWlILE1BQUFua0gsVUFHQW1rSCxJQUNBL2tELEVBQUE1N0QsS0FBQStsSCxFQUFBLFNBQUF4eEgsR0FDQW9zSCxFQUFBL3pHLElBQUErekcsRUFBQS96RyxHQUFBclksRUFBQTZKLEtBQUE3SixHQUFBNkosT0FDT0EsTUFFUHVpSCxFQUFBbnhGLFFBQUFweEIsTUFHQUEsS0FBQXVpSCxTQUVBMkYsVUFBQSxTQUFBeGdILEdBQ0EsSUFBQStJLEVBQUEvSSxFQUFBeWdILElBQ0F6M0csRUFBQWhKLEVBQUEwZ0gsSUFDQUMsRUFBQXJvSCxLQUFBOG5ILFNBQ0FRLEVBQUFELEVBQUE5d0YsT0FLQSt3RixNQUFBeDlCLE9BRUF3OUIsR0FEQUQsRUFBQXJvSCxLQUFBdWpDLFVBQUE4a0YsRUFBQTUzRyxFQUFBNDNHLEVBQUEzM0csSUFDQTZtQixRQUdBLElBQUFneEYsRUFBQXZvSCxLQUFBOG5ILFNBQUE5bkgsS0FBQXVqQyxVQUFBOXlCLEVBQUFDLEdBQ0E4M0csRUFBQUQsRUFBQWh4RixPQUNBZ3JGLEVBQUF2aUgsS0FBQXVpSCxNQUNBQSxFQUFBa0csV0FBQWxHLEVBQUFrRyxVQUFBRCxJQUFBamdHLE9BQUEsV0FFQSsvRixHQUFBRSxJQUFBRixHQUNBdG9ILEtBQUEwb0gsa0JBQUFMLEVBQUEsV0FBQTNnSCxHQUlBMUgsS0FBQTBvSCxrQkFBQUgsRUFBQSxZQUFBN2dILEdBRUE4Z0gsT0FBQUYsR0FDQXRvSCxLQUFBMG9ILGtCQUFBSCxFQUFBLFlBQUE3Z0gsSUFHQWloSCxTQUFBLFNBQUFqaEgsR0FDQTFILEtBQUEwb0gsa0JBQUExb0gsS0FBQThuSCxTQUFBLFdBQUFwZ0gsR0FNQSxJQUNBa2hILEVBREFDLEVBQUFuaEgsRUFBQWtxRyxXQUFBbHFHLEVBQUF1b0csY0FHQSxHQUNBNFksT0FBQWxxQixpQkFDS2txQixHQUFBLEdBQUFBLEVBQUFwcUIsWUFBQW1xQixFQUFBQyxJQUFBN29ILEtBQUE2bkgsZUFFTGUsR0FBQTVvSCxLQUFBMGhDLFFBQUEsYUFDQWg2QixXQU9Bc29ELE9BQUEsU0FBQXRvRCxHQUNBMUgsS0FBQThuSCxhQVFBL25GLFNBQUEsU0FBQWl1QixFQUFBODZELEdBQ0EsSUFBQTEzRixFQUFBcHhCLEtBQUFndUQsR0FDQTU4QixLQUFBNzhCLEtBQUF5TCxLQUFBOG9ILElBTUExcUgsUUFBQSxXQUNBNEIsS0FBQXVpSCxNQUFBbmtILFVBQ0E0QixLQUFBbzhCLFFBQUFwOEIsS0FBQXVpSCxNQUFBdmlILEtBQUFraEMsUUFBQSxNQU9BNm5GLGVBQUEsU0FBQWo1RyxHQUNBLElBQUF5eUcsRUFBQXZpSCxLQUFBdWlILE1BQ0FBLEVBQUFrRyxXQUFBbEcsRUFBQWtHLFVBQUEzNEcsSUFXQTQ0RyxrQkFBQSxTQUFBTSxFQUFBaDdELEVBQUF0bUQsR0FFQSxJQUFBZ0YsR0FEQXM4RyxTQUNBenhGLE9BRUEsSUFBQTdxQixNQUFBNE0sT0FBQSxDQU9BLElBSEEsSUFBQTJ2RyxFQUFBLEtBQUFqN0QsRUFDQWs3RCxFQWpNQSxTQUFBQyxFQUFBSCxFQUFBdGhILEdBQ0EsT0FDQTFNLEtBQUFtdUgsRUFDQXpoSCxRQUVBNnZCLE9BQUF5eEYsRUFBQXp4RixPQUVBNnhGLFVBQUFKLEVBQUFJLFVBQ0FDLGNBQUEsRUFDQTdrRyxRQUFBOWMsRUFBQXlnSCxJQUNBMWpHLFFBQUEvYyxFQUFBMGdILElBQ0FrQixhQUFBNWhILEVBQUE0aEgsYUFDQUMsT0FBQTdoSCxFQUFBNmhILE9BQ0FDLE9BQUE5aEgsRUFBQThoSCxPQUNBQyxXQUFBL2hILEVBQUEraEgsV0FDQUMsV0FBQWhpSCxFQUFBaWlILFFBQ0ExOUIsVUFBQXZrRixFQUFBdWtGLFVBQ0E2bEIsTUFBQXBxRyxFQUFBb3FHLE9BZ0xBOFgsQ0FBQTU3RCxFQUFBZzdELEVBQUF0aEgsR0FFQWdGLElBQ0FBLEVBQUF1OEcsS0FBQUMsRUFBQUcsYUFBQTM4RyxFQUFBdThHLEdBQUExMEgsS0FBQW1ZLEVBQUF3OEcsSUFDQXg4RyxFQUFBZzFCLFFBQUFzc0IsRUFBQWs3RCxHQUNBeDhHLElBQUF2UixRQUVBK3RILEVBQUFHLGdCQUtBSCxFQUFBRyxlQUVBcnBILEtBQUEwaEMsUUFBQXNzQixFQUFBazdELEdBR0FscEgsS0FBQWtoQyxTQUFBbGhDLEtBQUFraEMsUUFBQTJvRixlQUFBLFNBQUFDLEdBQ0EsbUJBQUFBLEVBQUFiLElBQ0FhLEVBQUFiLEdBQUExMEgsS0FBQXUxSCxFQUFBWixHQUdBWSxFQUFBcG9GLFNBQ0Fvb0YsRUFBQXBvRixRQUFBc3NCLEVBQUFrN0QsUUFjQTNsRixVQUFBLFNBQUE5eUIsRUFBQUMsRUFBQXE1RyxHQU9BLElBTkEsSUFBQWpxSCxFQUFBRSxLQUFBbzhCLFFBQUFDLGlCQUNBa3JCLEdBQ0E5MkMsSUFDQUMsS0FHQXBaLEVBQUF3SSxFQUFBdkksT0FBQSxFQUFpQ0QsR0FBQSxFQUFRQSxJQUFBLENBQ3pDLElBQUEweUgsRUFFQSxHQUFBbHFILEVBQUF4SSxLQUFBeXlILElBQ0FqcUgsRUFBQXhJLEdBQUE0VyxTQUFBODdHLEVBQUEvQixFQUFBbm9ILEVBQUF4SSxHQUFBbVosRUFBQUMsT0FDQTYyQyxFQUFBNmhFLFlBQUE3aEUsRUFBQTZoRSxVQUFBdHBILEVBQUF4SSxJQUVBMHlILElBQUF2QyxHQUFBLENBQ0FsZ0UsRUFBQWh3QixPQUFBejNCLEVBQUF4SSxHQUNBLE9BS0EsT0FBQWl3RCxJQUlBaVcsRUFBQTU3RCxNQUFBLDhFQUFBekwsR0FDQXl4SCxFQUFBdnpILFVBQUE4QixHQUFBLFNBQUF1UixHQUVBLElBQUE2Z0gsRUFBQXZvSCxLQUFBdWpDLFVBQUE3N0IsRUFBQXlnSCxJQUFBemdILEVBQUEwZ0gsS0FDQUksRUFBQUQsRUFBQWh4RixPQUVBLGlCQUFBcGhDLEVBQ0E2SixLQUFBaXFILFFBQUF6QixFQUNBeG9ILEtBQUFrcUgsWUFBQXhpSCxFQUFBeWdILElBQUF6Z0gsRUFBQTBnSCxLQUVBcG9ILEtBQUFtcUgsTUFBQTNCLE9BQ0ssZUFBQXJ5SCxFQUNMNkosS0FBQW1xSCxNQUFBM0IsT0FDSyxhQUFBcnlILEVBQUEsQ0FDTCxHQUFBNkosS0FBQWlxSCxVQUFBanFILEtBQUFtcUgsUUFJQW5xSCxLQUFBa3FILFlBQ0E5M0UsRUFBQXg3QixLQUFBNVcsS0FBQWtxSCxZQUFBeGlILEVBQUF5Z0gsSUFBQXpnSCxFQUFBMGdILE1BQUEsRUFDQSxPQUdBcG9ILEtBQUFrcUgsV0FBQSxLQUdBbHFILEtBQUEwb0gsa0JBQUFILEVBQUFweUgsRUFBQXVSLE1BOEJBODFELEVBQUExeEQsTUFBQTg3RyxFQUFBeDdELEdBQ0FvUixFQUFBMXhELE1BQUE4N0csRUFBQUosR0FDQSxJQUFBdGxILEVBQUEwbEgsRUFDQXh0SCxFQUFBMEQsUUFBQW9FLHlEQ3BVQSxJQUFBczdELEVBQUFqb0UsRUFBQSwyQ0FJQW01RCxFQUZBbjVELEVBQUEsd0NBRUFtNUQsaUJBRUEwN0QsRUFBQTcwSCxFQUFBLCtDQUVBODBILEVBQUE5MEgsRUFBQSxpREFNQSxTQUFBKzBILElBQ0EsU0FZQSxTQUFBQyxFQUFBNXlILEVBQUF1cEMsRUFBQWt4QixHQUNBLElBQUFvNEQsRUFBQWh0RCxFQUFBMUosZUFDQXJvRCxFQUFBeTFCLEVBQUEvdEIsV0FDQXFCLEVBQUEwc0IsRUFBQTl0QixZQUNBcTNHLEVBQUFELEVBQUE3NUcsTUFjQSxPQVpBODVHLElBRUFBLEVBQUFwL0csU0FBQSxXQUNBby9HLEVBQUFweEYsS0FBQSxFQUNBb3hGLEVBQUFueEYsSUFBQSxFQUNBbXhGLEVBQUFoL0csUUFBQSxLQUNBZy9HLEVBQUFqMkcsU0FBQSxLQUNBZzJHLEVBQUE1d0QsYUFBQSxpQkFBQWppRSxJQUdBNnlILEVBQUEvK0csUUFBQTJtRCxFQUNBbzRELEVBQUFoMkcsU0FBQTQ5QyxFQUNBbzRELEVBWUEsSUFBQUUsRUFBQSxTQUFBL3lILEVBQUF1cEMsRUFBQWt4QixHQUNBLElBQUFoRSxFQUNBZ0UsS0FBQTFELEVBRUEsaUJBQUEvMkQsRUFDQXkyRCxFQUFBbThELEVBQUE1eUgsRUFBQXVwQyxFQUFBa3hCLEdBRUFvTCxFQUFBajRDLFNBQUE1dEIsS0FFQUEsR0FEQXkyRCxFQUFBejJELEdBQ0FBLElBR0FxSSxLQUFBckksS0FDQXFJLEtBQUFvdUQsTUFDQSxJQUFBN3RCLEVBQUE2dEIsRUFBQXo5QyxNQUVBNHZCLElBRUE2dEIsRUFBQXU4RCxjQUFBTCxFQUVBL3BGLEVBQUEsOEJBQ0FBLEVBQUEsc0JBQ0FBLEVBQUEsZ0NBQ0FBLEVBQUEsK0NBQ0FBLEVBQUEsVUFDQUEsRUFBQSxTQUNBQSxFQUFBLG1CQUdBdmdDLEtBQUE0cUgsUUFBQSxLQUNBNXFILEtBQUE2cUgsUUFBQSxLQUNBN3FILEtBQUFraEMsVUFDQWxoQyxLQUFBOHFILE9BQUEsS0FRQTlxSCxLQUFBK3FILFdBQUEsRUFPQS9xSCxLQUFBZ3JILFlBQUEsRUFPQWhySCxLQUFBaXJILGVBQUEsR0FNQWpySCxLQUFBb3lELE9BR0FzNEQsRUFBQXIySCxXQUNBbU4sWUFBQWtwSCxFQUNBUSxTQUFBLEVBQ0FDLFFBQUEsRUFDQUMsWUFBQSxFQUNBQyxhQUFBLEVBQ0FDLFdBQUEsRUFDQUMsYUFBQSxFQUNBQyxnQkFBQSxXQUNBLE9BQUF4ckgsS0FBQXNySCxXQUFBdHJILEtBQUFxckgsY0FFQUksWUFBQSxXQUNBenJILEtBQUFxNUYsSUFBQXI1RixLQUFBb3VELElBQUFzOUQsV0FBQSxNQUNBMXJILEtBQUFxNUYsSUFBQWpuQyxJQUFBcHlELEtBQUFveUQsS0FFQXU1RCxpQkFBQSxXQUNBLElBQUF2NUQsRUFBQXB5RCxLQUFBb3lELElBQ0FweUQsS0FBQTRxSCxRQUFBTCxFQUFBLFFBQUF2cUgsS0FBQXJJLEdBQUFxSSxLQUFBa2hDLFFBQUFreEIsR0FDQXB5RCxLQUFBNnFILFFBQUE3cUgsS0FBQTRxSCxRQUFBYyxXQUFBLE1BRUEsR0FBQXQ1RCxHQUNBcHlELEtBQUE2cUgsUUFBQXh2RyxNQUFBKzJDLE1BUUFwQyxPQUFBLFNBQUF2a0QsRUFBQStJLEdBQ0EsSUFBQTQ5QyxFQUFBcHlELEtBQUFveUQsSUFDQWhFLEVBQUFwdUQsS0FBQW91RCxJQUNBN3RCLEVBQUE2dEIsRUFBQXo5QyxNQUNBaTZHLEVBQUE1cUgsS0FBQTRxSCxRQUVBcnFGLElBQ0FBLEVBQUE5MEIsUUFBQSxLQUNBODBCLEVBQUEvckIsU0FBQSxNQUdBNDVDLEVBQUEzaUQsUUFBQTJtRCxFQUNBaEUsRUFBQTU1QyxTQUFBNDlDLEVBRUF3NEQsSUFDQUEsRUFBQW4vRyxRQUFBMm1ELEVBQ0F3NEQsRUFBQXAyRyxTQUFBNDlDLEVBRUEsR0FBQUEsR0FDQXB5RCxLQUFBNnFILFFBQUF4dkcsTUFBQSsyQyxPQVVBcnJDLE1BQUEsU0FBQTZrRyxFQUFBYixHQUNBLElBcUJBYyxFQXJCQXo5RCxFQUFBcHVELEtBQUFvdUQsSUFDQWlyQyxFQUFBcjVGLEtBQUFxNUYsSUFDQTV0RixFQUFBMmlELEVBQUEzaUQsTUFDQStJLEVBQUE0NUMsRUFBQTU1QyxPQUVBczNHLEdBREFmLEtBQUEvcUgsS0FBQStxSCxXQUNBL3FILEtBQUFnckgsYUFBQVksR0FDQVgsRUFBQWpySCxLQUFBaXJILGVBQ0E3NEQsRUFBQXB5RCxLQUFBb3lELEtBRUEwNUQsSUFDQTlySCxLQUFBNHFILFNBQ0E1cUgsS0FBQTJySCxtQkFHQTNySCxLQUFBNnFILFFBQUFrQix5QkFBQSxPQUNBL3JILEtBQUE2cUgsUUFBQW1CLFVBQUE1OUQsRUFBQSxJQUFBM2lELEVBQUEybUQsRUFBQTU5QyxFQUFBNDlDLElBR0FpbkMsRUFBQTR5QixVQUFBLElBQUF4Z0gsRUFBQStJLEdBRUF1MkcsR0FBQSxnQkFBQUEsS0FHQUEsRUFBQXA3QyxZQUVBazhDLEVBQUFkLEVBQUFtQixrQkFBQTlCLEVBQUErQixZQUFBOXlCLEVBQUEweEIsR0FDQXQ2RyxFQUFBLEVBQ0FDLEVBQUEsRUFDQWpGLFFBQ0ErSSxXQUVBdTJHLEVBQUFtQixpQkFBQUwsR0FFQWQsRUFBQTkyRCxRQUNBNDNELEVBQUF4QixFQUFBaDJILFVBQUErM0gsaUJBQUE3M0gsS0FBQXcySCxFQUFBMXhCLElBR0FBLEVBQUFnekIsT0FDQWh6QixFQUFBaXpCLFVBQUFULEdBQUFkLEVBQ0ExeEIsRUFBQWt6QixTQUFBLElBQUE5Z0gsRUFBQStJLEdBQ0E2a0YsRUFBQXI2QixXQUdBLEdBQUE4c0QsRUFBQSxDQUNBLElBQUFsQixFQUFBNXFILEtBQUE0cUgsUUFDQXZ4QixFQUFBZ3pCLE9BQ0FoekIsRUFBQW16QixZQUFBdkIsRUFDQTV4QixFQUFBMnlCLFVBQUFwQixFQUFBLElBQUFuL0csRUFBQStJLEdBQ0E2a0YsRUFBQXI2QixhQUlBLElBQUE5OEQsRUFBQXdvSCxFQUNBdHdILEVBQUEwRCxRQUFBb0UsMkRDeE9BLElBRUF3c0QsRUFGQW41RCxFQUFBLHdDQUVBbTVELGlCQUVBOE8sRUFBQWpvRSxFQUFBLDJDQUVBMDhELEVBQUExOEQsRUFBQSwwQ0FFQWcxQyxFQUFBaDFDLEVBQUEsbURBRUE0MkQsRUFBQTUyRCxFQUFBLDhDQUVBbTFILEVBQUFuMUgsRUFBQSx1Q0FFQWtpSCxFQUFBbGlILEVBQUEsaUVBRUF5K0QsRUFBQXorRCxFQUFBLCtDQUVBMDdCLEVBQUExN0IsRUFBQSwwQ0FPQSxTQUFBazNILEVBQUF0OUYsR0FDQSxPQUFBbVksU0FBQW5ZLEVBQUEsSUFtQkEsSUFBQXU5RixFQUFBLElBQUFuaUYsRUFBQSxTQUNBb2lGLEVBQUEsSUFBQXBpRixFQUFBLFNBMERBLElBQUFxaUYsRUFBQSxTQUFBL2xCLEVBQUF6cUUsRUFBQWt5QixHQUNBdHVELEtBQUFoRixLQUFBLFNBRUEsSUFBQTZ4SCxHQUFBaG1CLEVBQUEvRCxVQUNBLFdBQUErRCxFQUFBL0QsU0FBQTNhLGNBQ0Fub0YsS0FBQThzSCxNQUFBeCtELEVBQUFrUCxFQUFBLzJELFVBQW9DNm5ELE9BS3BDdHVELEtBQUFveUQsSUFBQTlELEVBQUFJLG9CQU1BMXVELEtBQUErc0gsY0FBQUYsRUFNQTdzSCxLQUFBNm1HLE9BQ0EsSUFBQW1tQixFQUFBbm1CLEVBQUFsMkYsTUFFQXE4RyxJQUNBQSxFQUFBLDZDQUNBQSxFQUFBLHVCQUFBQSxFQUFBLGVBQUFBLEVBQUEsZ0NBQ0FubUIsRUFBQXBtRSxVQUFBLElBT0F6Z0MsS0FBQW84QixVQU1BLElBQUE2d0YsRUFBQWp0SCxLQUFBa3RILGVBTUFDLEVBQUFudEgsS0FBQW90SCxXQWFBLEdBUEFwdEgsS0FBQXF0SCxnQkFLQXJ0SCxLQUFBc3RILDJCQUFBLEVBRUFULEVBS0csQ0FDSCxJQUFBcGhILEVBQUFvN0YsRUFBQXA3RixNQUNBK0ksRUFBQXF5RixFQUFBcnlGLE9BRUEsTUFBQTg1QyxFQUFBN2lELFFBQ0FBLEVBQUE2aUQsRUFBQTdpRCxPQUdBLE1BQUE2aUQsRUFBQTk1QyxTQUNBQSxFQUFBODVDLEVBQUE5NUMsUUFHQXhVLEtBQUFveUQsSUFBQTlELEVBQUFJLGtCQUFBLEVBRUFtNEMsRUFBQXA3RixRQUFBekwsS0FBQW95RCxJQUNBeTBDLEVBQUFyeUYsU0FBQXhVLEtBQUFveUQsSUFDQXB5RCxLQUFBdXRILE9BQUE5aEgsRUFDQXpMLEtBQUF3dEgsUUFBQWg1RyxFQUdBLElBQUFpNUcsRUFBQSxJQUFBL0MsRUFBQTdqQixFQUFBN21HLFVBQUFveUQsS0FDQXE3RCxFQUFBQyxhQUFBLEVBQ0FELEVBQUFoQyxjQUdBMEIsRUE3S0EsUUE2S0FNLEVBQ0FBLEVBQUFuakgsT0E5S0EsT0FnTEEyaUgsRUFBQW4zSCxLQWhMQSxRQWlMQWtLLEtBQUEydEgsU0FBQTltQixNQWxDQSxDQUNBN21HLEtBQUF1dEgsT0FBQXZ0SCxLQUFBNHRILFNBQUEsR0FDQTV0SCxLQUFBd3RILFFBQUF4dEgsS0FBQTR0SCxTQUFBLEdBQ0EsSUFBQUMsRUFBQTd0SCxLQUFBMnRILFNBOUVBLFNBQUFsaUgsRUFBQStJLEdBQ0EsSUFBQXE1RyxFQUFBeDBILFNBQUFHLGNBQUEsT0FHQSxPQURBcTBILEVBQUFsOUcsTUFBQXl0QixTQUFBLCtDQUFBM3lCLEVBQUEsZUFBQStJLEVBQUEsOENBQUF2WSxLQUFBLEtBQXlLLElBQ3pLNHhILEVBMEVBQyxDQUFBOXRILEtBQUF1dEgsT0FBQXZ0SCxLQUFBd3RILFNBQ0EzbUIsRUFBQWx0RyxZQUFBazBILEdBc0NBN3RILEtBQUErdEgsWUFBQSxLQUNBL3RILEtBQUFndUgsbUJBR0FwQixFQUFBdjRILFdBQ0FtTixZQUFBb3JILEVBQ0E1NUQsUUFBQSxXQUNBLGdCQU9BaTdELGVBQUEsV0FDQSxPQUFBanVILEtBQUErc0gsZUFNQW1CLGdCQUFBLFdBQ0EsT0FBQWx1SCxLQUFBMnRILFVBRUF4c0Ysc0JBQUEsV0FDQSxJQUFBZ3RGLEVBQUFudUgsS0FBQWt1SCxrQkFFQSxHQUFBQyxFQUNBLE9BQ0Evc0YsV0FBQStzRixFQUFBL3NGLFlBQUEsRUFDQUMsVUFBQThzRixFQUFBOXNGLFdBQUEsSUFTQTRsRixRQUFBLFNBQUFtSCxHQUNBLElBQUF0dUgsRUFBQUUsS0FBQW84QixRQUFBQyxnQkFBQSxHQUNBNHdGLEVBQUFqdEgsS0FBQWt0SCxZQUNBbHRILEtBQUFxdUgsVUFBQXRoSCxLQUFBZzRCLFNBRUEva0MsS0FBQXN1SCxXQUFBeHVILEVBQUFzdUgsRUFBQXB1SCxLQUFBcXVILFdBR0EsUUFBQS8ySCxFQUFBLEVBQW1CQSxFQUFBMjFILEVBQUExMUgsT0FBdUJELElBQUEsQ0FDMUMsSUFBQWlULEVBQUEwaUgsRUFBQTMxSCxHQUNBd3lILEVBQUE5cEgsS0FBQW90SCxRQUFBN2lILEdBRUEsSUFBQXUvRyxFQUFBNEQsYUFBQTVELEVBQUE3QyxRQUFBLENBQ0EsSUFBQThELEVBQUEsSUFBQXp6SCxFQUFBMEksS0FBQXV1SCxpQkFBQSxLQUNBekUsRUFBQTdDLFFBQUE4RCxJQUtBLE9BREEvcUgsS0FBQXd1SCxlQUNBeHVILE1BRUErcUYsU0FBQSxTQUFBcitFLEVBQUFtRCxHQUNBLElBQUFuRCxFQUFBK2hILFdBQUEsQ0FJQSxJQUFBQyxFQUFBLElBQUFoaUgsRUFBQWxMLGFBQ0FtUCxNQUFBakUsRUFBQWlFLE1BQ0ExQixNQUFBdkMsRUFBQXVDLFFBRUF5L0csRUFBQUMsT0FBQWppSCxFQUNBQSxFQUFBK2hILFdBQUFDLEVBQ0FBLEVBQUE3OEcsU0FBQWhDLEdBRUE3UCxLQUFBZ3VILGVBQUFsNEgsS0FBQTQ0SCxLQUVBaGpDLFlBQUEsU0FBQWgvRSxHQUNBLElBQUFnaUgsRUFBQWhpSCxFQUFBK2hILFdBQ0FHLEVBQUE1dUgsS0FBQWd1SCxlQUNBeHhILEVBQUFnaEUsRUFBQTNuRSxRQUFBKzRILEVBQUFGLEdBRUFseUgsR0FBQSxHQUNBb3lILEVBQUF2eEgsT0FBQWIsRUFBQSxHQUdBa1EsRUFBQStoSCxXQUFBLE1BRUFJLFdBQUEsU0FBQW5pSCxHQUdBLElBRkEsSUFBQWtpSCxFQUFBNXVILEtBQUFndUgsZUFFQTEySCxFQUFBLEVBQW1CQSxFQUFBczNILEVBQUFyM0gsT0FBMEJELElBQUEsQ0FDN0MsSUFBQStVLEVBQUF1aUgsRUFBQXQzSCxHQUFBcTNILE9BRUF0aUgsSUFDQUEsRUFBQW9pSCxXQUFBLE1BSUFHLEVBQUFyM0gsT0FBQSxHQUVBaTNILGFBQUEsV0FDQSxJQUFBSSxFQUFBNXVILEtBQUFndUgsZUFDQTFrSCxFQUFBc2xILEVBQUFyM0gsT0FDQXUzSCxFQUFBOXVILEtBQUErdEgsWUFHQSxHQUZBZSxLQUFBL25HLFFBRUF6ZCxFQUFBLENBSUE2aUQsRUFBQXlpRSxFQUFBNXVILEtBQUFvOEIsUUFBQTJ5RixxQkFHQUQsSUFDQUEsRUFBQTl1SCxLQUFBK3RILFlBQUEvdEgsS0FBQWd2SCxTQTNTQSxNQThTQSxJQUFBMytDLEtBQ0F5K0MsRUFBQXoxQixJQUFBZ3pCLE9BRUEsUUFBQS8wSCxFQUFBLEVBQW1CQSxFQUFBZ1MsR0FBUyxDQUM1QixJQUFBb0QsRUFBQWtpSCxFQUFBdDNILEdBQ0EyM0gsRUFBQXZpSCxFQUFBaWlILE9BR0FNLEtBQUFua0MsTUFPQXh6RixJQUdBMjNILEVBQUFsekYsWUFDQXJ2QixFQUFBZ04sVUFBQXUxRyxFQUFBdjFHLFVBQ0FoTixFQUFBd2lILGFBQUFELEVBQUFDLGFBQ0F4aUgsRUFBQXlpSCxZQUFBRixFQUFBRSxZQUVBbnZILEtBQUFvdkgsV0FBQTFpSCxFQUFBb2lILEdBQUEsRUFBQXorQyxNQWRBdStDLEVBQUF2eEgsT0FBQS9GLEVBQUEsR0FDQTIzSCxFQUFBUixXQUFBLEtBQ0FubEgsS0FnQkF3bEgsRUFBQXoxQixJQUFBcjZCLFlBRUFxd0QsY0FBQSxXQUNBLE9BQUFydkgsS0FBQWd2SCxTQTVVQSxNQThVQVYsV0FBQSxTQUFBeHVILEVBQUFzdUgsRUFBQWtCLEdBQ0EsR0FBQXR2SCxLQUFBcXVILFlBQUFpQixFQUFBLENBSUFsQixNQUFBLEVBRUFwdUgsS0FBQXV2SCxtQkFBQXp2SCxHQUVBLElBQUEwdkgsRUFBQXh2SCxLQUFBeXZILGFBQUEzdkgsRUFBQXN1SCxHQU1BLEdBSkFwdUgsS0FBQXN0SCwyQkFDQXR0SCxLQUFBMHZILHNCQUdBRixFQUFBLENBQ0EsSUFBQS92RixFQUFBei9CLEtBQ0F5M0csRUFBQSxXQUNBaDRFLEVBQUE2dUYsV0FBQXh1SCxFQUFBc3VILEVBQUFrQixRQUlBSSxtQkFBQSxXQUNBLElBQUFyMkIsRUFBQXI1RixLQUFBZ3ZILFNBcFdBLFFBb1dBMzFCLElBQ0E1dEYsRUFBQXpMLEtBQUEydEgsU0FBQWxpSCxNQUNBK0ksRUFBQXhVLEtBQUEydEgsU0FBQW41RyxPQUNBNmtGLEVBQUE0eUIsVUFBQSxJQUFBeGdILEVBQUErSSxHQUVBeFUsS0FBQTJ2SCxpQkFBQSxTQUFBN0YsR0FDQUEsRUFBQThGLFNBQ0F2MkIsRUFBQTJ5QixVQUFBbEMsRUFBQTE3RCxJQUFBLElBQUEzaUQsRUFBQStJLE1BSUFpN0csYUFBQSxTQUFBM3ZILEVBQUFzdUgsR0FHQSxJQUZBLElBQUF5QixLQUVBQyxFQUFBLEVBQW9CQSxFQUFBOXZILEtBQUFrdEgsWUFBQTMxSCxPQUE4QnU0SCxJQUFBLENBQ2xELElBQUF4bEgsRUFBQXRLLEtBQUFrdEgsWUFBQTRDLElBQ0FoRyxFQUFBOXBILEtBQUFvdEgsUUFBQTlpSCxJQUVBb2pILGFBQUE1RCxJQUFBOXBILEtBQUErdEgsY0FBQWpFLEVBQUFvQixTQUFBa0QsSUFDQXlCLEVBQUEvNUgsS0FBQWcwSCxHQU1BLElBRkEsSUFBQTBGLEdBQUEsRUFFQXQ4RSxFQUFBLEVBQW1CQSxFQUFBMjhFLEVBQUF0NEgsT0FBc0IyN0MsSUFBQSxDQUN6QyxJQUFBNDJFLEVBQ0F6d0IsR0FEQXl3QixFQUFBK0YsRUFBQTM4RSxJQUNBbW1ELElBQ0FocEIsS0FDQWdwQixFQUFBZ3pCLE9BQ0EsSUFBQS8rRyxFQUFBOGdILEVBQUF0RSxFQUFBdUIsYUFBQXZCLEVBQUFzQixZQUNBMkUsR0FBQTNCLEdBQUF0RSxFQUFBeUIsYUFBQWw2RCxLQUFBOCtDLElBQ0EvK0MsRUFBQTIrRCxHQUFBMStELEtBQUE4K0MsTUFDQTRhLEVBQUFqQixFQUFBeC9HLFNBQUF0SyxLQUFBa3RILFlBQUEsR0FBQWx0SCxLQUFBdXVILGlCQUFBLEtBRUEsR0FBQXpFLEVBQUF1QixlQUFBdkIsRUFBQXdCLFdBQ0F4QixFQUFBL2lHLE9BQUEsRUFBQWdrRyxRQUNPLEdBQUF6OUcsSUFBQXc4RyxFQUFBdUIsYUFBQSxDQUNQLElBQUEyRSxFQUFBbHdILEVBQUF3TixHQUVBMGlILEVBQUF6RSxhQUFBeUUsRUFBQUMsV0FBQTdCLEdBQ0F0RSxFQUFBL2lHLE9BQUEsRUFBQWdrRyxJQUlBLElBQUF6OUcsSUFDQXRYLFFBQUF1SCxNQUFBLDRDQUNBK1AsRUFBQXc4RyxFQUFBdUIsY0FHQSxRQUFBL3pILEVBQUFnVyxFQUF5QmhXLEVBQUF3eUgsRUFBQXdCLFdBQXNCaDBILElBQUEsQ0FDL0MsSUFBQW9WLEVBQUE1TSxFQUFBeEksR0FNQSxHQUpBMEksS0FBQW92SCxXQUFBMWlILEVBQUFvOUcsRUFBQXNFLEVBQUEvOUMsR0FFQTNqRSxFQUFBdytHLFNBQUEsRUFFQTZFLEVBS0EsR0FIQTErRCxLQUFBOCtDLE1BQUEvK0MsRUFHQSxHQUNBLE1BS0EwNEQsRUFBQXNCLFlBQUE5ekgsRUFFQXd5SCxFQUFBc0IsWUFBQXRCLEVBQUF3QixhQUNBa0UsR0FBQSxHQUdBbi9DLEVBQUE2L0MsaUJBRUE3MkIsRUFBQXI2QixVQUdBcTZCLEVBQUFyNkIsVUFZQSxPQVRBL3RDLEVBQUFpTyxLQUVBcytCLEVBQUE1N0QsS0FBQTVCLEtBQUFvdEgsUUFBQSxTQUFBdEQsR0FDQUEsS0FBQXp3QixLQUFBeXdCLEVBQUF6d0IsSUFBQTgyQixNQUNBckcsRUFBQXp3QixJQUFBODJCLFNBS0FYLEdBRUFKLFdBQUEsU0FBQTFpSCxFQUFBMGpILEVBQUFDLEVBQUFoZ0QsR0FDQSxJQUFBZ3BCLEVBQUErMkIsRUFBQS8yQixJQUNBejZGLEVBQUE4TixFQUFBZ04sVUFFQSxJQUFBMDJHLEVBQUFsRixTQUFBbUYsS0FDQTNqSCxFQUFBcXZCLFdBQ0EsSUFBQXJ2QixFQUFBaUUsTUFBQWlCLFdBR0FoVCxLQUFBLElBQUFBLEVBQUEsT0FDQThOLEVBQUE0akgsVUFoYkEsU0FBQTVqSCxFQUFBakIsRUFBQStJLEdBU0EsT0FSQWs0RyxFQUFBcDVFLEtBQUE1bUMsRUFBQStKLG1CQUVBL0osRUFBQWdOLFdBQ0FnekcsRUFBQTl6RyxlQUFBbE0sRUFBQWdOLFdBR0FpekcsRUFBQWxoSCxRQUNBa2hILEVBQUFuNEcsVUFDQWs0RyxFQUFBenJHLFVBQUEwckcsR0F1YUE0RCxDQUFBN2pILEVBQUExTSxLQUFBdXRILE9BQUF2dEgsS0FBQXd0SCxVQUFBLENBQ0EsSUFBQWdELEVBQUE5akgsRUFBQXlpSCxZQUVBOStDLEVBQUE2L0Msa0JBdmFBLFNBQUFNLEVBQUFDLEdBQ0EsR0FBQUQsR0FBQUMsRUFFQSxTQUdBLElBQUFELElBQUFDLEdBQUFELEVBQUFqNUgsU0FBQWs1SCxFQUFBbDVILE9BQ0EsU0FHQSxRQUFBRCxFQUFBLEVBQWlCQSxFQUFBazVILEVBQUFqNUgsT0FBc0JELElBQ3ZDLEdBQUFrNUgsRUFBQWw1SCxLQUFBbTVILEVBQUFuNUgsR0FDQSxTQTJaQW81SCxDQUFBRixFQUFBbmdELEVBQUE2L0MsbUJBRUE3L0MsRUFBQTYvQyxrQkFDQUUsRUFBQS8yQixJQUFBcjZCLFVBQ0FxUixFQUFBNi9DLGdCQUFBLEtBRUE3L0MsRUFBQXNnRCxPQUFBLE1BSUFILElBQ0FuM0IsRUFBQWd6QixPQWphQSxTQUFBbUUsRUFBQW4zQixHQUNBLFFBQUEvaEcsRUFBQSxFQUFpQkEsRUFBQWs1SCxFQUFBajVILE9BQXNCRCxJQUFBLENBQ3ZDLElBQUFvYyxFQUFBODhHLEVBQUFsNUgsR0FDQW9jLEVBQUFrOUcsYUFBQXYzQixHQUNBQSxFQUFBdzNCLFlBQ0FuOUcsRUFBQThrRixVQUFBYSxFQUFBM2xGLEVBQUF6RSxPQUNBb3FGLEVBQUF5M0IsT0FFQXA5RyxFQUFBcTlHLGlCQUFBMTNCLElBMFpBMjNCLENBQUFSLEVBQUFuM0IsR0FDQWhwQixFQUFBNi9DLGdCQUFBTSxJQUlBOWpILEVBQUF1dEYsYUFBQXZ0RixFQUFBdXRGLFlBQUFaLEdBQ0Ezc0YsRUFBQXl4RCxNQUFBazdCLEVBQUFocEIsRUFBQXNnRCxRQUFBLE1BQ0F0Z0QsRUFBQXNnRCxPQUFBamtILEVBQ0FBLEVBQUF1a0gsWUFBQXZrSCxFQUFBdWtILFdBQUE1M0IsS0FVQTIxQixTQUFBLFNBQUExa0gsRUFBQXNsSCxHQUNBNXZILEtBQUErc0gsZ0JBQUEvc0gsS0FBQXN0SCw0QkFDQWhqSCxFQTllQSxRQWlmQSxJQUFBdy9HLEVBQUE5cEgsS0FBQW90SCxRQUFBOWlILEdBc0JBLE9BcEJBdy9HLEtBRUFBLEVBQUEsSUFBQVksRUFBQSxNQUFBcGdILEVBQUF0SyxVQUFBb3lELE1BQ0E5bkQsU0FDQXcvRyxFQUFBNEQsYUFBQSxFQUVBMXRILEtBQUFxdEgsYUFBQS9pSCxJQUNBa3pELEVBQUFuYyxNQUFBeW9FLEVBQUE5cEgsS0FBQXF0SCxhQUFBL2lILElBQUEsR0FHQXNsSCxJQUNBOUYsRUFBQThGLFdBR0E1dkgsS0FBQWt4SCxZQUFBNW1ILEVBQUF3L0csR0FHQUEsRUFBQTJCLGVBR0EzQixHQUVBb0gsWUFBQSxTQUFBNW1ILEVBQUF3L0csR0FDQSxJQUFBcUgsRUFBQW54SCxLQUFBb3RILFFBQ0FILEVBQUFqdEgsS0FBQWt0SCxZQUNBNWpILEVBQUEyakgsRUFBQTExSCxPQUNBNjVILEVBQUEsS0FDQTk1SCxHQUFBLEVBQ0F1MkgsRUFBQTd0SCxLQUFBMnRILFNBRUEsR0FBQXdELEVBQUE3bUgsR0FDQTJuRCxFQUFBLFVBQUEzbkQsRUFBQSwrQkFLQSxHQS9nQkEsU0FBQXcvRyxHQUNBLFFBQUFBLE1BSUFBLEVBQUE0RCxhQUlBLG1CQUFBNUQsRUFBQTk1RCxRQUFBLG1CQUFBODVELEVBQUE3QyxTQXNnQkFvSyxDQUFBdkgsR0FBQSxDQUtBLEdBQUF4Z0gsRUFBQSxHQUFBZ0IsRUFBQTJpSCxFQUFBLElBQ0EsSUFBQTMxSCxFQUFBLEVBQWlCQSxFQUFBZ1MsRUFBQSxLQUNqQjJqSCxFQUFBMzFILEdBQUFnVCxHQUFBMmlILEVBQUEzMUgsRUFBQSxHQUFBZ1QsR0FEOEJoVCxLQU05Qjg1SCxFQUFBRCxFQUFBbEUsRUFBQTMxSCxJQVFBLEdBTEEyMUgsRUFBQTV2SCxPQUFBL0YsRUFBQSxJQUFBZ1QsR0FDQTZtSCxFQUFBN21ILEdBQUF3L0csR0FJQUEsRUFBQThGLFFBQ0EsR0FBQXdCLEVBQUEsQ0FDQSxJQUFBRSxFQUFBRixFQUFBaGpFLElBRUFrakUsRUFBQTV0QixZQUNBbXFCLEVBQUExYSxhQUFBMlcsRUFBQTE3RCxJQUFBa2pFLEVBQUE1dEIsYUFFQW1xQixFQUFBbDBILFlBQUFtd0gsRUFBQTE3RCxVQUdBeS9ELEVBQUFqb0IsV0FDQWlvQixFQUFBMWEsYUFBQTJXLEVBQUExN0QsSUFBQXkvRCxFQUFBam9CLFlBRUFpb0IsRUFBQWwwSCxZQUFBbXdILEVBQUExN0QsVUFoQ0E2RCxFQUFBLG1CQUFBM25ELEVBQUEsa0JBc0NBaW5ILFVBQUEsU0FBQXIzSCxFQUFBaTdDLEdBQ0EsSUFDQTVxQyxFQUNBalQsRUFGQTIxSCxFQUFBanRILEtBQUFrdEgsWUFJQSxJQUFBNTFILEVBQUEsRUFBZUEsRUFBQTIxSCxFQUFBMTFILE9BQXVCRCxJQUN0Q2lULEVBQUEwaUgsRUFBQTMxSCxHQUNBNEMsRUFBQTNGLEtBQUE0Z0QsRUFBQW4xQyxLQUFBb3RILFFBQUE3aUgsT0FJQW9sSCxpQkFBQSxTQUFBejFILEVBQUFpN0MsR0FDQSxJQUNBMjBFLEVBQ0F2L0csRUFDQWpULEVBSEEyMUgsRUFBQWp0SCxLQUFBa3RILFlBS0EsSUFBQTUxSCxFQUFBLEVBQWVBLEVBQUEyMUgsRUFBQTExSCxPQUF1QkQsSUFDdENpVCxFQUFBMGlILEVBQUEzMUgsSUFDQXd5SCxFQUFBOXBILEtBQUFvdEgsUUFBQTdpSCxJQUVBbWpILGFBQ0F4ekgsRUFBQTNGLEtBQUE0Z0QsRUFBQTIwRSxFQUFBdi9HLElBS0FzL0csZUFBQSxTQUFBM3ZILEVBQUFpN0MsR0FDQSxJQUNBMjBFLEVBQ0F2L0csRUFDQWpULEVBSEEyMUgsRUFBQWp0SCxLQUFBa3RILFlBS0EsSUFBQTUxSCxFQUFBLEVBQWVBLEVBQUEyMUgsRUFBQTExSCxPQUF1QkQsSUFDdENpVCxFQUFBMGlILEVBQUEzMUgsSUFDQXd5SCxFQUFBOXBILEtBQUFvdEgsUUFBQTdpSCxJQUVBbWpILGFBQ0F4ekgsRUFBQTNGLEtBQUE0Z0QsRUFBQTIwRSxFQUFBdi9HLElBU0FpbkgsVUFBQSxXQUNBLE9BQUF4eEgsS0FBQW90SCxTQUVBbUMsbUJBQUEsU0FBQXp2SCxHQUtBLFNBQUEyeEgsRUFBQWoxSCxHQUNBNDBILElBQ0FBLEVBQUE5RixhQUFBOXVILElBQ0E0MEgsRUFBQWxHLFNBQUEsR0FHQWtHLEVBQUE5RixXQUFBOXVILEdBSUEsR0FkQXdELEtBQUEydkgsaUJBQUEsU0FBQTdGLEVBQUF2L0csR0FDQXUvRyxFQUFBb0IsUUFBQXBCLEVBQUFxQixRQUFBLElBYUFuckgsS0FBQStzSCxjQUNBLFFBQUF6MUgsRUFBQSxFQUFxQkEsRUFBQXdJLEVBQUF2SSxPQUFpQkQsSUFBQSxDQUd0QyxJQUZBb1YsRUFBQTVNLEVBQUF4SSxJQUVBZ1QsU0FBQXhLLEVBQUF4SSxFQUFBLEdBQUFnVCxRQUFBb0MsRUFBQTYrRyxZQUFBLENBQ0F2ckgsS0FBQXN0SCwyQkFBQSxFQUNBLE9BS0EsSUFBQThELEVBQUEsS0FDQU0sRUFBQSxFQUVBLElBQUFwNkgsRUFBQSxFQUFtQkEsRUFBQXdJLEVBQUF2SSxPQUFpQkQsSUFBQSxDQUNwQyxJQUFBb1YsRUFFQW85RyxFQURBeC9HLEdBREFvQyxFQUFBNU0sRUFBQXhJLElBQ0FnVCxPQUlBb0MsRUFBQTYrRyxjQUNBekIsRUFBQTlwSCxLQUFBZ3ZILFNBQUExa0gsRUFscEJBLEtBa3BCQXRLLEtBQUFzdEgsNEJBQ0EvQixhQUFBLEVBQ0FtRyxFQUFBLEdBRUE1SCxFQUFBOXBILEtBQUFndkgsU0FBQTFrSCxHQUFBb25ILEVBQUEsRUF2cEJBLElBdXBCQSxHQUFBMXhILEtBQUFzdEgsMkJBR0F4RCxFQUFBNEQsYUFDQXo3RCxFQUFBLFVBQUEzbkQsRUFBQSxrQ0FBQXcvRyxFQUFBbnlILElBR0FteUgsSUFBQXNILElBQ0F0SCxFQUFBcUIsUUFBQSxFQUVBckIsRUFBQXVCLGVBQUEvekgsSUFDQXd5SCxFQUFBb0IsU0FBQSxHQUdBcEIsRUFBQXVCLGFBQUEvekgsRUFFQXd5SCxFQUFBeUIsWUFJQXpCLEVBQUFzQixhQUFBLEVBSEF0QixFQUFBc0IsWUFBQTl6SCxFQU1BbTZILEVBQUFuNkgsR0FDQTg1SCxFQUFBdEgsR0FHQXA5RyxFQUFBdytHLFVBQ0FwQixFQUFBb0IsU0FBQSxFQUVBcEIsRUFBQXlCLGFBQUF6QixFQUFBc0IsWUFBQSxJQUVBdEIsRUFBQXNCLFlBQUE5ekgsSUFLQW02SCxFQUFBbjZILEdBQ0EwSSxLQUFBMnZILGlCQUFBLFNBQUE3RixFQUFBdi9HLElBRUF1L0csRUFBQXFCLFFBQUFyQixFQUFBMEIsa0JBQUEsSUFDQTFCLEVBQUFvQixTQUFBLEVBQ0FwQixFQUFBdUIsYUFBQXZCLEVBQUF3QixXQUFBeEIsRUFBQXNCLFlBQUEsR0FJQXRCLEVBQUFvQixTQUFBcEIsRUFBQXNCLFlBQUEsSUFDQXRCLEVBQUFzQixZQUFBdEIsRUFBQXVCLGlCQVFBdGtHLE1BQUEsV0FFQSxPQURBL21CLEtBQUEydkgsaUJBQUEzdkgsS0FBQTJ4SCxhQUNBM3hILE1BRUEyeEgsWUFBQSxTQUFBN0gsR0FDQUEsRUFBQS9pRyxTQUVBK3RDLG1CQUFBLFNBQUFweEMsR0FDQTFqQixLQUFBdXVILGlCQUFBN3FHLEdBYUFrdUcsWUFBQSxTQUFBdG5ILEVBQUF3Z0gsR0FDQSxHQUFBQSxFQUFBLENBQ0EsSUFBQStHLEVBQUE3eEgsS0FBQXF0SCxhQUVBd0UsRUFBQXZuSCxHQUdBa3pELEVBQUFuYyxNQUFBd3dFLEVBQUF2bkgsR0FBQXdnSCxHQUFBLEdBRkErRyxFQUFBdm5ILEdBQUF3Z0gsRUFLQSxRQUFBeHpILEVBQUEsRUFBcUJBLEVBQUEwSSxLQUFBa3RILFlBQUEzMUgsT0FBNkJELElBQUEsQ0FDbEQsSUFBQXc2SCxFQUFBOXhILEtBQUFrdEgsWUFBQTUxSCxHQUVBLEdBQUF3NkgsSUFBQXhuSCxHQUFBd25ILElBQUF4bkgsRUFodkJBLElBZ3ZCQSxDQUNBLElBQUF3L0csRUFBQTlwSCxLQUFBb3RILFFBQUEwRSxHQUNBdDBELEVBQUFuYyxNQUFBeW9FLEVBQUErSCxFQUFBdm5ILElBQUEsT0FVQXluSCxTQUFBLFNBQUF6bkgsR0FDQSxJQUFBNmlILEVBQUFudEgsS0FBQW90SCxRQUNBSCxFQUFBanRILEtBQUFrdEgsWUFDQXBELEVBQUFxRCxFQUFBN2lILEdBRUF3L0csSUFJQUEsRUFBQTE3RCxJQUFBdXdDLFdBQUFDLFlBQUFrckIsRUFBQTE3RCxZQUNBKytELEVBQUE3aUgsR0FDQTJpSCxFQUFBNXZILE9BQUFtZ0UsRUFBQTNuRSxRQUFBbzNILEVBQUEzaUgsR0FBQSxLQU1BMGxELE9BQUEsU0FBQXZrRCxFQUFBK0ksR0FDQSxHQUFBeFUsS0FBQTJ0SCxTQUFBaDlHLE1BU0ssQ0FDTCxJQUFBazlHLEVBQUE3dEgsS0FBQTJ0SCxTQUVBRSxFQUFBbDlHLE1BQUE2dkIsUUFBQSxPQUVBLElBQUE4dEIsRUFBQXR1RCxLQUFBOHNILE1BT0EsR0FOQSxNQUFBcmhILElBQUE2aUQsRUFBQTdpRCxTQUNBLE1BQUErSSxJQUFBODVDLEVBQUE5NUMsVUFDQS9JLEVBQUF6TCxLQUFBNHRILFNBQUEsR0FDQXA1RyxFQUFBeFUsS0FBQTR0SCxTQUFBLEdBQ0FDLEVBQUFsOUcsTUFBQTZ2QixRQUFBLEdBRUF4Z0MsS0FBQXV0SCxRQUFBOWhILEdBQUErSSxHQUFBeFUsS0FBQXd0SCxRQUFBLENBSUEsUUFBQTcxSCxLQUhBazJILEVBQUFsOUcsTUFBQWxGLFFBQUEsS0FDQW9pSCxFQUFBbDlHLE1BQUE2RCxTQUFBLEtBRUF4VSxLQUFBb3RILFFBQ0FwdEgsS0FBQW90SCxRQUFBOTRILGVBQUFxRCxJQUNBcUksS0FBQW90SCxRQUFBejFILEdBQUFxNEQsT0FBQXZrRCxFQUFBK0ksR0FJQWdwRCxFQUFBNTdELEtBQUE1QixLQUFBZ3lILG1CQUFBLFNBQUFsSSxHQUNBQSxFQUFBOTVELE9BQUF2a0QsRUFBQStJLEtBRUF4VSxLQUFBaW5ILFNBQUEsR0FHQWpuSCxLQUFBdXRILE9BQUE5aEgsRUFDQXpMLEtBQUF3dEgsUUFBQWg1RyxNQXRDQSxDQUVBLFNBQUEvSSxHQUFBLE1BQUErSSxFQUNBLE9BR0F4VSxLQUFBdXRILE9BQUE5aEgsRUFDQXpMLEtBQUF3dEgsUUFBQWg1RyxFQUNBeFUsS0FBQWd2SCxTQXZ4QkEsUUF1eEJBaC9ELE9BQUF2a0QsRUFBQStJLEdBaUNBLE9BQUF4VSxNQU9BaXlILFdBQUEsU0FBQTNuSCxHQUNBLElBQUF3L0csRUFBQTlwSCxLQUFBb3RILFFBQUE5aUgsR0FFQXcvRyxHQUNBQSxFQUFBL2lHLFNBT0Ezb0IsUUFBQSxXQUNBNEIsS0FBQTZtRyxLQUFBcG1FLFVBQUEsR0FDQXpnQyxLQUFBNm1HLEtBQUE3bUcsS0FBQW84QixRQUFBcDhCLEtBQUEydEgsU0FBQTN0SCxLQUFBb3RILFFBQUEsTUFTQS82RCxrQkFBQSxTQUFBL0QsR0FHQSxHQUZBQSxRQUVBdHVELEtBQUErc0gsZ0JBQUEvc0gsS0FBQTB2SCxtQkFDQSxPQUFBMXZILEtBQUFvdEgsUUF6MUJBLFFBeTFCQWgvRCxJQUdBLElBQUE4akUsRUFBQSxJQUFBeEgsRUFBQSxRQUFBMXFILEtBQUFzdUQsRUFBQWdFLFlBQUF0eUQsS0FBQW95RCxLQUlBLEdBSEE4L0QsRUFBQXpHLGNBQ0F5RyxFQUFBbnJHLE9BQUEsRUFBQXVuQyxFQUFBNXFDLGlCQUFBMWpCLEtBQUF1dUgsa0JBRUFqZ0UsRUFBQWdFLFlBQUF0eUQsS0FBQW95RCxJQUFBLENBQ0FweUQsS0FBQWluSCxVQUNBLElBQUF4N0csRUFBQXltSCxFQUFBOWpFLElBQUEzaUQsTUFDQStJLEVBQUEwOUcsRUFBQTlqRSxJQUFBNTVDLE9BQ0E2a0YsRUFBQTY0QixFQUFBNzRCLElBQ0FyNUYsS0FBQXV4SCxVQUFBLFNBQUF6SCxHQUNBQSxFQUFBNEQsWUFDQXIwQixFQUFBMnlCLFVBQUFsQyxFQUFBMTdELElBQUEsSUFBQTNpRCxFQUFBK0ksR0FDU3MxRyxFQUFBcUksaUJBQ1RELEVBQUE3NEIsSUFBQWd6QixPQUNBdkMsRUFBQXFJLGVBQUFELEVBQUE3NEIsS0FDQTY0QixFQUFBNzRCLElBQUFyNkIsa0JBUUEsSUFIQSxJQUFBcVIsS0FDQStoRCxFQUFBcHlILEtBQUFvOEIsUUFBQUMsZ0JBQUEsR0FFQS9rQyxFQUFBLEVBQXFCQSxFQUFBODZILEVBQUE3NkgsT0FBd0JELElBQUEsQ0FDN0MsSUFBQW9WLEVBQUEwbEgsRUFBQTk2SCxHQUVBMEksS0FBQW92SCxXQUFBMWlILEVBQUF3bEgsR0FBQSxFQUFBN2hELEdBSUEsT0FBQTZoRCxFQUFBOWpFLEtBTUFqN0MsU0FBQSxXQUNBLE9BQUFuVCxLQUFBdXRILFFBTUFuNkcsVUFBQSxXQUNBLE9BQUFwVCxLQUFBd3RILFNBRUFJLFNBQUEsU0FBQXlFLEdBQ0EsSUFBQS9qRSxFQUFBdHVELEtBQUE4c0gsTUFDQWhqRyxHQUFBLGtCQUFBdW9HLEdBQ0FDLEdBQUEsOEJBQUFELEdBQ0FFLEdBQUEsNEJBQUFGLEdBQ0FHLEdBQUEsZ0NBQUFILEdBRUEsU0FBQS9qRSxFQUFBeGtDLElBQUEsU0FBQXdrQyxFQUFBeGtDLEdBQ0EsT0FBQW92RCxXQUFBNXFCLEVBQUF4a0MsSUFHQSxJQUFBKzhFLEVBQUE3bUcsS0FBQTZtRyxLQUVBMW1FLEVBQUE5bUMsU0FBQWduQyxZQUFBQyxpQkFBQXVtRSxHQUNBLE9BQUFBLEVBQUF5ckIsSUFBQTdGLEVBQUF0c0YsRUFBQXJXLEtBQUEyaUcsRUFBQTVsQixFQUFBbDJGLE1BQUFtWixNQUFBMmlHLEVBQUF0c0YsRUFBQW95RixLQUFBLElBQUE5RixFQUFBdHNGLEVBQUFxeUYsS0FBQSxNQUVBQyxZQUFBLFNBQUE3bkQsRUFBQXhZLEdBQ0FBLEtBQUFweUQsS0FBQW95RCxJQUNBLElBQUFzQixFQUFBcjZELFNBQUFHLGNBQUEsVUFDQTYvRixFQUFBM2xDLEVBQUFnNEQsV0FBQSxNQUNBMTZGLEVBQUE0NUMsRUFBQW4wRCxrQkFDQTlGLEVBQUFpNkQsRUFBQWo2RCxNQUNBK2hILEVBQUEvaEgsRUFBQWlULFdBQUF3dUMsRUFDQXB1QyxFQUFBclQsRUFBQXFULGNBQUFvdUMsRUFDQW51QyxFQUFBdFQsRUFBQXNULGNBQUFtdUMsRUFDQWo5QixFQUFBeGtCLEVBQUFnaUgsWUFBQWhpSCxFQUFBd2tCLFVBQUEsRUFDQXk5RixFQUFBN2xILEtBQUFtRyxJQUFBaWlCLEVBQUEsR0FBQW5SLEVBQUEwdUcsR0FDQUcsRUFBQTlsSCxLQUFBbUcsSUFBQWlpQixFQUFBLEVBQUFuUixFQUFBMHVHLEdBQ0FJLEVBQUEvbEgsS0FBQW1HLElBQUFpaUIsRUFBQSxHQUFBbFIsRUFBQXl1RyxHQUNBSyxFQUFBaG1ILEtBQUFtRyxJQUFBaWlCLEVBQUEsRUFBQWxSLEVBQUF5dUcsR0FDQWpuSCxFQUFBdWxCLEVBQUF2bEIsTUFBQW1uSCxFQUFBQyxFQUNBcitHLEVBQUF3YyxFQUFBeGMsT0FBQXMrRyxFQUFBQyxFQUNBci9ELEVBQUFqb0QsUUFBQTJtRCxFQUNBc0IsRUFBQWwvQyxTQUFBNDlDLEVBQ0FpbkMsRUFBQWgrRSxNQUFBKzJDLEtBQ0FpbkMsRUFBQTR5QixVQUFBLElBQUF4Z0gsRUFBQStJLEdBQ0E2a0YsRUFBQWpuQyxNQUNBLElBQUE0Z0UsR0FDQTNuSCxTQUFBdS9ELEVBQUF2L0QsU0FDQXVGLFNBQUFnNkQsRUFBQWg2RCxTQUNBeUssTUFBQXV2RCxFQUFBdnZELE9BRUF1dkQsRUFBQXYvRCxVQUFBdW5ILEVBQUE1aEcsRUFBQXZnQixFQUFBcWlILEVBQUE5aEcsRUFBQXRnQixHQUNBazZELEVBQUFoNkQsU0FBQSxFQUNBZzZELEVBQUF2dkQsT0FBQSxLQUNBdXZELEVBQUFweEQsa0JBRUFveEQsR0FDQUEsRUFBQXpNLE1BQUFrN0IsR0FHQSxJQUNBNDVCLEVBQUEsSUFEQWovRCxHQUVBcmpELE9BQ0FGLEVBQUEsRUFDQUMsRUFBQSxFQUNBdWpELE1BQUFQLEtBZ0JBLE9BWkEsTUFBQXMvRCxFQUFBM25ILFdBQ0E0bkgsRUFBQTVuSCxTQUFBdS9ELEVBQUF2L0QsU0FBQTJuSCxFQUFBM25ILFVBR0EsTUFBQTJuSCxFQUFBcGlILFdBQ0FxaUgsRUFBQXJpSCxTQUFBZzZELEVBQUFoNkQsU0FBQW9pSCxFQUFBcGlILFVBR0EsTUFBQW9pSCxFQUFBMzNHLFFBQ0E0M0csRUFBQTUzRyxNQUFBdXZELEVBQUF2dkQsTUFBQTIzRyxFQUFBMzNHLE9BR0E0M0csSUFHQSxJQUFBL3dILEVBQUEwcUgsRUFDQXh5SCxFQUFBMEQsUUFBQW9FLDJEQzMrQkEsSUFBQXM3RCxFQUFBam9FLEVBQUEsMkNBRUEwN0IsRUFBQTE3QixFQUFBLDBDQUVBa1ksRUFBQWxZLEVBQUEsaURBRUE0MkQsRUFBQTUyRCxFQUFBLDhDQUlBLFNBQUEyOUgsRUFBQTEzSCxFQUFBQyxHQUNBLE9BQUFELEVBQUE4TyxTQUFBN08sRUFBQTZPLE9BQ0E5TyxFQUFBK08sSUFBQTlPLEVBQUE4TyxFQU9BL08sRUFBQW9TLEdBQUFuUyxFQUFBbVMsR0FHQXBTLEVBQUErTyxFQUFBOU8sRUFBQThPLEVBR0EvTyxFQUFBOE8sT0FBQTdPLEVBQUE2TyxPQVNBLElBQUE2b0gsRUFBQSxXQUVBbnpILEtBQUFvekgsVUFDQXB6SCxLQUFBcXpILGdCQUNBcnpILEtBQUFzekgsZ0JBQUEsR0FHQUgsRUFBQTkrSCxXQUNBbU4sWUFBQTJ4SCxFQU1BcHRHLFNBQUEsU0FBQTdyQixFQUFBaTdDLEdBQ0EsUUFBQTc5QyxFQUFBLEVBQW1CQSxFQUFBMEksS0FBQW96SCxPQUFBNzdILE9BQXdCRCxJQUMzQzBJLEtBQUFvekgsT0FBQTk3SCxHQUFBeXVCLFNBQUE3ckIsRUFBQWk3QyxJQVlBOVksZUFBQSxTQUFBempDLEVBQUEyNkgsR0FPQSxPQU5BQSxNQUFBLEVBRUEzNkgsR0FDQW9ILEtBQUF3ekgsa0JBQUFELEdBR0F2ekgsS0FBQXF6SCxjQVNBRyxrQkFBQSxTQUFBRCxHQUNBdnpILEtBQUFzekgsZ0JBQUEsRUFJQSxJQUhBLElBQUFHLEVBQUF6ekgsS0FBQW96SCxPQUNBaEIsRUFBQXB5SCxLQUFBcXpILGFBRUEvN0gsRUFBQSxFQUFBZ1MsRUFBQW1xSCxFQUFBbDhILE9BQXVDRCxFQUFBZ1MsRUFBU2hTLElBQ2hEMEksS0FBQTB6SCx5QkFBQUQsRUFBQW44SCxHQUFBLEtBQUFpOEgsR0FHQW5CLEVBQUE3NkgsT0FBQXlJLEtBQUFzekgsZ0JBQ0FyaUcsRUFBQXlOLGlCQUFBeXRCLEVBQUFpbUUsRUFBQWMsSUFFQVEseUJBQUEsU0FBQWhuSCxFQUFBOGpILEVBQUErQyxHQUNBLElBQUE3bUgsRUFBQXdCLFFBQUFxbEgsRUFBQSxDQUlBN21ILEVBQUFvNkcsZUFFQXA2RyxFQUFBdytHLFNBQ0F4K0csRUFBQTlULFNBR0E4VCxFQUFBcTZHLGNBQ0EsSUFBQTRNLEVBQUFqbkgsRUFBQWdILFNBRUEsR0FBQWlnSCxFQUFBLENBR0FuRCxFQURBQSxFQUNBQSxFQUFBLzFILFdBUUEsSUFIQSxJQUFBbTVILEVBQUFELEVBQ0FFLEVBQUFubkgsRUFFQWtuSCxHQUVBQSxFQUFBejRILE9BQUEwNEgsRUFDQUQsRUFBQXA2RyxrQkFDQWczRyxFQUFBMTZILEtBQUE4OUgsR0FDQUMsRUFBQUQsRUFDQUEsSUFBQWxnSCxTQUlBLEdBQUFoSCxFQUFBMnJELFFBQUEsQ0FHQSxJQUZBLElBQUF0aUUsRUFBQTJXLEVBQUFvbkgsVUFFQXg4SCxFQUFBLEVBQXFCQSxFQUFBdkIsRUFBQXdCLE9BQXFCRCxJQUFBLENBQzFDLElBQUE4RixFQUFBckgsRUFBQXVCLEdBR0FvVixFQUFBdytHLFVBQ0E5dEgsRUFBQTh0SCxTQUFBLEdBR0FsckgsS0FBQTB6SCx5QkFBQXQySCxFQUFBb3pILEVBQUErQyxHQUlBN21ILEVBQUF3K0csU0FBQSxPQUVBeCtHLEVBQUF5aUgsWUFBQXFCLEVBQ0F4d0gsS0FBQXF6SCxhQUFBcnpILEtBQUFzekgsbUJBQUE1bUgsSUFRQXFuSCxRQUFBLFNBQUFybkgsR0FDQUEsRUFBQXNuSCxZQUFBaDBILE9BSUEwTSxhQUFBZSxHQUNBZixFQUFBdW5ILHFCQUFBajBILE1BR0FBLEtBQUFrMEgsYUFBQXhuSCxHQUVBMU0sS0FBQW96SCxPQUFBdDlILEtBQUE0VyxLQU9BeW5ILFFBQUEsU0FBQXpuSCxHQUNBLFNBQUFBLEVBQUEsQ0FFQSxRQUFBcFYsRUFBQSxFQUFxQkEsRUFBQTBJLEtBQUFvekgsT0FBQTc3SCxPQUF3QkQsSUFBQSxDQUM3QyxJQUFBdXZHLEVBQUE3bUcsS0FBQW96SCxPQUFBOTdILEdBRUF1dkcsYUFBQXA1RixHQUNBbzVGLEVBQUF1dEIsdUJBQUFwMEgsTUFPQSxPQUhBQSxLQUFBb3pILFVBQ0FwekgsS0FBQXF6SCxxQkFDQXJ6SCxLQUFBc3pILGdCQUFBLEdBSUEsR0FBQTVtSCxhQUFBbXFDLE1BQ0EsQ0FBQXYvQyxFQUFBLFVBQUF5RyxFQUFBMk8sRUFBQW5WLE9BQW9DRCxFQUFBeUcsRUFBT3pHLElBQzNDMEksS0FBQW0wSCxRQUFBem5ILEVBQUFwVixRQUZBLENBUUEsSUFBQWtGLEVBQUFnaEUsRUFBQTNuRSxRQUFBbUssS0FBQW96SCxPQUFBMW1ILEdBRUFsUSxHQUFBLElBQ0F3RCxLQUFBcTBILGVBQUEzbkgsR0FFQTFNLEtBQUFvekgsT0FBQS8xSCxPQUFBYixFQUFBLEdBRUFrUSxhQUFBZSxHQUNBZixFQUFBMG5ILHVCQUFBcDBILFNBSUFrMEgsYUFBQSxTQUFBeG5ILEdBTUEsT0FMQUEsSUFDQUEsRUFBQXNuSCxVQUFBaDBILEtBQ0EwTSxFQUFBdXJELE9BQUEsSUFHQWo0RCxNQUVBcTBILGVBQUEsU0FBQTNuSCxHQUtBLE9BSkFBLElBQ0FBLEVBQUFzbkgsVUFBQSxNQUdBaDBILE1BTUE1QixRQUFBLFdBQ0E0QixLQUFBczBILFlBQUF0MEgsS0FBQW96SCxPQUFBLE1BRUFyRSxvQkFBQW1FLEdBRUEsSUFBQWh4SCxFQUFBaXhILEVBQ0EvNEgsRUFBQTBELFFBQUFvRSx1RUN2T0EsSUFBQXM3RCxFQUFBam9FLEVBQUEsMkNBSUFnL0gsRUFGQWgvSCxFQUFBLDRDQUVBZy9ILFdBRUE5YyxFQUFBbGlILEVBQUEsaUVBRUFpL0gsRUFBQWovSCxFQUFBLG9EQXdDQWdqSCxFQUFBLFNBQUF0K0csR0FDQUEsUUFDQStGLEtBQUF5MEgsTUFBQXg2SCxFQUFBdzZILFVBRUF6MEgsS0FBQTAwSCxRQUFBejZILEVBQUF5NkgsU0FBQSxhQUdBMTBILEtBQUEyMEgsVUFDQTMwSCxLQUFBNDBILFVBQUEsRUFDQTUwSCxLQUFBNjBILE1BQ0E3MEgsS0FBQTgwSCxZQUNBOTBILEtBQUErMEgsWUFDQS8wSCxLQUFBZzFILFNBQUEsRUFDQVQsRUFBQWhnSSxLQUFBeUwsT0FHQXU0RyxFQUFBbGtILFdBQ0FtTixZQUFBKzJHLEVBTUEwYyxRQUFBLFNBQUFuRSxHQUNBOXdILEtBQUEyMEgsT0FBQTcrSCxLQUFBZzdILElBT0F4SixZQUFBLFNBQUE0TixHQUNBQSxFQUFBL3hHLFVBQUFuakIsS0FHQSxJQUZBLElBQUFtMUgsRUFBQUQsRUFBQUUsV0FFQTk5SCxFQUFBLEVBQW1CQSxFQUFBNjlILEVBQUE1OUgsT0FBa0JELElBQ3JDMEksS0FBQWkxSCxRQUFBRSxFQUFBNzlILEtBUUErOUgsV0FBQSxTQUFBdkUsR0FDQSxJQUFBdDBILEVBQUFnaEUsRUFBQTNuRSxRQUFBbUssS0FBQTIwSCxPQUFBN0QsR0FFQXQwSCxHQUFBLEdBQ0F3RCxLQUFBMjBILE9BQUF0M0gsT0FBQWIsRUFBQSxJQVFBK3FILGVBQUEsU0FBQTJOLEdBR0EsSUFGQSxJQUFBQyxFQUFBRCxFQUFBRSxXQUVBOTlILEVBQUEsRUFBbUJBLEVBQUE2OUgsRUFBQTU5SCxPQUFrQkQsSUFDckMwSSxLQUFBcTFILFdBQUFGLEVBQUE3OUgsSUFHQTQ5SCxFQUFBL3hHLFVBQUEsTUFFQTZ5QixRQUFBLFdBU0EsSUFSQSxJQUFBMVUsR0FBQSxJQUFBK3ZCLE1BQUFncUMsVUFBQXI3RixLQUFBODBILFlBRUF2Z0gsRUFBQStzQixFQUFBdGhDLEtBQUE2MEgsTUFDQU0sRUFBQW4xSCxLQUFBMjBILE9BQ0FyckgsRUFBQTZySCxFQUFBNTlILE9BQ0ErOUgsS0FDQUMsS0FFQWorSCxFQUFBLEVBQW1CQSxFQUFBZ1MsRUFBU2hTLElBQUEsQ0FDNUIsSUFBQXc1SCxFQUFBcUUsRUFBQTc5SCxHQUNBWixFQUFBbzZILEVBQUE1aUYsS0FBQTVNLEVBQUEvc0IsR0FHQTdkLElBQ0E0K0gsRUFBQXgvSCxLQUFBWSxHQUNBNitILEVBQUF6L0gsS0FBQWc3SCxJQUtBLElBQUF4NUgsRUFBQSxFQUFtQkEsRUFBQWdTLEdBQ25CNnJILEVBQUE3OUgsR0FBQWsrSCxjQUNBTCxFQUFBNzlILEdBQUE2OUgsRUFBQTdySCxFQUFBLEdBQ0E2ckgsRUFBQXQ2SCxNQUNBeU8sS0FFQWhTLElBSUFnUyxFQUFBZ3NILEVBQUEvOUgsT0FFQSxJQUFBRCxFQUFBLEVBQW1CQSxFQUFBZ1MsRUFBU2hTLElBQzVCaStILEVBQUFqK0gsR0FBQXN6RyxLQUFBMHFCLEVBQUFoK0gsSUFHQTBJLEtBQUE2MEgsTUFBQXZ6RixFQUNBdGhDLEtBQUEwMEgsUUFBQW5nSCxHQUlBdlUsS0FBQTBoQyxRQUFBLFFBQUFudEIsR0FFQXZVLEtBQUF5MEgsTUFBQTc3SCxRQUNBb0gsS0FBQXkwSCxNQUFBNzdILFVBR0E2OEgsV0FBQSxXQUNBLElBQUFoMkYsRUFBQXovQixLQUNBQSxLQUFBNDBILFVBQUEsRUFTQW5kLEVBUEEsU0FBQXZwRSxJQUNBek8sRUFBQW0xRixXQUNBbmQsRUFBQXZwRSxJQUNBek8sRUFBQXUxRixTQUFBdjFGLEVBQUF1VyxjQVVBMW9DLE1BQUEsV0FDQXROLEtBQUE2MEgsT0FBQSxJQUFBeGpFLE1BQUFncUMsVUFDQXI3RixLQUFBODBILFlBQUEsRUFFQTkwSCxLQUFBeTFILGNBTUEvc0csS0FBQSxXQUNBMW9CLEtBQUE0MEgsVUFBQSxHQU1BYyxNQUFBLFdBQ0ExMUgsS0FBQWcxSCxVQUNBaDFILEtBQUErMEgsYUFBQSxJQUFBMWpFLE1BQUFncUMsVUFDQXI3RixLQUFBZzFILFNBQUEsSUFPQVcsT0FBQSxXQUNBMzFILEtBQUFnMUgsVUFDQWgxSCxLQUFBODBILGNBQUEsSUFBQXpqRSxNQUFBZ3FDLFVBQUFyN0YsS0FBQSswSCxZQUNBLzBILEtBQUFnMUgsU0FBQSxJQU9BanVHLE1BQUEsV0FDQS9tQixLQUFBMjBILFdBTUF2a0UsV0FBQSxXQUNBLE9BQUFwd0QsS0FBQTIwSCxPQUFBcDlILFFBY0E2VixRQUFBLFNBQUFtcUIsRUFBQXQ5QixHQUVBLElBQUFpN0gsRUFBQSxJQUFBVixFQUFBajlGLEdBREF0OUIsU0FDQTI3SCxLQUFBMzdILEVBQUE2RSxPQUFBN0UsRUFBQTQ3SCxRQUVBLE9BREE3MUgsS0FBQXNuSCxZQUFBNE4sR0FDQUEsSUFHQTEzRCxFQUFBMXhELE1BQUF5c0csRUFBQWdjLEdBQ0EsSUFBQXJ5SCxFQUFBcTJHLEVBQ0FuK0csRUFBQTBELFFBQUFvRSxzRUN0UEEsSUFBQTR6SCxFQUFBdmdJLEVBQUEsZ0RBRUE4dEIsRUFBQTl0QixFQUFBLDRDQUlBaW1ELEVBRkFqbUQsRUFBQSwyQ0FFQWltRCxZQUtBdTZFLEVBQUFsL0UsTUFBQXhpRCxVQUFBb0csTUFFQSxTQUFBdTdILEVBQUF6K0YsRUFBQWo0QixHQUNBLE9BQUFpNEIsRUFBQWo0QixHQUdBLFNBQUEyMkgsRUFBQTErRixFQUFBajRCLEVBQUE5SSxHQUNBK2dDLEVBQUFqNEIsR0FBQTlJLEVBVUEsU0FBQTAvSCxFQUFBQyxFQUFBcGdHLEVBQUFwc0IsR0FDQSxPQUFBb3NCLEVBQUFvZ0csR0FBQXhzSCxFQUFBd3NILEVBVUEsU0FBQUMsRUFBQUQsRUFBQXBnRyxFQUFBcHNCLEdBQ0EsT0FBQUEsRUFBQSxHQUFBb3NCLEVBQUFvZ0csRUFXQSxTQUFBRSxFQUFBRixFQUFBcGdHLEVBQUFwc0IsRUFBQTQ5QyxFQUFBK3VFLEdBQ0EsSUFBQWh0SCxFQUFBNnNILEVBQUE1K0gsT0FFQSxNQUFBKytILEVBQ0EsUUFBQWgvSCxFQUFBLEVBQW1CQSxFQUFBZ1MsRUFBU2hTLElBQzVCaXdELEVBQUFqd0QsR0FBQTQrSCxFQUFBQyxFQUFBNytILEdBQUF5K0IsRUFBQXorQixHQUFBcVMsT0FHQSxLQUFBc0wsRUFBQTNMLEdBQUE2c0gsRUFBQSxHQUFBNStILE9BRUEsSUFBQUQsRUFBQSxFQUFtQkEsRUFBQWdTLEVBQVNoUyxJQUM1QixRQUFBNkMsRUFBQSxFQUFxQkEsRUFBQThhLEVBQVU5YSxJQUMvQm90RCxFQUFBandELEdBQUE2QyxHQUFBKzdILEVBQUFDLEVBQUE3K0gsR0FBQTZDLEdBQUE0N0IsRUFBQXorQixHQUFBNkMsR0FBQXdQLElBUUEsU0FBQTRzSCxFQUFBQyxFQUFBQyxFQUFBSCxHQUNBLElBQUFJLEVBQUFGLEVBQUFqL0gsT0FDQW8vSCxFQUFBRixFQUFBbC9ILE9BRUEsR0FBQW0vSCxJQUFBQyxFQUlBLEdBRkFELEVBQUFDLEVBSUFILEVBQUFqL0gsT0FBQW8vSCxPQUdBLFFBQUFyL0gsRUFBQW8vSCxFQUEyQnAvSCxFQUFBcS9ILEVBQWFyL0gsSUFDeENrL0gsRUFBQTFnSSxLQUFBLElBQUF3Z0ksRUFBQUcsRUFBQW4vSCxHQUFBeStILEVBQUF4aEksS0FBQWtpSSxFQUFBbi9ILEtBTUEsSUFBQTJkLEVBQUF1aEgsRUFBQSxJQUFBQSxFQUFBLEdBQUFqL0gsT0FFQSxJQUFBRCxFQUFBLEVBQWlCQSxFQUFBay9ILEVBQUFqL0gsT0FBaUJELElBQ2xDLE9BQUFnL0gsRUFDQS8rRyxNQUFBaS9HLEVBQUFsL0gsTUFDQWsvSCxFQUFBbC9ILEdBQUFtL0gsRUFBQW4vSCxTQUdBLFFBQUE2QyxFQUFBLEVBQXFCQSxFQUFBOGEsRUFBVTlhLElBQy9Cb2QsTUFBQWkvRyxFQUFBbC9ILEdBQUE2QyxNQUNBcThILEVBQUFsL0gsR0FBQTZDLEdBQUFzOEgsRUFBQW4vSCxHQUFBNkMsSUFjQSxTQUFBeThILEVBQUFKLEVBQUFDLEVBQUFILEdBQ0EsR0FBQUUsSUFBQUMsRUFDQSxTQUdBLElBQUFudEgsRUFBQWt0SCxFQUFBai9ILE9BRUEsR0FBQStSLElBQUFtdEgsRUFBQWwvSCxPQUNBLFNBR0EsT0FBQSsrSCxHQUNBLFFBQUFoL0gsRUFBQSxFQUFtQkEsRUFBQWdTLEVBQVNoUyxJQUM1QixHQUFBay9ILEVBQUFsL0gsS0FBQW0vSCxFQUFBbi9ILEdBQ0EsYUFJQSxLQUFBMmQsRUFBQXVoSCxFQUFBLEdBQUFqL0gsT0FFQSxJQUFBRCxFQUFBLEVBQW1CQSxFQUFBZ1MsRUFBU2hTLElBQzVCLFFBQUE2QyxFQUFBLEVBQXFCQSxFQUFBOGEsRUFBVTlhLElBQy9CLEdBQUFxOEgsRUFBQWwvSCxHQUFBNkMsS0FBQXM4SCxFQUFBbi9ILEdBQUE2QyxHQUNBLFNBTUEsU0FnQkEsU0FBQTA4SCxFQUFBVixFQUFBcGdHLEVBQUFDLEVBQUE4Z0csRUFBQTUvSCxFQUFBNi9ILEVBQUFDLEVBQUF6dkUsRUFBQSt1RSxHQUNBLElBQUFodEgsRUFBQTZzSCxFQUFBNStILE9BRUEsTUFBQSsrSCxFQUNBLFFBQUFoL0gsRUFBQSxFQUFtQkEsRUFBQWdTLEVBQVNoUyxJQUM1Qml3RCxFQUFBandELEdBQUEyL0gsRUFBQWQsRUFBQTcrSCxHQUFBeStCLEVBQUF6K0IsR0FBQTArQixFQUFBMStCLEdBQUF3L0gsRUFBQXgvSCxHQUFBSixFQUFBNi9ILEVBQUFDLE9BR0EsS0FBQS9oSCxFQUFBa2hILEVBQUEsR0FBQTUrSCxPQUVBLElBQUFELEVBQUEsRUFBbUJBLEVBQUFnUyxFQUFTaFMsSUFDNUIsUUFBQTZDLEVBQUEsRUFBcUJBLEVBQUE4YSxFQUFVOWEsSUFDL0JvdEQsRUFBQWp3RCxHQUFBNkMsR0FBQTg4SCxFQUFBZCxFQUFBNytILEdBQUE2QyxHQUFBNDdCLEVBQUF6K0IsR0FBQTZDLEdBQUE2N0IsRUFBQTErQixHQUFBNkMsR0FBQTI4SCxFQUFBeC9ILEdBQUE2QyxHQUFBakQsRUFBQTYvSCxFQUFBQyxJQWtCQSxTQUFBQyxFQUFBZCxFQUFBcGdHLEVBQUFDLEVBQUE4Z0csRUFBQTUvSCxFQUFBNi9ILEVBQUFDLEdBQ0EsSUFBQXorQyxFQUFBLElBQUF2aUQsRUFBQW1nRyxHQUNBMzlDLEVBQUEsSUFBQXMrQyxFQUFBL2dHLEdBQ0EsVUFBQUEsRUFBQUMsR0FBQXVpRCxFQUFBQyxHQUFBdytDLElBQUEsR0FBQWpoRyxFQUFBQyxHQUFBLEVBQUF1aUQsRUFBQUMsR0FBQXUrQyxFQUFBeCtDLEVBQUFyaEYsRUFBQTYrQixFQUdBLFNBQUFtaEcsRUFBQTFnSSxHQUNBLEdBQUFnbEQsRUFBQWhsRCxHQUFBLENBQ0EsSUFBQThTLEVBQUE5UyxFQUFBZSxPQUVBLEdBQUFpa0QsRUFBQWhsRCxFQUFBLEtBR0EsSUFGQSxJQUFBZ3lFLEtBRUFseEUsRUFBQSxFQUFxQkEsRUFBQWdTLEVBQVNoUyxJQUM5Qmt4RSxFQUFBMXlFLEtBQUFpZ0ksRUFBQXhoSSxLQUFBaUMsRUFBQWMsS0FHQSxPQUFBa3hFLEVBR0EsT0FBQXV0RCxFQUFBeGhJLEtBQUFpQyxHQUdBLE9BQUFBLEVBR0EsU0FBQTJnSSxFQUFBQyxHQUlBLE9BSEFBLEVBQUEsR0FBQXJxSCxLQUFBNmpDLE1BQUF3bUYsRUFBQSxJQUNBQSxFQUFBLEdBQUFycUgsS0FBQTZqQyxNQUFBd21GLEVBQUEsSUFDQUEsRUFBQSxHQUFBcnFILEtBQUE2akMsTUFBQXdtRixFQUFBLElBQ0EsUUFBQUEsRUFBQW43SCxLQUFBLFNBUUEsU0FBQW83SCxFQUFBbkMsRUFBQXRlLEVBQUEwZ0IsRUFBQUMsRUFBQXgvRSxFQUFBeS9FLEdBQ0EsSUFBQTE0SCxFQUFBbzJILEVBQUF1QyxRQUNBNUIsRUFBQVgsRUFBQXdDLFFBQ0FDLEVBQUEsV0FBQS9nQixFQUNBZ2hCLEVBQUFMLEVBQUFoZ0ksT0FFQSxHQUFBcWdJLEVBQUEsQ0FLQSxJQU1BQyxFQU5BQyxFQUFBUCxFQUFBLEdBQUEvZ0ksTUFDQXVoSSxFQUFBdjhFLEVBQUFzOEUsR0FDQUUsR0FBQSxFQUNBQyxHQUFBLEVBRUEzQixFQUFBeUIsRUFyQkEsU0FBQVIsR0FDQSxJQUFBVyxFQUFBWCxJQUFBaGdJLE9BQUEsR0FBQWYsTUFDQSxPQUFBZ2xELEVBQUEwOEUsS0FBQSxRQW1CQUMsQ0FBQVosR0FBQSxFQUdBQSxFQUFBcGlILEtBQUEsU0FBQTNaLEVBQUFDLEdBQ0EsT0FBQUQsRUFBQThsQyxLQUFBN2xDLEVBQUE2bEMsT0FFQXUyRixFQUFBTixFQUFBSyxFQUFBLEdBQUF0MkYsS0FRQSxJQU5BLElBQUE4MkYsS0FFQUMsS0FDQUMsRUFBQWYsRUFBQSxHQUFBL2dJLE1BQ0EraEksR0FBQSxFQUVBamhJLEVBQUEsRUFBaUJBLEVBQUFzZ0ksRUFBY3RnSSxJQUFBLENBQy9COGdJLEVBQUF0aUksS0FBQXloSSxFQUFBamdJLEdBQUFncUMsS0FBQXUyRixHQUVBLElBQUFyaEksRUFBQStnSSxFQUFBamdJLEdBQUFkLE1BUUEsR0FOQXVoSSxHQUFBbkIsRUFBQXBnSSxFQUFBOGhJLEVBQUFoQyxLQUFBeUIsR0FBQXZoSSxJQUFBOGhJLElBQ0FDLEdBQUEsR0FHQUQsRUFBQTloSSxFQUVBLGlCQUFBQSxFQUFBLENBQ0EsSUFBQWdpSSxFQUFBbjFHLEVBQUF2cUIsTUFBQXRDLEdBRUFnaUksR0FDQWhpSSxFQUFBZ2lJLEVBQ0FSLEdBQUEsR0FFQUMsR0FBQSxFQUlBSSxFQUFBdmlJLEtBQUFVLEdBR0EsR0FBQWdoSSxJQUFBZSxFQUFBLENBSUEsSUFBQUwsRUFBQUcsRUFBQVQsRUFBQSxHQUVBLElBQUF0Z0ksRUFBQSxFQUFpQkEsRUFBQXNnSSxFQUFBLEVBQWtCdGdJLElBQ25DeWdJLEVBQ0F4QixFQUFBOEIsRUFBQS9nSSxHQUFBNGdJLEVBQUE1QixJQUVBLytHLE1BQUE4Z0gsRUFBQS9nSSxLQUFBaWdCLE1BQUEyZ0gsSUFBQUQsR0FBQUQsSUFDQUssRUFBQS9nSSxHQUFBNGdJLEdBS0FILEdBQUF4QixFQUFBejNILEVBQUFvMkgsRUFBQXVELFFBQUExZ0YsR0FBQW1nRixFQUFBNUIsR0FHQSxJQUdBejlCLEVBQ0FzOUIsRUFDQXBnRyxFQUNBQyxFQUNBOGdHLEVBUEE0QixFQUFBLEVBQ0FDLEVBQUEsRUFRQSxHQUFBWCxFQUNBLElBQUFaLEdBQUEsU0FHQSxJQXFGQXRHLEVBQUEsSUFBQWdGLEdBQ0F2K0YsT0FBQTI5RixFQUFBdUQsUUFDQUcsS0FBQWYsRUFDQWpDLEtBQUFWLEVBQUEyRCxNQUNBLzBGLE1BQUFveEYsRUFBQTRELE9BQ0FwRSxRQTFGQSxTQUFBbjlGLEVBQUE1dEIsR0FJQSxJQUFBb3ZILEVBRUEsR0FBQXB2SCxFQUFBLEVBQ0FvdkgsRUFBQSxPQUNLLEdBQUFwdkgsRUFBQWd2SCxFQUFBLENBS0wsSUFBQUksRUFGQWhzSCxLQUFBc0ssSUFBQXFoSCxFQUFBLEVBQUFkLEVBQUEsR0FFeUJtQixHQUFBLEtBQ3pCWCxFQUFBVyxJQUFBcHZILEdBRHFDb3ZILEtBT3JDQSxFQUFBaHNILEtBQUFzSyxJQUFBMGhILEVBQUFuQixFQUFBLE9BQ0ssQ0FDTCxJQUFBbUIsRUFBQUwsRUFBNkJLLEVBQUFuQixLQUM3QlEsRUFBQVcsR0FBQXB2SCxHQUQrQ292SCxLQU0vQ0EsRUFBQWhzSCxLQUFBc0ssSUFBQTBoSCxFQUFBLEVBQUFuQixFQUFBLEdBR0FjLEVBQUFLLEVBQ0FKLEVBQUFodkgsRUFDQSxJQUFBMjFDLEVBQUE4NEUsRUFBQVcsRUFBQSxHQUFBWCxFQUFBVyxHQUVBLE9BQUF6NUUsRUFNQSxHQUhBdTVDLEdBQUFsdkYsRUFBQXl1SCxFQUFBVyxJQUFBejVFLEVBR0FxNEUsRUFNQSxHQUxBNWhHLEVBQUFzaUcsRUFBQVUsR0FDQTVDLEVBQUFrQyxFQUFBLElBQUFVLE1BQUEsR0FDQS9pRyxFQUFBcWlHLEVBQUFVLEVBQUFuQixFQUFBLEVBQUFBLEVBQUEsRUFBQW1CLEVBQUEsR0FDQWpDLEVBQUF1QixFQUFBVSxFQUFBbkIsRUFBQSxFQUFBQSxFQUFBLEVBQUFtQixFQUFBLEdBRUFoQixFQUNBbEIsRUFBQVYsRUFBQXBnRyxFQUFBQyxFQUFBOGdHLEVBQUFqK0IsWUFBQS81RixFQUFBeTRCLEVBQUF3Z0IsR0FBQXUrRSxPQUNPLENBR1AsR0FBQTBCLEVBQ0F4aEksRUFBQXFnSSxFQUFBVixFQUFBcGdHLEVBQUFDLEVBQUE4Z0csRUFBQWorQixZQUFBdStCLEVBQUEsR0FDQTVnSSxFQUFBMmdJLEVBQUFDLE9BQ1MsSUFBQWEsRUFFVCxPQUFBN0IsRUFBQXJnRyxFQUFBQyxFQUFBNmlFLEdBRUFyaUcsRUFBQXlnSSxFQUFBZCxFQUFBcGdHLEVBQUFDLEVBQUE4Z0csRUFBQWorQixhQUdBZzlCLEVBQUF0K0YsRUFBQXdnQixFQUFBdmhELFFBR0EsR0FBQXVoSSxFQUNBMUIsRUFBQWdDLEVBQUFVLEdBQUFWLEVBQUFVLEVBQUEsR0FBQWxnQyxFQUFBLzVGLEVBQUF5NEIsRUFBQXdnQixHQUFBdStFLE9BQ08sQ0FDUCxJQUFBOS9ILEVBRUEsR0FBQXdoSSxFQUNBM0IsRUFBQWdDLEVBQUFVLEdBQUFWLEVBQUFVLEVBQUEsR0FBQWxnQyxFQUFBdStCLEVBQUEsR0FDQTVnSSxFQUFBMmdJLEVBQUFDLE9BQ1MsSUFBQWEsRUFFVCxPQUFBN0IsRUFBQWlDLEVBQUFVLEdBQUFWLEVBQUFVLEVBQUEsR0FBQWxnQyxHQUVBcmlHLEVBQUEwL0gsRUFBQW1DLEVBQUFVLEdBQUFWLEVBQUFVLEVBQUEsR0FBQWxnQyxHQUdBZzlCLEVBQUF0K0YsRUFBQXdnQixFQUFBdmhELEtBV0F3aUksVUFBQTFCLElBT0EsT0FKQTFnQixHQUFBLFdBQUFBLElBQ0FrYSxFQUFBbGEsVUFHQWthLElBWUEsSUFBQTBELEVBQUEsU0FBQWo5RixFQUFBcStGLEVBQUE5MkgsRUFBQSsySCxHQUNBNzFILEtBQUFpNUgsV0FDQWo1SCxLQUFBeTRILFFBQUFsaEcsRUFDQXYzQixLQUFBNjRILE1BQUFqRCxJQUFBLEVBQ0E1MUgsS0FBQXkzSCxRQUFBMzRILEdBQUFrM0gsRUFDQWgySCxLQUFBMDNILFFBQUE3QixHQUFBSSxFQUNBajJILEtBQUFrNUgsV0FBQSxFQUNBbDVILEtBQUE4NEgsT0FBQSxFQUNBOTRILEtBQUFtNUgsYUFDQW41SCxLQUFBbzVILGdCQUNBcDVILEtBQUFxNUgsY0FHQTdFLEVBQUFuZ0ksV0FPQWdaLEtBQUEsU0FBQWkwQixFQUVBbmMsR0FDQSxJQUFBbTBHLEVBQUF0NUgsS0FBQWk1SCxRQUVBLFFBQUFsaEYsS0FBQTV5QixFQUNBLEdBQUFBLEVBQUE3d0IsZUFBQXlqRCxHQUFBLENBSUEsSUFBQXVoRixFQUFBdmhGLEdBQUEsQ0FDQXVoRixFQUFBdmhGLE1BRUEsSUFBQXZoRCxFQUFBd0osS0FBQXkzSCxRQUFBejNILEtBQUF5NEgsUUFBQTFnRixHQUVBLFNBQUF2aEQsRUFFQSxTQU9BLElBQUE4cUMsR0FDQWc0RixFQUFBdmhGLEdBQUFqaUQsTUFDQXdyQyxLQUFBLEVBQ0E5cUMsTUFBQTBnSSxFQUFBMWdJLEtBS0E4aUksRUFBQXZoRixHQUFBamlELE1BQ0F3ckMsT0FDQTlxQyxNQUFBMnVCLEVBQUE0eUIsS0FJQSxPQUFBLzNDLE1BUUF1NUgsT0FBQSxTQUFBcjdILEdBR0EsT0FGQThCLEtBQUFvNUgsYUFBQXRqSSxLQUFBb0ksR0FFQThCLE1BRUEwMUgsTUFBQSxXQUNBLFFBQUFwK0gsRUFBQSxFQUFtQkEsRUFBQTBJLEtBQUFxNUgsVUFBQTloSSxPQUEyQkQsSUFDOUMwSSxLQUFBcTVILFVBQUEvaEksR0FBQW8rSCxRQUdBMTFILEtBQUFnMUgsU0FBQSxHQUVBVyxPQUFBLFdBQ0EsUUFBQXIrSCxFQUFBLEVBQW1CQSxFQUFBMEksS0FBQXE1SCxVQUFBOWhJLE9BQTJCRCxJQUM5QzBJLEtBQUFxNUgsVUFBQS9oSSxHQUFBcStILFNBR0EzMUgsS0FBQWcxSCxTQUFBLEdBRUF3RSxTQUFBLFdBQ0EsUUFBQXg1SCxLQUFBZzFILFNBRUF5RSxjQUFBLFdBRUF6NUgsS0FBQWk1SCxXQUVBajVILEtBQUFxNUgsVUFBQTloSSxPQUFBLEVBSUEsSUFIQSxJQUFBbWlJLEVBQUExNUgsS0FBQW01SCxVQUNBN3ZILEVBQUFvd0gsRUFBQW5pSSxPQUVBRCxFQUFBLEVBQW1CQSxFQUFBZ1MsRUFBU2hTLElBQzVCb2lJLEVBQUFwaUksR0FBQS9DLEtBQUF5TCxPQVdBc04sTUFBQSxTQUFBc3BHLEVBQUE0Z0IsR0FDQSxJQVdBbUMsRUFYQWw2RixFQUFBei9CLEtBQ0E0NUgsRUFBQSxFQUVBdEMsRUFBQSxhQUNBc0MsR0FHQW42RixFQUFBZzZGLGlCQU1BLFFBQUExaEYsS0FBQS8zQyxLQUFBaTVILFFBQ0EsR0FBQWo1SCxLQUFBaTVILFFBQUEza0ksZUFBQXlqRCxHQUFBLENBSUEsSUFBQSs0RSxFQUFBdUcsRUFBQXIzSCxLQUFBNDJHLEVBQUEwZ0IsRUFBQXQzSCxLQUFBaTVILFFBQUFsaEYsS0FBQXkvRSxHQUVBMUcsSUFDQTl3SCxLQUFBcTVILFVBQUF2akksS0FBQWc3SCxHQUVBOEksSUFFQTU1SCxLQUFBbWpCLFdBQ0FuakIsS0FBQW1qQixVQUFBOHhHLFFBQUFuRSxHQUdBNkksRUFBQTdJLEdBS0EsR0FBQTZJLEVBQUEsQ0FDQSxJQUFBRSxFQUFBRixFQUFBakYsUUFFQWlGLEVBQUFqRixRQUFBLFNBQUFuOUYsRUFBQTV0QixHQUNBa3dILEVBQUF0aUcsRUFBQTV0QixHQUVBLFFBQUFyUyxFQUFBLEVBQXVCQSxFQUFBbW9DLEVBQUEyNUYsYUFBQTdoSSxPQUE4QkQsSUFDckRtb0MsRUFBQTI1RixhQUFBOWhJLEdBQUFpZ0MsRUFBQTV0QixJQVlBLE9BSkFpd0gsR0FDQTU1SCxLQUFBeTVILGdCQUdBejVILE1BT0Ewb0IsS0FBQSxTQUFBb3hHLEdBSUEsSUFIQSxJQUFBQyxFQUFBLzVILEtBQUFxNUgsVUFDQWwyRyxFQUFBbmpCLEtBQUFtakIsVUFFQTdyQixFQUFBLEVBQW1CQSxFQUFBeWlJLEVBQUF4aUksT0FBcUJELElBQUEsQ0FDeEMsSUFBQXc1SCxFQUFBaUosRUFBQXppSSxHQUVBd2lJLEdBRUFoSixFQUFBNEQsUUFBQTEwSCxLQUFBeTRILFFBQUEsR0FHQXQxRyxLQUFBa3lHLFdBQUF2RSxHQUdBaUosRUFBQXhpSSxPQUFBLEdBUUF1c0MsTUFBQSxTQUFBeEMsR0FFQSxPQURBdGhDLEtBQUE4NEgsT0FBQXgzRixFQUNBdGhDLE1BUUFrcUcsS0FBQSxTQUFBaHdHLEdBS0EsT0FKQUEsR0FDQThGLEtBQUFtNUgsVUFBQXJqSSxLQUFBb0UsR0FHQThGLE1BTUFvMUgsU0FBQSxXQUNBLE9BQUFwMUgsS0FBQXE1SCxZQUdBLElBQUFuM0gsRUFBQXN5SCxFQUNBcDZILEVBQUEwRCxRQUFBb0Usa0VDbm9CQSxJQUFBODNILEVBQUF6a0ksRUFBQSxrREFnQkEsU0FBQXVnSSxFQUFBNzdILEdBQ0ErRixLQUFBeTRILFFBQUF4K0gsRUFBQXM5QixPQUVBdjNCLEtBQUFpNkgsTUFBQWhnSSxFQUFBMitILE1BQUEsSUFFQTU0SCxLQUFBODRILE9BQUE3K0gsRUFBQTZwQyxPQUFBLEVBR0E5akMsS0FBQWs2SCxjQUFBLEVBRUFsNkgsS0FBQTQxSCxLQUFBLE1BQUEzN0gsRUFBQTI3SCxNQUFBMzdILEVBQUEyN0gsS0FDQTUxSCxLQUFBMmUsSUFBQTFrQixFQUFBMGtCLEtBQUEsRUFDQTNlLEtBQUE0MkcsT0FBQTM4RyxFQUFBMjhHLFFBQUEsU0FDQTUyRyxLQUFBMDBILFFBQUF6NkgsRUFBQXk2SCxRQUNBMTBILEtBQUFnNUgsVUFBQS8rSCxFQUFBKytILFVBQ0FoNUgsS0FBQW02SCxVQUFBbGdJLEVBQUFrZ0ksVUFDQW42SCxLQUFBODBILFlBQUEsRUFDQTkwSCxLQUFBZzFILFNBQUEsRUFHQWMsRUFBQXpoSSxXQUNBbU4sWUFBQXMwSCxFQUNBNW5GLEtBQUEsU0FBQWtzRixFQUFBQyxHQVFBLEdBTEFyNkgsS0FBQWs2SCxlQUNBbDZILEtBQUFzNkgsV0FBQUYsRUFBQXA2SCxLQUFBODRILE9BQ0E5NEgsS0FBQWs2SCxjQUFBLEdBR0FsNkgsS0FBQWcxSCxRQUNBaDFILEtBQUE4MEgsYUFBQXVGLE1BREEsQ0FLQSxJQUFBMXdILEdBQUF5d0gsRUFBQXA2SCxLQUFBczZILFdBQUF0NkgsS0FBQTgwSCxhQUFBOTBILEtBQUFpNkgsTUFFQSxLQUFBdHdILEVBQUEsSUFJQUEsRUFBQW9ELEtBQUFzSyxJQUFBMU4sRUFBQSxHQUNBLElBQUFpdEcsRUFBQTUyRyxLQUFBNDJHLE9BQ0EyakIsRUFBQSxpQkFBQTNqQixFQUFBb2pCLEVBQUFwakIsS0FDQTRqQixFQUFBLG1CQUFBRCxJQUFBNXdILEtBR0EsT0FGQTNKLEtBQUE0cUcsS0FBQSxRQUFBNHZCLEdBRUEsR0FBQTd3SCxFQUNBM0osS0FBQTQxSCxNQUNBNTFILEtBQUF5NkgsUUFBQUwsR0FHQSxZQUtBcDZILEtBQUF3MUgsY0FBQSxFQUNBLFdBR0EsUUFFQWlGLFFBQUEsU0FBQUwsR0FDQSxJQUFBOWlDLEdBQUE4aUMsRUFBQXA2SCxLQUFBczZILFdBQUF0NkgsS0FBQTgwSCxhQUFBOTBILEtBQUFpNkgsTUFDQWo2SCxLQUFBczZILFdBQUFGLEVBQUE5aUMsRUFBQXQzRixLQUFBMmUsSUFDQTNlLEtBQUE4MEgsWUFBQSxFQUNBOTBILEtBQUF3MUgsY0FBQSxHQUVBNXFCLEtBQUEsU0FBQW41RSxFQUFBaXBHLEdBR0ExNkgsS0FGQXl4QixFQUFBLEtBQUFBLElBR0F6eEIsS0FBQXl4QixHQUFBenhCLEtBQUF5NEgsUUFBQWlDLElBR0FoRixNQUFBLFdBQ0ExMUgsS0FBQWcxSCxTQUFBLEdBRUFXLE9BQUEsV0FDQTMxSCxLQUFBZzFILFNBQUEsSUFHQSxJQUFBOXlILEVBQUE0ekgsRUFDQTE3SCxFQUFBMEQsUUFBQW9FLGtFQy9GQSxJQUFBMDBHLEdBS0FNLE9BQUEsU0FBQWhrRSxHQUNBLE9BQUFBLEdBT0F5bkYsWUFBQSxTQUFBem5GLEdBQ0EsT0FBQUEsS0FPQTBuRixhQUFBLFNBQUExbkYsR0FDQSxPQUFBQSxHQUFBLEVBQUFBLElBT0EybkYsZUFBQSxTQUFBM25GLEdBQ0EsT0FBQUEsR0FBQSxLQUNBLEdBQUFBLEtBR0EsTUFBQUEsS0FBQSxPQVFBNG5GLFFBQUEsU0FBQTVuRixHQUNBLE9BQUFBLE9BT0E2bkYsU0FBQSxTQUFBN25GLEdBQ0EsUUFBQUEsTUFBQSxHQU9BOG5GLFdBQUEsU0FBQTluRixHQUNBLE9BQUFBLEdBQUEsS0FDQSxHQUFBQSxNQUdBLEtBQUFBLEdBQUEsR0FBQUEsSUFBQSxJQVFBK25GLFVBQUEsU0FBQS9uRixHQUNBLE9BQUFBLFNBT0Fnb0YsV0FBQSxTQUFBaG9GLEdBQ0EsWUFBQUEsU0FPQWlvRixhQUFBLFNBQUFqb0YsR0FDQSxPQUFBQSxHQUFBLEtBQ0EsR0FBQUEsU0FHQSxLQUFBQSxHQUFBLEdBQUFBLE1BQUEsSUFRQWtvRixVQUFBLFNBQUFsb0YsR0FDQSxPQUFBQSxXQU9BbW9GLFdBQUEsU0FBQW5vRixHQUNBLFFBQUFBLFVBQUEsR0FPQW9vRixhQUFBLFNBQUFwb0YsR0FDQSxPQUFBQSxHQUFBLEtBQ0EsR0FBQUEsVUFHQSxLQUFBQSxHQUFBLEdBQUFBLFFBQUEsSUFRQXFvRixhQUFBLFNBQUFyb0YsR0FDQSxTQUFBbm1DLEtBQUFDLElBQUFrbUMsRUFBQW5tQyxLQUFBNEcsR0FBQSxJQU9BNm5ILGNBQUEsU0FBQXRvRixHQUNBLE9BQUFubUMsS0FBQUcsSUFBQWdtQyxFQUFBbm1DLEtBQUE0RyxHQUFBLElBT0E4bkgsZ0JBQUEsU0FBQXZvRixHQUNBLFlBQUFubUMsS0FBQUMsSUFBQUQsS0FBQTRHLEdBQUF1L0IsS0FRQXdvRixjQUFBLFNBQUF4b0YsR0FDQSxXQUFBQSxFQUFBLEVBQUFubUMsS0FBQXN0RSxJQUFBLEtBQUFubkMsRUFBQSxJQU9BeW9GLGVBQUEsU0FBQXpvRixHQUNBLFdBQUFBLEVBQUEsSUFBQW5tQyxLQUFBc3RFLElBQUEsTUFBQW5uQyxJQU9BMG9GLGlCQUFBLFNBQUExb0YsR0FDQSxXQUFBQSxFQUNBLEVBR0EsSUFBQUEsRUFDQSxHQUdBQSxHQUFBLEtBQ0EsR0FBQW5tQyxLQUFBc3RFLElBQUEsS0FBQW5uQyxFQUFBLEdBR0EsTUFBQW5tQyxLQUFBc3RFLElBQUEsT0FBQW5uQyxFQUFBLE1BUUEyb0YsV0FBQSxTQUFBM29GLEdBQ0EsU0FBQW5tQyxLQUFBZ0gsS0FBQSxFQUFBbS9CLE1BT0E0b0YsWUFBQSxTQUFBNW9GLEdBQ0EsT0FBQW5tQyxLQUFBZ0gsS0FBQSxLQUFBbS9CLE1BT0E2b0YsY0FBQSxTQUFBN29GLEdBQ0EsT0FBQUEsR0FBQSxNQUNBLElBQUFubUMsS0FBQWdILEtBQUEsRUFBQW0vQixLQUFBLEdBR0EsSUFBQW5tQyxLQUFBZ0gsS0FBQSxHQUFBbS9CLEdBQUEsR0FBQUEsR0FBQSxJQVFBOG9GLFVBQUEsU0FBQTlvRixHQUNBLElBQUF2ekMsRUFDQW5FLEVBQUEsR0FHQSxXQUFBMDNDLEVBQ0EsRUFHQSxJQUFBQSxFQUNBLElBR0ExM0MsS0FBQSxHQUNBQSxFQUFBLEVBQ0FtRSxFQUFBdEgsSUFFQXNILEVBZEEsR0FjQW9OLEtBQUErckYsS0FBQSxFQUFBdDlGLElBQUEsRUFBQXVSLEtBQUE0RyxLQUdBblksRUFBQXVSLEtBQUFzdEUsSUFBQSxNQUFBbm5DLEdBQUEsSUFBQW5tQyxLQUFBRyxLQUFBZ21DLEVBQUF2ekMsSUFBQSxFQUFBb04sS0FBQTRHLElBakJBLE1Bd0JBc29ILFdBQUEsU0FBQS9vRixHQUNBLElBQUF2ekMsRUFDQW5FLEVBQUEsR0FHQSxXQUFBMDNDLEVBQ0EsRUFHQSxJQUFBQSxFQUNBLElBR0ExM0MsS0FBQSxHQUNBQSxFQUFBLEVBQ0FtRSxFQUFBdEgsSUFFQXNILEVBZEEsR0FjQW9OLEtBQUErckYsS0FBQSxFQUFBdDlGLElBQUEsRUFBQXVSLEtBQUE0RyxJQUdBblksRUFBQXVSLEtBQUFzdEUsSUFBQSxNQUFBbm5DLEdBQUFubUMsS0FBQUcsS0FBQWdtQyxFQUFBdnpDLElBQUEsRUFBQW9OLEtBQUE0RyxJQWpCQSxJQWlCQSxJQU9BdW9ILGFBQUEsU0FBQWhwRixHQUNBLElBQUF2ekMsRUFDQW5FLEVBQUEsR0FHQSxXQUFBMDNDLEVBQ0EsRUFHQSxJQUFBQSxFQUNBLElBR0ExM0MsS0FBQSxHQUNBQSxFQUFBLEVBQ0FtRSxFQUFBdEgsSUFFQXNILEVBZEEsR0FjQW9OLEtBQUErckYsS0FBQSxFQUFBdDlGLElBQUEsRUFBQXVSLEtBQUE0RyxLQUdBdS9CLEdBQUEsS0FDQTEzQyxFQUFBdVIsS0FBQXN0RSxJQUFBLE1BQUFubkMsR0FBQSxJQUFBbm1DLEtBQUFHLEtBQUFnbUMsRUFBQXZ6QyxJQUFBLEVBQUFvTixLQUFBNEcsSUFsQkEsS0FrQkEsR0FHQW5ZLEVBQUF1UixLQUFBc3RFLElBQUEsT0FBQW5uQyxHQUFBLElBQUFubUMsS0FBQUcsS0FBQWdtQyxFQUFBdnpDLElBQUEsRUFBQW9OLEtBQUE0RyxJQXJCQSxJQXFCQSxPQVFBd29ILE9BQUEsU0FBQWpwRixHQUNBLElBQUF2ekMsRUFBQSxRQUNBLE9BQUF1ekMsTUFBQXZ6QyxFQUFBLEdBQUF1ekMsRUFBQXZ6QyxJQU9BeThILFFBQUEsU0FBQWxwRixHQUNBLElBQUF2ekMsRUFBQSxRQUNBLFFBQUF1ekMsTUFBQXZ6QyxFQUFBLEdBQUF1ekMsRUFBQXZ6QyxHQUFBLEdBT0EwOEgsVUFBQSxTQUFBbnBGLEdBQ0EsSUFBQXZ6QyxFQUFBLFVBRUEsT0FBQXV6QyxHQUFBLEtBQ0FBLE1BQUF2ekMsRUFBQSxHQUFBdXpDLEVBQUF2ekMsR0FBQSxHQUdBLEtBQUF1ekMsR0FBQSxHQUFBQSxJQUFBdnpDLEVBQUEsR0FBQXV6QyxFQUFBdnpDLEdBQUEsSUFRQTI4SCxTQUFBLFNBQUFwcEYsR0FDQSxTQUFBMGpFLEVBQUEybEIsVUFBQSxFQUFBcnBGLElBT0FxcEYsVUFBQSxTQUFBcnBGLEdBQ0EsT0FBQUEsRUFBQSxPQUNBLE9BQUFBLElBQ0tBLEVBQUEsT0FDTCxRQUFBQSxHQUFBLFVBQUFBLEVBQUEsSUFDS0EsRUFBQSxTQUNMLFFBQUFBLEdBQUEsV0FBQUEsRUFBQSxNQUVBLFFBQUFBLEdBQUEsWUFBQUEsRUFBQSxTQVFBc3BGLFlBQUEsU0FBQXRwRixHQUNBLE9BQUFBLEVBQUEsR0FDQSxHQUFBMGpFLEVBQUEwbEIsU0FBQSxFQUFBcHBGLEdBR0EsR0FBQTBqRSxFQUFBMmxCLFVBQUEsRUFBQXJwRixFQUFBLFFBR0FoeEMsRUFBQTAwRyxFQUNBeDhHLEVBQUEwRCxRQUFBb0UsaUZDelhBLElBQUFBLEVBQUEsb0JBQUFwTyxnQkFBQTJqSCx1QkFBQTNqSCxPQUFBMmpILHNCQUFBbDRHLEtBQUF6TCxTQUNBQSxPQUFBMm9JLHlCQUFBM29JLE9BQUEyb0ksd0JBQUFsOUgsS0FBQXpMLGdCQUFBNG9JLDBCQUFBNW9JLE9BQUE2b0ksOEJBQUEsU0FBQTdtRixHQUNBdlUsV0FBQXVVLEVBQUEsS0FHQTE3QyxFQUFBMEQsUUFBQW9FLHdEQ0xBLElBQUFrd0QsRUFBQSxFQUVBLG9CQUFBdCtELFNBQ0FzK0QsRUFBQXJsRCxLQUFBbUcsSUFBQXBmLE9BQUE0NkQsa0JBQUEsTUFnQkEsSUFFQUEsRUFBQTBELEVBQ0F0MEQsRUFBQTgrSCxVQUhBLEVBSUE5K0gsRUFBQTR3RCxnRkN2QkEsSUFFQW11RSxFQUZBdG5JLEVBQUEsOENBRUFzbkksZ0JBQ0E1bEgsRUFBQSxFQUFBbEssS0FBQTRHLEdBd0RBN1YsRUFBQWcvSCxjQXpDQSxTQUFBdHBILEVBQUFDLEVBQUF6VSxFQUFBNkwsRUFBQWdDLEVBQUFrd0gsRUFBQTVuRyxFQUFBMWtCLEVBQUFDLEdBQ0EsT0FBQXlrQixFQUNBLFNBR0EsSUFBQTZuRyxFQUFBN25HLEVBQ0Exa0IsR0FBQStDLEVBQ0E5QyxHQUFBK0MsRUFDQSxJQUFBNVUsRUFBQWtPLEtBQUFnSCxLQUFBdEQsSUFBQUMsS0FFQSxHQUFBN1IsRUFBQW0rSCxFQUFBaCtILEdBQUFILEVBQUFtK0gsRUFBQWgrSCxFQUNBLFNBR0EsR0FBQStOLEtBQUFpSSxJQUFBbkssRUFBQWdDLEdBQUFvSyxFQUFBLEtBRUEsU0FHQSxHQUFBOGxILEVBQUEsQ0FDQSxJQUFBRSxFQUFBcHlILEVBQ0FBLEVBQUFneUgsRUFBQWh3SCxHQUNBQSxFQUFBZ3dILEVBQUFJLFFBRUFweUgsRUFBQWd5SCxFQUFBaHlILEdBQ0FnQyxFQUFBZ3dILEVBQUFod0gsR0FHQWhDLEVBQUFnQyxJQUNBQSxHQUFBb0ssR0FHQSxJQUFBZ0IsRUFBQWxMLEtBQUFtd0gsTUFBQXhzSCxFQUFBRCxHQU1BLE9BSkF3SCxFQUFBLElBQ0FBLEdBQUFoQixHQUdBZ0IsR0FBQXBOLEdBQUFvTixHQUFBcEwsR0FBQW9MLEVBQUFoQixHQUFBcE0sR0FBQW9OLEVBQUFoQixHQUFBcEssa0VDeERBLElBQUFzd0gsRUFBQTVuSSxFQUFBLDRDQWdDQXVJLEVBQUFnL0gsY0FmQSxTQUFBTSxFQUFBQyxFQUFBdG5ILEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFtbkgsRUFBQW5vRyxFQUFBMWtCLEVBQUFDLEdBQ0EsT0FBQXlrQixFQUNBLFNBR0EsSUFBQTZuRyxFQUFBN25HLEVBRUEsUUFBQXprQixFQUFBMnNILEVBQUFMLEdBQUF0c0gsRUFBQXNGLEVBQUFnbkgsR0FBQXRzSCxFQUFBd0YsRUFBQThtSCxHQUFBdHNILEVBQUE0c0gsRUFBQU4sR0FBQXRzSCxFQUFBMnNILEVBQUFMLEdBQUF0c0gsRUFBQXNGLEVBQUFnbkgsR0FBQXRzSCxFQUFBd0YsRUFBQThtSCxHQUFBdHNILEVBQUE0c0gsRUFBQU4sR0FBQXZzSCxFQUFBMnNILEVBQUFKLEdBQUF2c0gsRUFBQXNGLEVBQUFpbkgsR0FBQXZzSCxFQUFBd0YsRUFBQSttSCxHQUFBdnNILEVBQUEwRixFQUFBNm1ILEdBQUF2c0gsRUFBQTJzSCxFQUFBSixHQUFBdnNILEVBQUFzRixFQUFBaW5ILEdBQUF2c0gsRUFBQXdGLEVBQUErbUgsR0FBQXZzSCxFQUFBMEYsRUFBQTZtSCxJQUlBRyxFQUFBSSxrQkFBQUgsRUFBQUMsRUFBQXRuSCxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBbW5ILEVBQUE3c0gsRUFBQUMsRUFBQSxPQUNBc3NILEVBQUEsK0RDU0FsL0gsRUFBQWcvSCxjQTNCQSxTQUFBTSxFQUFBQyxFQUFBdG5ILEVBQUFDLEVBQUFtZixFQUFBMWtCLEVBQUFDLEdBQ0EsT0FBQXlrQixFQUNBLFNBR0EsSUFBQTZuRyxFQUFBN25HLEVBQ0Fxb0csRUFBQSxFQUdBLEdBQUE5c0gsRUFBQTJzSCxFQUFBTCxHQUFBdHNILEVBQUFzRixFQUFBZ25ILEdBQUF0c0gsRUFBQTJzSCxFQUFBTCxHQUFBdHNILEVBQUFzRixFQUFBZ25ILEdBQUF2c0gsRUFBQTJzSCxFQUFBSixHQUFBdnNILEVBQUFzRixFQUFBaW5ILEdBQUF2c0gsRUFBQTJzSCxFQUFBSixHQUFBdnNILEVBQUFzRixFQUFBaW5ILEVBQ0EsU0FHQSxHQUFBSSxJQUFBcm5ILEVBSUEsT0FBQWhKLEtBQUFpSSxJQUFBdkUsRUFBQTJzSCxJQUFBSixFQUFBLEVBR0EsSUFBQUMsR0FOQU8sR0FBQUgsRUFBQXJuSCxJQUFBb25ILEVBQUFybkgsSUFNQXRGLEVBQUFDLEdBTEEwc0gsRUFBQXBuSCxFQUFBRCxFQUFBc25ILElBQUFELEVBQUFybkgsR0FTQSxPQUZBa25ILEtBQUFPLElBQUEsSUFFQVIsRUFBQSxFQUFBQSxFQUFBLGlFQ25DQSxJQUFBUyxFQUFBbG9JLEVBQUEsZ0RBRUFnMkIsRUFBQWgyQixFQUFBLDhDQUVBbW9JLEVBQUFub0ksRUFBQSwrQ0FFQW9vSSxFQUFBcG9JLEVBQUEsbURBRUFvdkUsRUFBQXB2RSxFQUFBLDZDQUlBc25JLEVBRkF0bkksRUFBQSw4Q0FFQXNuSSxnQkFFQU0sRUFBQTVuSSxFQUFBLDRDQUVBcW9JLEVBQUFyb0ksRUFBQSxxREFFQXNvSSxFQUFBSixFQUFBSSxJQUNBNW1ILEVBQUEsRUFBQWxLLEtBQUE0RyxHQUNBbXFILEVBQUEsS0FPQSxJQUFBckssSUFBQSxTQUNBc0ssSUFBQSxNQUVBLFNBQUFDLElBQ0EsSUFBQWYsRUFBQWMsRUFBQSxHQUNBQSxFQUFBLEdBQUFBLEVBQUEsR0FDQUEsRUFBQSxHQUFBZCxFQUdBLFNBQUFnQixFQUFBYixFQUFBQyxFQUFBdG5ILEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFtbkgsRUFBQTdzSCxFQUFBQyxHQUVBLEdBQUFBLEVBQUEyc0gsR0FBQTNzSCxFQUFBc0YsR0FBQXRGLEVBQUF3RixHQUFBeEYsRUFBQTRzSCxHQUFBNXNILEVBQUEyc0gsR0FBQTNzSCxFQUFBc0YsR0FBQXRGLEVBQUF3RixHQUFBeEYsRUFBQTRzSCxFQUNBLFNBR0EsSUFBQVksRUFBQWYsRUFBQWdCLFlBQUFkLEVBQUFybkgsRUFBQUUsRUFBQW9uSCxFQUFBNXNILEVBQUEraUgsR0FFQSxPQUFBeUssRUFDQSxTQU1BLElBSkEsSUFFQUUsRUFBQUMsRUFGQXhsQyxFQUFBLEVBQ0F5bEMsR0FBQSxFQUdBaG5JLEVBQUEsRUFBbUJBLEVBQUE0bUksRUFBWTVtSSxJQUFBLENBQy9CLElBQUFKLEVBQUF1OEgsRUFBQW44SCxHQUVBazFHLEVBQUEsSUFBQXQxRyxHQUFBLElBQUFBLEVBQUEsS0FDQWltSSxFQUFBb0IsUUFBQW5CLEVBQUFybkgsRUFBQUUsRUFBQUUsRUFBQWpmLEdBRUF1WixJQUtBNnRILEVBQUEsSUFDQUEsRUFBQW5CLEVBQUFxQixhQUFBbkIsRUFBQXJuSCxFQUFBRSxFQUFBb25ILEVBQUFTLEdBRUFBLEVBQUEsR0FBQUEsRUFBQSxJQUFBTyxFQUFBLEdBQ0FOLElBR0FJLEVBQUFqQixFQUFBb0IsUUFBQWxCLEVBQUFybkgsRUFBQUUsRUFBQW9uSCxFQUFBUyxFQUFBLElBRUFPLEVBQUEsSUFDQUQsRUFBQWxCLEVBQUFvQixRQUFBbEIsRUFBQXJuSCxFQUFBRSxFQUFBb25ILEVBQUFTLEVBQUEsTUFJQSxHQUFBTyxFQUVBcG5JLEVBQUE2bUksRUFBQSxHQUNBbGxDLEdBQUF1bEMsRUFBQWYsRUFBQTd3QixLQUNTdDFHLEVBQUE2bUksRUFBQSxHQUNUbGxDLEdBQUF3bEMsRUFBQUQsRUFBQTV4QixLQUVBM1QsR0FBQXlrQyxFQUFBZSxFQUFBN3hCLEtBSUF0MUcsRUFBQTZtSSxFQUFBLEdBQ0FsbEMsR0FBQXVsQyxFQUFBZixFQUFBN3dCLEtBRUEzVCxHQUFBeWtDLEVBQUFjLEVBQUE1eEIsTUFLQSxPQUFBM1QsRUFJQSxTQUFBNGxDLEVBQUFyQixFQUFBQyxFQUFBdG5ILEVBQUFDLEVBQUFDLEVBQUFDLEVBQUF6RixFQUFBQyxHQUVBLEdBQUFBLEVBQUEyc0gsR0FBQTNzSCxFQUFBc0YsR0FBQXRGLEVBQUF3RixHQUFBeEYsRUFBQTJzSCxHQUFBM3NILEVBQUFzRixHQUFBdEYsRUFBQXdGLEVBQ0EsU0FHQSxJQUFBZ29ILEVBQUFmLEVBQUF1QixnQkFBQXJCLEVBQUFybkgsRUFBQUUsRUFBQXhGLEVBQUEraUgsR0FFQSxPQUFBeUssRUFDQSxTQUVBLElBQUFobkksRUFBQWltSSxFQUFBd0Isa0JBQUF0QixFQUFBcm5ILEVBQUFFLEdBRUEsR0FBQWhmLEdBQUEsR0FBQUEsR0FBQSxHQUlBLElBSEEsSUFBQTJoRyxFQUFBLEVBQ0ErbEMsRUFBQXpCLEVBQUEwQixZQUFBeEIsRUFBQXJuSCxFQUFBRSxFQUFBaGYsR0FFQUksRUFBQSxFQUFxQkEsRUFBQTRtSSxFQUFZNW1JLElBQUEsQ0FFakMsSUFBQWsxRyxFQUFBLElBQUFpbkIsRUFBQW44SCxJQUFBLElBQUFtOEgsRUFBQW44SCxHQUFBLEtBQ0E2bEksRUFBQTBCLFlBQUF6QixFQUFBcm5ILEVBQUFFLEVBQUF3OUcsRUFBQW44SCxJQUVBbVosSUFLQWdqSCxFQUFBbjhILEdBQUFKLEVBQ0EyaEcsR0FBQStsQyxFQUFBdkIsRUFBQTd3QixLQUVBM1QsR0FBQTNpRixFQUFBMG9ILEVBQUFweUIsTUFJQSxPQUFBM1QsRUFHQTJULEVBQUEsSUFBQWluQixFQUFBLFFBQUFBLEVBQUEsUUFHQSxPQUZBMEosRUFBQTBCLFlBQUF6QixFQUFBcm5ILEVBQUFFLEVBQUF3OUcsRUFBQSxJQUVBaGpILEVBRUEsRUFHQXlGLEVBQUFtbkgsRUFBQTd3QixLQU9BLFNBQUFzeUIsRUFBQXRySCxFQUFBQyxFQUFBelUsRUFBQTZMLEVBQUFnQyxFQUFBa3dILEVBQUF0c0gsRUFBQUMsR0FHQSxJQUZBQSxHQUFBK0MsR0FFQXpVLEdBQUEwUixHQUFBMVIsRUFDQSxTQUdBLElBQUFpK0gsRUFBQWx3SCxLQUFBZ0gsS0FBQS9VLElBQUEwUixLQUNBK2lILEVBQUEsSUFBQXdKLEVBQ0F4SixFQUFBLEdBQUF3SixFQUNBLElBQUF2cUgsRUFBQTNGLEtBQUFpSSxJQUFBbkssRUFBQWdDLEdBRUEsR0FBQTZGLEVBQUEsS0FDQSxTQUdBLEdBQUFBLEVBQUF1RSxFQUFBLE1BRUFwTSxFQUFBLEVBQ0FnQyxFQUFBb0ssRUFDQSxJQUFBL0MsRUFBQTZvSCxFQUFBLEtBRUEsT0FBQXRzSCxHQUFBZ2pILEVBQUEsR0FBQWpnSCxHQUFBL0MsR0FBQWdqSCxFQUFBLEdBQUFqZ0gsRUFDQVUsRUFFQSxFQUlBLEdBQUE2b0gsRUFBQSxDQUNBRSxFQUFBcHlILEVBQ0FBLEVBQUFneUgsRUFBQWh3SCxHQUNBQSxFQUFBZ3dILEVBQUFJLFFBRUFweUgsRUFBQWd5SCxFQUFBaHlILEdBQ0FnQyxFQUFBZ3dILEVBQUFod0gsR0FHQWhDLEVBQUFnQyxJQUNBQSxHQUFBb0ssR0FLQSxJQUZBLElBQUE0aEYsRUFBQSxFQUVBdmhHLEVBQUEsRUFBaUJBLEVBQUEsRUFBT0EsSUFBQSxDQUN4QixJQUFBeW5JLEVBQUF0TCxFQUFBbjhILEdBRUEsR0FBQXluSSxFQUFBdnJILEVBQUEvQyxFQUFBLENBQ0EsSUFBQXdILEVBQUFsTCxLQUFBbXdILE1BQUF4c0gsRUFBQXF1SCxHQUNBN3FILEVBQUE2b0gsRUFBQSxLQUVBOWtILEVBQUEsSUFDQUEsRUFBQWhCLEVBQUFnQixJQUdBQSxHQUFBcE4sR0FBQW9OLEdBQUFwTCxHQUFBb0wsRUFBQWhCLEdBQUFwTSxHQUFBb04sRUFBQWhCLEdBQUFwSyxLQUNBb0wsRUFBQWxMLEtBQUE0RyxHQUFBLEdBQUFzRSxFQUFBLElBQUFsTCxLQUFBNEcsS0FDQU8sTUFHQTJrRixHQUFBM2tGLElBS0EsT0FBQTJrRixFQUdBLFNBQUFtbUMsRUFBQS9oSSxFQUFBazRCLEVBQUE4cEcsRUFBQXh1SCxFQUFBQyxHQU9BLElBTkEsSUFBQW1vRixFQUFBLEVBQ0FxbUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0EvQixFQUFBLEVBQ0FDLEVBQUEsRUFFQS9sSSxFQUFBLEVBQWlCQSxFQUFBMkYsRUFBQTFGLFFBQWlCLENBQ2xDLElBQUE2bkksRUFBQW5pSSxFQUFBM0YsS0F3QkEsT0F0QkE4bkksSUFBQXZCLEVBQUFuMUMsR0FBQXB4RixFQUFBLElBRUEybkksSUFDQXBtQyxHQUFBK2tDLEVBQUFzQixFQUFBQyxFQUFBL0IsRUFBQUMsRUFBQTVzSCxFQUFBQyxLQVFBLEdBQUFwWixJQU9BOGxJLEVBRkE4QixFQUFBamlJLEVBQUEzRixHQUdBK2xJLEVBRkE4QixFQUFBbGlJLEVBQUEzRixFQUFBLElBS0E4bkksR0FDQSxLQUFBdkIsRUFBQW4xQyxFQUtBdzJDLEVBRkE5QixFQUFBbmdJLEVBQUEzRixLQUdBNm5JLEVBRkE5QixFQUFBcGdJLEVBQUEzRixLQUdBLE1BRUEsS0FBQXVtSSxFQUFBejlCLEVBQ0EsR0FBQTYrQixHQUNBLEdBQUExekcsRUFBQXV4RyxjQUFBb0MsRUFBQUMsRUFBQWxpSSxFQUFBM0YsR0FBQTJGLEVBQUEzRixFQUFBLEdBQUE2OUIsRUFBQTFrQixFQUFBQyxHQUNBLGNBSUFtb0YsR0FBQStrQyxFQUFBc0IsRUFBQUMsRUFBQWxpSSxFQUFBM0YsR0FBQTJGLEVBQUEzRixFQUFBLEdBQUFtWixFQUFBQyxJQUFBLEVBR0F3dUgsRUFBQWppSSxFQUFBM0YsS0FDQTZuSSxFQUFBbGlJLEVBQUEzRixLQUNBLE1BRUEsS0FBQXVtSSxFQUFBLytCLEVBQ0EsR0FBQW1nQyxHQUNBLEdBQUF2QixFQUFBWixjQUFBb0MsRUFBQUMsRUFBQWxpSSxFQUFBM0YsS0FBQTJGLEVBQUEzRixLQUFBMkYsRUFBQTNGLEtBQUEyRixFQUFBM0YsS0FBQTJGLEVBQUEzRixHQUFBMkYsRUFBQTNGLEVBQUEsR0FBQTY5QixFQUFBMWtCLEVBQUFDLEdBQ0EsY0FHQW1vRixHQUFBb2xDLEVBQUFpQixFQUFBQyxFQUFBbGlJLEVBQUEzRixLQUFBMkYsRUFBQTNGLEtBQUEyRixFQUFBM0YsS0FBQTJGLEVBQUEzRixLQUFBMkYsRUFBQTNGLEdBQUEyRixFQUFBM0YsRUFBQSxHQUFBbVosRUFBQUMsSUFBQSxFQUdBd3VILEVBQUFqaUksRUFBQTNGLEtBQ0E2bkksRUFBQWxpSSxFQUFBM0YsS0FDQSxNQUVBLEtBQUF1bUksRUFBQWo4QixFQUNBLEdBQUFxOUIsR0FDQSxHQUFBdEIsRUFBQWIsY0FBQW9DLEVBQUFDLEVBQUFsaUksRUFBQTNGLEtBQUEyRixFQUFBM0YsS0FBQTJGLEVBQUEzRixHQUFBMkYsRUFBQTNGLEVBQUEsR0FBQTY5QixFQUFBMWtCLEVBQUFDLEdBQ0EsY0FHQW1vRixHQUFBNGxDLEVBQUFTLEVBQUFDLEVBQUFsaUksRUFBQTNGLEtBQUEyRixFQUFBM0YsS0FBQTJGLEVBQUEzRixHQUFBMkYsRUFBQTNGLEVBQUEsR0FBQW1aLEVBQUFDLElBQUEsRUFHQXd1SCxFQUFBamlJLEVBQUEzRixLQUNBNm5JLEVBQUFsaUksRUFBQTNGLEtBQ0EsTUFFQSxLQUFBdW1JLEVBQUExOUIsRUFFQSxJQUFBM3NGLEVBQUF2VyxFQUFBM0YsS0FDQW1jLEVBQUF4VyxFQUFBM0YsS0FDQStuSSxFQUFBcGlJLEVBQUEzRixLQUNBZ29JLEVBQUFyaUksRUFBQTNGLEtBQ0Fpb0ksRUFBQXRpSSxFQUFBM0YsS0FDQWtvSSxFQUFBdmlJLEVBQUEzRixLQUdBeWxJLEdBREE5L0gsRUFBQTNGLEtBQ0EsRUFBQTJGLEVBQUEzRixNQUNBeWUsRUFBQWhKLEtBQUFDLElBQUF1eUgsR0FBQUYsRUFBQTdySCxFQUNBd0MsRUFBQWpKLEtBQUFHLElBQUFxeUgsR0FBQUQsRUFBQTdySCxFQUVBbmMsRUFBQSxFQUNBdWhHLEdBQUEra0MsRUFBQXNCLEVBQUFDLEVBQUFwcEgsRUFBQUMsRUFBQXZGLEVBQUFDLElBR0Ewc0gsRUFBQXJuSCxFQUNBc25ILEVBQUFybkgsR0FJQSxJQUFBb3BCLEdBQUEzdUIsRUFBQStDLEdBQUE4ckgsRUFBQUQsRUFBQTdySCxFQUVBLEdBQUF5ckgsR0FDQSxHQUFBdDZELEVBQUFtNEQsY0FBQXRwSCxFQUFBQyxFQUFBNnJILEVBQUFDLElBQUFDLEVBQUF6QyxFQUFBNW5HLEVBQUFpSyxFQUFBMXVCLEdBQ0EsY0FHQW1vRixHQUFBaW1DLEVBQUF0ckgsRUFBQUMsRUFBQTZySCxFQUFBQyxJQUFBQyxFQUFBekMsRUFBQTM5RixFQUFBMXVCLEdBR0F3dUgsRUFBQW55SCxLQUFBQyxJQUFBdXlILEVBQUFDLEdBQUFILEVBQUE3ckgsRUFDQTJySCxFQUFBcHlILEtBQUFHLElBQUFxeUgsRUFBQUMsR0FBQUYsRUFBQTdySCxFQUNBLE1BRUEsS0FBQW9xSCxFQUFBcjlCLEVBQ0E0OEIsRUFBQThCLEVBQUFqaUksRUFBQTNGLEtBQ0ErbEksRUFBQThCLEVBQUFsaUksRUFBQTNGLEtBR0F5ZSxFQUFBcW5ILEVBRkFuZ0ksRUFBQTNGLEtBR0EwZSxFQUFBcW5ILEVBRkFwZ0ksRUFBQTNGLEtBSUEsR0FBQTJuSSxHQUNBLEdBQUExekcsRUFBQXV4RyxjQUFBTSxFQUFBQyxFQUFBdG5ILEVBQUFzbkgsRUFBQWxvRyxFQUFBMWtCLEVBQUFDLElBQUE2YSxFQUFBdXhHLGNBQUEvbUgsRUFBQXNuSCxFQUFBdG5ILEVBQUFDLEVBQUFtZixFQUFBMWtCLEVBQUFDLElBQUE2YSxFQUFBdXhHLGNBQUEvbUgsRUFBQUMsRUFBQW9uSCxFQUFBcG5ILEVBQUFtZixFQUFBMWtCLEVBQUFDLElBQUE2YSxFQUFBdXhHLGNBQUFNLEVBQUFwbkgsRUFBQW9uSCxFQUFBQyxFQUFBbG9HLEVBQUExa0IsRUFBQUMsR0FDQSxjQUlBbW9GLEdBQUEra0MsRUFBQTduSCxFQUFBc25ILEVBQUF0bkgsRUFBQUMsRUFBQXZGLEVBQUFDLEdBQ0Ftb0YsR0FBQStrQyxFQUFBUixFQUFBcG5ILEVBQUFvbkgsRUFBQUMsRUFBQTVzSCxFQUFBQyxHQUdBLE1BRUEsS0FBQW10SCxFQUFBOTdCLEVBQ0EsR0FBQWs5QixHQUNBLEdBQUExekcsRUFBQXV4RyxjQUFBb0MsRUFBQUMsRUFBQS9CLEVBQUFDLEVBQUFsb0csRUFBQTFrQixFQUFBQyxHQUNBLGNBSUFtb0YsR0FBQStrQyxFQUFBc0IsRUFBQUMsRUFBQS9CLEVBQUFDLEVBQUE1c0gsRUFBQUMsR0FPQXd1SCxFQUFBOUIsRUFDQStCLEVBQUE5QixHQVNBLE9BSkE0QixHQXBXQSxTQUFBempJLEVBQUFDLEdBQ0EsT0FBQXNSLEtBQUFpSSxJQUFBeFosRUFBQUMsR0FBQXFpSSxFQW1XQTJCLENBQUFOLEVBQUE5QixLQUNBeGtDLEdBQUEra0MsRUFBQXNCLEVBQUFDLEVBQUEvQixFQUFBQyxFQUFBNXNILEVBQUFDLElBQUEsR0FHQSxJQUFBbW9GLEVBV0EvNkYsRUFBQThxQyxRQVJBLFNBQUErZ0QsRUFBQWw1RSxFQUFBQyxHQUNBLE9BQUFzdUgsRUFBQXIxQyxFQUFBLEtBQUFsNUUsRUFBQUMsSUFRQTVTLEVBQUFnL0gsY0FMQSxTQUFBbnpDLEVBQUF4MEQsRUFBQTFrQixFQUFBQyxHQUNBLE9BQUFzdUgsRUFBQXIxQyxFQUFBeDBELEdBQUEsRUFBQTFrQixFQUFBQyxxRUN0WUEsSUFBQWt0SCxFQUFBcm9JLEVBQUEscURBRUF1b0ksRUFBQSxLQUVBLFNBQUEyQixFQUFBamtJLEVBQUFDLEdBQ0EsT0FBQXNSLEtBQUFpSSxJQUFBeFosRUFBQUMsR0FBQXFpSSxFQTJCQWhnSSxFQUFBOHFDLFFBeEJBLFNBQUFyNEIsRUFBQUUsRUFBQUMsR0FDQSxJQUFBbW9GLEVBQUEsRUFDQXhnRyxFQUFBa1ksRUFBQSxHQUVBLElBQUFsWSxFQUNBLFNBR0EsUUFBQWYsRUFBQSxFQUFpQkEsRUFBQWlaLEVBQUFoWixPQUFtQkQsSUFBQSxDQUNwQyxJQUFBMCtCLEVBQUF6bEIsRUFBQWpaLEdBQ0F1aEcsR0FBQStrQyxFQUFBdmxJLEVBQUEsR0FBQUEsRUFBQSxHQUFBMjlCLEVBQUEsR0FBQUEsRUFBQSxHQUFBdmxCLEVBQUFDLEdBQ0FyWSxFQUFBMjlCLEVBSUEsSUFBQW1nRyxFQUFBNWxILEVBQUEsR0FNQSxPQUpBa3ZILEVBQUFwbkksRUFBQSxHQUFBODlILEVBQUEsS0FBQXNKLEVBQUFwbkksRUFBQSxHQUFBODlILEVBQUEsTUFDQXQ5QixHQUFBK2tDLEVBQUF2bEksRUFBQSxHQUFBQSxFQUFBLEdBQUE4OUgsRUFBQSxHQUFBQSxFQUFBLEdBQUExbEgsRUFBQUMsSUFHQSxJQUFBbW9GLHNFQzdCQSxJQUVBNm1DLEVBRkFucUksRUFBQSw0Q0FFQW1xSSxzQkE4QkE1aEksRUFBQWcvSCxjQWZBLFNBQUFNLEVBQUFDLEVBQUF0bkgsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQWlmLEVBQUExa0IsRUFBQUMsR0FDQSxPQUFBeWtCLEVBQ0EsU0FHQSxJQUFBNm5HLEVBQUE3bkcsRUFFQSxRQUFBemtCLEVBQUEyc0gsRUFBQUwsR0FBQXRzSCxFQUFBc0YsRUFBQWduSCxHQUFBdHNILEVBQUF3RixFQUFBOG1ILEdBQUF0c0gsRUFBQTJzSCxFQUFBTCxHQUFBdHNILEVBQUFzRixFQUFBZ25ILEdBQUF0c0gsRUFBQXdGLEVBQUE4bUgsR0FBQXZzSCxFQUFBMnNILEVBQUFKLEdBQUF2c0gsRUFBQXNGLEVBQUFpbkgsR0FBQXZzSCxFQUFBd0YsRUFBQSttSCxHQUFBdnNILEVBQUEyc0gsRUFBQUosR0FBQXZzSCxFQUFBc0YsRUFBQWluSCxHQUFBdnNILEVBQUF3RixFQUFBK21ILElBSUEwQyxFQUFBdEMsRUFBQUMsRUFBQXRuSCxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBekYsRUFBQUMsRUFBQSxPQUNBc3NILEVBQUEsaUVDN0JBLElBQUF6eUYsRUFBQWgxQyxFQUFBLG1EQUVBb3FJLEVBQUFwcUksRUFBQSxzREFFQWlSLEVBQUFqUixFQUFBLDJDQUVBbTJILEVBQUFsbEgsRUFBQWtsSCxXQUNBamxILEVBQUFELEVBQUFDLE9BQ0FrbUYsRUFBQW5tRixFQUFBbW1GLFVBQ0FpekMsRUFBQXA1SCxFQUFBbzVILFVBQ0FwdkMsRUFBQWhxRixFQUFBZ3FGLEtBQ0FxdkMsS0FDQUMsRUFBQSxFQUNBQyxFQUFBLElBQ0FDLEVBQUEsZ0NBQ0FDLEVBQUEsa0JBRUExNUUsS0FhQSxTQUFBcHpDLEVBQUFwRixFQUFBcUksR0FFQSxJQUFBOVcsRUFBQXlPLEVBQUEsS0FEQXFJLEtBQUE2cEgsR0FHQSxHQUFBSixFQUFBdmdJLEdBQ0EsT0FBQXVnSSxFQUFBdmdJLEdBTUEsSUFIQSxJQUFBNGdJLEdBQUFueUgsRUFBQSxJQUFBMm9ELE1BQUEsTUFDQWpyRCxFQUFBLEVBRUFuVSxFQUFBLEVBQUF5RyxFQUFBbWlJLEVBQUEzb0ksT0FBdUNELEVBQUF5RyxFQUFPekcsSUFFOUNtVSxFQUFBc0IsS0FBQW1HLElBQUFpdEgsRUFBQUQsRUFBQTVvSSxHQUFBOGUsR0FBQTNLLFNBVUEsT0FQQXEwSCxFQUFBQyxJQUNBRCxFQUFBLEVBQ0FELE1BR0FDLElBQ0FELEVBQUF2Z0ksR0FBQW1NLEVBQ0FBLEVBMERBLFNBQUEyMEgsRUFBQTN2SCxFQUFBaEYsRUFBQWdHLEdBUUEsTUFOQSxVQUFBQSxFQUNBaEIsR0FBQWhGLEVBQ0csV0FBQWdHLElBQ0hoQixHQUFBaEYsRUFBQSxHQUdBZ0YsRUFXQSxTQUFBNHZILEVBQUEzdkgsRUFBQThELEVBQUE5QyxHQU9BLE1BTkEsV0FBQUEsRUFDQWhCLEdBQUE4RCxFQUFBLEVBQ0csV0FBQTlDLElBQ0hoQixHQUFBOEQsR0FHQTlELEVBa0lBLFNBQUFrUCxFQUFBN1IsRUFBQStrRixFQUFBMThFLEVBQUFvSixFQUFBdmxCLEdBQ0EsSUFBQTY0RixFQUNBLFNBR0EsSUFBQW90QyxHQUFBbnlILEVBQUEsSUFBQTJvRCxNQUFBLE1BQ0F6OEQsRUFBQXFtSSxFQUFBeHRDLEVBQUExOEUsRUFBQW9KLEVBQUF2bEIsR0FHQSxRQUFBM0MsRUFBQSxFQUFBZ1MsRUFBQTQySCxFQUFBM29JLE9BQXlDRCxFQUFBZ1MsRUFBU2hTLElBQ2xENG9JLEVBQUE1b0ksR0FBQWlwSSxFQUFBTCxFQUFBNW9JLEdBQUEyQyxHQUdBLE9BQUFpbUksRUFBQWprSSxLQUFBLE1BR0EsU0FBQXFrSSxFQUFBeHRDLEVBQUExOEUsRUFBQW9KLEVBQUF2bEIsSUFDQUEsRUFBQXdNLEtBQXFCeE0sSUFDckJtYyxPQUNBb0osRUFBQW10RSxFQUFBbnRFLEVBQUEsT0FDQXZsQixFQUFBdW1JLGNBQUE3ekMsRUFBQTF5RixFQUFBdW1JLGNBQUEsR0FDQSxJQUFBM2dILEVBQUE1bEIsRUFBQTRsQixRQUFBOHNFLEVBQUExeUYsRUFBQTRsQixRQUFBLEdBR0E1bEIsRUFBQXdtSSxZQUFBdHRILEVBQUEsSUFBQWlELEdBR0EsSUFBQXNxSCxFQUFBem1JLEVBQUF5bUksYUFBQXZ0SCxFQUFBLElBQUFpRCxHQUNBbmMsRUFBQTZsQixZQUFBNnNFLEVBQUExeUYsRUFBQTZsQixZQUFBLElBS0EsSUFGQSxJQUFBNmdILEVBQUE3dEMsRUFBQS9sRixLQUFBbUcsSUFBQSxFQUFBNC9FLEVBQUEsR0FFQXg3RixFQUFBLEVBQWlCQSxFQUFBdW9CLEdBQUE4Z0gsR0FBQUQsRUFBNkNwcEksSUFDOURxcEksR0FBQUQsRUFHQSxJQUFBRSxFQUFBenRILEVBQUFxTSxHQVlBLE9BVkFvaEgsRUFBQUQsSUFDQW5oSCxFQUFBLEdBQ0FvaEgsRUFBQSxHQUdBRCxFQUFBN3RDLEVBQUE4dEMsRUFDQTNtSSxFQUFBdWxCLFdBQ0F2bEIsRUFBQTJtSSxnQkFDQTNtSSxFQUFBMG1JLGVBQ0ExbUksRUFBQTY0RixpQkFDQTc0RixFQUdBLFNBQUFzbUksRUFBQU0sRUFBQTVtSSxHQUNBLElBQUE2NEYsRUFBQTc0RixFQUFBNjRGLGVBQ0ExOEUsRUFBQW5jLEVBQUFtYyxLQUNBdXFILEVBQUExbUksRUFBQTBtSSxhQUVBLElBQUE3dEMsRUFDQSxTQUdBLElBQUEzOUQsRUFBQWhpQixFQUFBMHRILEVBQUF6cUgsR0FFQSxHQUFBK2UsR0FBQTI5RCxFQUNBLE9BQUErdEMsRUFHQSxRQUFBMW1JLEVBQUEsR0FBa0JBLElBQUEsQ0FDbEIsR0FBQWc3QixHQUFBd3JHLEdBQUF4bUksR0FBQUYsRUFBQXVtSSxjQUFBLENBQ0FLLEdBQUE1bUksRUFBQXVsQixTQUNBLE1BR0EsSUFBQXNoSCxFQUFBLElBQUEzbUksRUFBQTRtSSxFQUFBRixFQUFBRixFQUFBMW1JLEVBQUF5bUksYUFBQXptSSxFQUFBd21JLGFBQUF0ckcsRUFBQSxFQUFBcG9CLEtBQUE2akMsTUFBQWl3RixFQUFBdHBJLE9BQUFvcEksRUFBQXhyRyxHQUFBLEVBRUFBLEVBQUFoaUIsRUFEQTB0SCxJQUFBNzRDLE9BQUEsRUFBQTg0QyxHQUNBMXFILEdBT0EsTUFKQSxLQUFBeXFILElBQ0FBLEVBQUE1bUksRUFBQTZsQixhQUdBK2dILEVBR0EsU0FBQUUsRUFBQWh6SCxFQUFBNHlILEVBQUFELEVBQUFELEdBSUEsSUFIQSxJQUFBaDFILEVBQUEsRUFDQW5VLEVBQUEsRUFFQWdTLEVBQUF5RSxFQUFBeFcsT0FBNkJELEVBQUFnUyxHQUFBbUMsRUFBQWsxSCxFQUFpQ3JwSSxJQUFBLENBQzlELElBQUE0NUcsRUFBQW5qRyxFQUFBOGxDLFdBQUF2OEMsR0FDQW1VLEdBQUEsR0FBQXlsRyxNQUFBLElBQUF3dkIsRUFBQUQsRUFHQSxPQUFBbnBJLEVBU0EsU0FBQTBwSSxFQUFBNXFILEdBRUEsT0FBQWpELEVBQUEsSUFBQWlELEdBVUEsU0FBQStwSCxFQUFBcHlILEVBQUFxSSxHQUNBLE9BQUFtd0MsRUFBQTQ1RSxZQUFBcHlILEVBQUFxSSxHQW1CQSxTQUFBNnFILEVBQUFsekgsRUFBQXFJLEVBQUFxTixFQUFBeTlHLEdBQ0EsTUFBQW56SCxPQUFBLElBQ0EsSUFBQW1vRyxFQUFBOHFCLEVBQUE1cUgsR0FDQXlwRCxFQUFBOXhELElBQUEyb0QsTUFBQSxTQUNBbGlELEVBQUFxckQsRUFBQXRvRSxPQUFBMitHLEVBQ0FpckIsRUFBQTNzSCxFQU1BLEdBSkFpUCxJQUNBMDlHLEdBQUExOUcsRUFBQSxHQUFBQSxFQUFBLElBR0ExVixHQUFBbXpILEVBQUEsQ0FDQSxJQUFBRSxFQUFBRixFQUFBQyxZQUNBRSxFQUFBSCxFQUFBSSxXQUVBLFNBQUFGLEdBQUFELEVBQUFDLEVBQ0FyekgsRUFBQSxHQUNBOHhELFVBQ0ssU0FBQXdoRSxFQU9MLElBTkEsSUFBQXBuSSxFQUFBcW1JLEVBQUFlLEdBQUE1OUcsSUFBQSxHQUFBQSxFQUFBLE1BQUFyTixFQUFBOHFILEVBQUExaEgsVUFDQUssUUFBQXFoSCxFQUFBcmhILFFBQ0FDLFlBQUFvaEgsRUFBQXBoSCxjQUlBeG9CLEVBQUEsRUFBQWdTLEVBQUF1MkQsRUFBQXRvRSxPQUF5Q0QsRUFBQWdTLEVBQVNoUyxJQUNsRHVvRSxFQUFBdm9FLEdBQUFpcEksRUFBQTFnRSxFQUFBdm9FLEdBQUEyQyxHQUtBLE9BQ0E0bEUsUUFDQXJyRCxTQUNBMnNILGNBQ0FqckIsY0FtQ0EsU0FBQXFyQixFQUFBeHpILEVBQUE0QyxHQUNBLElBQUE2d0gsR0FDQTNoRSxTQUNBcDBELE1BQUEsRUFDQStJLE9BQUEsR0FJQSxHQUZBLE1BQUF6RyxPQUFBLEtBRUFBLEVBQ0EsT0FBQXl6SCxFQU1BLElBSEEsSUFDQXpuSSxFQURBMG5JLEVBQUF6QixFQUFBeUIsVUFBQSxFQUdBLE9BQUExbkksRUFBQWltSSxFQUFBcG9DLEtBQUE3cEYsS0FBQSxDQUNBLElBQUEyekgsRUFBQTNuSSxFQUFBZ2hCLE1BRUEybUgsRUFBQUQsR0FDQUUsRUFBQUgsRUFBQXp6SCxFQUFBNnpILFVBQUFILEVBQUFDLElBR0FDLEVBQUFILEVBQUF6bkksRUFBQSxHQUFBQSxFQUFBLElBQ0EwbkksRUFBQXpCLEVBQUF5QixVQUdBQSxFQUFBMXpILEVBQUF4VyxRQUNBb3FJLEVBQUFILEVBQUF6ekgsRUFBQTZ6SCxVQUFBSCxFQUFBMXpILEVBQUF4VyxTQUdBLElBQUFzb0UsRUFBQTJoRSxFQUFBM2hFLE1BQ0FnaUUsRUFBQSxFQUNBbEIsRUFBQSxFQUVBN3VHLEtBQ0Fnd0csRUFBQW54SCxFQUFBbTlFLFlBQ0FvekMsRUFBQXZ3SCxFQUFBdXdILFNBQ0FhLEVBQUFiLEtBQUFJLFdBQ0FVLEVBQUFkLEtBQUFDLFlBRUFXLElBQ0EsTUFBQUMsT0FBQUQsRUFBQSxHQUFBQSxFQUFBLElBQ0EsTUFBQUUsT0FBQUYsRUFBQSxHQUFBQSxFQUFBLEtBSUEsUUFBQXhxSSxFQUFBLEVBQWlCQSxFQUFBdW9FLEVBQUF0b0UsT0FBa0JELElBQUEsQ0FLbkMsSUFKQSxJQUFBaTBCLEVBQUFzMEMsRUFBQXZvRSxHQUNBNCtHLEVBQUEsRUFDQS9nRixFQUFBLEVBRUFoN0IsRUFBQSxFQUFtQkEsRUFBQW94QixFQUFBMDJHLE9BQUExcUksT0FBd0I0QyxJQUFBLENBQzNDLElBQ0ErbkksR0FEQUMsRUFBQTUyRyxFQUFBMDJHLE9BQUE5bkksSUFDQW03RSxXQUFBM2tFLEVBQUFxOEUsS0FBQW0xQyxFQUFBN3NELGVBRUF3WSxFQUFBcTBDLEVBQUFyMEMsWUFBQW8wQyxFQUFBcDBDLFlBRUExM0UsRUFBQStySCxFQUFBL3JILEtBQUE4ckgsRUFBQTlySCxNQUFBekYsRUFBQXlGLEtBRUFnc0gsRUFBQUQsRUFBQXgwQyxXQUFBaEIsRUFFQXUxQyxFQUFBdjBDLFdBQUFxekMsRUFBQTVxSCxJQU9BLEdBTkEwM0UsSUFBQXMwQyxHQUFBdDBDLEVBQUEsR0FBQUEsRUFBQSxJQUNBcTBDLEVBQUEzdEgsT0FBQTR0SCxFQUNBRCxFQUFBanNCLFdBQUEwcEIsRUFBQXNDLEVBQUF6MEMsZUFBQTk4RSxFQUFBODhFLGVBQUEyMEMsR0FDQUQsRUFBQTF3SCxVQUFBeXdILEtBQUF6d0gsV0FBQWQsRUFBQWMsVUFDQTB3SCxFQUFBendILGtCQUFBd3dILEtBQUF4d0gsbUJBQUEsU0FFQSxNQUFBc3dILEdBQUFILEVBQUFNLEVBQUFqc0IsV0FBQThyQixFQUNBLE9BQ0FuaUUsU0FDQXAwRCxNQUFBLEVBQ0ErSSxPQUFBLEdBSUEydEgsRUFBQXowQyxVQUFBdjZFLEVBQUFndkgsRUFBQXAwSCxLQUFBcUksR0FDQSxJQUFBaXNILEVBQUFILEVBQUF4MEMsVUFDQTQwQyxFQUFBLE1BQUFELEdBQUEsU0FBQUEsRUFHQSxvQkFBQUEsR0FBQSxNQUFBQSxFQUFBdHZELE9BQUFzdkQsRUFBQTlxSSxPQUFBLEdBQ0E0cUksRUFBQUksYUFBQUYsRUFDQXZ3RyxFQUFBaDhCLEtBQUFxc0ksR0FDQUUsRUFBQSxNQUVPLENBQ1AsR0FBQUMsRUFBQSxDQUNBRCxFQUFBRixFQUFBejBDLFVBR0EsSUFBQUcsRUFBQXEwQyxFQUFBcjBDLG9CQUNBMjBDLEVBQUEzMEMsS0FBQTU1QixNQVdBdXVFLElBQ0FBLEVBQUE3QyxFQUFBOEMsZUFBQUQsR0FFQTdDLEVBQUErQyxhQUFBRixLQUNBSCxFQUFBdDFILEtBQUFtRyxJQUFBbXZILEVBQUFHLEVBQUEvMkgsTUFBQTIySCxFQUFBSSxFQUFBaHVILFVBS0EsSUFBQW11SCxFQUFBNzBDLElBQUEsR0FBQUEsRUFBQSxLQUNBdTBDLEdBQUFNLEVBQ0EsSUFBQUMsRUFBQSxNQUFBYixJQUFBNXNHLEVBQUEsS0FFQSxNQUFBeXRHLEtBQUFQLEtBQ0FDLEdBQUFNLEVBQUFELEdBQ0FSLEVBQUFwMEgsS0FBQSxHQUNBbzBILEVBQUF6MEMsVUFBQTIwQyxFQUFBLElBRUFGLEVBQUFwMEgsS0FBQTZSLEVBQUF1aUgsRUFBQXAwSCxLQUFBNjBILEVBQUFELEVBQUF2c0gsRUFBQThxSCxFQUFBMWhILFVBQ0FLLFFBQUFxaEgsRUFBQXJoSCxVQUVBc2lILEVBQUF6MEMsVUFBQXY2RSxFQUFBZ3ZILEVBQUFwMEgsS0FBQXFJLEdBQ0Fpc0gsRUFBQUYsRUFBQXowQyxVQUFBaTFDLElBS0F4dEcsR0FBQWd0RyxFQUFBMTJILE1BQUE0MkgsRUFDQUgsSUFBQWhzQixFQUFBbnBHLEtBQUFtRyxJQUFBZ2pHLEVBQUFpc0IsRUFBQWpzQixhQUdBM3FGLEVBQUE5ZixNQUFBMHBCLEVBQ0E1SixFQUFBMnFGLGFBQ0EyckIsR0FBQTNyQixFQUNBeXFCLEVBQUE1ekgsS0FBQW1HLElBQUF5dEgsRUFBQXhyRyxHQUdBcXNHLEVBQUFGLFdBQUFFLEVBQUEvMUgsTUFBQWtoRixFQUFBaDhFLEVBQUErOEUsVUFBQWl6QyxHQUNBYSxFQUFBTCxZQUFBSyxFQUFBaHRILE9BQUFtNEUsRUFBQWg4RSxFQUFBZzlFLFdBQUFrMEMsR0FFQUMsSUFDQU4sRUFBQUYsWUFBQVEsRUFBQSxHQUFBQSxFQUFBLEdBQ0FOLEVBQUFMLGFBQUFXLEVBQUEsR0FBQUEsRUFBQSxJQUdBLElBQUF4cUksRUFBQSxFQUFpQkEsRUFBQXc2QixFQUFBdjZCLE9BQXdCRCxJQUFBLENBQ3pDLElBQUE2cUksRUFDQUksR0FEQUosRUFBQXJ3RyxFQUFBeDZCLElBQ0FpckksYUFFQUosRUFBQTEySCxNQUFBNjdCLFNBQUFpN0YsRUFBQSxRQUFBNUIsRUFHQSxPQUFBYSxFQUdBLFNBQUFHLEVBQUEzakQsRUFBQTBKLEVBQUFwUyxHQUtBLElBSkEsSUFBQXV0RCxFQUFBLEtBQUFuN0MsRUFDQW83QyxFQUFBcDdDLEVBQUFoeEIsTUFBQSxNQUNBbUosRUFBQW1lLEVBQUFuZSxNQUVBdm9FLEVBQUEsRUFBaUJBLEVBQUF3ckksRUFBQXZySSxPQUFpQkQsSUFBQSxDQUNsQyxJQUFBeVcsRUFBQSswSCxFQUFBeHJJLEdBQ0E2cUksR0FDQTdzRCxZQUNBdm5FLE9BQ0FnMUgsY0FBQWgxSCxJQUFBODBILEdBR0EsR0FBQXZySSxFQWtCQXVvRSxFQUFBL3BFLE1BQ0Ftc0ksUUFBQUUsU0FuQkEsQ0FDQSxJQUFBRixHQUFBcGlFLElBQUF0b0UsT0FBQSxLQUFBc29FLEVBQUEsSUFDQW9pRSxhQUNPQSxPQVFQZSxFQUFBZixFQUFBMXFJLE9BQ0EsSUFBQXlySSxHQUFBZixFQUFBLEdBQUFjLGFBQUFkLEVBQUEsR0FBQUUsR0FFQXAwSCxJQUFBaTFILEdBQUFILElBQUFaLEVBQUFuc0ksS0FBQXFzSSxLQTlRQTU3RSxFQUFBNDVFLFlBQUEsU0FBQXB5SCxFQUFBcUksR0FDQSxJQUFBaWpGLEVBQUFxeUIsSUFFQSxPQURBcnlCLEVBQUFqakYsUUFBQTZwSCxFQUNBNW1DLEVBQUE4bUMsWUFBQXB5SCxJQThSQWpRLEVBQUFtaUksZUFDQW5pSSxFQUFBcytELFVBbHBCQSxTQUFBam1FLEVBQUFYLEdBQ0Erd0QsRUFBQXB3RCxHQUFBWCxHQWtwQkFzSSxFQUFBcVYsV0FDQXJWLEVBQUEyWSxnQkFubUJBLFNBQUExSSxFQUFBcUksRUFBQTNFLEVBQUFDLEVBQUFvOEUsRUFBQWQsRUFBQWswQyxHQUNBLE9BQUFsMEMsRUFtQkEsU0FBQWovRSxFQUFBcUksRUFBQTNFLEVBQUFDLEVBQUFvOEUsRUFBQWQsRUFBQWswQyxHQUNBLElBQUFNLEVBQUFELEVBQUF4ekgsR0FDQWkvRSxPQUNBazBDLFdBQ0E5cUgsT0FDQTNFLFlBQ0FxOEUsZ0JBRUF3ekMsRUFBQUUsRUFBQUYsV0FDQUgsRUFBQUssRUFBQUwsWUFDQTF3SCxFQUFBMnZILEVBQUEsRUFBQWtCLEVBQUE3dkgsR0FDQWYsRUFBQTJ2SCxFQUFBLEVBQUFjLEVBQUF6dkgsR0FDQSxXQUFBNjRCLEVBQUE5NUIsRUFBQUMsRUFBQTR3SCxFQUFBSCxHQS9CQThCLENBQUFsMUgsRUFBQXFJLEVBQUEzRSxFQUFBQyxFQUFBbzhFLEVBQUFkLEVBQUFrMEMsR0FHQSxTQUFBbnpILEVBQUFxSSxFQUFBM0UsRUFBQUMsRUFBQW84RSxFQUFBb3pDLEdBQ0EsSUFBQU0sRUFBQVAsRUFBQWx6SCxFQUFBcUksRUFBQTAzRSxFQUFBb3pDLEdBQ0FJLEVBQUFudUgsRUFBQXBGLEVBQUFxSSxHQUVBMDNFLElBQ0F3ekMsR0FBQXh6QyxFQUFBLEdBQUFBLEVBQUEsSUFHQSxJQUFBcXpDLEVBQUFLLEVBQUFMLFlBQ0Exd0gsRUFBQTJ2SCxFQUFBLEVBQUFrQixFQUFBN3ZILEdBQ0FmLEVBQUEydkgsRUFBQSxFQUFBYyxFQUFBenZILEdBQ0FzZixFQUFBLElBQUF1WixFQUFBOTVCLEVBQUFDLEVBQUE0d0gsRUFBQUgsR0FFQSxPQURBbndHLEVBQUFrbEYsV0FBQXNyQixFQUFBdHJCLFdBQ0FsbEYsRUFoQkFreUcsQ0FBQW4xSCxFQUFBcUksRUFBQTNFLEVBQUFDLEVBQUFvOEUsRUFBQW96QyxJQW1tQkFwakksRUFBQXNpSSxjQUNBdGlJLEVBQUF1aUksY0FDQXZpSSxFQUFBcWxJLHlCQXRoQkEsU0FBQXBrSCxFQUFBaVMsRUFBQW95RyxHQUNBLElBQUEzeUgsRUFBQXVnQixFQUFBdmdCLEVBQ0FDLEVBQUFzZ0IsRUFBQXRnQixFQUNBOEQsRUFBQXdjLEVBQUF4YyxPQUNBL0ksRUFBQXVsQixFQUFBdmxCLE1BQ0E0M0gsRUFBQTd1SCxFQUFBLEVBQ0EvQyxFQUFBLE9BQ0FDLEVBQUEsTUFFQSxPQUFBcU4sR0FDQSxXQUNBdE8sR0FBQTJ5SCxFQUNBMXlILEdBQUEyeUgsRUFDQTV4SCxFQUFBLFFBQ0FDLEVBQUEsU0FDQSxNQUVBLFlBQ0FqQixHQUFBMnlILEVBQUEzM0gsRUFDQWlGLEdBQUEyeUgsRUFDQTN4SCxFQUFBLFNBQ0EsTUFFQSxVQUNBakIsR0FBQWhGLEVBQUEsRUFDQWlGLEdBQUEweUgsRUFDQTN4SCxFQUFBLFNBQ0FDLEVBQUEsU0FDQSxNQUVBLGFBQ0FqQixHQUFBaEYsRUFBQSxFQUNBaUYsR0FBQThELEVBQUE0dUgsRUFDQTN4SCxFQUFBLFNBQ0EsTUFFQSxhQUNBaEIsR0FBQWhGLEVBQUEsRUFDQWlGLEdBQUEyeUgsRUFDQTV4SCxFQUFBLFNBQ0FDLEVBQUEsU0FDQSxNQUVBLGlCQUNBakIsR0FBQTJ5SCxFQUNBMXlILEdBQUEyeUgsRUFDQTN4SCxFQUFBLFNBQ0EsTUFFQSxrQkFDQWpCLEdBQUFoRixFQUFBMjNILEVBQ0ExeUgsR0FBQTJ5SCxFQUNBNXhILEVBQUEsUUFDQUMsRUFBQSxTQUNBLE1BRUEsZ0JBQ0FqQixHQUFBaEYsRUFBQSxFQUNBaUYsR0FBQTB5SCxFQUNBM3hILEVBQUEsU0FDQSxNQUVBLG1CQUNBaEIsR0FBQWhGLEVBQUEsRUFDQWlGLEdBQUE4RCxFQUFBNHVILEVBQ0EzeEgsRUFBQSxTQUNBQyxFQUFBLFNBQ0EsTUFFQSxvQkFDQWpCLEdBQUEyeUgsRUFDQTF5SCxHQUFBMHlILEVBQ0EsTUFFQSxxQkFDQTN5SCxHQUFBaEYsRUFBQTIzSCxFQUNBMXlILEdBQUEweUgsRUFDQTN4SCxFQUFBLFFBQ0EsTUFFQSx1QkFDQWhCLEdBQUEyeUgsRUFDQTF5SCxHQUFBOEQsRUFBQTR1SCxFQUNBMXhILEVBQUEsU0FDQSxNQUVBLHdCQUNBakIsR0FBQWhGLEVBQUEyM0gsRUFDQTF5SCxHQUFBOEQsRUFBQTR1SCxFQUNBM3hILEVBQUEsUUFDQUMsRUFBQSxTQUlBLE9BQ0FqQixJQUNBQyxJQUNBZSxZQUNBQyxzQkFxYkE1VCxFQUFBOGhCLGVBQ0E5aEIsRUFBQWtqSSxnQkFDQWxqSSxFQUFBcWlJLGNBQ0FyaUksRUFBQW1qSSxpQkFDQW5qSSxFQUFBeWpJLGdCQUNBempJLEVBQUF3bEksU0FwQkEsU0FBQTN5SCxHQUdBLElBQUF5RixHQUFBekYsRUFBQXNzQixVQUFBdHNCLEVBQUE2Z0UsY0FBQTdnRSxFQUFBOGdFLFVBQUE5Z0UsRUFBQXVzQixZQUFBdnNCLEVBQUFzc0IsVUFBQSxTQUNBdHNCLEVBQUE2Z0UsWUFBQSxjQUFBdjFFLEtBQUEsS0FDQSxPQUFBbWEsR0FBQW82RSxFQUFBcDZFLElBQUF6RixFQUFBMk8sVUFBQTNPLEVBQUF5RixrRUNqcUJBLElBQUFhLEVBQUEsRUFBQWxLLEtBQUE0RyxHQVlBN1YsRUFBQSsrSCxnQkFWQSxTQUFBNWtILEdBT0EsT0FOQUEsR0FBQWhCLEdBRUEsSUFDQWdCLEdBQUFoQixHQUdBZ0Isc0VDYUE3ZCxFQUFBMEQsUUF0QkEsU0FBQXMvSCxFQUFBQyxFQUFBdG5ILEVBQUFDLEVBQUF2RixFQUFBQyxHQUNBLEdBQUFBLEVBQUEyc0gsR0FBQTNzSCxFQUFBc0YsR0FBQXRGLEVBQUEyc0gsR0FBQTNzSCxFQUFBc0YsRUFDQSxTQUlBLEdBQUFBLElBQUFxbkgsRUFDQSxTQUdBLElBQUFucEgsRUFBQThCLEVBQUFxbkgsRUFBQSxLQUNBbm1JLEdBQUF3WixFQUFBMnNILElBQUFybkgsRUFBQXFuSCxHQUVBLElBQUFubUksR0FBQSxJQUFBQSxJQUNBZ2QsRUFBQThCLEVBQUFxbkgsRUFBQSxRQUdBLElBQUEwQixFQUFBN25JLEdBQUE2ZSxFQUFBcW5ILEtBRUEsT0FBQTJCLElBQUF0dUgsRUFBQW83QixJQUFBa3pGLEVBQUF0dUgsRUFBQXlELEVBQUEsb0VDbkJBLElBQUE5UyxFQUFBN0wsRUFBQSwyQ0FFQXN4SCxFQUFBdHhILEVBQUEseUNBRUFnMUMsRUFBQWgxQyxFQUFBLG1EQTJCQWtZLEVBQUEsU0FBQTZnRCxHQUlBLFFBQUFodkQsS0FIQWd2RCxRQUNBdTRELEVBQUF0eUgsS0FBQXlMLEtBQUFzdUQsR0FFQUEsRUFDQUEsRUFBQWg2RCxlQUFBZ0wsS0FDQVUsS0FBQVYsR0FBQWd2RCxFQUFBaHZELElBSUFVLEtBQUE4ekgsYUFDQTl6SCxLQUFBZzBILFVBQUEsS0FDQWgwSCxLQUFBa3JILFNBQUEsR0FHQXo5RyxFQUFBcFosV0FDQW1OLFlBQUFpTSxFQUNBNHFELFNBQUEsRUFLQXI5RCxLQUFBLFFBUUFzZSxRQUFBLEVBS0F2akIsU0FBQSxXQUNBLE9BQUFpSyxLQUFBOHpILFVBQUFyNUgsU0FRQWtVLFFBQUEsU0FBQW5TLEdBQ0EsT0FBQXdELEtBQUE4ekgsVUFBQXQzSCxJQVFBK21JLFlBQUEsU0FBQXB0SSxHQUdBLElBRkEsSUFBQUosRUFBQWlLLEtBQUE4ekgsVUFFQXg4SCxFQUFBLEVBQW1CQSxFQUFBdkIsRUFBQXdCLE9BQXFCRCxJQUN4QyxHQUFBdkIsRUFBQXVCLEdBQUFuQixTQUNBLE9BQUFKLEVBQUF1QixJQVFBa2xHLFdBQUEsV0FDQSxPQUFBeDhGLEtBQUE4ekgsVUFBQXY4SCxRQU9BK1csSUFBQSxTQUFBbFIsR0FPQSxPQU5BQSxPQUFBNEMsTUFBQTVDLEVBQUFqQyxTQUFBNkUsT0FDQUEsS0FBQTh6SCxVQUFBaCtILEtBQUFzSCxHQUVBNEMsS0FBQXdqSSxPQUFBcG1JLElBR0E0QyxNQVFBeWpJLFVBQUEsU0FBQXJtSSxFQUFBc21HLEdBQ0EsR0FBQXRtRyxPQUFBNEMsTUFBQTVDLEVBQUFqQyxTQUFBNkUsTUFBQTBqRyxLQUFBdm9HLFNBQUE2RSxLQUFBLENBQ0EsSUFBQWpLLEVBQUFpSyxLQUFBOHpILFVBQ0F0M0gsRUFBQXpHLEVBQUFGLFFBQUE2dEcsR0FFQWxuRyxHQUFBLElBQ0F6RyxFQUFBc0gsT0FBQWIsRUFBQSxFQUFBWSxHQUVBNEMsS0FBQXdqSSxPQUFBcG1JLElBSUEsT0FBQTRDLE1BRUF3akksT0FBQSxTQUFBcG1JLEdBQ0FBLEVBQUFqQyxRQUNBaUMsRUFBQWpDLE9BQUE2WCxPQUFBNVYsR0FHQUEsRUFBQWpDLE9BQUE2RSxLQUNBLElBQUFvOEIsRUFBQXA4QixLQUFBZzBILFVBQ0E1ckcsRUFBQXBvQixLQUFBOHFGLEtBRUExdUQsT0FBQWgvQixFQUFBNDJILFlBQ0E1M0YsRUFBQTgzRixhQUFBOTJILEdBRUFBLGFBQUFxUSxHQUNBclEsRUFBQTYySCxxQkFBQTczRixJQUlBaFUsS0FBQTYrRixXQU9BajBHLE9BQUEsU0FBQTVWLEdBQ0EsSUFBQWdyQixFQUFBcG9CLEtBQUE4cUYsS0FDQTF1RCxFQUFBcDhCLEtBQUFnMEgsVUFDQWorSCxFQUFBaUssS0FBQTh6SCxVQUNBdDNILEVBQUE0RSxFQUFBdkwsUUFBQUUsRUFBQXFILEdBRUEsT0FBQVosRUFBQSxFQUNBd0QsTUFHQWpLLEVBQUFzSCxPQUFBYixFQUFBLEdBQ0FZLEVBQUFqQyxPQUFBLEtBRUFpaEMsSUFDQUEsRUFBQWk0RixlQUFBajNILEdBRUFBLGFBQUFxUSxHQUNBclEsRUFBQWczSCx1QkFBQWg0RixJQUlBaFUsS0FBQTYrRixVQUNBam5ILE9BTUEwNkIsVUFBQSxXQUNBLElBRUF0OUIsRUFDQTlGLEVBSEF2QixFQUFBaUssS0FBQTh6SCxVQUNBMTNGLEVBQUFwOEIsS0FBQWcwSCxVQUlBLElBQUExOEgsRUFBQSxFQUFlQSxFQUFBdkIsRUFBQXdCLE9BQXFCRCxJQUNwQzhGLEVBQUFySCxFQUFBdUIsR0FFQThrQyxJQUNBQSxFQUFBaTRGLGVBQUFqM0gsR0FFQUEsYUFBQXFRLEdBQ0FyUSxFQUFBZzNILHVCQUFBaDRGLElBSUFoL0IsRUFBQWpDLE9BQUEsS0FJQSxPQURBcEYsRUFBQXdCLE9BQUEsRUFDQXlJLE1BUUE0UyxVQUFBLFNBQUExWSxFQUFBaTdDLEdBR0EsSUFGQSxJQUFBcC9DLEVBQUFpSyxLQUFBOHpILFVBRUF4OEgsRUFBQSxFQUFtQkEsRUFBQXZCLEVBQUF3QixPQUFxQkQsSUFBQSxDQUN4QyxJQUFBOEYsRUFBQXJILEVBQUF1QixHQUNBNEMsRUFBQTNGLEtBQUE0Z0QsRUFBQS8zQyxFQUFBOUYsR0FHQSxPQUFBMEksTUFRQStsQixTQUFBLFNBQUE3ckIsRUFBQWk3QyxHQUNBLFFBQUE3OUMsRUFBQSxFQUFtQkEsRUFBQTBJLEtBQUE4ekgsVUFBQXY4SCxPQUEyQkQsSUFBQSxDQUM5QyxJQUFBOEYsRUFBQTRDLEtBQUE4ekgsVUFBQXg4SCxHQUNBNEMsRUFBQTNGLEtBQUE0Z0QsRUFBQS8zQyxHQUVBLFVBQUFBLEVBQUFwQyxNQUNBb0MsRUFBQTJvQixTQUFBN3JCLEVBQUFpN0MsR0FJQSxPQUFBbjFDLE1BRUFpMEgscUJBQUEsU0FBQTczRixHQUNBLFFBQUE5a0MsRUFBQSxFQUFtQkEsRUFBQTBJLEtBQUE4ekgsVUFBQXY4SCxPQUEyQkQsSUFBQSxDQUM5QyxJQUFBOEYsRUFBQTRDLEtBQUE4ekgsVUFBQXg4SCxHQUNBOGtDLEVBQUE4M0YsYUFBQTkySCxHQUVBQSxhQUFBcVEsR0FDQXJRLEVBQUE2MkgscUJBQUE3M0YsS0FJQWc0Rix1QkFBQSxTQUFBaDRGLEdBQ0EsUUFBQTlrQyxFQUFBLEVBQW1CQSxFQUFBMEksS0FBQTh6SCxVQUFBdjhILE9BQTJCRCxJQUFBLENBQzlDLElBQUE4RixFQUFBNEMsS0FBQTh6SCxVQUFBeDhILEdBQ0E4a0MsRUFBQWk0RixlQUFBajNILEdBRUFBLGFBQUFxUSxHQUNBclEsRUFBQWczSCx1QkFBQWg0RixLQUlBNjdCLE1BQUEsV0FHQSxPQUZBajRELEtBQUFrckgsU0FBQSxFQUNBbHJILEtBQUE4cUYsTUFBQTlxRixLQUFBOHFGLEtBQUFtOEIsVUFDQWpuSCxNQU1BeVcsZ0JBQUEsU0FBQWl0SCxHQU9BLElBTEEsSUFBQTF5RyxFQUFBLEtBQ0EwN0YsRUFBQSxJQUFBbmlGLEVBQUEsU0FDQXgwQyxFQUFBMnRJLEdBQUExakksS0FBQTh6SCxVQUNBNlAsS0FFQXJzSSxFQUFBLEVBQW1CQSxFQUFBdkIsRUFBQXdCLE9BQXFCRCxJQUFBLENBQ3hDLElBQUE4RixFQUFBckgsRUFBQXVCLEdBRUEsSUFBQThGLEVBQUE4USxTQUFBOVEsRUFBQTIrQixVQUFBLENBSUEsSUFBQTZuRyxFQUFBeG1JLEVBQUFxWixrQkFDQWlELEVBQUF0YyxFQUFBNGpCLGtCQUFBMmlILEdBUUFqcUgsR0FDQWd6RyxFQUFBcDVFLEtBQUFzd0YsR0FDQWxYLEVBQUE5ekcsZUFBQWMsSUFDQXNYLEtBQUEwN0YsRUFBQS9yRyxTQUNBMnRCLE1BQUFvK0UsS0FFQTE3RixLQUFBNHlHLEVBQUFqakgsU0FDQTJ0QixNQUFBczFGLElBSUEsT0FBQTV5RyxHQUFBMDdGLElBR0F0ckgsRUFBQTRRLFNBQUF2RSxFQUFBbzVHLEdBQ0EsSUFBQTNrSCxFQUFBdUwsRUFDQXJULEVBQUEwRCxRQUFBb0UscUVDdlRBLElBQUFrd0MsRUFBQTc4QyxFQUFBLDZDQUVBMmtCLEVBQUEza0IsRUFBQSw2Q0FLQW9qQixFQUFBeTVCLEVBQUF4NUIsZUFDQXc2QyxFQUFBcm1ELEtBQUFzSyxJQUNBZzhDLEVBQUF0bUQsS0FBQW1HLElBS0EsU0FBQXEzQixFQUFBOTVCLEVBQUFDLEVBQUFqRixFQUFBK0ksR0FDQS9JLEVBQUEsSUFDQWdGLEdBQUFoRixFQUNBQSxNQUdBK0ksRUFBQSxJQUNBOUQsR0FBQThELEVBQ0FBLE1BT0F4VSxLQUFBeVEsSUFLQXpRLEtBQUEwUSxJQUtBMVEsS0FBQXlMLFFBS0F6TCxLQUFBd1UsU0FHQSsxQixFQUFBbDJDLFdBQ0FtTixZQUFBK29DLEVBS0ErRCxNQUFBLFNBQUE4cUMsR0FDQSxJQUFBM29FLEVBQUEyaUQsRUFBQWdtQixFQUFBM29FLEVBQUF6USxLQUFBeVEsR0FDQUMsRUFBQTBpRCxFQUFBZ21CLEVBQUExb0UsRUFBQTFRLEtBQUEwUSxHQUNBMVEsS0FBQXlMLE1BQUE0bkQsRUFBQStsQixFQUFBM29FLEVBQUEyb0UsRUFBQTN0RSxNQUFBekwsS0FBQXlRLEVBQUF6USxLQUFBeUwsT0FBQWdGLEVBQ0F6USxLQUFBd1UsT0FBQTYrQyxFQUFBK2xCLEVBQUExb0UsRUFBQTBvRSxFQUFBNWtFLE9BQUF4VSxLQUFBMFEsRUFBQTFRLEtBQUF3VSxRQUFBOUQsRUFDQTFRLEtBQUF5USxJQUNBelEsS0FBQTBRLEtBT0FrSSxlQUFBLFdBQ0EsSUFBQWd2RixLQUNBaThCLEtBQ0FDLEtBQ0F6c0IsS0FDQSxnQkFBQXo0RyxHQUlBLEdBQUFBLEVBQUEsQ0FJQWdwRyxFQUFBLEdBQUFrOEIsRUFBQSxHQUFBOWpJLEtBQUF5USxFQUNBbTNGLEVBQUEsR0FBQXlQLEVBQUEsR0FBQXIzRyxLQUFBMFEsRUFDQW16SCxFQUFBLEdBQUF4c0IsRUFBQSxHQUFBcjNHLEtBQUF5USxFQUFBelEsS0FBQXlMLE1BQ0FvNEgsRUFBQSxHQUFBQyxFQUFBLEdBQUE5akksS0FBQTBRLEVBQUExUSxLQUFBd1UsT0FDQW1FLEVBQUFpdkYsSUFBQWhwRyxHQUNBK1osRUFBQWtySCxJQUFBamxJLEdBQ0ErWixFQUFBbXJILElBQUFsbEksR0FDQStaLEVBQUEwK0YsSUFBQXo0RyxHQUNBb0IsS0FBQXlRLEVBQUEyaUQsRUFBQXcwQyxFQUFBLEdBQUFpOEIsRUFBQSxHQUFBQyxFQUFBLEdBQUF6c0IsRUFBQSxJQUNBcjNHLEtBQUEwUSxFQUFBMGlELEVBQUF3MEMsRUFBQSxHQUFBaThCLEVBQUEsR0FBQUMsRUFBQSxHQUFBenNCLEVBQUEsSUFDQSxJQUFBMHNCLEVBQUExd0UsRUFBQXUwQyxFQUFBLEdBQUFpOEIsRUFBQSxHQUFBQyxFQUFBLEdBQUF6c0IsRUFBQSxJQUNBMnNCLEVBQUEzd0UsRUFBQXUwQyxFQUFBLEdBQUFpOEIsRUFBQSxHQUFBQyxFQUFBLEdBQUF6c0IsRUFBQSxJQUNBcjNHLEtBQUF5TCxNQUFBczRILEVBQUEvakksS0FBQXlRLEVBQ0F6USxLQUFBd1UsT0FBQXd2SCxFQUFBaGtJLEtBQUEwUSxJQTFCQSxHQW1DQTJpQyxtQkFBQSxTQUFBNTNDLEdBQ0EsSUFBQUQsRUFBQXdFLEtBQ0Fpa0ksRUFBQXhvSSxFQUFBZ1EsTUFBQWpRLEVBQUFpUSxNQUNBeTRILEVBQUF6b0ksRUFBQStZLE9BQUFoWixFQUFBZ1osT0FDQTVWLEVBQUFzYixFQUFBN2EsU0FLQSxPQUhBNmEsRUFBQXliLFVBQUEvMkIsTUFBQXBELEVBQUFpVixHQUFBalYsRUFBQWtWLElBQ0F3SixFQUFBbUIsTUFBQXpjLEtBQUFxbEksRUFBQUMsSUFDQWhxSCxFQUFBeWIsVUFBQS8yQixLQUFBbkQsRUFBQWdWLEVBQUFoVixFQUFBaVYsSUFDQTlSLEdBT0FxaUIsVUFBQSxTQUFBeGxCLEdBQ0EsSUFBQUEsRUFDQSxTQUdBQSxhQUFBOHVDLElBRUE5dUMsRUFBQTh1QyxFQUFBbHJDLE9BQUE1RCxJQUdBLElBQUFELEVBQUF3RSxLQUNBbWtJLEVBQUEzb0ksRUFBQWlWLEVBQ0EyekgsRUFBQTVvSSxFQUFBaVYsRUFBQWpWLEVBQUFpUSxNQUNBNDRILEVBQUE3b0ksRUFBQWtWLEVBQ0E0ekgsRUFBQTlvSSxFQUFBa1YsRUFBQWxWLEVBQUFnWixPQUNBK3ZILEVBQUE5b0ksRUFBQWdWLEVBQ0ErekgsRUFBQS9vSSxFQUFBZ1YsRUFBQWhWLEVBQUFnUSxNQUNBZzVILEVBQUFocEksRUFBQWlWLEVBQ0FnMEgsRUFBQWpwSSxFQUFBaVYsRUFBQWpWLEVBQUErWSxPQUNBLFFBQUE0dkgsRUFBQUcsR0FBQUMsRUFBQUwsR0FBQUcsRUFBQUcsR0FBQUMsRUFBQUwsSUFFQXo3RixRQUFBLFNBQUFuNEIsRUFBQUMsR0FFQSxPQUFBRCxHQURBelEsS0FDQXlRLE1BREF6USxLQUNBeVEsRUFEQXpRLEtBQ0F5TCxPQUFBaUYsR0FEQTFRLEtBQ0EwUSxNQURBMVEsS0FDQTBRLEVBREExUSxLQUNBd1UsUUFNQW1NLE1BQUEsV0FDQSxXQUFBNHBCLEVBQUF2cUMsS0FBQXlRLEVBQUF6USxLQUFBMFEsRUFBQTFRLEtBQUF5TCxNQUFBekwsS0FBQXdVLFNBTUE4K0IsS0FBQSxTQUFBOGxDLEdBQ0FwNUUsS0FBQXlRLEVBQUEyb0UsRUFBQTNvRSxFQUNBelEsS0FBQTBRLEVBQUEwb0UsRUFBQTFvRSxFQUNBMVEsS0FBQXlMLE1BQUEydEUsRUFBQTN0RSxNQUNBekwsS0FBQXdVLE9BQUE0a0UsRUFBQTVrRSxRQUVBbTRCLE1BQUEsV0FDQSxPQUNBbDhCLEVBQUF6USxLQUFBeVEsRUFDQUMsRUFBQTFRLEtBQUEwUSxFQUNBakYsTUFBQXpMLEtBQUF5TCxNQUNBK0ksT0FBQXhVLEtBQUF3VSxVQWFBKzFCLEVBQUFsckMsT0FBQSxTQUFBMnhCLEdBQ0EsV0FBQXVaLEVBQUF2WixFQUFBdmdCLEVBQUF1Z0IsRUFBQXRnQixFQUFBc2dCLEVBQUF2bEIsTUFBQXVsQixFQUFBeGMsU0FHQSxJQUFBdFMsRUFBQXFvQyxFQUNBbndDLEVBQUEwRCxRQUFBb0UsbUVDdExBLElBQUE4N0IsRUFBQXpvQyxFQUFBLDRDQUtBb3ZJLEVBQUEsV0FLQTNrSSxLQUFBNGtJLFdBa0RBLFNBQUFodUgsRUFBQWl1SCxHQUNBLElBQUEvM0gsRUFBQSszSCxFQUFBLE1BQUFBLEVBQUEsTUFDQTUzSCxFQUFBNDNILEVBQUEsTUFBQUEsRUFBQSxNQUNBLE9BQUE5M0gsS0FBQWdILEtBQUFqSCxJQUFBRyxLQWxEQTAzSCxFQUFBdHdJLFdBQ0FtTixZQUFBbWpJLEVBQ0FHLFVBQUEsU0FBQXA5SCxFQUFBNnZCLEVBQUFzdkUsR0FHQSxPQUZBN21HLEtBQUEra0ksU0FBQXI5SCxFQUFBNnZCLEVBQUFzdkUsR0FFQTdtRyxLQUFBZ2xJLFdBQUF0OUgsSUFFQXFmLE1BQUEsV0FFQSxPQURBL21CLEtBQUE0a0ksT0FBQXJ0SSxPQUFBLEVBQ0F5SSxNQUVBK2tJLFNBQUEsU0FBQXI5SCxFQUFBNnZCLEVBQUFzdkUsR0FDQSxJQUFBZ0wsRUFBQW5xRyxFQUFBbXFHLFFBRUEsR0FBQUEsRUFBQSxDQVdBLElBUEEsSUFBQW96QixHQUNBMTBILFVBQ0FzaEcsV0FDQXQ2RSxTQUNBN3ZCLFNBR0FwUSxFQUFBLEVBQUFnUyxFQUFBdW9HLEVBQUF0NkcsT0FBeUNELEVBQUFnUyxFQUFTaFMsSUFBQSxDQUNsRCxJQUFBNHRJLEVBQUFyekIsRUFBQXY2RyxHQUNBMmpCLEVBQUEraUIsRUFBQW1uRyxjQUFBdCtCLEVBQUFxK0IsTUFDQUQsRUFBQTEwSCxPQUFBemEsTUFBQW1sQixFQUFBa3RHLElBQUFsdEcsRUFBQW10RyxNQUNBNmMsRUFBQXB6QixRQUFBLzdHLEtBQUFvdkksR0FHQWxsSSxLQUFBNGtJLE9BQUE5dUksS0FBQW12SSxLQUVBRCxXQUFBLFNBQUF0OUgsR0FDQSxRQUFBc21ELEtBQUFvM0UsRUFDQSxHQUFBQSxFQUFBOXdJLGVBQUEwNUQsR0FBQSxDQUNBLElBQUFxM0UsRUFBQUQsRUFBQXAzRSxHQUFBaHVELEtBQUE0a0ksT0FBQWw5SCxHQUVBLEdBQUEyOUgsRUFDQSxPQUFBQSxLQWlCQSxJQUFBRCxHQUNBRSxNQUFBLFNBQUFDLEVBQUE3OUgsR0FDQSxJQUFBa3dILEVBQUEyTixFQUFBaHVJLE9BRUEsR0FBQXFnSSxFQUFBLENBSUEsSUFBQTROLEdBQUFELEVBQUEzTixFQUFBLFFBQTZDcm5ILE9BQzdDazFILEdBQUFGLEVBQUEzTixFQUFBLFFBQTZDcm5ILFFBQUFpMUgsRUFFN0MsR0FBQUMsS0FBQWx1SSxPQUFBLEdBQUFpdUksS0FBQWp1SSxPQUFBLEdBQ0EsSUFBQWt5SCxFQUFBN3lHLEVBQUE0dUgsR0FBQTV1SCxFQUFBNnVILElBQ0FwbUgsU0FBQW9xRyxPQUFBLEdBQ0EvaEgsRUFBQStoSCxhQUNBLElBQUFpYyxFQW5CQSxTQUFBYixHQUNBLFFBQUFBLEVBQUEsTUFBQUEsRUFBQSxVQUFBQSxFQUFBLE1BQUFBLEVBQUEsVUFrQkFuNkgsQ0FBQTg2SCxHQUdBLE9BRkE5OUgsRUFBQTZoSCxPQUFBbWMsRUFBQSxHQUNBaCtILEVBQUE4aEgsT0FBQWtjLEVBQUEsSUFFQTFxSSxLQUFBLFFBQ0F1OEIsT0FBQWd1RyxFQUFBLEdBQUFodUcsT0FDQTd2QixhQU1BeEYsRUFBQXlpSSxFQUNBdnFJLEVBQUEwRCxRQUFBb0UsMERDM0ZBLElBQUF5akksRUFBQSxXQUlBM2xJLEtBQUE1RyxLQUFBLEtBS0E0RyxLQUFBaS9FLEtBQUEsS0FDQWovRSxLQUFBNGxJLEtBQUEsR0FHQUMsRUFBQUYsRUFBQXR4SSxVQU9Bd3hJLEVBQUFDLE9BQUEsU0FBQTMyRyxHQUNBLElBQUE0MkcsRUFBQSxJQUFBQyxFQUFBNzJHLEdBRUEsT0FEQW52QixLQUFBaW1JLFlBQUFGLEdBQ0FBLEdBUUFGLEVBQUFJLFlBQUEsU0FBQUYsR0FDQS9sSSxLQUFBNUcsTUFHQTRHLEtBQUFpL0UsS0FBQXgrRCxLQUFBc2xILEVBQ0FBLEVBQUF2OEIsS0FBQXhwRyxLQUFBaS9FLEtBQ0E4bUQsRUFBQXRsSCxLQUFBLEtBQ0F6Z0IsS0FBQWkvRSxLQUFBOG1ELEdBTEEvbEksS0FBQTVHLEtBQUE0RyxLQUFBaS9FLEtBQUE4bUQsRUFRQS9sSSxLQUFBNGxJLFFBUUFDLEVBQUE3eUgsT0FBQSxTQUFBK3lILEdBQ0EsSUFBQXY4QixFQUFBdThCLEVBQUF2OEIsS0FDQS9vRixFQUFBc2xILEVBQUF0bEgsS0FFQStvRixFQUNBQSxFQUFBL29GLE9BR0F6Z0IsS0FBQTVHLEtBQUFxbkIsRUFHQUEsRUFDQUEsRUFBQStvRixPQUdBeHBHLEtBQUFpL0UsS0FBQXVxQixFQUdBdThCLEVBQUF0bEgsS0FBQXNsSCxFQUFBdjhCLEtBQUEsS0FDQXhwRyxLQUFBNGxJLFFBT0FDLEVBQUF2OEgsSUFBQSxXQUNBLE9BQUF0SixLQUFBNGxJLE1BT0FDLEVBQUE5K0csTUFBQSxXQUNBL21CLEtBQUE1RyxLQUFBNEcsS0FBQWkvRSxLQUFBLEtBQ0FqL0UsS0FBQTRsSSxLQUFBLEdBUUEsSUFBQUksRUFBQSxTQUFBNzJHLEdBSUFudkIsS0FBQXhKLE1BQUEyNEIsRUFLQW52QixLQUFBeWdCLEtBS0F6Z0IsS0FBQXdwRyxNQVNBMDhCLEVBQUEsU0FBQTVyRyxHQUNBdDZCLEtBQUFtbUksTUFBQSxJQUFBUixFQUNBM2xJLEtBQUEwaUQsUUFDQTFpRCxLQUFBb21JLFNBQUE5ckcsR0FBQSxHQUNBdDZCLEtBQUFxbUksa0JBQUEsTUFHQUMsRUFBQUosRUFBQTd4SSxVQU9BaXlJLEVBQUFDLElBQUEsU0FBQWpuSSxFQUFBOUksR0FDQSxJQUFBc0osRUFBQUUsS0FBQW1tSSxNQUNBenJJLEVBQUFzRixLQUFBMGlELEtBQ0E4akYsRUFBQSxLQUVBLFNBQUE5ckksRUFBQTRFLEdBQUEsQ0FDQSxJQUFBZ0ssRUFBQXhKLEVBQUF3SixNQUVBeThILEVBQUEvbEksS0FBQXFtSSxrQkFFQSxHQUFBLzhILEdBQUF0SixLQUFBb21JLFVBQUE5OEgsRUFBQSxHQUVBLElBQUFtOUgsRUFBQTNtSSxFQUFBMUcsS0FDQTBHLEVBQUFrVCxPQUFBeXpILFVBQ0EvckksRUFBQStySSxFQUFBbm5JLEtBQ0FrbkksRUFBQUMsRUFBQWp3SSxNQUNBd0osS0FBQXFtSSxrQkFBQUksRUFHQVYsRUFDQUEsRUFBQXZ2SSxRQUVBdXZJLEVBQUEsSUFBQUMsRUFBQXh2SSxHQUdBdXZJLEVBQUF6bUksTUFDQVEsRUFBQW1tSSxZQUFBRixHQUNBcnJJLEVBQUE0RSxHQUFBeW1JLEVBR0EsT0FBQVMsR0FRQUYsRUFBQWh3SSxJQUFBLFNBQUFnSixHQUNBLElBQUF5bUksRUFBQS9sSSxLQUFBMGlELEtBQUFwakQsR0FDQVEsRUFBQUUsS0FBQW1tSSxNQUVBLFNBQUFKLEVBT0EsT0FMQUEsSUFBQWptSSxFQUFBbS9FLE9BQ0FuL0UsRUFBQWtULE9BQUEreUgsR0FDQWptSSxFQUFBbW1JLFlBQUFGLElBR0FBLEVBQUF2dkksT0FRQTh2SSxFQUFBdi9HLE1BQUEsV0FDQS9tQixLQUFBbW1JLE1BQUFwL0csUUFFQS9tQixLQUFBMGlELFNBR0EsSUFBQXhnRCxFQUFBZ2tJLEVBQ0E5ckksRUFBQTBELFFBQUFvRSxrRUN6TUEsSUFBQWk3SCxFQUFBNW5JLEVBQUEsNENBRUE2OEMsRUFBQTc4QyxFQUFBLDZDQUVBNDhDLEVBQUE1OEMsRUFBQSwyQ0FFQWcxQyxFQUFBaDFDLEVBQUEsbURBSUE2OEQsRUFGQTc4RCxFQUFBLHdDQUVBbTVELGlCQVVBbXZFLEdBQ0FuMUMsRUFBQSxFQUNBMFgsRUFBQSxFQUNBdEIsRUFBQSxFQUNBOEMsRUFBQSxFQUNBekIsRUFBQSxFQUNBNEIsRUFBQSxFQUVBdkIsRUFBQSxHQVdBbnBGLEtBQ0FuRSxLQUNBMC9CLEtBQ0FDLEtBQ0F1Z0IsRUFBQXJtRCxLQUFBc0ssSUFDQWc4QyxFQUFBdG1ELEtBQUFtRyxJQUNBd3pILEVBQUEzNUgsS0FBQUMsSUFDQTI1SCxFQUFBNTVILEtBQUFHLElBQ0EwNUgsRUFBQTc1SCxLQUFBZ0gsS0FDQTh5SCxFQUFBOTVILEtBQUFpSSxJQUNBOHhILEVBQUEsb0JBQUExbEUsYUFNQXE4RCxFQUFBLFNBQUFzSixHQUNBL21JLEtBQUFnbkksV0FBQUQsRUFFQS9tSSxLQUFBZ25JLFlBS0FobkksS0FBQS9DLFNBR0ErQyxLQUFBaW5JLEtBQUEsTUFRQXhKLEVBQUFwcEksV0FDQW1OLFlBQUFpOEgsRUFDQXlKLElBQUEsRUFDQUMsSUFBQSxFQUNBQyxJQUFBLEVBQ0FDLElBQUEsRUFFQUMsSUFBQSxFQUNBQyxJQUFBLEVBQ0EzQixLQUFBLEVBQ0E0QixVQUFBLEtBQ0FDLFlBQUEsRUFDQUMsU0FBQSxFQUNBQyxTQUFBLEVBS0FDLFNBQUEsU0FBQTNELEVBQUFDLEdBQ0Fsa0ksS0FBQXNuSSxJQUFBVCxFQUFBLEVBQUF6MEUsRUFBQTZ4RSxJQUFBLEVBQ0Fqa0ksS0FBQXVuSSxJQUFBVixFQUFBLEVBQUF6MEUsRUFBQTh4RSxJQUFBLEdBRUF4WSxXQUFBLFdBQ0EsT0FBQTFySCxLQUFBaW5JLE1BT0FwVyxVQUFBLFNBQUF4M0IsR0FjQSxPQWJBcjVGLEtBQUFpbkksS0FBQTV0QyxFQUNBQSxLQUFBdzNCLFlBQ0F4M0IsSUFBQXI1RixLQUFBb3lELElBQUFpbkMsRUFBQWpuQyxLQUVBcHlELEtBQUFnbkksWUFDQWhuSSxLQUFBNGxJLEtBQUEsR0FHQTVsSSxLQUFBd25JLFlBQ0F4bkksS0FBQXduSSxVQUFBLEtBQ0F4bkksS0FBQXluSSxZQUFBLEdBR0F6bkksTUFRQWdoQyxPQUFBLFNBQUF2d0IsRUFBQUMsR0FXQSxPQVZBMVEsS0FBQTZuSSxRQUFBaEssRUFBQW4xQyxFQUFBajRFLEVBQUFDLEdBQ0ExUSxLQUFBaW5JLE1BQUFqbkksS0FBQWluSSxLQUFBam1HLE9BQUF2d0IsRUFBQUMsR0FLQTFRLEtBQUFvbkksSUFBQTMySCxFQUNBelEsS0FBQXFuSSxJQUFBMzJILEVBQ0ExUSxLQUFBa25JLElBQUF6MkgsRUFDQXpRLEtBQUFtbkksSUFBQXoySCxFQUNBMVEsTUFRQXk0RixPQUFBLFNBQUFob0YsRUFBQUMsR0FDQSxJQUFBbzNILEVBQUFqQixFQUFBcDJILEVBQUF6USxLQUFBa25JLEtBQUFsbkksS0FBQXNuSSxLQUFBVCxFQUFBbjJILEVBQUExUSxLQUFBbW5JLEtBQUFubkksS0FBQXVuSSxLQUNBdm5JLEtBQUE0bEksS0FBQSxFQVlBLE9BWEE1bEksS0FBQTZuSSxRQUFBaEssRUFBQXo5QixFQUFBM3ZGLEVBQUFDLEdBRUExUSxLQUFBaW5JLE1BQUFhLElBQ0E5bkksS0FBQStuSSxhQUFBL25JLEtBQUFnb0ksY0FBQXYzSCxFQUFBQyxHQUFBMVEsS0FBQWluSSxLQUFBeHVDLE9BQUFob0YsRUFBQUMsSUFHQW8zSCxJQUNBOW5JLEtBQUFrbkksSUFBQXoySCxFQUNBelEsS0FBQW1uSSxJQUFBejJILEdBR0ExUSxNQVlBbTVGLGNBQUEsU0FBQXBqRixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBbW5ILEdBU0EsT0FSQXQ5SCxLQUFBNm5JLFFBQUFoSyxFQUFBLytCLEVBQUEvb0YsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQW1uSCxHQUVBdDlILEtBQUFpbkksT0FDQWpuSSxLQUFBK25JLGFBQUEvbkksS0FBQWlvSSxnQkFBQWx5SCxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBbW5ILEdBQUF0OUgsS0FBQWluSSxLQUFBOXRDLGNBQUFwakYsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQW1uSCxJQUdBdDlILEtBQUFrbkksSUFBQS93SCxFQUNBblcsS0FBQW1uSSxJQUFBN0osRUFDQXQ5SCxNQVVBa29JLGlCQUFBLFNBQUFueUgsRUFBQUMsRUFBQUMsRUFBQUMsR0FTQSxPQVJBbFcsS0FBQTZuSSxRQUFBaEssRUFBQWo4QixFQUFBN3JGLEVBQUFDLEVBQUFDLEVBQUFDLEdBRUFsVyxLQUFBaW5JLE9BQ0FqbkksS0FBQStuSSxhQUFBL25JLEtBQUFtb0ksbUJBQUFweUgsRUFBQUMsRUFBQUMsRUFBQUMsR0FBQWxXLEtBQUFpbkksS0FBQWlCLGlCQUFBbnlILEVBQUFDLEVBQUFDLEVBQUFDLElBR0FsVyxLQUFBa25JLElBQUFqeEgsRUFDQWpXLEtBQUFtbkksSUFBQWp4SCxFQUNBbFcsTUFZQTJrRSxJQUFBLFNBQUFueEQsRUFBQUMsRUFBQXpVLEVBQUE2TCxFQUFBZ0MsRUFBQWt3SCxHQUtBLE9BSkEvOEgsS0FBQTZuSSxRQUFBaEssRUFBQTE5QixFQUFBM3NGLEVBQUFDLEVBQUF6VSxJQUFBNkwsRUFBQWdDLEVBQUFoQyxFQUFBLEVBQUFreUgsRUFBQSxLQUNBLzhILEtBQUFpbkksTUFBQWpuSSxLQUFBaW5JLEtBQUF0aUUsSUFBQW54RCxFQUFBQyxFQUFBelUsRUFBQTZMLEVBQUFnQyxFQUFBa3dILEdBQ0EvOEgsS0FBQWtuSSxJQUFBUixFQUFBNzVILEdBQUE3TixFQUFBd1UsRUFDQXhULEtBQUFtbkksSUFBQVIsRUFBQTk1SCxHQUFBN04sRUFBQXdVLEVBQ0F4VCxNQUdBb29JLE1BQUEsU0FBQXJ5SCxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBdkwsR0FLQSxPQUpBM0ssS0FBQWluSSxNQUNBam5JLEtBQUFpbkksS0FBQW1CLE1BQUFyeUgsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQXZMLEdBR0EzSyxNQUdBZ3hCLEtBQUEsU0FBQXZnQixFQUFBQyxFQUFBbW9GLEVBQUEzL0YsR0FHQSxPQUZBOEcsS0FBQWluSSxNQUFBam5JLEtBQUFpbkksS0FBQWoyRyxLQUFBdmdCLEVBQUFDLEVBQUFtb0YsRUFBQTMvRixHQUNBOEcsS0FBQTZuSSxRQUFBaEssRUFBQXI5QixFQUFBL3ZGLEVBQUFDLEVBQUFtb0YsRUFBQTMvRixHQUNBOEcsTUFNQTA0RixVQUFBLFdBQ0ExNEYsS0FBQTZuSSxRQUFBaEssRUFBQTk3QixHQUNBLElBQUExSSxFQUFBcjVGLEtBQUFpbkksS0FDQTdKLEVBQUFwOUgsS0FBQW9uSSxJQUNBL0osRUFBQXI5SCxLQUFBcW5JLElBU0EsT0FQQWh1QyxJQUNBcjVGLEtBQUErbkksY0FBQS9uSSxLQUFBZ29JLGNBQUE1SyxFQUFBQyxHQUNBaGtDLEVBQUFYLGFBR0ExNEYsS0FBQWtuSSxJQUFBOUosRUFDQXA5SCxLQUFBbW5JLElBQUE5SixFQUNBcjlILE1BU0EwUCxLQUFBLFNBQUEycEYsR0FDQUEsS0FBQTNwRixPQUNBMVAsS0FBQXFvSSxZQU9BdjJILE9BQUEsU0FBQXVuRixHQUNBQSxLQUFBdm5GLFNBQ0E5UixLQUFBcW9JLFlBUUFDLFlBQUEsU0FBQXQxRCxHQUNBLEdBQUFBLGFBQUFuOEIsTUFBQSxDQUNBNzJDLEtBQUF3bkksVUFBQXgwRCxFQUNBaHpFLEtBQUEwbkksU0FBQSxFQUdBLElBRkEsSUFBQWEsRUFBQSxFQUVBanhJLEVBQUEsRUFBcUJBLEVBQUEwN0UsRUFBQXo3RSxPQUFxQkQsSUFDMUNpeEksR0FBQXYxRCxFQUFBMTdFLEdBR0EwSSxLQUFBMm5JLFNBQUFZLEVBR0EsT0FBQXZvSSxNQVFBd29JLGtCQUFBLFNBQUFyN0gsR0FFQSxPQURBbk4sS0FBQXluSSxZQUFBdDZILEVBQ0FuTixNQU9Bc0osSUFBQSxXQUNBLE9BQUF0SixLQUFBNGxJLE1BTUEzMkQsUUFBQSxTQUFBaHlFLEdBQ0EsSUFBQXFNLEVBQUFyTSxFQUFBMUYsT0FFQXlJLEtBQUEvQyxNQUFBK0MsS0FBQS9DLEtBQUExRixRQUFBK1IsSUFBQXc5SCxJQUNBOW1JLEtBQUEvQyxLQUFBLElBQUFta0UsYUFBQTkzRCxJQUdBLFFBQUFoUyxFQUFBLEVBQW1CQSxFQUFBZ1MsRUFBU2hTLElBQzVCMEksS0FBQS9DLEtBQUEzRixHQUFBMkYsRUFBQTNGLEdBR0EwSSxLQUFBNGxJLEtBQUF0OEgsR0FPQW0vSCxXQUFBLFNBQUE3OUQsR0FDQUEsYUFBQS96QixRQUNBK3pCLE9BT0EsSUFKQSxJQUFBdGhFLEVBQUFzaEUsRUFBQXJ6RSxPQUNBbXhJLEVBQUEsRUFDQXY3SCxFQUFBbk4sS0FBQTRsSSxLQUVBdHVJLEVBQUEsRUFBbUJBLEVBQUFnUyxFQUFTaFMsSUFDNUJveEksR0FBQTk5RCxFQUFBdHpFLEdBQUFnUyxNQUdBdzlILEdBQUE5bUksS0FBQS9DLGdCQUFBbWtFLGVBQ0FwaEUsS0FBQS9DLEtBQUEsSUFBQW1rRSxhQUFBajBELEVBQUF1N0gsSUFHQSxJQUFBcHhJLEVBQUEsRUFBbUJBLEVBQUFnUyxFQUFTaFMsSUFHNUIsSUFGQSxJQUFBcXhJLEVBQUEvOUQsRUFBQXR6RSxHQUFBMkYsS0FFQWkyQyxFQUFBLEVBQXFCQSxFQUFBeTFGLEVBQUFweEksT0FBMkIyN0MsSUFDaERsekMsS0FBQS9DLEtBQUFrUSxLQUFBdzdILEVBQUF6MUYsR0FJQWx6QyxLQUFBNGxJLEtBQUF6NEgsR0FPQTA2SCxRQUFBLFNBQUF6SSxHQUNBLEdBQUFwL0gsS0FBQWduSSxVQUFBLENBSUEsSUFBQS9wSSxFQUFBK0MsS0FBQS9DLEtBRUErQyxLQUFBNGxJLEtBQUFuOUgsVUFBQWxSLE9BQUEwRixFQUFBMUYsU0FHQXlJLEtBQUE0b0ksY0FFQTNySSxFQUFBK0MsS0FBQS9DLE1BR0EsUUFBQTNGLEVBQUEsRUFBbUJBLEVBQUFtUixVQUFBbFIsT0FBc0JELElBQ3pDMkYsRUFBQStDLEtBQUE0bEksUUFBQW45SCxVQUFBblIsR0FHQTBJLEtBQUE2b0ksU0FBQXpKLElBRUF3SixZQUFBLFdBRUEsS0FBQTVvSSxLQUFBL0MsZ0JBQUE0NUMsT0FBQSxDQUdBLElBRkEsSUFBQXNRLEtBRUE3dkQsRUFBQSxFQUFxQkEsRUFBQTBJLEtBQUE0bEksS0FBZXR1SSxJQUNwQzZ2RCxFQUFBN3ZELEdBQUEwSSxLQUFBL0MsS0FBQTNGLEdBR0EwSSxLQUFBL0MsS0FBQWtxRCxJQVNBNGdGLFdBQUEsV0FDQSxPQUFBL25JLEtBQUF3bkksV0FFQVEsY0FBQSxTQUFBanlILEVBQUFDLEdBQ0EsSUFXQTh5SCxFQUVBdHNJLEVBYkF1c0ksRUFBQS9vSSxLQUFBMm5JLFNBQ0F4NkgsRUFBQW5OLEtBQUF5bkksWUFDQXowRCxFQUFBaHpFLEtBQUF3bkksVUFDQW51QyxFQUFBcjVGLEtBQUFpbkksS0FDQTdKLEVBQUFwOUgsS0FBQWtuSSxJQUNBN0osRUFBQXI5SCxLQUFBbW5JLElBQ0FyNkgsRUFBQWlKLEVBQUFxbkgsRUFDQW53SCxFQUFBK0ksRUFBQXFuSCxFQUNBem1ILEVBQUFnd0gsRUFBQTk1SCxJQUFBRyxLQUNBd0QsRUFBQTJzSCxFQUNBMXNILEVBQUEyc0gsRUFFQTJMLEVBQUFoMkQsRUFBQXo3RSxPQWNBLElBWkF1VixHQUFBOEosRUFDQTNKLEdBQUEySixFQUVBekosRUFBQSxJQUVBQSxFQUFBNDdILEVBQUE1N0gsR0FJQXNELElBREF0RCxHQUFBNDdILEdBQ0FqOEgsRUFDQTRELEdBQUF2RCxFQUFBRixFQUVBSCxFQUFBLEdBQUEyRCxHQUFBc0YsR0FBQWpKLEVBQUEsR0FBQTJELEdBQUFzRixHQUFBLEdBQUFqSixJQUFBRyxFQUFBLEdBQUF5RCxHQUFBc0YsR0FBQS9JLEVBQUEsR0FBQXlELEdBQUFzRixJQUdBdkYsR0FBQTNELEdBREFnOEgsRUFBQTkxRCxFQURBeDJFLEVBQUF3RCxLQUFBMG5JLFdBR0FoM0gsR0FBQXpELEVBQUE2N0gsRUFDQTlvSSxLQUFBMG5JLFVBQUFsckksRUFBQSxHQUFBd3NJLEVBRUFsOEgsRUFBQSxHQUFBMkQsRUFBQTJzSCxHQUFBdHdILEVBQUEsR0FBQTJELEVBQUEyc0gsR0FBQW53SCxFQUFBLEdBQUF5RCxFQUFBMnNILEdBQUFwd0gsRUFBQSxHQUFBeUQsRUFBQTJzSCxHQUlBaGtDLEVBQUE3OEYsRUFBQSxxQkFBQXNRLEdBQUEsRUFBQXNtRCxFQUFBM2lELEVBQUFzRixHQUFBczlDLEVBQUE1aUQsRUFBQXNGLEdBQUE5SSxHQUFBLEVBQUFtbUQsRUFBQTFpRCxFQUFBc0YsR0FBQXE5QyxFQUFBM2lELEVBQUFzRixJQUlBbEosRUFBQTJELEVBQUFzRixFQUNBOUksRUFBQXlELEVBQUFzRixFQUNBaFcsS0FBQXluSSxhQUFBYixFQUFBOTVILElBQUFHLE1BR0FnN0gsZ0JBQUEsU0FBQWx5SCxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBbW5ILEdBQ0EsSUFNQXBtSSxFQUNBNFYsRUFDQUcsRUFLQXdELEVBQ0FDLEVBZEFxNEgsRUFBQS9vSSxLQUFBMm5JLFNBQ0F4NkgsRUFBQW5OLEtBQUF5bkksWUFDQXowRCxFQUFBaHpFLEtBQUF3bkksVUFDQW51QyxFQUFBcjVGLEtBQUFpbkksS0FDQTdKLEVBQUFwOUgsS0FBQWtuSSxJQUNBN0osRUFBQXI5SCxLQUFBbW5JLElBSUE1SSxFQUFBcEIsRUFBQW9CLFFBQ0EwSyxFQUFBLEVBQ0F6c0ksRUFBQXdELEtBQUEwbkksU0FDQXNCLEVBQUFoMkQsRUFBQXo3RSxPQUdBMnhJLEVBQUEsRUFTQSxJQVBBLzdILEVBQUEsSUFFQUEsRUFBQTQ3SCxFQUFBNTdILEdBR0FBLEdBQUE0N0gsRUFFQTd4SSxFQUFBLEVBQWVBLEVBQUEsRUFBT0EsR0FBQSxHQUN0QjRWLEVBQUF5eEgsRUFBQW5CLEVBQUFybkgsRUFBQUUsRUFBQUUsRUFBQWpmLEVBQUEsSUFBQXFuSSxFQUFBbkIsRUFBQXJuSCxFQUFBRSxFQUFBRSxFQUFBamYsR0FDQStWLEVBQUFzeEgsRUFBQWxCLEVBQUFybkgsRUFBQUUsRUFBQW9uSCxFQUFBcG1JLEVBQUEsSUFBQXFuSSxFQUFBbEIsRUFBQXJuSCxFQUFBRSxFQUFBb25ILEVBQUFwbUksR0FDQSt4SSxHQUFBckMsRUFBQTk1SCxJQUFBRyxLQUlBLEtBQVV6USxFQUFBd3NJLE1BQ1ZFLEdBQUFsMkQsRUFBQXgyRSxJQUVBMlEsR0FIdUIzUSxLQVV2QixJQUZBdEYsR0FBQWd5SSxFQUFBLzdILEdBQUE4N0gsRUFFQS94SSxHQUFBLEdBQ0F1WixFQUFBOHRILEVBQUFuQixFQUFBcm5ILEVBQUFFLEVBQUFFLEVBQUFqZixHQUNBd1osRUFBQTZ0SCxFQUFBbEIsRUFBQXJuSCxFQUFBRSxFQUFBb25ILEVBQUFwbUksR0FHQXNGLEVBQUEsRUFBQTY4RixFQUFBcjRELE9BQUF2d0IsRUFBQUMsR0FBQTJvRixFQUFBWixPQUFBaG9GLEVBQUFDLEdBQ0F4WixHQUFBODdFLEVBQUF4MkUsR0FBQXlzSSxFQUNBenNJLEtBQUEsR0FBQXdzSSxFQUlBeHNJLEVBQUEsTUFBQTY4RixFQUFBWixPQUFBdGlGLEVBQUFtbkgsR0FDQXh3SCxFQUFBcUosRUFBQTFGLEVBQ0F4RCxFQUFBcXdILEVBQUE1c0gsRUFDQTFRLEtBQUF5bkksYUFBQWIsRUFBQTk1SCxJQUFBRyxNQUVBazdILG1CQUFBLFNBQUFweUgsRUFBQUMsRUFBQUMsRUFBQUMsR0FFQSxJQUFBQyxFQUFBRixFQUNBcW5ILEVBQUFwbkgsRUFDQUQsS0FBQSxFQUFBRixHQUFBLEVBQ0FHLEtBQUEsRUFBQUYsR0FBQSxFQUNBRCxHQUFBL1YsS0FBQWtuSSxJQUFBLEVBQUFueEgsR0FBQSxFQUNBQyxHQUFBaFcsS0FBQW1uSSxJQUFBLEVBQUFueEgsR0FBQSxFQUVBaFcsS0FBQWlvSSxnQkFBQWx5SCxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBbW5ILElBT0ErSyxTQUFBLFdBQ0EsSUFBQXBySSxFQUFBK0MsS0FBQS9DLEtBRUFBLGFBQUE0NUMsUUFDQTU1QyxFQUFBMUYsT0FBQXlJLEtBQUE0bEksS0FFQWtCLElBQ0E5bUksS0FBQS9DLEtBQUEsSUFBQW1rRSxhQUFBbmtFLE1BUUF3WixnQkFBQSxXQUNBWSxFQUFBLEdBQUFBLEVBQUEsR0FBQXU3QixFQUFBLEdBQUFBLEVBQUEsR0FBQS85QixPQUFBQyxVQUNBNUIsRUFBQSxHQUFBQSxFQUFBLEdBQUEyL0IsRUFBQSxHQUFBQSxFQUFBLElBQUFoK0IsT0FBQUMsVUFPQSxJQU5BLElBQUE3WCxFQUFBK0MsS0FBQS9DLEtBQ0FpaUksRUFBQSxFQUNBQyxFQUFBLEVBQ0EvQixFQUFBLEVBQ0FDLEVBQUEsRUFFQS9sSSxFQUFBLEVBQW1CQSxFQUFBMkYsRUFBQTFGLFFBQWlCLENBQ3BDLElBQUE2bkksRUFBQW5pSSxFQUFBM0YsS0FhQSxPQVhBLEdBQUFBLElBT0E4bEksRUFGQThCLEVBQUFqaUksRUFBQTNGLEdBR0ErbEksRUFGQThCLEVBQUFsaUksRUFBQTNGLEVBQUEsSUFLQThuSSxHQUNBLEtBQUF2QixFQUFBbjFDLEVBS0F3MkMsRUFGQTlCLEVBQUFuZ0ksRUFBQTNGLEtBR0E2bkksRUFGQTlCLEVBQUFwZ0ksRUFBQTNGLEtBR0FzN0MsRUFBQSxHQUFBd3FGLEVBQ0F4cUYsRUFBQSxHQUFBeXFGLEVBQ0F4cUYsRUFBQSxHQUFBdXFGLEVBQ0F2cUYsRUFBQSxHQUFBd3FGLEVBQ0EsTUFFQSxLQUFBUSxFQUFBejlCLEVBQ0FqdUQsRUFBQWczRixTQUFBakssRUFBQUMsRUFBQWxpSSxFQUFBM0YsR0FBQTJGLEVBQUEzRixFQUFBLEdBQUFzN0MsRUFBQUMsR0FDQXFzRixFQUFBamlJLEVBQUEzRixLQUNBNm5JLEVBQUFsaUksRUFBQTNGLEtBQ0EsTUFFQSxLQUFBdW1JLEVBQUEvK0IsRUFDQTNzRCxFQUFBaTNGLFVBQUFsSyxFQUFBQyxFQUFBbGlJLEVBQUEzRixLQUFBMkYsRUFBQTNGLEtBQUEyRixFQUFBM0YsS0FBQTJGLEVBQUEzRixLQUFBMkYsRUFBQTNGLEdBQUEyRixFQUFBM0YsRUFBQSxHQUFBczdDLEVBQUFDLEdBQ0Fxc0YsRUFBQWppSSxFQUFBM0YsS0FDQTZuSSxFQUFBbGlJLEVBQUEzRixLQUNBLE1BRUEsS0FBQXVtSSxFQUFBajhCLEVBQ0F6dkQsRUFBQWszRixjQUFBbkssRUFBQUMsRUFBQWxpSSxFQUFBM0YsS0FBQTJGLEVBQUEzRixLQUFBMkYsRUFBQTNGLEdBQUEyRixFQUFBM0YsRUFBQSxHQUFBczdDLEVBQUFDLEdBQ0Fxc0YsRUFBQWppSSxFQUFBM0YsS0FDQTZuSSxFQUFBbGlJLEVBQUEzRixLQUNBLE1BRUEsS0FBQXVtSSxFQUFBMTlCLEVBRUEsSUFBQTNzRixFQUFBdlcsRUFBQTNGLEtBQ0FtYyxFQUFBeFcsRUFBQTNGLEtBQ0ErbkksRUFBQXBpSSxFQUFBM0YsS0FDQWdvSSxFQUFBcmlJLEVBQUEzRixLQUNBdVQsRUFBQTVOLEVBQUEzRixLQUNBdVYsRUFBQTVQLEVBQUEzRixLQUFBdVQsRUFHQWt5SCxHQURBOS9ILEVBQUEzRixLQUNBLEVBQUEyRixFQUFBM0YsTUFFQSxHQUFBQSxJQUdBOGxJLEVBQUFzSixFQUFBNzdILEdBQUF3MEgsRUFBQTdySCxFQUNBNnBILEVBQUFzSixFQUFBOTdILEdBQUF5MEgsRUFBQTdySCxHQUdBMCtCLEVBQUFtM0YsUUFBQTkxSCxFQUFBQyxFQUFBNHJILEVBQUFDLEVBQUF6MEgsRUFBQWdDLEVBQUFrd0gsRUFBQW5xRixFQUFBQyxHQUNBcXNGLEVBQUF3SCxFQUFBNzVILEdBQUF3eUgsRUFBQTdySCxFQUNBMnJILEVBQUF3SCxFQUFBOTVILEdBQUF5eUgsRUFBQTdySCxFQUNBLE1BRUEsS0FBQW9xSCxFQUFBcjlCLEVBQ0E0OEIsRUFBQThCLEVBQUFqaUksRUFBQTNGLEtBQ0ErbEksRUFBQThCLEVBQUFsaUksRUFBQTNGLEtBQ0EsSUFBQW1VLEVBQUF4TyxFQUFBM0YsS0FDQWtkLEVBQUF2WCxFQUFBM0YsS0FFQTY2QyxFQUFBZzNGLFNBQUEvTCxFQUFBQyxFQUFBRCxFQUFBM3hILEVBQUE0eEgsRUFBQTdvSCxFQUFBbytCLEVBQUFDLEdBQ0EsTUFFQSxLQUFBZ3JGLEVBQUE5N0IsRUFDQW05QixFQUFBOUIsRUFDQStCLEVBQUE5QixFQUtBanJGLEVBQUEvNkIsUUFBQXU3QixHQUNBUixFQUFBbC9CLFFBQUEyL0IsR0FRQSxPQUpBLElBQUF2N0MsSUFDQStmLEVBQUEsR0FBQUEsRUFBQSxHQUFBbkUsRUFBQSxHQUFBQSxFQUFBLE1BR0EsSUFBQXEzQixFQUFBbHpCLEVBQUEsR0FBQUEsRUFBQSxHQUFBbkUsRUFBQSxHQUFBbUUsRUFBQSxHQUFBbkUsRUFBQSxHQUFBbUUsRUFBQSxLQVFBa3lILFlBQUEsU0FBQWx3QyxHQVNBLElBUkEsSUFDQStqQyxFQUFBQyxFQUNBNkIsRUFBQUMsRUFDQTF1SCxFQUFBQyxFQUhBN1IsRUFBQW1CLEtBQUEvQyxLQUlBdXNJLEVBQUF4cEksS0FBQXNuSSxJQUNBbUMsRUFBQXpwSSxLQUFBdW5JLElBQ0FqK0gsRUFBQXRKLEtBQUE0bEksS0FFQXR1SSxFQUFBLEVBQW1CQSxFQUFBZ1MsR0FBUyxDQUM1QixJQUFBODFILEVBQUF2Z0ksRUFBQXZILEtBYUEsT0FYQSxHQUFBQSxJQU9BOGxJLEVBRkE4QixFQUFBcmdJLEVBQUF2SCxHQUdBK2xJLEVBRkE4QixFQUFBdGdJLEVBQUF2SCxFQUFBLElBS0E4bkksR0FDQSxLQUFBdkIsRUFBQW4xQyxFQUNBMDBDLEVBQUE4QixFQUFBcmdJLEVBQUF2SCxLQUNBK2xJLEVBQUE4QixFQUFBdGdJLEVBQUF2SCxLQUNBK2hHLEVBQUFyNEQsT0FBQWsrRixFQUFBQyxHQUNBLE1BRUEsS0FBQXRCLEVBQUF6OUIsRUFDQTN2RixFQUFBNVIsRUFBQXZILEtBQ0FvWixFQUFBN1IsRUFBQXZILE1BRUF1dkksRUFBQXAySCxFQUFBeXVILEdBQUFzSyxHQUFBM0MsRUFBQW4ySCxFQUFBeXVILEdBQUFzSyxHQUFBbnlJLElBQUFnUyxFQUFBLEtBQ0ErdkYsRUFBQVosT0FBQWhvRixFQUFBQyxHQUNBd3VILEVBQUF6dUgsRUFDQTB1SCxFQUFBenVILEdBR0EsTUFFQSxLQUFBbXRILEVBQUEvK0IsRUFDQXpGLEVBQUFGLGNBQUF0NkYsRUFBQXZILEtBQUF1SCxFQUFBdkgsS0FBQXVILEVBQUF2SCxLQUFBdUgsRUFBQXZILEtBQUF1SCxFQUFBdkgsS0FBQXVILEVBQUF2SCxNQUNBNG5JLEVBQUFyZ0ksRUFBQXZILEVBQUEsR0FDQTZuSSxFQUFBdGdJLEVBQUF2SCxFQUFBLEdBQ0EsTUFFQSxLQUFBdW1JLEVBQUFqOEIsRUFDQXZJLEVBQUE2dUMsaUJBQUFycEksRUFBQXZILEtBQUF1SCxFQUFBdkgsS0FBQXVILEVBQUF2SCxLQUFBdUgsRUFBQXZILE1BQ0E0bkksRUFBQXJnSSxFQUFBdkgsRUFBQSxHQUNBNm5JLEVBQUF0Z0ksRUFBQXZILEVBQUEsR0FDQSxNQUVBLEtBQUF1bUksRUFBQTE5QixFQUNBLElBQUEzc0YsRUFBQTNVLEVBQUF2SCxLQUNBbWMsRUFBQTVVLEVBQUF2SCxLQUNBK25JLEVBQUF4Z0ksRUFBQXZILEtBQ0Fnb0ksRUFBQXpnSSxFQUFBdkgsS0FDQWlvSSxFQUFBMWdJLEVBQUF2SCxLQUNBa29JLEVBQUEzZ0ksRUFBQXZILEtBQ0FveUksRUFBQTdxSSxFQUFBdkgsS0FDQXF5SSxFQUFBOXFJLEVBQUF2SCxLQUNBMEgsRUFBQXFnSSxFQUFBQyxFQUFBRCxFQUFBQyxFQUNBc0ssRUFBQXZLLEVBQUFDLEVBQUEsRUFBQUQsRUFBQUMsRUFDQXVLLEVBQUF4SyxFQUFBQyxJQUFBRCxFQUFBLEVBRUF4eUgsRUFBQTB5SCxFQUFBQyxFQURBenlILEtBQUFpSSxJQUFBcXFILEVBQUFDLEdBQUEsTUFJQWptQyxFQUFBMWpFLFVBQUFuaUIsRUFBQUMsR0FDQTRsRixFQUFBanVGLE9BQUFzK0gsR0FDQXJ3QyxFQUFBaCtFLE1BQUF1dUgsRUFBQUMsR0FDQXh3QyxFQUFBMTBCLElBQUEsSUFBQTNsRSxFQUFBdWdJLEVBQUExeUgsRUFBQSxFQUFBODhILEdBQ0F0d0MsRUFBQWgrRSxNQUFBLEVBQUF1dUgsRUFBQSxFQUFBQyxHQUNBeHdDLEVBQUFqdUYsUUFBQXMrSCxHQUNBcndDLEVBQUExakUsV0FBQW5pQixHQUFBQyxJQUVBNGxGLEVBQUExMEIsSUFBQW54RCxFQUFBQyxFQUFBelUsRUFBQXVnSSxFQUFBMXlILEVBQUEsRUFBQTg4SCxHQUdBLEdBQUFyeUksSUFHQThsSSxFQUFBc0osRUFBQW5ILEdBQUFGLEVBQUE3ckgsRUFDQTZwSCxFQUFBc0osRUFBQXBILEdBQUFELEVBQUE3ckgsR0FHQXlySCxFQUFBd0gsRUFBQTc1SCxHQUFBd3lILEVBQUE3ckgsRUFDQTJySCxFQUFBd0gsRUFBQTk1SCxHQUFBeXlILEVBQUE3ckgsRUFDQSxNQUVBLEtBQUFvcUgsRUFBQXI5QixFQUNBNDhCLEVBQUE4QixFQUFBcmdJLEVBQUF2SCxHQUNBK2xJLEVBQUE4QixFQUFBdGdJLEVBQUF2SCxFQUFBLEdBQ0EraEcsRUFBQXJvRSxLQUFBbnlCLEVBQUF2SCxLQUFBdUgsRUFBQXZILEtBQUF1SCxFQUFBdkgsS0FBQXVILEVBQUF2SCxNQUNBLE1BRUEsS0FBQXVtSSxFQUFBOTdCLEVBQ0ExSSxFQUFBWCxZQUNBd21DLEVBQUE5QixFQUNBK0IsRUFBQTlCLE1BS0FJLEVBQUFJLE1BQ0EsSUFBQTM3SCxFQUFBdTdILEVBQ0FyakksRUFBQTBELFFBQUFvRSw2REMxdkJBLElBQUFrd0MsRUFBQTc4QyxFQUFBLDZDQUVBNG5JLEVBQUE1bkksRUFBQSw0Q0FLQTY5RCxFQUFBcm1ELEtBQUFzSyxJQUNBZzhDLEVBQUF0bUQsS0FBQW1HLElBQ0F5ekgsRUFBQTU1SCxLQUFBRyxJQUNBdzVILEVBQUEzNUgsS0FBQUMsSUFDQWlLLEVBQUEsRUFBQWxLLEtBQUE0RyxHQUNBckcsRUFBQThrQyxFQUFBL3lDLFNBQ0FpVixFQUFBODlCLEVBQUEveUMsU0FDQXlxSSxFQUFBMTNGLEVBQUEveUMsU0FvREEsSUFBQTBxSSxLQUNBQyxLQXFKQWxzSSxFQUFBaTFDLFdBak1BLFNBQUF4aUMsRUFBQThHLEVBQUFuRSxHQUNBLE9BQUEzQyxFQUFBaFosT0FBQSxDQUlBLElBS0FELEVBTEFlLEVBQUFrWSxFQUFBLEdBQ0E4b0IsRUFBQWhoQyxFQUFBLEdBQ0F3NUMsRUFBQXg1QyxFQUFBLEdBQ0FpaEMsRUFBQWpoQyxFQUFBLEdBQ0F5NUMsRUFBQXo1QyxFQUFBLEdBR0EsSUFBQWYsRUFBQSxFQUFhQSxFQUFBaVosRUFBQWhaLE9BQW1CRCxJQUNoQ2UsRUFBQWtZLEVBQUFqWixHQUNBK2hDLEVBQUErNUIsRUFBQS81QixFQUFBaGhDLEVBQUEsSUFDQXc1QyxFQUFBd2hCLEVBQUF4aEIsRUFBQXg1QyxFQUFBLElBQ0FpaEMsRUFBQTg1QixFQUFBOTVCLEVBQUFqaEMsRUFBQSxJQUNBeTVDLEVBQUF1aEIsRUFBQXZoQixFQUFBejVDLEVBQUEsSUFHQWdmLEVBQUEsR0FBQWdpQixFQUNBaGlCLEVBQUEsR0FBQWlpQixFQUNBcG1CLEVBQUEsR0FBQTIrQixFQUNBMytCLEVBQUEsR0FBQTQrQixJQTJLQWgwQyxFQUFBcXJJLFNBOUpBLFNBQUEvTCxFQUFBQyxFQUFBdG5ILEVBQUFDLEVBQUFxQixFQUFBbkUsR0FDQW1FLEVBQUEsR0FBQSs3QyxFQUFBZ3FFLEVBQUFybkgsR0FDQXNCLEVBQUEsR0FBQSs3QyxFQUFBaXFFLEVBQUFybkgsR0FDQTlDLEVBQUEsR0FBQW1nRCxFQUFBK3BFLEVBQUFybkgsR0FDQTdDLEVBQUEsR0FBQW1nRCxFQUFBZ3FFLEVBQUFybkgsSUEySkFsWSxFQUFBc3JJLFVBdklBLFNBQUFoTSxFQUFBQyxFQUFBdG5ILEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFtbkgsRUFBQWptSCxFQUFBbkUsR0FDQSxJQUVBNWIsRUFGQWtuSSxFQUFBckIsRUFBQXFCLGFBQ0FELEVBQUFwQixFQUFBb0IsUUFFQS8rSCxFQUFBZy9ILEVBQUFwQixFQUFBcm5ILEVBQUFFLEVBQUFFLEVBQUE0ekgsR0FNQSxJQUxBMXlILEVBQUEsR0FBQXcwQixJQUNBeDBCLEVBQUEsR0FBQXcwQixJQUNBMzRCLEVBQUEsUUFDQUEsRUFBQSxRQUVBNWIsRUFBQSxFQUFhQSxFQUFBa0ksRUFBT2xJLElBQUEsQ0FDcEIsSUFBQW1aLEVBQUE4dEgsRUFBQW5CLEVBQUFybkgsRUFBQUUsRUFBQUUsRUFBQTR6SCxFQUFBenlJLElBQ0ErZixFQUFBLEdBQUErN0MsRUFBQTNpRCxFQUFBNEcsRUFBQSxJQUNBbkUsRUFBQSxHQUFBbWdELEVBQUE1aUQsRUFBQXlDLEVBQUEsSUFLQSxJQUZBMVQsRUFBQWcvSCxFQUFBbkIsRUFBQXJuSCxFQUFBRSxFQUFBb25ILEVBQUEwTSxHQUVBMXlJLEVBQUEsRUFBYUEsRUFBQWtJLEVBQU9sSSxJQUFBLENBQ3BCLElBQUFvWixFQUFBNnRILEVBQUFsQixFQUFBcm5ILEVBQUFFLEVBQUFvbkgsRUFBQTBNLEVBQUExeUksSUFDQStmLEVBQUEsR0FBQSs3QyxFQUFBMWlELEVBQUEyRyxFQUFBLElBQ0FuRSxFQUFBLEdBQUFtZ0QsRUFBQTNpRCxFQUFBd0MsRUFBQSxJQUdBbUUsRUFBQSxHQUFBKzdDLEVBQUFncUUsRUFBQS9sSCxFQUFBLElBQ0FuRSxFQUFBLEdBQUFtZ0QsRUFBQStwRSxFQUFBbHFILEVBQUEsSUFDQW1FLEVBQUEsR0FBQSs3QyxFQUFBajlDLEVBQUFrQixFQUFBLElBQ0FuRSxFQUFBLEdBQUFtZ0QsRUFBQWw5QyxFQUFBakQsRUFBQSxJQUNBbUUsRUFBQSxHQUFBKzdDLEVBQUFpcUUsRUFBQWhtSCxFQUFBLElBQ0FuRSxFQUFBLEdBQUFtZ0QsRUFBQWdxRSxFQUFBbnFILEVBQUEsSUFDQW1FLEVBQUEsR0FBQSs3QyxFQUFBa3FFLEVBQUFqbUgsRUFBQSxJQUNBbkUsRUFBQSxHQUFBbWdELEVBQUFpcUUsRUFBQXBxSCxFQUFBLEtBeUdBcFYsRUFBQXVySSxjQXpGQSxTQUFBak0sRUFBQUMsRUFBQXRuSCxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBbUIsRUFBQW5FLEdBQ0EsSUFBQXlySCxFQUFBeEIsRUFBQXdCLGtCQUNBRSxFQUFBMUIsRUFBQTBCLFlBRUFvTCxFQUFBNTJFLEVBQUFELEVBQUF1ckUsRUFBQXZCLEVBQUFybkgsRUFBQUUsR0FBQSxNQUNBaTBILEVBQUE3MkUsRUFBQUQsRUFBQXVyRSxFQUFBdEIsRUFBQXJuSCxFQUFBRSxHQUFBLE1BQ0F6RixFQUFBb3VILEVBQUF6QixFQUFBcm5ILEVBQUFFLEVBQUFnMEgsR0FDQXY1SCxFQUFBbXVILEVBQUF4QixFQUFBcm5ILEVBQUFFLEVBQUFnMEgsR0FDQTd5SCxFQUFBLEdBQUErN0MsRUFBQWdxRSxFQUFBbm5ILEVBQUF4RixHQUNBNEcsRUFBQSxHQUFBKzdDLEVBQUFpcUUsRUFBQW5uSCxFQUFBeEYsR0FDQXdDLEVBQUEsR0FBQW1nRCxFQUFBK3BFLEVBQUFubkgsRUFBQXhGLEdBQ0F5QyxFQUFBLEdBQUFtZ0QsRUFBQWdxRSxFQUFBbm5ILEVBQUF4RixJQStFQTVTLEVBQUF3ckksUUE3REEsU0FBQTc0SCxFQUFBQyxFQUFBMnVILEVBQUFDLEVBQUF6MEgsRUFBQWdDLEVBQUFrd0gsRUFBQTFsSCxFQUFBbkUsR0FDQSxJQUFBaTNILEVBQUEvM0YsRUFBQS82QixJQUNBK3lILEVBQUFoNEYsRUFBQWwvQixJQUNBUixFQUFBM0YsS0FBQWlJLElBQUFuSyxFQUFBZ0MsR0FFQSxHQUFBNkYsRUFBQXVFLEVBQUEsTUFBQXZFLEVBQUEsS0FNQSxPQUpBMkUsRUFBQSxHQUFBNUcsRUFBQTR1SCxFQUNBaG9ILEVBQUEsR0FBQTNHLEVBQUE0dUgsRUFDQXBzSCxFQUFBLEdBQUF6QyxFQUFBNHVILE9BQ0Fuc0gsRUFBQSxHQUFBeEMsRUFBQTR1SCxHQTZCQSxHQXpCQWh5SCxFQUFBLEdBQUFvNUgsRUFBQTc3SCxHQUFBdzBILEVBQUE1dUgsRUFDQW5ELEVBQUEsR0FBQXE1SCxFQUFBOTdILEdBQUF5MEgsRUFBQTV1SCxFQUNBNEQsRUFBQSxHQUFBb3lILEVBQUE3NUgsR0FBQXd5SCxFQUFBNXVILEVBQ0E2RCxFQUFBLEdBQUFxeUgsRUFBQTk1SCxHQUFBeXlILEVBQUE1dUgsRUFDQXk1SCxFQUFBOXlILEVBQUEvSixFQUFBZ0gsR0FDQTgxSCxFQUFBbDNILEVBQUE1RixFQUFBZ0gsSUFFQXpKLEdBQUFvTSxHQUVBLElBQ0FwTSxHQUFBb00sSUFHQXBLLEdBQUFvSyxHQUVBLElBQ0FwSyxHQUFBb0ssR0FHQXBNLEVBQUFnQyxJQUFBa3dILEVBQ0Fsd0gsR0FBQW9LLEVBQ0dwTSxFQUFBZ0MsR0FBQWt3SCxJQUNIbHlILEdBQUFvTSxHQUdBOGxILEVBQUEsQ0FDQSxJQUFBRSxFQUFBcHdILEVBQ0FBLEVBQUFoQyxFQUNBQSxFQUFBb3lILEVBS0EsUUFBQWhsSCxFQUFBLEVBQXFCQSxFQUFBcEwsRUFBa0JvTCxHQUFBbEwsS0FBQTRHLEdBQUEsRUFDdkNzRSxFQUFBcE4sSUFDQWkvSCxFQUFBLEdBQUFwRCxFQUFBenVILEdBQUFvbkgsRUFBQTV1SCxFQUNBcTVILEVBQUEsR0FBQW5ELEVBQUExdUgsR0FBQXFuSCxFQUFBNXVILEVBQ0F5NUgsRUFBQTl5SCxFQUFBeXlILEVBQUF6eUgsR0FDQSt5SCxFQUFBbDNILEVBQUE0MkgsRUFBQTUySCxpRUNuTkEsSUFBQW0zSCxFQUFBOTBJLEVBQUEsNkNBRUErMEksRUFBQUQsRUFBQWhySSxPQUNBa3JJLEVBQUFGLEVBQUFHLFdBT0Fwd0QsRUFBQXJ0RSxLQUFBc3RFLElBQ0F1c0QsRUFBQTc1SCxLQUFBZ0gsS0FDQStwSCxFQUFBLEtBQ0EyTSxFQUFBLEtBQ0FDLEVBQUE5RCxFQUFBLEdBQ0ErRCxFQUFBLElBRUFDLEVBQUFOLElBRUFPLEVBQUFQLElBRUFRLEVBQUFSLElBRUEsU0FBQVMsRUFBQTU3RyxHQUNBLE9BQUFBLEdBQUEydUcsR0FBQTN1RyxFQUFBMnVHLEVBR0EsU0FBQWtOLEVBQUE3N0csR0FDQSxPQUFBQSxFQUFBMnVHLEdBQUEzdUcsR0FBQTJ1RyxFQWNBLFNBQUFTLEVBQUFwSSxFQUFBcGdHLEVBQUFDLEVBQUE4Z0csRUFBQTUvSCxHQUNBLElBQUErekksRUFBQSxFQUFBL3pJLEVBQ0EsT0FBQSt6SSxPQUFBOVUsRUFBQSxFQUFBai9ILEVBQUE2K0IsR0FBQTcrQixPQUFBNC9ILEVBQUEsRUFBQW1VLEVBQUFqMUcsR0E4UkEsU0FBQTZvRyxFQUFBMUksRUFBQXBnRyxFQUFBQyxFQUFBOStCLEdBQ0EsSUFBQSt6SSxFQUFBLEVBQUEvekksRUFDQSxPQUFBK3pJLEtBQUE5VSxFQUFBLEVBQUFqL0gsRUFBQTYrQixHQUFBNytCLElBQUE4K0IsRUE0TEFsNEIsRUFBQXlnSSxVQUNBemdJLEVBQUFvdEksa0JBL2NBLFNBQUEvVSxFQUFBcGdHLEVBQUFDLEVBQUE4Z0csRUFBQTUvSCxHQUNBLElBQUErekksRUFBQSxFQUFBL3pJLEVBQ0EsWUFBQTYrQixFQUFBb2dHLEdBQUE4VSxFQUFBLEdBQUFqMUcsRUFBQUQsR0FBQTcrQixHQUFBK3pJLEdBQUFuVSxFQUFBOWdHLEdBQUE5K0IsTUE4Y0E0RyxFQUFBcWdJLFlBL2JBLFNBQUFoSSxFQUFBcGdHLEVBQUFDLEVBQUE4Z0csRUFBQTNuRyxFQUFBc2tHLEdBRUEsSUFBQWo0SCxFQUFBczdILEVBQUEsR0FBQS9nRyxFQUFBQyxHQUFBbWdHLEVBQ0ExNkgsRUFBQSxHQUFBdTZCLEVBQUEsRUFBQUQsRUFBQW9nRyxHQUNBbDlILEVBQUEsR0FBQTg4QixFQUFBb2dHLEdBQ0F0M0gsRUFBQXMzSCxFQUFBaG5HLEVBQ0FneEUsRUFBQTFrRyxJQUFBLEVBQUFELEVBQUF2QyxFQUNBMm5HLEVBQUFubEcsRUFBQXhDLEVBQUEsRUFBQXVDLEVBQUFxRCxFQUNBaWdHLEVBQUE3bEcsSUFBQSxFQUFBd0MsRUFBQW9ELEVBQ0FXLEVBQUEsRUFFQSxHQUFBdXJJLEVBQUE1cUMsSUFBQTRxQyxFQUFBbnFDLEdBQ0FtcUMsRUFBQXR2SSxHQUNBZzRILEVBQUEsTUFFQTBYLEdBQUFseUksRUFBQXdDLElBRUEsR0FBQTB2SSxHQUFBLElBQ0ExWCxFQUFBajBILEtBQUEyckksT0FHRyxDQUNILElBQUFDLEVBQUF4cUMsSUFBQSxFQUFBVCxFQUFBckIsRUFFQSxHQUFBaXNDLEVBQUFLLEdBQUEsQ0FDQSxJQUFBdHBDLEVBQUFsQixFQUFBVCxFQUdBNDJCLEdBQUFqMUIsRUFBQSxHQUZBcXBDLEdBQUExdkksRUFBQUQsRUFBQXNtRyxJQUlBLEdBQUFxcEMsR0FBQSxJQUNBMVgsRUFBQWowSCxLQUFBMnJJLEdBR0FwVSxHQUFBLEdBQUFBLEdBQUEsSUFDQXRELEVBQUFqMEgsS0FBQXUzSCxRQUVLLEdBQUFxVSxFQUFBLEdBQ0wsSUFBQUMsRUFBQXpFLEVBQUF3RSxHQUNBRSxFQUFBbnJDLEVBQUExa0csRUFBQSxJQUFBRCxJQUFBb2xHLEVBQUF5cUMsR0FDQUUsRUFBQXByQyxFQUFBMWtHLEVBQUEsSUFBQUQsSUFBQW9sRyxFQUFBeXFDLElBY0FGLElBQUExdkksSUFYQTZ2SSxFQURBQSxFQUFBLEdBQ0FseEQsR0FBQWt4RCxFQUFBWCxHQUVBdndELEVBQUFreEQsRUFBQVgsS0FJQVksRUFEQUEsRUFBQSxHQUNBbnhELEdBQUFteEQsRUFBQVosR0FFQXZ3RCxFQUFBbXhELEVBQUFaLE9BR0EsRUFBQW52SSxLQUVBLEdBQUEydkksR0FBQSxJQUNBMVgsRUFBQWowSCxLQUFBMnJJLE9BRUssQ0FDTCxJQUFBdHNDLEdBQUEsRUFBQXNCLEVBQUExa0csRUFBQSxFQUFBRCxFQUFBb2xHLElBQUEsRUFBQWdtQyxFQUFBem1DLFFBQ0FvL0IsRUFBQXh5SCxLQUFBeStILEtBQUEzc0MsR0FBQSxFQUNBNHNDLEVBQUE3RSxFQUFBem1DLEdBQ0E4OEIsRUFBQWx3SCxLQUFBQyxJQUFBdXlILEdBQ0E0TCxJQUFBMXZJLEVBQUEsRUFBQWd3SSxFQUFBeE8sSUFBQSxFQUFBemhJLEdBRUF3N0gsR0FEQUQsSUFBQXQ3SCxFQUFBZ3dJLEdBQUF4TyxFQUFBeU4sRUFBQTM5SCxLQUFBRyxJQUFBcXlILE1BQUEsRUFBQS9qSSxLQUNBQyxFQUFBZ3dJLEdBQUF4TyxFQUFBeU4sRUFBQTM5SCxLQUFBRyxJQUFBcXlILE1BQUEsRUFBQS9qSSxJQUVBMnZJLEdBQUEsR0FBQUEsR0FBQSxJQUNBMVgsRUFBQWowSCxLQUFBMnJJLEdBR0FwVSxHQUFBLEdBQUFBLEdBQUEsSUFDQXRELEVBQUFqMEgsS0FBQXUzSCxHQUdBQyxHQUFBLEdBQUFBLEdBQUEsSUFDQXZELEVBQUFqMEgsS0FBQXczSCxJQUtBLE9BQUF4M0gsR0E4V0ExQixFQUFBMGdJLGFBaFdBLFNBQUFySSxFQUFBcGdHLEVBQUFDLEVBQUE4Z0csRUFBQWlILEdBQ0EsSUFBQXRpSSxFQUFBLEVBQUF1NkIsRUFBQSxHQUFBRCxFQUFBLEVBQUFvZ0csRUFDQTM2SCxFQUFBLEVBQUF1NkIsRUFBQSxFQUFBK2dHLEVBQUEsRUFBQVgsRUFBQSxFQUFBbmdHLEVBQ0EvOEIsRUFBQSxFQUFBODhCLEVBQUEsRUFBQW9nRyxFQUNBMzJILEVBQUEsRUFFQSxHQUFBdXJJLEVBQUF2dkksR0FDQXd2SSxFQUFBdnZJLEtBQ0EwdkksR0FBQWx5SSxFQUFBd0MsSUFFQSxHQUFBMHZJLEdBQUEsSUFDQXBOLEVBQUF2K0gsS0FBQTJySSxPQUdHLENBQ0gsSUFBQUMsRUFBQTN2SSxJQUFBLEVBQUFELEVBQUF2QyxFQUVBLEdBQUE4eEksRUFBQUssR0FDQXJOLEVBQUEsSUFBQXRpSSxHQUFBLEVBQUFELFFBQ0ssR0FBQTR2SSxFQUFBLEdBQ0wsSUFDQUQsRUFEQUUsRUFBQXpFLEVBQUF3RSxHQUVBclUsSUFBQXQ3SCxFQUFBNHZJLElBQUEsRUFBQTd2SSxJQURBMnZJLElBQUExdkksRUFBQTR2SSxJQUFBLEVBQUE3dkksS0FHQSxHQUFBMnZJLEdBQUEsSUFDQXBOLEVBQUF2K0gsS0FBQTJySSxHQUdBcFUsR0FBQSxHQUFBQSxHQUFBLElBQ0FnSCxFQUFBditILEtBQUF1M0gsSUFLQSxPQUFBdjNILEdBK1RBMUIsRUFBQTR0SSxlQWpUQSxTQUFBdlYsRUFBQXBnRyxFQUFBQyxFQUFBOGdHLEVBQUE1L0gsRUFBQXF3RCxHQUNBLElBQUFva0YsR0FBQTUxRyxFQUFBb2dHLEdBQUFqL0gsRUFBQWkvSCxFQUNBeVYsR0FBQTUxRyxFQUFBRCxHQUFBNytCLEVBQUE2K0IsRUFDQTgxRyxHQUFBL1UsRUFBQTlnRyxHQUFBOStCLEVBQUE4K0IsRUFDQTgxRyxHQUFBRixFQUFBRCxHQUFBejBJLEVBQUF5MEksRUFDQUksR0FBQUYsRUFBQUQsR0FBQTEwSSxFQUFBMDBJLEVBQ0FJLEdBQUFELEVBQUFELEdBQUE1MEksRUFBQTQwSSxFQUVBdmtGLEVBQUEsR0FBQTR1RSxFQUNBNXVFLEVBQUEsR0FBQW9rRixFQUNBcGtGLEVBQUEsR0FBQXVrRixFQUNBdmtGLEVBQUEsR0FBQXlrRixFQUVBemtGLEVBQUEsR0FBQXlrRixFQUNBemtGLEVBQUEsR0FBQXdrRixFQUNBeGtGLEVBQUEsR0FBQXNrRixFQUNBdGtGLEVBQUEsR0FBQXV2RSxHQWtTQWg1SCxFQUFBeS9ILGtCQTlRQSxTQUFBSCxFQUFBQyxFQUFBdG5ILEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFtbkgsRUFBQTdzSCxFQUFBQyxFQUFBNjJDLEdBRUEsSUFBQXJ3RCxFQUdBc3lHLEVBQ0Evb0YsRUFDQXdySCxFQUNBQyxFQUxBNStGLEVBQUEsS0FDQXp1QyxFQUFBZ3RDLElBS0ErK0YsRUFBQSxHQUFBbjZILEVBQ0FtNkgsRUFBQSxHQUFBbDZILEVBR0EsUUFBQXNzRyxFQUFBLEVBQWtCQSxFQUFBLEVBQVFBLEdBQUEsSUFDMUI2dEIsRUFBQSxHQUFBdE0sRUFBQW5CLEVBQUFybkgsRUFBQUUsRUFBQUUsRUFBQTZtRyxHQUNBNnRCLEVBQUEsR0FBQXRNLEVBQUFsQixFQUFBcm5ILEVBQUFFLEVBQUFvbkgsRUFBQXRnQixJQUNBaXZCLEVBQUExQixFQUFBSyxFQUFBQyxJQUVBaHNJLElBQ0EzSCxFQUFBOGxILEVBQ0FuK0csRUFBQW90SSxHQUlBcHRJLEVBQUFndEMsSUFFQSxRQUFBdjBDLEVBQUEsRUFBaUJBLEVBQUEsTUFDakJnMkMsRUFBQW05RixHQUR5Qm56SSxJQUt6Qmt5RyxFQUFBdHlHLEVBQUFvMkMsRUFDQTdzQixFQUFBdnBCLEVBQUFvMkMsRUFFQXU5RixFQUFBLEdBQUF0TSxFQUFBbkIsRUFBQXJuSCxFQUFBRSxFQUFBRSxFQUFBcXpGLEdBQ0FxaEMsRUFBQSxHQUFBdE0sRUFBQWxCLEVBQUFybkgsRUFBQUUsRUFBQW9uSCxFQUFBOXpCLEdBQ0F5aUMsRUFBQTFCLEVBQUFNLEVBQUFELEdBRUFwaEMsR0FBQSxHQUFBeWlDLEVBQUFwdEksR0FDQTNILEVBQUFzeUcsRUFDQTNxRyxFQUFBb3RJLElBR0FuQixFQUFBLEdBQUF2TSxFQUFBbkIsRUFBQXJuSCxFQUFBRSxFQUFBRSxFQUFBc0ssR0FDQXFxSCxFQUFBLEdBQUF2TSxFQUFBbEIsRUFBQXJuSCxFQUFBRSxFQUFBb25ILEVBQUE3OEcsR0FDQXlySCxFQUFBM0IsRUFBQU8sRUFBQUYsR0FFQW5xSCxHQUFBLEdBQUF5ckgsRUFBQXJ0SSxHQUNBM0gsRUFBQXVwQixFQUNBNWhCLEVBQUFxdEksR0FFQTUrRixHQUFBLElBWUEsT0FOQWlhLElBQ0FBLEVBQUEsR0FBQWczRSxFQUFBbkIsRUFBQXJuSCxFQUFBRSxFQUFBRSxFQUFBamYsR0FDQXF3RCxFQUFBLEdBQUFnM0UsRUFBQWxCLEVBQUFybkgsRUFBQUUsRUFBQW9uSCxFQUFBcG1JLElBSUEwdkksRUFBQS9uSSxJQWdOQWYsRUFBQStnSSxjQUNBL2dJLEVBQUFxdUksc0JBdkxBLFNBQUFoVyxFQUFBcGdHLEVBQUFDLEVBQUE5K0IsR0FDQSxhQUFBQSxJQUFBNitCLEVBQUFvZ0csR0FBQWovSCxHQUFBOCtCLEVBQUFELEtBdUxBajRCLEVBQUE0Z0ksZ0JBMUtBLFNBQUF2SSxFQUFBcGdHLEVBQUFDLEVBQUE3RyxFQUFBc2tHLEdBQ0EsSUFBQWo0SCxFQUFBMjZILEVBQUEsRUFBQXBnRyxFQUFBQyxFQUNBdjZCLEVBQUEsR0FBQXM2QixFQUFBb2dHLEdBQ0FsOUgsRUFBQWs5SCxFQUFBaG5HLEVBQ0EzdkIsRUFBQSxFQUVBLEdBQUF1ckksRUFBQXZ2SSxHQUNBd3ZJLEVBQUF2dkksS0FDQTB2SSxHQUFBbHlJLEVBQUF3QyxJQUVBLEdBQUEwdkksR0FBQSxJQUNBMVgsRUFBQWowSCxLQUFBMnJJLE9BR0csQ0FDSCxJQUFBQyxFQUFBM3ZJLElBQUEsRUFBQUQsRUFBQXZDLEVBRUEsR0FBQTh4SSxFQUFBSyxJQUNBRCxHQUFBMXZJLEdBQUEsRUFBQUQsS0FFQSxHQUFBMnZJLEdBQUEsSUFDQTFYLEVBQUFqMEgsS0FBQTJySSxRQUVLLEdBQUFDLEVBQUEsR0FDTCxJQUNBRCxFQURBRSxFQUFBekUsRUFBQXdFLEdBRUFyVSxJQUFBdDdILEVBQUE0dkksSUFBQSxFQUFBN3ZJLElBREEydkksSUFBQTF2SSxFQUFBNHZJLElBQUEsRUFBQTd2SSxLQUdBLEdBQUEydkksR0FBQSxJQUNBMVgsRUFBQWowSCxLQUFBMnJJLEdBR0FwVSxHQUFBLEdBQUFBLEdBQUEsSUFDQXRELEVBQUFqMEgsS0FBQXUzSCxJQUtBLE9BQUF2M0gsR0FxSUExQixFQUFBNmdJLGtCQXpIQSxTQUFBeEksRUFBQXBnRyxFQUFBQyxHQUNBLElBQUFvMkcsRUFBQWpXLEVBQUFuZ0csRUFBQSxFQUFBRCxFQUVBLFdBQUFxMkcsRUFFQSxJQUVBalcsRUFBQXBnRyxHQUFBcTJHLEdBbUhBdHVJLEVBQUF1dUksbUJBckdBLFNBQUFsVyxFQUFBcGdHLEVBQUFDLEVBQUE5K0IsRUFBQXF3RCxHQUNBLElBQUFva0YsR0FBQTUxRyxFQUFBb2dHLEdBQUFqL0gsRUFBQWkvSCxFQUNBeVYsR0FBQTUxRyxFQUFBRCxHQUFBNytCLEVBQUE2K0IsRUFDQSsxRyxHQUFBRixFQUFBRCxHQUFBejBJLEVBQUF5MEksRUFFQXBrRixFQUFBLEdBQUE0dUUsRUFDQTV1RSxFQUFBLEdBQUFva0YsRUFDQXBrRixFQUFBLEdBQUF1a0YsRUFFQXZrRixFQUFBLEdBQUF1a0YsRUFDQXZrRixFQUFBLEdBQUFxa0YsRUFDQXJrRixFQUFBLEdBQUF2eEIsR0EyRkFsNEIsRUFBQTRoSSxzQkF6RUEsU0FBQXRDLEVBQUFDLEVBQUF0bkgsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQXpGLEVBQUFDLEVBQUE2MkMsR0FFQSxJQUFBcndELEVBQ0FvMkMsRUFBQSxLQUNBenVDLEVBQUFndEMsSUFDQSsrRixFQUFBLEdBQUFuNkgsRUFDQW02SCxFQUFBLEdBQUFsNkgsRUFHQSxRQUFBc3NHLEVBQUEsRUFBa0JBLEVBQUEsRUFBUUEsR0FBQSxJQUMxQjZ0QixFQUFBLEdBQUFoTSxFQUFBekIsRUFBQXJuSCxFQUFBRSxFQUFBK21HLEdBQ0E2dEIsRUFBQSxHQUFBaE0sRUFBQXhCLEVBQUFybkgsRUFBQUUsRUFBQThtRyxJQUNBaXZCLEVBQUExQixFQUFBSyxFQUFBQyxJQUVBaHNJLElBQ0EzSCxFQUFBOGxILEVBQ0FuK0csRUFBQW90SSxHQUlBcHRJLEVBQUFndEMsSUFFQSxRQUFBdjBDLEVBQUEsRUFBaUJBLEVBQUEsTUFDakJnMkMsRUFBQW05RixHQUR5Qm56SSxJQUFBLENBS3pCLElBQUFreUcsRUFBQXR5RyxFQUFBbzJDLEVBQ0E3c0IsRUFBQXZwQixFQUFBbzJDLEVBRUF1OUYsRUFBQSxHQUFBaE0sRUFBQXpCLEVBQUFybkgsRUFBQUUsRUFBQXV6RixHQUNBcWhDLEVBQUEsR0FBQWhNLEVBQUF4QixFQUFBcm5ILEVBQUFFLEVBQUFzekYsR0FDQSxJQUFBeWlDLEVBQUExQixFQUFBTSxFQUFBRCxHQUVBLEdBQUFwaEMsR0FBQSxHQUFBeWlDLEVBQUFwdEksRUFDQTNILEVBQUFzeUcsRUFDQTNxRyxFQUFBb3RJLE1BQ0ssQ0FFTG5CLEVBQUEsR0FBQWpNLEVBQUF6QixFQUFBcm5ILEVBQUFFLEVBQUF3SyxHQUNBcXFILEVBQUEsR0FBQWpNLEVBQUF4QixFQUFBcm5ILEVBQUFFLEVBQUF1SyxHQUNBLElBQUF5ckgsRUFBQTNCLEVBQUFPLEVBQUFGLEdBRUFucUgsR0FBQSxHQUFBeXJILEVBQUFydEksR0FDQTNILEVBQUF1cEIsRUFDQTVoQixFQUFBcXRJLEdBRUE1K0YsR0FBQSxJQVlBLE9BTkFpYSxJQUNBQSxFQUFBLEdBQUFzM0UsRUFBQXpCLEVBQUFybkgsRUFBQUUsRUFBQS9lLEdBQ0Fxd0QsRUFBQSxHQUFBczNFLEVBQUF4QixFQUFBcm5ILEVBQUFFLEVBQUFoZixJQUlBMHZJLEVBQUEvbkksNERDOWZBLElBc0NBcUQsRUFwQ0EsaUJBQUFvcUksSUFBQSxtQkFBQUEsR0FBQUMsbUJBR0FqekUsV0FDQWt6RSxNQUNBbDdHLE1BQUEsRUFDQTROLEtBQUEsRUFFQVIsaUJBQUEsRUFDQTh6QixjQUFBLEVBQ0FpNkUsc0JBQUEsR0FFQyxvQkFBQXB6SSxVQUFBLG9CQUFBb21DLE1BR0Q2NUIsV0FDQWt6RSxNQUNBbDdHLE1BQUEsRUFDQW83RyxRQUFBLEVBQ0FodUcsaUJBQUEsR0FFQyxvQkFBQTR5QyxXQUdEaFksV0FDQWt6RSxNQUNBbDdHLE1BQUEsRUFDQW83RyxRQUFBLEVBRUFodUcsaUJBQUEsRUFDQTh6QixjQUFBLEdBVUEsU0FBQW02RSxHQUNBLElBQ0FyekUsS0FlQXN6RSxFQUFBRCxFQUFBMWdFLE1BQUEscUJBR0FxMkIsRUFBQXFxQyxFQUFBMWdFLE1BQUEsbUJBQ0EwZ0UsRUFBQTFnRSxNQUFBLDZCQUNBNGdFLEVBQUFGLEVBQUExZ0UsTUFBQSxrQkFFQTFTLEVBQUEsa0JBQUFyNEQsS0FBQXlySSxHQXFCQUMsSUFDQXR6RSxFQUFBc3pFLFNBQUEsRUFDQXR6RSxFQUFBMkIsUUFBQTJ4RSxFQUFBLElBS0F0cUMsSUFDQWhwQyxFQUFBZ3BDLElBQUEsRUFDQWhwQyxFQUFBMkIsUUFBQXFuQyxFQUFBLElBR0F1cUMsSUFDQXZ6RSxFQUFBdXpFLE1BQUEsRUFDQXZ6RSxFQUFBMkIsUUFBQTR4RSxFQUFBLElBS0F0ekUsSUFDQUQsRUFBQUMsUUFBQSxHQVFBLE9BQ0FELFVBQ0FrekUsTUFDQWw3RyxNQUFBLEVBR0FvTixrQkFBQXJsQyxTQUFBRyxjQUFBLFVBQUFreUgsV0FDQWw1RCxhQUFBLG9CQUFBczZFLFFBSUFMLHFCQUFBLGlCQUFBMzRJLFNBQUF3bEUsRUFBQWdwQyxLQUFBaHBDLEVBQUF1ekUsS0FFQUUsdUJBQUEsa0JBQUFqNUksU0FJQXdsRSxFQUFBdXpFLE1BQUF2ekUsRUFBQWdwQyxJQUFBaHBDLEVBQUEyQixTQUFBLEtBakdBK3hFLENBQUExN0QsVUFBQTI3RCxXQXFIQTd5SSxFQUFBMEQsUUFBQW9FLDhEQy9KQSxJQUFBa3FELEVBQUE3MkQsRUFBQSxnREFFQXVJLEVBQUF5MkgsV0FBQW5vRSxFQUVBLElBQUFuN0IsRUFBQTE3QixFQUFBLDBDQU9BMjNJLEVBQUEsb0JBQUFwNUksaUJBQUFxd0csaUJBQ0FncEMsRUFBQSxpREFXQSxTQUFBaEksRUFBQXo0SCxFQUFBaFcsRUFBQTZ3RCxFQUFBNmxGLEdBaUNBLE9BaENBN2xGLFFBV0E2bEYsSUFBQW44RyxFQUFBeU4sZ0JBQ0EydUcsRUFBQTNnSSxFQUFBaFcsRUFBQTZ3RCxHQVFBdDJCLEVBQUFxb0MsUUFBQXN6RSxTQUFBLE1BQUFsMkksRUFBQTQySSxRQUFBNTJJLEVBQUE0MkksU0FBQTUySSxFQUFBOHRCLFNBQ0EraUMsRUFBQTRnRSxJQUFBenhILEVBQUE0MkksT0FDQS9sRixFQUFBNmdFLElBQUExeEgsRUFBQTYySSxRQUVBLE1BQUE3MkksRUFBQTh0QixTQUNBK2lDLEVBQUE0Z0UsSUFBQXp4SCxFQUFBOHRCLFFBQ0EraUMsRUFBQTZnRSxJQUFBMXhILEVBQUErdEIsU0FHQTRvSCxFQUFBM2dJLEVBQUFoVyxFQUFBNndELEdBR0FBLEVBR0EsU0FBQThsRixFQUFBM2dJLEVBQUFoVyxFQUFBNndELEdBRUEsSUFBQTN3QixFQS9DQSxTQUFBbHFCLEdBRUEsT0FBQUEsRUFBQWtuRCxzQkFBQWxuRCxFQUFBa25ELHlCQUNBdjZCLEtBQUEsRUFDQUMsSUFBQSxHQTJDQXM2QixDQUFBbG5ELEdBQ0E2NkMsRUFBQTRnRSxJQUFBenhILEVBQUEyNkcsUUFBQXo2RSxFQUFBeUMsS0FDQWt1QixFQUFBNmdFLElBQUExeEgsRUFBQTQ2RyxRQUFBMTZFLEVBQUEwQyxJQTJGQSxJQUFBNVEsRUFBQXdrSCxFQUFBLFNBQUF4MkksR0FDQUEsRUFBQXc0RyxpQkFDQXg0RyxFQUFBeTRHLGtCQUNBejRHLEVBQUEyeUgsY0FBQSxHQUNDLFNBQUEzeUgsR0FDREEsRUFBQW81RyxhQUFBLEVBQ0FwNUcsRUFBQTJ5SCxjQUFBLEdBU0F2ckgsRUFBQXFuSSxnQkFDQXJuSSxFQUFBZ2lDLGVBbkdBLFNBQUFwekIsRUFBQWhXLEVBQUEwMkksR0FHQSxVQUZBMTJJLEtBQUE1QyxPQUFBNFQsT0FFQXlnSCxJQUNBLE9BQUF6eEgsRUFHQSxJQUFBKzZCLEVBQUEvNkIsRUFBQXNFLEtBR0EsR0FGQXkyQixLQUFBNTdCLFFBQUEsWUFLRyxDQUNILElBQUFxdkksRUFBQSxZQUFBenpHLEVBQUEvNkIsRUFBQWk3RyxjQUFBLEdBQUFqN0csRUFBQSs1RyxlQUFBLEdBQ0F5MEIsR0FBQUMsRUFBQXo0SCxFQUFBdzRILEVBQUF4dUksRUFBQTAySSxRQUpBakksRUFBQXo0SCxFQUFBaFcsSUFBQTAySSxHQUNBMTJJLEVBQUFpekgsUUFBQWp6SCxFQUFBZ3pILFdBQUFoekgsRUFBQWd6SCxXQUFBLE1BQUFoekgsRUFBQWk2RyxRQUFBLEtBVUEsSUFBQWxKLEVBQUEvd0csRUFBQSt3RyxPQU1BLE9BSkEsTUFBQS93RyxFQUFBbzdHLFlBQUFwekcsSUFBQStvRyxHQUFBMGxDLEVBQUFqc0ksS0FBQXhLLEVBQUFzRSxRQUNBdEUsRUFBQW83RyxNQUFBLEVBQUFySyxFQUFBLElBQUFBLEVBQUEsSUFBQUEsRUFBQSxLQUdBL3dHLEdBd0VBb0gsRUFBQXFtRyxpQkEvREEsU0FBQXozRixFQUFBdlcsRUFBQWk3QixHQUNBODdHLEVBcUJBeGdJLEVBQUF5M0YsaUJBQUFodUcsRUFBQWk3QixHQUVBMWtCLEVBQUEwM0YsWUFBQSxLQUFBanVHLEVBQUFpN0IsSUF3Q0F0ekIsRUFBQTZ0RyxvQkFwQ0EsU0FBQWovRixFQUFBdlcsRUFBQWk3QixHQUNBODdHLEVBQ0F4Z0ksRUFBQWkvRixvQkFBQXgxRyxFQUFBaTdCLEdBRUExa0IsRUFBQThnSSxZQUFBLEtBQUFyM0ksRUFBQWk3QixJQWlDQXR6QixFQUFBNHFCLE9BQ0E1cUIsRUFBQTJ2SSxhQVhBLFNBQUEvMkksR0FFQSxPQUFBQSxFQUFBbzdHLE1BQUEsNERDaEtBLElBQUE0N0IsRUFBQSxLQU1BdHpJLEVBQUEwRCxRQUpBLFdBQ0EsT0FBQTR2SSwrRENSQSxJQUVBOVEsRUFGQXJuSSxFQUFBLHdDQUVBcW5JLFVBRUEzcUUsRUFBQSxhQUVBLElBQUEycUUsRUFDQTNxRSxFQUFBLFdBQ0EsUUFBQS9lLEtBQUF6cUMsVUFDQSxVQUFBM1EsTUFBQTJRLFVBQUF5cUMsS0FHQzBwRixFQUFBLElBQ0QzcUUsRUFBQSxXQUNBLFFBQUEvZSxLQUFBenFDLFVBQ0F6UyxRQUFBaThELElBQUF4cEQsVUFBQXlxQyxNQUtBLElBQUFoeEMsRUFBQSt2RCxFQUNBNzNELEVBQUEwRCxRQUFBb0UsNkRDakJBLElBQUF5ckksRUFBQSxvQkFBQXZzRSxhQUFBdnFCLE1BQUF1cUIsYUFNQSxTQUFBL2hFLElBQ0EsSUFBQWtvRCxFQUFBLElBQUFvbUYsRUFBQSxHQUVBLE9BREE3c0gsRUFBQXltQyxHQUNBQSxFQVFBLFNBQUF6bUMsRUFBQXltQyxHQU9BLE9BTkFBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBU0EsU0FBQWpVLEVBQUFpVSxFQUFBM29ELEdBT0EsT0FOQTJvRCxFQUFBLEdBQUEzb0QsRUFBQSxHQUNBMm9ELEVBQUEsR0FBQTNvRCxFQUFBLEdBQ0Eyb0QsRUFBQSxHQUFBM29ELEVBQUEsR0FDQTJvRCxFQUFBLEdBQUEzb0QsRUFBQSxHQUNBMm9ELEVBQUEsR0FBQTNvRCxFQUFBLEdBQ0Eyb0QsRUFBQSxHQUFBM29ELEVBQUEsR0FDQTJvRCxFQWtJQXpwRCxFQUFBdUIsU0FDQXZCLEVBQUFnakIsV0FDQWhqQixFQUFBdzFDLE9BQ0F4MUMsRUFBQWlqQixJQTNIQSxTQUFBd21DLEVBQUFxbUYsRUFBQUMsR0FJQSxJQUFBQyxFQUFBRixFQUFBLEdBQUFDLEVBQUEsR0FBQUQsRUFBQSxHQUFBQyxFQUFBLEdBQ0FFLEVBQUFILEVBQUEsR0FBQUMsRUFBQSxHQUFBRCxFQUFBLEdBQUFDLEVBQUEsR0FDQUcsRUFBQUosRUFBQSxHQUFBQyxFQUFBLEdBQUFELEVBQUEsR0FBQUMsRUFBQSxHQUNBSSxFQUFBTCxFQUFBLEdBQUFDLEVBQUEsR0FBQUQsRUFBQSxHQUFBQyxFQUFBLEdBQ0FLLEVBQUFOLEVBQUEsR0FBQUMsRUFBQSxHQUFBRCxFQUFBLEdBQUFDLEVBQUEsR0FBQUQsRUFBQSxHQUNBTyxFQUFBUCxFQUFBLEdBQUFDLEVBQUEsR0FBQUQsRUFBQSxHQUFBQyxFQUFBLEdBQUFELEVBQUEsR0FPQSxPQU5Bcm1GLEVBQUEsR0FBQXVtRixFQUNBdm1GLEVBQUEsR0FBQXdtRixFQUNBeG1GLEVBQUEsR0FBQXltRixFQUNBem1GLEVBQUEsR0FBQTBtRixFQUNBMW1GLEVBQUEsR0FBQTJtRixFQUNBM21GLEVBQUEsR0FBQTRtRixFQUNBNW1GLEdBNEdBenBELEVBQUE2M0IsVUFsR0EsU0FBQTR4QixFQUFBL3JELEVBQUFndUQsR0FPQSxPQU5BakMsRUFBQSxHQUFBL3JELEVBQUEsR0FDQStyRCxFQUFBLEdBQUEvckQsRUFBQSxHQUNBK3JELEVBQUEsR0FBQS9yRCxFQUFBLEdBQ0ErckQsRUFBQSxHQUFBL3JELEVBQUEsR0FDQStyRCxFQUFBLEdBQUEvckQsRUFBQSxHQUFBZ3VELEVBQUEsR0FDQWpDLEVBQUEsR0FBQS9yRCxFQUFBLEdBQUFndUQsRUFBQSxHQUNBakMsR0E0RkF6cEQsRUFBQXNOLE9BbEZBLFNBQUFtOEMsRUFBQS9yRCxFQUFBNHlJLEdBQ0EsSUFBQUMsRUFBQTd5SSxFQUFBLEdBQ0E4eUksRUFBQTl5SSxFQUFBLEdBQ0EreUksRUFBQS95SSxFQUFBLEdBQ0FnekksRUFBQWh6SSxFQUFBLEdBQ0FpekksRUFBQWp6SSxFQUFBLEdBQ0FrekksRUFBQWx6SSxFQUFBLEdBQ0FrOEcsRUFBQTNxRyxLQUFBRyxJQUFBa2hJLEdBQ0FPLEVBQUE1aEksS0FBQUMsSUFBQW9oSSxHQU9BLE9BTkE3bUYsRUFBQSxHQUFBOG1GLEVBQUFNLEVBQUFILEVBQUE5MkIsRUFDQW53RCxFQUFBLElBQUE4bUYsRUFBQTMyQixFQUFBODJCLEVBQUFHLEVBQ0FwbkYsRUFBQSxHQUFBK21GLEVBQUFLLEVBQUFGLEVBQUEvMkIsRUFDQW53RCxFQUFBLElBQUErbUYsRUFBQTUyQixFQUFBaTNCLEVBQUFGLEVBQ0FsbkYsRUFBQSxHQUFBb25GLEVBQUFKLEVBQUE3MkIsRUFBQWczQixFQUNBbm5GLEVBQUEsR0FBQW9uRixFQUFBRCxFQUFBaDNCLEVBQUE2MkIsRUFDQWhuRixHQW9FQXpwRCxFQUFBdWQsTUExREEsU0FBQWtzQyxFQUFBL3JELEVBQUFndUQsR0FDQSxJQUFBb2xGLEVBQUFwbEYsRUFBQSxHQUNBcWxGLEVBQUFybEYsRUFBQSxHQU9BLE9BTkFqQyxFQUFBLEdBQUEvckQsRUFBQSxHQUFBb3pJLEVBQ0FybkYsRUFBQSxHQUFBL3JELEVBQUEsR0FBQXF6SSxFQUNBdG5GLEVBQUEsR0FBQS9yRCxFQUFBLEdBQUFvekksRUFDQXJuRixFQUFBLEdBQUEvckQsRUFBQSxHQUFBcXpJLEVBQ0F0bkYsRUFBQSxHQUFBL3JELEVBQUEsR0FBQW96SSxFQUNBcm5GLEVBQUEsR0FBQS9yRCxFQUFBLEdBQUFxekksRUFDQXRuRixHQWtEQXpwRCxFQUFBZ3hGLE9BekNBLFNBQUF2bkMsRUFBQS9yRCxHQUNBLElBQUE2eUksRUFBQTd5SSxFQUFBLEdBQ0E4eUksRUFBQTl5SSxFQUFBLEdBQ0EreUksRUFBQS95SSxFQUFBLEdBQ0FnekksRUFBQWh6SSxFQUFBLEdBQ0FpekksRUFBQWp6SSxFQUFBLEdBQ0FrekksRUFBQWx6SSxFQUFBLEdBQ0FzekksRUFBQVQsRUFBQUksRUFBQUQsRUFBQUYsRUFFQSxPQUFBUSxHQUlBQSxFQUFBLEVBQUFBLEVBQ0F2bkYsRUFBQSxHQUFBa25GLEVBQUFLLEVBQ0F2bkYsRUFBQSxJQUFBaW5GLEVBQUFNLEVBQ0F2bkYsRUFBQSxJQUFBK21GLEVBQUFRLEVBQ0F2bkYsRUFBQSxHQUFBOG1GLEVBQUFTLEVBQ0F2bkYsRUFBQSxJQUFBK21GLEVBQUFJLEVBQUFELEVBQUFGLEdBQUFPLEVBQ0F2bkYsRUFBQSxJQUFBaW5GLEVBQUFELEVBQUFGLEVBQUFLLEdBQUFJLEVBQ0F2bkYsR0FWQSxNQWdDQXpwRCxFQUFBNmlCLE1BZEEsU0FBQW5sQixHQUNBLElBQUFDLEVBQUE0RCxJQUVBLE9BREFpMEMsRUFBQTczQyxFQUFBRCxHQUNBQywrREMxS0EsSUFBQXN6SSxFQUFBLEdBQ0FDLEVBQUEsRUFjQSxTQUFBQyxFQUFBQyxFQUFBOXlELEVBQUFDLEVBQUEvUCxHQUNBLElBQUE2aUUsRUFBQS95RCxFQUFBLEVBRUEsR0FBQSt5RCxJQUFBOXlELEVBQ0EsU0FHQSxHQUFBL1AsRUFBQTRpRSxFQUFBQyxLQUFBRCxFQUFBOXlELElBQUEsR0FDQSxLQUFBK3lELEVBQUE5eUQsR0FBQS9QLEVBQUE0aUUsRUFBQUMsR0FBQUQsRUFBQUMsRUFBQSxPQUNBQSxLQWFBLFNBQUFELEVBQUE5eUQsRUFBQUMsR0FDQUEsSUFFQSxLQUFBRCxFQUFBQyxHQUFBLENBQ0EsSUFBQW5sRixFQUFBZzRJLEVBQUE5eUQsR0FDQTh5RCxFQUFBOXlELEtBQUE4eUQsRUFBQTd5RCxHQUNBNnlELEVBQUE3eUQsS0FBQW5sRixHQWhCQWs0SSxDQUFBRixFQUFBOXlELEVBQUEreUQsUUFFQSxLQUFBQSxFQUFBOXlELEdBQUEvUCxFQUFBNGlFLEVBQUFDLEdBQUFELEVBQUFDLEVBQUEsUUFDQUEsSUFJQSxPQUFBQSxFQUFBL3lELEVBYUEsU0FBQWl6RCxFQUFBSCxFQUFBOXlELEVBQUFDLEVBQUEvdUUsRUFBQWcvRCxHQUtBLElBSkFoL0QsSUFBQTh1RSxHQUNBOXVFLElBR1FBLEVBQUErdUUsRUFBWS91RSxJQUFBLENBTXBCLElBTEEsSUFHQXN4QyxFQUhBMHdGLEVBQUFKLEVBQUE1aEksR0FDQStyQixFQUFBK2lELEVBQ0F2cUMsRUFBQXZrQyxFQUdBK3JCLEVBQUF3WSxHQUdBeTZCLEVBQUFnakUsRUFBQUosRUFGQXR3RixFQUFBdmxCLEVBQUF3WSxJQUFBLElBRUEsRUFDQUEsRUFBQStNLEVBRUF2bEIsRUFBQXVsQixFQUFBLEVBSUEsSUFBQXAvQyxFQUFBOE4sRUFBQStyQixFQUVBLE9BQUE3NUIsR0FDQSxPQUNBMHZJLEVBQUE3MUcsRUFBQSxHQUFBNjFHLEVBQUE3MUcsRUFBQSxHQUVBLE9BQ0E2MUcsRUFBQTcxRyxFQUFBLEdBQUE2MUcsRUFBQTcxRyxFQUFBLEdBRUEsT0FDQTYxRyxFQUFBNzFHLEVBQUEsR0FBQTYxRyxFQUFBNzFHLEdBQ0EsTUFFQSxRQUNBLEtBQUE3NUIsRUFBQSxHQUNBMHZJLEVBQUE3MUcsRUFBQTc1QixHQUFBMHZJLEVBQUE3MUcsRUFBQTc1QixFQUFBLEdBQ0FBLElBS0EwdkksRUFBQTcxRyxHQUFBaTJHLEdBSUEsU0FBQUMsRUFBQS80SSxFQUFBMDRJLEVBQUE1aEksRUFBQS9WLEVBQUFpNEksRUFBQWxqRSxHQUNBLElBQUFtakUsRUFBQSxFQUNBQyxFQUFBLEVBQ0F2aUksRUFBQSxFQUVBLEdBQUFtL0QsRUFBQTkxRSxFQUFBMDRJLEVBQUE1aEksRUFBQWtpSSxJQUFBLEdBR0EsSUFGQUUsRUFBQW40SSxFQUFBaTRJLEVBRUFyaUksRUFBQXVpSSxHQUFBcGpFLEVBQUE5MUUsRUFBQTA0SSxFQUFBNWhJLEVBQUFraUksRUFBQXJpSSxJQUFBLEdBQ0FzaUksRUFBQXRpSSxHQUNBQSxFQUFBLEdBQUFBLEdBQUEsS0FFQSxJQUNBQSxFQUFBdWlJLEdBSUF2aUksRUFBQXVpSSxJQUNBdmlJLEVBQUF1aUksR0FHQUQsR0FBQUQsRUFDQXJpSSxHQUFBcWlJLE1BQ0csQ0FHSCxJQUZBRSxFQUFBRixFQUFBLEVBRUFyaUksRUFBQXVpSSxHQUFBcGpFLEVBQUE5MUUsRUFBQTA0SSxFQUFBNWhJLEVBQUFraUksRUFBQXJpSSxLQUFBLEdBQ0FzaUksRUFBQXRpSSxHQUNBQSxFQUFBLEdBQUFBLEdBQUEsS0FFQSxJQUNBQSxFQUFBdWlJLEdBSUF2aUksRUFBQXVpSSxJQUNBdmlJLEVBQUF1aUksR0FHQSxJQUFBelMsRUFBQXdTLEVBQ0FBLEVBQUFELEVBQUFyaUksRUFDQUEsRUFBQXFpSSxFQUFBdlMsRUFLQSxJQUZBd1MsSUFFQUEsRUFBQXRpSSxHQUFBLENBQ0EsSUFBQXZPLEVBQUE2d0ksR0FBQXRpSSxFQUFBc2lJLElBQUEsR0FFQW5qRSxFQUFBOTFFLEVBQUEwNEksRUFBQTVoSSxFQUFBMU8sSUFBQSxFQUNBNndJLEVBQUE3d0ksRUFBQSxFQUVBdU8sRUFBQXZPLEVBSUEsT0FBQXVPLEVBR0EsU0FBQXdpSSxFQUFBbjVJLEVBQUEwNEksRUFBQTVoSSxFQUFBL1YsRUFBQWk0SSxFQUFBbGpFLEdBQ0EsSUFBQW1qRSxFQUFBLEVBQ0FDLEVBQUEsRUFDQXZpSSxFQUFBLEVBRUEsR0FBQW0vRCxFQUFBOTFFLEVBQUEwNEksRUFBQTVoSSxFQUFBa2lJLElBQUEsR0FHQSxJQUZBRSxFQUFBRixFQUFBLEVBRUFyaUksRUFBQXVpSSxHQUFBcGpFLEVBQUE5MUUsRUFBQTA0SSxFQUFBNWhJLEVBQUFraUksRUFBQXJpSSxJQUFBLEdBQ0FzaUksRUFBQXRpSSxHQUNBQSxFQUFBLEdBQUFBLEdBQUEsS0FFQSxJQUNBQSxFQUFBdWlJLEdBSUF2aUksRUFBQXVpSSxJQUNBdmlJLEVBQUF1aUksR0FHQSxJQUFBelMsRUFBQXdTLEVBQ0FBLEVBQUFELEVBQUFyaUksRUFDQUEsRUFBQXFpSSxFQUFBdlMsTUFDRyxDQUdILElBRkF5UyxFQUFBbjRJLEVBQUFpNEksRUFFQXJpSSxFQUFBdWlJLEdBQUFwakUsRUFBQTkxRSxFQUFBMDRJLEVBQUE1aEksRUFBQWtpSSxFQUFBcmlJLEtBQUEsR0FDQXNpSSxFQUFBdGlJLEdBQ0FBLEVBQUEsR0FBQUEsR0FBQSxLQUVBLElBQ0FBLEVBQUF1aUksR0FJQXZpSSxFQUFBdWlJLElBQ0F2aUksRUFBQXVpSSxHQUdBRCxHQUFBRCxFQUNBcmlJLEdBQUFxaUksRUFLQSxJQUZBQyxJQUVBQSxFQUFBdGlJLEdBQUEsQ0FDQSxJQUFBdk8sRUFBQTZ3SSxHQUFBdGlJLEVBQUFzaUksSUFBQSxHQUVBbmpFLEVBQUE5MUUsRUFBQTA0SSxFQUFBNWhJLEVBQUExTyxJQUFBLEVBQ0F1TyxFQUFBdk8sRUFFQTZ3SSxFQUFBN3dJLEVBQUEsRUFJQSxPQUFBdU8sRUFHQSxTQUFBeWlJLEVBQUFWLEVBQUE1aUUsR0FDQSxJQUNBLzBFLEVBR0FzNEksRUFDQUMsRUFMQUMsRUFBQWYsRUFNQWdCLEVBQUEsRUFDQXo0SSxFQUFBMjNJLEVBQUEzM0ksT0FNQSxJQUFBMGxJLEtBdUNBLFNBQUFnVCxFQUFBMzRJLEdBQ0EsSUFBQTQ0SSxFQUFBTCxFQUFBdjRJLEdBQ0E2NEksRUFBQUwsRUFBQXg0SSxHQUNBODRJLEVBQUFQLEVBQUF2NEksRUFBQSxHQUNBZ1UsRUFBQXdrSSxFQUFBeDRJLEVBQUEsR0FDQXc0SSxFQUFBeDRJLEdBQUE2NEksRUFBQTdrSSxFQUVBaFUsSUFBQTA0SSxFQUFBLElBQ0FILEVBQUF2NEksRUFBQSxHQUFBdTRJLEVBQUF2NEksRUFBQSxHQUNBdzRJLEVBQUF4NEksRUFBQSxHQUFBdzRJLEVBQUF4NEksRUFBQSxJQUdBMDRJLElBQ0EsSUFBQTk4RixFQUFBeThGLEVBQUFULEVBQUFrQixHQUFBbEIsRUFBQWdCLEVBQUFDLEVBQUEsRUFBQTdqRSxHQUNBNGpFLEdBQUFoOUYsRUFHQSxLQUZBaTlGLEdBQUFqOUYsSUFRQSxLQUZBNW5DLEVBQUFpa0ksRUFBQUwsRUFBQWdCLEVBQUFDLEVBQUEsR0FBQWpCLEVBQUFrQixFQUFBOWtJLElBQUEsRUFBQWdoRSxNQU1BNmpFLEdBQUE3a0ksRUFPQSxTQUFBNGtJLEVBQUFDLEVBQUFDLEVBQUE5a0ksR0FDQSxJQUFBaFUsRUFBQSxFQUVBLElBQUFBLEVBQUEsRUFBZUEsRUFBQTY0SSxFQUFhNzRJLElBQzVCMmxJLEVBQUEzbEksR0FBQTQzSSxFQUFBZ0IsRUFBQTU0SSxHQUdBLElBQUErNEksRUFBQSxFQUNBQyxFQUFBRixFQUNBRyxFQUFBTCxFQUdBLEdBRkFoQixFQUFBcUIsS0FBQXJCLEVBQUFvQixLQUVBLEtBQUFobEksRUFBQSxDQUNBLElBQUFoVSxFQUFBLEVBQWlCQSxFQUFBNjRJLEVBQWE3NEksSUFDOUI0M0ksRUFBQXFCLEVBQUFqNUksR0FBQTJsSSxFQUFBb1QsRUFBQS80SSxHQUdBLE9BR0EsT0FBQTY0SSxFQUFBLENBQ0EsSUFBQTc0SSxFQUFBLEVBQWlCQSxFQUFBZ1UsRUFBYWhVLElBQzlCNDNJLEVBQUFxQixFQUFBajVJLEdBQUE0M0ksRUFBQW9CLEVBQUFoNUksR0FJQSxZQURBNDNJLEVBQUFxQixFQUFBamxJLEdBQUEyeEgsRUFBQW9ULElBSUEsSUFDQUcsRUFBQUMsRUFBQUMsRUFEQUMsRUFBQVosRUFHQSxRQUNBUyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsR0FBQSxFQUVBLEdBQ0EsR0FBQXBrRSxFQUFBNGlFLEVBQUFvQixHQUFBclQsRUFBQW9ULElBQUEsR0FLQSxHQUpBbkIsRUFBQXFCLEtBQUFyQixFQUFBb0IsS0FDQUcsSUFDQUQsRUFBQSxFQUVBLEtBQUFsbEksRUFBQSxDQUNBb2xJLEdBQUEsRUFDQSxZQU9BLEdBSkF4QixFQUFBcUIsS0FBQXRULEVBQUFvVCxLQUNBRyxJQUNBQyxFQUFBLEVBRUEsS0FBQU4sRUFBQSxDQUNBTyxHQUFBLEVBQ0EsY0FHT0YsRUFBQUMsR0FBQUUsR0FFUCxHQUFBRCxFQUNBLE1BR0EsR0FHQSxRQUZBRixFQUFBYixFQUFBVCxFQUFBb0IsR0FBQXJULEVBQUFvVCxFQUFBRixFQUFBLEVBQUE3akUsSUFFQSxDQUNBLElBQUFoMUUsRUFBQSxFQUFxQkEsRUFBQWs1SSxFQUFZbDVJLElBQ2pDNDNJLEVBQUFxQixFQUFBajVJLEdBQUEybEksRUFBQW9ULEVBQUEvNEksR0FPQSxHQUpBaTVJLEdBQUFDLEVBQ0FILEdBQUFHLEdBQ0FMLEdBQUFLLElBRUEsR0FDQUUsR0FBQSxFQUNBLE9BTUEsR0FGQXhCLEVBQUFxQixLQUFBckIsRUFBQW9CLEtBRUEsS0FBQWhsSSxFQUFBLENBQ0FvbEksR0FBQSxFQUNBLE1BS0EsUUFGQUQsRUFBQWxCLEVBQUF0UyxFQUFBb1QsR0FBQW5CLEVBQUFvQixFQUFBaGxJLEVBQUEsRUFBQWdoRSxJQUVBLENBQ0EsSUFBQWgxRSxFQUFBLEVBQXFCQSxFQUFBbTVJLEVBQVluNUksSUFDakM0M0ksRUFBQXFCLEVBQUFqNUksR0FBQTQzSSxFQUFBb0IsRUFBQWg1SSxHQU9BLEdBSkFpNUksR0FBQUUsRUFDQUgsR0FBQUcsRUFHQSxLQUZBbmxJLEdBQUFtbEksR0FFQSxDQUNBQyxHQUFBLEVBQ0EsT0FNQSxHQUZBeEIsRUFBQXFCLEtBQUF0VCxFQUFBb1QsS0FFQSxLQUFBRixFQUFBLENBQ0FPLEdBQUEsRUFDQSxNQUdBQyxVQUNPSCxHQUFBeEIsR0FBQXlCLEdBQUF6QixHQUVQLEdBQUEwQixFQUNBLE1BR0FDLEVBQUEsSUFDQUEsRUFBQSxHQUdBQSxHQUFBLEVBTUEsSUFIQVosRUFBQVksR0FDQSxJQUFBWixFQUFBLEdBRUEsSUFBQUksRUFBQSxDQUNBLElBQUE3NEksRUFBQSxFQUFpQkEsRUFBQWdVLEVBQWFoVSxJQUM5QjQzSSxFQUFBcUIsRUFBQWo1SSxHQUFBNDNJLEVBQUFvQixFQUFBaDVJLEdBR0E0M0ksRUFBQXFCLEVBQUFqbEksR0FBQTJ4SCxFQUFBb1QsT0FDSyxRQUFBRixFQUNMLFVBQUFyNEksTUFFQSxJQUFBUixFQUFBLEVBQWlCQSxFQUFBNjRJLEVBQWE3NEksSUFDOUI0M0ksRUFBQXFCLEVBQUFqNUksR0FBQTJsSSxFQUFBb1QsRUFBQS80SSxJQWpKQXM1SSxDQUFBVixFQUFBQyxFQUFBQyxFQUFBOWtJLEdBc0pBLFNBQUE0a0ksRUFBQUMsRUFBQUMsRUFBQTlrSSxHQUNBLElBQUFoVSxFQUFBLEVBRUEsSUFBQUEsRUFBQSxFQUFlQSxFQUFBZ1UsRUFBYWhVLElBQzVCMmxJLEVBQUEzbEksR0FBQTQzSSxFQUFBa0IsRUFBQTk0SSxHQUdBLElBQUErNEksRUFBQUgsRUFBQUMsRUFBQSxFQUNBRyxFQUFBaGxJLEVBQUEsRUFDQWlsSSxFQUFBSCxFQUFBOWtJLEVBQUEsRUFDQXVsSSxFQUFBLEVBQ0FDLEVBQUEsRUFHQSxHQUZBNUIsRUFBQXFCLEtBQUFyQixFQUFBbUIsS0FFQSxLQUFBRixFQUFBLENBR0EsSUFGQVUsRUFBQU4sR0FBQWpsSSxFQUFBLEdBRUFoVSxFQUFBLEVBQWlCQSxFQUFBZ1UsRUFBYWhVLElBQzlCNDNJLEVBQUEyQixFQUFBdjVJLEdBQUEybEksRUFBQTNsSSxHQUdBLE9BR0EsT0FBQWdVLEVBQUEsQ0FNQSxJQUhBd2xJLEdBRkFQLEdBQUFKLEdBRUEsRUFDQVUsR0FGQVIsR0FBQUYsR0FFQSxFQUVBNzRJLEVBQUE2NEksRUFBQSxFQUEyQjc0SSxHQUFBLEVBQVFBLElBQ25DNDNJLEVBQUE0QixFQUFBeDVJLEdBQUE0M0ksRUFBQTJCLEVBQUF2NUksR0FJQSxZQURBNDNJLEVBQUFxQixHQUFBdFQsRUFBQXFULElBSUEsSUFBQUssRUFBQVosRUFFQSxRQUNBLElBQUFTLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxHQUFBLEVBRUEsR0FDQSxHQUFBcGtFLEVBQUEyd0QsRUFBQXFULEdBQUFwQixFQUFBbUIsSUFBQSxHQUtBLEdBSkFuQixFQUFBcUIsS0FBQXJCLEVBQUFtQixLQUNBRyxJQUNBQyxFQUFBLEVBRUEsS0FBQU4sRUFBQSxDQUNBTyxHQUFBLEVBQ0EsWUFPQSxHQUpBeEIsRUFBQXFCLEtBQUF0VCxFQUFBcVQsS0FDQUcsSUFDQUQsRUFBQSxFQUVBLEtBQUFsbEksRUFBQSxDQUNBb2xJLEdBQUEsRUFDQSxjQUdPRixFQUFBQyxHQUFBRSxHQUVQLEdBQUFELEVBQ0EsTUFHQSxHQUdBLFFBRkFGLEVBQUFMLEVBQUFSLEVBQUExUyxFQUFBcVQsR0FBQXBCLEVBQUFnQixFQUFBQyxJQUFBLEVBQUE3akUsSUFFQSxDQU9BLElBSkE2akUsR0FBQUssRUFDQU0sR0FIQVAsR0FBQUMsR0FHQSxFQUNBSyxHQUhBUixHQUFBRyxHQUdBLEVBRUFsNUksRUFBQWs1SSxFQUFBLEVBQThCbDVJLEdBQUEsRUFBUUEsSUFDdEM0M0ksRUFBQTRCLEVBQUF4NUksR0FBQTQzSSxFQUFBMkIsRUFBQXY1SSxHQUdBLE9BQUE2NEksRUFBQSxDQUNBTyxHQUFBLEVBQ0EsT0FNQSxHQUZBeEIsRUFBQXFCLEtBQUF0VCxFQUFBcVQsS0FFQSxLQUFBaGxJLEVBQUEsQ0FDQW9sSSxHQUFBLEVBQ0EsTUFLQSxRQUZBRCxFQUFBbmxJLEVBQUFpa0ksRUFBQUwsRUFBQW1CLEdBQUFwVCxFQUFBLEVBQUEzeEgsSUFBQSxFQUFBZ2hFLElBRUEsQ0FPQSxJQUpBaGhFLEdBQUFtbEksRUFDQUssR0FIQVAsR0FBQUUsR0FHQSxFQUNBSSxHQUhBUCxHQUFBRyxHQUdBLEVBRUFuNUksRUFBQSxFQUFxQkEsRUFBQW01SSxFQUFZbjVJLElBQ2pDNDNJLEVBQUE0QixFQUFBeDVJLEdBQUEybEksRUFBQTRULEVBQUF2NUksR0FHQSxHQUFBZ1UsR0FBQSxHQUNBb2xJLEdBQUEsRUFDQSxPQU1BLEdBRkF4QixFQUFBcUIsS0FBQXJCLEVBQUFtQixLQUVBLEtBQUFGLEVBQUEsQ0FDQU8sR0FBQSxFQUNBLE1BR0FDLFVBQ09ILEdBQUF4QixHQUFBeUIsR0FBQXpCLEdBRVAsR0FBQTBCLEVBQ0EsTUFHQUMsRUFBQSxJQUNBQSxFQUFBLEdBR0FBLEdBQUEsR0FHQVosRUFBQVksR0FFQSxJQUNBWixFQUFBLEdBR0EsT0FBQXprSSxFQUFBLENBTUEsSUFIQXdsSSxHQUZBUCxHQUFBSixHQUVBLEVBQ0FVLEdBRkFSLEdBQUFGLEdBRUEsRUFFQTc0SSxFQUFBNjRJLEVBQUEsRUFBMkI3NEksR0FBQSxFQUFRQSxJQUNuQzQzSSxFQUFBNEIsRUFBQXg1SSxHQUFBNDNJLEVBQUEyQixFQUFBdjVJLEdBR0E0M0ksRUFBQXFCLEdBQUF0VCxFQUFBcVQsT0FDSyxRQUFBaGxJLEVBQ0wsVUFBQXhULE1BSUEsSUFGQSs0SSxFQUFBTixHQUFBamxJLEVBQUEsR0FFQWhVLEVBQUEsRUFBaUJBLEVBQUFnVSxFQUFhaFUsSUFDOUI0M0ksRUFBQTJCLEVBQUF2NUksR0FBQTJsSSxFQUFBM2xJLElBclRBeTVJLENBQUFiLEVBQUFDLEVBQUFDLEVBQUE5a0ksSUFuRUF1a0ksS0FDQUMsS0E0WEE5dkksS0FBQWd4SSxVQXBYQSxXQUNBLEtBQUFoQixFQUFBLElBQ0EsSUFBQXh3SSxFQUFBd3dJLEVBQUEsRUFFQSxHQUFBeHdJLEdBQUEsR0FBQXN3SSxFQUFBdHdJLEVBQUEsSUFBQXN3SSxFQUFBdHdJLEdBQUFzd0ksRUFBQXR3SSxFQUFBLElBQUFBLEdBQUEsR0FBQXN3SSxFQUFBdHdJLEVBQUEsSUFBQXN3SSxFQUFBdHdJLEdBQUFzd0ksRUFBQXR3SSxFQUFBLEdBQ0Fzd0ksRUFBQXR3SSxFQUFBLEdBQUFzd0ksRUFBQXR3SSxFQUFBLElBQ0FBLFNBRU8sR0FBQXN3SSxFQUFBdHdJLEdBQUFzd0ksRUFBQXR3SSxFQUFBLEdBQ1AsTUFHQXl3SSxFQUFBendJLEtBeVdBUSxLQUFBaXhJLGVBcldBLFdBQ0EsS0FBQWpCLEVBQUEsSUFDQSxJQUFBeHdJLEVBQUF3d0ksRUFBQSxFQUVBeHdJLEVBQUEsR0FBQXN3SSxFQUFBdHdJLEVBQUEsR0FBQXN3SSxFQUFBdHdJLEVBQUEsSUFDQUEsSUFHQXl3SSxFQUFBendJLEtBOFZBUSxLQUFBa3hJLFFBNVhBLFNBQUFDLEVBQUFDLEdBQ0F2QixFQUFBRyxHQUFBbUIsRUFDQXJCLEVBQUFFLEdBQUFvQixFQUNBcEIsR0FBQSxHQTZhQTUxSSxFQUFBMEQsUUFqREEsU0FBQW94SSxFQUFBNWlFLEVBQUE4UCxFQUFBQyxHQUNBRCxJQUNBQSxFQUFBLEdBR0FDLElBQ0FBLEVBQUE2eUQsRUFBQTMzSSxRQUdBLElBQUE4NUksRUFBQWgxRCxFQUFBRCxFQUVBLEtBQUFpMUQsRUFBQSxJQUlBLElBQUF2QixFQUFBLEVBRUEsR0FBQXVCLEVBQUF0QyxFQUVBTSxFQUFBSCxFQUFBOXlELEVBQUFDLEVBQUFELEdBREEwekQsRUFBQWIsRUFBQUMsRUFBQTl5RCxFQUFBQyxFQUFBL1AsSUFDQUEsT0FGQSxDQU1BLElBQUFnbEUsRUFBQSxJQUFBMUIsRUFBQVYsRUFBQTVpRSxHQUNBaWxFLEVBem5CQSxTQUFBL3hJLEdBR0EsSUFGQSxJQUFBUixFQUFBLEVBRUFRLEdBQUF1dkksR0FDQS92SSxHQUFBLEVBQUFRLEVBQ0FBLElBQUEsRUFHQSxPQUFBQSxFQUFBUixFQWluQkF3eUksQ0FBQUgsR0FFQSxHQUdBLElBRkF2QixFQUFBYixFQUFBQyxFQUFBOXlELEVBQUFDLEVBQUEvUCxJQUVBaWxFLEVBQUEsQ0FDQSxJQUFBN3ZILEVBQUEydkgsRUFFQTN2SCxFQUFBNnZILElBQ0E3dkgsRUFBQTZ2SCxHQUdBbEMsRUFBQUgsRUFBQTl5RCxJQUFBMTZELEVBQUEwNkQsRUFBQTB6RCxFQUFBeGpFLEdBQ0F3akUsRUFBQXB1SCxFQUdBNHZILEVBQUFKLFFBQUE5MEQsRUFBQTB6RCxHQUNBd0IsRUFBQU4sWUFDQUssR0FBQXZCLEVBQ0ExekQsR0FBQTB6RCxRQUNHLElBQUF1QixHQUVIQyxFQUFBTCw2RUNocEJBLElBQUFRLEdBQ0FDLG9CQUFBLEVBQ0FDLGtCQUFBLEVBQ0FDLGdCQUFBLEVBQ0FDLGlCQUFBLEVBQ0FDLDBCQUFBLEVBQ0FDLHlCQUFBLEVBRUFDLGlCQUFBLEVBQ0FDLGtCQUFBLEdBRUFDLEdBQ0FDLHFCQUFBLEVBQ0FDLHNCQUFBLEVBQ0FDLDZCQUFBLEVBQ0FDLHNCQUFBLEVBQ0FDLHVCQUFBLEVBQ0FDLHNCQUFBLEVBQ0FDLHVCQUFBLEVBQ0FDLHdCQUFBLEVBQ0FDLHdCQUFBLEdBRUFDLEVBQUF4K0ksT0FBQUMsVUFBQTBMLFNBQ0E4eUksRUFBQWg4RixNQUFBeGlELFVBQ0F5K0ksRUFBQUQsRUFBQWoySSxRQUNBbTJJLEVBQUFGLEVBQUFwK0YsT0FDQXUrRixFQUFBSCxFQUFBcDRJLE1BQ0F3NEksRUFBQUosRUFBQW40SSxJQUNBdzRJLEVBQUFMLEVBQUF4N0csT0FFQWt2QixLQTRCQSxTQUFBNWxDLEVBQUEvZixHQUNBLFNBQUFBLEdBQUEsaUJBQUFBLEVBQ0EsT0FBQUEsRUFHQSxJQUFBN0csRUFBQTZHLEVBQ0F1eUksRUFBQVAsRUFBQXIrSSxLQUFBcU0sR0FFQSxzQkFBQXV5SSxHQUNBLElBQUFDLEVBQUF4eUksR0FBQSxDQUNBN0csS0FFQSxRQUFBekMsRUFBQSxFQUFBZ1MsRUFBQTFJLEVBQUFySixPQUEwQ0QsRUFBQWdTLEVBQVNoUyxJQUNuRHlDLEVBQUF6QyxHQUFBcXBCLEVBQUEvZixFQUFBdEosVUFHRyxHQUFBNDZJLEVBQUFpQixJQUNILElBQUFDLEVBQUF4eUksR0FBQSxDQUNBLElBQUE4MkMsRUFBQTkyQyxFQUFBWSxZQUVBLEdBQUFaLEVBQUFZLFlBQUE2SyxLQUNBdFMsRUFBQTI5QyxFQUFBcnJDLEtBQUF6TCxPQUNPLENBQ1A3RyxFQUFBLElBQUEyOUMsRUFBQTkyQyxFQUFBckosUUFFQSxJQUFBRCxFQUFBLEVBQUFnUyxFQUFBMUksRUFBQXJKLE9BQTRDRCxFQUFBZ1MsRUFBU2hTLElBQ3JEeUMsRUFBQXpDLEdBQUFxcEIsRUFBQS9mLEVBQUF0SixXQUlHLElBQUFtNkksRUFBQTBCLEtBQUFDLEVBQUF4eUksS0FBQXl5SSxFQUFBenlJLEdBR0gsUUFBQXRCLEtBRkF2RixLQUVBNkcsRUFDQUEsRUFBQXRNLGVBQUFnTCxLQUNBdkYsRUFBQXVGLEdBQUFxaEIsRUFBQS9mLEVBQUF0QixLQUtBLE9BQUF2RixFQVVBLFNBQUFzbkQsRUFBQTlwQixFQUFBMzJCLEVBQUFtMEUsR0FHQSxJQUFBeHZELEVBQUEza0IsS0FBQTJrQixFQUFBZ1MsR0FDQSxPQUFBdzlDLEVBQUFwMEQsRUFBQS9mLEdBQUEyMkIsRUFHQSxRQUFBajRCLEtBQUFzQixFQUNBLEdBQUFBLEVBQUF0TSxlQUFBZ0wsR0FBQSxDQUNBLElBQUFnMEksRUFBQS83RyxFQUFBajRCLEdBQ0FpMEksRUFBQTN5SSxFQUFBdEIsSUFFQWltQixFQUFBZ3VILEtBQUFodUgsRUFBQSt0SCxJQUFBcnRJLEVBQUFzdEksSUFBQXR0SSxFQUFBcXRJLElBQUFELEVBQUFFLElBQUFGLEVBQUFDLElBQUFFLEVBQUFELElBQUFDLEVBQUFGLElBQUFGLEVBQUFHLElBQUFILEVBQUFFLElBR092K0QsR0FBQXoxRSxLQUFBaTRCLElBR1BBLEVBQUFqNEIsR0FBQXFoQixFQUFBL2YsRUFBQXRCLEtBSkEraEQsRUFBQWl5RixFQUFBQyxFQUFBeCtELEdBU0EsT0FBQXg5QyxFQTBDQSxTQUFBL25CLEVBQUErbkIsRUFBQTMyQixFQUFBNnlJLEdBQ0EsUUFBQW4wSSxLQUFBc0IsRUFDQUEsRUFBQXRNLGVBQUFnTCxLQUFBbTBJLEVBQUEsTUFBQTd5SSxFQUFBdEIsR0FBQSxNQUFBaTRCLEVBQUFqNEIsTUFDQWk0QixFQUFBajRCLEdBQUFzQixFQUFBdEIsSUFJQSxPQUFBaTRCLEVBR0EsSUFTQTB2RyxFQVRBbnpFLEVBQUEsV0FDQSxPQUFBdk4sRUFBQXVOLGdCQXVHQSxTQUFBbHlELEVBQUFtaEQsRUFBQTdvRCxFQUFBaTdDLEdBQ0EsR0FBQTROLEdBQUE3b0QsRUFJQSxHQUFBNm9ELEVBQUFubUQsU0FBQW1tRCxFQUFBbm1ELFVBQUFrMkksRUFDQS92RixFQUFBbm1ELFFBQUExQyxFQUFBaTdDLFFBQ0csR0FBQTROLEVBQUF4ckQsVUFBQXdyRCxFQUFBeHJELE9BQ0gsUUFBQUQsRUFBQSxFQUFBZ1MsRUFBQXk1QyxFQUFBeHJELE9BQXFDRCxFQUFBZ1MsRUFBU2hTLElBQzlDNEMsRUFBQTNGLEtBQUE0Z0QsRUFBQTROLEVBQUF6ckQsS0FBQXlyRCxRQUdBLFFBQUF6akQsS0FBQXlqRCxFQUNBQSxFQUFBenVELGVBQUFnTCxJQUNBcEYsRUFBQTNGLEtBQUE0Z0QsRUFBQTROLEVBQUF6akQsS0FBQXlqRCxHQW1IQSxTQUFBeGpELEVBQUF1MkMsRUFBQVgsR0FDQSxJQUFBMHZDLEVBQUFtdUQsRUFBQXorSSxLQUFBa1UsVUFBQSxHQUNBLGtCQUNBLE9BQUFxdEMsRUFBQWorQyxNQUFBczlDLEVBQUEwdkMsRUFBQXhwRixPQUFBMjNJLEVBQUF6K0ksS0FBQWtVLGNBdUJBLFNBQUF4QyxFQUFBelAsR0FDQSx5QkFBQW84SSxFQUFBcitJLEtBQUFpQyxHQTZCQSxTQUFBK3VCLEVBQUEvdUIsR0FHQSxJQUFBd0UsU0FBQXhFLEVBQ0EsbUJBQUF3RSxLQUFBeEUsR0FBQSxVQUFBd0UsRUFTQSxTQUFBdzRJLEVBQUFoOUksR0FDQSxRQUFBaTdJLEVBQUFtQixFQUFBcitJLEtBQUFpQyxJQW1CQSxTQUFBNjhJLEVBQUE3OEksR0FDQSx1QkFBQUEsR0FBQSxpQkFBQUEsRUFBQWlvRyxVQUFBLGlCQUFBam9HLEVBQUFrc0csY0EvVEFuOEMsRUFBQXVOLGFBQUEsV0FDQSxPQUFBejZELFNBQUFHLGNBQUEsV0FzYUEsSUFBQWs2SSxFQUFBLG1CQVNBLFNBQUFOLEVBQUFyd0YsR0FDQSxPQUFBQSxFQUFBMndGLEdBUUEsU0FBQUMsRUFBQTV3RixHQUNBLElBQUE2d0YsRUFBQTN0SSxFQUFBODhDLEdBQ0E4d0YsRUFBQTd6SSxLQUdBLFNBQUE4ekksRUFBQXQ5SSxFQUFBOEksR0FDQXMwSSxFQUFBQyxFQUFBdDlJLElBQUFDLEVBQUE4SSxHQUFBdTBJLEVBQUF0OUksSUFBQStJLEVBQUE5SSxHQUhBdXNELGFBQUE0d0YsRUFBQTV3RixFQUFBbmhELEtBQUFreUksR0FBQS93RixHQUFBbmhELEVBQUFtaEQsRUFBQSt3RixHQVFBSCxFQUFBdC9JLFdBQ0FtTixZQUFBbXlJLEVBSUFyOUksSUFBQSxTQUFBZ0osR0FDQSxPQUFBVSxLQUFBMUwsZUFBQWdMLEdBQUFVLEtBQUFWLEdBQUEsTUFFQS9JLElBQUEsU0FBQStJLEVBQUE5SSxHQUdBLE9BQUF3SixLQUFBVixHQUFBOUksR0FJQW9MLEtBQUEsU0FBQTFILEVBQUFpN0MsR0FHQSxRQUFBNzFDLFVBRkEsSUFBQTYxQyxJQUFBajdDLEVBQUFxRixFQUFBckYsRUFBQWk3QyxJQUVBbjFDLEtBQ0FBLEtBQUExTCxlQUFBZ0wsSUFBQXBGLEVBQUE4RixLQUFBVixPQUlBc2dGLFVBQUEsU0FBQXRnRixVQUNBVSxLQUFBVixLQTBCQXhCLEVBQUFzK0QsVUFqcEJBLFNBQUFqbUUsRUFBQVgsR0FFQSxpQkFBQVcsSUFDQTh3SSxFQUFBLE1BR0ExZ0YsRUFBQXB3RCxHQUFBWCxHQTRvQkFzSSxFQUFBNmlCLFFBQ0E3aUIsRUFBQXVqRCxRQUNBdmpELEVBQUFpMkksU0F4aUJBLFNBQUFDLEVBQUFqL0QsR0FHQSxJQUZBLElBQUFoN0UsRUFBQWk2SSxFQUFBLEdBRUExOEksRUFBQSxFQUFBZ1MsRUFBQTBxSSxFQUFBejhJLE9BQWdERCxFQUFBZ1MsRUFBU2hTLElBQ3pEeUMsRUFBQXNuRCxFQUFBdG5ELEVBQUFpNkksRUFBQTE4SSxHQUFBeTlFLEdBR0EsT0FBQWg3RSxHQWtpQkErRCxFQUFBMkksT0F6aEJBLFNBQUE4d0IsRUFBQTMyQixHQUNBLFFBQUF0QixLQUFBc0IsRUFDQUEsRUFBQXRNLGVBQUFnTCxLQUNBaTRCLEVBQUFqNEIsR0FBQXNCLEVBQUF0QixJQUlBLE9BQUFpNEIsR0FtaEJBejVCLEVBQUEwUixXQUNBMVIsRUFBQWcyRCxlQUNBaDJELEVBQUE0dEgsV0F0ZkEsV0FPQSxPQU5BdWIsSUFHQUEsRUFBQW56RSxJQUFBNDNELFdBQUEsT0FHQXViLEdBZ2ZBbnBJLEVBQUFqSSxRQXhlQSxTQUFBcTVJLEVBQUExNEksR0FDQSxHQUFBMDRJLEVBQUEsQ0FDQSxHQUFBQSxFQUFBcjVJLFFBQ0EsT0FBQXE1SSxFQUFBcjVJLFFBQUFXLEdBR0EsUUFBQWMsRUFBQSxFQUFBZ1MsRUFBQTRsSSxFQUFBMzNJLE9BQXVDRCxFQUFBZ1MsRUFBU2hTLElBQ2hELEdBQUE0M0ksRUFBQTUzSSxLQUFBZCxFQUNBLE9BQUFjLEVBS0EsVUE0ZEF3RyxFQUFBa1UsU0FqZEEsU0FBQXFRLEVBQUE0eEgsR0FDQSxJQUFBQyxFQUFBN3hILEVBQUFodUIsVUFFQSxTQUFBd3NHLEtBS0EsUUFBQW54RCxLQUhBbXhELEVBQUF4c0csVUFBQTQvSSxFQUFBNS9JLFVBQ0FndUIsRUFBQWh1QixVQUFBLElBQUF3c0csRUFFQXF6QyxFQUNBN3hILEVBQUFodUIsVUFBQXE3QyxHQUFBd2tHLEVBQUF4a0csR0FHQXJ0QixFQUFBaHVCLFVBQUFtTixZQUFBNmdCLEVBQ0FBLEVBQUE0akQsV0FBQWd1RSxHQXFjQW4ySSxFQUFBZ08sTUEzYkEsU0FBQXlyQixFQUFBMzJCLEVBQUE2eUksR0FHQWprSSxFQUZBK25CLEVBQUEsY0FBQUEsSUFBQWxqQyxVQUFBa2pDLEVBQ0EzMkIsRUFBQSxjQUFBQSxJQUFBdk0sVUFBQXVNLEVBQ0E2eUksSUF5YkEzMUksRUFBQTA5QyxZQWpiQSxTQUFBditDLEdBQ0EsR0FBQUEsRUFJQSx1QkFBQUEsR0FJQSxpQkFBQUEsRUFBQTFGLFFBeWFBdUcsRUFBQThELE9BQ0E5RCxFQUFBcEQsSUFsWUEsU0FBQXFvRCxFQUFBN29ELEVBQUFpN0MsR0FDQSxHQUFBNE4sR0FBQTdvRCxFQUFBLENBSUEsR0FBQTZvRCxFQUFBcm9ELEtBQUFxb0QsRUFBQXJvRCxNQUFBdTRJLEVBQ0EsT0FBQWx3RixFQUFBcm9ELElBQUFSLEVBQUFpN0MsR0FJQSxJQUZBLElBQUFwN0MsS0FFQXpDLEVBQUEsRUFBQWdTLEVBQUF5NUMsRUFBQXhyRCxPQUFxQ0QsRUFBQWdTLEVBQVNoUyxJQUM5Q3lDLEVBQUFqRSxLQUFBb0UsRUFBQTNGLEtBQUE0Z0QsRUFBQTROLEVBQUF6ckQsS0FBQXlyRCxJQUdBLE9BQUFocEQsSUFxWEErRCxFQUFBdTVCLE9BeFdBLFNBQUEwckIsRUFBQTdvRCxFQUFBK29ILEVBQUE5dEUsR0FDQSxHQUFBNE4sR0FBQTdvRCxFQUFBLENBSUEsR0FBQTZvRCxFQUFBMXJCLFFBQUEwckIsRUFBQTFyQixTQUFBNjdHLEVBQ0EsT0FBQW53RixFQUFBMXJCLE9BQUFuOUIsRUFBQStvSCxFQUFBOXRFLEdBRUEsUUFBQTc5QyxFQUFBLEVBQUFnUyxFQUFBeTVDLEVBQUF4ckQsT0FBcUNELEVBQUFnUyxFQUFTaFMsSUFDOUMyckgsRUFBQS9vSCxFQUFBM0YsS0FBQTRnRCxFQUFBOHRFLEVBQUFsZ0UsRUFBQXpyRCxLQUFBeXJELEdBR0EsT0FBQWtnRSxJQTZWQW5sSCxFQUFBMjJDLE9BaFZBLFNBQUFzTyxFQUFBN29ELEVBQUFpN0MsR0FDQSxHQUFBNE4sR0FBQTdvRCxFQUFBLENBSUEsR0FBQTZvRCxFQUFBdE8sUUFBQXNPLEVBQUF0TyxTQUFBcytGLEVBQ0EsT0FBQWh3RixFQUFBdE8sT0FBQXY2QyxFQUFBaTdDLEdBSUEsSUFGQSxJQUFBcDdDLEtBRUF6QyxFQUFBLEVBQUFnUyxFQUFBeTVDLEVBQUF4ckQsT0FBcUNELEVBQUFnUyxFQUFTaFMsSUFDOUM0QyxFQUFBM0YsS0FBQTRnRCxFQUFBNE4sRUFBQXpyRCxLQUFBeXJELElBQ0FocEQsRUFBQWpFLEtBQUFpdEQsRUFBQXpyRCxJQUlBLE9BQUF5QyxJQWlVQStELEVBQUE0bUcsS0FwVEEsU0FBQTNoRCxFQUFBN29ELEVBQUFpN0MsR0FDQSxHQUFBNE4sR0FBQTdvRCxFQUlBLFFBQUE1QyxFQUFBLEVBQUFnUyxFQUFBeTVDLEVBQUF4ckQsT0FBbUNELEVBQUFnUyxFQUFTaFMsSUFDNUMsR0FBQTRDLEVBQUEzRixLQUFBNGdELEVBQUE0TixFQUFBenJELEtBQUF5ckQsR0FDQSxPQUFBQSxFQUFBenJELElBOFNBd0csRUFBQXlCLE9BQ0F6QixFQUFBK0osTUF0UkEsU0FBQWl1QyxHQUNBLElBQUErdUMsRUFBQW11RCxFQUFBeitJLEtBQUFrVSxVQUFBLEdBQ0Esa0JBQ0EsT0FBQXF0QyxFQUFBaitDLE1BQUFtSSxLQUFBNmtGLEVBQUF4cEYsT0FBQTIzSSxFQUFBeitJLEtBQUFrVSxlQW9SQTNLLEVBQUFtSSxVQUNBbkksRUFBQTQzQixXQWpRQSxTQUFBbC9CLEdBQ0EseUJBQUFBLEdBaVFBc0gsRUFBQTIzQixTQXhQQSxTQUFBai9CLEdBQ0EsMEJBQUFvOEksRUFBQXIrSSxLQUFBaUMsSUF3UEFzSCxFQUFBeW5CLFdBQ0F6bkIsRUFBQTAxSSxrQkFDQTExSSxFQUFBcWxELGFBMU5BLFNBQUEzc0QsR0FDQSxRQUFBMDdJLEVBQUFVLEVBQUFyK0ksS0FBQWlDLEtBME5Bc0gsRUFBQXUxSSxRQUNBdjFJLEVBQUFvdEMsTUF4TUEsU0FBQTEwQyxHQUNBLE9BQUFBLE1Bd01Bc0gsRUFBQXNhLFNBOUxBLFNBQUF5bEMsR0FDQSxRQUFBdm1ELEVBQUEsRUFBQWdTLEVBQUFiLFVBQUFsUixPQUF5Q0QsRUFBQWdTLEVBQVNoUyxJQUNsRCxTQUFBbVIsVUFBQW5SLEdBQ0EsT0FBQW1SLFVBQUFuUixJQTRMQXdHLEVBQUE2dUYsVUF2TEEsU0FBQXZpQyxFQUFBK3BGLEdBQ0EsYUFBQS9wRixJQUFBK3BGLEdBdUxBcjJJLEVBQUE4aEksVUFwTEEsU0FBQXgxRSxFQUFBK3BGLEVBQUFDLEdBQ0EsYUFBQWhxRixJQUFBLE1BQUErcEYsSUFBQUMsR0FvTEF0MkksRUFBQXJELE1BektBLFdBQ0EsT0FBQStoRSxTQUFBam9FLEtBQUFzRCxNQUFBbTdJLEVBQUF2cUksWUF5S0EzSyxFQUFBazNCLGtCQTVKQSxTQUFBN0YsR0FDQSxvQkFBQUEsRUFDQSxPQUFBQSxTQUdBLElBQUE3bEIsRUFBQTZsQixFQUFBNTNCLE9BRUEsV0FBQStSLEdBRUE2bEIsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUNHLElBQUE3bEIsR0FFSDZsQixFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBR0FBLEdBOElBcnhCLEVBQUFpb0QsT0FySUEsU0FBQWtRLEVBQUF3MUMsR0FDQSxJQUFBeDFDLEVBQ0EsVUFBQW4rRCxNQUFBMnpHLElBb0lBM3RHLEVBQUEweUYsS0ExSEEsU0FBQTlJLEdBQ0EsYUFBQUEsRUFDQSxLQUNHLG1CQUFBQSxFQUFBOEksS0FDSDlJLEVBQUE4SSxPQUVBOUksRUFBQXZtRixRQUFBLDBDQXFIQXJELEVBQUF5eUQsZUE1R0EsU0FBQXhOLEdBQ0FBLEVBQUEyd0YsSUFBQSxHQTRHQTUxSSxFQUFBczFJLGNBQ0F0MUksRUFBQTA1QixjQTFEQSxTQUFBdXJCLEdBQ0EsV0FBQTR3RixFQUFBNXdGLElBMERBamxELEVBQUF1MkksWUF2REEsU0FBQTc0SSxFQUFBQyxHQUdBLElBRkEsSUFBQTY0SSxFQUFBLElBQUE5NEksRUFBQWdHLFlBQUFoRyxFQUFBakUsT0FBQWtFLEVBQUFsRSxRQUVBRCxFQUFBLEVBQWlCQSxFQUFBa0UsRUFBQWpFLE9BQWNELElBQy9CZzlJLEVBQUFoOUksR0FBQWtFLEVBQUFsRSxHQUdBLElBQUE2VixFQUFBM1IsRUFBQWpFLE9BRUEsSUFBQUQsRUFBQSxFQUFhQSxFQUFBbUUsRUFBQWxFLE9BQWNELElBQzNCZzlJLEVBQUFoOUksRUFBQTZWLEdBQUExUixFQUFBbkUsR0FHQSxPQUFBZzlJLEdBMkNBeDJJLEVBQUE0d0MsS0F4Q0Esd0VDbnJCQSxJQUFBaS9GLEVBQUEsb0JBQUF2c0UsYUFBQXZxQixNQUFBdXFCLGFBOEdBLFNBQUE5M0QsRUFBQWtnRCxHQUNBLE9BQUF6OEMsS0FBQWdILEtBQUF3Z0ksRUFBQS9xRixJQUdBLElBQUFqeUQsRUFBQStSLEVBUUEsU0FBQWlySSxFQUFBL3FGLEdBQ0EsT0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUdBLElBQUFnckYsRUFBQUQsRUE4RUEsU0FBQW5SLEVBQUE1cUQsRUFBQWk4RCxHQUNBLE9BQUExbkksS0FBQWdILE1BQUF5a0UsRUFBQSxHQUFBaThELEVBQUEsS0FBQWo4RCxFQUFBLEdBQUFpOEQsRUFBQSxLQUFBajhELEVBQUEsR0FBQWk4RCxFQUFBLEtBQUFqOEQsRUFBQSxHQUFBaThELEVBQUEsS0FHQSxJQUFBNzlILEVBQUF3c0gsRUFRQSxTQUFBc1IsRUFBQWw4RCxFQUFBaThELEdBQ0EsT0FBQWo4RCxFQUFBLEdBQUFpOEQsRUFBQSxLQUFBajhELEVBQUEsR0FBQWk4RCxFQUFBLEtBQUFqOEQsRUFBQSxHQUFBaThELEVBQUEsS0FBQWo4RCxFQUFBLEdBQUFpOEQsRUFBQSxJQUdBLElBQUFqSyxFQUFBa0ssRUFvRUE1MkksRUFBQXVCLE9BeFJBLFNBQUFvUixFQUFBQyxHQUNBLElBQUE2MkMsRUFBQSxJQUFBb21GLEVBQUEsR0FZQSxPQVZBLE1BQUFsOUgsSUFDQUEsRUFBQSxHQUdBLE1BQUFDLElBQ0FBLEVBQUEsR0FHQTYyQyxFQUFBLEdBQUE5MkMsRUFDQTgyQyxFQUFBLEdBQUE3MkMsRUFDQTYyQyxHQTRRQXpwRCxFQUFBdzFDLEtBbFFBLFNBQUFpVSxFQUFBaUMsR0FHQSxPQUZBakMsRUFBQSxHQUFBaUMsRUFBQSxHQUNBakMsRUFBQSxHQUFBaUMsRUFBQSxHQUNBakMsR0FnUUF6cEQsRUFBQTZpQixNQXZQQSxTQUFBNm9DLEdBQ0EsSUFBQWpDLEVBQUEsSUFBQW9tRixFQUFBLEdBR0EsT0FGQXBtRixFQUFBLEdBQUFpQyxFQUFBLEdBQ0FqQyxFQUFBLEdBQUFpQyxFQUFBLEdBQ0FqQyxHQW9QQXpwRCxFQUFBdkgsSUF6T0EsU0FBQWd4RCxFQUFBL3JELEVBQUFDLEdBR0EsT0FGQThyRCxFQUFBLEdBQUEvckQsRUFDQStyRCxFQUFBLEdBQUE5ckQsRUFDQThyRCxHQXVPQXpwRCxFQUFBd1EsSUE3TkEsU0FBQWk1QyxFQUFBaXhCLEVBQUFpOEQsR0FHQSxPQUZBbHRGLEVBQUEsR0FBQWl4QixFQUFBLEdBQUFpOEQsRUFBQSxHQUNBbHRGLEVBQUEsR0FBQWl4QixFQUFBLEdBQUFpOEQsRUFBQSxHQUNBbHRGLEdBMk5BenBELEVBQUE2MkksWUFoTkEsU0FBQXB0RixFQUFBaXhCLEVBQUFpOEQsRUFBQWo1SSxHQUdBLE9BRkErckQsRUFBQSxHQUFBaXhCLEVBQUEsR0FBQWk4RCxFQUFBLEdBQUFqNUksRUFDQStyRCxFQUFBLEdBQUFpeEIsRUFBQSxHQUFBaThELEVBQUEsR0FBQWo1SSxFQUNBK3JELEdBOE1BenBELEVBQUFxNUQsSUFwTUEsU0FBQTVQLEVBQUFpeEIsRUFBQWk4RCxHQUdBLE9BRkFsdEYsRUFBQSxHQUFBaXhCLEVBQUEsR0FBQWk4RCxFQUFBLEdBQ0FsdEYsRUFBQSxHQUFBaXhCLEVBQUEsR0FBQWk4RCxFQUFBLEdBQ0FsdEYsR0FrTUF6cEQsRUFBQXdMLE1BQ0F4TCxFQUFBdkcsU0FDQXVHLEVBQUF5MkksWUFDQXoySSxFQUFBMDJJLGVBQ0ExMkksRUFBQWlqQixJQXJLQSxTQUFBd21DLEVBQUFpeEIsRUFBQWk4RCxHQUdBLE9BRkFsdEYsRUFBQSxHQUFBaXhCLEVBQUEsR0FBQWk4RCxFQUFBLEdBQ0FsdEYsRUFBQSxHQUFBaXhCLEVBQUEsR0FBQWk4RCxFQUFBLEdBQ0FsdEYsR0FtS0F6cEQsRUFBQTgySSxJQXpKQSxTQUFBcnRGLEVBQUFpeEIsRUFBQWk4RCxHQUdBLE9BRkFsdEYsRUFBQSxHQUFBaXhCLEVBQUEsR0FBQWk4RCxFQUFBLEdBQ0FsdEYsRUFBQSxHQUFBaXhCLEVBQUEsR0FBQWk4RCxFQUFBLEdBQ0FsdEYsR0F1SkF6cEQsRUFBQSsySSxJQTdJQSxTQUFBcjhELEVBQUFpOEQsR0FDQSxPQUFBajhELEVBQUEsR0FBQWk4RCxFQUFBLEdBQUFqOEQsRUFBQSxHQUFBaThELEVBQUEsSUE2SUEzMkksRUFBQXVkLE1BbklBLFNBQUFrc0MsRUFBQWlDLEVBQUE3cEQsR0FHQSxPQUZBNG5ELEVBQUEsR0FBQWlDLEVBQUEsR0FBQTdwRCxFQUNBNG5ELEVBQUEsR0FBQWlDLEVBQUEsR0FBQTdwRCxFQUNBNG5ELEdBaUlBenBELEVBQUFrckMsVUF4SEEsU0FBQXVlLEVBQUFpQyxHQUNBLElBQUEzcUQsRUFBQXlLLEVBQUFrZ0QsR0FVQSxPQVJBLElBQUEzcUQsR0FDQTBvRCxFQUFBLEtBQ0FBLEVBQUEsT0FFQUEsRUFBQSxHQUFBaUMsRUFBQSxHQUFBM3FELEVBQ0Ewb0QsRUFBQSxHQUFBaUMsRUFBQSxHQUFBM3FELEdBR0Ewb0QsR0E4R0F6cEQsRUFBQXNsSSxXQUNBdGxJLEVBQUE4WSxPQUNBOVksRUFBQTQySSxpQkFDQTUySSxFQUFBMHNJLGFBQ0Exc0ksRUFBQWczSSxPQWpGQSxTQUFBdnRGLEVBQUFpQyxHQUdBLE9BRkFqQyxFQUFBLElBQUFpQyxFQUFBLEdBQ0FqQyxFQUFBLElBQUFpQyxFQUFBLEdBQ0FqQyxHQStFQXpwRCxFQUFBaTNJLEtBcEVBLFNBQUF4dEYsRUFBQWl4QixFQUFBaThELEVBQUF2OUksR0FHQSxPQUZBcXdELEVBQUEsR0FBQWl4QixFQUFBLEdBQUF0aEYsR0FBQXU5SSxFQUFBLEdBQUFqOEQsRUFBQSxJQUNBanhCLEVBQUEsR0FBQWl4QixFQUFBLEdBQUF0aEYsR0FBQXU5SSxFQUFBLEdBQUFqOEQsRUFBQSxJQUNBanhCLEdBa0VBenBELEVBQUE4YSxlQXhEQSxTQUFBMnVDLEVBQUFpQyxFQUFBNXFELEdBQ0EsSUFBQTZSLEVBQUErNEMsRUFBQSxHQUNBOTRDLEVBQUE4NEMsRUFBQSxHQUdBLE9BRkFqQyxFQUFBLEdBQUEzb0QsRUFBQSxHQUFBNlIsRUFBQTdSLEVBQUEsR0FBQThSLEVBQUE5UixFQUFBLEdBQ0Eyb0QsRUFBQSxHQUFBM29ELEVBQUEsR0FBQTZSLEVBQUE3UixFQUFBLEdBQUE4UixFQUFBOVIsRUFBQSxHQUNBMm9ELEdBb0RBenBELEVBQUF1WixJQTFDQSxTQUFBa3dDLEVBQUFpeEIsRUFBQWk4RCxHQUdBLE9BRkFsdEYsRUFBQSxHQUFBeDZDLEtBQUFzSyxJQUFBbWhFLEVBQUEsR0FBQWk4RCxFQUFBLElBQ0FsdEYsRUFBQSxHQUFBeDZDLEtBQUFzSyxJQUFBbWhFLEVBQUEsR0FBQWk4RCxFQUFBLElBQ0FsdEYsR0F3Q0F6cEQsRUFBQW9WLElBOUJBLFNBQUFxMEMsRUFBQWl4QixFQUFBaThELEdBR0EsT0FGQWx0RixFQUFBLEdBQUF4NkMsS0FBQW1HLElBQUFzbEUsRUFBQSxHQUFBaThELEVBQUEsSUFDQWx0RixFQUFBLEdBQUF4NkMsS0FBQW1HLElBQUFzbEUsRUFBQSxHQUFBaThELEVBQUEsSUFDQWx0RixxRUM3UkEsSUFBQXl0RixFQUFBei9JLEVBQUEsNENBRUE0dUcsRUFBQTZ3QyxFQUFBN3dDLGlCQUNBd0gsRUFBQXFwQyxFQUFBcnBDLG9CQUNBN3JFLEVBQUFrMUcsRUFBQWwxRyxlQUVBMStCLEVBQUE3TCxFQUFBLDJDQUVBNjJELEVBQUE3MkQsRUFBQSxnREFFQTA3QixFQUFBMTdCLEVBQUEsMENBRUFvdkksRUFBQXB2SSxFQUFBLGlEQUdBMC9JLEdBQUEsNEZBQ0FDLEdBQUEscUNBQ0FDLEdBQ0FDLFlBQUEsRUFDQUMsVUFBQSxFQUNBQyxZQUFBLEVBQ0FDLFdBQUEsR0FFQUMsRUFBQXAwSSxFQUFBMUcsSUFBQXU2SSxFQUFBLFNBQUE5K0ksR0FDQSxJQUFBcy9JLEVBQUF0L0ksRUFBQWdMLFFBQUEsbUJBQ0EsT0FBQWcwSSxFQUFBTSxLQUFBdC9JLElBR0EsU0FBQXUvSSxFQUFBdi9JLEdBQ0EscUJBQUFBLEdBQUE4NkIsRUFBQXFvQyxRQUFBc3pFLFFBQUEsaUJBQUF6MkksRUFHQSxTQUFBdy9JLEVBQUFwekIsRUFBQTc2RyxFQUFBK3NILEdBQ0EsSUFBQW1oQixFQUFBcnpCLEVBQUFzekIsWUFDQSxVQUFBcGhCLEdBQUFtaEIsRUFBQTd1SCxRQUNBLElBQUFzK0csRUFBQXVRLEVBQUE5USxVQUFBcDlILEVBQUE2NkcsRUFBQW54RixRQUFBbVMsVUFBQTc3QixFQUFBeWdILElBQUF6Z0gsRUFBQTBnSCxJQUFBLE1BQUE3d0YsT0FBQWdyRixFQUFBbjBELEtBR0EsR0FGQSxRQUFBcW1FLEdBQUFtaEIsRUFBQTd1SCxRQUVBcytHLEVBQUEsQ0FDQSxJQUFBcnFJLEVBQUFxcUksRUFBQXJxSSxLQUNBME0sRUFBQTRoSCxhQUFBdHVILEVBQ0F1bkgsRUFBQW54RixRQUFBczNGLG1CQUNBbnhGLE9BQUE4dEcsRUFBQTl0RyxRQUNLdjhCLEVBQUFxcUksRUFBQTM5SCxRQXdCTCxTQUFBb3VJLEVBQUFDLEdBQ0FBLEVBQUFDLFdBQUEsRUFDQXAyRyxhQUFBbTJHLEVBQUFFLGFBQ0FGLEVBQUFFLFlBQUExMEcsV0FBQSxXQUNBdzBHLEVBQUFDLFdBQUEsR0FDRyxLQUdILElBQUFFLEdBTUFodUIsVUFBQSxTQUFBeGdILEdBQ0FBLEVBQUFvNEIsRUFBQTkvQixLQUFBb3VELElBQUExbUQsR0FDQTFILEtBQUEwaEMsUUFBQSxZQUFBaDZCLElBUUFpaEgsU0FBQSxTQUFBamhILEdBRUEsSUFBQW1oSCxHQURBbmhILEVBQUFvNEIsRUFBQTkvQixLQUFBb3VELElBQUExbUQsSUFDQWtxRyxXQUFBbHFHLEVBQUF1b0csY0FFQSxHQUFBNFksR0FBQTdvSCxLQUFBb3VELElBQ0EsS0FBQXk2RCxHQUFBLEdBQUFBLEVBQUFwcUIsVUFBQSxDQUVBLEdBQUFvcUIsSUFBQTdvSCxLQUFBb3VELElBQ0EsT0FHQXk2RCxJQUFBbHFCLFdBSUEzK0YsS0FBQTBoQyxRQUFBLFdBQUFoNkIsSUFRQXl1SSxXQUFBLFNBQUF6dUksSUFHQUEsRUFBQW80QixFQUFBOS9CLEtBQUFvdUQsSUFBQTFtRCxJQUdBdWtGLFdBQUEsRUFDQWpzRixLQUFBK25ILGlCQUFBLElBQUExMkQsS0FDQXNrRixFQUFBMzFJLEtBQUEwSCxFQUFBLFNBR0F3dUksRUFBQWh1QixVQUFBM3pILEtBQUF5TCxLQUFBMEgsR0FDQXd1SSxFQUFBRSxVQUFBN2hKLEtBQUF5TCxLQUFBMEgsR0FDQW91SSxFQUFBOTFJLE9BUUFxMkksVUFBQSxTQUFBM3VJLElBQ0FBLEVBQUFvNEIsRUFBQTkvQixLQUFBb3VELElBQUExbUQsSUFHQXVrRixXQUFBLEVBQ0EwcEQsRUFBQTMxSSxLQUFBMEgsRUFBQSxVQUlBd3VJLEVBQUFodUIsVUFBQTN6SCxLQUFBeUwsS0FBQTBILEdBQ0FvdUksRUFBQTkxSSxPQVFBczJJLFNBQUEsU0FBQTV1SSxJQUNBQSxFQUFBbzRCLEVBQUE5L0IsS0FBQW91RCxJQUFBMW1ELElBR0F1a0YsV0FBQSxFQUNBMHBELEVBQUEzMUksS0FBQTBILEVBQUEsT0FDQXd1SSxFQUFBSyxRQUFBaGlKLEtBQUF5TCxLQUFBMEgsSUFVQSxJQUFBMnBELEtBQUFyeEQsS0FBQStuSCxpQkEzSkEsS0E0SkFtdUIsRUFBQXRtQyxNQUFBcjdHLEtBQUF5TCxLQUFBMEgsR0FHQW91SSxFQUFBOTFJLE9BRUFvMUksWUFBQSxTQUFBMXRJLEdBQ0F3dUksRUFBQUUsVUFBQTdoSixLQUFBeUwsS0FBQTBILElBSUE0dEksWUFBQSxTQUFBNXRJLEdBTUE4dUksRUFBQTl1SSxJQUNBd3VJLEVBQUFodUIsVUFBQTN6SCxLQUFBeUwsS0FBQTBILElBR0EydEksVUFBQSxTQUFBM3RJLEdBQ0F3dUksRUFBQUssUUFBQWhpSixLQUFBeUwsS0FBQTBILElBRUE2dEksV0FBQSxTQUFBN3RJLEdBTUE4dUksRUFBQTl1SSxJQUNBd3VJLEVBQUF2dEIsU0FBQXAwSCxLQUFBeUwsS0FBQTBILEtBS0EsU0FBQTh1SSxFQUFBOXVJLEdBQ0EsSUFBQThwRyxFQUFBOXBHLEVBQUE4cEcsWUFDQSxjQUFBQSxHQUFBLFVBQUFBLEVBMENBLFNBQUFpbEMsRUFBQXJvRixHQTJEQSxTQUFBc29GLEVBQUEvdUIsRUFBQW91QixHQUNBMzBJLEVBQUFRLEtBQUErbEgsRUFBQSxTQUFBeHhILEdBQ0FndUcsRUFBQS8xQyxFQUFBc25GLEVBQUF2L0ksR0FBQTQvSSxFQUFBWSxVQUFBeGdKLEtBQ0s0L0ksR0E3REwzcEYsRUFBQTczRCxLQUFBeUwsTUFDQUEsS0FBQW91RCxNQU1BcHVELEtBQUFnMkksV0FBQSxFQU1BaDJJLEtBQUFpMkksWUFNQWoySSxLQUFBNjFJLFlBQUEsSUFBQWxSLEVBQ0Eza0ksS0FBQTIySSxhQTNDQSxTQUFBWixHQUNBMzBJLEVBQUFRLEtBQUFzekksRUFBQSxTQUFBLytJLEdBQ0E0L0ksRUFBQVksVUFBQXhnSixHQUFBaUwsRUFBQTdCLEtBQUEyMkksRUFBQS8vSSxHQUFBNC9JLEtBRUEzMEksRUFBQVEsS0FBQTR6SSxFQUFBLFNBQUFyL0ksR0FDQTQvSSxFQUFBWSxVQUFBeGdKLEdBQUFpTCxFQUFBN0IsS0FBQTIySSxFQUFBLy9JLEdBQUE0L0ksS0FFQTMwSSxFQUFBUSxLQUFBcXpJLEVBQUEsU0FBQTkrSSxHQUNBNC9JLEVBQUFZLFVBQUF4Z0osR0FHQSxTQUFBWCxFQUFBdWdKLEdBQ0Esa0JBQ0EsSUFBQUEsRUFBQUMsVUFJQSxPQUFBeGdKLEVBQUFxQyxNQUFBaytJLEVBQUF0dEksWUFUQW11SSxDQUFBVixFQUFBLy9JLEdBQUE0L0ksS0FvQ0FjLENBQUE3MkksTUFFQWl4QixFQUFBODdHLHVCQVFBMkosRUFBQWxCLEVBQUF4MUksT0FjQWl4QixFQUFBdzdHLHNCQUNBaUssRUFBQXhCLEVBQUFsMUksTUFTQTAySSxFQUFBekIsRUFBQWoxSSxPQTNGQW9CLEVBQUFRLE1BQUEsOEVBQUF6TCxHQUNBKy9JLEVBQUEvL0ksR0FBQSxTQUFBdVIsR0FDQUEsRUFBQW80QixFQUFBOS9CLEtBQUFvdUQsSUFBQTFtRCxHQUNBMUgsS0FBQTBoQyxRQUFBdnJDLEVBQUF1UixNQWtHQSxJQUFBb3ZJLEVBQUFMLEVBQUFwaUosVUFFQXlpSixFQUFBMTRJLFFBQUEsV0FHQSxJQUZBLElBQUF1cEgsRUFBQXN0QixFQUFBNTVJLE9BQUE2NUksR0FFQTU5SSxFQUFBLEVBQWlCQSxFQUFBcXdILEVBQUFwd0gsT0FBeUJELElBQUEsQ0FDMUMsSUFBQW5CLEVBQUF3eEgsRUFBQXJ3SCxHQUNBcTBHLEVBQUEzckcsS0FBQW91RCxJQUFBc25GLEVBQUF2L0ksR0FBQTZKLEtBQUEyMkksVUFBQXhnSixNQUlBMmdKLEVBQUFydUIsVUFBQSxTQUFBMzRHLEdBQ0E5UCxLQUFBb3VELElBQUF6OUMsUUFBQTNRLEtBQUFvdUQsSUFBQXo5QyxNQUFBNFgsT0FBQXpZLEdBQUEsWUFHQTFPLEVBQUEwSyxNQUFBMnFJLEVBQUFycUYsR0FDQSxJQUFBbHFELEVBQUF1MEksRUFDQXI4SSxFQUFBMEQsUUFBQW9FLHdFQzVVQSxJQUFBNG1GLEVBQUF2ekYsRUFBQSw4Q0FHQTJNLEVBQUE0bUYsRUFBQXJpRixRQUNBekwsS0FBQSxXQUNBaVUsT0FDQThuSSxNQUFBLE1BRUFDLGlCQUFBLFdBSUEsSUFIQSxJQUFBQyxFQUFBajNJLEtBQUFrM0ksWUFDQUgsRUFBQS8ySSxLQUFBaVAsTUFBQThuSSxNQUVBei9JLEVBQUEsRUFBbUJBLEVBQUF5L0ksRUFBQXgvSSxPQUFrQkQsSUFFckMyL0ksS0FBQUYsRUFBQXovSSxHQUFBNC9JLFlBR0FsM0ksS0FBQWszSSxZQUFBRCxFQUNBajNJLEtBQUFrckgsUUFBQWxySCxLQUFBa3JILFNBQUErckIsR0FFQWg5QyxZQUFBLFdBQ0FqNkYsS0FBQWczSSxtQkFLQSxJQUhBLElBQUFELEVBQUEvMkksS0FBQWlQLE1BQUE4bkksVUFDQTE3SCxFQUFBcmIsS0FBQW0zSSxpQkFFQTcvSSxFQUFBLEVBQW1CQSxFQUFBeS9JLEVBQUF4L0ksT0FBa0JELElBQ3JDeS9JLEVBQUF6L0ksR0FBQXN6RSxNQUNBbXNFLEVBQUF6L0ksR0FBQTgvSSxrQkFHQUwsRUFBQXovSSxHQUFBc3pFLEtBQUFnOUQsU0FBQXZzSCxFQUFBLEdBQUFBLEVBQUEsS0FHQW05RSxVQUFBLFNBQUFhLEVBQUFwcUYsR0FHQSxJQUZBLElBQUE4bkksRUFBQTluSSxFQUFBOG5JLFVBRUF6L0ksRUFBQSxFQUFtQkEsRUFBQXkvSSxFQUFBeC9JLE9BQWtCRCxJQUNyQ3kvSSxFQUFBei9JLEdBQUFraEcsVUFBQWEsRUFBQTA5QyxFQUFBei9JLEdBQUEyWCxPQUFBLElBR0FnaUgsV0FBQSxXQUdBLElBRkEsSUFBQThsQixFQUFBLzJJLEtBQUFpUCxNQUFBOG5JLFVBRUF6L0ksRUFBQSxFQUFtQkEsRUFBQXkvSSxFQUFBeC9JLE9BQWtCRCxJQUNyQ3kvSSxFQUFBei9JLEdBQUE0L0ksYUFBQSxHQUdBemdJLGdCQUFBLFdBR0EsT0FGQXpXLEtBQUFnM0ksbUJBRUFsdUQsRUFBQXowRixVQUFBb2lCLGdCQUFBbGlCLEtBQUF5TCxTQUlBNUYsRUFBQTBELFFBQUFvRSx1RUN2REEsSUFBQWQsRUFBQTdMLEVBQUEsMkNBRUE2MEgsRUFBQTcwSCxFQUFBLCtDQUVBc3hILEVBQUF0eEgsRUFBQSx5Q0FFQThoSixFQUFBOWhKLEVBQUEsd0RBYUEsU0FBQStoSixFQUFBaHBGLEdBSUEsUUFBQW40RCxLQUhBbTRELFFBQ0F1NEQsRUFBQXR5SCxLQUFBeUwsS0FBQXN1RCxHQUVBQSxFQUNBQSxFQUFBaDZELGVBQUE2QixJQUFBLFVBQUFBLElBQ0E2SixLQUFBN0osR0FBQW00RCxFQUFBbjRELElBUUE2SixLQUFBMlEsTUFBQSxJQUFBeTVHLEVBQUE5N0QsRUFBQTM5QyxNQUFBM1EsTUFDQUEsS0FBQTB5QyxNQUFBLEtBRUExeUMsS0FBQW12SCxlQUlBbW9CLEVBQUFqakosV0FDQW1OLFlBQUE4MUksRUFDQXQ4SSxLQUFBLGNBUUFrd0gsU0FBQSxFQVNBbnZGLFdBQUEsRUFPQXh4QixFQUFBLEVBT0FxRCxHQUFBLEVBUUF0RCxPQUFBLEVBUUFrZSxXQUFBLEVBUUErdUgsVUFBQSxFQVFBaitILFFBQUEsRUFPQWczRyxTQUFBLEVBT0EvbkcsT0FBQSxVQU9BdXBFLFdBQUEsRUFPQXpxRixhQUFBLEVBS0Fra0gsYUFBQSxFQUVBaXNCLFNBQUEsRUFDQXY5QyxZQUFBLFNBQUFaLEtBQ0E0M0IsV0FBQSxTQUFBNTNCLEtBT0FsN0IsTUFBQSxTQUFBazdCLEVBQUFzM0IsS0FPQWw2RyxnQkFBQSxhQVNBbXlCLFFBQUEsU0FBQW40QixFQUFBQyxHQUNBLE9BQUExUSxLQUFBeTNJLFlBQUFobkksRUFBQUMsSUFPQXFWLFNBQUEsU0FBQTdyQixFQUFBaTdDLEdBQ0FqN0MsRUFBQTNGLEtBQUE0Z0QsRUFBQW4xQyxPQVVBeTNJLFlBQUEsU0FBQWhuSSxFQUFBQyxHQUNBLElBQUFtTCxFQUFBN2IsS0FBQTAzSSxzQkFBQWpuSSxFQUFBQyxHQUVBLE9BREExUSxLQUFBeVcsa0JBQ0FteUIsUUFBQS9zQixFQUFBLEdBQUFBLEVBQUEsS0FPQW84QyxNQUFBLFdBQ0FqNEQsS0FBQWtySCxTQUFBLEVBQ0FsckgsS0FBQTB5QyxNQUFBLEtBQ0ExeUMsS0FBQThxRixNQUFBOXFGLEtBQUE4cUYsS0FBQW04QixXQXVCQTB3QixhQUFBLFNBQUEvaEIsR0FDQSxPQUFBNTFILEtBQUFvTixRQUFBLFFBQUF3b0gsSUFFQTVPLE9BQUEsU0FBQTFuSCxFQUFBOUksR0FDQSxVQUFBOEksRUFDQXVuSCxFQUFBeHlILFVBQUEyeUgsT0FBQXp5SCxLQUFBeUwsS0FBQVYsRUFBQTlJLEdBRUF3SixLQUFBMlEsTUFBQXBhLElBQUFDLElBUUFxYixTQUFBLFNBQUF2UyxFQUFBOUksR0FHQSxPQUZBd0osS0FBQTJRLE1BQUFwYSxJQUFBK0ksRUFBQTlJLEdBQ0F3SixLQUFBaTRELE9BQUEsR0FDQWo0RCxNQU9BdVAsU0FBQSxTQUFBd3pDLEdBR0EsT0FGQS9pRCxLQUFBMlEsTUFBQSxJQUFBeTVHLEVBQUFybkUsRUFBQS9pRCxNQUNBQSxLQUFBaTRELE9BQUEsR0FDQWo0RCxPQUdBb0IsRUFBQTRRLFNBQUFzbEksRUFBQXp3QixHQUNBemxILEVBQUEwSyxNQUFBd3JJLEVBQUFELEdBRUEsSUFBQW4xSSxFQUFBbzFJLEVBQ0FsOUksRUFBQTBELFFBQUFvRSxrRUM1UEEsSUFBQWs4RixFQUFBLFNBQUF6dUIsR0FDQTN2RSxLQUFBMnZFLGtCQUdBeXVCLEVBQUEvcEcsV0FDQW1OLFlBQUE0OEYsRUFDQXc1QyxhQUFBLFNBQUF6cUksRUFBQWtXLEdBQ0FyakIsS0FBQTJ2RSxXQUFBNzVFLE1BQ0FxWCxTQUNBa1csWUFJQSxJQUFBbmhCLEVBQUFrOEYsRUFDQWhrRyxFQUFBMEQsUUFBQW9FLGlFQ2pCQSxJQUFBbzFJLEVBQUEvaEosRUFBQSxxREFFQWcxQyxFQUFBaDFDLEVBQUEsbURBRUE2TCxFQUFBN0wsRUFBQSwyQ0FFQW9xSSxFQUFBcHFJLEVBQUEsc0RBUUEsU0FBQXl6RixFQUFBMTZCLEdBQ0FncEYsRUFBQS9pSixLQUFBeUwsS0FBQXN1RCxHQUdBMDZCLEVBQUEzMEYsV0FDQW1OLFlBQUF3bkYsRUFDQWh1RixLQUFBLFFBQ0FtakUsTUFBQSxTQUFBazdCLEVBQUFzM0IsR0FDQSxJQUFBaGdILEVBQUEzUSxLQUFBMlEsTUFDQWpYLEVBQUFpWCxFQUFBc2pELE1BRUF0akQsRUFBQXBSLEtBQUE4NUYsRUFBQXI1RixLQUFBMndILEdBQ0EsSUFBQTE4RCxFQUFBajBELEtBQUE2M0ksT0FBQWxZLEVBQUFtWSxvQkFBQXArSSxFQUFBc0csS0FBQTYzSSxPQUFBNzNJLFVBQUFvdkYsUUFFQSxHQUFBbjdCLEdBQUEwckUsRUFBQStDLGFBQUF6dUUsR0FBQSxDQVdBLElBQUF4akQsRUFBQUUsRUFBQUYsR0FBQSxFQUNBQyxFQUFBQyxFQUFBRCxHQUFBLEVBQ0FqRixFQUFBa0YsRUFBQWxGLE1BQ0ErSSxFQUFBN0QsRUFBQTZELE9BQ0E0K0IsRUFBQTZnQixFQUFBeG9ELE1BQUF3b0QsRUFBQXovQyxPQWVBLEdBYkEsTUFBQS9JLEdBQUEsTUFBQStJLEVBRUEvSSxFQUFBK0ksRUFBQTQrQixFQUNLLE1BQUE1K0IsR0FBQSxNQUFBL0ksRUFDTCtJLEVBQUEvSSxFQUFBMm5DLEVBQ0ssTUFBQTNuQyxHQUFBLE1BQUErSSxJQUNML0ksRUFBQXdvRCxFQUFBeG9ELE1BQ0ErSSxFQUFBeS9DLEVBQUF6L0MsUUFJQXhVLEtBQUE0d0gsYUFBQXYzQixHQUVBMW9GLEVBQUFvbkksUUFBQXBuSSxFQUFBcW5JLFFBQUEsQ0FDQSxJQUFBL1QsRUFBQXR6SCxFQUFBc3pILElBQUEsRUFDQUMsRUFBQXZ6SCxFQUFBdXpILElBQUEsRUFDQTdxQyxFQUFBMnlCLFVBQUEvM0QsRUFBQWd3RSxFQUFBQyxFQUFBdnpILEVBQUFvbkksT0FBQXBuSSxFQUFBcW5JLFFBQUF2bkksRUFBQUMsRUFBQWpGLEVBQUErSSxRQUNLLEdBQUE3RCxFQUFBc3pILElBQUF0ekgsRUFBQXV6SCxHQUFBLENBQ0wsSUFFQTZULEVBQUF0c0ksR0FGQXc0SCxFQUFBdHpILEVBQUFzekgsSUFHQStULEVBQUF4akksR0FGQTB2SCxFQUFBdnpILEVBQUF1ekgsSUFHQTdxQyxFQUFBMnlCLFVBQUEvM0QsRUFBQWd3RSxFQUFBQyxFQUFBNlQsRUFBQUMsRUFBQXZuSSxFQUFBQyxFQUFBakYsRUFBQStJLFFBRUE2a0YsRUFBQTJ5QixVQUFBLzNELEVBQUF4akQsRUFBQUMsRUFBQWpGLEVBQUErSSxHQUlBLE1BQUE3RCxFQUFBNUMsT0FFQS9OLEtBQUErd0gsaUJBQUExM0IsR0FDQXI1RixLQUFBaTRJLGFBQUE1K0MsRUFBQXI1RixLQUFBeVcsc0JBR0FBLGdCQUFBLFdBQ0EsSUFBQTlGLEVBQUEzUSxLQUFBMlEsTUFNQSxPQUpBM1EsS0FBQTB5QyxRQUNBMXlDLEtBQUEweUMsTUFBQSxJQUFBbkksRUFBQTU1QixFQUFBRixHQUFBLEVBQUFFLEVBQUFELEdBQUEsRUFBQUMsRUFBQWxGLE9BQUEsRUFBQWtGLEVBQUE2RCxRQUFBLElBR0F4VSxLQUFBMHlDLFFBR0F0eEMsRUFBQTRRLFNBQUFnM0UsRUFBQXN1RCxHQUNBLElBQUFwMUksRUFBQThtRixFQUNBNXVGLEVBQUEwRCxRQUFBb0Usa0ZDM0ZBLElBRUE4UCxFQUZBemMsRUFBQSwyQ0FFQXljLFNBRUFrbUksRUFBQTNpSixFQUFBLHFEQUVBZzFDLEVBQUFoMUMsRUFBQSxtREFVQSxTQUFBNGlKLEVBQUE3cEYsR0FDQTRwRixFQUFBM2pKLEtBQUF5TCxLQUFBc3VELEdBQ0F0dUQsS0FBQW80SSxpQkFDQXA0SSxLQUFBcTRJLDBCQUNBcjRJLEtBQUFzNEksUUFBQSxFQUNBdDRJLEtBQUFpd0gsVUFBQSxFQUdBa29CLEVBQUE5akosVUFBQWszSCxhQUFBLEVBRUE0c0IsRUFBQTlqSixVQUFBa2tKLGlCQUFBLFdBQ0F2NEksS0FBQW80SSxpQkFDQXA0SSxLQUFBcTRJLDBCQUNBcjRJLEtBQUFzNEksUUFBQSxFQUNBdDRJLEtBQUFpNEQsUUFDQWo0RCxLQUFBaXdILFVBQUEsR0FHQWtvQixFQUFBOWpKLFVBQUFta0osZUFBQSxTQUFBaGdGLEVBQUFpZ0YsR0FDQUEsRUFDQXo0SSxLQUFBcTRJLHVCQUFBdmlKLEtBQUEwaUUsR0FFQXg0RCxLQUFBbzRJLGNBQUF0aUosS0FBQTBpRSxHQUdBeDRELEtBQUFpNEQsU0FHQWtnRixFQUFBOWpKLFVBQUFxa0osZ0JBQUEsU0FBQUMsRUFBQUYsR0FDQUEsTUFBQSxFQUVBLFFBQUFuaEosRUFBQSxFQUFpQkEsRUFBQXFoSixFQUFBcGhKLE9BQXlCRCxJQUMxQzBJLEtBQUF3NEksZUFBQUcsRUFBQXJoSixHQUFBbWhKLElBSUFOLEVBQUE5akosVUFBQWtrRSx1QkFBQSxTQUFBcitELEdBQ0EsUUFBQTVDLEVBQUEwSSxLQUFBczRJLFFBQTRCaGhKLEVBQUEwSSxLQUFBbzRJLGNBQUE3Z0osT0FBK0JELElBQzNENEMsS0FBQThGLEtBQUFvNEksY0FBQTlnSixJQUdBLElBQUFBLEVBQUEsRUFBaUJBLEVBQUEwSSxLQUFBcTRJLHVCQUFBOWdKLE9BQXdDRCxJQUN6RDRDLEtBQUE4RixLQUFBcTRJLHVCQUFBL2dKLEtBSUE2Z0osRUFBQTlqSixVQUFBdUUsT0FBQSxXQUNBb0gsS0FBQXdaLGtCQUVBLFFBQUFsaUIsRUFBQTBJLEtBQUFzNEksUUFBNEJoaEosRUFBQTBJLEtBQUFvNEksY0FBQTdnSixPQUErQkQsSUFBQSxFQUMzRGtoRSxFQUFBeDRELEtBQUFvNEksY0FBQTlnSixJQUVBNkQsT0FBQTZFLEtBQ0F3NEQsRUFBQTUvRCxTQUNBNC9ELEVBQUFyOUQsT0FBQSxLQUdBLElBQUE3RCxFQUFBLEVBQWlCQSxFQUFBMEksS0FBQXE0SSx1QkFBQTlnSixPQUF3Q0QsSUFBQSxDQUN6RCxJQUFBa2hFLEtBQUF4NEQsS0FBQXE0SSx1QkFBQS9nSixJQUVBNkQsT0FBQTZFLEtBQ0F3NEQsRUFBQTUvRCxTQUNBNC9ELEVBQUFyOUQsT0FBQSxPQUlBZzlJLEVBQUE5akosVUFBQThwRSxNQUFBLFNBQUFrN0IsRUFBQXMzQixHQUVBLFFBQUFyNUgsRUFBQTBJLEtBQUFzNEksUUFBNEJoaEosRUFBQTBJLEtBQUFvNEksY0FBQTdnSixPQUErQkQsSUFBQSxFQUMzRGtoRSxFQUFBeDRELEtBQUFvNEksY0FBQTlnSixJQUNBMmlHLGFBQUF6aEMsRUFBQXloQyxZQUFBWixHQUNBN2dDLEVBQUEyRixNQUFBazdCLEVBQUEvaEcsSUFBQTBJLEtBQUFzNEksUUFBQSxLQUFBdDRJLEtBQUFvNEksY0FBQTlnSixFQUFBLElBQ0FraEUsRUFBQXk0RCxZQUFBejRELEVBQUF5NEQsV0FBQTUzQixHQUdBcjVGLEtBQUFzNEksUUFBQWhoSixFQUVBLElBQUFBLEVBQUEsRUFBaUJBLEVBQUEwSSxLQUFBcTRJLHVCQUFBOWdKLE9BQXdDRCxJQUFBLENBQ3pELElBQUFraEUsS0FBQXg0RCxLQUFBcTRJLHVCQUFBL2dKLElBQ0EyaUcsYUFBQXpoQyxFQUFBeWhDLFlBQUFaLEdBQ0E3Z0MsRUFBQTJGLE1BQUFrN0IsRUFBQSxJQUFBL2hHLEVBQUEsS0FBQTBJLEtBQUFxNEksdUJBQUEvZ0osRUFBQSxJQUNBa2hFLEVBQUF5NEQsWUFBQXo0RCxFQUFBeTRELFdBQUE1M0IsR0FHQXI1RixLQUFBcTRJLDBCQUNBcjRJLEtBQUFpd0gsVUFBQSxHQUdBLElBQUFyeEgsS0FFQXU1SSxFQUFBOWpKLFVBQUFvaUIsZ0JBQUEsV0FDQSxJQUFBelcsS0FBQTB5QyxNQUFBLENBR0EsSUFGQSxJQUFBMWhCLEVBQUEsSUFBQXVaLEVBQUFzQixtQkFFQXYwQyxFQUFBLEVBQW1CQSxFQUFBMEksS0FBQW80SSxjQUFBN2dKLE9BQStCRCxJQUFBLENBQ2xELElBQUFraEUsRUFBQXg0RCxLQUFBbzRJLGNBQUE5Z0osR0FDQXNzSSxFQUFBcHJFLEVBQUEvaEQsa0JBQUFrSyxRQUVBNjNDLEVBQUE4NkIsc0JBQ0Fzd0MsRUFBQWhySCxlQUFBNC9DLEVBQUF4M0Msa0JBQUFwaUIsSUFHQW95QixFQUFBc2QsTUFBQXMxRixHQUdBNWpJLEtBQUEweUMsTUFBQTFoQixFQUdBLE9BQUFoeEIsS0FBQTB5QyxPQUdBeWxHLEVBQUE5akosVUFBQXUwQyxRQUFBLFNBQUFuNEIsRUFBQUMsR0FDQSxJQUFBa29JLEVBQUE1NEksS0FBQTAzSSxzQkFBQWpuSSxFQUFBQyxHQUdBLEdBRkExUSxLQUFBeVcsa0JBRUFteUIsUUFBQWd3RyxFQUFBLEdBQUFBLEVBQUEsSUFDQSxRQUFBdGhKLEVBQUEsRUFBbUJBLEVBQUEwSSxLQUFBbzRJLGNBQUE3Z0osT0FBK0JELElBQUEsQ0FHbEQsR0FGQTBJLEtBQUFvNEksY0FBQTlnSixHQUVBc3hDLFFBQUFuNEIsRUFBQUMsR0FDQSxTQUtBLFVBR0FzQixFQUFBbW1JLEVBQUFELEdBQ0EsSUFBQWgySSxFQUFBaTJJLEVBQ0EvOUksRUFBQTBELFFBQUFvRSwwRUNsSkEsSUFBQWQsRUFBQTdMLEVBQUEsMkNBRUE2b0csRUFBQTdvRyxFQUFBLGtEQVdBK3pGLEVBQUEsU0FBQTc0RSxFQUFBQyxFQUFBdUYsRUFBQUMsRUFBQXk1RCxFQUFBa3BFLEdBSUE3NEksS0FBQXlRLEVBQUEsTUFBQUEsRUFBQSxFQUFBQSxFQUNBelEsS0FBQTBRLEVBQUEsTUFBQUEsRUFBQSxFQUFBQSxFQUNBMVEsS0FBQWlXLEdBQUEsTUFBQUEsRUFBQSxFQUFBQSxFQUNBalcsS0FBQWtXLEdBQUEsTUFBQUEsRUFBQSxFQUFBQSxFQUVBbFcsS0FBQWhGLEtBQUEsU0FFQWdGLEtBQUErbkMsT0FBQTh3RyxJQUFBLEVBQ0F6NkMsRUFBQTdwRyxLQUFBeUwsS0FBQTJ2RSxJQUdBMlosRUFBQWoxRixXQUNBbU4sWUFBQThuRixHQUVBbG9GLEVBQUE0USxTQUFBczNFLEVBQUE4VSxHQUNBLElBQUFsOEYsRUFBQW9uRixFQUNBbHZGLEVBQUEwRCxRQUFBb0UsZ0VDakNBLElBQUFvMUksRUFBQS9oSixFQUFBLHFEQUVBNkwsRUFBQTdMLEVBQUEsMkNBRUFrb0ksRUFBQWxvSSxFQUFBLGdEQUVBdWpKLEVBQUF2akosRUFBQSw4Q0FJQTYySCxFQUZBNzJILEVBQUEsaURBRUFsQixVQUFBKzNILGlCQUNBcDNHLEVBQUFqSSxLQUFBaUksSUFDQStqSSxFQUFBLElBQUF0YixHQUFBLEdBUUEsU0FBQTMwQyxFQUFBeDZCLEdBQ0FncEYsRUFBQS9pSixLQUFBeUwsS0FBQXN1RCxHQU1BdHVELEtBQUE0cUUsS0FBQSxLQUdBa2UsRUFBQXowRixXQUNBbU4sWUFBQXNuRixFQUNBOXRGLEtBQUEsT0FDQWs4SSxhQUFBLEVBQ0F6OEgsdUJBQUEsRUFDQTBqRCxNQUFBLFNBQUFrN0IsRUFBQXMzQixHQUNBLElBY0EzL0YsRUFkQXJnQixFQUFBM1EsS0FBQTJRLE1BQ0FpNkQsRUFBQTVxRSxLQUFBNHFFLE1BQUFtdUUsRUFDQXBtQixFQUFBaGlILEVBQUFnaUgsWUFDQXFtQixFQUFBcm9JLEVBQUFxb0ksVUFDQXRwSSxFQUFBaUIsRUFBQWpCLEtBQ0FvQyxFQUFBbkIsRUFBQW1CLE9BQ0FtbkksRUFBQUQsS0FBQXRwSSxFQUFBaWdFLFdBQ0F1cEUsRUFBQXZtQixLQUFBN2dILEVBQUE2OUQsV0FDQXdwRSxFQUFBSCxLQUFBdHBJLEVBQUF1a0QsTUFDQW1sRixFQUFBem1CLEtBQUE3Z0gsRUFBQW1pRCxPQUNBdGpELEVBQUFwUixLQUFBODVGLEVBQUFyNUYsS0FBQTJ3SCxHQUNBM3dILEtBQUE0d0gsYUFBQXYzQixHQUVBcjVGLEtBQUFrckgsV0FHQSt0QixJQUNBam9ILEtBQUFoeEIsS0FBQXlXLGtCQUNBelcsS0FBQXE1SSxjQUFBMW9JLEVBQUF3N0csWUFBQTl5QixFQUFBM3BGLEVBQUFzaEIsSUFHQWtvSCxJQUNBbG9ILEtBQUFoeEIsS0FBQXlXLGtCQUNBelcsS0FBQXM1SSxnQkFBQTNvSSxFQUFBdzdHLFlBQUE5eUIsRUFBQXZuRixFQUFBa2YsS0FLQWlvSCxFQUVBNS9DLEVBQUFpekIsVUFBQXRzSCxLQUFBcTVJLGNBQ0tGLElBQ0w5L0MsRUFBQWl6QixVQUFBRixFQUFBNzNILEtBQUFtYixFQUFBMnBGLElBR0E2L0MsRUFDQTcvQyxFQUFBa2dELFlBQUF2NUksS0FBQXM1SSxnQkFDS0YsSUFDTC8vQyxFQUFBa2dELFlBQUFudEIsRUFBQTczSCxLQUFBdWQsRUFBQXVuRixJQUdBLElBQUFybUIsRUFBQXJpRSxFQUFBcWlFLFNBQ0F3bUUsRUFBQTdvSSxFQUFBNm9JLGVBQ0FDLElBQUFwZ0QsRUFBQWl2QyxZQUVBanRILEVBQUFyYixLQUFBbTNJLGlCQUNBdnNFLEVBQUFnOUQsU0FBQXZzSCxFQUFBLEdBQUFBLEVBQUEsSUFNQXJiLEtBQUFrM0ksYUFBQWxrRSxJQUFBeW1FLEdBQUE5bUIsR0FDQS9uRCxFQUFBaW1ELFVBQUF4M0IsR0FFQXJtQixJQUFBeW1FLElBQ0E3dUUsRUFBQTA5RCxZQUFBdDFELEdBQ0FwSSxFQUFBNDlELGtCQUFBZ1IsSUFHQXg1SSxLQUFBdzRGLFVBQUE1dEIsRUFBQTVxRSxLQUFBaVAsT0FBQSxHQUVBalAsS0FBQTRxRSxPQUNBNXFFLEtBQUFrM0ksYUFBQSxLQUlBNzlDLEVBQUF3M0IsWUFDQTd3SCxLQUFBNHFFLEtBQUEyK0QsWUFBQWx3QyxJQUdBMi9DLEdBQUFwdUUsRUFBQWw3RCxLQUFBMnBGLEdBRUFybUIsR0FBQXltRSxJQUNBcGdELEVBQUFpdkMsWUFBQXQxRCxHQUNBcW1CLEVBQUFtZ0Qsa0JBR0E3bUIsR0FBQS9uRCxFQUFBOTRELE9BQUF1bkYsR0FFQXJtQixHQUFBeW1FLEdBR0FwZ0QsRUFBQWl2QyxnQkFJQSxNQUFBMzNILEVBQUE1QyxPQUVBL04sS0FBQSt3SCxpQkFBQTEzQixHQUNBcjVGLEtBQUFpNEksYUFBQTUrQyxFQUFBcjVGLEtBQUF5VyxxQkFLQStoRixVQUFBLFNBQUFhLEVBQUFxZ0QsRUFBQXgvQyxLQUNBazlDLGdCQUFBLFdBQ0FwM0ksS0FBQTRxRSxLQUFBLElBQUE2eUQsR0FFQWhuSCxnQkFBQSxXQUNBLElBQUF1YSxFQUFBaHhCLEtBQUEweUMsTUFDQS9oQyxFQUFBM1EsS0FBQTJRLE1BQ0FncEksR0FBQTNvSCxFQUVBLEdBQUEyb0gsRUFBQSxDQUNBLElBQUEvdUUsRUFBQTVxRSxLQUFBNHFFLEtBRUFBLElBRUFBLEVBQUE1cUUsS0FBQTRxRSxLQUFBLElBQUE2eUQsR0FHQXo5SCxLQUFBazNJLGNBQ0F0c0UsRUFBQWltRCxZQUNBN3dILEtBQUF3NEYsVUFBQTV0QixFQUFBNXFFLEtBQUFpUCxPQUFBLElBR0EraEIsRUFBQTQ1QyxFQUFBbjBELGtCQUtBLEdBRkF6VyxLQUFBMHlDLE1BQUExaEIsRUFFQXJnQixFQUFBZ2lILFlBQUEsQ0FJQSxJQUFBaW5CLEVBQUE1NUksS0FBQTY1SSxrQkFBQTc1SSxLQUFBNjVJLGdCQUFBN29ILEVBQUFyUSxTQUVBLEdBQUEzZ0IsS0FBQWtySCxTQUFBeXVCLEVBQUEsQ0FDQUMsRUFBQXRtRyxLQUFBdGlCLEdBRUEsSUFBQTZuRSxFQUFBbG9GLEVBQUF3a0IsVUFFQTJrSCxFQUFBbnBJLEVBQUFvaEYsY0FBQS94RixLQUFBKzVJLGVBQUEsRUFFQXBwSSxFQUFBcW9JLFlBQ0FuZ0QsRUFBQTlyRixLQUFBbUcsSUFBQTJsRixFQUFBNzRGLEtBQUF5YSx3QkFBQSxJQUtBcS9ILEVBQUEsUUFDQUYsRUFBQW51SSxPQUFBb3RGLEVBQUFpaEQsRUFDQUYsRUFBQXBsSSxRQUFBcWtGLEVBQUFpaEQsRUFDQUYsRUFBQW5wSSxHQUFBb29GLEVBQUFpaEQsRUFBQSxFQUNBRixFQUFBbHBJLEdBQUFtb0YsRUFBQWloRCxFQUFBLEdBS0EsT0FBQUYsRUFHQSxPQUFBNW9ILEdBRUE0WCxRQUFBLFNBQUFuNEIsRUFBQUMsR0FDQSxJQUFBa29JLEVBQUE1NEksS0FBQTAzSSxzQkFBQWpuSSxFQUFBQyxHQUNBc2dCLEVBQUFoeEIsS0FBQXlXLGtCQUNBOUYsRUFBQTNRLEtBQUEyUSxNQUlBLEdBSEFGLEVBQUFtb0ksRUFBQSxHQUNBbG9JLEVBQUFrb0ksRUFBQSxHQUVBNW5ILEVBQUE0WCxRQUFBbjRCLEVBQUFDLEdBQUEsQ0FDQSxJQUFBaTVFLEVBQUEzcEYsS0FBQTRxRSxLQUFBM3RFLEtBRUEsR0FBQTBULEVBQUFnaUgsWUFBQSxDQUNBLElBQUF4OUYsRUFBQXhrQixFQUFBd2tCLFVBQ0Eya0gsRUFBQW5wSSxFQUFBb2hGLGNBQUEveEYsS0FBQSs1SSxlQUFBLEVBRUEsR0FBQUQsRUFBQSxRQUVBbnBJLEVBQUFxb0ksWUFDQTdqSCxFQUFBcG9CLEtBQUFtRyxJQUFBaWlCLEVBQUFuMUIsS0FBQXlhLHlCQUdBcStILEVBQUFoYyxjQUFBbnpDLEVBQUF4MEQsRUFBQTJrSCxFQUFBcnBJLEVBQUFDLElBQ0EsU0FLQSxHQUFBQyxFQUFBcW9JLFVBQ0EsT0FBQUYsRUFBQWx3RyxRQUFBK2dELEVBQUFsNUUsRUFBQUMsR0FJQSxVQU1BdW5ELE1BQUEsU0FBQWcvRSxHQUNBLE1BQUFBLElBQ0FBLEdBQUEsR0FJQUEsSUFDQWozSSxLQUFBazNJLFlBQUFELEVBQ0FqM0ksS0FBQTB5QyxNQUFBLE1BR0ExeUMsS0FBQWtySCxTQUFBLEVBQ0FsckgsS0FBQThxRixNQUFBOXFGLEtBQUE4cUYsS0FBQW04QixVQUVBam5ILEtBQUFtbkgsY0FDQW5uSCxLQUFBbW5ILGFBQUFsdkQsU0FRQThNLGFBQUEsU0FBQTZ3RCxHQUNBLE9BQUE1MUgsS0FBQW9OLFFBQUEsUUFBQXdvSCxJQUdBNU8sT0FBQSxTQUFBMW5ILEVBQUE5SSxHQUVBLFVBQUE4SSxHQUNBVSxLQUFBK08sU0FBQXZZLEdBQ0F3SixLQUFBazNJLGFBQUEsRUFDQWwzSSxLQUFBMHlDLE1BQUEsTUFFQTRrRyxFQUFBampKLFVBQUEyeUgsT0FBQXp5SCxLQUFBeUwsS0FBQVYsRUFBQTlJLElBUUF1WSxTQUFBLFNBQUF6UCxFQUFBOUksR0FDQSxJQUFBeVksRUFBQWpQLEtBQUFpUCxNQUVBLEdBQUFBLEVBQUEsQ0FDQSxHQUFBN04sRUFBQW1rQixTQUFBam1CLEdBQ0EsUUFBQW5KLEtBQUFtSixFQUNBQSxFQUFBaEwsZUFBQTZCLEtBQ0E4WSxFQUFBOVksR0FBQW1KLEVBQUFuSixTQUlBOFksRUFBQTNQLEdBQUE5SSxFQUdBd0osS0FBQWk0RCxPQUFBLEdBR0EsT0FBQWo0RCxNQUVBKzVJLGFBQUEsV0FDQSxJQUFBbjdJLEVBQUFvQixLQUFBMFosVUFLQSxPQUFBOWEsR0FBQW9XLEVBQUFwVyxFQUFBLGFBQUFvVyxFQUFBcFcsRUFBQSxZQUFBbU8sS0FBQWdILEtBQUFpQixFQUFBcFcsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxTQWNBa3FGLEVBQUFyaUYsT0FBQSxTQUFBK0ksR0FDQSxJQUFBd3FJLEVBQUEsU0FBQTFyRixHQUNBdzZCLEVBQUF2MEYsS0FBQXlMLEtBQUFzdUQsR0FFQTkrQyxFQUFBbUIsT0FFQTNRLEtBQUEyUSxNQUFBMDZFLFdBQUE3N0UsRUFBQW1CLE9BQUEsR0FJQSxJQUFBc3BJLEVBQUF6cUksRUFBQVAsTUFFQSxHQUFBZ3JJLEVBQUEsQ0FDQWo2SSxLQUFBaVAsTUFBQWpQLEtBQUFpUCxVQUNBLElBQUFpckksRUFBQWw2SSxLQUFBaVAsTUFFQSxRQUFBOVksS0FBQThqSixHQUNBQyxFQUFBNWxKLGVBQUE2QixJQUFBOGpKLEVBQUEzbEosZUFBQTZCLEtBQ0ErakosRUFBQS9qSixHQUFBOGpKLEVBQUE5akosSUFLQXFaLEVBQUFsSCxNQUFBa0gsRUFBQWxILEtBQUEvVCxLQUFBeUwsS0FBQXN1RCxJQUtBLFFBQUFuNEQsS0FGQWlMLEVBQUE0USxTQUFBZ29JLEVBQUFseEQsR0FFQXQ1RSxFQUVBLFVBQUFyWixHQUFBLFVBQUFBLElBQ0E2akosRUFBQTNsSixVQUFBOEIsR0FBQXFaLEVBQUFyWixJQUlBLE9BQUE2akosR0FHQTU0SSxFQUFBNFEsU0FBQTgyRSxFQUFBd3VELEdBQ0EsSUFBQXAxSSxFQUFBNG1GLEVBQ0ExdUYsRUFBQTBELFFBQUFvRSxpRUM3VkEsSUFBQW1vSCxFQUFBLFNBQUFwMkQsRUFBQWttRixHQUdBbjZJLEtBQUFpMEQsUUFDQWowRCxLQUFBbTZJLFNBRUFuNkksS0FBQWhGLEtBQUEsV0FHQXF2SCxFQUFBaDJILFVBQUErM0gsaUJBQUEsU0FBQS95QixHQUNBLE9BQUFBLEVBQUErZ0QsY0FBQXA2SSxLQUFBaTBELE1BQUFqMEQsS0FBQW02SSxRQUFBLFdBR0EsSUFBQWo0SSxFQUFBbW9ILEVBQ0Fqd0gsRUFBQTBELFFBQUFvRSwwRUNkQSxJQUFBZCxFQUFBN0wsRUFBQSwyQ0FFQTZvRyxFQUFBN29HLEVBQUEsa0RBVUFnMEYsRUFBQSxTQUFBOTRFLEVBQUFDLEVBQUExUixFQUFBMndFLEVBQUFrcEUsR0FJQTc0SSxLQUFBeVEsRUFBQSxNQUFBQSxFQUFBLEdBQUFBLEVBQ0F6USxLQUFBMFEsRUFBQSxNQUFBQSxFQUFBLEdBQUFBLEVBQ0ExUSxLQUFBaEIsRUFBQSxNQUFBQSxFQUFBLEdBQUFBLEVBRUFnQixLQUFBaEYsS0FBQSxTQUVBZ0YsS0FBQStuQyxPQUFBOHdHLElBQUEsRUFDQXo2QyxFQUFBN3BHLEtBQUF5TCxLQUFBMnZFLElBR0E0WixFQUFBbDFGLFdBQ0FtTixZQUFBK25GLEdBRUFub0YsRUFBQTRRLFNBQUF1M0UsRUFBQTZVLEdBQ0EsSUFBQWw4RixFQUFBcW5GLEVBQ0FudkYsRUFBQTBELFFBQUFvRSxpRUMvQkEsSUFBQW00SSxFQUFBOWtKLEVBQUEsMERBRUEra0osSUFBQSwwSUFHQWx3QixFQUFBLFNBQUE5N0QsRUFBQWsrQixHQUNBeHNGLEtBQUFxckYsV0FBQS84QixHQUFBLEdBQ0F0dUQsS0FBQXdzRixRQUdBLFNBQUErdEQsRUFBQWxoRCxFQUFBdDJDLEVBQUEveEIsR0FDQSxJQUFBdmdCLEVBQUEsTUFBQXN5QyxFQUFBdHlDLEVBQUEsRUFBQXN5QyxFQUFBdHlDLEVBQ0F3RixFQUFBLE1BQUE4c0MsRUFBQTlzQyxHQUFBLEVBQUE4c0MsRUFBQTlzQyxHQUNBdkYsRUFBQSxNQUFBcXlDLEVBQUFyeUMsRUFBQSxFQUFBcXlDLEVBQUFyeUMsRUFDQXdGLEVBQUEsTUFBQTZzQyxFQUFBN3NDLEdBQUEsRUFBQTZzQyxFQUFBN3NDLEdBZUEsT0FiQTZzQyxFQUFBaGIsU0FDQXQzQixJQUFBdWdCLEVBQUF2bEIsTUFBQXVsQixFQUFBdmdCLEVBQ0F3RixJQUFBK2EsRUFBQXZsQixNQUFBdWxCLEVBQUF2Z0IsRUFDQUMsSUFBQXNnQixFQUFBeGMsT0FBQXdjLEVBQUF0Z0IsRUFDQXdGLElBQUE4YSxFQUFBeGMsT0FBQXdjLEVBQUF0Z0IsR0FJQUQsRUFBQThHLE1BQUE5RyxHQUFBLEVBQUFBLEVBQ0F3RixFQUFBc0IsTUFBQXRCLEdBQUEsRUFBQUEsRUFDQXZGLEVBQUE2RyxNQUFBN0csR0FBQSxFQUFBQSxFQUNBd0YsRUFBQXFCLE1BQUFyQixHQUFBLEVBQUFBLEVBQ0FtakYsRUFBQWtoRCxxQkFBQTlwSSxFQUFBQyxFQUFBdUYsRUFBQUMsR0FJQSxTQUFBc2tJLEVBQUFuaEQsRUFBQXQyQyxFQUFBL3hCLEdBQ0EsSUFBQXZsQixFQUFBdWxCLEVBQUF2bEIsTUFDQStJLEVBQUF3YyxFQUFBeGMsT0FDQTZDLEVBQUF0SyxLQUFBc0ssSUFBQTVMLEVBQUErSSxHQUNBL0QsRUFBQSxNQUFBc3lDLEVBQUF0eUMsRUFBQSxHQUFBc3lDLEVBQUF0eUMsRUFDQUMsRUFBQSxNQUFBcXlDLEVBQUFyeUMsRUFBQSxHQUFBcXlDLEVBQUFyeUMsRUFDQTFSLEVBQUEsTUFBQStqRCxFQUFBL2pELEVBQUEsR0FBQStqRCxFQUFBL2pELEVBU0EsT0FQQStqRCxFQUFBaGIsU0FDQXQzQixJQUFBaEYsRUFBQXVsQixFQUFBdmdCLEVBQ0FDLElBQUE4RCxFQUFBd2MsRUFBQXRnQixFQUNBMVIsR0FBQXFZLEdBR0FnaUYsRUFBQW1oRCxxQkFBQS9wSSxFQUFBQyxFQUFBLEVBQUFELEVBQUFDLEVBQUExUixHQTRZQSxJQUZBLElBQUF5N0ksRUF0WUFyd0IsRUFBQS8xSCxXQUNBbU4sWUFBQTRvSCxFQUtBNTlCLEtBQUEsS0FLQTk4RSxLQUFBLE9BS0FvQyxPQUFBLEtBS0FGLFFBQUEsRUFLQW9oRSxTQUFBLEtBS0F3bUUsZUFBQSxFQUtBNTFILFdBQUEsRUFLQUksY0FBQSxFQUtBQyxjQUFBLEVBS0FrUixVQUFBLEVBTUE0OEQsZUFBQSxFQU9BaGtGLEtBQUEsS0FTQXFJLEtBQUEsS0FPQWtKLFNBQUEsS0FNQW15RCxVQUFBLEtBTUF2MEMsV0FBQSxLQU9BRCxTQUFBLEtBTUF1MEMsV0FBQSxLQU1Bb2MsUUFBQSxLQUtBenZFLFNBQUEsT0FLQStzRSxXQUFBLEtBS0F3QyxVQUFBLEtBTUFDLFdBQUEsS0FTQXhDLGdCQUFBLEVBS0FzQyxlQUFBLEtBU0ExdUUsYUFBQSxTQU1BdkksU0FBQSxLQU1BazJFLFdBQUEsS0FLQWo3RSxVQUFBLEtBS0FDLGtCQUFBLEtBS0FvekQsYUFBQSxFQUtBc3BCLGdCQUFBLGNBS0FDLGVBQUEsRUFLQUMsa0JBQUEsRUFLQUMsa0JBQUEsRUFLQVAsbUJBQUEsY0FLQUMsa0JBQUEsRUFLQUMscUJBQUEsRUFLQUMscUJBQUEsRUFPQXVzRCxlQUFBLEVBTUFwNkgsYUFBQSxFQVVBcTZILFdBQUEsS0FLQTlzRCxvQkFBQSxLQUtBUCxnQkFBQSxLQUtBQyxnQkFBQSxFQUtBUSxpQkFBQSxFQU1BRCxZQUFBLEtBTUFkLEtBQUEsS0FNQWswQyxTQUFBLEtBTUE1b0UsTUFBQSxLQUtBLzRELEtBQUEsU0FBQTg1RixFQUFBM3NGLEVBQUFpa0gsR0FLQSxJQUpBLElBQ0FpcUIsRUFBQWpxQixLQUFBaGdILE1BQ0FrcUksR0FBQUQsRUFFQXRqSixFQUFBLEVBQW1CQSxFQUFBZ2pKLEVBQUEvaUosT0FBK0JELElBQUEsQ0FDbEQsSUFBQW80QyxFQUFBNHFHLEVBQUFoakosR0FDQWcrRSxFQUFBNWxDLEVBQUEsSUFFQW1yRyxHQVJBNzZJLEtBUUFzMUUsS0FBQXNsRSxFQUFBdGxFLE1BRUErakIsRUFBQS9qQixHQUFBK2tFLEVBQUFoaEQsRUFBQS9qQixFQVZBdDFFLEtBVUFzMUUsSUFBQTVsQyxFQUFBLEtBb0JBLElBaEJBbXJHLEdBZEE3NkksS0FjQTBQLE9BQUFrckksRUFBQWxySSxRQUNBMnBGLEVBQUFpekIsVUFmQXRzSCxLQWVBMFAsT0FHQW1ySSxHQWxCQTc2SSxLQWtCQThSLFNBQUE4b0ksRUFBQTlvSSxVQUNBdW5GLEVBQUFrZ0QsWUFuQkF2NUksS0FtQkE4UixTQUdBK29JLEdBdEJBNzZJLEtBc0JBNFIsVUFBQWdwSSxFQUFBaHBJLFdBQ0F5bkYsRUFBQW16QixZQUFBLE1BdkJBeHNILEtBdUJBNFIsUUFBQSxFQXZCQTVSLEtBdUJBNFIsVUFHQWlwSSxHQTFCQTc2SSxLQTBCQXM0RCxRQUFBc2lGLEVBQUF0aUYsU0FDQStnQyxFQUFBMHlCLHlCQTNCQS9ySCxLQTJCQXM0RCxPQUFBLGVBR0F0NEQsS0FBQTJ5SCxZQUFBLENBQ0EsSUFBQXg5RixFQS9CQW4xQixLQStCQW0xQixVQUNBa2tFLEVBQUFsa0UsYUFBQW4xQixLQUFBK3hGLGVBQUFybEYsS0FBQXF0SSxhQUFBcnRJLEVBQUFxdEksZUFBQSxLQUdBZixRQUFBLFdBQ0EsSUFBQXRwSSxFQUFBMVAsS0FBQTBQLEtBQ0EsYUFBQUEsR0FBQSxTQUFBQSxHQUVBaWpILFVBQUEsV0FDQSxJQUFBN2dILEVBQUE5UixLQUFBOFIsT0FDQSxhQUFBQSxHQUFBLFNBQUFBLEdBQUE5UixLQUFBbTFCLFVBQUEsR0FVQWsyRCxXQUFBLFNBQUF5dkQsRUFBQS9sRSxHQUNBLEdBQUErbEUsRUFDQSxRQUFBM2tKLEtBQUEya0osR0FDQUEsRUFBQXhtSixlQUFBNkIsS0FBQSxJQUFBNCtFLEtBQUEsSUFBQUEsRUFBQS8wRSxLQUFBMUwsZUFBQTZCLEdBQUEsTUFBQTJrSixFQUFBM2tKLE1BQ0E2SixLQUFBN0osR0FBQTJrSixFQUFBM2tKLEtBV0FJLElBQUEsU0FBQXdzRCxFQUFBdnNELEdBQ0EsaUJBQUF1c0QsRUFDQS9pRCxLQUFBK2lELEdBQUF2c0QsRUFFQXdKLEtBQUFxckYsV0FBQXRvQyxHQUFBLElBUUFwaUMsTUFBQSxXQUNBLElBQUFvNkgsRUFBQSxJQUFBLzZJLEtBQUF3QixZQUVBLE9BREF1NUksRUFBQTF2RCxXQUFBcnJGLE1BQUEsR0FDQSs2SSxHQUVBNXVCLFlBQUEsU0FBQTl5QixFQUFBdDJDLEVBQUEveEIsR0FLQSxJQUpBLElBQ0FncUgsR0FEQSxXQUFBajRGLEVBQUEvbkQsS0FBQXcvSSxFQUFBRCxHQUNBbGhELEVBQUF0MkMsRUFBQS94QixHQUNBMitDLEVBQUE1c0IsRUFBQTRzQixXQUVBcjRFLEVBQUEsRUFBbUJBLEVBQUFxNEUsRUFBQXA0RSxPQUF1QkQsSUFDMUMwakosRUFBQXBELGFBQUFqb0UsRUFBQXI0RSxHQUFBNlYsT0FBQXdpRSxFQUFBcjRFLEdBQUErckIsT0FHQSxPQUFBMjNILElBS0ExakosRUFBQSxFQUFlQSxFQUFBZ2pKLEVBQUEvaUosT0FBK0JELElBQUEsQ0FDOUMsSUFBQW80QyxFQUFBNHFHLEVBQUFoakosR0FFQW80QyxFQUFBLEtBQUErcUcsSUFDQUEsRUFBQS9xRyxFQUFBLElBQUFBLEVBQUEsSUFLQTA2RSxFQUFBK0IsWUFBQXN1QixFQUFBdHVCLFlBQ0EsSUFBQWpxSCxFQUFBa29ILEVBQ0Fod0gsRUFBQTBELFFBQUFvRSxnRUNyY0EsSUFBQW8xSSxFQUFBL2hKLEVBQUEscURBRUE2TCxFQUFBN0wsRUFBQSwyQ0FFQXllLEVBQUF6ZSxFQUFBLDhDQUVBMGxKLEVBQUExbEosRUFBQSxxREFRQXlZLEVBQUEsU0FBQXNnRCxHQUVBZ3BGLEVBQUEvaUosS0FBQXlMLEtBQUFzdUQsSUFHQXRnRCxFQUFBM1osV0FDQW1OLFlBQUF3TSxFQUNBaFQsS0FBQSxPQUNBbWpFLE1BQUEsU0FBQWs3QixFQUFBczNCLEdBQ0EsSUFBQWhnSCxFQUFBM1EsS0FBQTJRLE1BRUEzUSxLQUFBa3JILFNBQUErdkIsRUFBQUMsbUJBQUF2cUksR0FBQSxHQUVBQSxFQUFBakIsS0FBQWlCLEVBQUFtQixPQUFBbkIsRUFBQWlULFdBQUFqVCxFQUFBa1QsWUFBQWxULEVBQUFxVCxjQUFBclQsRUFBQXNULGNBQUEsS0FDQSxJQUFBbFcsRUFBQTRDLEVBQUE1QyxLQUVBLE1BQUFBLE9BQUEsSUFFQTRDLEVBQUFwUixLQUFBODVGLEVBQUFyNUYsS0FBQTJ3SCxHQUVBc3FCLEVBQUFFLGFBQUFwdEksRUFBQTRDLEtBSUEzUSxLQUFBNHdILGFBQUF2M0IsR0FDQTRoRCxFQUFBRyxXQUFBcDdJLEtBQUFxNUYsRUFBQXRyRixFQUFBNEMsR0FDQTNRLEtBQUErd0gsaUJBQUExM0IsS0FFQTVpRixnQkFBQSxXQUNBLElBQUE5RixFQUFBM1EsS0FBQTJRLE1BSUEsR0FGQTNRLEtBQUFrckgsU0FBQSt2QixFQUFBQyxtQkFBQXZxSSxHQUFBLElBRUEzUSxLQUFBMHlDLE1BQUEsQ0FDQSxJQUFBM2tDLEVBQUE0QyxFQUFBNUMsS0FDQSxNQUFBQSxLQUFBLEdBQUFBLEVBQUEsR0FDQSxJQUFBaWpCLEVBQUFoZCxFQUFBeUMsZ0JBQUE5RixFQUFBNUMsS0FBQSxHQUFBNEMsRUFBQXlGLEtBQUF6RixFQUFBYyxVQUFBZCxFQUFBZSxrQkFBQWYsRUFBQW05RSxZQUFBbjlFLEVBQUFxOEUsTUFJQSxHQUhBaDhELEVBQUF2Z0IsR0FBQUUsRUFBQUYsR0FBQSxFQUNBdWdCLEVBQUF0Z0IsR0FBQUMsRUFBQUQsR0FBQSxFQUVBdXFJLEVBQUFJLFVBQUExcUksRUFBQXU2RSxXQUFBdjZFLEVBQUF3NkUsaUJBQUEsQ0FDQSxJQUFBME4sRUFBQWxvRixFQUFBdzZFLGdCQUNBbjZELEVBQUF2Z0IsR0FBQW9vRixFQUFBLEVBQ0E3bkUsRUFBQXRnQixHQUFBbW9GLEVBQUEsRUFDQTduRSxFQUFBdmxCLE9BQUFvdEYsRUFDQTduRSxFQUFBeGMsUUFBQXFrRixFQUdBNzRGLEtBQUEweUMsTUFBQTFoQixFQUdBLE9BQUFoeEIsS0FBQTB5QyxRQUdBdHhDLEVBQUE0USxTQUFBaEUsRUFBQXNwSSxHQUNBLElBQUFwMUksRUFBQThMLEVBQ0E1VCxFQUFBMEQsUUFBQW9FLG9GQ3RFQSxJQUFBK3VCLEVBQUExN0IsRUFBQSwwQ0FnQkErbEosSUFBQSxnRkF1Q0FsaEosRUFBQTBELFFBckNBLFNBQUF5OUksR0FFQSxPQUFBdHFILEVBQUFxb0MsUUFBQWdwQyxJQUFBcnhFLEVBQUFxb0MsUUFBQTJCLFNBQUEsY0FDQSxJQUVBdWdGLEVBRkFockIsRUFBQXh3SCxLQUFBbXZILFlBQ0F4K0csRUFBQTNRLEtBQUEyUSxNQUdBLEdBQUE2L0csRUFDQSxRQUFBbDVILEVBQUEsRUFBcUJBLEVBQUFrNUgsRUFBQWo1SCxPQUFzQkQsSUFBQSxDQUMzQyxJQUFBb2MsRUFBQTg4RyxFQUFBbDVILEdBQ0EyWCxFQUFBeUUsS0FBQXpFLE1BQ0FqVSxFQUFBMFksS0FBQTFZLEtBRUEsR0FBQWlVLElBQUEsV0FBQWpVLEdBQUFpVSxFQUFBcEUsYUFBQW9FLEVBQUFwQyxVQUFBLFNBQUE3UixLQUFBaVUsRUFBQXhELFFBQUF3RCxFQUFBdUYsU0FBQSxDQUNBLFFBQUFyYSxFQUFBLEVBQXlCQSxFQUFBbWhKLEVBQUEvakosT0FBdUI0QyxJQUdoRG1oSixFQUFBbmhKLEdBQUEsR0FBQXdXLEVBQUEycUksRUFBQW5oSixHQUFBLElBQ0F3VyxFQUFBMnFJLEVBQUFuaEosR0FBQSxJQUFBbWhKLEVBQUFuaEosR0FBQSxHQUdBcWhKLEdBQUEsRUFDQSxPQU9BLEdBRkFELEVBQUExakosTUFBQW1JLEtBQUF5SSxXQUVBK3lJLEVBQ0EsSUFBQXJoSixFQUFBLEVBQXFCQSxFQUFBbWhKLEVBQUEvakosT0FBdUI0QyxJQUM1Q3dXLEVBQUEycUksRUFBQW5oSixHQUFBLElBQUFtaEosRUFBQW5oSixHQUFBLElBR0dvaEosMkVDcERILElBQUFFLEdBQ0E3M0gsV0FBQSxFQUNBSSxjQUFBLEVBQ0FDLGNBQUEsRUFDQW9xRSxlQUFBLEVBQ0FDLGtCQUFBLEVBQ0FDLGtCQUFBLEVBQ0FOLGtCQUFBLEVBQ0FDLHFCQUFBLEVBQ0FDLHFCQUFBLEdBV0EvekYsRUFBQTBELFFBUkEsU0FBQXU3RixFQUFBdGhELEVBQUF2aEQsR0FDQSxPQUFBaWxKLEVBQUFubkosZUFBQXlqRCxHQUNBdmhELEVBQUE2aUcsRUFBQWpuQyxJQUdBNTdELHlFQ2pCQSxJQUVBa2xKLEVBQUEsSUFGQW5tSixFQUFBLDBDQUVBLEtBaUVBLFNBQUFvbUosSUFDQSxJQUFBQyxFQUFBNTdJLEtBQUE2N0ksZUFDQTc3SSxLQUFBb3ZGLE9BQUFwdkYsS0FBQTY3SSxlQUFBLEtBRUEsUUFBQXZrSixFQUFBLEVBQWlCQSxFQUFBc2tKLEVBQUFFLFFBQUF2a0osT0FBaUNELElBQUEsQ0FDbEQsSUFBQXlrSixFQUFBSCxFQUFBRSxRQUFBeGtKLEdBQ0E0QyxFQUFBNmhKLEVBQUE3aEosR0FDQUEsS0FBQThGLEtBQUErN0ksRUFBQUMsV0FDQUQsRUFBQUUsT0FBQWhrRixRQUdBMmpGLEVBQUFFLFFBQUF2a0osT0FBQSxFQUdBLFNBQUFtckksRUFBQXp1RSxHQUNBLE9BQUFBLEtBQUF4b0QsT0FBQXdvRCxFQUFBei9DLE9BR0ExVyxFQUFBMmtJLGVBN0VBLFNBQUF5WixHQUNBLG9CQUFBQSxFQUFBLENBQ0EsSUFBQU4sRUFBQUYsRUFBQXBsSixJQUFBNGxKLEdBQ0EsT0FBQU4sS0FBQTNuRixNQUVBLE9BQUFpb0YsR0F5RUFwK0ksRUFBQWc2SSxvQkF6REEsU0FBQW9FLEVBQUFqb0YsRUFBQWdvRixFQUFBL2hKLEVBQUE4aEosR0FDQSxHQUFBRSxFQUVHLHFCQUFBQSxFQUFBLENBRUgsR0FBQWpvRixLQUFBa29GLGVBQUFELElBQUFELEVBQ0EsT0FBQWhvRixFQUtBLElBQUEybkYsRUFBQUYsRUFBQXBsSixJQUFBNGxKLEdBQ0FILEdBQ0FFLFNBQ0EvaEosS0FDQThoSixhQWdCQSxPQWJBSixHQUVBbFosRUFEQXp1RSxFQUFBMm5GLEVBQUEzbkYsUUFDQTJuRixFQUFBRSxRQUFBaG1KLEtBQUFpbUosS0FFQTluRixNQUFBLElBQUFELE9BQ0FDLEVBQUFtN0IsT0FBQXVzRCxFQUNBRCxFQUFBblYsSUFBQTJWLEVBQUFqb0YsRUFBQTRuRixnQkFDQTVuRixRQUNBNm5GLFNBQUFDLEtBRUE5bkYsRUFBQXY2RCxJQUFBdTZELEVBQUFrb0YsYUFBQUQsR0FHQWpvRixFQUdBLE9BQUFpb0YsRUFoQ0EsT0FBQWpvRixHQXdEQW4yRCxFQUFBNGtJLG9GQ3ZGQSxJQUFBMFosRUFBQTdtSixFQUFBLDZEQUVBOG1KLEVBQUE5bUosRUFBQSw2REFrQ0F1SSxFQUFBMDZGLFVBaENBLFNBQUFhLEVBQUFwcUYsRUFBQXlwRixHQUNBLElBQUFub0YsRUFBQXRCLEVBQUFzQixPQUNBaEYsRUFBQTBELEVBQUExRCxPQUVBLEdBQUFnRixLQUFBaFosUUFBQSxHQUNBLEdBQUFnVSxHQUFBLFdBQUFBLEVBQUEsQ0FDQSxJQUFBK3dJLEVBQUFELEVBQUE5ckksRUFBQWhGLEVBQUFtdEYsRUFBQXpwRixFQUFBc3RJLGtCQUNBbGpELEVBQUFyNEQsT0FBQXp3QixFQUFBLE1BQUFBLEVBQUEsT0FHQSxJQUZBLElBQUFqSCxFQUFBaUgsRUFBQWhaLE9BRUFELEVBQUEsRUFBcUJBLEdBQUFvaEcsRUFBQXB2RixJQUFBLEdBQWlDaFMsSUFBQSxDQUN0RCxJQUFBa2xKLEVBQUFGLEVBQUEsRUFBQWhsSixHQUNBbWxKLEVBQUFILEVBQUEsRUFBQWhsSixFQUFBLEdBQ0FlLEVBQUFrWSxHQUFBalosRUFBQSxHQUFBZ1MsR0FDQSt2RixFQUFBRixjQUFBcWpELEVBQUEsR0FBQUEsRUFBQSxHQUFBQyxFQUFBLEdBQUFBLEVBQUEsR0FBQXBrSixFQUFBLEdBQUFBLEVBQUEsU0FFSyxDQUNMLFdBQUFrVCxJQUNBZ0YsRUFBQTZySSxFQUFBN3JJLEVBQUFtb0YsSUFHQVcsRUFBQXI0RCxPQUFBendCLEVBQUEsTUFBQUEsRUFBQSxPQUVBalosRUFBQSxVQUFBeUcsRUFBQXdTLEVBQUFoWixPQUF3Q0QsRUFBQXlHLEVBQU96RyxJQUMvQytoRyxFQUFBWixPQUFBbG9GLEVBQUFqWixHQUFBLEdBQUFpWixFQUFBalosR0FBQSxJQUlBb2hHLEdBQUFXLEVBQUFYLHNGQ2dEQTU2RixFQUFBMDZGLFVBaEZBLFNBQUFhLEVBQUFwcUYsR0FDQSxJQUtBeXRJLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBa0NBQyxFQTFDQXJzSSxFQUFBeEIsRUFBQXdCLEVBQ0FDLEVBQUF6QixFQUFBeUIsRUFDQWpGLEVBQUF3RCxFQUFBeEQsTUFDQStJLEVBQUF2RixFQUFBdUYsT0FDQXhWLEVBQUFpUSxFQUFBalEsRUFNQXlNLEVBQUEsSUFDQWdGLEdBQUFoRixFQUNBQSxNQUdBK0ksRUFBQSxJQUNBOUQsR0FBQThELEVBQ0FBLE1BR0EsaUJBQUF4VixFQUNBMDlJLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUE3OUksRUFDR0EsYUFBQTYzQyxNQUNILElBQUE3M0MsRUFBQXpILE9BQ0FtbEosRUFBQUMsRUFBQUMsRUFBQUMsRUFBQTc5SSxFQUFBLEdBQ0ssSUFBQUEsRUFBQXpILFFBQ0xtbEosRUFBQUUsRUFBQTU5SSxFQUFBLEdBQ0EyOUksRUFBQUUsRUFBQTc5SSxFQUFBLElBQ0ssSUFBQUEsRUFBQXpILFFBQ0xtbEosRUFBQTE5SSxFQUFBLEdBQ0EyOUksRUFBQUUsRUFBQTc5SSxFQUFBLEdBQ0E0OUksRUFBQTU5SSxFQUFBLEtBRUEwOUksRUFBQTE5SSxFQUFBLEdBQ0EyOUksRUFBQTM5SSxFQUFBLEdBQ0E0OUksRUFBQTU5SSxFQUFBLEdBQ0E2OUksRUFBQTc5SSxFQUFBLElBR0EwOUksRUFBQUMsRUFBQUMsRUFBQUMsRUFBQSxFQUtBSCxFQUFBQyxFQUFBbHhJLElBRUFpeEksR0FBQWp4SSxHQURBcXhJLEVBQUFKLEVBQUFDLEdBRUFBLEdBQUFseEksRUFBQXF4SSxHQUdBRixFQUFBQyxFQUFBcHhJLElBRUFteEksR0FBQW54SSxHQURBcXhJLEVBQUFGLEVBQUFDLEdBRUFBLEdBQUFweEksRUFBQXF4SSxHQUdBSCxFQUFBQyxFQUFBcG9JLElBRUFtb0ksR0FBQW5vSSxHQURBc29JLEVBQUFILEVBQUFDLEdBRUFBLEdBQUFwb0ksRUFBQXNvSSxHQUdBSixFQUFBRyxFQUFBcm9JLElBRUFrb0ksR0FBQWxvSSxHQURBc29JLEVBQUFKLEVBQUFHLEdBRUFBLEdBQUFyb0ksRUFBQXNvSSxHQUdBempELEVBQUFyNEQsT0FBQXZ3QixFQUFBaXNJLEVBQUFoc0ksR0FDQTJvRixFQUFBWixPQUFBaG9GLEVBQUFoRixFQUFBa3hJLEVBQUFqc0ksR0FDQSxJQUFBaXNJLEdBQUF0akQsRUFBQTEwQixJQUFBbDBELEVBQUFoRixFQUFBa3hJLEVBQUFqc0ksRUFBQWlzSSxLQUFBNXZJLEtBQUE0RyxHQUFBLEtBQ0EwbEYsRUFBQVosT0FBQWhvRixFQUFBaEYsRUFBQWlGLEVBQUE4RCxFQUFBb29JLEdBQ0EsSUFBQUEsR0FBQXZqRCxFQUFBMTBCLElBQUFsMEQsRUFBQWhGLEVBQUFteEksRUFBQWxzSSxFQUFBOEQsRUFBQW9vSSxJQUFBLEVBQUE3dkksS0FBQTRHLEdBQUEsR0FDQTBsRixFQUFBWixPQUFBaG9GLEVBQUFvc0ksRUFBQW5zSSxFQUFBOEQsR0FDQSxJQUFBcW9JLEdBQUF4akQsRUFBQTEwQixJQUFBbDBELEVBQUFvc0ksRUFBQW5zSSxFQUFBOEQsRUFBQXFvSSxJQUFBOXZJLEtBQUE0RyxHQUFBLEVBQUE1RyxLQUFBNEcsSUFDQTBsRixFQUFBWixPQUFBaG9GLEVBQUFDLEVBQUFnc0ksR0FDQSxJQUFBQSxHQUFBcmpELEVBQUExMEIsSUFBQWwwRCxFQUFBaXNJLEVBQUFoc0ksRUFBQWdzSSxJQUFBM3ZJLEtBQUE0RyxHQUFBLElBQUE1RyxLQUFBNEcsa0ZDN0VBLElBQUEwMkgsRUFBQTkwSSxFQUFBLDZDQUVBd25KLEVBQUExUyxFQUFBaHpILElBQ0EybEksRUFBQTNTLEVBQUFuM0gsSUFDQStwSSxFQUFBNVMsRUFBQWh2SCxNQUNBNmhJLEVBQUE3UyxFQUFBakgsU0FDQStaLEVBQUE5UyxFQUFBLzdILElBQ0E4dUksRUFBQS9TLEVBQUExcEgsTUFDQTA4SCxFQUFBaFQsRUFBQWx6RSxJQStGQS84RCxFQUFBMEQsUUExRUEsU0FBQXlTLEVBQUFoRixFQUFBK3hJLEVBQUFDLEdBQ0EsSUFJQUMsRUFDQUMsRUFDQXBtSSxFQUFBbkUsRUFOQXdxSSxLQUNBbDBGLEtBQ0FndkIsS0FDQWk4RCxLQUtBLEdBQUE4SSxFQUFBLENBQ0FsbUksR0FBQXcwQixTQUNBMzRCLElBQUEsVUFFQSxRQUFBNWIsRUFBQSxFQUFBZ1MsRUFBQWlILEVBQUFoWixPQUF3Q0QsRUFBQWdTLEVBQVNoUyxJQUNqRHlsSixFQUFBMWxJLElBQUE5RyxFQUFBalosSUFDQTBsSixFQUFBOXBJLElBQUEzQyxFQUFBalosSUFJQXlsSixFQUFBMWxJLElBQUFrbUksRUFBQSxJQUNBUCxFQUFBOXBJLElBQUFxcUksRUFBQSxJQUdBLElBQUFqbUosRUFBQSxFQUFBZ1MsRUFBQWlILEVBQUFoWixPQUFzQ0QsRUFBQWdTLEVBQVNoUyxJQUFBLENBQy9DLElBQUF1YyxFQUFBdEQsRUFBQWpaLEdBRUEsR0FBQWdtSixFQUNBRSxFQUFBanRJLEVBQUFqWixJQUFBLEVBQUFnUyxFQUFBLEdBQ0FtMEksRUFBQWx0SSxHQUFBalosRUFBQSxHQUFBZ1MsT0FDSyxDQUNMLE9BQUFoUyxPQUFBZ1MsRUFBQSxHQUNBbzBJLEVBQUE1bkosS0FBQXNuSixFQUFBN3NJLEVBQUFqWixLQUNBLFNBRUFrbUosRUFBQWp0SSxFQUFBalosRUFBQSxHQUNBbW1KLEVBQUFsdEksRUFBQWpaLEVBQUEsR0FJQStsSixFQUFBN3pGLEVBQUFpMEYsRUFBQUQsR0FFQVAsRUFBQXp6RixJQUFBaitDLEdBQ0EsSUFBQW95SSxFQUFBVCxFQUFBcnBJLEVBQUEycEksR0FDQXZSLEVBQUFpUixFQUFBcnBJLEVBQUE0cEksR0FDQWptSSxFQUFBbW1JLEVBQUExUixFQUVBLElBQUF6MEgsSUFDQW1tSSxHQUFBbm1JLEVBQ0F5MEgsR0FBQXowSCxHQUdBeWxJLEVBQUF6a0UsRUFBQWh2QixHQUFBbTBGLEdBQ0FWLEVBQUF4SSxFQUFBanJGLEVBQUF5aUYsR0FDQSxJQUFBMlIsRUFBQVQsS0FBQXRwSSxFQUFBMmtFLEdBQ0Fna0UsRUFBQVcsS0FBQXRwSSxFQUFBNGdJLEdBRUE4SSxJQUNBUCxFQUFBWSxJQUFBdm1JLEdBQ0EwbEksRUFBQWEsSUFBQTFxSSxHQUNBOHBJLEVBQUFSLElBQUFubEksR0FDQTBsSSxFQUFBUCxJQUFBdHBJLElBR0F3cUksRUFBQTVuSixLQUFBOG5KLEdBQ0FGLEVBQUE1bkosS0FBQTBtSixHQU9BLE9BSkFjLEdBQ0FJLEVBQUE1bkosS0FBQTRuSixFQUFBbDBHLFNBR0FrMEcsZ0ZDcEdBLElBRUFSLEVBRkEzbkosRUFBQSw2Q0FFQTZ0SSxTQWFBLFNBQUF5YSxFQUFBMW5CLEVBQUFwZ0csRUFBQUMsRUFBQThnRyxFQUFBNS9ILEVBQUE2L0gsRUFBQUMsR0FDQSxJQUFBeitDLEVBQUEsSUFBQXZpRCxFQUFBbWdHLEdBQ0EzOUMsRUFBQSxJQUFBcytDLEVBQUEvZ0csR0FDQSxVQUFBQSxFQUFBQyxHQUFBdWlELEVBQUFDLEdBQUF3K0MsSUFBQSxHQUFBamhHLEVBQUFDLEdBQUEsRUFBQXVpRCxFQUFBQyxHQUFBdStDLEVBQUF4K0MsRUFBQXJoRixFQUFBNitCLEVBaURBMzdCLEVBQUEwRCxRQXZDQSxTQUFBeVMsRUFBQStzSSxHQUtBLElBSkEsSUFBQWgwSSxFQUFBaUgsRUFBQWhaLE9BQ0FpeEUsS0FDQTQ2RCxFQUFBLEVBRUE5ckksRUFBQSxFQUFpQkEsRUFBQWdTLEVBQVNoUyxJQUMxQjhySSxHQUFBOFosRUFBQTNzSSxFQUFBalosRUFBQSxHQUFBaVosRUFBQWpaLElBR0EsSUFBQXdtSixFQUFBMWEsRUFBQSxFQUdBLElBRkEwYSxJQUFBeDBJLElBQUF3MEksRUFFQXhtSixFQUFBLEVBQWlCQSxFQUFBd21KLEVBQVV4bUosSUFBQSxDQUMzQixJQUdBNitILEVBRUFuZ0csRUFDQThnRyxFQU5BNzdHLEVBQUEzakIsR0FBQXdtSixFQUFBLElBQUFSLEVBQUFoMEksSUFBQSxHQUNBOU0sRUFBQXVRLEtBQUE2akMsTUFBQTMxQixHQUNBNDlFLEVBQUE1OUUsRUFBQXplLEVBRUF1NUIsRUFBQXhsQixFQUFBL1QsRUFBQThNLEdBSUFnMEksR0FLQW5uQixFQUFBNWxILEdBQUEvVCxFQUFBLEVBQUE4TSxNQUNBMHNCLEVBQUF6bEIsR0FBQS9ULEVBQUEsR0FBQThNLEdBQ0F3dEgsRUFBQXZtSCxHQUFBL1QsRUFBQSxHQUFBOE0sS0FOQTZzSCxFQUFBNWxILEVBQUEsSUFBQS9ULE1BQUEsR0FDQXc1QixFQUFBemxCLEVBQUEvVCxFQUFBOE0sRUFBQSxFQUFBQSxFQUFBLEVBQUE5TSxFQUFBLEdBQ0FzNkgsRUFBQXZtSCxFQUFBL1QsRUFBQThNLEVBQUEsRUFBQUEsRUFBQSxFQUFBOU0sRUFBQSxJQU9BLElBQUF1aEosRUFBQWxsRCxJQUNBbWxELEVBQUFubEQsRUFBQWtsRCxFQUNBdjFFLEVBQUExeUUsTUFBQStuSixFQUFBMW5CLEVBQUEsR0FBQXBnRyxFQUFBLEdBQUFDLEVBQUEsR0FBQThnRyxFQUFBLEdBQUFqK0IsRUFBQWtsRCxFQUFBQyxHQUFBSCxFQUFBMW5CLEVBQUEsR0FBQXBnRyxFQUFBLEdBQUFDLEVBQUEsR0FBQThnRyxFQUFBLEdBQUFqK0IsRUFBQWtsRCxFQUFBQyxLQUdBLE9BQUF4MUUsd0VDaEVBLElBQUFoaUUsRUFBQWpSLEVBQUEsMkNBRUFvM0YsRUFBQW5tRixFQUFBbW1GLFVBQ0FpekMsRUFBQXA1SCxFQUFBbzVILFVBQ0FoK0gsRUFBQTRFLEVBQUE1RSxLQUNBb3pCLEVBQUF4dUIsRUFBQXd1QixrQkFDQVMsRUFBQWp2QixFQUFBaXZCLFNBQ0FsUSxFQUFBL2UsRUFBQStlLFNBRUF2UixFQUFBemUsRUFBQSw4Q0FFQTBvSixFQUFBMW9KLEVBQUEsMERBRUFvcUksRUFBQXBxSSxFQUFBLHNEQUVBOGtKLEVBQUE5a0osRUFBQSwwREFHQTJvSixHQUNBN2tILEtBQUEsRUFDQXdZLE1BQUEsRUFDQW5uQyxPQUFBLEdBRUF5ekksR0FDQTdrSCxJQUFBLEVBQ0F3WSxPQUFBLEVBQ0FndkIsT0FBQSxHQWFBLFNBQUFzOUUsRUFBQXp0SSxHQUNBLEdBQUFBLEVBQUEsQ0FDQUEsRUFBQXlGLEtBQUFwQyxFQUFBc3ZILFNBQUEzeUgsR0FDQSxJQUFBYyxFQUFBZCxFQUFBYyxVQUNBLFdBQUFBLE1BQUEsVUFDQWQsRUFBQWMsVUFBQSxNQUFBQSxHQUFBeXNJLEVBQUF6c0ksS0FBQSxPQUVBLElBQUFDLEVBQUFmLEVBQUFlLG1CQUFBZixFQUFBMnNCLGFBQ0EsV0FBQTVyQixNQUFBLFVBQ0FmLEVBQUFlLGtCQUFBLE1BQUFBLEdBQUF5c0ksRUFBQXpzSSxLQUFBLE1BQ0FmLEVBQUFtOUUsY0FHQW45RSxFQUFBbTlFLFlBQUE5NEQsRUFBQXJrQixFQUFBbTlFLGVBbUtBLFNBQUF1d0QsRUFBQWhsRCxFQUFBMW9GLEVBQUFxZ0IsRUFBQXZnQixFQUFBQyxHQUVBLEdBQUFzZ0IsR0FBQXJnQixFQUFBMlAsYUFBQSxDQUNBLElBQUF6UCxFQUFBRixFQUFBZ3FJLFdBRUEsV0FBQTlwSSxHQUNBSixFQUFBdWdCLEVBQUF2bEIsTUFBQSxFQUFBdWxCLEVBQUF2Z0IsRUFDQUMsRUFBQXNnQixFQUFBeGMsT0FBQSxFQUFBd2MsRUFBQXRnQixHQUNLRyxJQUNMSixFQUFBSSxFQUFBLEdBQUFtZ0IsRUFBQXZnQixFQUNBQyxFQUFBRyxFQUFBLEdBQUFtZ0IsRUFBQXRnQixHQUdBMm9GLEVBQUExakUsVUFBQWxsQixFQUFBQyxHQUVBMm9GLEVBQUFqdUYsUUFBQXVGLEVBQUEyUCxjQUNBKzRFLEVBQUExakUsV0FBQWxsQixHQUFBQyxJQUlBLFNBQUE0dEksRUFBQXJDLEVBQUE1aUQsRUFBQThvQyxFQUFBeHhILEVBQUF1bEcsRUFBQXFvQyxFQUFBOXRJLEVBQUFnQixHQUNBLElBQUF5d0gsRUFBQXZ4SCxFQUFBcThFLEtBQUFtMUMsRUFBQTdzRCxlQUdBNWpFLEVBQUF5d0gsRUFBQXp3SCxrQkFDQWhCLEVBQUE2dEksRUFBQXJvQyxFQUFBLEVBRUEsUUFBQXhrRyxFQUNBaEIsRUFBQTZ0SSxFQUFBcGMsRUFBQTN0SCxPQUFBLEVBQ0csV0FBQTlDLElBQ0hoQixFQUFBNnRJLEVBQUFyb0MsRUFBQWlzQixFQUFBM3RILE9BQUEsSUFHQTJ0SCxFQUFBWSxjQUFBeWIsRUFBQXRjLElBQUF1YyxFQUFBeEMsRUFBQTVpRCxFQUFBNm9DLEVBQUEsVUFBQXp3SCxFQUFBaEIsRUFBQTB4SCxFQUFBMTJILE1BQUEsV0FBQWdHLEVBQUFoQixFQUFBMHhILEVBQUExMkgsTUFBQSxFQUFBZ0YsRUFBQUMsRUFBQXl4SCxFQUFBM3RILE9BQUEsRUFBQTJ0SCxFQUFBMTJILE1BQUEwMkgsRUFBQTN0SCxRQUNBLElBQUFzNUUsRUFBQXEwQyxFQUFBcjBDLFlBRUFBLElBQ0FyOUUsRUFBQWl1SSxFQUFBanVJLEVBQUFnQixFQUFBcThFLEdBQ0FwOUUsR0FBQXl4SCxFQUFBM3RILE9BQUEsRUFBQXM1RSxFQUFBLEdBQUFxMEMsRUFBQXgwQyxXQUFBLEdBR0FneEQsRUFBQXRsRCxFQUFBLGFBQUF1bUMsRUFBQXNDLEVBQUE3ekMsZUFBQTE5RSxFQUFBMDlFLGVBQUEsSUFDQXN3RCxFQUFBdGxELEVBQUEsY0FBQTZvQyxFQUFBOXpDLGlCQUFBejlFLEVBQUF5OUUsaUJBQUEsZUFDQXV3RCxFQUFBdGxELEVBQUEsZ0JBQUF1bUMsRUFBQXNDLEVBQUE1ekMsa0JBQUEzOUUsRUFBQTI5RSxrQkFBQSxJQUNBcXdELEVBQUF0bEQsRUFBQSxnQkFBQXVtQyxFQUFBc0MsRUFBQTN6QyxrQkFBQTU5RSxFQUFBNDlFLGtCQUFBLElBQ0Fvd0QsRUFBQXRsRCxFQUFBLFlBQUE1bkYsR0FHQWt0SSxFQUFBdGxELEVBQUEseUJBQ0FzbEQsRUFBQXRsRCxFQUFBLE9BQUE4b0MsRUFBQS9ySCxNQUFBcEMsRUFBQWlzSCxjQUNBLElBQUEvMEMsRUFBQW13RCxFQUFBblosRUFBQWgzQyxZQUFBdjZFLEVBQUF1NkUsV0FBQUMsR0FDQWh0RSxFQUFBeWdJLEVBQUExYyxFQUFBL2pILFVBQUF4TixFQUFBd04sVUFDQWd0RSxFQUFBd0IsRUFBQXUxQyxFQUFBLzJDLGdCQUFBeDZFLEVBQUF3NkUsaUJBRUFELElBQ0F5ekQsRUFBQXRsRCxFQUFBLFlBQUFsTyxHQUNBd3pELEVBQUF0bEQsRUFBQSxjQUFBbk8sR0FDQW1PLEVBQUF3bEQsV0FBQTFjLEVBQUFwMEgsS0FBQTBDLEVBQUFDLElBR0F5TixJQUNBd2dJLEVBQUF0bEQsRUFBQSxZQUFBbDdFLEdBQ0FrN0UsRUFBQXlsRCxTQUFBM2MsRUFBQXAwSCxLQUFBMEMsRUFBQUMsSUFJQSxTQUFBOHRJLEVBQUE3dEksR0FDQSxPQUFBQSxFQUFBazlFLHFCQUFBbDlFLEVBQUE0OEUsaUJBQUE1OEUsRUFBQTI4RSxnQkFLQSxTQUFBbXhELEVBQUF4QyxFQUFBNWlELEVBQUExb0YsRUFBQUYsRUFBQUMsRUFBQWpGLEVBQUErSSxHQUNBLElBQUFxNUUsRUFBQWw5RSxFQUFBazlFLG9CQUNBTixFQUFBNThFLEVBQUE0OEUsZ0JBQ0FELEVBQUEzOEUsRUFBQTI4RSxnQkFDQXl4RCxFQUFBdHBILEVBQUFvNEQsR0FNQSxHQUxBOHdELEVBQUF0bEQsRUFBQSxhQUFBMW9GLEVBQUFzOUUsbUJBQUEsR0FDQTB3RCxFQUFBdGxELEVBQUEsY0FBQTFvRixFQUFBcTlFLG9CQUFBLGVBQ0Eyd0QsRUFBQXRsRCxFQUFBLGdCQUFBMW9GLEVBQUF1OUUsc0JBQUEsR0FDQXl3RCxFQUFBdGxELEVBQUEsZ0JBQUExb0YsRUFBQXc5RSxzQkFBQSxHQUVBNHdELEdBQUF4eEQsR0FBQUQsRUFBQSxDQUNBK0wsRUFBQXczQixZQUNBLElBQUE5aUMsRUFBQXA5RSxFQUFBbzlFLGlCQUVBQSxFQUdBa3dELEVBQUF6bEQsVUFBQWEsR0FDQTVvRixJQUNBQyxJQUNBakYsUUFDQStJLFNBQ0F4VixFQUFBK3VGLElBUEFzTCxFQUFBcm9FLEtBQUF2Z0IsRUFBQUMsRUFBQWpGLEVBQUErSSxHQVdBNmtGLEVBQUFYLFlBR0EsR0FBQXFtRCxFQUNBSixFQUFBdGxELEVBQUEsWUFBQXhMLEdBQ0F3TCxFQUFBM3BGLFlBQ0csR0FBQTZWLEVBQUFzb0UsR0FBQSxDQUNILElBQUE1NUIsRUFBQTQ1QixFQUFBNTVCLE9BQ0FBLEVBQUEwckUsRUFBQW1ZLG9CQUFBN2pGLEVBQUEsS0FBQWdvRixFQUFBK0MsRUFBQW54RCxLQUVBOHhDLEVBQUErQyxhQUFBenVFLElBQ0FvbEMsRUFBQTJ5QixVQUFBLzNELEVBQUF4akQsRUFBQUMsRUFBQWpGLEVBQUErSSxHQUlBKzRFLEdBQUFELElBQ0FxeEQsRUFBQXRsRCxFQUFBLFlBQUE5TCxHQUNBb3hELEVBQUF0bEQsRUFBQSxjQUFBL0wsR0FDQStMLEVBQUF2bkYsVUFJQSxTQUFBa3RJLEVBQUEvcUYsRUFBQTQ1QixHQUdBQSxFQUFBNTVCLFFBR0EsU0FBQWdyRixFQUFBQyxFQUFBdnVJLEVBQUFxZ0IsR0FDQSxJQUFBbXVILEVBQUF4dUksRUFBQUYsR0FBQSxFQUNBMnVJLEVBQUF6dUksRUFBQUQsR0FBQSxFQUNBZSxFQUFBZCxFQUFBYyxVQUNBQyxFQUFBZixFQUFBZSxrQkFFQSxHQUFBc2YsRUFBQSxDQUNBLElBQUFqUyxFQUFBcE8sRUFBQW9PLGFBRUEsR0FBQUEsYUFBQTgzQixNQUVBc29HLEVBQUFudUgsRUFBQXZnQixFQUFBc0csRUFBQWdJLEVBQUEsR0FBQWlTLEVBQUF2bEIsT0FDQTJ6SSxFQUFBcHVILEVBQUF0Z0IsRUFBQXFHLEVBQUFnSSxFQUFBLEdBQUFpUyxFQUFBeGMsWUFDSyxDQUNMLElBQUEwdEMsRUFBQWx1QyxFQUFBbXZILHlCQUFBcGtILEVBQUFpUyxFQUFBcmdCLEVBQUFtMEQsY0FDQXE2RSxFQUFBajlGLEVBQUF6eEMsRUFDQTJ1SSxFQUFBbDlGLEVBQUF4eEMsRUFFQWUsS0FBQXl3QyxFQUFBendDLFVBQ0FDLEtBQUF3d0MsRUFBQXh3QyxrQkFLQSxJQUFBZzdFLEVBQUEvN0UsRUFBQSs3RSxXQUVBQSxJQUNBeXlELEdBQUF6eUQsRUFBQSxHQUNBMHlELEdBQUExeUQsRUFBQSxJQUlBLE9BQ0F5eUQsUUFDQUMsUUFDQTN0SSxZQUNBQyxxQkFJQSxTQUFBaXRJLEVBQUF0bEQsRUFBQTNwRCxFQUFBbDVDLEdBRUEsT0FEQTZpRyxFQUFBM3BELEdBQUEycUcsRUFBQWhoRCxFQUFBM3BELEVBQUFsNUMsR0FDQTZpRyxFQUFBM3BELEdBU0EsU0FBQTJyRyxFQUFBdnBJLEVBQUFxakIsR0FDQSxhQUFBcmpCLEdBQUFxakIsR0FBQSxtQkFBQXJqQixHQUFBLFNBQUFBLEVBQUEsS0FDQUEsRUFBQW1pRCxPQUFBbmlELEVBQUE2OUQsV0FBQSxPQUFBNzlELEVBR0EsU0FBQThzSSxFQUFBbHZJLEdBQ0EsYUFBQUEsR0FBQSxTQUFBQSxFQUFBLEtBQ0FBLEVBQUF1a0QsT0FBQXZrRCxFQUFBaWdFLFdBQUEsT0FBQWpnRSxFQUdBLFNBQUFxSCxFQUFBdmdCLEVBQUE2b0osR0FDQSx1QkFBQTdvSixFQUNBQSxFQUFBOG9KLFlBQUEsUUFDQXBtRSxXQUFBMWlGLEdBQUEsSUFBQTZvSixFQUdBbm1FLFdBQUExaUYsR0FHQUEsRUFHQSxTQUFBa29KLEVBQUFqdUksRUFBQWdCLEVBQUFxOEUsR0FDQSxnQkFBQXI4RSxFQUFBaEIsRUFBQXE5RSxFQUFBLGNBQUFyOEUsRUFBQWhCLEVBQUFxOUUsRUFBQSxLQUFBQSxFQUFBLEtBQUFyOUUsRUFBQXE5RSxFQUFBLEdBYUFod0YsRUFBQW85SSxtQkEzWUEsU0FBQXZxSSxHQUdBLE9BRkF5dEksRUFBQXp0SSxHQUNBL08sRUFBQStPLEVBQUFxOEUsS0FBQW94RCxHQUNBenRJLEdBeVlBN1MsRUFBQXM5SSxXQTVXQSxTQUFBYSxFQUFBNWlELEVBQUF0ckYsRUFBQTRDLEVBQUFxZ0IsR0FDQXJnQixFQUFBcThFLEtBeUVBLFNBQUFpdkQsRUFBQTVpRCxFQUFBdHJGLEVBQUE0QyxFQUFBcWdCLEdBQ0EsSUFBQXd3RyxFQUFBeWEsRUFBQXNELGtCQUVBL2QsSUFBQXlhLEVBQUEvd0IsVUFDQXNXLEVBQUF5YSxFQUFBc0Qsa0JBQUF2ckksRUFBQXV0SCxjQUFBeHpILEVBQUE0QyxJQU1BLFNBQUFzckksRUFBQTVpRCxFQUFBbW9DLEVBQUE3d0gsRUFBQXFnQixHQUNBLElBQUEydkcsRUFBQWEsRUFBQS8xSCxNQUNBNjFILEVBQUFFLEVBQUFGLFdBQ0FILEVBQUFLLEVBQUFMLFlBQ0FyekMsRUFBQW45RSxFQUFBbTlFLFlBQ0EweEQsRUFBQVAsRUFBQTlkLEVBQUF4d0gsRUFBQXFnQixHQUNBbXVILEVBQUFLLEVBQUFMLE1BQ0FDLEVBQUFJLEVBQUFKLE1BQ0EzdEksRUFBQSt0SSxFQUFBL3RJLFVBQ0FDLEVBQUE4dEksRUFBQTl0SSxrQkFFQTJzSSxFQUFBaGxELEVBQUExb0YsRUFBQXFnQixFQUFBbXVILEVBQUFDLEdBQ0EsSUFBQUssRUFBQXpySSxFQUFBb3NILFlBQUErZSxFQUFBN2QsRUFBQTd2SCxHQUNBaXVJLEVBQUExckksRUFBQXFzSCxZQUFBK2UsRUFBQWplLEVBQUF6dkgsR0FDQWl1SSxFQUFBRixFQUNBbEIsRUFBQW1CLEVBRUE1eEQsSUFDQTZ4RCxHQUFBN3hELEVBQUEsR0FDQXl3RCxHQUFBendELEVBQUEsSUFHQSxJQUFBOHhELEVBQUFELEVBQUFoZixFQUNBNmQsRUFBQTd0SSxJQUFBOHRJLEVBQUF4QyxFQUFBNWlELEVBQUExb0YsRUFBQTh1SSxFQUFBQyxFQUFBcGUsRUFBQUgsR0FFQSxRQUFBN3BJLEVBQUEsRUFBaUJBLEVBQUFrcUksRUFBQTNoRSxNQUFBdG9FLE9BQStCRCxJQUFBLENBWWhELElBWEEsSUFTQTZxSSxFQVRBNTJHLEVBQUFpMkcsRUFBQTNoRSxNQUFBdm9FLEdBQ0EycUksRUFBQTEyRyxFQUFBMDJHLE9BQ0E0ZCxFQUFBNWQsRUFBQTFxSSxPQUNBMitHLEVBQUEzcUYsRUFBQTJxRixXQUNBNHBDLEVBQUF2MEgsRUFBQTlmLE1BQ0FzMEksRUFBQSxFQUNBQyxFQUFBTCxFQUNBTSxFQUFBTCxFQUNBTSxFQUFBTCxFQUFBLEVBR0FFLEVBQUFGLE1BQUExZCxFQUFBRixFQUFBOGQsSUFBQXR1SSxXQUFBLFNBQUEwd0gsRUFBQTF3SCxZQUNBNnNJLEVBQUFyQyxFQUFBNWlELEVBQUE4b0MsRUFBQXh4SCxFQUFBdWxHLEVBQUFxb0MsRUFBQXlCLEVBQUEsUUFDQUYsR0FBQTNkLEVBQUExMkgsTUFDQXUwSSxHQUFBN2QsRUFBQTEySCxNQUNBczBJLElBR0EsS0FBQUcsR0FBQSxjQUFBL2QsRUFBQUYsRUFBQWllLElBQUF6dUksV0FDQTZzSSxFQUFBckMsRUFBQTVpRCxFQUFBOG9DLEVBQUF4eEgsRUFBQXVsRyxFQUFBcW9DLEVBQUEwQixFQUFBLFNBQ0FILEdBQUEzZCxFQUFBMTJILE1BQ0F3MEksR0FBQTlkLEVBQUExMkgsTUFDQXkwSSxJQU1BLElBRkFGLElBQUFyZixHQUFBcWYsRUFBQUwsSUFBQUMsRUFBQUssR0FBQUgsR0FBQSxFQUVBQyxHQUFBRyxHQUNBL2QsRUFBQUYsRUFBQThkLEdBRUF6QixFQUFBckMsRUFBQTVpRCxFQUFBOG9DLEVBQUF4eEgsRUFBQXVsRyxFQUFBcW9DLEVBQUF5QixFQUFBN2QsRUFBQTEySCxNQUFBLFlBQ0F1MEksR0FBQTdkLEVBQUExMkgsTUFDQXMwSSxJQUdBeEIsR0FBQXJvQyxHQWpFQWlxQyxDQUFBbEUsRUFBQTVpRCxFQUFBbW9DLEVBQUE3d0gsRUFBQXFnQixHQWhGQW92SCxDQUFBbkUsRUFBQTVpRCxFQUFBdHJGLEVBQUE0QyxFQUFBcWdCLEdBR0EsU0FBQWlySCxFQUFBNWlELEVBQUF0ckYsRUFBQTRDLEVBQUFxZ0IsR0FDQSxJQUFBNWEsRUFBQXVvSSxFQUFBdGxELEVBQUEsT0FBQTFvRixFQUFBeUYsTUFBQXBDLEVBQUFpc0gsY0FDQW55QyxFQUFBbjlFLEVBQUFtOUUsWUFDQTB6QyxFQUFBeWEsRUFBQXNELGtCQUVBL2QsSUFBQXlhLEVBQUEvd0IsVUFDQXNXLEVBQUF5YSxFQUFBc0Qsa0JBQUF2ckksRUFBQWl0SCxlQUFBbHpILEVBQUFxSSxFQUFBMDNFLEVBQUFuOUUsRUFBQXV3SCxXQUdBLElBQUFDLEVBQUFLLEVBQUFMLFlBQ0FqQixFQUFBc0IsRUFBQTNoRSxNQUNBcTJDLEVBQUFzckIsRUFBQXRyQixXQUNBc3BDLEVBQUFQLEVBQUE5ZCxFQUFBeHdILEVBQUFxZ0IsR0FDQW11SCxFQUFBSyxFQUFBTCxNQUNBQyxFQUFBSSxFQUFBSixNQUNBM3RJLEVBQUErdEksRUFBQS90SSxVQUNBQyxFQUFBOHRJLEVBQUE5dEksa0JBRUEyc0ksRUFBQWhsRCxFQUFBMW9GLEVBQUFxZ0IsRUFBQW11SCxFQUFBQyxHQUNBLElBQUFNLEVBQUExckksRUFBQXFzSCxZQUFBK2UsRUFBQWplLEVBQUF6dkgsR0FDQStELEVBQUEwcEksRUFDQXpwSSxFQUFBZ3FJLEVBQ0FXLEVBQUE3QixFQUFBN3RJLEdBRUEsR0FBQTB2SSxHQUFBdnlELEVBQUEsQ0FFQSxJQUFBSixFQUFBMTVFLEVBQUFiLFNBQUFwRixFQUFBcUksR0FDQWtySCxFQUFBNXpDLEVBQ0FJLElBQUF3ekMsR0FBQXh6QyxFQUFBLEdBQUFBLEVBQUEsSUFDQSxJQUFBMnhELEVBQUF6ckksRUFBQW9zSCxZQUFBK2UsRUFBQTdkLEVBQUE3dkgsR0FDQTR1SSxHQUFBNUIsRUFBQXhDLEVBQUE1aUQsRUFBQTFvRixFQUFBOHVJLEVBQUFDLEVBQUFwZSxFQUFBSCxHQUVBcnpDLElBQ0FyNEUsRUFBQWlwSSxFQUFBUyxFQUFBMXRJLEVBQUFxOEUsR0FDQXA0RSxHQUFBbzRFLEVBQUEsSUFJQTZ3RCxFQUFBdGxELEVBQUEsWUFBQTVuRixHQUFBLFFBR0FrdEksRUFBQXRsRCxFQUFBLHlCQUVBc2xELEVBQUF0bEQsRUFBQSxhQUFBMW9GLEVBQUEwOUUsZ0JBQUEsR0FDQXN3RCxFQUFBdGxELEVBQUEsY0FBQTFvRixFQUFBeTlFLGlCQUFBLGVBQ0F1d0QsRUFBQXRsRCxFQUFBLGdCQUFBMW9GLEVBQUEyOUUsbUJBQUEsR0FDQXF3RCxFQUFBdGxELEVBQUEsZ0JBQUExb0YsRUFBQTQ5RSxtQkFBQSxHQUVBNzRFLEdBQUF3Z0csRUFBQSxFQUNBLElBQUEvcUIsRUFBQXg2RSxFQUFBdzZFLGdCQUNBRCxFQUFBbXdELEVBQUExcUksRUFBQXU2RSxXQUFBQyxHQUNBaHRFLEVBQUF5Z0ksRUFBQWp1SSxFQUFBd04sVUFFQStzRSxJQUNBeXpELEVBQUF0bEQsRUFBQSxZQUFBbE8sR0FDQXd6RCxFQUFBdGxELEVBQUEsY0FBQW5PLElBR0Evc0UsR0FDQXdnSSxFQUFBdGxELEVBQUEsWUFBQWw3RSxHQUdBLFFBQUE3bUIsRUFBQSxFQUFpQkEsRUFBQTRvSSxFQUFBM29JLE9BQXNCRCxJQUV2QzR6RixHQUFBbU8sRUFBQXdsRCxXQUFBM2UsRUFBQTVvSSxHQUFBbWUsRUFBQUMsR0FDQXlJLEdBQUFrN0UsRUFBQXlsRCxTQUFBNWUsRUFBQTVvSSxHQUFBbWUsRUFBQUMsR0FDQUEsR0FBQXdnRyxFQXJFQW9xQyxDQUFBckUsRUFBQTVpRCxFQUFBdHJGLEVBQUE0QyxFQUFBcWdCLElBNFdBbHpCLEVBQUF1OUksWUFDQXY5SSxFQUFBOGdKLFVBQ0E5Z0osRUFBQXE5SSxhQVJBLFNBQUFwdEksRUFBQTRDLEdBQ0EsYUFBQTVDLE9BQUE0QyxFQUFBazlFLHFCQUFBbDlFLEVBQUE0OEUsaUJBQUE1OEUsRUFBQTI4RSxpQkFBQTM4RSxFQUFBbTlFLHNGQ3phQSxJQUFBbXRELEVBQUExbEosRUFBQSxxREFRQW0zSCxFQUFBLElBTkFuM0gsRUFBQSxvREFRQThoSixFQUFBLGFBRUFBLEVBQUFoakosV0FDQW1OLFlBQUE2MUksRUFPQVksYUFBQSxTQUFBNStDLEVBQUFyb0UsR0FDQSxJQUFBcmdCLEVBQUEzUSxLQUFBMlEsTUFDQXFnQixFQUFBcmdCLEVBQUE2RixVQUFBd2EsRUFFQWh4QixLQUFBa3JILFNBQUErdkIsRUFBQUMsbUJBQUF2cUksR0FBQSxHQUNBLElBQUE1QyxFQUFBNEMsRUFBQTVDLEtBSUEsR0FGQSxNQUFBQSxPQUFBLElBRUFrdEksRUFBQUUsYUFBQXB0SSxFQUFBNEMsR0FBQSxDQUtBMG9GLEVBQUFnekIsT0FFQSxJQUFBM3lHLEVBQUExWixLQUFBMFosVUFFQS9JLEVBQUErcEksY0FPQTE2SSxLQUFBNHdILGFBQUF2M0IsR0FOQTMvRSxJQUNBZ3pHLEVBQUFwNUUsS0FBQXRpQixHQUNBMDdGLEVBQUE5ekcsZUFBQWMsR0FDQXNYLEVBQUEwN0YsR0FPQXV1QixFQUFBRyxXQUFBcDdJLEtBQUFxNUYsRUFBQXRyRixFQUFBNEMsRUFBQXFnQixHQUNBcW9FLEVBQUFyNkIsYUFHQSxJQUFBOThELEVBQUFtMUksRUFDQWo5SSxFQUFBMEQsUUFBQW9FLHFFQ3REQSxJQU1BQSxFQU5BM00sRUFBQSw4Q0FNQWtSLFFBQ0F6TCxLQUFBLE1BQ0FpVSxPQUNBdUUsR0FBQSxFQUNBQyxHQUFBLEVBQ0F6VSxFQUFBLEVBQ0E2TCxXQUFBLEVBQ0FnQyxTQUFBLEVBQUFFLEtBQUE0RyxHQUNBL0ksV0FBQSxHQUVBK0YsT0FDQW1CLE9BQUEsT0FDQXBDLEtBQUEsTUFFQThvRixVQUFBLFNBQUFhLEVBQUFwcUYsR0FDQSxJQUFBd0IsRUFBQXhCLEVBQUF1RSxHQUNBOUMsRUFBQXpCLEVBQUF3RSxHQUNBelUsRUFBQStOLEtBQUFtRyxJQUFBakUsRUFBQWpRLEVBQUEsR0FDQTZMLEVBQUFvRSxFQUFBcEUsV0FDQWdDLEVBQUFvQyxFQUFBcEMsU0FDQWpDLEVBQUFxRSxFQUFBckUsVUFDQTIxSSxFQUFBeHpJLEtBQUFDLElBQUFuQyxHQUNBMjFJLEVBQUF6ekksS0FBQUcsSUFBQXJDLEdBQ0F3dUYsRUFBQXI0RCxPQUFBdS9HLEVBQUF2aEosRUFBQXlSLEVBQUErdkksRUFBQXhoSixFQUFBMFIsR0FDQTJvRixFQUFBMTBCLElBQUFsMEQsRUFBQUMsRUFBQTFSLEVBQUE2TCxFQUFBZ0MsR0FBQWpDLE1BSUF4USxFQUFBMEQsUUFBQW9FLDZFQ2xDQSxJQUFBNG1GLEVBQUF2ekYsRUFBQSw4Q0FFQTY4QyxFQUFBNzhDLEVBQUEsNkNBRUFrckosRUFBQWxySixFQUFBLDRDQUVBODJJLEVBQUFvVSxFQUFBcFUsbUJBQ0FYLEVBQUErVSxFQUFBL1UsZUFDQTdNLEVBQUE0aEIsRUFBQTVoQixZQUNBTixFQUFBa2lCLEVBQUFsaUIsUUFDQTROLEVBQUFzVSxFQUFBdFUsc0JBQ0FqQixFQUFBdVYsRUFBQXZWLGtCQU1BM2pGLEtBRUEsU0FBQW01RixFQUFBenhJLEVBQUEvWCxFQUFBeXBKLEdBQ0EsSUFBQUMsRUFBQTN4SSxFQUFBMnhJLEtBQ0FDLEVBQUE1eEksRUFBQTR4SSxLQUVBLGNBQUFELEdBQUEsT0FBQUMsSUFDQUYsRUFBQXpWLEVBQUEzTSxHQUFBdHZILEVBQUE4RyxHQUFBOUcsRUFBQTZ4SSxLQUFBN3hJLEVBQUEyeEksS0FBQTN4SSxFQUFBZ0gsR0FBQS9lLElBQUF5cEosRUFBQXpWLEVBQUEzTSxHQUFBdHZILEVBQUErRyxHQUFBL0csRUFBQTh4SSxLQUFBOXhJLEVBQUE0eEksS0FBQTV4SSxFQUFBaUgsR0FBQWhmLE1BRUF5cEosRUFBQXhVLEVBQUF0TixHQUFBNXZILEVBQUE4RyxHQUFBOUcsRUFBQTZ4SSxLQUFBN3hJLEVBQUFnSCxHQUFBL2UsSUFBQXlwSixFQUFBeFUsRUFBQXROLEdBQUE1dkgsRUFBQStHLEdBQUEvRyxFQUFBOHhJLEtBQUE5eEksRUFBQWlILEdBQUFoZixJQUlBLElBQUFnTCxFQUFBNG1GLEVBQUFyaUYsUUFDQXpMLEtBQUEsZUFDQWlVLE9BQ0E4RyxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0E0cUksS0FBQSxFQUNBQyxLQUFBLEVBSUFwM0ksUUFBQSxHQUVBZ0gsT0FDQW1CLE9BQUEsT0FDQXBDLEtBQUEsTUFFQThvRixVQUFBLFNBQUFhLEVBQUFwcUYsR0FDQSxJQUFBOEcsRUFBQTlHLEVBQUE4RyxHQUNBQyxFQUFBL0csRUFBQStHLEdBQ0FDLEVBQUFoSCxFQUFBZ0gsR0FDQUMsRUFBQWpILEVBQUFpSCxHQUNBNHFJLEVBQUE3eEksRUFBQTZ4SSxLQUNBQyxFQUFBOXhJLEVBQUE4eEksS0FDQUgsRUFBQTN4SSxFQUFBMnhJLEtBQ0FDLEVBQUE1eEksRUFBQTR4SSxLQUNBbDNJLEVBQUFzRixFQUFBdEYsUUFFQSxJQUFBQSxJQUlBMHZGLEVBQUFyNEQsT0FBQWpyQixFQUFBQyxHQUVBLE1BQUE0cUksR0FBQSxNQUFBQyxHQUNBbDNJLEVBQUEsSUFDQTBpSSxFQUFBdDJILEVBQUErcUksRUFBQTdxSSxFQUFBdE0sRUFBQTQ5QyxHQUNBdTVGLEVBQUF2NUYsRUFBQSxHQUNBdHhDLEVBQUFzeEMsRUFBQSxHQUNBOGtGLEVBQUFyMkgsRUFBQStxSSxFQUFBN3FJLEVBQUF2TSxFQUFBNDlDLEdBQ0F3NUYsRUFBQXg1RixFQUFBLEdBQ0FyeEMsRUFBQXF4QyxFQUFBLElBR0E4eEMsRUFBQTZ1QyxpQkFBQTRZLEVBQUFDLEVBQUE5cUksRUFBQUMsS0FFQXZNLEVBQUEsSUFDQStoSSxFQUFBMzFILEVBQUErcUksRUFBQUYsRUFBQTNxSSxFQUFBdE0sRUFBQTQ5QyxHQUNBdTVGLEVBQUF2NUYsRUFBQSxHQUNBcTVGLEVBQUFyNUYsRUFBQSxHQUNBdHhDLEVBQUFzeEMsRUFBQSxHQUNBbWtGLEVBQUExMUgsRUFBQStxSSxFQUFBRixFQUFBM3FJLEVBQUF2TSxFQUFBNDlDLEdBQ0F3NUYsRUFBQXg1RixFQUFBLEdBQ0FzNUYsRUFBQXQ1RixFQUFBLEdBQ0FyeEMsRUFBQXF4QyxFQUFBLElBR0E4eEMsRUFBQUYsY0FBQTJuRCxFQUFBQyxFQUFBSCxFQUFBQyxFQUFBNXFJLEVBQUFDLE1BU0E4cUksUUFBQSxTQUFBOXBKLEdBQ0EsT0FBQXdwSixFQUFBMWdKLEtBQUFpUCxNQUFBL1gsR0FBQSxJQVFBK3BKLFVBQUEsU0FBQS9wSixHQUNBLElBQUFtQixFQUFBcW9KLEVBQUExZ0osS0FBQWlQLE1BQUEvWCxHQUFBLEdBQ0EsT0FBQWs3QyxFQUFBcEosVUFBQTN3QyxRQUlBK0IsRUFBQTBELFFBQUFvRSx3RUNoSEEsSUFNQUEsRUFOQTNNLEVBQUEsOENBTUFrUixRQUNBekwsS0FBQSxTQUNBaVUsT0FDQXVFLEdBQUEsRUFDQUMsR0FBQSxFQUNBelUsRUFBQSxHQUVBdzVGLFVBQUEsU0FBQWEsRUFBQXBxRixFQUFBaXJGLEdBR0FBLEdBQ0FiLEVBQUFyNEQsT0FBQS94QixFQUFBdUUsR0FBQXZFLEVBQUFqUSxFQUFBaVEsRUFBQXdFLElBVUE0bEYsRUFBQTEwQixJQUFBMTFELEVBQUF1RSxHQUFBdkUsRUFBQXdFLEdBQUF4RSxFQUFBalEsRUFBQSxJQUFBK04sS0FBQTRHLElBQUEsTUFJQXZaLEVBQUEwRCxRQUFBb0Usc0VDL0JBLElBTUFBLEVBTkEzTSxFQUFBLDhDQU1Ba1IsUUFDQXpMLEtBQUEsT0FDQWlVLE9BRUE4RyxHQUFBLEVBQ0FDLEdBQUEsRUFFQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0F2TSxRQUFBLEdBRUFnSCxPQUNBbUIsT0FBQSxPQUNBcEMsS0FBQSxNQUVBOG9GLFVBQUEsU0FBQWEsRUFBQXBxRixHQUNBLElBQUE4RyxFQUFBOUcsRUFBQThHLEdBQ0FDLEVBQUEvRyxFQUFBK0csR0FDQUMsRUFBQWhILEVBQUFnSCxHQUNBQyxFQUFBakgsRUFBQWlILEdBQ0F2TSxFQUFBc0YsRUFBQXRGLFFBRUEsSUFBQUEsSUFJQTB2RixFQUFBcjRELE9BQUFqckIsRUFBQUMsR0FFQXJNLEVBQUEsSUFDQXNNLEVBQUFGLEdBQUEsRUFBQXBNLEdBQUFzTSxFQUFBdE0sRUFDQXVNLEVBQUFGLEdBQUEsRUFBQXJNLEdBQUF1TSxFQUFBdk0sR0FHQTB2RixFQUFBWixPQUFBeGlGLEVBQUFDLEtBUUE4cUksUUFBQSxTQUFBM29KLEdBQ0EsSUFBQTRXLEVBQUFqUCxLQUFBaVAsTUFDQSxPQUFBQSxFQUFBOEcsSUFBQSxFQUFBMWQsR0FBQTRXLEVBQUFnSCxHQUFBNWQsRUFBQTRXLEVBQUErRyxJQUFBLEVBQUEzZCxHQUFBNFcsRUFBQWlILEdBQUE3ZCxNQUlBK0IsRUFBQTBELFFBQUFvRSx5RUNyREEsSUFBQTRtRixFQUFBdnpGLEVBQUEsOENBRUEyckosRUFBQTNySixFQUFBLHFEQU1BMk0sRUFBQTRtRixFQUFBcmlGLFFBQ0F6TCxLQUFBLFVBQ0FpVSxPQUNBc0IsT0FBQSxLQUNBaEYsUUFBQSxFQUNBZ3hJLGlCQUFBLE1BRUEvakQsVUFBQSxTQUFBYSxFQUFBcHFGLEdBQ0FpeUksRUFBQTFvRCxVQUFBYSxFQUFBcHFGLEdBQUEsTUFJQTdVLEVBQUEwRCxRQUFBb0UsMEVDcEJBLElBQUE0bUYsRUFBQXZ6RixFQUFBLDhDQUVBMnJKLEVBQUEzckosRUFBQSxxREFLQTJNLEVBQUE0bUYsRUFBQXJpRixRQUNBekwsS0FBQSxXQUNBaVUsT0FDQXNCLE9BQUEsS0FDQWhGLFFBQUEsRUFDQWd4SSxpQkFBQSxNQUVBNXJJLE9BQ0FtQixPQUFBLE9BQ0FwQyxLQUFBLE1BRUE4b0YsVUFBQSxTQUFBYSxFQUFBcHFGLEdBQ0FpeUksRUFBQTFvRCxVQUFBYSxFQUFBcHFGLEdBQUEsTUFJQTdVLEVBQUEwRCxRQUFBb0Usc0VDdkJBLElBQUE0bUYsRUFBQXZ6RixFQUFBLDhDQUVBMG9KLEVBQUExb0osRUFBQSwwREFNQTJNLEVBQUE0bUYsRUFBQXJpRixRQUNBekwsS0FBQSxPQUNBaVUsT0FNQWpRLEVBQUEsRUFDQXlSLEVBQUEsRUFDQUMsRUFBQSxFQUNBakYsTUFBQSxFQUNBK0ksT0FBQSxHQUVBZ2tGLFVBQUEsU0FBQWEsRUFBQXBxRixHQUNBLElBQUF3QixFQUFBeEIsRUFBQXdCLEVBQ0FDLEVBQUF6QixFQUFBeUIsRUFDQWpGLEVBQUF3RCxFQUFBeEQsTUFDQStJLEVBQUF2RixFQUFBdUYsT0FFQXZGLEVBQUFqUSxFQUdBaS9JLEVBQUF6bEQsVUFBQWEsRUFBQXBxRixHQUZBb3FGLEVBQUFyb0UsS0FBQXZnQixFQUFBQyxFQUFBakYsRUFBQStJLEdBS0E2a0YsRUFBQVgsZUFLQXQrRixFQUFBMEQsUUFBQW9FLHNFQ3ZDQSxJQU1BQSxFQU5BM00sRUFBQSw4Q0FNQWtSLFFBQ0F6TCxLQUFBLE9BQ0FpVSxPQUNBdUUsR0FBQSxFQUNBQyxHQUFBLEVBQ0F6VSxFQUFBLEVBQ0FrUSxHQUFBLEdBRUFzcEYsVUFBQSxTQUFBYSxFQUFBcHFGLEdBQ0EsSUFBQXdCLEVBQUF4QixFQUFBdUUsR0FDQTlDLEVBQUF6QixFQUFBd0UsR0FDQXdELEVBQUEsRUFBQWxLLEtBQUE0RyxHQUNBMGxGLEVBQUFyNEQsT0FBQXZ3QixFQUFBeEIsRUFBQWpRLEVBQUEwUixHQUNBMm9GLEVBQUExMEIsSUFBQWwwRCxFQUFBQyxFQUFBekIsRUFBQWpRLEVBQUEsRUFBQWlZLEdBQUEsR0FDQW9pRixFQUFBcjRELE9BQUF2d0IsRUFBQXhCLEVBQUFDLEdBQUF3QixHQUNBMm9GLEVBQUExMEIsSUFBQWwwRCxFQUFBQyxFQUFBekIsRUFBQUMsR0FBQSxFQUFBK0gsR0FBQSxNQUlBN2MsRUFBQTBELFFBQUFvRSx3RUN6QkEsSUFBQTRtRixFQUFBdnpGLEVBQUEsOENBRUE0ckosRUFBQTVySixFQUFBLGtFQU1BMk0sRUFBQTRtRixFQUFBcmlGLFFBQ0F6TCxLQUFBLFNBQ0FpVSxPQUNBdUUsR0FBQSxFQUNBQyxHQUFBLEVBQ0F2RSxHQUFBLEVBQ0FsUSxFQUFBLEVBQ0E2TCxXQUFBLEVBQ0FnQyxTQUFBLEVBQUFFLEtBQUE0RyxHQUNBL0ksV0FBQSxHQUVBdXpELE1BQUFnakYsRUFBQXI0RCxFQUFBejBGLFVBQUE4cEUsT0FDQXE2QixVQUFBLFNBQUFhLEVBQUFwcUYsR0FDQSxJQUFBd0IsRUFBQXhCLEVBQUF1RSxHQUNBOUMsRUFBQXpCLEVBQUF3RSxHQUNBdkUsRUFBQW5DLEtBQUFtRyxJQUFBakUsRUFBQUMsSUFBQSxLQUNBbFEsRUFBQStOLEtBQUFtRyxJQUFBakUsRUFBQWpRLEVBQUEsR0FDQTZMLEVBQUFvRSxFQUFBcEUsV0FDQWdDLEVBQUFvQyxFQUFBcEMsU0FDQWpDLEVBQUFxRSxFQUFBckUsVUFDQTIxSSxFQUFBeHpJLEtBQUFDLElBQUFuQyxHQUNBMjFJLEVBQUF6ekksS0FBQUcsSUFBQXJDLEdBQ0F3dUYsRUFBQXI0RCxPQUFBdS9HLEVBQUFyeEksRUFBQXVCLEVBQUErdkksRUFBQXR4SSxFQUFBd0IsR0FDQTJvRixFQUFBWixPQUFBOG5ELEVBQUF2aEosRUFBQXlSLEVBQUErdkksRUFBQXhoSixFQUFBMFIsR0FDQTJvRixFQUFBMTBCLElBQUFsMEQsRUFBQUMsRUFBQTFSLEVBQUE2TCxFQUFBZ0MsR0FBQWpDLEdBQ0F5dUYsRUFBQVosT0FBQTFyRixLQUFBQyxJQUFBSCxHQUFBcUMsRUFBQXVCLEVBQUExRCxLQUFBRyxJQUFBTCxHQUFBcUMsRUFBQXdCLEdBRUEsSUFBQXhCLEdBQ0FtcUYsRUFBQTEwQixJQUFBbDBELEVBQUFDLEVBQUF4QixFQUFBckMsRUFBQWhDLEVBQUFELEdBR0F5dUYsRUFBQVgsZUFJQXQrRixFQUFBMEQsUUFBQW9FLG9FQzNDQSxJQUFBc3lILEVBQUFqL0gsRUFBQSxvREFFQTA4RCxFQUFBMThELEVBQUEsMENBRUFpUixFQUFBalIsRUFBQSwyQ0FFQWtnQyxFQUFBanZCLEVBQUFpdkIsU0FDQUMsRUFBQWx2QixFQUFBa3ZCLFdBQ0FuUSxFQUFBL2UsRUFBQStlLFNBQ0FpMkIsRUFBQWgxQyxFQUFBZzFDLFlBQ0EzbEQsRUFBQTJRLEVBQUEzUSxRQU1BK3dILEVBQUEsV0FLQTVtSCxLQUFBcW5ILGNBR0FULEVBQUF2eUgsV0FDQW1OLFlBQUFvbEgsRUFjQXg1RyxRQUFBLFNBQUF3OUQsRUFBQWdyRCxHQUNBLElBQUFyK0YsRUFDQTZwSCxHQUFBLEVBQ0ExMEksRUFBQTFNLEtBQ0Fvb0IsRUFBQXBvQixLQUFBOHFGLEtBRUEsR0FBQWxnQixFQUFBLENBQ0EsSUFBQXkyRSxFQUFBejJFLEVBQUFsVSxNQUFBLEtBQ0FobkIsRUFBQWhqQyxFQUVBMDBJLEVBQUEsVUFBQUMsRUFBQSxHQUVBLFFBQUEvcEosRUFBQSxFQUFBeUcsRUFBQXNqSixFQUFBOXBKLE9BQThDRCxFQUFBeUcsRUFBT3pHLElBQ3JEbzRDLElBSUFBLElBQUEyeEcsRUFBQS9wSixLQUdBbzRDLElBQ0FuWSxFQUFBbVksUUFHQW5ZLEVBQUE3cUIsRUFHQSxHQUFBNnFCLEVBQUEsQ0FLQSxJQUFBOHZGLEVBQUEzNkcsRUFBQTI2RyxVQUNBNk4sRUFBQSxJQUFBVixFQUFBajlGLEVBQUFxK0YsR0FhQSxPQVpBVixFQUFBcUUsT0FBQSxTQUFBaGlHLEdBQ0E3cUIsRUFBQXVyRCxNQUFBbXBGLEtBQ0tsM0MsS0FBQSxXQUVMbWQsRUFBQWhxSCxPQUFBeEgsRUFBQXd4SCxFQUFBNk4sR0FBQSxLQUVBN04sRUFBQXZ4SCxLQUFBby9ILEdBRUE5c0csR0FDQUEsRUFBQWpGLFVBQUFta0csWUFBQTROLEdBR0FBLEVBbEJBampFLEVBQUEsYUFBQTJZLEVBQUEsK0JBQUFsK0QsRUFBQS9VLEtBeUJBb1ksY0FBQSxTQUFBK3BILEdBSUEsSUFIQSxJQUFBelMsRUFBQXJuSCxLQUFBcW5ILFVBQ0EvOUcsRUFBQSs5RyxFQUFBOXZILE9BRUFELEVBQUEsRUFBbUJBLEVBQUFnUyxFQUFTaFMsSUFDNUIrdkgsRUFBQS92SCxHQUFBb3hCLEtBQUFveEcsR0FJQSxPQURBelMsRUFBQTl2SCxPQUFBLEVBQ0F5SSxNQWlDQWdRLFVBQUEsU0FBQXVuQixFQUFBK0osRUFBQXdDLEVBQUE4eUUsRUFBQTE0RyxFQUFBczVILEdBRUEvaEcsRUFBQXFPLElBQ0E1bEMsRUFBQTA0RyxFQUNBQSxFQUFBOXlFLEVBQ0FBLEVBQUEsR0FFQXBPLEVBQUFraEYsSUFDQTE0RyxFQUFBMDRHLEVBQ0FBLEVBQUEsU0FDQTl5RSxFQUFBLEdBRUFwTyxFQUFBb08sSUFDQTVsQyxFQUFBNGxDLEVBQ0FBLEVBQUEsR0FFQXBPLEVBQUE0TCxJQUNBcGpDLEVBQUFvakMsRUFDQUEsRUFBQSxLQUVBQSxJQUNBQSxFQUFBLEtBSUF0aEMsS0FBQStQLGdCQUVBL1AsS0FBQXNoSixrQkFBQSxHQUFBdGhKLEtBQUF1M0IsRUFBQStKLEVBQUF3QyxHQUlBLElBQUF1akYsRUFBQXJuSCxLQUFBcW5ILFVBQUE1c0gsUUFDQThPLEVBQUE4OUcsRUFBQTl2SCxPQUVBLFNBQUEyeUcsTUFDQTNnRyxHQUdBckwsT0FNQXFMLEdBQ0FyTCxPQUtBLFFBQUE1RyxFQUFBLEVBQW1CQSxFQUFBK3ZILEVBQUE5dkgsT0FBc0JELElBQ3pDK3ZILEVBQUEvdkgsR0FBQTR5RyxRQUFBNThGLE1BQUFzcEcsRUFBQTRnQixJQTZCQThwQixrQkFBQSxTQUFBMTJFLEVBQUFocUUsRUFBQTIyQixFQUFBK0osRUFBQXdDLEdBQ0EsSUFBQXk5RyxLQUNBQyxFQUFBLEVBRUEsUUFBQXJySixLQUFBb2hDLEVBQ0EsR0FBQUEsRUFBQWpqQyxlQUFBNkIsR0FJQSxTQUFBeUssRUFBQXpLLEdBQ0FvdkIsRUFBQWdTLEVBQUFwaEMsTUFBQXFsRCxFQUFBamtCLEVBQUFwaEMsSUFDQTZKLEtBQUFzaEosa0JBQUExMkUsSUFBQSxJQUFBejBFLElBQUF5SyxFQUFBekssR0FBQW9oQyxFQUFBcGhDLEdBQUFtckMsRUFBQXdDLElBRUF5OUcsRUFBQXBySixHQUFBb2hDLEVBQUFwaEMsR0FDQXFySixVQUVPLFNBQUFqcUgsRUFBQXBoQyxHQUdQLEdBQUF5MEUsRUFFUyxDQUVULElBQUF6bEQsS0FDQUEsRUFBQXlsRCxNQUNBemxELEVBQUF5bEQsR0FBQXowRSxHQUFBb2hDLEVBQUFwaEMsR0FDQTZKLEtBQUF1TixLQUFBNFgsUUFOQW5sQixLQUFBdU4sS0FBQXBYLEVBQUFvaEMsRUFBQXBoQyxJQWVBLE9BSkFxckosRUFBQSxHQUNBeGhKLEtBQUFvTixRQUFBdzlELEdBQUEsR0FBQXY5RCxLQUFBLE1BQUFpMEIsRUFBQSxJQUFBQSxFQUFBaWdILEdBQUF6OUcsU0FBQSxHQUdBOWpDLE9BR0EsSUFBQWtDLEVBQUEwa0gsRUFDQXhzSCxFQUFBMEQsUUFBQW9FLGlFQzNQQSxTQUFBc2xILElBQ0F4bkgsS0FBQXdPLEdBQUEsWUFBQXhPLEtBQUF5aEosV0FBQXpoSixNQUNBQSxLQUFBd08sR0FBQSxZQUFBeE8sS0FBQTBoSixNQUFBMWhKLE1BQ0FBLEtBQUF3TyxHQUFBLFVBQUF4TyxLQUFBMmhKLFNBQUEzaEosTUFDQUEsS0FBQXdPLEdBQUEsWUFBQXhPLEtBQUEyaEosU0FBQTNoSixNQWdFQSxTQUFBK3dFLEVBQUF4NUMsRUFBQTdnQyxHQUNBLE9BQ0E2Z0MsU0FDQTZ4RixVQUFBMXlILEtBQUEweUgsV0E3REE1QixFQUFBbnpILFdBQ0FtTixZQUFBZ21ILEVBQ0FpNkIsV0FBQSxTQUFBL3FKLEdBQ0EsSUFBQWtySixFQUFBbHJKLEVBQUE2Z0MsT0FFQXFxSCxLQUFBcDVILFlBQ0F4b0IsS0FBQTZoSixnQkFBQUQsRUFDQUEsRUFBQXJLLFVBQUEsRUFDQXYzSSxLQUFBby9CLEdBQUExb0MsRUFBQTh0QixRQUNBeGtCLEtBQUFxL0IsR0FBQTNvQyxFQUFBK3RCLFFBQ0F6a0IsS0FBQTBvSCxrQkFBQTMzQyxFQUFBNndFLEVBQUFsckosR0FBQSxZQUFBQSxFQUFBZ1IsU0FHQWc2SSxNQUFBLFNBQUFockosR0FDQSxJQUFBa3JKLEVBQUE1aEosS0FBQTZoSixnQkFFQSxHQUFBRCxFQUFBLENBQ0EsSUFBQW54SSxFQUFBL1osRUFBQTh0QixRQUNBOVQsRUFBQWhhLEVBQUErdEIsUUFDQTNYLEVBQUEyRCxFQUFBelEsS0FBQW8vQixHQUNBbnlCLEVBQUF5RCxFQUFBMVEsS0FBQXEvQixHQUNBci9CLEtBQUFvL0IsR0FBQTN1QixFQUNBelEsS0FBQXEvQixHQUFBM3VCLEVBQ0FreEksRUFBQS80SCxNQUFBL2IsRUFBQUcsRUFBQXZXLEdBQ0FzSixLQUFBMG9ILGtCQUFBMzNDLEVBQUE2d0UsRUFBQWxySixHQUFBLE9BQUFBLEVBQUFnUixPQUNBLElBQUFvNkksRUFBQTloSixLQUFBdWpDLFVBQUE5eUIsRUFBQUMsRUFBQWt4SSxHQUFBcnFILE9BQ0F3cUgsRUFBQS9oSixLQUFBZ2lKLFlBQ0FoaUosS0FBQWdpSixZQUFBRixFQUVBRixJQUFBRSxJQUNBQyxHQUFBRCxJQUFBQyxHQUNBL2hKLEtBQUEwb0gsa0JBQUEzM0MsRUFBQWd4RSxFQUFBcnJKLEdBQUEsWUFBQUEsRUFBQWdSLE9BR0FvNkksT0FBQUMsR0FDQS9oSixLQUFBMG9ILGtCQUFBMzNDLEVBQUErd0UsRUFBQXBySixHQUFBLFlBQUFBLEVBQUFnUixVQUtBaTZJLFNBQUEsU0FBQWpySixHQUNBLElBQUFrckosRUFBQTVoSixLQUFBNmhKLGdCQUVBRCxJQUNBQSxFQUFBckssVUFBQSxHQUdBdjNJLEtBQUEwb0gsa0JBQUEzM0MsRUFBQTZ3RSxFQUFBbHJKLEdBQUEsVUFBQUEsRUFBQWdSLE9BRUExSCxLQUFBZ2lKLGFBQ0FoaUosS0FBQTBvSCxrQkFBQTMzQyxFQUFBL3dFLEtBQUFnaUosWUFBQXRySixHQUFBLE9BQUFBLEVBQUFnUixPQUdBMUgsS0FBQTZoSixnQkFBQSxLQUNBN2hKLEtBQUFnaUosWUFBQSxPQVdBLElBQUE5L0ksRUFBQXNsSCxFQUNBcHRILEVBQUEwRCxRQUFBb0UsZ0VDeEVBLElBQUErL0ksRUFBQXByRyxNQUFBeGlELFVBQUFvRyxNQU9BMnhELEVBQUEsV0FDQXBzRCxLQUFBa2lKLGVBR0E5MUYsRUFBQS8zRCxXQUNBbU4sWUFBQTRxRCxFQVNBb0UsSUFBQSxTQUFBOW9ELEVBQUEwcEIsRUFBQStqQixHQUNBLElBQUFndEcsRUFBQW5pSixLQUFBa2lKLFdBRUEsSUFBQTl3SCxJQUFBMXBCLEVBQ0EsT0FBQTFILEtBR0FtaUosRUFBQXo2SSxLQUNBeTZJLEVBQUF6NkksT0FHQSxRQUFBcFEsRUFBQSxFQUFtQkEsRUFBQTZxSixFQUFBejZJLEdBQUFuUSxPQUFzQkQsSUFDekMsR0FBQTZxSixFQUFBejZJLEdBQUFwUSxHQUFBNEIsSUFBQWs0QixFQUNBLE9BQUFweEIsS0FVQSxPQU5BbWlKLEVBQUF6NkksR0FBQTVSLE1BQ0FvRCxFQUFBazRCLEVBQ0FvL0IsS0FBQSxFQUNBNm9DLElBQUFsa0QsR0FBQW4xQyxPQUdBQSxNQVNBd08sR0FBQSxTQUFBOUcsRUFBQTBwQixFQUFBK2pCLEdBQ0EsSUFBQWd0RyxFQUFBbmlKLEtBQUFraUosV0FFQSxJQUFBOXdILElBQUExcEIsRUFDQSxPQUFBMUgsS0FHQW1pSixFQUFBejZJLEtBQ0F5NkksRUFBQXo2SSxPQUdBLFFBQUFwUSxFQUFBLEVBQW1CQSxFQUFBNnFKLEVBQUF6NkksR0FBQW5RLE9BQXNCRCxJQUN6QyxHQUFBNnFKLEVBQUF6NkksR0FBQXBRLEdBQUE0QixJQUFBazRCLEVBQ0EsT0FBQXB4QixLQVVBLE9BTkFtaUosRUFBQXo2SSxHQUFBNVIsTUFDQW9ELEVBQUFrNEIsRUFDQW8vQixLQUFBLEVBQ0E2b0MsSUFBQWxrRCxHQUFBbjFDLE9BR0FBLE1BUUF1ZCxTQUFBLFNBQUE3VixHQUNBLElBQUF5NkksRUFBQW5pSixLQUFBa2lKLFdBQ0EsT0FBQUMsRUFBQXo2SSxJQUFBeTZJLEVBQUF6NkksR0FBQW5RLFFBUUEwWSxJQUFBLFNBQUF2SSxFQUFBMHBCLEdBQ0EsSUFBQSt3SCxFQUFBbmlKLEtBQUFraUosV0FFQSxJQUFBeDZJLEVBRUEsT0FEQTFILEtBQUFraUosY0FDQWxpSixLQUdBLEdBQUFveEIsRUFBQSxDQUNBLEdBQUErd0gsRUFBQXo2SSxHQUFBLENBR0EsSUFGQSxJQUFBaStHLEtBRUFydUgsRUFBQSxFQUFBeUcsRUFBQW9rSixFQUFBejZJLEdBQUFuUSxPQUE2Q0QsRUFBQXlHLEVBQU96RyxJQUNwRDZxSixFQUFBejZJLEdBQUFwUSxHQUFBLEdBQUE4NUIsR0FDQXUwRixFQUFBN3ZILEtBQUFxc0osRUFBQXo2SSxHQUFBcFEsSUFJQTZxSixFQUFBejZJLEdBQUFpK0csRUFHQXc4QixFQUFBejZJLElBQUEsSUFBQXk2SSxFQUFBejZJLEdBQUFuUSxlQUNBNHFKLEVBQUF6NkksZUFHQXk2SSxFQUFBejZJLEdBR0EsT0FBQTFILE1BUUEwaEMsUUFBQSxTQUFBMW1DLEdBQ0EsR0FBQWdGLEtBQUFraUosV0FBQWxuSixHQUFBLENBQ0EsSUFBQTZwRixFQUFBcDhFLFVBQ0EyNUksRUFBQXY5RCxFQUFBdHRGLE9BRUE2cUosRUFBQSxJQUNBdjlELEVBQUFvOUQsRUFBQTF0SixLQUFBc3dGLEVBQUEsSUFNQSxJQUhBLElBQUFzOUQsRUFBQW5pSixLQUFBa2lKLFdBQUFsbkosR0FDQXNPLEVBQUE2NEksRUFBQTVxSixPQUVBRCxFQUFBLEVBQXFCQSxFQUFBZ1MsR0FBUyxDQUU5QixPQUFBODRJLEdBQ0EsT0FDQUQsRUFBQTdxSixHQUFBLEVBQUEvQyxLQUFBNHRKLEVBQUE3cUosR0FBQSxLQUVBLE1BRUEsT0FDQTZxSixFQUFBN3FKLEdBQUEsRUFBQS9DLEtBQUE0dEosRUFBQTdxSixHQUFBLElBQUF1dEYsRUFBQSxJQUVBLE1BRUEsT0FDQXM5RCxFQUFBN3FKLEdBQUEsRUFBQS9DLEtBQUE0dEosRUFBQTdxSixHQUFBLElBQUF1dEYsRUFBQSxHQUFBQSxFQUFBLElBRUEsTUFFQSxRQUVBczlELEVBQUE3cUosR0FBQSxFQUFBTyxNQUFBc3FKLEVBQUE3cUosR0FBQSxJQUFBdXRGLEdBS0FzOUQsRUFBQTdxSixHQUFBLEtBQ0E2cUosRUFBQTlrSixPQUFBL0YsRUFBQSxHQUVBZ1MsS0FFQWhTLEtBS0EsT0FBQTBJLE1BT0FxaUosbUJBQUEsU0FBQXJuSixHQUNBLEdBQUFnRixLQUFBa2lKLFdBQUFsbkosR0FBQSxDQUNBLElBQUE2cEYsRUFBQXA4RSxVQUNBMjVJLEVBQUF2OUQsRUFBQXR0RixPQUVBNnFKLEVBQUEsSUFDQXY5RCxFQUFBbzlELEVBQUExdEosS0FBQXN3RixFQUFBLEVBQUFBLEVBQUF0dEYsT0FBQSxJQU9BLElBSkEsSUFBQThoRyxFQUFBeFUsSUFBQXR0RixPQUFBLEdBQ0E0cUosRUFBQW5pSixLQUFBa2lKLFdBQUFsbkosR0FDQXNPLEVBQUE2NEksRUFBQTVxSixPQUVBRCxFQUFBLEVBQXFCQSxFQUFBZ1MsR0FBUyxDQUU5QixPQUFBODRJLEdBQ0EsT0FDQUQsRUFBQTdxSixHQUFBLEVBQUEvQyxLQUFBOGtHLEdBRUEsTUFFQSxPQUNBOG9ELEVBQUE3cUosR0FBQSxFQUFBL0MsS0FBQThrRyxFQUFBeFUsRUFBQSxJQUVBLE1BRUEsT0FDQXM5RCxFQUFBN3FKLEdBQUEsRUFBQS9DLEtBQUE4a0csRUFBQXhVLEVBQUEsR0FBQUEsRUFBQSxJQUVBLE1BRUEsUUFFQXM5RCxFQUFBN3FKLEdBQUEsRUFBQU8sTUFBQXdoRyxFQUFBeFUsR0FLQXM5RCxFQUFBN3FKLEdBQUEsS0FDQTZxSixFQUFBOWtKLE9BQUEvRixFQUFBLEdBRUFnUyxLQUVBaFMsS0FLQSxPQUFBMEksT0F3RkEsSUFBQWtDLEVBQUFrcUQsRUFDQWh5RCxFQUFBMEQsUUFBQW9FLHVFQ3ZVQSxJQUFBZ1ksRUFBQTNrQixFQUFBLDZDQUVBcW5FLEVBQUFybkUsRUFBQSw2Q0FPQStzSixFQUFBcG9JLEVBQUE0RyxTQUNBZzlHLEVBQUEsS0FFQSxTQUFBa04sRUFBQTc3RyxHQUNBLE9BQUFBLEVBQUEydUcsR0FBQTN1RyxHQUFBMnVHLEVBUUEsSUFBQS8wQyxFQUFBLFNBQUF6NkIsSUFDQUEsU0FFQWpqRCxXQU1BckwsS0FBQXFMLFVBQUEsTUFHQSxNQUFBaWpELEVBQUExOUMsV0FNQTVRLEtBQUE0USxTQUFBLEdBR0EwOUMsRUFBQWp6QyxRQU1BcmIsS0FBQXFiLE9BQUEsTUFTQXJiLEtBQUE2USxPQUFBN1EsS0FBQTZRLFFBQUEsTUFHQTB4SSxFQUFBeDVELEVBQUExMEYsVUFDQWt1SixFQUFBN29JLFVBQUEsS0FNQTZvSSxFQUFBanZELG1CQUFBLFdBQ0EsT0FBQTAzQyxFQUFBaHJJLEtBQUE0USxXQUFBbzZILEVBQUFockksS0FBQXFMLFNBQUEsS0FBQTIvSCxFQUFBaHJJLEtBQUFxTCxTQUFBLEtBQUEyL0gsRUFBQWhySSxLQUFBcWIsTUFBQSxPQUFBMnZILEVBQUFockksS0FBQXFiLE1BQUEsT0FHQWtuSSxFQUFBL29JLGdCQUFBLFdBQ0EsSUFBQXJlLEVBQUE2RSxLQUFBN0UsT0FDQXFuSixFQUFBcm5KLEtBQUF1ZSxVQUNBNDVFLEVBQUF0ekYsS0FBQXN6RixxQkFDQTEwRixFQUFBb0IsS0FBQTBaLFVBRUE0NUUsR0FBQWt2RCxHQUtBNWpKLEtBQUFzYixFQUFBN2EsU0FFQWkwRixFQUNBdHpGLEtBQUFnaEIsa0JBQUFwaUIsR0FFQTBqSixFQUFBMWpKLEdBSUE0akosSUFDQWx2RCxFQUNBcDVFLEVBQUE2RyxJQUFBbmlCLEVBQUF6RCxFQUFBdWUsVUFBQTlhLEdBRUFzYixFQUFBbzVCLEtBQUExMEMsRUFBQXpELEVBQUF1ZSxZQUtBMVosS0FBQTBaLFVBQUE5YSxFQUNBb0IsS0FBQWt2SCxhQUFBbHZILEtBQUFrdkgsY0FBQWgxRyxFQUFBN2EsU0FDQTZhLEVBQUE0MEUsT0FBQTl1RixLQUFBa3ZILGFBQUF0d0gsSUF4QkFBLEdBQUEwakosRUFBQTFqSixJQTJCQTJqSixFQUFBdmhJLGtCQUFBLFNBQUFwaUIsR0FDQSxPQUFBbXFGLEVBQUEvbkUsa0JBQUFoaEIsS0FBQXBCLElBUUEyakosRUFBQTN4QixhQUFBLFNBQUF2M0IsR0FDQSxJQUFBejZGLEVBQUFvQixLQUFBMFosVUFDQTA0QyxFQUFBaW5DLEVBQUFqbkMsS0FBQSxFQUVBeHpELEVBQ0F5NkYsRUFBQXUzQixhQUFBeCtELEVBQUF4ekQsRUFBQSxHQUFBd3pELEVBQUF4ekQsRUFBQSxHQUFBd3pELEVBQUF4ekQsRUFBQSxHQUFBd3pELEVBQUF4ekQsRUFBQSxHQUFBd3pELEVBQUF4ekQsRUFBQSxHQUFBd3pELEVBQUF4ekQsRUFBQSxJQUVBeTZGLEVBQUF1M0IsYUFBQXgrRCxFQUFBLElBQUFBLEVBQUEsTUFJQW13RixFQUFBeHhCLGlCQUFBLFNBQUExM0IsR0FDQSxJQUFBam5DLEVBQUFpbkMsRUFBQWpuQyxLQUFBLEVBQ0FpbkMsRUFBQXUzQixhQUFBeCtELEVBQUEsSUFBQUEsRUFBQSxNQUdBLElBQUFxd0YsS0FLQUYsRUFBQWxrSSxtQkFBQSxXQUNBLEdBQUFyZSxLQUFBMFosVUFBQSxDQUlBLElBQUF2ZSxFQUFBNkUsS0FBQTdFLE9BQ0F5RCxFQUFBb0IsS0FBQTBaLFVBRUF2ZSxLQUFBdWUsWUFFQVEsRUFBQTZHLElBQUEwaEksRUFBQXRuSixFQUFBK3pILGFBQUF0d0gsR0FDQUEsRUFBQTZqSixHQUdBLElBQUF4ZSxFQUFBcmxJLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FDQXNsSSxFQUFBdGxJLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FDQXlNLEVBQUFyTCxLQUFBcUwsU0FDQWdRLEVBQUFyYixLQUFBcWIsTUFFQTJ2SCxFQUFBL0csRUFBQSxLQUNBQSxFQUFBbDNILEtBQUFnSCxLQUFBa3dILElBR0ErRyxFQUFBOUcsRUFBQSxLQUNBQSxFQUFBbjNILEtBQUFnSCxLQUFBbXdILElBR0F0bEksRUFBQSxPQUNBcWxJLE1BR0FybEksRUFBQSxPQUNBc2xJLE1BR0E3NEgsRUFBQSxHQUFBek0sRUFBQSxHQUNBeU0sRUFBQSxHQUFBek0sRUFBQSxHQUNBeWMsRUFBQSxHQUFBNG9ILEVBQ0E1b0gsRUFBQSxHQUFBNm9ILEVBQ0Fsa0ksS0FBQTRRLFNBQUE3RCxLQUFBbXdILE9BQUF0K0gsRUFBQSxHQUFBc2xJLEVBQUF0bEksRUFBQSxHQUFBcWxJLEtBUUFzZSxFQUFBcEwsZUFBQSxXQUNBLElBQUF2NEksRUFBQW9CLEtBQUEwWixVQUVBLElBQUE5YSxFQUNBLFlBR0EsSUFBQXFsSSxFQUFBbDNILEtBQUFnSCxLQUFBblYsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUNBc2xJLEVBQUFuM0gsS0FBQWdILEtBQUFuVixFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBVUEsT0FSQUEsRUFBQSxPQUNBcWxJLE1BR0FybEksRUFBQSxPQUNBc2xJLE9BR0FELEVBQUFDLElBV0FxZSxFQUFBN0ssc0JBQUEsU0FBQWpuSSxFQUFBQyxHQUNBLElBQUErakksR0FBQWhrSSxFQUFBQyxHQUNBdytHLEVBQUFsdkgsS0FBQWt2SCxhQU1BLE9BSkFBLEdBQ0F0eUQsRUFBQWhrRCxlQUFBNjdILElBQUF2bEIsR0FHQXVsQixHQVdBOE4sRUFBQUcsdUJBQUEsU0FBQWp5SSxFQUFBQyxHQUNBLElBQUErakksR0FBQWhrSSxFQUFBQyxHQUNBZ0osRUFBQTFaLEtBQUEwWixVQU1BLE9BSkFBLEdBQ0FrakQsRUFBQWhrRCxlQUFBNjdILElBQUEvNkgsR0FHQSs2SCxHQVlBMXJELEVBQUEvbkUsa0JBQUEsU0FBQXVXLEVBQUEzNEIsR0FFQTBqSixFQURBMWpKLFNBRUEsSUFBQWlTLEVBQUEwbUIsRUFBQTFtQixPQUNBd0ssRUFBQWtjLEVBQUFsYyxRQUFBLEtBQ0F6SyxFQUFBMm1CLEVBQUEzbUIsVUFBQSxFQUNBdkYsRUFBQWtzQixFQUFBbHNCLFdBQUEsS0FzQkEsT0FwQkF3RixJQUVBalMsRUFBQSxJQUFBaVMsRUFBQSxHQUNBalMsRUFBQSxJQUFBaVMsRUFBQSxJQUdBcUosRUFBQW1CLE1BQUF6YyxJQUFBeWMsR0FFQXpLLEdBQ0FzSixFQUFBOU8sT0FBQXhNLElBQUFnUyxHQUdBQyxJQUVBalMsRUFBQSxJQUFBaVMsRUFBQSxHQUNBalMsRUFBQSxJQUFBaVMsRUFBQSxJQUdBalMsRUFBQSxJQUFBeU0sRUFBQSxHQUNBek0sRUFBQSxJQUFBeU0sRUFBQSxHQUNBek0sR0FHQSxJQUFBc0QsRUFBQTZtRixFQUNBM3VGLEVBQUEwRCxRQUFBb0UsOERDMVJBLElBRUF5Z0osR0FDQUMsYUFBQSxTQUNBQyxXQUFBLGVBQ0FDLGNBQUEsZUFDQUMsTUFBQSxhQUNBQyxZQUFBLGVBQ0FDLE9BQUEsZUFDQUMsT0FBQSxlQUNBQyxRQUFBLGVBQ0FDLE9BQUEsU0FDQUMsZ0JBQUEsZUFDQUMsTUFBQSxXQUNBQyxZQUFBLGNBQ0FDLE9BQUEsYUFDQUMsV0FBQSxlQUNBQyxXQUFBLGNBQ0FDLFlBQUEsYUFDQUMsV0FBQSxjQUNBQyxPQUFBLGNBQ0FDLGdCQUFBLGVBQ0FDLFVBQUEsZUFDQUMsU0FBQSxhQUNBQyxNQUFBLGFBQ0FDLFVBQUEsV0FDQUMsVUFBQSxhQUNBQyxlQUFBLGNBQ0FDLFVBQUEsZUFDQUMsV0FBQSxXQUNBQyxVQUFBLGVBQ0FDLFdBQUEsZUFDQUMsYUFBQSxhQUNBQyxnQkFBQSxhQUNBQyxZQUFBLGFBQ0FDLFlBQUEsY0FDQUMsU0FBQSxXQUNBQyxZQUFBLGVBQ0FDLGNBQUEsZUFDQUMsZUFBQSxhQUNBQyxlQUFBLFlBQ0FDLGVBQUEsWUFDQUMsZUFBQSxhQUNBQyxZQUFBLGFBQ0FDLFVBQUEsY0FDQUMsYUFBQSxhQUNBQyxTQUFBLGVBQ0FDLFNBQUEsZUFDQUMsWUFBQSxjQUNBQyxXQUFBLGFBQ0FDLGFBQUEsZUFDQUMsYUFBQSxhQUNBQyxTQUFBLGFBQ0FDLFdBQUEsZUFDQUMsWUFBQSxlQUNBQyxNQUFBLGFBQ0FDLFdBQUEsY0FDQUMsTUFBQSxlQUNBQyxPQUFBLFdBQ0FDLGFBQUEsY0FDQUMsTUFBQSxlQUNBQyxVQUFBLGVBQ0FDLFNBQUEsZUFDQUMsV0FBQSxhQUNBQyxRQUFBLFlBQ0FDLE9BQUEsZUFDQUMsT0FBQSxlQUNBQyxVQUFBLGVBQ0FDLGVBQUEsZUFDQUMsV0FBQSxhQUNBQyxjQUFBLGVBQ0FDLFdBQUEsZUFDQUMsWUFBQSxlQUNBQyxXQUFBLGVBQ0FDLHNCQUFBLGVBQ0FDLFdBQUEsZUFDQUMsWUFBQSxlQUNBQyxXQUFBLGVBQ0FDLFdBQUEsZUFDQUMsYUFBQSxlQUNBQyxlQUFBLGNBQ0FDLGNBQUEsZUFDQUMsZ0JBQUEsZUFDQUMsZ0JBQUEsZUFDQUMsZ0JBQUEsZUFDQUMsYUFBQSxlQUNBQyxNQUFBLFdBQ0FDLFdBQUEsYUFDQUMsT0FBQSxlQUNBQyxTQUFBLGFBQ0FDLFFBQUEsV0FDQUMsa0JBQUEsZUFDQUMsWUFBQSxXQUNBQyxjQUFBLGNBQ0FDLGNBQUEsZUFDQUMsZ0JBQUEsY0FDQUMsaUJBQUEsZUFDQUMsbUJBQUEsYUFDQUMsaUJBQUEsY0FDQUMsaUJBQUEsY0FDQUMsY0FBQSxhQUNBQyxXQUFBLGVBQ0FDLFdBQUEsZUFDQUMsVUFBQSxlQUNBQyxhQUFBLGVBQ0FDLE1BQUEsV0FDQUMsU0FBQSxlQUNBQyxPQUFBLGFBQ0FDLFdBQUEsY0FDQUMsUUFBQSxhQUNBQyxXQUFBLFlBQ0FDLFFBQUEsZUFDQUMsZUFBQSxlQUNBQyxXQUFBLGVBQ0FDLGVBQUEsZUFDQUMsZUFBQSxlQUNBQyxZQUFBLGVBQ0FDLFdBQUEsZUFDQUMsTUFBQSxjQUNBQyxNQUFBLGVBQ0FDLE1BQUEsZUFDQUMsWUFBQSxlQUNBQyxRQUFBLGFBQ0FDLEtBQUEsV0FDQUMsV0FBQSxlQUNBQyxXQUFBLGNBQ0FDLGFBQUEsYUFDQUMsUUFBQSxlQUNBQyxZQUFBLGNBQ0FDLFVBQUEsYUFDQUMsVUFBQSxlQUNBQyxRQUFBLGFBQ0FDLFFBQUEsZUFDQUMsU0FBQSxlQUNBQyxXQUFBLGNBQ0FDLFdBQUEsZUFDQUMsV0FBQSxlQUNBQyxNQUFBLGVBQ0FDLGFBQUEsYUFDQUMsV0FBQSxjQUNBQyxLQUFBLGVBQ0FDLE1BQUEsYUFDQUMsU0FBQSxlQUNBQyxRQUFBLGFBQ0FDLFdBQUEsY0FDQUMsUUFBQSxlQUNBQyxPQUFBLGVBQ0FDLE9BQUEsZUFDQUMsWUFBQSxlQUNBQyxRQUFBLGFBQ0FDLGFBQUEsZUFHQSxTQUFBQyxFQUFBMTBKLEdBSUEsT0FGQUEsRUFBQXlWLEtBQUEreEIsTUFBQXhuQyxJQUVBLElBQUFBLEVBQUEsUUFBQUEsRUFVQSxT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LEdBQ0EsT0FBQUEsRUFBQXk1SixNQUNBWixFQUFBYSxVQUFBLElBQUFuQixLQUFBb0IsUUFDQXJvSixVQUFBdFIsRUFBQTQ1SixVQUFBLEdBQUFwekQsRUFBQXhtRyxFQUFBNDVKLFVBQUEsR0FBQXJ6RCxHQUNBcmdHLFFBQUEsWUFBQWdCLEVBQUEsNkNBQUFpaEQsRUFBQTVxRCxHQUFBSyxHQUFBLHVOQUNBd1YsT0FBQSxJQUFBbWxKLEtBQUFzQixPQUFBLGtCQXhLQWxDLElBQUEsZ0JBQUFsakosR0FBQSxrQ0FDQSxJQUFBcWxKLEVBQUFuQyxJQUFBMXhKLE1BQ0E2ekosRUFBQTFrSSxPQVVBMGtJLEVBQUF4bkQsS0FDQTFvRixZQUFBLFlBRUFrd0ksRUFBQXJxRCxPQUFBNkMsS0FDQTNvRixnQkFBQSxVQUNBTCxNQUFBLE9BQ0FNLFlBQUEsY0FmQWt3SSxFQUFBeG5ELEtBQ0Exb0YsWUFBQSxRQUVBa3dJLEVBQUFycUQsT0FBQTZDLEtBQ0Ezb0YsZ0JBQUEsTUFDQUwsTUFBQSxPQUNBTSxZQUFBLFdBY0ErdEksSUFBQSxRQUFBOWhELE1BQUEsV0FDQTZoRCxFQUFBeDBKLElBQ0FvMUosUUFJQVgsSUFBQSxhQUFBb0MsU0FBQSxTQUFBcDlKLEdBQ0EsS0FBQUEsRUFBQXk2RyxTQUNBc2dELEVBQUF4MEosSUFDQW8xSiw0Q0N6REFqNEosRUFBQTBELFFBQUF2SSxFQUFBOEMsRUFBQSx5RUNBQStCLEVBQUEwRCxRQUFBdkksRUFBQThDLEVBQUEiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0ZnVuY3Rpb24gaG90RGlzcG9zZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbiBcdH1cbiBcdHZhciBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayA9IHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVcIl07XG4gXHR3aW5kb3dbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdID0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHtcbiBcdFx0aG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuIFx0XHRpZiAocGFyZW50SG90VXBkYXRlQ2FsbGJhY2spIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcbiBcdH0gO1xuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHR2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXTtcbiBcdFx0dmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gXHRcdHNjcmlwdC5jaGFyc2V0ID0gXCJ1dGYtOFwiO1xuIFx0XHRzY3JpcHQuc3JjID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGNodW5rSWQgKyBcIi5cIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc1wiO1xuIFx0XHQ7XG4gXHRcdGhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZE1hbmlmZXN0KHJlcXVlc3RUaW1lb3V0KSB7XG4gXHRcdHJlcXVlc3RUaW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQgfHwgMTAwMDA7XG4gXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gXHRcdFx0XHRyZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihcIk5vIGJyb3dzZXIgc3VwcG9ydFwiKSk7XG4gXHRcdFx0fVxuIFx0XHRcdHRyeSB7XG4gXHRcdFx0XHR2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuIFx0XHRcdFx0dmFyIHJlcXVlc3RQYXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc29uXCI7XG4gXHRcdFx0XHRyZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgcmVxdWVzdFBhdGgsIHRydWUpO1xuIFx0XHRcdFx0cmVxdWVzdC50aW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQ7XG4gXHRcdFx0XHRyZXF1ZXN0LnNlbmQobnVsbCk7XG4gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRyZXR1cm4gcmVqZWN0KGVycik7XG4gXHRcdFx0fVxuIFx0XHRcdHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRpZiAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSByZXR1cm47XG4gXHRcdFx0XHRpZiAocmVxdWVzdC5zdGF0dXMgPT09IDApIHtcbiBcdFx0XHRcdFx0Ly8gdGltZW91dFxuIFx0XHRcdFx0XHRyZWplY3QoXG4gXHRcdFx0XHRcdFx0bmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgdGltZWQgb3V0LlwiKVxuIFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gNDA0KSB7XG4gXHRcdFx0XHRcdC8vIG5vIHVwZGF0ZSBhdmFpbGFibGVcbiBcdFx0XHRcdFx0cmVzb2x2ZSgpO1xuIFx0XHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyAhPT0gMjAwICYmIHJlcXVlc3Quc3RhdHVzICE9PSAzMDQpIHtcbiBcdFx0XHRcdFx0Ly8gb3RoZXIgZmFpbHVyZVxuIFx0XHRcdFx0XHRyZWplY3QobmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgZmFpbGVkLlwiKSk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHQvLyBzdWNjZXNzXG4gXHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0dmFyIHVwZGF0ZSA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuIFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG4gXHRcdFx0XHRcdFx0cmVqZWN0KGUpO1xuIFx0XHRcdFx0XHRcdHJldHVybjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRyZXNvbHZlKHVwZGF0ZSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdHZhciBob3RBcHBseU9uVXBkYXRlID0gdHJ1ZTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRIYXNoID0gXCJiNmU3NzNhYzRhMTcyODNkZTUwY1wiO1xuIFx0dmFyIGhvdFJlcXVlc3RUaW1lb3V0ID0gMTAwMDA7XG4gXHR2YXIgaG90Q3VycmVudE1vZHVsZURhdGEgPSB7fTtcbiBcdHZhciBob3RDdXJyZW50Q2hpbGRNb2R1bGU7XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudFBhcmVudHNUZW1wID0gW107XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkge1xuIFx0XHR2YXIgbWUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0aWYgKCFtZSkgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX187XG4gXHRcdHZhciBmbiA9IGZ1bmN0aW9uKHJlcXVlc3QpIHtcbiBcdFx0XHRpZiAobWUuaG90LmFjdGl2ZSkge1xuIFx0XHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcbiBcdFx0XHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA9PT0gLTEpIHtcbiBcdFx0XHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMucHVzaChtb2R1bGVJZCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpID09PSAtMSkge1xuIFx0XHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRjb25zb2xlLndhcm4oXG4gXHRcdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICtcbiBcdFx0XHRcdFx0XHRyZXF1ZXN0ICtcbiBcdFx0XHRcdFx0XHRcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgK1xuIFx0XHRcdFx0XHRcdG1vZHVsZUlkXG4gXHRcdFx0XHQpO1xuIFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbXTtcbiBcdFx0XHR9XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18ocmVxdWVzdCk7XG4gXHRcdH07XG4gXHRcdHZhciBPYmplY3RGYWN0b3J5ID0gZnVuY3Rpb24gT2JqZWN0RmFjdG9yeShuYW1lKSB7XG4gXHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXTtcbiBcdFx0XHRcdH0sXG4gXHRcdFx0XHRzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX19bbmFtZV0gPSB2YWx1ZTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9O1xuIFx0XHR9O1xuIFx0XHRmb3IgKHZhciBuYW1lIGluIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX193ZWJwYWNrX3JlcXVpcmVfXywgbmFtZSkgJiZcbiBcdFx0XHRcdG5hbWUgIT09IFwiZVwiICYmXG4gXHRcdFx0XHRuYW1lICE9PSBcInRcIlxuIFx0XHRcdCkge1xuIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBPYmplY3RGYWN0b3J5KG5hbWUpKTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0Zm4uZSA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcbiBcdFx0XHRpZiAoaG90U3RhdHVzID09PSBcInJlYWR5XCIpIGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0aG90Q2h1bmtzTG9hZGluZysrO1xuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoY2h1bmtJZCkudGhlbihmaW5pc2hDaHVua0xvYWRpbmcsIGZ1bmN0aW9uKGVycikge1xuIFx0XHRcdFx0ZmluaXNoQ2h1bmtMb2FkaW5nKCk7XG4gXHRcdFx0XHR0aHJvdyBlcnI7XG4gXHRcdFx0fSk7XG5cbiBcdFx0XHRmdW5jdGlvbiBmaW5pc2hDaHVua0xvYWRpbmcoKSB7XG4gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nLS07XG4gXHRcdFx0XHRpZiAoaG90U3RhdHVzID09PSBcInByZXBhcmVcIikge1xuIFx0XHRcdFx0XHRpZiAoIWhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSkge1xuIFx0XHRcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmIChob3RDaHVua3NMb2FkaW5nID09PSAwICYmIGhvdFdhaXRpbmdGaWxlcyA9PT0gMCkge1xuIFx0XHRcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fTtcbiBcdFx0Zm4udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdFx0aWYgKG1vZGUgJiAxKSB2YWx1ZSA9IGZuKHZhbHVlKTtcbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy50KHZhbHVlLCBtb2RlICYgfjEpO1xuIFx0XHR9O1xuIFx0XHRyZXR1cm4gZm47XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBob3QgPSB7XG4gXHRcdFx0Ly8gcHJpdmF0ZSBzdHVmZlxuIFx0XHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXG4gXHRcdFx0X2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcbiBcdFx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcbiBcdFx0XHRfZGlzcG9zZUhhbmRsZXJzOiBbXSxcbiBcdFx0XHRfbWFpbjogaG90Q3VycmVudENoaWxkTW9kdWxlICE9PSBtb2R1bGVJZCxcblxuIFx0XHRcdC8vIE1vZHVsZSBBUElcbiBcdFx0XHRhY3RpdmU6IHRydWUsXG4gXHRcdFx0YWNjZXB0OiBmdW5jdGlvbihkZXAsIGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRpZiAodHlwZW9mIGRlcCA9PT0gXCJ1bmRlZmluZWRcIikgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0XHRlbHNlIGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0fSxcbiBcdFx0XHRkZWNsaW5lOiBmdW5jdGlvbihkZXApIHtcbiBcdFx0XHRcdGlmICh0eXBlb2YgZGVwID09PSBcInVuZGVmaW5lZFwiKSBob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxuIFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcbiBcdFx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xuIFx0XHRcdH0sXG4gXHRcdFx0ZGlzcG9zZTogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuIFx0XHRcdH0sXG4gXHRcdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0XHR9LFxuIFx0XHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHR9LFxuXG4gXHRcdFx0Ly8gTWFuYWdlbWVudCBBUElcbiBcdFx0XHRjaGVjazogaG90Q2hlY2ssXG4gXHRcdFx0YXBwbHk6IGhvdEFwcGx5LFxuIFx0XHRcdHN0YXR1czogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0aWYgKCFsKSByZXR1cm4gaG90U3RhdHVzO1xuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbiBcdFx0XHR9LFxuIFx0XHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4gXHRcdFx0fSxcbiBcdFx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90U3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90U3RhdHVzSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcblxuIFx0XHRcdC8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxuIFx0XHRcdGRhdGE6IGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuIFx0XHR9O1xuIFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XG4gXHRcdHJldHVybiBob3Q7XG4gXHR9XG5cbiBcdHZhciBob3RTdGF0dXNIYW5kbGVycyA9IFtdO1xuIFx0dmFyIGhvdFN0YXR1cyA9IFwiaWRsZVwiO1xuXG4gXHRmdW5jdGlvbiBob3RTZXRTdGF0dXMobmV3U3RhdHVzKSB7XG4gXHRcdGhvdFN0YXR1cyA9IG5ld1N0YXR1cztcbiBcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBob3RTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcbiBcdFx0XHRob3RTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XG4gXHR9XG5cbiBcdC8vIHdoaWxlIGRvd25sb2FkaW5nXG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzID0gMDtcbiBcdHZhciBob3RDaHVua3NMb2FkaW5nID0gMDtcbiBcdHZhciBob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdEF2YWlsYWJsZUZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90RGVmZXJyZWQ7XG5cbiBcdC8vIFRoZSB1cGRhdGUgaW5mb1xuIFx0dmFyIGhvdFVwZGF0ZSwgaG90VXBkYXRlTmV3SGFzaDtcblxuIFx0ZnVuY3Rpb24gdG9Nb2R1bGVJZChpZCkge1xuIFx0XHR2YXIgaXNOdW1iZXIgPSAraWQgKyBcIlwiID09PSBpZDtcbiBcdFx0cmV0dXJuIGlzTnVtYmVyID8gK2lkIDogaWQ7XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5KSB7XG4gXHRcdGlmIChob3RTdGF0dXMgIT09IFwiaWRsZVwiKSB7XG4gXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XG4gXHRcdH1cbiBcdFx0aG90QXBwbHlPblVwZGF0ZSA9IGFwcGx5O1xuIFx0XHRob3RTZXRTdGF0dXMoXCJjaGVja1wiKTtcbiBcdFx0cmV0dXJuIGhvdERvd25sb2FkTWFuaWZlc3QoaG90UmVxdWVzdFRpbWVvdXQpLnRoZW4oZnVuY3Rpb24odXBkYXRlKSB7XG4gXHRcdFx0aWYgKCF1cGRhdGUpIHtcbiBcdFx0XHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4gXHRcdFx0XHRyZXR1cm4gbnVsbDtcbiBcdFx0XHR9XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RBdmFpbGFibGVGaWxlc01hcCA9IHVwZGF0ZS5jO1xuIFx0XHRcdGhvdFVwZGF0ZU5ld0hhc2ggPSB1cGRhdGUuaDtcblxuIFx0XHRcdGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRcdGhvdERlZmVycmVkID0ge1xuIFx0XHRcdFx0XHRyZXNvbHZlOiByZXNvbHZlLFxuIFx0XHRcdFx0XHRyZWplY3Q6IHJlamVjdFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHRob3RVcGRhdGUgPSB7fTtcbiBcdFx0XHR2YXIgY2h1bmtJZCA9IDA7XG4gXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmUtYmxvY2tzXG4gXHRcdFx0e1xuIFx0XHRcdFx0LypnbG9iYWxzIGNodW5rSWQgKi9cbiBcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdH1cbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiICYmXG4gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nID09PSAwICYmXG4gXHRcdFx0XHRob3RXYWl0aW5nRmlsZXMgPT09IDBcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0XHR9XG4gXHRcdFx0cmV0dXJuIHByb21pc2U7XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gfHwgIWhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdKVxuIFx0XHRcdHJldHVybjtcbiBcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSBmYWxzZTtcbiBcdFx0Zm9yICh2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdGhvdFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmICgtLWhvdFdhaXRpbmdGaWxlcyA9PT0gMCAmJiBob3RDaHVua3NMb2FkaW5nID09PSAwKSB7XG4gXHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0aWYgKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSkge1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlcysrO1xuIFx0XHRcdGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90VXBkYXRlRG93bmxvYWRlZCgpIHtcbiBcdFx0aG90U2V0U3RhdHVzKFwicmVhZHlcIik7XG4gXHRcdHZhciBkZWZlcnJlZCA9IGhvdERlZmVycmVkO1xuIFx0XHRob3REZWZlcnJlZCA9IG51bGw7XG4gXHRcdGlmICghZGVmZXJyZWQpIHJldHVybjtcbiBcdFx0aWYgKGhvdEFwcGx5T25VcGRhdGUpIHtcbiBcdFx0XHQvLyBXcmFwIGRlZmVycmVkIG9iamVjdCBpbiBQcm9taXNlIHRvIG1hcmsgaXQgYXMgYSB3ZWxsLWhhbmRsZWQgUHJvbWlzZSB0b1xuIFx0XHRcdC8vIGF2b2lkIHRyaWdnZXJpbmcgdW5jYXVnaHQgZXhjZXB0aW9uIHdhcm5pbmcgaW4gQ2hyb21lLlxuIFx0XHRcdC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NjU2NjZcbiBcdFx0XHRQcm9taXNlLnJlc29sdmUoKVxuIFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBob3RBcHBseShob3RBcHBseU9uVXBkYXRlKTtcbiBcdFx0XHRcdH0pXG4gXHRcdFx0XHQudGhlbihcbiBcdFx0XHRcdFx0ZnVuY3Rpb24ocmVzdWx0KSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQpO1xuIFx0XHRcdFx0XHR9LFxuIFx0XHRcdFx0XHRmdW5jdGlvbihlcnIpIHtcbiBcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3QoZXJyKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0KTtcbiBcdFx0fSBlbHNlIHtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4gXHRcdFx0Zm9yICh2YXIgaWQgaW4gaG90VXBkYXRlKSB7XG4gXHRcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHRvTW9kdWxlSWQoaWQpKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcbiBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJyZWFkeVwiKVxuIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcbiBcdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiBcdFx0dmFyIGNiO1xuIFx0XHR2YXIgaTtcbiBcdFx0dmFyIGo7XG4gXHRcdHZhciBtb2R1bGU7XG4gXHRcdHZhciBtb2R1bGVJZDtcblxuIFx0XHRmdW5jdGlvbiBnZXRBZmZlY3RlZFN0dWZmKHVwZGF0ZU1vZHVsZUlkKSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07XG4gXHRcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cbiBcdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKS5tYXAoZnVuY3Rpb24oaWQpIHtcbiBcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdGNoYWluOiBbaWRdLFxuIFx0XHRcdFx0XHRpZDogaWRcbiBcdFx0XHRcdH07XG4gXHRcdFx0fSk7XG4gXHRcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiBcdFx0XHRcdHZhciBxdWV1ZUl0ZW0gPSBxdWV1ZS5wb3AoKTtcbiBcdFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDtcbiBcdFx0XHRcdHZhciBjaGFpbiA9IHF1ZXVlSXRlbS5jaGFpbjtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKCFtb2R1bGUgfHwgbW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkKSBjb250aW51ZTtcbiBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9zZWxmRGVjbGluZWQpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtZGVjbGluZWRcIixcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAobW9kdWxlLmhvdC5fbWFpbikge1xuIFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwidW5hY2NlcHRlZFwiLFxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlLnBhcmVudHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0dmFyIHBhcmVudElkID0gbW9kdWxlLnBhcmVudHNbaV07XG4gXHRcdFx0XHRcdHZhciBwYXJlbnQgPSBpbnN0YWxsZWRNb2R1bGVzW3BhcmVudElkXTtcbiBcdFx0XHRcdFx0aWYgKCFwYXJlbnQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcbiBcdFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG4gXHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcbiBcdFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmIChvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgIT09IC0xKSBjb250aW51ZTtcbiBcdFx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuIFx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxuIFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XG4gXHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcbiBcdFx0XHRcdFx0XHRjb250aW51ZTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XG4gXHRcdFx0XHRcdHF1ZXVlLnB1c2goe1xuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG4gXHRcdFx0XHRcdFx0aWQ6IHBhcmVudElkXG4gXHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cblxuIFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHR0eXBlOiBcImFjY2VwdGVkXCIsXG4gXHRcdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXG4gXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXM6IG91dGRhdGVkTW9kdWxlcyxcbiBcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llc1xuIFx0XHRcdH07XG4gXHRcdH1cblxuIFx0XHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG4gXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHR2YXIgaXRlbSA9IGJbaV07XG4gXHRcdFx0XHRpZiAoYS5pbmRleE9mKGl0ZW0pID09PSAtMSkgYS5wdXNoKGl0ZW0pO1xuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXG4gXHRcdC8vIHRoZSBcIm91dGRhdGVkXCIgc3RhdHVzIGNhbiBwcm9wYWdhdGUgdG8gcGFyZW50cyBpZiB0aGV5IGRvbid0IGFjY2VwdCB0aGUgY2hpbGRyZW5cbiBcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG4gXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0dmFyIGFwcGxpZWRVcGRhdGUgPSB7fTtcblxuIFx0XHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKCkge1xuIFx0XHRcdGNvbnNvbGUud2FybihcbiBcdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgcmVzdWx0Lm1vZHVsZUlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiXG4gXHRcdFx0KTtcbiBcdFx0fTtcblxuIFx0XHRmb3IgKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVJZCA9IHRvTW9kdWxlSWQoaWQpO1xuIFx0XHRcdFx0LyoqIEB0eXBlIHtUT0RPfSAqL1xuIFx0XHRcdFx0dmFyIHJlc3VsdDtcbiBcdFx0XHRcdGlmIChob3RVcGRhdGVbaWRdKSB7XG4gXHRcdFx0XHRcdHJlc3VsdCA9IGdldEFmZmVjdGVkU3R1ZmYobW9kdWxlSWQpO1xuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0cmVzdWx0ID0ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwiZGlzcG9zZWRcIixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogaWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdC8qKiBAdHlwZSB7RXJyb3J8ZmFsc2V9ICovXG4gXHRcdFx0XHR2YXIgYWJvcnRFcnJvciA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvQXBwbHkgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBkb0Rpc3Bvc2UgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBjaGFpbkluZm8gPSBcIlwiO1xuIFx0XHRcdFx0aWYgKHJlc3VsdC5jaGFpbikge1xuIFx0XHRcdFx0XHRjaGFpbkluZm8gPSBcIlxcblVwZGF0ZSBwcm9wYWdhdGlvbjogXCIgKyByZXN1bHQuY2hhaW4uam9pbihcIiAtPiBcIik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRzd2l0Y2ggKHJlc3VsdC50eXBlKSB7XG4gXHRcdFx0XHRcdGNhc2UgXCJzZWxmLWRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2Ygc2VsZiBkZWNsaW5lOiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkZWNsaW5lZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdFwiIGluIFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQucGFyZW50SWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcInVuYWNjZXB0ZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vblVuYWNjZXB0ZWQpIG9wdGlvbnMub25VbmFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZVVuYWNjZXB0ZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBcIiArIG1vZHVsZUlkICsgXCIgaXMgbm90IGFjY2VwdGVkXCIgKyBjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJhY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uQWNjZXB0ZWQpIG9wdGlvbnMub25BY2NlcHRlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvQXBwbHkgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiZGlzcG9zZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRpc3Bvc2VkKSBvcHRpb25zLm9uRGlzcG9zZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRkb0Rpc3Bvc2UgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRkZWZhdWx0OlxuIFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuZXhjZXB0aW9uIHR5cGUgXCIgKyByZXN1bHQudHlwZSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoYWJvcnRFcnJvcikge1xuIFx0XHRcdFx0XHRob3RTZXRTdGF0dXMoXCJhYm9ydFwiKTtcbiBcdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGFib3J0RXJyb3IpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvQXBwbHkpIHtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBob3RVcGRhdGVbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHRcdFx0XHRmb3IgKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdFx0XHRcdGlmIChcbiBcdFx0XHRcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLFxuIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZFxuIFx0XHRcdFx0XHRcdFx0KVxuIFx0XHRcdFx0XHRcdCkge1xuIFx0XHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQoXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSxcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXVxuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChkb0Rpc3Bvc2UpIHtcbiBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCBbcmVzdWx0Lm1vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cbiBcdFx0dmFyIG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRmb3IgKGkgPSAwOyBpIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0bW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbaV07XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gJiZcbiBcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0KVxuIFx0XHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuIFx0XHRcdFx0XHRtb2R1bGU6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRlcnJvckhhbmRsZXI6IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0XHR9KTtcbiBcdFx0fVxuXG4gXHRcdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuIFx0XHRob3RTZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuIFx0XHRPYmplY3Qua2V5cyhob3RBdmFpbGFibGVGaWxlc01hcCkuZm9yRWFjaChmdW5jdGlvbihjaHVua0lkKSB7XG4gXHRcdFx0aWYgKGhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdID09PSBmYWxzZSkge1xuIFx0XHRcdFx0aG90RGlzcG9zZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdH1cbiBcdFx0fSk7XG5cbiBcdFx0dmFyIGlkeDtcbiBcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XG4gXHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gXHRcdFx0bW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTtcbiBcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRpZiAoIW1vZHVsZSkgY29udGludWU7XG5cbiBcdFx0XHR2YXIgZGF0YSA9IHt9O1xuXG4gXHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXG4gXHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcbiBcdFx0XHRmb3IgKGogPSAwOyBqIDwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHRjYiA9IGRpc3Bvc2VIYW5kbGVyc1tqXTtcbiBcdFx0XHRcdGNiKGRhdGEpO1xuIFx0XHRcdH1cbiBcdFx0XHRob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF0gPSBkYXRhO1xuXG4gXHRcdFx0Ly8gZGlzYWJsZSBtb2R1bGUgKHRoaXMgZGlzYWJsZXMgcmVxdWlyZXMgZnJvbSB0aGlzIG1vZHVsZSlcbiBcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xuXG4gXHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXG4gXHRcdFx0ZGVsZXRlIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuXG4gXHRcdFx0Ly8gd2hlbiBkaXNwb3NpbmcgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIGRpc3Bvc2UgaGFuZGxlclxuIFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxuIFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBjaGlsZCA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcbiBcdFx0XHRcdGlmICghY2hpbGQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0aWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkge1xuIFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXG4gXHRcdHZhciBkZXBlbmRlbmN5O1xuIFx0XHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXM7XG4gXHRcdGZvciAobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKVxuIFx0XHRcdCkge1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAobW9kdWxlKSB7XG4gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG4gXHRcdFx0XHRcdFx0aWR4ID0gbW9kdWxlLmNoaWxkcmVuLmluZGV4T2YoZGVwZW5kZW5jeSk7XG4gXHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBOb3QgaW4gXCJhcHBseVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImFwcGx5XCIpO1xuXG4gXHRcdGhvdEN1cnJlbnRIYXNoID0gaG90VXBkYXRlTmV3SGFzaDtcblxuIFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcHBsaWVkVXBkYXRlLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcbiBcdFx0dmFyIGVycm9yID0gbnVsbDtcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldO1xuIFx0XHRcdFx0XHRcdGNiID0gbW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XG4gXHRcdFx0XHRcdFx0aWYgKGNiKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoY2IpICE9PSAtMSkgY29udGludWU7XG4gXHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChjYik7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRjYiA9IGNhbGxiYWNrc1tpXTtcbiBcdFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdFx0Y2IobW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xuIFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV0sXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xuIFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbiBcdFx0XHR0cnkge1xuIFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XG4gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRpZiAodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIpO1xuIFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG4gXHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjI7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcbiBcdFx0aWYgKGVycm9yKSB7XG4gXHRcdFx0aG90U2V0U3RhdHVzKFwiZmFpbFwiKTtcbiBcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuIFx0XHR9XG5cbiBcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiBcdFx0XHRyZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRob3Q6IGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCksXG4gXHRcdFx0cGFyZW50czogKGhvdEN1cnJlbnRQYXJlbnRzVGVtcCA9IGhvdEN1cnJlbnRQYXJlbnRzLCBob3RDdXJyZW50UGFyZW50cyA9IFtdLCBob3RDdXJyZW50UGFyZW50c1RlbXApLFxuIFx0XHRcdGNoaWxkcmVuOiBbXVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gX193ZWJwYWNrX2hhc2hfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5oID0gZnVuY3Rpb24oKSB7IHJldHVybiBob3RDdXJyZW50SGFzaDsgfTtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBob3RDcmVhdGVSZXF1aXJlKFwiLi9zcmMvaW5kZXguanNcIikoX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3NyYy9pbmRleC5qc1wiKTtcbiIsInZhciBlc2NhcGUgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL3VybC9lc2NhcGUuanNcIik7XG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbkBmb250LWZhY2Uge2ZvbnQtZmFtaWx5OiBcXFwiaWNvbmZvbnRcXFwiO1xcbiAgc3JjOiB1cmwoXCIgKyBlc2NhcGUocmVxdWlyZShcIi4vaWNvbmZvbnQuZW90P3Q9MTUzMjU3NzMxNzYyMlwiKSkgKyBcIik7IC8qIElFOSovXFxuICBzcmM6IHVybChcIiArIGVzY2FwZShyZXF1aXJlKFwiLi9pY29uZm9udC5lb3Q/dD0xNTMyNTc3MzE3NjIyXCIpKSArIFwiI2llZml4KSBmb3JtYXQoJ2VtYmVkZGVkLW9wZW50eXBlJyksIFxcbiAgdXJsKCdkYXRhOmFwcGxpY2F0aW9uL3gtZm9udC13b2ZmO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGQwOUdSZ0FCQUFBQUFBV3NBQXNBQUFBQUNFQUFBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCSFUxVkNBQUFCQ0FBQUFETUFBQUJDc1A2ejdVOVRMeklBQUFFOEFBQUFSQUFBQUZaVzdra0JZMjFoY0FBQUFZQUFBQUJsQUFBQm5ORFViK3BuYkhsbUFBQUI2QUFBQWI0QUFBSDh6SEI1VVdobFlXUUFBQU9vQUFBQUx3QUFBRFlTSGhKQWFHaGxZUUFBQTlnQUFBQWNBQUFBSkFmZUE0Vm9iWFI0QUFBRDlBQUFBQkFBQUFBUUQra0FBR3h2WTJFQUFBUUVBQUFBQ2dBQUFBb0JkQURBYldGNGNBQUFCQkFBQUFBZkFBQUFJQUVUQUYxdVlXMWxBQUFFTUFBQUFVVUFBQUp0UGxUK2ZYQnZjM1FBQUFWNEFBQUFNUUFBQUVXTk1IUzllSnhqWUdSZ1lPQmlrR1BRWVdCMGNmTUpZZUJnWUdHQUFKQU1ZMDVtZWlKUURNb0R5ckdBYVE0Z1pvT0lBZ0NLSXdOUEFIaWNZMkJrL3NVNGdZR1ZnWU9waytrTUF3TkRQNFJtZk0xZ3hNakJ3TURFd01yTWdCVUVwTG1tTURnd1ZEd1haVzc0MzhBUXc5ekEwQUFVWmdUSkFRQWxwUXlFZUp6RmtNRU53Q0FJUlQ5aUcyMTZkWXNlbXc3VVUwZHdZOGF3Z0Y2Y3dHK2V3QThSQTRBTkFDdVhFZ0g2UURDOTZwTDdqTVA5aUVmcnBDZG9ySktsdERabEp2S081Rm13bDJuSE10RzYwYk5Pdis5UjJiN3JRTDhvdVdON2xkSUIvMGk3RC9NQUFBQjRuQzJRVFdzVFlSREhuNW50dnNWazB6ejd2cHROOWkzNzFNWXV1TzZtU0UzaUcxMWFQQVE4ZWJCVWNtdlJhdzhWeWFHQ2lBZFBua1VFdjBRUGZwU0tmZ2xCVnArMkRzTi9HT1lITS9NbklpRi9md2puZ2tOMHNrRnVrOGRrUVFoSVk0ZzFEQ0JpWlk1ak1DUFJ0QTFOWUFtTDVDVE9oU25Zc1dSWXhhVE1iRW1XdXFEQkFPNUV4WVRseUtBcVo3Z0RoUlVBdUw3M2xJNzZWUGdJTFljTjNqYjcrQVhNWWRMdnpyYWF2VnR6b3doMTVhUk5xVXZwQjBVU1JRVnhyYXZCUzl0U1JiVWxOVi9Gcm1lZUQyL2lFTm91ODU0ODY0UStmZkd1ZkJXTWJCVmd0UUxkRDdWdjg1N1g0L25hczNUcXl1c2R4ZkU2U1dyQXlhOGJqdDRPc3ArRWgzQWxoN3dveENCYi9NOFpiQS9BTmhQZGtPSnNDdVdrc014UlV1WEFOSkROaEV1UHp5T085WEtBOTdoYlZidncreFB0VTU1QW51UFJZbkdNUjM0S2tQcDQvNnJpbzZvR3FLdGxjNkZScXEwdTVmT1NZM2k4V0hLcytYNk5BOGY1Q2R6L1A4SWhYcENNTjN4eHhtWXdoZjhYR05hbHZiSUdBZGpYQnMraHpJUjhyZDVPVXovRWc3byt3RGhnOGM1ZEswQTVzZkNlbHdxY0p0aGZiOG5PZyt5VUF4dzczWGhvcXkzcXFKdnVtV2k2b2Z2R0dmOERaaUZLMGdBQWVKeGpZR1JnWUFCaTViOU9tdkg4Tmw4WnVGa1lRT0I2ZmJvcWd2Ny9rSVdCV1FMSTVXQmdBb2tDQUFXMUNRa0FlSnhqWUdSZ1lHNzQzOEFRdzhJQUFrQ1NrUUVWc0FBQVJ3b0NiUVFBQUFBRDZRQUFCQUFBQUFRQUFBQUFBQUFBQUhZQXdBRCtBQUI0bkdOZ1pHQmdZR0VJWkdCbEFBRW1JT1lDUWdhRy8yQStBd0FSRWdGeEFIaWNaWTlOVHNNd0VJVmYrZ2VrRXFxb1lJZmtCV0lCS1AwUnEyNVlWR3IzWFhUZnBrNmJLb2tqeDYzVUEzQWVqc0FKT0FMY2dEdndTQ2ViTnBiSDM3eDVZMDhBM09BSEhvN2ZMZmVSUFZ3eU8zSU5GN2dYcmxOL0VHNlFYNFNiYU9OVnVFWDlUZGpITTZiQ2JYUmhlWVBYdUdMMmhIZGhEeDE4Q05kd2pVL2hPdlV2NFFiNVc3aUpPL3dLdDlEeDZzSSs1bDVYdUkxSEwvYkhWaStjWHFubFFjV2h5U0tUT2IrQ21WN3Zrb1d0MHVxY2ExdkVKbE9Eb0Y5SlU1MXBXOTFUN05kRDV5SVZXWk9xQ2FzNlNZektyZG5xMEFVYjUvSlJyeGVKSG9RbTVWaGovcmJHQW81eEJZVWxEb3d4UWhoa2lNcm82RHRWWnZTdnNVUENYbnRXUGMzbmRGc1UxUDl6aFFFQzlNOWNVN3F5MG5rNlQ0RTlYeHRTZFhRcmJzdWVsRFNSWHMxSkVySkNYdGEyVkVMcUFUWmxWNDRSZWx6UmlUOG9aMGovQUFsYWJzZ0FBQUI0bkdOZ1lvQUFMZ2JzZ0lXUmlaR1prWVdSbFlHeGdqTW5Qems3UGkweko0ZTdJRFcvSUNjVnpHWmdBQUI5b3dqcUFBQUEnKSBmb3JtYXQoJ3dvZmYnKSxcXG4gIHVybChcIiArIGVzY2FwZShyZXF1aXJlKFwiLi9pY29uZm9udC50dGY/dD0xNTMyNTc3MzE3NjIyXCIpKSArIFwiKSBmb3JtYXQoJ3RydWV0eXBlJyksIFxcbiAgdXJsKFwiICsgZXNjYXBlKHJlcXVpcmUoXCIuL2ljb25mb250LnN2Zz90PTE1MzI1NzczMTc2MjJcIikpICsgXCIjaWNvbmZvbnQpIGZvcm1hdCgnc3ZnJyk7IC8qIGlPUyA0LjEtICovXFxufVxcblxcbi5pY29uZm9udCB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZm9udC1mYW1pbHk6XFxcImljb25mb250XFxcIiAhaW1wb3J0YW50O1xcbiAgZm9udC1zaXplOjIycHg7XFxuICBmb250LXN0eWxlOm5vcm1hbDtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXG59XFxuXFxuLmljb24tbG9ja19maWxsOmJlZm9yZSB7IGNvbnRlbnQ6IFxcXCJcXFxcRTcwOVxcXCI7IH1cXG5cXG4uaWNvbi1wZW9wbGVfZmlsbDpiZWZvcmUgeyBjb250ZW50OiBcXFwiXFxcXEU3MTVcXFwiOyB9XFxuXFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwidmFyIGVzY2FwZSA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvdXJsL2VzY2FwZS5qc1wiKTtcbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiaHRtbCxib2R5IHtcXHJcXG4gICAgbWFyZ2luOiAwO1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbiAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBtaW4taGVpZ2h0OiA1MDBweDtcXHJcXG4gICAgbWluLXdpZHRoOiA3NzBweDtcXHJcXG59XFxyXFxuZGl2LHAsaGVhZGVyLGltZyxpbnB1dCxmb3JtLGksYnV0dG9uIHtcXHJcXG4gICAgbWFyZ2luOiAwO1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbn1cXHJcXG4jbG9naW4+ZGl2IHtcXHJcXG4gICAgbWF4LXdpZHRoOiA0MDBweDtcXHJcXG4gICAgaGVpZ2h0OiBhdXRvO1xcclxcbiAgICBtaW4taGVpZ2h0OiAzMDBweDtcXHJcXG4gICAgcGFkZGluZzogMzBweDtcXHJcXG4gICAgbWFyZ2luOiA1MHB4IGF1dG8gYXV0bztcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMnB4O1xcclxcbn1cXHJcXG4ubWFpbmxvZ28ge1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgbWF4LWhlaWdodDogMTEwcHg7XFxyXFxuICAgIG1hcmdpbjogMCBhdXRvIDQwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiArIGVzY2FwZShyZXF1aXJlKFwiLi9sb2dvLnN2Z1wiKSkgKyBcIik7XFxyXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcclxcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47XFxyXFxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcXHJcXG4gICAgbWF4LXdpZHRoOiA2MCU7XFxyXFxuICAgIHBhZGRpbmctYm90dG9tOiA1MCU7XFxyXFxufVxcclxcbi5pbnB1dC1ncm91cCB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgZGlzcGxheTogdGFibGU7XFxyXFxuICAgIGJvcmRlci1jb2xsYXBzZTogc2VwYXJhdGU7XFxyXFxuICAgIHdpZHRoOiA4MCU7XFxyXFxuICAgIG1hcmdpbjogMCBhdXRvIDE2cHg7XFxyXFxufVxcclxcbi5pbnB1dC1ncm91cC1hZGRvbiB7XFxyXFxuICAgIGRpc3BsYXk6IHRhYmxlLWNlbGw7XFxyXFxuICAgIHdpZHRoOiAxJTtcXHJcXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXHJcXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcXHJcXG4gICAgY29sb3I6ICMzMzM7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0U1RTdFNztcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI0U1RTdFNztcXHJcXG4gICAgaGVpZ2h0OiAyOHB4O1xcclxcbiAgICBwYWRkaW5nOiA5cHggMTZweDtcXHJcXG4gICAgZm9udC1zaXplOiAxN3B4O1xcclxcbiAgICBsaW5lLWhlaWdodDogMS4zMzMzMzMzO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAycHg7XFxyXFxufVxcclxcbi5pbnB1dC1ncm91cC1hZGRvbjpmaXJzdC1jaGlsZCB7XFxyXFxuICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwO1xcclxcbiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMDtcXHJcXG4gICAgYm9yZGVyLXJpZ2h0OiAwO1xcclxcbn1cXHJcXG4uaW5wdXQtZ3JvdXAgLmZvcm0tY29udHJvbCB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAtMXB4O1xcclxcbiAgICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xcclxcbiAgICBoZWlnaHQ6IDI4cHg7XFxyXFxuICAgIHBhZGRpbmc6IDlweCAxNnB4O1xcclxcbiAgICBmb250LXNpemU6IDE3cHg7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAxLjMzMzMzMzM7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB6LWluZGV4OiAyO1xcclxcbiAgICBmbG9hdDogbGVmdDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDA7XFxyXFxuICAgIGJvcmRlcjogMnB4IHNvbGlkICNFNUU3RTc7XFxyXFxufVxcclxcbi5idG4ge1xcclxcbiAgICBwYWRkaW5nOiA5cHggMTZweDtcXHJcXG4gICAgZm9udC1zaXplOiAxN3B4O1xcclxcbiAgICBsaW5lLWhlaWdodDogMS4zMzMzMzMzO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAwO1xcclxcbiAgICAtd2Via2l0LWJveC1zaGFkb3c6IGluc2V0IDAgLTRweCAwIHJnYmEoMCwwLDAsLjEpO1xcclxcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIC00cHggMCByZ2JhKDAsMCwwLC4xKTtcXHJcXG4gICAgaGVpZ2h0OiA0M3B4O1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzA2YTBlMDtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXHJcXG4gICAgbWFyZ2luOiAwIDQwcHg7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXHJcXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXHJcXG4gICAgd2lkdGg6IDg5JTtcXHJcXG59XFxyXFxuI2NvbnRlbnQsI2xvZ2luLCNsb2FkaW5nIHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGhlaWdodDogMTAwJTtcXHJcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICB0b3A6IDA7XFxyXFxufVxcclxcbiNjb250ZW50IHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzBmMGYwZjtcXHJcXG59XFxyXFxuI2xvYWRpbmcge1xcclxcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBlc2NhcGUocmVxdWlyZShcIi4vbG9hZC5naWZcIikpICsgXCIpO1xcclxcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XFxyXFxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNkZWUxZTI7XFxyXFxufVxcclxcbmhlYWRlciB7XFxyXFxuICAgIHRleHQtaW5kZW50OiAzMHB4O1xcclxcbiAgICB6LWluZGV4OiAxO1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIGNvbG9yOiAjOWFjZmVhO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWI2ZDg1O1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgaGVpZ2h0OiA0MHB4O1xcclxcbiAgICBsaW5lLWhlaWdodDogNDBweDtcXHJcXG59XFxyXFxuI21hcCB7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgbGVmdDogLTIwJTtcXHJcXG59XFxyXFxuI3BpZSB7XFxyXFxuICAgIHBhZGRpbmctdG9wOiA0MHB4O1xcclxcbiAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgIHdpZHRoOiA1MCU7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgcmlnaHQ6IDA7XFxyXFxuICAgIGJhY2tncm91bmQ6IC13ZWJraXQtbGluZWFyLWdyYWRpZW50KGxlZnQsIHJnYmEoMCwwLDAsMC4xKSAsIHJnYmEoMCwwLDAsMSkpOyAvKiBTYWZhcmkgNS4xIC0gNi4wICovXFxyXFxuICAgIGJhY2tncm91bmQ6IC1vLWxpbmVhci1ncmFkaWVudChyaWdodCwgcmdiYSgwLDAsMCwwLjEpICwgcmdiYSgwLDAsMCwxKSk7IC8qIE9wZXJhIDExLjEgLSAxMi4wICovXFxyXFxuICAgIGJhY2tncm91bmQ6IC1tb3otbGluZWFyLWdyYWRpZW50KHJpZ2h0LCByZ2JhKDAsMCwwLDAuMSkgLCByZ2JhKDAsMCwwLDEpKTsgLyogRmlyZWZveCAzLjYgLSAxNSAqL1xcclxcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIHJnYmEoMCwwLDAsMC4xKSAsIHJnYmEoMCwwLDAsMSkpOyAvKiDmoIflh4bnmoTor63ms5UgKi9cXHJcXG59XFxyXFxuXFxyXFxuI3BpZT5kaXYge1xcclxcbiAgICBoZWlnaHQ6IDQwJTtcXHJcXG4gICAgd2lkdGg6IDYwJTtcXHJcXG4gICAgbWFyZ2luOiAyJSBhdXRvO1xcclxcbn1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVzY2FwZSh1cmwpIHtcbiAgICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHVybFxuICAgIH1cbiAgICAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cbiAgICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICAgICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgICB9XG4gICAgLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAgIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gICAgaWYgKC9bXCInKCkgXFx0XFxuXS8udGVzdCh1cmwpKSB7XG4gICAgICAgIHJldHVybiAnXCInICsgdXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJykgKyAnXCInXG4gICAgfVxuXG4gICAgcmV0dXJuIHVybFxufVxuIiwidmFyIHpyVXRpbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3V0aWxcIik7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbnZhciBjb29yZGluYXRlU3lzdGVtQ3JlYXRvcnMgPSB7fTtcblxuZnVuY3Rpb24gQ29vcmRpbmF0ZVN5c3RlbU1hbmFnZXIoKSB7XG4gIHRoaXMuX2Nvb3JkaW5hdGVTeXN0ZW1zID0gW107XG59XG5cbkNvb3JkaW5hdGVTeXN0ZW1NYW5hZ2VyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IENvb3JkaW5hdGVTeXN0ZW1NYW5hZ2VyLFxuICBjcmVhdGU6IGZ1bmN0aW9uIChlY01vZGVsLCBhcGkpIHtcbiAgICB2YXIgY29vcmRpbmF0ZVN5c3RlbXMgPSBbXTtcbiAgICB6clV0aWwuZWFjaChjb29yZGluYXRlU3lzdGVtQ3JlYXRvcnMsIGZ1bmN0aW9uIChjcmVhdGVyLCB0eXBlKSB7XG4gICAgICB2YXIgbGlzdCA9IGNyZWF0ZXIuY3JlYXRlKGVjTW9kZWwsIGFwaSk7XG4gICAgICBjb29yZGluYXRlU3lzdGVtcyA9IGNvb3JkaW5hdGVTeXN0ZW1zLmNvbmNhdChsaXN0IHx8IFtdKTtcbiAgICB9KTtcbiAgICB0aGlzLl9jb29yZGluYXRlU3lzdGVtcyA9IGNvb3JkaW5hdGVTeXN0ZW1zO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIChlY01vZGVsLCBhcGkpIHtcbiAgICB6clV0aWwuZWFjaCh0aGlzLl9jb29yZGluYXRlU3lzdGVtcywgZnVuY3Rpb24gKGNvb3JkU3lzKSB7XG4gICAgICBjb29yZFN5cy51cGRhdGUgJiYgY29vcmRTeXMudXBkYXRlKGVjTW9kZWwsIGFwaSk7XG4gICAgfSk7XG4gIH0sXG4gIGdldENvb3JkaW5hdGVTeXN0ZW1zOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Nvb3JkaW5hdGVTeXN0ZW1zLnNsaWNlKCk7XG4gIH1cbn07XG5cbkNvb3JkaW5hdGVTeXN0ZW1NYW5hZ2VyLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHR5cGUsIGNvb3JkaW5hdGVTeXN0ZW1DcmVhdG9yKSB7XG4gIGNvb3JkaW5hdGVTeXN0ZW1DcmVhdG9yc1t0eXBlXSA9IGNvb3JkaW5hdGVTeXN0ZW1DcmVhdG9yO1xufTtcblxuQ29vcmRpbmF0ZVN5c3RlbU1hbmFnZXIuZ2V0ID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgcmV0dXJuIGNvb3JkaW5hdGVTeXN0ZW1DcmVhdG9yc1t0eXBlXTtcbn07XG5cbnZhciBfZGVmYXVsdCA9IENvb3JkaW5hdGVTeXN0ZW1NYW5hZ2VyO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgenJVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xudmFyIGVjaGFydHNBUElMaXN0ID0gWydnZXREb20nLCAnZ2V0WnInLCAnZ2V0V2lkdGgnLCAnZ2V0SGVpZ2h0JywgJ2dldERldmljZVBpeGVsUmF0aW8nLCAnZGlzcGF0Y2hBY3Rpb24nLCAnaXNEaXNwb3NlZCcsICdvbicsICdvZmYnLCAnZ2V0RGF0YVVSTCcsICdnZXRDb25uZWN0ZWREYXRhVVJMJywgJ2dldE1vZGVsJywgJ2dldE9wdGlvbicsICdnZXRWaWV3T2ZDb21wb25lbnRNb2RlbCcsICdnZXRWaWV3T2ZTZXJpZXNNb2RlbCddOyAvLyBBbmQgYGdldENvb3JkaW5hdGVTeXN0ZW1zYCBhbmQgYGdldENvbXBvbmVudEJ5RWxlbWVudGAgd2lsbCBiZSBpbmplY3RlZCBpbiBlY2hhcnRzLmpzXG5cbmZ1bmN0aW9uIEV4dGVuc2lvbkFQSShjaGFydEluc3RhbmNlKSB7XG4gIHpyVXRpbC5lYWNoKGVjaGFydHNBUElMaXN0LCBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRoaXNbbmFtZV0gPSB6clV0aWwuYmluZChjaGFydEluc3RhbmNlW25hbWVdLCBjaGFydEluc3RhbmNlKTtcbiAgfSwgdGhpcyk7XG59XG5cbnZhciBfZGVmYXVsdCA9IEV4dGVuc2lvbkFQSTtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIGVjaGFydHMgPSByZXF1aXJlKFwiLi4vZWNoYXJ0c1wiKTtcblxudmFyIHpyVXRpbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3V0aWxcIik7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbmZ1bmN0aW9uIF9kZWZhdWx0KHNlcmllc1R5cGUsIGFjdGlvbkluZm9zKSB7XG4gIHpyVXRpbC5lYWNoKGFjdGlvbkluZm9zLCBmdW5jdGlvbiAoYWN0aW9uSW5mbykge1xuICAgIGFjdGlvbkluZm8udXBkYXRlID0gJ3VwZGF0ZVZpZXcnO1xuICAgIC8qKlxuICAgICAqIEBwYXlsb2FkXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IHNlcmllc05hbWVcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gbmFtZVxuICAgICAqL1xuXG4gICAgZWNoYXJ0cy5yZWdpc3RlckFjdGlvbihhY3Rpb25JbmZvLCBmdW5jdGlvbiAocGF5bG9hZCwgZWNNb2RlbCkge1xuICAgICAgdmFyIHNlbGVjdGVkID0ge307XG4gICAgICBlY01vZGVsLmVhY2hDb21wb25lbnQoe1xuICAgICAgICBtYWluVHlwZTogJ3NlcmllcycsXG4gICAgICAgIHN1YlR5cGU6IHNlcmllc1R5cGUsXG4gICAgICAgIHF1ZXJ5OiBwYXlsb2FkXG4gICAgICB9LCBmdW5jdGlvbiAoc2VyaWVzTW9kZWwpIHtcbiAgICAgICAgaWYgKHNlcmllc01vZGVsW2FjdGlvbkluZm8ubWV0aG9kXSkge1xuICAgICAgICAgIHNlcmllc01vZGVsW2FjdGlvbkluZm8ubWV0aG9kXShwYXlsb2FkLm5hbWUsIHBheWxvYWQuZGF0YUluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkYXRhID0gc2VyaWVzTW9kZWwuZ2V0RGF0YSgpOyAvLyBDcmVhdGUgc2VsZWN0ZWQgbWFwXG5cbiAgICAgICAgZGF0YS5lYWNoKGZ1bmN0aW9uIChpZHgpIHtcbiAgICAgICAgICB2YXIgbmFtZSA9IGRhdGEuZ2V0TmFtZShpZHgpO1xuICAgICAgICAgIHNlbGVjdGVkW25hbWVdID0gc2VyaWVzTW9kZWwuaXNTZWxlY3RlZChuYW1lKSB8fCBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IHBheWxvYWQubmFtZSxcbiAgICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkXG4gICAgICB9O1xuICAgIH0pO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgenJVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxudmFyIExpc3QgPSByZXF1aXJlKFwiLi4vLi4vZGF0YS9MaXN0XCIpO1xuXG52YXIgY3JlYXRlRGltZW5zaW9ucyA9IHJlcXVpcmUoXCIuLi8uLi9kYXRhL2hlbHBlci9jcmVhdGVEaW1lbnNpb25zXCIpO1xuXG52YXIgX3NvdXJjZVR5cGUgPSByZXF1aXJlKFwiLi4vLi4vZGF0YS9oZWxwZXIvc291cmNlVHlwZVwiKTtcblxudmFyIFNPVVJDRV9GT1JNQVRfT1JJR0lOQUwgPSBfc291cmNlVHlwZS5TT1VSQ0VfRk9STUFUX09SSUdJTkFMO1xuXG52YXIgX2RpbWVuc2lvbkhlbHBlciA9IHJlcXVpcmUoXCIuLi8uLi9kYXRhL2hlbHBlci9kaW1lbnNpb25IZWxwZXJcIik7XG5cbnZhciBnZXREaW1lbnNpb25UeXBlQnlBeGlzID0gX2RpbWVuc2lvbkhlbHBlci5nZXREaW1lbnNpb25UeXBlQnlBeGlzO1xuXG52YXIgX21vZGVsID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvbW9kZWxcIik7XG5cbnZhciBnZXREYXRhSXRlbVZhbHVlID0gX21vZGVsLmdldERhdGFJdGVtVmFsdWU7XG5cbnZhciBDb29yZGluYXRlU3lzdGVtID0gcmVxdWlyZShcIi4uLy4uL0Nvb3JkaW5hdGVTeXN0ZW1cIik7XG5cbnZhciBfcmVmZXJIZWxwZXIgPSByZXF1aXJlKFwiLi4vLi4vbW9kZWwvcmVmZXJIZWxwZXJcIik7XG5cbnZhciBnZXRDb29yZFN5c0RlZmluZUJ5U2VyaWVzID0gX3JlZmVySGVscGVyLmdldENvb3JkU3lzRGVmaW5lQnlTZXJpZXM7XG5cbnZhciBTb3VyY2UgPSByZXF1aXJlKFwiLi4vLi4vZGF0YS9Tb3VyY2VcIik7XG5cbnZhciBfZGF0YVN0YWNrSGVscGVyID0gcmVxdWlyZShcIi4uLy4uL2RhdGEvaGVscGVyL2RhdGFTdGFja0hlbHBlclwiKTtcblxudmFyIGVuYWJsZURhdGFTdGFjayA9IF9kYXRhU3RhY2tIZWxwZXIuZW5hYmxlRGF0YVN0YWNrO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbi8qKlxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9kYXRhL1NvdXJjZXxBcnJheX0gc291cmNlIE9yIHJhdyBkYXRhLlxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9TZXJpZXN9IHNlcmllc01vZGVsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdF1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0LmdlbmVyYXRlQ29vcmRdXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUxpc3RGcm9tQXJyYXkoc291cmNlLCBzZXJpZXNNb2RlbCwgb3B0KSB7XG4gIG9wdCA9IG9wdCB8fCB7fTtcblxuICBpZiAoIVNvdXJjZS5pc0luc3RhbmNlKHNvdXJjZSkpIHtcbiAgICBzb3VyY2UgPSBTb3VyY2Uuc2VyaWVzRGF0YVRvU291cmNlKHNvdXJjZSk7XG4gIH1cblxuICB2YXIgY29vcmRTeXNOYW1lID0gc2VyaWVzTW9kZWwuZ2V0KCdjb29yZGluYXRlU3lzdGVtJyk7XG4gIHZhciByZWdpc3RlcmVkQ29vcmRTeXMgPSBDb29yZGluYXRlU3lzdGVtLmdldChjb29yZFN5c05hbWUpO1xuICB2YXIgY29vcmRTeXNEZWZpbmUgPSBnZXRDb29yZFN5c0RlZmluZUJ5U2VyaWVzKHNlcmllc01vZGVsKTtcbiAgdmFyIGNvb3JkU3lzRGltRGVmcztcblxuICBpZiAoY29vcmRTeXNEZWZpbmUpIHtcbiAgICBjb29yZFN5c0RpbURlZnMgPSB6clV0aWwubWFwKGNvb3JkU3lzRGVmaW5lLmNvb3JkU3lzRGltcywgZnVuY3Rpb24gKGRpbSkge1xuICAgICAgdmFyIGRpbUluZm8gPSB7XG4gICAgICAgIG5hbWU6IGRpbVxuICAgICAgfTtcbiAgICAgIHZhciBheGlzTW9kZWwgPSBjb29yZFN5c0RlZmluZS5heGlzTWFwLmdldChkaW0pO1xuXG4gICAgICBpZiAoYXhpc01vZGVsKSB7XG4gICAgICAgIHZhciBheGlzVHlwZSA9IGF4aXNNb2RlbC5nZXQoJ3R5cGUnKTtcbiAgICAgICAgZGltSW5mby50eXBlID0gZ2V0RGltZW5zaW9uVHlwZUJ5QXhpcyhheGlzVHlwZSk7IC8vIGRpbUluZm8uc3RhY2thYmxlID0gaXNTdGFja2FibGUoYXhpc1R5cGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGltSW5mbztcbiAgICB9KTtcbiAgfVxuXG4gIGlmICghY29vcmRTeXNEaW1EZWZzKSB7XG4gICAgLy8gR2V0IGRpbWVuc2lvbnMgZnJvbSByZWdpc3RlcmVkIGNvb3JkaW5hdGUgc3lzdGVtXG4gICAgY29vcmRTeXNEaW1EZWZzID0gcmVnaXN0ZXJlZENvb3JkU3lzICYmIChyZWdpc3RlcmVkQ29vcmRTeXMuZ2V0RGltZW5zaW9uc0luZm8gPyByZWdpc3RlcmVkQ29vcmRTeXMuZ2V0RGltZW5zaW9uc0luZm8oKSA6IHJlZ2lzdGVyZWRDb29yZFN5cy5kaW1lbnNpb25zLnNsaWNlKCkpIHx8IFsneCcsICd5J107XG4gIH1cblxuICB2YXIgZGltSW5mb0xpc3QgPSBjcmVhdGVEaW1lbnNpb25zKHNvdXJjZSwge1xuICAgIGNvb3JkRGltZW5zaW9uczogY29vcmRTeXNEaW1EZWZzLFxuICAgIGdlbmVyYXRlQ29vcmQ6IG9wdC5nZW5lcmF0ZUNvb3JkXG4gIH0pO1xuICB2YXIgZmlyc3RDYXRlZ29yeURpbUluZGV4O1xuICB2YXIgaGFzTmFtZUVuY29kZTtcbiAgY29vcmRTeXNEZWZpbmUgJiYgenJVdGlsLmVhY2goZGltSW5mb0xpc3QsIGZ1bmN0aW9uIChkaW1JbmZvLCBkaW1JbmRleCkge1xuICAgIHZhciBjb29yZERpbSA9IGRpbUluZm8uY29vcmREaW07XG4gICAgdmFyIGNhdGVnb3J5QXhpc01vZGVsID0gY29vcmRTeXNEZWZpbmUuY2F0ZWdvcnlBeGlzTWFwLmdldChjb29yZERpbSk7XG5cbiAgICBpZiAoY2F0ZWdvcnlBeGlzTW9kZWwpIHtcbiAgICAgIGlmIChmaXJzdENhdGVnb3J5RGltSW5kZXggPT0gbnVsbCkge1xuICAgICAgICBmaXJzdENhdGVnb3J5RGltSW5kZXggPSBkaW1JbmRleDtcbiAgICAgIH1cblxuICAgICAgZGltSW5mby5vcmRpbmFsTWV0YSA9IGNhdGVnb3J5QXhpc01vZGVsLmdldE9yZGluYWxNZXRhKCk7XG4gICAgfVxuXG4gICAgaWYgKGRpbUluZm8ub3RoZXJEaW1zLml0ZW1OYW1lICE9IG51bGwpIHtcbiAgICAgIGhhc05hbWVFbmNvZGUgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKCFoYXNOYW1lRW5jb2RlICYmIGZpcnN0Q2F0ZWdvcnlEaW1JbmRleCAhPSBudWxsKSB7XG4gICAgZGltSW5mb0xpc3RbZmlyc3RDYXRlZ29yeURpbUluZGV4XS5vdGhlckRpbXMuaXRlbU5hbWUgPSAwO1xuICB9XG5cbiAgdmFyIHN0YWNrQ2FsY3VsYXRpb25JbmZvID0gZW5hYmxlRGF0YVN0YWNrKHNlcmllc01vZGVsLCBkaW1JbmZvTGlzdCk7XG4gIHZhciBsaXN0ID0gbmV3IExpc3QoZGltSW5mb0xpc3QsIHNlcmllc01vZGVsKTtcbiAgbGlzdC5zZXRDYWxjdWxhdGlvbkluZm8oc3RhY2tDYWxjdWxhdGlvbkluZm8pO1xuICB2YXIgZGltVmFsdWVHZXR0ZXIgPSBmaXJzdENhdGVnb3J5RGltSW5kZXggIT0gbnVsbCAmJiBpc05lZWRDb21wbGV0ZU9yZGluYWxEYXRhKHNvdXJjZSkgPyBmdW5jdGlvbiAoaXRlbU9wdCwgZGltTmFtZSwgZGF0YUluZGV4LCBkaW1JbmRleCkge1xuICAgIC8vIFVzZSBkYXRhSW5kZXggYXMgb3JkaW5hbCB2YWx1ZSBpbiBjYXRlZ29yeUF4aXNcbiAgICByZXR1cm4gZGltSW5kZXggPT09IGZpcnN0Q2F0ZWdvcnlEaW1JbmRleCA/IGRhdGFJbmRleCA6IHRoaXMuZGVmYXVsdERpbVZhbHVlR2V0dGVyKGl0ZW1PcHQsIGRpbU5hbWUsIGRhdGFJbmRleCwgZGltSW5kZXgpO1xuICB9IDogbnVsbDtcbiAgbGlzdC5oYXNJdGVtT3B0aW9uID0gZmFsc2U7XG4gIGxpc3QuaW5pdERhdGEoc291cmNlLCBudWxsLCBkaW1WYWx1ZUdldHRlcik7XG4gIHJldHVybiBsaXN0O1xufVxuXG5mdW5jdGlvbiBpc05lZWRDb21wbGV0ZU9yZGluYWxEYXRhKHNvdXJjZSkge1xuICBpZiAoc291cmNlLnNvdXJjZUZvcm1hdCA9PT0gU09VUkNFX0ZPUk1BVF9PUklHSU5BTCkge1xuICAgIHZhciBzYW1wbGVJdGVtID0gZmlyc3REYXRhTm90TnVsbChzb3VyY2UuZGF0YSB8fCBbXSk7XG4gICAgcmV0dXJuIHNhbXBsZUl0ZW0gIT0gbnVsbCAmJiAhenJVdGlsLmlzQXJyYXkoZ2V0RGF0YUl0ZW1WYWx1ZShzYW1wbGVJdGVtKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmlyc3REYXRhTm90TnVsbChkYXRhKSB7XG4gIHZhciBpID0gMDtcblxuICB3aGlsZSAoaSA8IGRhdGEubGVuZ3RoICYmIGRhdGFbaV0gPT0gbnVsbCkge1xuICAgIGkrKztcbiAgfVxuXG4gIHJldHVybiBkYXRhW2ldO1xufVxuXG52YXIgX2RlZmF1bHQgPSBjcmVhdGVMaXN0RnJvbUFycmF5O1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgY3JlYXRlRGltZW5zaW9ucyA9IHJlcXVpcmUoXCIuLi8uLi9kYXRhL2hlbHBlci9jcmVhdGVEaW1lbnNpb25zXCIpO1xuXG52YXIgTGlzdCA9IHJlcXVpcmUoXCIuLi8uLi9kYXRhL0xpc3RcIik7XG5cbnZhciBfdXRpbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3V0aWxcIik7XG5cbnZhciBleHRlbmQgPSBfdXRpbC5leHRlbmQ7XG52YXIgaXNBcnJheSA9IF91dGlsLmlzQXJyYXk7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuLyoqXG4gKiBbVXNhZ2VdOlxuICogKDEpXG4gKiBjcmVhdGVMaXN0U2ltcGx5KHNlcmllc01vZGVsLCBbJ3ZhbHVlJ10pO1xuICogKDIpXG4gKiBjcmVhdGVMaXN0U2ltcGx5KHNlcmllc01vZGVsLCB7XG4gKiAgICAgY29vcmREaW1lbnNpb25zOiBbJ3ZhbHVlJ10sXG4gKiAgICAgZGltZW5zaW9uc0NvdW50OiA1XG4gKiB9KTtcbiAqXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL21vZGVsL1Nlcmllc30gc2VyaWVzTW9kZWxcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5LjxzdHJpbmd8T2JqZWN0Pn0gb3B0IG9wdCBvciBjb29yZERpbWVuc2lvbnNcbiAqICAgICAgICBUaGUgb3B0aW9ucyBpbiBvcHQsIHNlZSBgZWNoYXJ0cy9kYXRhL2hlbHBlci9jcmVhdGVEaW1lbnNpb25zYFxuICogQHBhcmFtIHtBcnJheS48c3RyaW5nPn0gW25hbWVMaXN0XVxuICogQHJldHVybiB7bW9kdWxlOmVjaGFydHMvZGF0YS9MaXN0fVxuICovXG5mdW5jdGlvbiBfZGVmYXVsdChzZXJpZXNNb2RlbCwgb3B0LCBuYW1lTGlzdCkge1xuICBvcHQgPSBpc0FycmF5KG9wdCkgJiYge1xuICAgIGNvb3JkRGltZW5zaW9uczogb3B0XG4gIH0gfHwgZXh0ZW5kKHt9LCBvcHQpO1xuICB2YXIgc291cmNlID0gc2VyaWVzTW9kZWwuZ2V0U291cmNlKCk7XG4gIHZhciBkaW1lbnNpb25zSW5mbyA9IGNyZWF0ZURpbWVuc2lvbnMoc291cmNlLCBvcHQpO1xuICB2YXIgbGlzdCA9IG5ldyBMaXN0KGRpbWVuc2lvbnNJbmZvLCBzZXJpZXNNb2RlbCk7XG4gIGxpc3QuaW5pdERhdGEoc291cmNlLCBuYW1lTGlzdCk7XG4gIHJldHVybiBsaXN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBfbW9kZWwgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9tb2RlbFwiKTtcblxudmFyIG1ha2VJbm5lciA9IF9tb2RlbC5tYWtlSW5uZXI7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IElmIGxhcmdlIG1vZGUgY2hhbmdlZCwgcmV0dXJuIHN0cmluZyAncmVzZXQnO1xuICovXG5mdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgdmFyIGlubmVyID0gbWFrZUlubmVyKCk7XG4gIHJldHVybiBmdW5jdGlvbiAoc2VyaWVzTW9kZWwpIHtcbiAgICB2YXIgZmllbGRzID0gaW5uZXIoc2VyaWVzTW9kZWwpO1xuICAgIHZhciBwaXBlbGluZUNvbnRleHQgPSBzZXJpZXNNb2RlbC5waXBlbGluZUNvbnRleHQ7XG4gICAgdmFyIG9yaWdpbmFsTGFyZ2UgPSBmaWVsZHMubGFyZ2U7XG4gICAgdmFyIG9yaWdpbmFsUHJvZ3Jlc3NpdmUgPSBmaWVsZHMucHJvZ3Jlc3NpdmVSZW5kZXI7XG4gICAgdmFyIGxhcmdlID0gZmllbGRzLmxhcmdlID0gcGlwZWxpbmVDb250ZXh0LmxhcmdlO1xuICAgIHZhciBwcm9ncmVzc2l2ZSA9IGZpZWxkcy5wcm9ncmVzc2l2ZVJlbmRlciA9IHBpcGVsaW5lQ29udGV4dC5wcm9ncmVzc2l2ZVJlbmRlcjtcbiAgICByZXR1cm4gISEob3JpZ2luYWxMYXJnZSBeIGxhcmdlIHx8IG9yaWdpbmFsUHJvZ3Jlc3NpdmUgXiBwcm9ncmVzc2l2ZSkgJiYgJ3Jlc2V0JztcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgZWNoYXJ0cyA9IHJlcXVpcmUoXCIuLi9lY2hhcnRzXCIpO1xuXG52YXIgenJVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxucmVxdWlyZShcIi4vcGllL1BpZVNlcmllc1wiKTtcblxucmVxdWlyZShcIi4vcGllL1BpZVZpZXdcIik7XG5cbnZhciBjcmVhdGVEYXRhU2VsZWN0QWN0aW9uID0gcmVxdWlyZShcIi4uL2FjdGlvbi9jcmVhdGVEYXRhU2VsZWN0QWN0aW9uXCIpO1xuXG52YXIgZGF0YUNvbG9yID0gcmVxdWlyZShcIi4uL3Zpc3VhbC9kYXRhQ29sb3JcIik7XG5cbnZhciBwaWVMYXlvdXQgPSByZXF1aXJlKFwiLi9waWUvcGllTGF5b3V0XCIpO1xuXG52YXIgZGF0YUZpbHRlciA9IHJlcXVpcmUoXCIuLi9wcm9jZXNzb3IvZGF0YUZpbHRlclwiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuY3JlYXRlRGF0YVNlbGVjdEFjdGlvbigncGllJywgW3tcbiAgdHlwZTogJ3BpZVRvZ2dsZVNlbGVjdCcsXG4gIGV2ZW50OiAncGllc2VsZWN0Y2hhbmdlZCcsXG4gIG1ldGhvZDogJ3RvZ2dsZVNlbGVjdGVkJ1xufSwge1xuICB0eXBlOiAncGllU2VsZWN0JyxcbiAgZXZlbnQ6ICdwaWVzZWxlY3RlZCcsXG4gIG1ldGhvZDogJ3NlbGVjdCdcbn0sIHtcbiAgdHlwZTogJ3BpZVVuU2VsZWN0JyxcbiAgZXZlbnQ6ICdwaWV1bnNlbGVjdGVkJyxcbiAgbWV0aG9kOiAndW5TZWxlY3QnXG59XSk7XG5lY2hhcnRzLnJlZ2lzdGVyVmlzdWFsKGRhdGFDb2xvcigncGllJykpO1xuZWNoYXJ0cy5yZWdpc3RlckxheW91dCh6clV0aWwuY3VycnkocGllTGF5b3V0LCAncGllJykpO1xuZWNoYXJ0cy5yZWdpc3RlclByb2Nlc3NvcihkYXRhRmlsdGVyKCdwaWUnKSk7IiwidmFyIGVjaGFydHMgPSByZXF1aXJlKFwiLi4vLi4vZWNoYXJ0c1wiKTtcblxudmFyIGNyZWF0ZUxpc3RTaW1wbHkgPSByZXF1aXJlKFwiLi4vaGVscGVyL2NyZWF0ZUxpc3RTaW1wbHlcIik7XG5cbnZhciB6clV0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgbW9kZWxVdGlsID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvbW9kZWxcIik7XG5cbnZhciBfbnVtYmVyID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvbnVtYmVyXCIpO1xuXG52YXIgZ2V0UGVyY2VudFdpdGhQcmVjaXNpb24gPSBfbnVtYmVyLmdldFBlcmNlbnRXaXRoUHJlY2lzaW9uO1xuXG52YXIgZGF0YVNlbGVjdGFibGVNaXhpbiA9IHJlcXVpcmUoXCIuLi8uLi9jb21wb25lbnQvaGVscGVyL3NlbGVjdGFibGVNaXhpblwiKTtcblxudmFyIF9kYXRhUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vLi4vZGF0YS9oZWxwZXIvZGF0YVByb3ZpZGVyXCIpO1xuXG52YXIgcmV0cmlldmVSYXdBdHRyID0gX2RhdGFQcm92aWRlci5yZXRyaWV2ZVJhd0F0dHI7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbnZhciBQaWVTZXJpZXMgPSBlY2hhcnRzLmV4dGVuZFNlcmllc01vZGVsKHtcbiAgdHlwZTogJ3Nlcmllcy5waWUnLFxuICAvLyBPdmVyd3JpdGVcbiAgaW5pdDogZnVuY3Rpb24gKG9wdGlvbikge1xuICAgIFBpZVNlcmllcy5zdXBlckFwcGx5KHRoaXMsICdpbml0JywgYXJndW1lbnRzKTsgLy8gRW5hYmxlIGxlZ2VuZCBzZWxlY3Rpb24gZm9yIGVhY2ggZGF0YSBpdGVtXG4gICAgLy8gVXNlIGEgZnVuY3Rpb24gaW5zdGVhZCBvZiBkaXJlY3QgYWNjZXNzIGJlY2F1c2UgZGF0YSByZWZlcmVuY2UgbWF5IGNoYW5nZWRcblxuICAgIHRoaXMubGVnZW5kRGF0YVByb3ZpZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0UmF3RGF0YSgpO1xuICAgIH07XG5cbiAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkTWFwKHRoaXMuX2NyZWF0ZVNlbGVjdGFibGVMaXN0KCkpO1xuXG4gICAgdGhpcy5fZGVmYXVsdExhYmVsTGluZShvcHRpb24pO1xuICB9LFxuICAvLyBPdmVyd3JpdGVcbiAgbWVyZ2VPcHRpb246IGZ1bmN0aW9uIChuZXdPcHRpb24pIHtcbiAgICBQaWVTZXJpZXMuc3VwZXJDYWxsKHRoaXMsICdtZXJnZU9wdGlvbicsIG5ld09wdGlvbik7XG4gICAgdGhpcy51cGRhdGVTZWxlY3RlZE1hcCh0aGlzLl9jcmVhdGVTZWxlY3RhYmxlTGlzdCgpKTtcbiAgfSxcbiAgZ2V0SW5pdGlhbERhdGE6IGZ1bmN0aW9uIChvcHRpb24sIGVjTW9kZWwpIHtcbiAgICByZXR1cm4gY3JlYXRlTGlzdFNpbXBseSh0aGlzLCBbJ3ZhbHVlJ10pO1xuICB9LFxuICBfY3JlYXRlU2VsZWN0YWJsZUxpc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGF0YSA9IHRoaXMuZ2V0UmF3RGF0YSgpO1xuICAgIHZhciB2YWx1ZURpbSA9IGRhdGEubWFwRGltZW5zaW9uKCd2YWx1ZScpO1xuICAgIHZhciB0YXJnZXRMaXN0ID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZGF0YS5jb3VudCgpOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHRhcmdldExpc3QucHVzaCh7XG4gICAgICAgIG5hbWU6IGRhdGEuZ2V0TmFtZShpKSxcbiAgICAgICAgdmFsdWU6IGRhdGEuZ2V0KHZhbHVlRGltLCBpKSxcbiAgICAgICAgc2VsZWN0ZWQ6IHJldHJpZXZlUmF3QXR0cihkYXRhLCBpLCAnc2VsZWN0ZWQnKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldExpc3Q7XG4gIH0sXG4gIC8vIE92ZXJ3cml0ZVxuICBnZXREYXRhUGFyYW1zOiBmdW5jdGlvbiAoZGF0YUluZGV4KSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLmdldERhdGEoKTtcbiAgICB2YXIgcGFyYW1zID0gUGllU2VyaWVzLnN1cGVyQ2FsbCh0aGlzLCAnZ2V0RGF0YVBhcmFtcycsIGRhdGFJbmRleCk7IC8vIEZJWE1FIHRvRml4ZWQ/XG5cbiAgICB2YXIgdmFsdWVMaXN0ID0gW107XG4gICAgZGF0YS5lYWNoKGRhdGEubWFwRGltZW5zaW9uKCd2YWx1ZScpLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhbHVlTGlzdC5wdXNoKHZhbHVlKTtcbiAgICB9KTtcbiAgICBwYXJhbXMucGVyY2VudCA9IGdldFBlcmNlbnRXaXRoUHJlY2lzaW9uKHZhbHVlTGlzdCwgZGF0YUluZGV4LCBkYXRhLmhvc3RNb2RlbC5nZXQoJ3BlcmNlbnRQcmVjaXNpb24nKSk7XG4gICAgcGFyYW1zLiR2YXJzLnB1c2goJ3BlcmNlbnQnKTtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9LFxuICBfZGVmYXVsdExhYmVsTGluZTogZnVuY3Rpb24gKG9wdGlvbikge1xuICAgIC8vIEV4dGVuZCBsYWJlbExpbmUgZW1waGFzaXNcbiAgICBtb2RlbFV0aWwuZGVmYXVsdEVtcGhhc2lzKG9wdGlvbiwgJ2xhYmVsTGluZScsIFsnc2hvdyddKTtcbiAgICB2YXIgbGFiZWxMaW5lTm9ybWFsT3B0ID0gb3B0aW9uLmxhYmVsTGluZTtcbiAgICB2YXIgbGFiZWxMaW5lRW1waGFzaXNPcHQgPSBvcHRpb24uZW1waGFzaXMubGFiZWxMaW5lOyAvLyBOb3Qgc2hvdyBsYWJlbCBsaW5lIGlmIGBsYWJlbC5ub3JtYWwuc2hvdyA9IGZhbHNlYFxuXG4gICAgbGFiZWxMaW5lTm9ybWFsT3B0LnNob3cgPSBsYWJlbExpbmVOb3JtYWxPcHQuc2hvdyAmJiBvcHRpb24ubGFiZWwuc2hvdztcbiAgICBsYWJlbExpbmVFbXBoYXNpc09wdC5zaG93ID0gbGFiZWxMaW5lRW1waGFzaXNPcHQuc2hvdyAmJiBvcHRpb24uZW1waGFzaXMubGFiZWwuc2hvdztcbiAgfSxcbiAgZGVmYXVsdE9wdGlvbjoge1xuICAgIHpsZXZlbDogMCxcbiAgICB6OiAyLFxuICAgIGxlZ2VuZEhvdmVyTGluazogdHJ1ZSxcbiAgICBob3ZlckFuaW1hdGlvbjogdHJ1ZSxcbiAgICAvLyDpu5jorqTlhajlsYDlsYXkuK1cbiAgICBjZW50ZXI6IFsnNTAlJywgJzUwJSddLFxuICAgIHJhZGl1czogWzAsICc3NSUnXSxcbiAgICAvLyDpu5jorqTpobrml7bpkohcbiAgICBjbG9ja3dpc2U6IHRydWUsXG4gICAgc3RhcnRBbmdsZTogOTAsXG4gICAgLy8g5pyA5bCP6KeS5bqm5pS55Li6MFxuICAgIG1pbkFuZ2xlOiAwLFxuICAgIC8vIOmAieS4reaXtuaJh+WMuuWBj+enu+mHj1xuICAgIHNlbGVjdGVkT2Zmc2V0OiAxMCxcbiAgICAvLyDpq5jkuq7miYfljLrlgY/np7vph49cbiAgICBob3Zlck9mZnNldDogMTAsXG4gICAgLy8gSWYgdXNlIHN0cmF0ZWd5IHRvIGF2b2lkIGxhYmVsIG92ZXJsYXBwaW5nXG4gICAgYXZvaWRMYWJlbE92ZXJsYXA6IHRydWUsXG4gICAgLy8g6YCJ5oup5qih5byP77yM6buY6K6k5YWz6Zet77yM5Y+v6YCJc2luZ2xl77yMbXVsdGlwbGVcbiAgICAvLyBzZWxlY3RlZE1vZGU6IGZhbHNlLFxuICAgIC8vIOWNl+S4geagvOWwlOeOq+eRsOWbvuaooeW8j++8jCdyYWRpdXMn77yI5Y2K5b6E77yJIHwgJ2FyZWEn77yI6Z2i56ev77yJXG4gICAgLy8gcm9zZVR5cGU6IG51bGwsXG4gICAgcGVyY2VudFByZWNpc2lvbjogMixcbiAgICAvLyBJZiBzdGlsbCBzaG93IHdoZW4gYWxsIGRhdGEgemVyby5cbiAgICBzdGlsbFNob3daZXJvU3VtOiB0cnVlLFxuICAgIC8vIGN1cnNvcjogbnVsbCxcbiAgICBsYWJlbDoge1xuICAgICAgLy8gSWYgcm90YXRlIGFyb3VuZCBjaXJjbGVcbiAgICAgIHJvdGF0ZTogZmFsc2UsXG4gICAgICBzaG93OiB0cnVlLFxuICAgICAgLy8gJ291dGVyJywgJ2luc2lkZScsICdjZW50ZXInXG4gICAgICBwb3NpdGlvbjogJ291dGVyJyAvLyBmb3JtYXR0ZXI6IOagh+etvuaWh+acrOagvOW8j+WZqO+8jOWQjFRvb2x0aXAuZm9ybWF0dGVy77yM5LiN5pSv5oyB5byC5q2l5Zue6LCDXG4gICAgICAvLyDpu5jorqTkvb/nlKjlhajlsYDmlofmnKzmoLflvI/vvIzor6bop4FURVhUU1RZTEVcbiAgICAgIC8vIGRpc3RhbmNlOiDlvZNwb3NpdGlvbuS4umlubmVy5pe25pyJ5pWI77yM5Li6bGFiZWzkvY3nva7liLDlnIblv4PnmoTot53nprvkuI7lnIbljYrlvoQo546v54q25Zu+5Li65YaF5aSW5Y2K5b6E5ZKMKeeahOavlOS+i+ezu+aVsFxuXG4gICAgfSxcbiAgICAvLyBFbmFibGVkIHdoZW4gbGFiZWwubm9ybWFsLnBvc2l0aW9uIGlzICdvdXRlcidcbiAgICBsYWJlbExpbmU6IHtcbiAgICAgIHNob3c6IHRydWUsXG4gICAgICAvLyDlvJXlr7znur/kuKTmrrXkuK3nmoTnrKzkuIDmrrXplb/luqZcbiAgICAgIGxlbmd0aDogMTUsXG4gICAgICAvLyDlvJXlr7znur/kuKTmrrXkuK3nmoTnrKzkuozmrrXplb/luqZcbiAgICAgIGxlbmd0aDI6IDE1LFxuICAgICAgc21vb3RoOiBmYWxzZSxcbiAgICAgIGxpbmVTdHlsZToge1xuICAgICAgICAvLyBjb2xvcjog5ZCE5byCLFxuICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgdHlwZTogJ3NvbGlkJ1xuICAgICAgfVxuICAgIH0sXG4gICAgaXRlbVN0eWxlOiB7XG4gICAgICBib3JkZXJXaWR0aDogMVxuICAgIH0sXG4gICAgLy8gQW5pbWF0aW9uIHR5cGUgY2FuYmUgZXhwYW5zaW9uLCBzY2FsZVxuICAgIGFuaW1hdGlvblR5cGU6ICdleHBhbnNpb24nLFxuICAgIGFuaW1hdGlvbkVhc2luZzogJ2N1YmljT3V0J1xuICB9XG59KTtcbnpyVXRpbC5taXhpbihQaWVTZXJpZXMsIGRhdGFTZWxlY3RhYmxlTWl4aW4pO1xudmFyIF9kZWZhdWx0ID0gUGllU2VyaWVzO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgenJVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxudmFyIGdyYXBoaWMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9ncmFwaGljXCIpO1xuXG52YXIgQ2hhcnRWaWV3ID0gcmVxdWlyZShcIi4uLy4uL3ZpZXcvQ2hhcnRcIik7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuLyoqXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL21vZGVsL1Nlcmllc30gc2VyaWVzTW9kZWxcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFzQW5pbWF0aW9uXG4gKiBAaW5uZXJcbiAqL1xuZnVuY3Rpb24gdXBkYXRlRGF0YVNlbGVjdGVkKHVpZCwgc2VyaWVzTW9kZWwsIGhhc0FuaW1hdGlvbiwgYXBpKSB7XG4gIHZhciBkYXRhID0gc2VyaWVzTW9kZWwuZ2V0RGF0YSgpO1xuICB2YXIgZGF0YUluZGV4ID0gdGhpcy5kYXRhSW5kZXg7XG4gIHZhciBuYW1lID0gZGF0YS5nZXROYW1lKGRhdGFJbmRleCk7XG4gIHZhciBzZWxlY3RlZE9mZnNldCA9IHNlcmllc01vZGVsLmdldCgnc2VsZWN0ZWRPZmZzZXQnKTtcbiAgYXBpLmRpc3BhdGNoQWN0aW9uKHtcbiAgICB0eXBlOiAncGllVG9nZ2xlU2VsZWN0JyxcbiAgICBmcm9tOiB1aWQsXG4gICAgbmFtZTogbmFtZSxcbiAgICBzZXJpZXNJZDogc2VyaWVzTW9kZWwuaWRcbiAgfSk7XG4gIGRhdGEuZWFjaChmdW5jdGlvbiAoaWR4KSB7XG4gICAgdG9nZ2xlSXRlbVNlbGVjdGVkKGRhdGEuZ2V0SXRlbUdyYXBoaWNFbChpZHgpLCBkYXRhLmdldEl0ZW1MYXlvdXQoaWR4KSwgc2VyaWVzTW9kZWwuaXNTZWxlY3RlZChkYXRhLmdldE5hbWUoaWR4KSksIHNlbGVjdGVkT2Zmc2V0LCBoYXNBbmltYXRpb24pO1xuICB9KTtcbn1cbi8qKlxuICogQHBhcmFtIHttb2R1bGU6enJlbmRlci9ncmFwaGljL1NlY3Rvcn0gZWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBsYXlvdXRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTZWxlY3RlZFxuICogQHBhcmFtIHtudW1iZXJ9IHNlbGVjdGVkT2Zmc2V0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGhhc0FuaW1hdGlvblxuICogQGlubmVyXG4gKi9cblxuXG5mdW5jdGlvbiB0b2dnbGVJdGVtU2VsZWN0ZWQoZWwsIGxheW91dCwgaXNTZWxlY3RlZCwgc2VsZWN0ZWRPZmZzZXQsIGhhc0FuaW1hdGlvbikge1xuICB2YXIgbWlkQW5nbGUgPSAobGF5b3V0LnN0YXJ0QW5nbGUgKyBsYXlvdXQuZW5kQW5nbGUpIC8gMjtcbiAgdmFyIGR4ID0gTWF0aC5jb3MobWlkQW5nbGUpO1xuICB2YXIgZHkgPSBNYXRoLnNpbihtaWRBbmdsZSk7XG4gIHZhciBvZmZzZXQgPSBpc1NlbGVjdGVkID8gc2VsZWN0ZWRPZmZzZXQgOiAwO1xuICB2YXIgcG9zaXRpb24gPSBbZHggKiBvZmZzZXQsIGR5ICogb2Zmc2V0XTtcbiAgaGFzQW5pbWF0aW9uIC8vIGFuaW1hdGVUbyB3aWxsIHN0b3AgcmV2aW91cyBhbmltYXRpb24gbGlrZSB1cGRhdGUgdHJhbnNpdGlvblxuICA/IGVsLmFuaW1hdGUoKS53aGVuKDIwMCwge1xuICAgIHBvc2l0aW9uOiBwb3NpdGlvblxuICB9KS5zdGFydCgnYm91bmNlT3V0JykgOiBlbC5hdHRyKCdwb3NpdGlvbicsIHBvc2l0aW9uKTtcbn1cbi8qKlxuICogUGllY2Ugb2YgcGllIGluY2x1ZGluZyBTZWN0b3IsIExhYmVsLCBMYWJlbExpbmVcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMge21vZHVsZTp6cmVuZGVyL2dyYXBoaWMvR3JvdXB9XG4gKi9cblxuXG5mdW5jdGlvbiBQaWVQaWVjZShkYXRhLCBpZHgpIHtcbiAgZ3JhcGhpYy5Hcm91cC5jYWxsKHRoaXMpO1xuICB2YXIgc2VjdG9yID0gbmV3IGdyYXBoaWMuU2VjdG9yKHtcbiAgICB6MjogMlxuICB9KTtcbiAgdmFyIHBvbHlsaW5lID0gbmV3IGdyYXBoaWMuUG9seWxpbmUoKTtcbiAgdmFyIHRleHQgPSBuZXcgZ3JhcGhpYy5UZXh0KCk7XG4gIHRoaXMuYWRkKHNlY3Rvcik7XG4gIHRoaXMuYWRkKHBvbHlsaW5lKTtcbiAgdGhpcy5hZGQodGV4dCk7XG4gIHRoaXMudXBkYXRlRGF0YShkYXRhLCBpZHgsIHRydWUpOyAvLyBIb3ZlciB0byBjaGFuZ2UgbGFiZWwgYW5kIGxhYmVsTGluZVxuXG4gIGZ1bmN0aW9uIG9uRW1waGFzaXMoKSB7XG4gICAgcG9seWxpbmUuaWdub3JlID0gcG9seWxpbmUuaG92ZXJJZ25vcmU7XG4gICAgdGV4dC5pZ25vcmUgPSB0ZXh0LmhvdmVySWdub3JlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Ob3JtYWwoKSB7XG4gICAgcG9seWxpbmUuaWdub3JlID0gcG9seWxpbmUubm9ybWFsSWdub3JlO1xuICAgIHRleHQuaWdub3JlID0gdGV4dC5ub3JtYWxJZ25vcmU7XG4gIH1cblxuICB0aGlzLm9uKCdlbXBoYXNpcycsIG9uRW1waGFzaXMpLm9uKCdub3JtYWwnLCBvbk5vcm1hbCkub24oJ21vdXNlb3ZlcicsIG9uRW1waGFzaXMpLm9uKCdtb3VzZW91dCcsIG9uTm9ybWFsKTtcbn1cblxudmFyIHBpZVBpZWNlUHJvdG8gPSBQaWVQaWVjZS5wcm90b3R5cGU7XG5cbnBpZVBpZWNlUHJvdG8udXBkYXRlRGF0YSA9IGZ1bmN0aW9uIChkYXRhLCBpZHgsIGZpcnN0Q3JlYXRlKSB7XG4gIHZhciBzZWN0b3IgPSB0aGlzLmNoaWxkQXQoMCk7XG4gIHZhciBzZXJpZXNNb2RlbCA9IGRhdGEuaG9zdE1vZGVsO1xuICB2YXIgaXRlbU1vZGVsID0gZGF0YS5nZXRJdGVtTW9kZWwoaWR4KTtcbiAgdmFyIGxheW91dCA9IGRhdGEuZ2V0SXRlbUxheW91dChpZHgpO1xuICB2YXIgc2VjdG9yU2hhcGUgPSB6clV0aWwuZXh0ZW5kKHt9LCBsYXlvdXQpO1xuICBzZWN0b3JTaGFwZS5sYWJlbCA9IG51bGw7XG5cbiAgaWYgKGZpcnN0Q3JlYXRlKSB7XG4gICAgc2VjdG9yLnNldFNoYXBlKHNlY3RvclNoYXBlKTtcbiAgICB2YXIgYW5pbWF0aW9uVHlwZSA9IHNlcmllc01vZGVsLmdldFNoYWxsb3coJ2FuaW1hdGlvblR5cGUnKTtcblxuICAgIGlmIChhbmltYXRpb25UeXBlID09PSAnc2NhbGUnKSB7XG4gICAgICBzZWN0b3Iuc2hhcGUuciA9IGxheW91dC5yMDtcbiAgICAgIGdyYXBoaWMuaW5pdFByb3BzKHNlY3Rvciwge1xuICAgICAgICBzaGFwZToge1xuICAgICAgICAgIHI6IGxheW91dC5yXG4gICAgICAgIH1cbiAgICAgIH0sIHNlcmllc01vZGVsLCBpZHgpO1xuICAgIH0gLy8gRXhwYW5zaW9uXG4gICAgZWxzZSB7XG4gICAgICAgIHNlY3Rvci5zaGFwZS5lbmRBbmdsZSA9IGxheW91dC5zdGFydEFuZ2xlO1xuICAgICAgICBncmFwaGljLnVwZGF0ZVByb3BzKHNlY3Rvciwge1xuICAgICAgICAgIHNoYXBlOiB7XG4gICAgICAgICAgICBlbmRBbmdsZTogbGF5b3V0LmVuZEFuZ2xlXG4gICAgICAgICAgfVxuICAgICAgICB9LCBzZXJpZXNNb2RlbCwgaWR4KTtcbiAgICAgIH1cbiAgfSBlbHNlIHtcbiAgICBncmFwaGljLnVwZGF0ZVByb3BzKHNlY3Rvciwge1xuICAgICAgc2hhcGU6IHNlY3RvclNoYXBlXG4gICAgfSwgc2VyaWVzTW9kZWwsIGlkeCk7XG4gIH0gLy8gVXBkYXRlIGNvbW1vbiBzdHlsZVxuXG5cbiAgdmFyIHZpc3VhbENvbG9yID0gZGF0YS5nZXRJdGVtVmlzdWFsKGlkeCwgJ2NvbG9yJyk7XG4gIHNlY3Rvci51c2VTdHlsZSh6clV0aWwuZGVmYXVsdHMoe1xuICAgIGxpbmVKb2luOiAnYmV2ZWwnLFxuICAgIGZpbGw6IHZpc3VhbENvbG9yXG4gIH0sIGl0ZW1Nb2RlbC5nZXRNb2RlbCgnaXRlbVN0eWxlJykuZ2V0SXRlbVN0eWxlKCkpKTtcbiAgc2VjdG9yLmhvdmVyU3R5bGUgPSBpdGVtTW9kZWwuZ2V0TW9kZWwoJ2VtcGhhc2lzLml0ZW1TdHlsZScpLmdldEl0ZW1TdHlsZSgpO1xuICB2YXIgY3Vyc29yU3R5bGUgPSBpdGVtTW9kZWwuZ2V0U2hhbGxvdygnY3Vyc29yJyk7XG4gIGN1cnNvclN0eWxlICYmIHNlY3Rvci5hdHRyKCdjdXJzb3InLCBjdXJzb3JTdHlsZSk7IC8vIFRvZ2dsZSBzZWxlY3RlZFxuXG4gIHRvZ2dsZUl0ZW1TZWxlY3RlZCh0aGlzLCBkYXRhLmdldEl0ZW1MYXlvdXQoaWR4KSwgc2VyaWVzTW9kZWwuaXNTZWxlY3RlZChudWxsLCBpZHgpLCBzZXJpZXNNb2RlbC5nZXQoJ3NlbGVjdGVkT2Zmc2V0JyksIHNlcmllc01vZGVsLmdldCgnYW5pbWF0aW9uJykpO1xuXG4gIGZ1bmN0aW9uIG9uRW1waGFzaXMoKSB7XG4gICAgLy8gU2VjdG9yIG1heSBoYXMgYW5pbWF0aW9uIG9mIHVwZGF0aW5nIGRhdGEuIEZvcmNlIHRvIG1vdmUgdG8gdGhlIGxhc3QgZnJhbWVcbiAgICAvLyBPciBpdCBtYXkgc3RvcHBlZCBvbiB0aGUgd3Jvbmcgc2hhcGVcbiAgICBzZWN0b3Iuc3RvcEFuaW1hdGlvbih0cnVlKTtcbiAgICBzZWN0b3IuYW5pbWF0ZVRvKHtcbiAgICAgIHNoYXBlOiB7XG4gICAgICAgIHI6IGxheW91dC5yICsgc2VyaWVzTW9kZWwuZ2V0KCdob3Zlck9mZnNldCcpXG4gICAgICB9XG4gICAgfSwgMzAwLCAnZWxhc3RpY091dCcpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Ob3JtYWwoKSB7XG4gICAgc2VjdG9yLnN0b3BBbmltYXRpb24odHJ1ZSk7XG4gICAgc2VjdG9yLmFuaW1hdGVUbyh7XG4gICAgICBzaGFwZToge1xuICAgICAgICByOiBsYXlvdXQuclxuICAgICAgfVxuICAgIH0sIDMwMCwgJ2VsYXN0aWNPdXQnKTtcbiAgfVxuXG4gIHNlY3Rvci5vZmYoJ21vdXNlb3ZlcicpLm9mZignbW91c2VvdXQnKS5vZmYoJ2VtcGhhc2lzJykub2ZmKCdub3JtYWwnKTtcblxuICBpZiAoaXRlbU1vZGVsLmdldCgnaG92ZXJBbmltYXRpb24nKSAmJiBzZXJpZXNNb2RlbC5pc0FuaW1hdGlvbkVuYWJsZWQoKSkge1xuICAgIHNlY3Rvci5vbignbW91c2VvdmVyJywgb25FbXBoYXNpcykub24oJ21vdXNlb3V0Jywgb25Ob3JtYWwpLm9uKCdlbXBoYXNpcycsIG9uRW1waGFzaXMpLm9uKCdub3JtYWwnLCBvbk5vcm1hbCk7XG4gIH1cblxuICB0aGlzLl91cGRhdGVMYWJlbChkYXRhLCBpZHgpO1xuXG4gIGdyYXBoaWMuc2V0SG92ZXJTdHlsZSh0aGlzKTtcbn07XG5cbnBpZVBpZWNlUHJvdG8uX3VwZGF0ZUxhYmVsID0gZnVuY3Rpb24gKGRhdGEsIGlkeCkge1xuICB2YXIgbGFiZWxMaW5lID0gdGhpcy5jaGlsZEF0KDEpO1xuICB2YXIgbGFiZWxUZXh0ID0gdGhpcy5jaGlsZEF0KDIpO1xuICB2YXIgc2VyaWVzTW9kZWwgPSBkYXRhLmhvc3RNb2RlbDtcbiAgdmFyIGl0ZW1Nb2RlbCA9IGRhdGEuZ2V0SXRlbU1vZGVsKGlkeCk7XG4gIHZhciBsYXlvdXQgPSBkYXRhLmdldEl0ZW1MYXlvdXQoaWR4KTtcbiAgdmFyIGxhYmVsTGF5b3V0ID0gbGF5b3V0LmxhYmVsO1xuICB2YXIgdmlzdWFsQ29sb3IgPSBkYXRhLmdldEl0ZW1WaXN1YWwoaWR4LCAnY29sb3InKTtcbiAgZ3JhcGhpYy51cGRhdGVQcm9wcyhsYWJlbExpbmUsIHtcbiAgICBzaGFwZToge1xuICAgICAgcG9pbnRzOiBsYWJlbExheW91dC5saW5lUG9pbnRzIHx8IFtbbGFiZWxMYXlvdXQueCwgbGFiZWxMYXlvdXQueV0sIFtsYWJlbExheW91dC54LCBsYWJlbExheW91dC55XSwgW2xhYmVsTGF5b3V0LngsIGxhYmVsTGF5b3V0LnldXVxuICAgIH1cbiAgfSwgc2VyaWVzTW9kZWwsIGlkeCk7XG4gIGdyYXBoaWMudXBkYXRlUHJvcHMobGFiZWxUZXh0LCB7XG4gICAgc3R5bGU6IHtcbiAgICAgIHg6IGxhYmVsTGF5b3V0LngsXG4gICAgICB5OiBsYWJlbExheW91dC55XG4gICAgfVxuICB9LCBzZXJpZXNNb2RlbCwgaWR4KTtcbiAgbGFiZWxUZXh0LmF0dHIoe1xuICAgIHJvdGF0aW9uOiBsYWJlbExheW91dC5yb3RhdGlvbixcbiAgICBvcmlnaW46IFtsYWJlbExheW91dC54LCBsYWJlbExheW91dC55XSxcbiAgICB6MjogMTBcbiAgfSk7XG4gIHZhciBsYWJlbE1vZGVsID0gaXRlbU1vZGVsLmdldE1vZGVsKCdsYWJlbCcpO1xuICB2YXIgbGFiZWxIb3Zlck1vZGVsID0gaXRlbU1vZGVsLmdldE1vZGVsKCdlbXBoYXNpcy5sYWJlbCcpO1xuICB2YXIgbGFiZWxMaW5lTW9kZWwgPSBpdGVtTW9kZWwuZ2V0TW9kZWwoJ2xhYmVsTGluZScpO1xuICB2YXIgbGFiZWxMaW5lSG92ZXJNb2RlbCA9IGl0ZW1Nb2RlbC5nZXRNb2RlbCgnZW1waGFzaXMubGFiZWxMaW5lJyk7XG4gIHZhciB2aXN1YWxDb2xvciA9IGRhdGEuZ2V0SXRlbVZpc3VhbChpZHgsICdjb2xvcicpO1xuICBncmFwaGljLnNldExhYmVsU3R5bGUobGFiZWxUZXh0LnN0eWxlLCBsYWJlbFRleHQuaG92ZXJTdHlsZSA9IHt9LCBsYWJlbE1vZGVsLCBsYWJlbEhvdmVyTW9kZWwsIHtcbiAgICBsYWJlbEZldGNoZXI6IGRhdGEuaG9zdE1vZGVsLFxuICAgIGxhYmVsRGF0YUluZGV4OiBpZHgsXG4gICAgZGVmYXVsdFRleHQ6IGRhdGEuZ2V0TmFtZShpZHgpLFxuICAgIGF1dG9Db2xvcjogdmlzdWFsQ29sb3IsXG4gICAgdXNlSW5zaWRlU3R5bGU6ICEhbGFiZWxMYXlvdXQuaW5zaWRlXG4gIH0sIHtcbiAgICB0ZXh0QWxpZ246IGxhYmVsTGF5b3V0LnRleHRBbGlnbixcbiAgICB0ZXh0VmVydGljYWxBbGlnbjogbGFiZWxMYXlvdXQudmVydGljYWxBbGlnbixcbiAgICBvcGFjaXR5OiBkYXRhLmdldEl0ZW1WaXN1YWwoaWR4LCAnb3BhY2l0eScpXG4gIH0pO1xuICBsYWJlbFRleHQuaWdub3JlID0gbGFiZWxUZXh0Lm5vcm1hbElnbm9yZSA9ICFsYWJlbE1vZGVsLmdldCgnc2hvdycpO1xuICBsYWJlbFRleHQuaG92ZXJJZ25vcmUgPSAhbGFiZWxIb3Zlck1vZGVsLmdldCgnc2hvdycpO1xuICBsYWJlbExpbmUuaWdub3JlID0gbGFiZWxMaW5lLm5vcm1hbElnbm9yZSA9ICFsYWJlbExpbmVNb2RlbC5nZXQoJ3Nob3cnKTtcbiAgbGFiZWxMaW5lLmhvdmVySWdub3JlID0gIWxhYmVsTGluZUhvdmVyTW9kZWwuZ2V0KCdzaG93Jyk7IC8vIERlZmF1bHQgdXNlIGl0ZW0gdmlzdWFsIGNvbG9yXG5cbiAgbGFiZWxMaW5lLnNldFN0eWxlKHtcbiAgICBzdHJva2U6IHZpc3VhbENvbG9yLFxuICAgIG9wYWNpdHk6IGRhdGEuZ2V0SXRlbVZpc3VhbChpZHgsICdvcGFjaXR5JylcbiAgfSk7XG4gIGxhYmVsTGluZS5zZXRTdHlsZShsYWJlbExpbmVNb2RlbC5nZXRNb2RlbCgnbGluZVN0eWxlJykuZ2V0TGluZVN0eWxlKCkpO1xuICBsYWJlbExpbmUuaG92ZXJTdHlsZSA9IGxhYmVsTGluZUhvdmVyTW9kZWwuZ2V0TW9kZWwoJ2xpbmVTdHlsZScpLmdldExpbmVTdHlsZSgpO1xuICB2YXIgc21vb3RoID0gbGFiZWxMaW5lTW9kZWwuZ2V0KCdzbW9vdGgnKTtcblxuICBpZiAoc21vb3RoICYmIHNtb290aCA9PT0gdHJ1ZSkge1xuICAgIHNtb290aCA9IDAuNDtcbiAgfVxuXG4gIGxhYmVsTGluZS5zZXRTaGFwZSh7XG4gICAgc21vb3RoOiBzbW9vdGhcbiAgfSk7XG59O1xuXG56clV0aWwuaW5oZXJpdHMoUGllUGllY2UsIGdyYXBoaWMuR3JvdXApOyAvLyBQaWUgdmlld1xuXG52YXIgUGllVmlldyA9IENoYXJ0Vmlldy5leHRlbmQoe1xuICB0eXBlOiAncGllJyxcbiAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWN0b3JHcm91cCA9IG5ldyBncmFwaGljLkdyb3VwKCk7XG4gICAgdGhpcy5fc2VjdG9yR3JvdXAgPSBzZWN0b3JHcm91cDtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiAoc2VyaWVzTW9kZWwsIGVjTW9kZWwsIGFwaSwgcGF5bG9hZCkge1xuICAgIGlmIChwYXlsb2FkICYmIHBheWxvYWQuZnJvbSA9PT0gdGhpcy51aWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHNlcmllc01vZGVsLmdldERhdGEoKTtcbiAgICB2YXIgb2xkRGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgdmFyIGdyb3VwID0gdGhpcy5ncm91cDtcbiAgICB2YXIgaGFzQW5pbWF0aW9uID0gZWNNb2RlbC5nZXQoJ2FuaW1hdGlvbicpO1xuICAgIHZhciBpc0ZpcnN0UmVuZGVyID0gIW9sZERhdGE7XG4gICAgdmFyIGFuaW1hdGlvblR5cGUgPSBzZXJpZXNNb2RlbC5nZXQoJ2FuaW1hdGlvblR5cGUnKTtcbiAgICB2YXIgb25TZWN0b3JDbGljayA9IHpyVXRpbC5jdXJyeSh1cGRhdGVEYXRhU2VsZWN0ZWQsIHRoaXMudWlkLCBzZXJpZXNNb2RlbCwgaGFzQW5pbWF0aW9uLCBhcGkpO1xuICAgIHZhciBzZWxlY3RlZE1vZGUgPSBzZXJpZXNNb2RlbC5nZXQoJ3NlbGVjdGVkTW9kZScpO1xuICAgIGRhdGEuZGlmZihvbGREYXRhKS5hZGQoZnVuY3Rpb24gKGlkeCkge1xuICAgICAgdmFyIHBpZVBpZWNlID0gbmV3IFBpZVBpZWNlKGRhdGEsIGlkeCk7IC8vIERlZmF1bHQgZXhwYW5zaW9uIGFuaW1hdGlvblxuXG4gICAgICBpZiAoaXNGaXJzdFJlbmRlciAmJiBhbmltYXRpb25UeXBlICE9PSAnc2NhbGUnKSB7XG4gICAgICAgIHBpZVBpZWNlLmVhY2hDaGlsZChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICBjaGlsZC5zdG9wQW5pbWF0aW9uKHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgc2VsZWN0ZWRNb2RlICYmIHBpZVBpZWNlLm9uKCdjbGljaycsIG9uU2VjdG9yQ2xpY2spO1xuICAgICAgZGF0YS5zZXRJdGVtR3JhcGhpY0VsKGlkeCwgcGllUGllY2UpO1xuICAgICAgZ3JvdXAuYWRkKHBpZVBpZWNlKTtcbiAgICB9KS51cGRhdGUoZnVuY3Rpb24gKG5ld0lkeCwgb2xkSWR4KSB7XG4gICAgICB2YXIgcGllUGllY2UgPSBvbGREYXRhLmdldEl0ZW1HcmFwaGljRWwob2xkSWR4KTtcbiAgICAgIHBpZVBpZWNlLnVwZGF0ZURhdGEoZGF0YSwgbmV3SWR4KTtcbiAgICAgIHBpZVBpZWNlLm9mZignY2xpY2snKTtcbiAgICAgIHNlbGVjdGVkTW9kZSAmJiBwaWVQaWVjZS5vbignY2xpY2snLCBvblNlY3RvckNsaWNrKTtcbiAgICAgIGdyb3VwLmFkZChwaWVQaWVjZSk7XG4gICAgICBkYXRhLnNldEl0ZW1HcmFwaGljRWwobmV3SWR4LCBwaWVQaWVjZSk7XG4gICAgfSkucmVtb3ZlKGZ1bmN0aW9uIChpZHgpIHtcbiAgICAgIHZhciBwaWVQaWVjZSA9IG9sZERhdGEuZ2V0SXRlbUdyYXBoaWNFbChpZHgpO1xuICAgICAgZ3JvdXAucmVtb3ZlKHBpZVBpZWNlKTtcbiAgICB9KS5leGVjdXRlKCk7XG5cbiAgICBpZiAoaGFzQW5pbWF0aW9uICYmIGlzRmlyc3RSZW5kZXIgJiYgZGF0YS5jb3VudCgpID4gMCAvLyBEZWZhdWx0IGV4cGFuc2lvbiBhbmltYXRpb25cbiAgICAmJiBhbmltYXRpb25UeXBlICE9PSAnc2NhbGUnKSB7XG4gICAgICB2YXIgc2hhcGUgPSBkYXRhLmdldEl0ZW1MYXlvdXQoMCk7XG4gICAgICB2YXIgciA9IE1hdGgubWF4KGFwaS5nZXRXaWR0aCgpLCBhcGkuZ2V0SGVpZ2h0KCkpIC8gMjtcbiAgICAgIHZhciByZW1vdmVDbGlwUGF0aCA9IHpyVXRpbC5iaW5kKGdyb3VwLnJlbW92ZUNsaXBQYXRoLCBncm91cCk7XG4gICAgICBncm91cC5zZXRDbGlwUGF0aCh0aGlzLl9jcmVhdGVDbGlwUGF0aChzaGFwZS5jeCwgc2hhcGUuY3ksIHIsIHNoYXBlLnN0YXJ0QW5nbGUsIHNoYXBlLmNsb2Nrd2lzZSwgcmVtb3ZlQ2xpcFBhdGgsIHNlcmllc01vZGVsKSk7XG4gICAgfVxuXG4gICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gIH0sXG4gIGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHt9LFxuICBfY3JlYXRlQ2xpcFBhdGg6IGZ1bmN0aW9uIChjeCwgY3ksIHIsIHN0YXJ0QW5nbGUsIGNsb2Nrd2lzZSwgY2IsIHNlcmllc01vZGVsKSB7XG4gICAgdmFyIGNsaXBQYXRoID0gbmV3IGdyYXBoaWMuU2VjdG9yKHtcbiAgICAgIHNoYXBlOiB7XG4gICAgICAgIGN4OiBjeCxcbiAgICAgICAgY3k6IGN5LFxuICAgICAgICByMDogMCxcbiAgICAgICAgcjogcixcbiAgICAgICAgc3RhcnRBbmdsZTogc3RhcnRBbmdsZSxcbiAgICAgICAgZW5kQW5nbGU6IHN0YXJ0QW5nbGUsXG4gICAgICAgIGNsb2Nrd2lzZTogY2xvY2t3aXNlXG4gICAgICB9XG4gICAgfSk7XG4gICAgZ3JhcGhpYy5pbml0UHJvcHMoY2xpcFBhdGgsIHtcbiAgICAgIHNoYXBlOiB7XG4gICAgICAgIGVuZEFuZ2xlOiBzdGFydEFuZ2xlICsgKGNsb2Nrd2lzZSA/IDEgOiAtMSkgKiBNYXRoLlBJICogMlxuICAgICAgfVxuICAgIH0sIHNlcmllc01vZGVsLCBjYik7XG4gICAgcmV0dXJuIGNsaXBQYXRoO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAaW1wbGVtZW50XG4gICAqL1xuICBjb250YWluUG9pbnQ6IGZ1bmN0aW9uIChwb2ludCwgc2VyaWVzTW9kZWwpIHtcbiAgICB2YXIgZGF0YSA9IHNlcmllc01vZGVsLmdldERhdGEoKTtcbiAgICB2YXIgaXRlbUxheW91dCA9IGRhdGEuZ2V0SXRlbUxheW91dCgwKTtcblxuICAgIGlmIChpdGVtTGF5b3V0KSB7XG4gICAgICB2YXIgZHggPSBwb2ludFswXSAtIGl0ZW1MYXlvdXQuY3g7XG4gICAgICB2YXIgZHkgPSBwb2ludFsxXSAtIGl0ZW1MYXlvdXQuY3k7XG4gICAgICB2YXIgcmFkaXVzID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICAgIHJldHVybiByYWRpdXMgPD0gaXRlbUxheW91dC5yICYmIHJhZGl1cyA+PSBpdGVtTGF5b3V0LnIwO1xuICAgIH1cbiAgfVxufSk7XG52YXIgX2RlZmF1bHQgPSBQaWVWaWV3O1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgdGV4dENvbnRhaW4gPSByZXF1aXJlKFwienJlbmRlci9saWIvY29udGFpbi90ZXh0XCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG4vLyBGSVhNRSBlbXBoYXNpcyBsYWJlbCBwb3NpdGlvbiBpcyBub3Qgc2FtZSB3aXRoIG5vcm1hbCBsYWJlbCBwb3NpdGlvblxuZnVuY3Rpb24gYWRqdXN0U2luZ2xlU2lkZShsaXN0LCBjeCwgY3ksIHIsIGRpciwgdmlld1dpZHRoLCB2aWV3SGVpZ2h0KSB7XG4gIGxpc3Quc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBhLnkgLSBiLnk7XG4gIH0pOyAvLyDljotcblxuICBmdW5jdGlvbiBzaGlmdERvd24oc3RhcnQsIGVuZCwgZGVsdGEsIGRpcikge1xuICAgIGZvciAodmFyIGogPSBzdGFydDsgaiA8IGVuZDsgaisrKSB7XG4gICAgICBsaXN0W2pdLnkgKz0gZGVsdGE7XG5cbiAgICAgIGlmIChqID4gc3RhcnQgJiYgaiArIDEgPCBlbmQgJiYgbGlzdFtqICsgMV0ueSA+IGxpc3Rbal0ueSArIGxpc3Rbal0uaGVpZ2h0KSB7XG4gICAgICAgIHNoaWZ0VXAoaiwgZGVsdGEgLyAyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNoaWZ0VXAoZW5kIC0gMSwgZGVsdGEgLyAyKTtcbiAgfSAvLyDlvLlcblxuXG4gIGZ1bmN0aW9uIHNoaWZ0VXAoZW5kLCBkZWx0YSkge1xuICAgIGZvciAodmFyIGogPSBlbmQ7IGogPj0gMDsgai0tKSB7XG4gICAgICBsaXN0W2pdLnkgLT0gZGVsdGE7XG5cbiAgICAgIGlmIChqID4gMCAmJiBsaXN0W2pdLnkgPiBsaXN0W2ogLSAxXS55ICsgbGlzdFtqIC0gMV0uaGVpZ2h0KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoYW5nZVgobGlzdCwgaXNEb3duTGlzdCwgY3gsIGN5LCByLCBkaXIpIHtcbiAgICB2YXIgbGFzdERlbHRhWCA9IGRpciA+IDAgPyBpc0Rvd25MaXN0IC8vIOWPs+S+p1xuICAgID8gTnVtYmVyLk1BWF9WQUxVRSAvLyDkuItcbiAgICA6IDAgLy8g5LiKXG4gICAgOiBpc0Rvd25MaXN0IC8vIOW3puS+p1xuICAgID8gTnVtYmVyLk1BWF9WQUxVRSAvLyDkuItcbiAgICA6IDA7IC8vIOS4ilxuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgLy8gTm90IGNoYW5nZSB4IGZvciBjZW50ZXIgbGFiZWxcbiAgICAgIGlmIChsaXN0W2ldLnBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRlbHRhWSA9IE1hdGguYWJzKGxpc3RbaV0ueSAtIGN5KTtcbiAgICAgIHZhciBsZW5ndGggPSBsaXN0W2ldLmxlbjtcbiAgICAgIHZhciBsZW5ndGgyID0gbGlzdFtpXS5sZW4yO1xuICAgICAgdmFyIGRlbHRhWCA9IGRlbHRhWSA8IHIgKyBsZW5ndGggPyBNYXRoLnNxcnQoKHIgKyBsZW5ndGggKyBsZW5ndGgyKSAqIChyICsgbGVuZ3RoICsgbGVuZ3RoMikgLSBkZWx0YVkgKiBkZWx0YVkpIDogTWF0aC5hYnMobGlzdFtpXS54IC0gY3gpO1xuXG4gICAgICBpZiAoaXNEb3duTGlzdCAmJiBkZWx0YVggPj0gbGFzdERlbHRhWCkge1xuICAgICAgICAvLyDlj7PkuIvvvIzlt6bkuItcbiAgICAgICAgZGVsdGFYID0gbGFzdERlbHRhWCAtIDEwO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzRG93bkxpc3QgJiYgZGVsdGFYIDw9IGxhc3REZWx0YVgpIHtcbiAgICAgICAgLy8g5Y+z5LiK77yM5bem5LiKXG4gICAgICAgIGRlbHRhWCA9IGxhc3REZWx0YVggKyAxMDtcbiAgICAgIH1cblxuICAgICAgbGlzdFtpXS54ID0gY3ggKyBkZWx0YVggKiBkaXI7XG4gICAgICBsYXN0RGVsdGFYID0gZGVsdGFYO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsYXN0WSA9IDA7XG4gIHZhciBkZWx0YTtcbiAgdmFyIGxlbiA9IGxpc3QubGVuZ3RoO1xuICB2YXIgdXBMaXN0ID0gW107XG4gIHZhciBkb3duTGlzdCA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBkZWx0YSA9IGxpc3RbaV0ueSAtIGxhc3RZO1xuXG4gICAgaWYgKGRlbHRhIDwgMCkge1xuICAgICAgc2hpZnREb3duKGksIGxlbiwgLWRlbHRhLCBkaXIpO1xuICAgIH1cblxuICAgIGxhc3RZID0gbGlzdFtpXS55ICsgbGlzdFtpXS5oZWlnaHQ7XG4gIH1cblxuICBpZiAodmlld0hlaWdodCAtIGxhc3RZIDwgMCkge1xuICAgIHNoaWZ0VXAobGVuIC0gMSwgbGFzdFkgLSB2aWV3SGVpZ2h0KTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAobGlzdFtpXS55ID49IGN5KSB7XG4gICAgICBkb3duTGlzdC5wdXNoKGxpc3RbaV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB1cExpc3QucHVzaChsaXN0W2ldKTtcbiAgICB9XG4gIH1cblxuICBjaGFuZ2VYKHVwTGlzdCwgZmFsc2UsIGN4LCBjeSwgciwgZGlyKTtcbiAgY2hhbmdlWChkb3duTGlzdCwgdHJ1ZSwgY3gsIGN5LCByLCBkaXIpO1xufVxuXG5mdW5jdGlvbiBhdm9pZE92ZXJsYXAobGFiZWxMYXlvdXRMaXN0LCBjeCwgY3ksIHIsIHZpZXdXaWR0aCwgdmlld0hlaWdodCkge1xuICB2YXIgbGVmdExpc3QgPSBbXTtcbiAgdmFyIHJpZ2h0TGlzdCA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGFiZWxMYXlvdXRMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxhYmVsTGF5b3V0TGlzdFtpXS54IDwgY3gpIHtcbiAgICAgIGxlZnRMaXN0LnB1c2gobGFiZWxMYXlvdXRMaXN0W2ldKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmlnaHRMaXN0LnB1c2gobGFiZWxMYXlvdXRMaXN0W2ldKTtcbiAgICB9XG4gIH1cblxuICBhZGp1c3RTaW5nbGVTaWRlKHJpZ2h0TGlzdCwgY3gsIGN5LCByLCAxLCB2aWV3V2lkdGgsIHZpZXdIZWlnaHQpO1xuICBhZGp1c3RTaW5nbGVTaWRlKGxlZnRMaXN0LCBjeCwgY3ksIHIsIC0xLCB2aWV3V2lkdGgsIHZpZXdIZWlnaHQpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGFiZWxMYXlvdXRMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGxpbmVQb2ludHMgPSBsYWJlbExheW91dExpc3RbaV0ubGluZVBvaW50cztcblxuICAgIGlmIChsaW5lUG9pbnRzKSB7XG4gICAgICB2YXIgZGlzdCA9IGxpbmVQb2ludHNbMV1bMF0gLSBsaW5lUG9pbnRzWzJdWzBdO1xuXG4gICAgICBpZiAobGFiZWxMYXlvdXRMaXN0W2ldLnggPCBjeCkge1xuICAgICAgICBsaW5lUG9pbnRzWzJdWzBdID0gbGFiZWxMYXlvdXRMaXN0W2ldLnggKyAzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGluZVBvaW50c1syXVswXSA9IGxhYmVsTGF5b3V0TGlzdFtpXS54IC0gMztcbiAgICAgIH1cblxuICAgICAgbGluZVBvaW50c1sxXVsxXSA9IGxpbmVQb2ludHNbMl1bMV0gPSBsYWJlbExheW91dExpc3RbaV0ueTtcbiAgICAgIGxpbmVQb2ludHNbMV1bMF0gPSBsaW5lUG9pbnRzWzJdWzBdICsgZGlzdDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX2RlZmF1bHQoc2VyaWVzTW9kZWwsIHIsIHZpZXdXaWR0aCwgdmlld0hlaWdodCkge1xuICB2YXIgZGF0YSA9IHNlcmllc01vZGVsLmdldERhdGEoKTtcbiAgdmFyIGxhYmVsTGF5b3V0TGlzdCA9IFtdO1xuICB2YXIgY3g7XG4gIHZhciBjeTtcbiAgdmFyIGhhc0xhYmVsUm90YXRlID0gZmFsc2U7XG4gIGRhdGEuZWFjaChmdW5jdGlvbiAoaWR4KSB7XG4gICAgdmFyIGxheW91dCA9IGRhdGEuZ2V0SXRlbUxheW91dChpZHgpO1xuICAgIHZhciBpdGVtTW9kZWwgPSBkYXRhLmdldEl0ZW1Nb2RlbChpZHgpO1xuICAgIHZhciBsYWJlbE1vZGVsID0gaXRlbU1vZGVsLmdldE1vZGVsKCdsYWJlbCcpOyAvLyBVc2UgcG9zaXRpb24gaW4gbm9ybWFsIG9yIGVtcGhhc2lzXG5cbiAgICB2YXIgbGFiZWxQb3NpdGlvbiA9IGxhYmVsTW9kZWwuZ2V0KCdwb3NpdGlvbicpIHx8IGl0ZW1Nb2RlbC5nZXQoJ2VtcGhhc2lzLmxhYmVsLnBvc2l0aW9uJyk7XG4gICAgdmFyIGxhYmVsTGluZU1vZGVsID0gaXRlbU1vZGVsLmdldE1vZGVsKCdsYWJlbExpbmUnKTtcbiAgICB2YXIgbGFiZWxMaW5lTGVuID0gbGFiZWxMaW5lTW9kZWwuZ2V0KCdsZW5ndGgnKTtcbiAgICB2YXIgbGFiZWxMaW5lTGVuMiA9IGxhYmVsTGluZU1vZGVsLmdldCgnbGVuZ3RoMicpO1xuICAgIHZhciBtaWRBbmdsZSA9IChsYXlvdXQuc3RhcnRBbmdsZSArIGxheW91dC5lbmRBbmdsZSkgLyAyO1xuICAgIHZhciBkeCA9IE1hdGguY29zKG1pZEFuZ2xlKTtcbiAgICB2YXIgZHkgPSBNYXRoLnNpbihtaWRBbmdsZSk7XG4gICAgdmFyIHRleHRYO1xuICAgIHZhciB0ZXh0WTtcbiAgICB2YXIgbGluZVBvaW50cztcbiAgICB2YXIgdGV4dEFsaWduO1xuICAgIGN4ID0gbGF5b3V0LmN4O1xuICAgIGN5ID0gbGF5b3V0LmN5O1xuICAgIHZhciBpc0xhYmVsSW5zaWRlID0gbGFiZWxQb3NpdGlvbiA9PT0gJ2luc2lkZScgfHwgbGFiZWxQb3NpdGlvbiA9PT0gJ2lubmVyJztcblxuICAgIGlmIChsYWJlbFBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgdGV4dFggPSBsYXlvdXQuY3g7XG4gICAgICB0ZXh0WSA9IGxheW91dC5jeTtcbiAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgeDEgPSAoaXNMYWJlbEluc2lkZSA/IChsYXlvdXQuciArIGxheW91dC5yMCkgLyAyICogZHggOiBsYXlvdXQuciAqIGR4KSArIGN4O1xuICAgICAgdmFyIHkxID0gKGlzTGFiZWxJbnNpZGUgPyAobGF5b3V0LnIgKyBsYXlvdXQucjApIC8gMiAqIGR5IDogbGF5b3V0LnIgKiBkeSkgKyBjeTtcbiAgICAgIHRleHRYID0geDEgKyBkeCAqIDM7XG4gICAgICB0ZXh0WSA9IHkxICsgZHkgKiAzO1xuXG4gICAgICBpZiAoIWlzTGFiZWxJbnNpZGUpIHtcbiAgICAgICAgLy8gRm9yIHJvc2VUeXBlXG4gICAgICAgIHZhciB4MiA9IHgxICsgZHggKiAobGFiZWxMaW5lTGVuICsgciAtIGxheW91dC5yKTtcbiAgICAgICAgdmFyIHkyID0geTEgKyBkeSAqIChsYWJlbExpbmVMZW4gKyByIC0gbGF5b3V0LnIpO1xuICAgICAgICB2YXIgeDMgPSB4MiArIChkeCA8IDAgPyAtMSA6IDEpICogbGFiZWxMaW5lTGVuMjtcbiAgICAgICAgdmFyIHkzID0geTI7XG4gICAgICAgIHRleHRYID0geDMgKyAoZHggPCAwID8gLTUgOiA1KTtcbiAgICAgICAgdGV4dFkgPSB5MztcbiAgICAgICAgbGluZVBvaW50cyA9IFtbeDEsIHkxXSwgW3gyLCB5Ml0sIFt4MywgeTNdXTtcbiAgICAgIH1cblxuICAgICAgdGV4dEFsaWduID0gaXNMYWJlbEluc2lkZSA/ICdjZW50ZXInIDogZHggPiAwID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9XG5cbiAgICB2YXIgZm9udCA9IGxhYmVsTW9kZWwuZ2V0Rm9udCgpO1xuICAgIHZhciBsYWJlbFJvdGF0ZSA9IGxhYmVsTW9kZWwuZ2V0KCdyb3RhdGUnKSA/IGR4IDwgMCA/IC1taWRBbmdsZSArIE1hdGguUEkgOiAtbWlkQW5nbGUgOiAwO1xuICAgIHZhciB0ZXh0ID0gc2VyaWVzTW9kZWwuZ2V0Rm9ybWF0dGVkTGFiZWwoaWR4LCAnbm9ybWFsJykgfHwgZGF0YS5nZXROYW1lKGlkeCk7XG4gICAgdmFyIHRleHRSZWN0ID0gdGV4dENvbnRhaW4uZ2V0Qm91bmRpbmdSZWN0KHRleHQsIGZvbnQsIHRleHRBbGlnbiwgJ3RvcCcpO1xuICAgIGhhc0xhYmVsUm90YXRlID0gISFsYWJlbFJvdGF0ZTtcbiAgICBsYXlvdXQubGFiZWwgPSB7XG4gICAgICB4OiB0ZXh0WCxcbiAgICAgIHk6IHRleHRZLFxuICAgICAgcG9zaXRpb246IGxhYmVsUG9zaXRpb24sXG4gICAgICBoZWlnaHQ6IHRleHRSZWN0LmhlaWdodCxcbiAgICAgIGxlbjogbGFiZWxMaW5lTGVuLFxuICAgICAgbGVuMjogbGFiZWxMaW5lTGVuMixcbiAgICAgIGxpbmVQb2ludHM6IGxpbmVQb2ludHMsXG4gICAgICB0ZXh0QWxpZ246IHRleHRBbGlnbixcbiAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICAgcm90YXRpb246IGxhYmVsUm90YXRlLFxuICAgICAgaW5zaWRlOiBpc0xhYmVsSW5zaWRlXG4gICAgfTsgLy8gTm90IGxheW91dCB0aGUgaW5zaWRlIGxhYmVsXG5cbiAgICBpZiAoIWlzTGFiZWxJbnNpZGUpIHtcbiAgICAgIGxhYmVsTGF5b3V0TGlzdC5wdXNoKGxheW91dC5sYWJlbCk7XG4gICAgfVxuICB9KTtcblxuICBpZiAoIWhhc0xhYmVsUm90YXRlICYmIHNlcmllc01vZGVsLmdldCgnYXZvaWRMYWJlbE92ZXJsYXAnKSkge1xuICAgIGF2b2lkT3ZlcmxhcChsYWJlbExheW91dExpc3QsIGN4LCBjeSwgciwgdmlld1dpZHRoLCB2aWV3SGVpZ2h0KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBfbnVtYmVyID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvbnVtYmVyXCIpO1xuXG52YXIgcGFyc2VQZXJjZW50ID0gX251bWJlci5wYXJzZVBlcmNlbnQ7XG52YXIgbGluZWFyTWFwID0gX251bWJlci5saW5lYXJNYXA7XG5cbnZhciBsYWJlbExheW91dCA9IHJlcXVpcmUoXCIuL2xhYmVsTGF5b3V0XCIpO1xuXG52YXIgenJVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xudmFyIFBJMiA9IE1hdGguUEkgKiAyO1xudmFyIFJBRElBTiA9IE1hdGguUEkgLyAxODA7XG5cbmZ1bmN0aW9uIF9kZWZhdWx0KHNlcmllc1R5cGUsIGVjTW9kZWwsIGFwaSwgcGF5bG9hZCkge1xuICBlY01vZGVsLmVhY2hTZXJpZXNCeVR5cGUoc2VyaWVzVHlwZSwgZnVuY3Rpb24gKHNlcmllc01vZGVsKSB7XG4gICAgdmFyIGRhdGEgPSBzZXJpZXNNb2RlbC5nZXREYXRhKCk7XG4gICAgdmFyIHZhbHVlRGltID0gZGF0YS5tYXBEaW1lbnNpb24oJ3ZhbHVlJyk7XG4gICAgdmFyIGNlbnRlciA9IHNlcmllc01vZGVsLmdldCgnY2VudGVyJyk7XG4gICAgdmFyIHJhZGl1cyA9IHNlcmllc01vZGVsLmdldCgncmFkaXVzJyk7XG5cbiAgICBpZiAoIXpyVXRpbC5pc0FycmF5KHJhZGl1cykpIHtcbiAgICAgIHJhZGl1cyA9IFswLCByYWRpdXNdO1xuICAgIH1cblxuICAgIGlmICghenJVdGlsLmlzQXJyYXkoY2VudGVyKSkge1xuICAgICAgY2VudGVyID0gW2NlbnRlciwgY2VudGVyXTtcbiAgICB9XG5cbiAgICB2YXIgd2lkdGggPSBhcGkuZ2V0V2lkdGgoKTtcbiAgICB2YXIgaGVpZ2h0ID0gYXBpLmdldEhlaWdodCgpO1xuICAgIHZhciBzaXplID0gTWF0aC5taW4od2lkdGgsIGhlaWdodCk7XG4gICAgdmFyIGN4ID0gcGFyc2VQZXJjZW50KGNlbnRlclswXSwgd2lkdGgpO1xuICAgIHZhciBjeSA9IHBhcnNlUGVyY2VudChjZW50ZXJbMV0sIGhlaWdodCk7XG4gICAgdmFyIHIwID0gcGFyc2VQZXJjZW50KHJhZGl1c1swXSwgc2l6ZSAvIDIpO1xuICAgIHZhciByID0gcGFyc2VQZXJjZW50KHJhZGl1c1sxXSwgc2l6ZSAvIDIpO1xuICAgIHZhciBzdGFydEFuZ2xlID0gLXNlcmllc01vZGVsLmdldCgnc3RhcnRBbmdsZScpICogUkFESUFOO1xuICAgIHZhciBtaW5BbmdsZSA9IHNlcmllc01vZGVsLmdldCgnbWluQW5nbGUnKSAqIFJBRElBTjtcbiAgICB2YXIgdmFsaWREYXRhQ291bnQgPSAwO1xuICAgIGRhdGEuZWFjaCh2YWx1ZURpbSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAhaXNOYU4odmFsdWUpICYmIHZhbGlkRGF0YUNvdW50Kys7XG4gICAgfSk7XG4gICAgdmFyIHN1bSA9IGRhdGEuZ2V0U3VtKHZhbHVlRGltKTsgLy8gU3VtIG1heSBiZSAwXG5cbiAgICB2YXIgdW5pdFJhZGlhbiA9IE1hdGguUEkgLyAoc3VtIHx8IHZhbGlkRGF0YUNvdW50KSAqIDI7XG4gICAgdmFyIGNsb2Nrd2lzZSA9IHNlcmllc01vZGVsLmdldCgnY2xvY2t3aXNlJyk7XG4gICAgdmFyIHJvc2VUeXBlID0gc2VyaWVzTW9kZWwuZ2V0KCdyb3NlVHlwZScpO1xuICAgIHZhciBzdGlsbFNob3daZXJvU3VtID0gc2VyaWVzTW9kZWwuZ2V0KCdzdGlsbFNob3daZXJvU3VtJyk7IC8vIFswLi4ubWF4XVxuXG4gICAgdmFyIGV4dGVudCA9IGRhdGEuZ2V0RGF0YUV4dGVudCh2YWx1ZURpbSk7XG4gICAgZXh0ZW50WzBdID0gMDsgLy8gSW4gdGhlIGNhc2Ugc29tZSBzZWN0b3IgYW5nbGUgaXMgc21hbGxlciB0aGFuIG1pbkFuZ2xlXG5cbiAgICB2YXIgcmVzdEFuZ2xlID0gUEkyO1xuICAgIHZhciB2YWx1ZVN1bUxhcmdlclRoYW5NaW5BbmdsZSA9IDA7XG4gICAgdmFyIGN1cnJlbnRBbmdsZSA9IHN0YXJ0QW5nbGU7XG4gICAgdmFyIGRpciA9IGNsb2Nrd2lzZSA/IDEgOiAtMTtcbiAgICBkYXRhLmVhY2godmFsdWVEaW0sIGZ1bmN0aW9uICh2YWx1ZSwgaWR4KSB7XG4gICAgICB2YXIgYW5nbGU7XG5cbiAgICAgIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgZGF0YS5zZXRJdGVtTGF5b3V0KGlkeCwge1xuICAgICAgICAgIGFuZ2xlOiBOYU4sXG4gICAgICAgICAgc3RhcnRBbmdsZTogTmFOLFxuICAgICAgICAgIGVuZEFuZ2xlOiBOYU4sXG4gICAgICAgICAgY2xvY2t3aXNlOiBjbG9ja3dpc2UsXG4gICAgICAgICAgY3g6IGN4LFxuICAgICAgICAgIGN5OiBjeSxcbiAgICAgICAgICByMDogcjAsXG4gICAgICAgICAgcjogcm9zZVR5cGUgPyBOYU4gOiByXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIEZJWE1FIOWFvOWuuSAyLjAg5L2G5pivIHJvc2VUeXBlIOaYryBhcmVhIOeahOaXtuWAmeaJjeaYr+i/meagt++8n1xuXG5cbiAgICAgIGlmIChyb3NlVHlwZSAhPT0gJ2FyZWEnKSB7XG4gICAgICAgIGFuZ2xlID0gc3VtID09PSAwICYmIHN0aWxsU2hvd1plcm9TdW0gPyB1bml0UmFkaWFuIDogdmFsdWUgKiB1bml0UmFkaWFuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYW5nbGUgPSBQSTIgLyB2YWxpZERhdGFDb3VudDtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuZ2xlIDwgbWluQW5nbGUpIHtcbiAgICAgICAgYW5nbGUgPSBtaW5BbmdsZTtcbiAgICAgICAgcmVzdEFuZ2xlIC09IG1pbkFuZ2xlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVTdW1MYXJnZXJUaGFuTWluQW5nbGUgKz0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbmRBbmdsZSA9IGN1cnJlbnRBbmdsZSArIGRpciAqIGFuZ2xlO1xuICAgICAgZGF0YS5zZXRJdGVtTGF5b3V0KGlkeCwge1xuICAgICAgICBhbmdsZTogYW5nbGUsXG4gICAgICAgIHN0YXJ0QW5nbGU6IGN1cnJlbnRBbmdsZSxcbiAgICAgICAgZW5kQW5nbGU6IGVuZEFuZ2xlLFxuICAgICAgICBjbG9ja3dpc2U6IGNsb2Nrd2lzZSxcbiAgICAgICAgY3g6IGN4LFxuICAgICAgICBjeTogY3ksXG4gICAgICAgIHIwOiByMCxcbiAgICAgICAgcjogcm9zZVR5cGUgPyBsaW5lYXJNYXAodmFsdWUsIGV4dGVudCwgW3IwLCByXSkgOiByXG4gICAgICB9KTtcbiAgICAgIGN1cnJlbnRBbmdsZSA9IGVuZEFuZ2xlO1xuICAgIH0pOyAvLyBTb21lIHNlY3RvciBpcyBjb25zdHJhaW5lZCBieSBtaW5BbmdsZVxuICAgIC8vIFJlc3Qgc2VjdG9ycyBuZWVkcyByZWNhbGN1bGF0ZSBhbmdsZVxuXG4gICAgaWYgKHJlc3RBbmdsZSA8IFBJMiAmJiB2YWxpZERhdGFDb3VudCkge1xuICAgICAgLy8gQXZlcmFnZSB0aGUgYW5nbGUgaWYgcmVzdCBhbmdsZSBpcyBub3QgZW5vdWdoIGFmdGVyIGFsbCBhbmdsZXMgaXNcbiAgICAgIC8vIENvbnN0cmFpbmVkIGJ5IG1pbkFuZ2xlXG4gICAgICBpZiAocmVzdEFuZ2xlIDw9IDFlLTMpIHtcbiAgICAgICAgdmFyIGFuZ2xlID0gUEkyIC8gdmFsaWREYXRhQ291bnQ7XG4gICAgICAgIGRhdGEuZWFjaCh2YWx1ZURpbSwgZnVuY3Rpb24gKHZhbHVlLCBpZHgpIHtcbiAgICAgICAgICBpZiAoIWlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgdmFyIGxheW91dCA9IGRhdGEuZ2V0SXRlbUxheW91dChpZHgpO1xuICAgICAgICAgICAgbGF5b3V0LmFuZ2xlID0gYW5nbGU7XG4gICAgICAgICAgICBsYXlvdXQuc3RhcnRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBkaXIgKiBpZHggKiBhbmdsZTtcbiAgICAgICAgICAgIGxheW91dC5lbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBkaXIgKiAoaWR4ICsgMSkgKiBhbmdsZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdW5pdFJhZGlhbiA9IHJlc3RBbmdsZSAvIHZhbHVlU3VtTGFyZ2VyVGhhbk1pbkFuZ2xlO1xuICAgICAgICBjdXJyZW50QW5nbGUgPSBzdGFydEFuZ2xlO1xuICAgICAgICBkYXRhLmVhY2godmFsdWVEaW0sIGZ1bmN0aW9uICh2YWx1ZSwgaWR4KSB7XG4gICAgICAgICAgaWYgKCFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhciBsYXlvdXQgPSBkYXRhLmdldEl0ZW1MYXlvdXQoaWR4KTtcbiAgICAgICAgICAgIHZhciBhbmdsZSA9IGxheW91dC5hbmdsZSA9PT0gbWluQW5nbGUgPyBtaW5BbmdsZSA6IHZhbHVlICogdW5pdFJhZGlhbjtcbiAgICAgICAgICAgIGxheW91dC5zdGFydEFuZ2xlID0gY3VycmVudEFuZ2xlO1xuICAgICAgICAgICAgbGF5b3V0LmVuZEFuZ2xlID0gY3VycmVudEFuZ2xlICsgZGlyICogYW5nbGU7XG4gICAgICAgICAgICBjdXJyZW50QW5nbGUgKz0gZGlyICogYW5nbGU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYWJlbExheW91dChzZXJpZXNNb2RlbCwgciwgd2lkdGgsIGhlaWdodCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBfdXRpbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3V0aWxcIik7XG5cbnZhciByZXRyaWV2ZSA9IF91dGlsLnJldHJpZXZlO1xudmFyIGRlZmF1bHRzID0gX3V0aWwuZGVmYXVsdHM7XG52YXIgZXh0ZW5kID0gX3V0aWwuZXh0ZW5kO1xudmFyIGVhY2ggPSBfdXRpbC5lYWNoO1xuXG52YXIgZm9ybWF0VXRpbCA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2Zvcm1hdFwiKTtcblxudmFyIGdyYXBoaWMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9ncmFwaGljXCIpO1xuXG52YXIgTW9kZWwgPSByZXF1aXJlKFwiLi4vLi4vbW9kZWwvTW9kZWxcIik7XG5cbnZhciBfbnVtYmVyID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvbnVtYmVyXCIpO1xuXG52YXIgaXNSYWRpYW5Bcm91bmRaZXJvID0gX251bWJlci5pc1JhZGlhbkFyb3VuZFplcm87XG52YXIgcmVtUmFkaWFuID0gX251bWJlci5yZW1SYWRpYW47XG5cbnZhciBfc3ltYm9sID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvc3ltYm9sXCIpO1xuXG52YXIgY3JlYXRlU3ltYm9sID0gX3N5bWJvbC5jcmVhdGVTeW1ib2w7XG5cbnZhciBtYXRyaXhVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvbWF0cml4XCIpO1xuXG52YXIgX3ZlY3RvciA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3ZlY3RvclwiKTtcblxudmFyIHYyQXBwbHlUcmFuc2Zvcm0gPSBfdmVjdG9yLmFwcGx5VHJhbnNmb3JtO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgUEkgPSBNYXRoLlBJO1xuXG5mdW5jdGlvbiBtYWtlQXhpc0V2ZW50RGF0YUJhc2UoYXhpc01vZGVsKSB7XG4gIHZhciBldmVudERhdGEgPSB7XG4gICAgY29tcG9uZW50VHlwZTogYXhpc01vZGVsLm1haW5UeXBlXG4gIH07XG4gIGV2ZW50RGF0YVtheGlzTW9kZWwubWFpblR5cGUgKyAnSW5kZXgnXSA9IGF4aXNNb2RlbC5jb21wb25lbnRJbmRleDtcbiAgcmV0dXJuIGV2ZW50RGF0YTtcbn1cbi8qKlxuICogQSBmaW5hbCBheGlzIGlzIHRyYW5zbGF0ZWQgYW5kIHJvdGF0ZWQgZnJvbSBhIFwic3RhbmRhcmQgYXhpc1wiLlxuICogU28gb3B0LnBvc2l0aW9uIGFuZCBvcHQucm90YXRpb24gaXMgcmVxdWlyZWQuXG4gKlxuICogQSBzdGFuZGFyZCBheGlzIGlzIGFuZCBheGlzIGZyb20gWzAsIDBdIHRvIFswLCBheGlzRXh0ZW50WzFdXSxcbiAqIGZvciBleGFtcGxlOiAoMCwgMCkgLS0tLS0tLS0tLS0tPiAoMCwgNTApXG4gKlxuICogbmFtZURpcmVjdGlvbiBvciB0aWNrRGlyZWN0aW9uIG9yIGxhYmVsRGlyZWN0aW9uIGlzIDEgbWVhbnMgdGlja1xuICogb3IgbGFiZWwgaXMgYmVsb3cgdGhlIHN0YW5kYXJkIGF4aXMsIHdoZXJlYXMgaXMgLTEgbWVhbnMgYWJvdmVcbiAqIHRoZSBzdGFuZGFyZCBheGlzLiBsYWJlbE9mZnNldCBtZWFucyBvZmZzZXQgYmV0d2VlbiBsYWJlbCBhbmQgYXhpcyxcbiAqIHdoaWNoIGlzIHVzZWZ1bCB3aGVuICdvblplcm8nLCB3aGVyZSBheGlzTGFiZWwgaXMgaW4gdGhlIGdyaWQgYW5kXG4gKiBsYWJlbCBpbiBvdXRzaWRlIGdyaWQuXG4gKlxuICogVGlwczogbGlrZSBhbHdheXMsXG4gKiBwb3NpdGl2ZSByb3RhdGlvbiByZXByZXNlbnRzIGFudGljbG9ja3dpc2UsIGFuZCBuZWdhdGl2ZSByb3RhdGlvblxuICogcmVwcmVzZW50cyBjbG9ja3dpc2UuXG4gKiBUaGUgZGlyZWN0aW9uIG9mIHBvc2l0aW9uIGNvb3JkaW5hdGUgaXMgdGhlIHNhbWUgYXMgdGhlIGRpcmVjdGlvblxuICogb2Ygc2NyZWVuIGNvb3JkaW5hdGUuXG4gKlxuICogRG8gbm90IG5lZWQgdG8gY29uc2lkZXIgYXhpcyAnaW52ZXJzZScsIHdoaWNoIGlzIGF1dG8gcHJvY2Vzc2VkIGJ5XG4gKiBheGlzIGV4dGVudC5cbiAqXG4gKiBAcGFyYW0ge21vZHVsZTp6cmVuZGVyL2NvbnRhaW5lci9Hcm91cH0gZ3JvdXBcbiAqIEBwYXJhbSB7T2JqZWN0fSBheGlzTW9kZWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHQgU3RhbmRhcmQgYXhpcyBwYXJhbWV0ZXJzLlxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gb3B0LnBvc2l0aW9uIFt4LCB5XVxuICogQHBhcmFtIHtudW1iZXJ9IG9wdC5yb3RhdGlvbiBieSByYWRpYW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0Lm5hbWVEaXJlY3Rpb249MV0gMSBvciAtMSBVc2VkIHdoZW4gbmFtZUxvY2F0aW9uIGlzICdtaWRkbGUnIG9yICdjZW50ZXInLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHQudGlja0RpcmVjdGlvbj0xXSAxIG9yIC0xXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdC5sYWJlbERpcmVjdGlvbj0xXSAxIG9yIC0xXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdC5sYWJlbE9mZnNldD0wXSBVc2VmdWxsIHdoZW4gb25aZXJvLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHQuYXhpc0xhYmVsU2hvd10gZGVmYXVsdCBnZXQgZnJvbSBheGlzTW9kZWwuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdC5heGlzTmFtZV0gZGVmYXVsdCBnZXQgZnJvbSBheGlzTW9kZWwuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdC5heGlzTmFtZUF2YWlsYWJsZVdpZHRoXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHQubGFiZWxSb3RhdGVdIGJ5IGRlZ3JlZSwgZGVmYXVsdCBnZXQgZnJvbSBheGlzTW9kZWwuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdC5zdHJva2VDb250YWluVGhyZXNob2xkXSBEZWZhdWx0IGxhYmVsIGludGVydmFsIHdoZW4gbGFiZWxcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0Lm5hbWVUcnVuY2F0ZU1heFdpZHRoXVxuICovXG5cblxudmFyIEF4aXNCdWlsZGVyID0gZnVuY3Rpb24gKGF4aXNNb2RlbCwgb3B0KSB7XG4gIC8qKlxuICAgKiBAcmVhZE9ubHlcbiAgICovXG4gIHRoaXMub3B0ID0gb3B0O1xuICAvKipcbiAgICogQHJlYWRPbmx5XG4gICAqL1xuXG4gIHRoaXMuYXhpc01vZGVsID0gYXhpc01vZGVsOyAvLyBEZWZhdWx0IHZhbHVlXG5cbiAgZGVmYXVsdHMob3B0LCB7XG4gICAgbGFiZWxPZmZzZXQ6IDAsXG4gICAgbmFtZURpcmVjdGlvbjogMSxcbiAgICB0aWNrRGlyZWN0aW9uOiAxLFxuICAgIGxhYmVsRGlyZWN0aW9uOiAxLFxuICAgIHNpbGVudDogdHJ1ZVxuICB9KTtcbiAgLyoqXG4gICAqIEByZWFkT25seVxuICAgKi9cblxuICB0aGlzLmdyb3VwID0gbmV3IGdyYXBoaWMuR3JvdXAoKTsgLy8gRklYTUUgTm90IHVzZSBhIHNlcGVyYXRlIHRleHQgZ3JvdXA/XG5cbiAgdmFyIGR1bWJHcm91cCA9IG5ldyBncmFwaGljLkdyb3VwKHtcbiAgICBwb3NpdGlvbjogb3B0LnBvc2l0aW9uLnNsaWNlKCksXG4gICAgcm90YXRpb246IG9wdC5yb3RhdGlvblxuICB9KTsgLy8gdGhpcy5ncm91cC5hZGQoZHVtYkdyb3VwKTtcbiAgLy8gdGhpcy5fZHVtYkdyb3VwID0gZHVtYkdyb3VwO1xuXG4gIGR1bWJHcm91cC51cGRhdGVUcmFuc2Zvcm0oKTtcbiAgdGhpcy5fdHJhbnNmb3JtID0gZHVtYkdyb3VwLnRyYW5zZm9ybTtcbiAgdGhpcy5fZHVtYkdyb3VwID0gZHVtYkdyb3VwO1xufTtcblxuQXhpc0J1aWxkZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogQXhpc0J1aWxkZXIsXG4gIGhhc0J1aWxkZXI6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuICEhYnVpbGRlcnNbbmFtZV07XG4gIH0sXG4gIGFkZDogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBidWlsZGVyc1tuYW1lXS5jYWxsKHRoaXMpO1xuICB9LFxuICBnZXRHcm91cDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdyb3VwO1xuICB9XG59O1xudmFyIGJ1aWxkZXJzID0ge1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGF4aXNMaW5lOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdCA9IHRoaXMub3B0O1xuICAgIHZhciBheGlzTW9kZWwgPSB0aGlzLmF4aXNNb2RlbDtcblxuICAgIGlmICghYXhpc01vZGVsLmdldCgnYXhpc0xpbmUuc2hvdycpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGV4dGVudCA9IHRoaXMuYXhpc01vZGVsLmF4aXMuZ2V0RXh0ZW50KCk7XG4gICAgdmFyIG1hdHJpeCA9IHRoaXMuX3RyYW5zZm9ybTtcbiAgICB2YXIgcHQxID0gW2V4dGVudFswXSwgMF07XG4gICAgdmFyIHB0MiA9IFtleHRlbnRbMV0sIDBdO1xuXG4gICAgaWYgKG1hdHJpeCkge1xuICAgICAgdjJBcHBseVRyYW5zZm9ybShwdDEsIHB0MSwgbWF0cml4KTtcbiAgICAgIHYyQXBwbHlUcmFuc2Zvcm0ocHQyLCBwdDIsIG1hdHJpeCk7XG4gICAgfVxuXG4gICAgdmFyIGxpbmVTdHlsZSA9IGV4dGVuZCh7XG4gICAgICBsaW5lQ2FwOiAncm91bmQnXG4gICAgfSwgYXhpc01vZGVsLmdldE1vZGVsKCdheGlzTGluZS5saW5lU3R5bGUnKS5nZXRMaW5lU3R5bGUoKSk7XG4gICAgdGhpcy5ncm91cC5hZGQobmV3IGdyYXBoaWMuTGluZShncmFwaGljLnN1YlBpeGVsT3B0aW1pemVMaW5lKHtcbiAgICAgIC8vIElkIGZvciBhbmltYXRpb25cbiAgICAgIGFuaWQ6ICdsaW5lJyxcbiAgICAgIHNoYXBlOiB7XG4gICAgICAgIHgxOiBwdDFbMF0sXG4gICAgICAgIHkxOiBwdDFbMV0sXG4gICAgICAgIHgyOiBwdDJbMF0sXG4gICAgICAgIHkyOiBwdDJbMV1cbiAgICAgIH0sXG4gICAgICBzdHlsZTogbGluZVN0eWxlLFxuICAgICAgc3Ryb2tlQ29udGFpblRocmVzaG9sZDogb3B0LnN0cm9rZUNvbnRhaW5UaHJlc2hvbGQgfHwgNSxcbiAgICAgIHNpbGVudDogdHJ1ZSxcbiAgICAgIHoyOiAxXG4gICAgfSkpKTtcbiAgICB2YXIgYXJyb3dzID0gYXhpc01vZGVsLmdldCgnYXhpc0xpbmUuc3ltYm9sJyk7XG4gICAgdmFyIGFycm93U2l6ZSA9IGF4aXNNb2RlbC5nZXQoJ2F4aXNMaW5lLnN5bWJvbFNpemUnKTtcbiAgICB2YXIgYXJyb3dPZmZzZXQgPSBheGlzTW9kZWwuZ2V0KCdheGlzTGluZS5zeW1ib2xPZmZzZXQnKSB8fCAwO1xuXG4gICAgaWYgKHR5cGVvZiBhcnJvd09mZnNldCA9PT0gJ251bWJlcicpIHtcbiAgICAgIGFycm93T2Zmc2V0ID0gW2Fycm93T2Zmc2V0LCBhcnJvd09mZnNldF07XG4gICAgfVxuXG4gICAgaWYgKGFycm93cyAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGFycm93cyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gVXNlIHRoZSBzYW1lIGFycm93IGZvciBzdGFydCBhbmQgZW5kIHBvaW50XG4gICAgICAgIGFycm93cyA9IFthcnJvd3MsIGFycm93c107XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgYXJyb3dTaXplID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgYXJyb3dTaXplID09PSAnbnVtYmVyJykge1xuICAgICAgICAvLyBVc2UgdGhlIHNhbWUgc2l6ZSBmb3Igd2lkdGggYW5kIGhlaWdodFxuICAgICAgICBhcnJvd1NpemUgPSBbYXJyb3dTaXplLCBhcnJvd1NpemVdO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3ltYm9sV2lkdGggPSBhcnJvd1NpemVbMF07XG4gICAgICB2YXIgc3ltYm9sSGVpZ2h0ID0gYXJyb3dTaXplWzFdO1xuICAgICAgZWFjaChbe1xuICAgICAgICByb3RhdGU6IG9wdC5yb3RhdGlvbiArIE1hdGguUEkgLyAyLFxuICAgICAgICBvZmZzZXQ6IGFycm93T2Zmc2V0WzBdLFxuICAgICAgICByOiAwXG4gICAgICB9LCB7XG4gICAgICAgIHJvdGF0ZTogb3B0LnJvdGF0aW9uIC0gTWF0aC5QSSAvIDIsXG4gICAgICAgIG9mZnNldDogYXJyb3dPZmZzZXRbMV0sXG4gICAgICAgIHI6IE1hdGguc3FydCgocHQxWzBdIC0gcHQyWzBdKSAqIChwdDFbMF0gLSBwdDJbMF0pICsgKHB0MVsxXSAtIHB0MlsxXSkgKiAocHQxWzFdIC0gcHQyWzFdKSlcbiAgICAgIH1dLCBmdW5jdGlvbiAocG9pbnQsIGluZGV4KSB7XG4gICAgICAgIGlmIChhcnJvd3NbaW5kZXhdICE9PSAnbm9uZScgJiYgYXJyb3dzW2luZGV4XSAhPSBudWxsKSB7XG4gICAgICAgICAgdmFyIHN5bWJvbCA9IGNyZWF0ZVN5bWJvbChhcnJvd3NbaW5kZXhdLCAtc3ltYm9sV2lkdGggLyAyLCAtc3ltYm9sSGVpZ2h0IC8gMiwgc3ltYm9sV2lkdGgsIHN5bWJvbEhlaWdodCwgbGluZVN0eWxlLnN0cm9rZSwgdHJ1ZSk7IC8vIENhbGN1bGF0ZSBhcnJvdyBwb3NpdGlvbiB3aXRoIG9mZnNldFxuXG4gICAgICAgICAgdmFyIHIgPSBwb2ludC5yICsgcG9pbnQub2Zmc2V0O1xuICAgICAgICAgIHZhciBwb3MgPSBbcHQxWzBdICsgciAqIE1hdGguY29zKG9wdC5yb3RhdGlvbiksIHB0MVsxXSAtIHIgKiBNYXRoLnNpbihvcHQucm90YXRpb24pXTtcbiAgICAgICAgICBzeW1ib2wuYXR0cih7XG4gICAgICAgICAgICByb3RhdGlvbjogcG9pbnQucm90YXRlLFxuICAgICAgICAgICAgcG9zaXRpb246IHBvcyxcbiAgICAgICAgICAgIHNpbGVudDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuZ3JvdXAuYWRkKHN5bWJvbCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGF4aXNUaWNrTGFiZWw6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXhpc01vZGVsID0gdGhpcy5heGlzTW9kZWw7XG4gICAgdmFyIG9wdCA9IHRoaXMub3B0O1xuICAgIHZhciB0aWNrRWxzID0gYnVpbGRBeGlzVGljayh0aGlzLCBheGlzTW9kZWwsIG9wdCk7XG4gICAgdmFyIGxhYmVsRWxzID0gYnVpbGRBeGlzTGFiZWwodGhpcywgYXhpc01vZGVsLCBvcHQpO1xuICAgIGZpeE1pbk1heExhYmVsU2hvdyhheGlzTW9kZWwsIGxhYmVsRWxzLCB0aWNrRWxzKTtcbiAgfSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGF4aXNOYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdCA9IHRoaXMub3B0O1xuICAgIHZhciBheGlzTW9kZWwgPSB0aGlzLmF4aXNNb2RlbDtcbiAgICB2YXIgbmFtZSA9IHJldHJpZXZlKG9wdC5heGlzTmFtZSwgYXhpc01vZGVsLmdldCgnbmFtZScpKTtcblxuICAgIGlmICghbmFtZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuYW1lTG9jYXRpb24gPSBheGlzTW9kZWwuZ2V0KCduYW1lTG9jYXRpb24nKTtcbiAgICB2YXIgbmFtZURpcmVjdGlvbiA9IG9wdC5uYW1lRGlyZWN0aW9uO1xuICAgIHZhciB0ZXh0U3R5bGVNb2RlbCA9IGF4aXNNb2RlbC5nZXRNb2RlbCgnbmFtZVRleHRTdHlsZScpO1xuICAgIHZhciBnYXAgPSBheGlzTW9kZWwuZ2V0KCduYW1lR2FwJykgfHwgMDtcbiAgICB2YXIgZXh0ZW50ID0gdGhpcy5heGlzTW9kZWwuYXhpcy5nZXRFeHRlbnQoKTtcbiAgICB2YXIgZ2FwU2lnbmFsID0gZXh0ZW50WzBdID4gZXh0ZW50WzFdID8gLTEgOiAxO1xuICAgIHZhciBwb3MgPSBbbmFtZUxvY2F0aW9uID09PSAnc3RhcnQnID8gZXh0ZW50WzBdIC0gZ2FwU2lnbmFsICogZ2FwIDogbmFtZUxvY2F0aW9uID09PSAnZW5kJyA/IGV4dGVudFsxXSArIGdhcFNpZ25hbCAqIGdhcCA6IChleHRlbnRbMF0gKyBleHRlbnRbMV0pIC8gMiwgLy8gJ21pZGRsZSdcbiAgICAvLyBSZXVzZSBsYWJlbE9mZnNldC5cbiAgICBpc05hbWVMb2NhdGlvbkNlbnRlcihuYW1lTG9jYXRpb24pID8gb3B0LmxhYmVsT2Zmc2V0ICsgbmFtZURpcmVjdGlvbiAqIGdhcCA6IDBdO1xuICAgIHZhciBsYWJlbExheW91dDtcbiAgICB2YXIgbmFtZVJvdGF0aW9uID0gYXhpc01vZGVsLmdldCgnbmFtZVJvdGF0ZScpO1xuXG4gICAgaWYgKG5hbWVSb3RhdGlvbiAhPSBudWxsKSB7XG4gICAgICBuYW1lUm90YXRpb24gPSBuYW1lUm90YXRpb24gKiBQSSAvIDE4MDsgLy8gVG8gcmFkaWFuLlxuICAgIH1cblxuICAgIHZhciBheGlzTmFtZUF2YWlsYWJsZVdpZHRoO1xuXG4gICAgaWYgKGlzTmFtZUxvY2F0aW9uQ2VudGVyKG5hbWVMb2NhdGlvbikpIHtcbiAgICAgIGxhYmVsTGF5b3V0ID0gaW5uZXJUZXh0TGF5b3V0KG9wdC5yb3RhdGlvbiwgbmFtZVJvdGF0aW9uICE9IG51bGwgPyBuYW1lUm90YXRpb24gOiBvcHQucm90YXRpb24sIC8vIEFkYXB0IHRvIGF4aXMuXG4gICAgICBuYW1lRGlyZWN0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFiZWxMYXlvdXQgPSBlbmRUZXh0TGF5b3V0KG9wdCwgbmFtZUxvY2F0aW9uLCBuYW1lUm90YXRpb24gfHwgMCwgZXh0ZW50KTtcbiAgICAgIGF4aXNOYW1lQXZhaWxhYmxlV2lkdGggPSBvcHQuYXhpc05hbWVBdmFpbGFibGVXaWR0aDtcblxuICAgICAgaWYgKGF4aXNOYW1lQXZhaWxhYmxlV2lkdGggIT0gbnVsbCkge1xuICAgICAgICBheGlzTmFtZUF2YWlsYWJsZVdpZHRoID0gTWF0aC5hYnMoYXhpc05hbWVBdmFpbGFibGVXaWR0aCAvIE1hdGguc2luKGxhYmVsTGF5b3V0LnJvdGF0aW9uKSk7XG4gICAgICAgICFpc0Zpbml0ZShheGlzTmFtZUF2YWlsYWJsZVdpZHRoKSAmJiAoYXhpc05hbWVBdmFpbGFibGVXaWR0aCA9IG51bGwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB0ZXh0Rm9udCA9IHRleHRTdHlsZU1vZGVsLmdldEZvbnQoKTtcbiAgICB2YXIgdHJ1bmNhdGVPcHQgPSBheGlzTW9kZWwuZ2V0KCduYW1lVHJ1bmNhdGUnLCB0cnVlKSB8fCB7fTtcbiAgICB2YXIgZWxsaXBzaXMgPSB0cnVuY2F0ZU9wdC5lbGxpcHNpcztcbiAgICB2YXIgbWF4V2lkdGggPSByZXRyaWV2ZShvcHQubmFtZVRydW5jYXRlTWF4V2lkdGgsIHRydW5jYXRlT3B0Lm1heFdpZHRoLCBheGlzTmFtZUF2YWlsYWJsZVdpZHRoKTsgLy8gRklYTUVcbiAgICAvLyB0cnVuY2F0ZSByaWNoIHRleHQ/IChjb25zaWRlciBwZXJmb3JtYW5jZSlcblxuICAgIHZhciB0cnVuY2F0ZWRUZXh0ID0gZWxsaXBzaXMgIT0gbnVsbCAmJiBtYXhXaWR0aCAhPSBudWxsID8gZm9ybWF0VXRpbC50cnVuY2F0ZVRleHQobmFtZSwgbWF4V2lkdGgsIHRleHRGb250LCBlbGxpcHNpcywge1xuICAgICAgbWluQ2hhcjogMixcbiAgICAgIHBsYWNlaG9sZGVyOiB0cnVuY2F0ZU9wdC5wbGFjZWhvbGRlclxuICAgIH0pIDogbmFtZTtcbiAgICB2YXIgdG9vbHRpcE9wdCA9IGF4aXNNb2RlbC5nZXQoJ3Rvb2x0aXAnLCB0cnVlKTtcbiAgICB2YXIgbWFpblR5cGUgPSBheGlzTW9kZWwubWFpblR5cGU7XG4gICAgdmFyIGZvcm1hdHRlclBhcmFtcyA9IHtcbiAgICAgIGNvbXBvbmVudFR5cGU6IG1haW5UeXBlLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgICR2YXJzOiBbJ25hbWUnXVxuICAgIH07XG4gICAgZm9ybWF0dGVyUGFyYW1zW21haW5UeXBlICsgJ0luZGV4J10gPSBheGlzTW9kZWwuY29tcG9uZW50SW5kZXg7XG4gICAgdmFyIHRleHRFbCA9IG5ldyBncmFwaGljLlRleHQoe1xuICAgICAgLy8gSWQgZm9yIGFuaW1hdGlvblxuICAgICAgYW5pZDogJ25hbWUnLFxuICAgICAgX19mdWxsVGV4dDogbmFtZSxcbiAgICAgIF9fdHJ1bmNhdGVkVGV4dDogdHJ1bmNhdGVkVGV4dCxcbiAgICAgIHBvc2l0aW9uOiBwb3MsXG4gICAgICByb3RhdGlvbjogbGFiZWxMYXlvdXQucm90YXRpb24sXG4gICAgICBzaWxlbnQ6IGlzU2lsZW50KGF4aXNNb2RlbCksXG4gICAgICB6MjogMSxcbiAgICAgIHRvb2x0aXA6IHRvb2x0aXBPcHQgJiYgdG9vbHRpcE9wdC5zaG93ID8gZXh0ZW5kKHtcbiAgICAgICAgY29udGVudDogbmFtZSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgIH0sXG4gICAgICAgIGZvcm1hdHRlclBhcmFtczogZm9ybWF0dGVyUGFyYW1zXG4gICAgICB9LCB0b29sdGlwT3B0KSA6IG51bGxcbiAgICB9KTtcbiAgICBncmFwaGljLnNldFRleHRTdHlsZSh0ZXh0RWwuc3R5bGUsIHRleHRTdHlsZU1vZGVsLCB7XG4gICAgICB0ZXh0OiB0cnVuY2F0ZWRUZXh0LFxuICAgICAgdGV4dEZvbnQ6IHRleHRGb250LFxuICAgICAgdGV4dEZpbGw6IHRleHRTdHlsZU1vZGVsLmdldFRleHRDb2xvcigpIHx8IGF4aXNNb2RlbC5nZXQoJ2F4aXNMaW5lLmxpbmVTdHlsZS5jb2xvcicpLFxuICAgICAgdGV4dEFsaWduOiBsYWJlbExheW91dC50ZXh0QWxpZ24sXG4gICAgICB0ZXh0VmVydGljYWxBbGlnbjogbGFiZWxMYXlvdXQudGV4dFZlcnRpY2FsQWxpZ25cbiAgICB9KTtcblxuICAgIGlmIChheGlzTW9kZWwuZ2V0KCd0cmlnZ2VyRXZlbnQnKSkge1xuICAgICAgdGV4dEVsLmV2ZW50RGF0YSA9IG1ha2VBeGlzRXZlbnREYXRhQmFzZShheGlzTW9kZWwpO1xuICAgICAgdGV4dEVsLmV2ZW50RGF0YS50YXJnZXRUeXBlID0gJ2F4aXNOYW1lJztcbiAgICAgIHRleHRFbC5ldmVudERhdGEubmFtZSA9IG5hbWU7XG4gICAgfSAvLyBGSVhNRVxuXG5cbiAgICB0aGlzLl9kdW1iR3JvdXAuYWRkKHRleHRFbCk7XG5cbiAgICB0ZXh0RWwudXBkYXRlVHJhbnNmb3JtKCk7XG4gICAgdGhpcy5ncm91cC5hZGQodGV4dEVsKTtcbiAgICB0ZXh0RWwuZGVjb21wb3NlVHJhbnNmb3JtKCk7XG4gIH1cbn07XG4vKipcbiAqIEBwdWJsaWNcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRcbiAqIEBwYXJhbSB7bnVtYmVyfSBheGlzUm90YXRpb24gaW4gcmFkaWFuXG4gKiBAcGFyYW0ge251bWJlcn0gdGV4dFJvdGF0aW9uIGluIHJhZGlhblxuICogQHBhcmFtIHtudW1iZXJ9IGRpcmVjdGlvblxuICogQHJldHVybiB7T2JqZWN0fSB7XG4gKiAgcm90YXRpb24sIC8vIGFjY29yZGluZyB0byBheGlzXG4gKiAgdGV4dEFsaWduLFxuICogIHRleHRWZXJ0aWNhbEFsaWduXG4gKiB9XG4gKi9cblxudmFyIGlubmVyVGV4dExheW91dCA9IEF4aXNCdWlsZGVyLmlubmVyVGV4dExheW91dCA9IGZ1bmN0aW9uIChheGlzUm90YXRpb24sIHRleHRSb3RhdGlvbiwgZGlyZWN0aW9uKSB7XG4gIHZhciByb3RhdGlvbkRpZmYgPSByZW1SYWRpYW4odGV4dFJvdGF0aW9uIC0gYXhpc1JvdGF0aW9uKTtcbiAgdmFyIHRleHRBbGlnbjtcbiAgdmFyIHRleHRWZXJ0aWNhbEFsaWduO1xuXG4gIGlmIChpc1JhZGlhbkFyb3VuZFplcm8ocm90YXRpb25EaWZmKSkge1xuICAgIC8vIExhYmVsIGlzIHBhcmFsbGVsIHdpdGggYXhpcyBsaW5lLlxuICAgIHRleHRWZXJ0aWNhbEFsaWduID0gZGlyZWN0aW9uID4gMCA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gIH0gZWxzZSBpZiAoaXNSYWRpYW5Bcm91bmRaZXJvKHJvdGF0aW9uRGlmZiAtIFBJKSkge1xuICAgIC8vIExhYmVsIGlzIGludmVyc2UgcGFyYWxsZWwgd2l0aCBheGlzIGxpbmUuXG4gICAgdGV4dFZlcnRpY2FsQWxpZ24gPSBkaXJlY3Rpb24gPiAwID8gJ2JvdHRvbScgOiAndG9wJztcbiAgICB0ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgfSBlbHNlIHtcbiAgICB0ZXh0VmVydGljYWxBbGlnbiA9ICdtaWRkbGUnO1xuXG4gICAgaWYgKHJvdGF0aW9uRGlmZiA+IDAgJiYgcm90YXRpb25EaWZmIDwgUEkpIHtcbiAgICAgIHRleHRBbGlnbiA9IGRpcmVjdGlvbiA+IDAgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZXh0QWxpZ24gPSBkaXJlY3Rpb24gPiAwID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJvdGF0aW9uOiByb3RhdGlvbkRpZmYsXG4gICAgdGV4dEFsaWduOiB0ZXh0QWxpZ24sXG4gICAgdGV4dFZlcnRpY2FsQWxpZ246IHRleHRWZXJ0aWNhbEFsaWduXG4gIH07XG59O1xuXG5mdW5jdGlvbiBlbmRUZXh0TGF5b3V0KG9wdCwgdGV4dFBvc2l0aW9uLCB0ZXh0Um90YXRlLCBleHRlbnQpIHtcbiAgdmFyIHJvdGF0aW9uRGlmZiA9IHJlbVJhZGlhbih0ZXh0Um90YXRlIC0gb3B0LnJvdGF0aW9uKTtcbiAgdmFyIHRleHRBbGlnbjtcbiAgdmFyIHRleHRWZXJ0aWNhbEFsaWduO1xuICB2YXIgaW52ZXJzZSA9IGV4dGVudFswXSA+IGV4dGVudFsxXTtcbiAgdmFyIG9uTGVmdCA9IHRleHRQb3NpdGlvbiA9PT0gJ3N0YXJ0JyAmJiAhaW52ZXJzZSB8fCB0ZXh0UG9zaXRpb24gIT09ICdzdGFydCcgJiYgaW52ZXJzZTtcblxuICBpZiAoaXNSYWRpYW5Bcm91bmRaZXJvKHJvdGF0aW9uRGlmZiAtIFBJIC8gMikpIHtcbiAgICB0ZXh0VmVydGljYWxBbGlnbiA9IG9uTGVmdCA/ICdib3R0b20nIDogJ3RvcCc7XG4gICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gIH0gZWxzZSBpZiAoaXNSYWRpYW5Bcm91bmRaZXJvKHJvdGF0aW9uRGlmZiAtIFBJICogMS41KSkge1xuICAgIHRleHRWZXJ0aWNhbEFsaWduID0gb25MZWZ0ID8gJ3RvcCcgOiAnYm90dG9tJztcbiAgICB0ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgfSBlbHNlIHtcbiAgICB0ZXh0VmVydGljYWxBbGlnbiA9ICdtaWRkbGUnO1xuXG4gICAgaWYgKHJvdGF0aW9uRGlmZiA8IFBJICogMS41ICYmIHJvdGF0aW9uRGlmZiA+IFBJIC8gMikge1xuICAgICAgdGV4dEFsaWduID0gb25MZWZ0ID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9IGVsc2Uge1xuICAgICAgdGV4dEFsaWduID0gb25MZWZ0ID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJvdGF0aW9uOiByb3RhdGlvbkRpZmYsXG4gICAgdGV4dEFsaWduOiB0ZXh0QWxpZ24sXG4gICAgdGV4dFZlcnRpY2FsQWxpZ246IHRleHRWZXJ0aWNhbEFsaWduXG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzU2lsZW50KGF4aXNNb2RlbCkge1xuICB2YXIgdG9vbHRpcE9wdCA9IGF4aXNNb2RlbC5nZXQoJ3Rvb2x0aXAnKTtcbiAgcmV0dXJuIGF4aXNNb2RlbC5nZXQoJ3NpbGVudCcpIC8vIENvbnNpZGVyIG1vdXNlIGN1cnNvciwgYWRkIHRoZXNlIHJlc3RyaWN0aW9ucy5cbiAgfHwgIShheGlzTW9kZWwuZ2V0KCd0cmlnZ2VyRXZlbnQnKSB8fCB0b29sdGlwT3B0ICYmIHRvb2x0aXBPcHQuc2hvdyk7XG59XG5cbmZ1bmN0aW9uIGZpeE1pbk1heExhYmVsU2hvdyhheGlzTW9kZWwsIGxhYmVsRWxzLCB0aWNrRWxzKSB7XG4gIC8vIElmIG1pbiBvciBtYXggYXJlIHVzZXIgc2V0LCB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIElmIHRoZSB0aWNrIG9uIG1pbihtYXgpIGFyZSBvdmVybGFwIG9uIHRoZWlyIG5laWdoYm91ciB0aWNrXG4gIC8vIElmIHRoZXkgYXJlIG92ZXJsYXBwZWQsIHdlIG5lZWQgdG8gaGlkZSB0aGUgbWluKG1heCkgdGljayBsYWJlbFxuICB2YXIgc2hvd01pbkxhYmVsID0gYXhpc01vZGVsLmdldCgnYXhpc0xhYmVsLnNob3dNaW5MYWJlbCcpO1xuICB2YXIgc2hvd01heExhYmVsID0gYXhpc01vZGVsLmdldCgnYXhpc0xhYmVsLnNob3dNYXhMYWJlbCcpOyAvLyBGSVhNRVxuICAvLyBIYXZlIG5vdCBjb25zaWRlciBvbkJhbmQgeWV0LCB3aGVyZSB0aWNrIGVscyBpcyBtb3JlIHRoYW4gbGFiZWwgZWxzLlxuXG4gIGxhYmVsRWxzID0gbGFiZWxFbHMgfHwgW107XG4gIHRpY2tFbHMgPSB0aWNrRWxzIHx8IFtdO1xuICB2YXIgZmlyc3RMYWJlbCA9IGxhYmVsRWxzWzBdO1xuICB2YXIgbmV4dExhYmVsID0gbGFiZWxFbHNbMV07XG4gIHZhciBsYXN0TGFiZWwgPSBsYWJlbEVsc1tsYWJlbEVscy5sZW5ndGggLSAxXTtcbiAgdmFyIHByZXZMYWJlbCA9IGxhYmVsRWxzW2xhYmVsRWxzLmxlbmd0aCAtIDJdO1xuICB2YXIgZmlyc3RUaWNrID0gdGlja0Vsc1swXTtcbiAgdmFyIG5leHRUaWNrID0gdGlja0Vsc1sxXTtcbiAgdmFyIGxhc3RUaWNrID0gdGlja0Vsc1t0aWNrRWxzLmxlbmd0aCAtIDFdO1xuICB2YXIgcHJldlRpY2sgPSB0aWNrRWxzW3RpY2tFbHMubGVuZ3RoIC0gMl07XG5cbiAgaWYgKHNob3dNaW5MYWJlbCA9PT0gZmFsc2UpIHtcbiAgICBpZ25vcmVFbChmaXJzdExhYmVsKTtcbiAgICBpZ25vcmVFbChmaXJzdFRpY2spO1xuICB9IGVsc2UgaWYgKGlzVHdvTGFiZWxPdmVybGFwcGVkKGZpcnN0TGFiZWwsIG5leHRMYWJlbCkpIHtcbiAgICBpZiAoc2hvd01pbkxhYmVsKSB7XG4gICAgICBpZ25vcmVFbChuZXh0TGFiZWwpO1xuICAgICAgaWdub3JlRWwobmV4dFRpY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZ25vcmVFbChmaXJzdExhYmVsKTtcbiAgICAgIGlnbm9yZUVsKGZpcnN0VGljayk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHNob3dNYXhMYWJlbCA9PT0gZmFsc2UpIHtcbiAgICBpZ25vcmVFbChsYXN0TGFiZWwpO1xuICAgIGlnbm9yZUVsKGxhc3RUaWNrKTtcbiAgfSBlbHNlIGlmIChpc1R3b0xhYmVsT3ZlcmxhcHBlZChwcmV2TGFiZWwsIGxhc3RMYWJlbCkpIHtcbiAgICBpZiAoc2hvd01heExhYmVsKSB7XG4gICAgICBpZ25vcmVFbChwcmV2TGFiZWwpO1xuICAgICAgaWdub3JlRWwocHJldlRpY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZ25vcmVFbChsYXN0TGFiZWwpO1xuICAgICAgaWdub3JlRWwobGFzdFRpY2spO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpZ25vcmVFbChlbCkge1xuICBlbCAmJiAoZWwuaWdub3JlID0gdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGlzVHdvTGFiZWxPdmVybGFwcGVkKGN1cnJlbnQsIG5leHQsIGxhYmVsTGF5b3V0KSB7XG4gIC8vIGN1cnJlbnQgYW5kIG5leHQgaGFzIHRoZSBzYW1lIHJvdGF0aW9uLlxuICB2YXIgZmlyc3RSZWN0ID0gY3VycmVudCAmJiBjdXJyZW50LmdldEJvdW5kaW5nUmVjdCgpLmNsb25lKCk7XG4gIHZhciBuZXh0UmVjdCA9IG5leHQgJiYgbmV4dC5nZXRCb3VuZGluZ1JlY3QoKS5jbG9uZSgpO1xuXG4gIGlmICghZmlyc3RSZWN0IHx8ICFuZXh0UmVjdCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBXaGVuIGNoZWNraW5nIGludGVyc2VjdCBvZiB0d28gcm90YXRlZCBsYWJlbHMsIHdlIHVzZSBtUm90YXRpb25CYWNrXG4gIC8vIHRvIGF2b2lkIHRoYXQgYm91bmRpbmdSZWN0IGlzIGVubGFyZ2Ugd2hlbiB1c2luZyBgYm91bmRpbmdSZWN0LmFwcGx5VHJhbnNmb3JtYC5cblxuXG4gIHZhciBtUm90YXRpb25CYWNrID0gbWF0cml4VXRpbC5pZGVudGl0eShbXSk7XG4gIG1hdHJpeFV0aWwucm90YXRlKG1Sb3RhdGlvbkJhY2ssIG1Sb3RhdGlvbkJhY2ssIC1jdXJyZW50LnJvdGF0aW9uKTtcbiAgZmlyc3RSZWN0LmFwcGx5VHJhbnNmb3JtKG1hdHJpeFV0aWwubXVsKFtdLCBtUm90YXRpb25CYWNrLCBjdXJyZW50LmdldExvY2FsVHJhbnNmb3JtKCkpKTtcbiAgbmV4dFJlY3QuYXBwbHlUcmFuc2Zvcm0obWF0cml4VXRpbC5tdWwoW10sIG1Sb3RhdGlvbkJhY2ssIG5leHQuZ2V0TG9jYWxUcmFuc2Zvcm0oKSkpO1xuICByZXR1cm4gZmlyc3RSZWN0LmludGVyc2VjdChuZXh0UmVjdCk7XG59XG5cbmZ1bmN0aW9uIGlzTmFtZUxvY2F0aW9uQ2VudGVyKG5hbWVMb2NhdGlvbikge1xuICByZXR1cm4gbmFtZUxvY2F0aW9uID09PSAnbWlkZGxlJyB8fCBuYW1lTG9jYXRpb24gPT09ICdjZW50ZXInO1xufVxuXG5mdW5jdGlvbiBidWlsZEF4aXNUaWNrKGF4aXNCdWlsZGVyLCBheGlzTW9kZWwsIG9wdCkge1xuICB2YXIgYXhpcyA9IGF4aXNNb2RlbC5heGlzO1xuXG4gIGlmICghYXhpc01vZGVsLmdldCgnYXhpc1RpY2suc2hvdycpIHx8IGF4aXMuc2NhbGUuaXNCbGFuaygpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHRpY2tNb2RlbCA9IGF4aXNNb2RlbC5nZXRNb2RlbCgnYXhpc1RpY2snKTtcbiAgdmFyIGxpbmVTdHlsZU1vZGVsID0gdGlja01vZGVsLmdldE1vZGVsKCdsaW5lU3R5bGUnKTtcbiAgdmFyIHRpY2tMZW4gPSB0aWNrTW9kZWwuZ2V0KCdsZW5ndGgnKTtcbiAgdmFyIHRpY2tzQ29vcmRzID0gYXhpcy5nZXRUaWNrc0Nvb3JkcygpO1xuICB2YXIgcHQxID0gW107XG4gIHZhciBwdDIgPSBbXTtcbiAgdmFyIG1hdHJpeCA9IGF4aXNCdWlsZGVyLl90cmFuc2Zvcm07XG4gIHZhciB0aWNrRWxzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aWNrc0Nvb3Jkcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0aWNrQ29vcmQgPSB0aWNrc0Nvb3Jkc1tpXS5jb29yZDtcbiAgICBwdDFbMF0gPSB0aWNrQ29vcmQ7XG4gICAgcHQxWzFdID0gMDtcbiAgICBwdDJbMF0gPSB0aWNrQ29vcmQ7XG4gICAgcHQyWzFdID0gb3B0LnRpY2tEaXJlY3Rpb24gKiB0aWNrTGVuO1xuXG4gICAgaWYgKG1hdHJpeCkge1xuICAgICAgdjJBcHBseVRyYW5zZm9ybShwdDEsIHB0MSwgbWF0cml4KTtcbiAgICAgIHYyQXBwbHlUcmFuc2Zvcm0ocHQyLCBwdDIsIG1hdHJpeCk7XG4gICAgfSAvLyBUaWNrIGxpbmUsIE5vdCB1c2UgZ3JvdXAgdHJhbnNmb3JtIHRvIGhhdmUgYmV0dGVyIGxpbmUgZHJhd1xuXG5cbiAgICB2YXIgdGlja0VsID0gbmV3IGdyYXBoaWMuTGluZShncmFwaGljLnN1YlBpeGVsT3B0aW1pemVMaW5lKHtcbiAgICAgIC8vIElkIGZvciBhbmltYXRpb25cbiAgICAgIGFuaWQ6ICd0aWNrXycgKyB0aWNrc0Nvb3Jkc1tpXS50aWNrVmFsdWUsXG4gICAgICBzaGFwZToge1xuICAgICAgICB4MTogcHQxWzBdLFxuICAgICAgICB5MTogcHQxWzFdLFxuICAgICAgICB4MjogcHQyWzBdLFxuICAgICAgICB5MjogcHQyWzFdXG4gICAgICB9LFxuICAgICAgc3R5bGU6IGRlZmF1bHRzKGxpbmVTdHlsZU1vZGVsLmdldExpbmVTdHlsZSgpLCB7XG4gICAgICAgIHN0cm9rZTogYXhpc01vZGVsLmdldCgnYXhpc0xpbmUubGluZVN0eWxlLmNvbG9yJylcbiAgICAgIH0pLFxuICAgICAgejI6IDIsXG4gICAgICBzaWxlbnQ6IHRydWVcbiAgICB9KSk7XG4gICAgYXhpc0J1aWxkZXIuZ3JvdXAuYWRkKHRpY2tFbCk7XG4gICAgdGlja0Vscy5wdXNoKHRpY2tFbCk7XG4gIH1cblxuICByZXR1cm4gdGlja0Vscztcbn1cblxuZnVuY3Rpb24gYnVpbGRBeGlzTGFiZWwoYXhpc0J1aWxkZXIsIGF4aXNNb2RlbCwgb3B0KSB7XG4gIHZhciBheGlzID0gYXhpc01vZGVsLmF4aXM7XG4gIHZhciBzaG93ID0gcmV0cmlldmUob3B0LmF4aXNMYWJlbFNob3csIGF4aXNNb2RlbC5nZXQoJ2F4aXNMYWJlbC5zaG93JykpO1xuXG4gIGlmICghc2hvdyB8fCBheGlzLnNjYWxlLmlzQmxhbmsoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBsYWJlbE1vZGVsID0gYXhpc01vZGVsLmdldE1vZGVsKCdheGlzTGFiZWwnKTtcbiAgdmFyIGxhYmVsTWFyZ2luID0gbGFiZWxNb2RlbC5nZXQoJ21hcmdpbicpO1xuICB2YXIgbGFiZWxzID0gYXhpcy5nZXRWaWV3TGFiZWxzKCk7IC8vIFNwZWNpYWwgbGFiZWwgcm90YXRlLlxuXG4gIHZhciBsYWJlbFJvdGF0aW9uID0gKHJldHJpZXZlKG9wdC5sYWJlbFJvdGF0ZSwgbGFiZWxNb2RlbC5nZXQoJ3JvdGF0ZScpKSB8fCAwKSAqIFBJIC8gMTgwO1xuICB2YXIgbGFiZWxMYXlvdXQgPSBpbm5lclRleHRMYXlvdXQob3B0LnJvdGF0aW9uLCBsYWJlbFJvdGF0aW9uLCBvcHQubGFiZWxEaXJlY3Rpb24pO1xuICB2YXIgcmF3Q2F0ZWdvcnlEYXRhID0gYXhpc01vZGVsLmdldENhdGVnb3JpZXModHJ1ZSk7XG4gIHZhciBsYWJlbEVscyA9IFtdO1xuICB2YXIgc2lsZW50ID0gaXNTaWxlbnQoYXhpc01vZGVsKTtcbiAgdmFyIHRyaWdnZXJFdmVudCA9IGF4aXNNb2RlbC5nZXQoJ3RyaWdnZXJFdmVudCcpO1xuICBlYWNoKGxhYmVscywgZnVuY3Rpb24gKGxhYmVsSXRlbSwgaW5kZXgpIHtcbiAgICB2YXIgdGlja1ZhbHVlID0gbGFiZWxJdGVtLnRpY2tWYWx1ZTtcbiAgICB2YXIgZm9ybWF0dGVkTGFiZWwgPSBsYWJlbEl0ZW0uZm9ybWF0dGVkTGFiZWw7XG4gICAgdmFyIHJhd0xhYmVsID0gbGFiZWxJdGVtLnJhd0xhYmVsO1xuICAgIHZhciBpdGVtTGFiZWxNb2RlbCA9IGxhYmVsTW9kZWw7XG5cbiAgICBpZiAocmF3Q2F0ZWdvcnlEYXRhICYmIHJhd0NhdGVnb3J5RGF0YVt0aWNrVmFsdWVdICYmIHJhd0NhdGVnb3J5RGF0YVt0aWNrVmFsdWVdLnRleHRTdHlsZSkge1xuICAgICAgaXRlbUxhYmVsTW9kZWwgPSBuZXcgTW9kZWwocmF3Q2F0ZWdvcnlEYXRhW3RpY2tWYWx1ZV0udGV4dFN0eWxlLCBsYWJlbE1vZGVsLCBheGlzTW9kZWwuZWNNb2RlbCk7XG4gICAgfVxuXG4gICAgdmFyIHRleHRDb2xvciA9IGl0ZW1MYWJlbE1vZGVsLmdldFRleHRDb2xvcigpIHx8IGF4aXNNb2RlbC5nZXQoJ2F4aXNMaW5lLmxpbmVTdHlsZS5jb2xvcicpO1xuICAgIHZhciB0aWNrQ29vcmQgPSBheGlzLmRhdGFUb0Nvb3JkKHRpY2tWYWx1ZSk7XG4gICAgdmFyIHBvcyA9IFt0aWNrQ29vcmQsIG9wdC5sYWJlbE9mZnNldCArIG9wdC5sYWJlbERpcmVjdGlvbiAqIGxhYmVsTWFyZ2luXTtcbiAgICB2YXIgdGV4dEVsID0gbmV3IGdyYXBoaWMuVGV4dCh7XG4gICAgICAvLyBJZCBmb3IgYW5pbWF0aW9uXG4gICAgICBhbmlkOiAnbGFiZWxfJyArIHRpY2tWYWx1ZSxcbiAgICAgIHBvc2l0aW9uOiBwb3MsXG4gICAgICByb3RhdGlvbjogbGFiZWxMYXlvdXQucm90YXRpb24sXG4gICAgICBzaWxlbnQ6IHNpbGVudCxcbiAgICAgIHoyOiAxMFxuICAgIH0pO1xuICAgIGdyYXBoaWMuc2V0VGV4dFN0eWxlKHRleHRFbC5zdHlsZSwgaXRlbUxhYmVsTW9kZWwsIHtcbiAgICAgIHRleHQ6IGZvcm1hdHRlZExhYmVsLFxuICAgICAgdGV4dEFsaWduOiBpdGVtTGFiZWxNb2RlbC5nZXRTaGFsbG93KCdhbGlnbicsIHRydWUpIHx8IGxhYmVsTGF5b3V0LnRleHRBbGlnbixcbiAgICAgIHRleHRWZXJ0aWNhbEFsaWduOiBpdGVtTGFiZWxNb2RlbC5nZXRTaGFsbG93KCd2ZXJ0aWNhbEFsaWduJywgdHJ1ZSkgfHwgaXRlbUxhYmVsTW9kZWwuZ2V0U2hhbGxvdygnYmFzZWxpbmUnLCB0cnVlKSB8fCBsYWJlbExheW91dC50ZXh0VmVydGljYWxBbGlnbixcbiAgICAgIHRleHRGaWxsOiB0eXBlb2YgdGV4dENvbG9yID09PSAnZnVuY3Rpb24nID8gdGV4dENvbG9yKCAvLyAoMSkgSW4gY2F0ZWdvcnkgYXhpcyB3aXRoIGRhdGEgem9vbSwgdGljayBpcyBub3QgdGhlIG9yaWdpbmFsXG4gICAgICAvLyBpbmRleCBvZiBheGlzLmRhdGEuIFNvIHRpY2sgc2hvdWxkIG5vdCBiZSBleHBvc2VkIHRvIHVzZXJcbiAgICAgIC8vIGluIGNhdGVnb3J5IGF4aXMuXG4gICAgICAvLyAoMikgQ29tcGF0aWJsZSB3aXRoIHByZXZpb3VzIHZlcnNpb24sIHdoaWNoIGFsd2F5cyB1c2UgZm9ybWF0dGVkIGxhYmVsIGFzXG4gICAgICAvLyBpbnB1dC4gQnV0IGluIGludGVydmFsIHNjYWxlIHRoZSBmb3JtYXR0ZWQgbGFiZWwgaXMgbGlrZSAnMjIzLDQ0NScsIHdoaWNoXG4gICAgICAvLyBtYWtlZCB1c2VyIHJlcGFsY2UgJywnLiBTbyB3ZSBtb2RpZnkgaXQgdG8gcmV0dXJuIG9yaWdpbmFsIHZhbCBidXQgcmVtYWluXG4gICAgICAvLyBpdCBhcyAnc3RyaW5nJyB0byBhdm9pZCBlcnJvciBpbiByZXBsYWNpbmcuXG4gICAgICBheGlzLnR5cGUgPT09ICdjYXRlZ29yeScgPyByYXdMYWJlbCA6IGF4aXMudHlwZSA9PT0gJ3ZhbHVlJyA/IHRpY2tWYWx1ZSArICcnIDogdGlja1ZhbHVlLCBpbmRleCkgOiB0ZXh0Q29sb3JcbiAgICB9KTsgLy8gUGFjayBkYXRhIGZvciBtb3VzZSBldmVudFxuXG4gICAgaWYgKHRyaWdnZXJFdmVudCkge1xuICAgICAgdGV4dEVsLmV2ZW50RGF0YSA9IG1ha2VBeGlzRXZlbnREYXRhQmFzZShheGlzTW9kZWwpO1xuICAgICAgdGV4dEVsLmV2ZW50RGF0YS50YXJnZXRUeXBlID0gJ2F4aXNMYWJlbCc7XG4gICAgICB0ZXh0RWwuZXZlbnREYXRhLnZhbHVlID0gcmF3TGFiZWw7XG4gICAgfSAvLyBGSVhNRVxuXG5cbiAgICBheGlzQnVpbGRlci5fZHVtYkdyb3VwLmFkZCh0ZXh0RWwpO1xuXG4gICAgdGV4dEVsLnVwZGF0ZVRyYW5zZm9ybSgpO1xuICAgIGxhYmVsRWxzLnB1c2godGV4dEVsKTtcbiAgICBheGlzQnVpbGRlci5ncm91cC5hZGQodGV4dEVsKTtcbiAgICB0ZXh0RWwuZGVjb21wb3NlVHJhbnNmb3JtKCk7XG4gIH0pO1xuICByZXR1cm4gbGFiZWxFbHM7XG59XG5cbnZhciBfZGVmYXVsdCA9IEF4aXNCdWlsZGVyO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgX2NvbmZpZyA9IHJlcXVpcmUoXCIuLi8uLi9jb25maWdcIik7XG5cbnZhciBfX0RFVl9fID0gX2NvbmZpZy5fX0RFVl9fO1xuXG52YXIgZWNoYXJ0cyA9IHJlcXVpcmUoXCIuLi8uLi9lY2hhcnRzXCIpO1xuXG52YXIgYXhpc1BvaW50ZXJNb2RlbEhlbHBlciA9IHJlcXVpcmUoXCIuLi9heGlzUG9pbnRlci9tb2RlbEhlbHBlclwiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG4vKipcbiAqIEJhc2UgY2xhc3Mgb2YgQXhpc1ZpZXcuXG4gKi9cbnZhciBBeGlzVmlldyA9IGVjaGFydHMuZXh0ZW5kQ29tcG9uZW50Vmlldyh7XG4gIHR5cGU6ICdheGlzJyxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9heGlzUG9pbnRlcjogbnVsbCxcblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgYXhpc1BvaW50ZXJDbGFzczogbnVsbCxcblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICByZW5kZXI6IGZ1bmN0aW9uIChheGlzTW9kZWwsIGVjTW9kZWwsIGFwaSwgcGF5bG9hZCkge1xuICAgIC8vIEZJWE1FXG4gICAgLy8gVGhpcyBwcm9jZXNzIHNob3VsZCBwcm9mb3JtZWQgYWZ0ZXIgY29vcmRpbmF0ZSBzeXN0ZW1zIHVwZGF0ZWRcbiAgICAvLyAoYXhpcyBzY2FsZSB1cGRhdGVkKSwgYW5kIHNob3VsZCBiZSBwZXJmb3JtZWQgZWFjaCB0aW1lIHVwZGF0ZS5cbiAgICAvLyBTbyBwdXQgaXQgaGVyZSB0ZW1wb3JhcmlseSwgYWx0aG91Z2ggaXQgaXMgbm90IGFwcHJvcHJpYXRlIHRvXG4gICAgLy8gcHV0IGEgbW9kZWwtd3JpdGluZyBwcm9jZWR1cmUgaW4gYHZpZXdgLlxuICAgIHRoaXMuYXhpc1BvaW50ZXJDbGFzcyAmJiBheGlzUG9pbnRlck1vZGVsSGVscGVyLmZpeFZhbHVlKGF4aXNNb2RlbCk7XG4gICAgQXhpc1ZpZXcuc3VwZXJBcHBseSh0aGlzLCAncmVuZGVyJywgYXJndW1lbnRzKTtcbiAgICB1cGRhdGVBeGlzUG9pbnRlcih0aGlzLCBheGlzTW9kZWwsIGVjTW9kZWwsIGFwaSwgcGF5bG9hZCwgdHJ1ZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFjdGlvbiBoYW5kbGVyLlxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvY29vcmQvY2FydGVzaWFuL0F4aXNNb2RlbH0gYXhpc01vZGVsXG4gICAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvbW9kZWwvR2xvYmFsfSBlY01vZGVsXG4gICAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvRXh0ZW5zaW9uQVBJfSBhcGlcbiAgICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWRcbiAgICovXG4gIHVwZGF0ZUF4aXNQb2ludGVyOiBmdW5jdGlvbiAoYXhpc01vZGVsLCBlY01vZGVsLCBhcGksIHBheWxvYWQsIGZvcmNlKSB7XG4gICAgdXBkYXRlQXhpc1BvaW50ZXIodGhpcywgYXhpc01vZGVsLCBlY01vZGVsLCBhcGksIHBheWxvYWQsIGZhbHNlKTtcbiAgfSxcblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICByZW1vdmU6IGZ1bmN0aW9uIChlY01vZGVsLCBhcGkpIHtcbiAgICB2YXIgYXhpc1BvaW50ZXIgPSB0aGlzLl9heGlzUG9pbnRlcjtcbiAgICBheGlzUG9pbnRlciAmJiBheGlzUG9pbnRlci5yZW1vdmUoYXBpKTtcbiAgICBBeGlzVmlldy5zdXBlckFwcGx5KHRoaXMsICdyZW1vdmUnLCBhcmd1bWVudHMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGRpc3Bvc2U6IGZ1bmN0aW9uIChlY01vZGVsLCBhcGkpIHtcbiAgICBkaXNwb3NlQXhpc1BvaW50ZXIodGhpcywgYXBpKTtcbiAgICBBeGlzVmlldy5zdXBlckFwcGx5KHRoaXMsICdkaXNwb3NlJywgYXJndW1lbnRzKTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHVwZGF0ZUF4aXNQb2ludGVyKGF4aXNWaWV3LCBheGlzTW9kZWwsIGVjTW9kZWwsIGFwaSwgcGF5bG9hZCwgZm9yY2VSZW5kZXIpIHtcbiAgdmFyIENsYXp6ID0gQXhpc1ZpZXcuZ2V0QXhpc1BvaW50ZXJDbGFzcyhheGlzVmlldy5heGlzUG9pbnRlckNsYXNzKTtcblxuICBpZiAoIUNsYXp6KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGF4aXNQb2ludGVyTW9kZWwgPSBheGlzUG9pbnRlck1vZGVsSGVscGVyLmdldEF4aXNQb2ludGVyTW9kZWwoYXhpc01vZGVsKTtcbiAgYXhpc1BvaW50ZXJNb2RlbCA/IChheGlzVmlldy5fYXhpc1BvaW50ZXIgfHwgKGF4aXNWaWV3Ll9heGlzUG9pbnRlciA9IG5ldyBDbGF6eigpKSkucmVuZGVyKGF4aXNNb2RlbCwgYXhpc1BvaW50ZXJNb2RlbCwgYXBpLCBmb3JjZVJlbmRlcikgOiBkaXNwb3NlQXhpc1BvaW50ZXIoYXhpc1ZpZXcsIGFwaSk7XG59XG5cbmZ1bmN0aW9uIGRpc3Bvc2VBeGlzUG9pbnRlcihheGlzVmlldywgZWNNb2RlbCwgYXBpKSB7XG4gIHZhciBheGlzUG9pbnRlciA9IGF4aXNWaWV3Ll9heGlzUG9pbnRlcjtcbiAgYXhpc1BvaW50ZXIgJiYgYXhpc1BvaW50ZXIuZGlzcG9zZShlY01vZGVsLCBhcGkpO1xuICBheGlzVmlldy5fYXhpc1BvaW50ZXIgPSBudWxsO1xufVxuXG52YXIgYXhpc1BvaW50ZXJDbGF6eiA9IFtdO1xuXG5BeGlzVmlldy5yZWdpc3RlckF4aXNQb2ludGVyQ2xhc3MgPSBmdW5jdGlvbiAodHlwZSwgY2xhenopIHtcbiAgYXhpc1BvaW50ZXJDbGF6elt0eXBlXSA9IGNsYXp6O1xufTtcblxuQXhpc1ZpZXcuZ2V0QXhpc1BvaW50ZXJDbGFzcyA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gIHJldHVybiB0eXBlICYmIGF4aXNQb2ludGVyQ2xhenpbdHlwZV07XG59O1xuXG52YXIgX2RlZmF1bHQgPSBBeGlzVmlldztcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIGVjaGFydHMgPSByZXF1aXJlKFwiLi4vZWNoYXJ0c1wiKTtcblxudmFyIHpyVXRpbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3V0aWxcIik7XG5cbnZhciBheGlzUG9pbnRlck1vZGVsSGVscGVyID0gcmVxdWlyZShcIi4vYXhpc1BvaW50ZXIvbW9kZWxIZWxwZXJcIik7XG5cbnZhciBheGlzVHJpZ2dlciA9IHJlcXVpcmUoXCIuL2F4aXNQb2ludGVyL2F4aXNUcmlnZ2VyXCIpO1xuXG5yZXF1aXJlKFwiLi9heGlzUG9pbnRlci9BeGlzUG9pbnRlck1vZGVsXCIpO1xuXG5yZXF1aXJlKFwiLi9heGlzUG9pbnRlci9BeGlzUG9pbnRlclZpZXdcIik7XG5cbnJlcXVpcmUoXCIuL2F4aXNQb2ludGVyL0NhcnRlc2lhbkF4aXNQb2ludGVyXCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG4vLyBDYXJ0ZXNpYW5BeGlzUG9pbnRlciBpcyBub3Qgc3VwcG9zZWQgdG8gYmUgcmVxdWlyZWQgaGVyZS4gQnV0IGNvbnNpZGVyXG4vLyBlY2hhcnRzLnNpbXBsZS5qcyBhbmQgb25saW5lIGJ1aWxkIHRvb2x0aXAsIHdoaWNoIG9ubHkgcmVxdWlyZSBncmlkU2ltcGxlLFxuLy8gQ2FydGVzaWFuQXhpc1BvaW50ZXIgc2hvdWxkIGJlIGFibGUgdG8gcmVxdWlyZWQgc29tZXdoZXJlLlxuZWNoYXJ0cy5yZWdpc3RlclByZXByb2Nlc3NvcihmdW5jdGlvbiAob3B0aW9uKSB7XG4gIC8vIEFsd2F5cyBoYXMgYSBnbG9iYWwgYXhpc1BvaW50ZXJNb2RlbCBmb3IgZGVmYXVsdCBzZXR0aW5nLlxuICBpZiAob3B0aW9uKSB7XG4gICAgKCFvcHRpb24uYXhpc1BvaW50ZXIgfHwgb3B0aW9uLmF4aXNQb2ludGVyLmxlbmd0aCA9PT0gMCkgJiYgKG9wdGlvbi5heGlzUG9pbnRlciA9IHt9KTtcbiAgICB2YXIgbGluayA9IG9wdGlvbi5heGlzUG9pbnRlci5saW5rOyAvLyBOb3JtYWxpemUgdG8gYXJyYXkgdG8gYXZvaWQgb2JqZWN0IG1lcmdpbi4gQnV0IGlmIGxpbmtcbiAgICAvLyBpcyBub3Qgc2V0LCByZW1haW4gbnVsbC91bmRlZmluZWQsIG90aGVyd2lzZSBpdCB3aWxsXG4gICAgLy8gb3ZlcnJpZGUgZXhpc3RlbnQgbGluayBzZXR0aW5nLlxuXG4gICAgaWYgKGxpbmsgJiYgIXpyVXRpbC5pc0FycmF5KGxpbmspKSB7XG4gICAgICBvcHRpb24uYXhpc1BvaW50ZXIubGluayA9IFtsaW5rXTtcbiAgICB9XG4gIH1cbn0pOyAvLyBUaGlzIHByb2Nlc3Mgc2hvdWxkIHByb2Zvcm1lZCBhZnRlciBjb29yZGluYXRlIHN5c3RlbXMgY3JlYXRlZFxuLy8gYW5kIHNlcmllcyBkYXRhIHByb2Nlc3NlZC4gU28gcHV0IGl0IG9uIHN0YXRpc3RpYyBwcm9jZXNzaW5nIHN0YWdlLlxuXG5lY2hhcnRzLnJlZ2lzdGVyUHJvY2Vzc29yKGVjaGFydHMuUFJJT1JJVFkuUFJPQ0VTU09SLlNUQVRJU1RJQywgZnVuY3Rpb24gKGVjTW9kZWwsIGFwaSkge1xuICAvLyBCdWlsZCBheGlzUG9pbnRlck1vZGVsLCBtZXJnaW4gdG9vbHRpcC5heGlzUG9pbnRlciBtb2RlbCBmb3IgZWFjaCBheGlzLlxuICAvLyBhbGxBeGVzSW5mbyBzaG91bGQgYmUgdXBkYXRlZCB3aGVuIHNldE9wdGlvbiBwZXJmb3JtZWQuXG4gIGVjTW9kZWwuZ2V0Q29tcG9uZW50KCdheGlzUG9pbnRlcicpLmNvb3JkU3lzQXhlc0luZm8gPSBheGlzUG9pbnRlck1vZGVsSGVscGVyLmNvbGxlY3QoZWNNb2RlbCwgYXBpKTtcbn0pOyAvLyBCcm9hZGNhc3QgdG8gYWxsIHZpZXdzLlxuXG5lY2hhcnRzLnJlZ2lzdGVyQWN0aW9uKHtcbiAgdHlwZTogJ3VwZGF0ZUF4aXNQb2ludGVyJyxcbiAgZXZlbnQ6ICd1cGRhdGVBeGlzUG9pbnRlcicsXG4gIHVwZGF0ZTogJzp1cGRhdGVBeGlzUG9pbnRlcidcbn0sIGF4aXNUcmlnZ2VyKTsiLCJ2YXIgZWNoYXJ0cyA9IHJlcXVpcmUoXCIuLi8uLi9lY2hhcnRzXCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgQXhpc1BvaW50ZXJNb2RlbCA9IGVjaGFydHMuZXh0ZW5kQ29tcG9uZW50TW9kZWwoe1xuICB0eXBlOiAnYXhpc1BvaW50ZXInLFxuICBjb29yZFN5c0F4ZXNJbmZvOiBudWxsLFxuICBkZWZhdWx0T3B0aW9uOiB7XG4gICAgLy8gJ2F1dG8nIG1lYW5zIHRoYXQgc2hvdyB3aGVuIHRyaWdnZXJlZCBieSB0b29sdGlwIG9yIGhhbmRsZS5cbiAgICBzaG93OiAnYXV0bycsXG4gICAgLy8gJ2NsaWNrJyB8ICdtb3VzZW1vdmUnIHwgJ25vbmUnXG4gICAgdHJpZ2dlck9uOiBudWxsLFxuICAgIC8vIHNldCBkZWZhdWx0IGluIEF4aXNQb250ZXJWaWV3LmpzXG4gICAgemxldmVsOiAwLFxuICAgIHo6IDUwLFxuICAgIHR5cGU6ICdsaW5lJyxcbiAgICAvLyBheGlzcG9pbnRlciB0cmlnZ2VyZWQgYnkgdG9vdGlwIGRldGVybWluZSBzbmFwIGF1dG9tYXRpY2FsbHksXG4gICAgLy8gc2VlIGBtb2RlbEhlbHBlcmAuXG4gICAgc25hcDogZmFsc2UsXG4gICAgdHJpZ2dlclRvb2x0aXA6IHRydWUsXG4gICAgdmFsdWU6IG51bGwsXG4gICAgc3RhdHVzOiBudWxsLFxuICAgIC8vIEluaXQgdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIGhhbmRsZSBpcyB1c2VkLlxuICAgIC8vIFtncm91cDAsIGdyb3VwMSwgLi4uXVxuICAgIC8vIEVhY2ggZ3JvdXAgY2FuIGJlOiB7XG4gICAgLy8gICAgICBtYXBwZXI6IGZ1bmN0aW9uICgpIHt9LFxuICAgIC8vICAgICAgc2luZ2xlVG9vbHRpcDogJ211bHRpcGxlJywgIC8vICdtdWx0aXBsZScgb3IgJ3NpbmdsZSdcbiAgICAvLyAgICAgIHhBeGlzSWQ6IC4uLixcbiAgICAvLyAgICAgIHlBeGlzTmFtZTogLi4uLFxuICAgIC8vICAgICAgYW5nbGVBeGlzSW5kZXg6IC4uLlxuICAgIC8vIH1cbiAgICAvLyBtYXBwZXI6IGNhbiBiZSBpZ25vcmVkLlxuICAgIC8vICAgICAgaW5wdXQ6IHtheGlzSW5mbywgdmFsdWV9XG4gICAgLy8gICAgICBvdXRwdXQ6IHtheGlzSW5mbywgdmFsdWV9XG4gICAgbGluazogW10sXG4gICAgLy8gRG8gbm90IHNldCAnYXV0bycgaGVyZSwgb3RoZXJ3aXNlIGdsb2JhbCBhbmltYXRpb246IGZhbHNlXG4gICAgLy8gd2lsbCBub3QgZWZmZWN0IGF0IHRoaXMgYXhpc3BvaW50ZXIuXG4gICAgYW5pbWF0aW9uOiBudWxsLFxuICAgIGFuaW1hdGlvbkR1cmF0aW9uVXBkYXRlOiAyMDAsXG4gICAgbGluZVN0eWxlOiB7XG4gICAgICBjb2xvcjogJyNhYWEnLFxuICAgICAgd2lkdGg6IDEsXG4gICAgICB0eXBlOiAnc29saWQnXG4gICAgfSxcbiAgICBzaGFkb3dTdHlsZToge1xuICAgICAgY29sb3I6ICdyZ2JhKDE1MCwxNTAsMTUwLDAuMyknXG4gICAgfSxcbiAgICBsYWJlbDoge1xuICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgIGZvcm1hdHRlcjogbnVsbCxcbiAgICAgIC8vIHN0cmluZyB8IEZ1bmN0aW9uXG4gICAgICBwcmVjaXNpb246ICdhdXRvJyxcbiAgICAgIC8vIE9yIGEgbnVtYmVyIGxpa2UgMCwgMSwgMiAuLi5cbiAgICAgIG1hcmdpbjogMyxcbiAgICAgIGNvbG9yOiAnI2ZmZicsXG4gICAgICBwYWRkaW5nOiBbNSwgNywgNSwgN10sXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdhdXRvJyxcbiAgICAgIC8vIGRlZmF1bHQ6IGF4aXMgbGluZSBjb2xvclxuICAgICAgYm9yZGVyQ29sb3I6IG51bGwsXG4gICAgICBib3JkZXJXaWR0aDogMCxcbiAgICAgIHNoYWRvd0JsdXI6IDMsXG4gICAgICBzaGFkb3dDb2xvcjogJyNhYWEnIC8vIENvbnNpZGVyaW5nIGFwcGxpY2FiaWxpdHksIGNvbW1vbiBzdHlsZSBzaG91bGRcbiAgICAgIC8vIGJldHRlciBub3QgaGF2ZSBzaGFkb3dPZmZzZXQuXG4gICAgICAvLyBzaGFkb3dPZmZzZXRYOiAwLFxuICAgICAgLy8gc2hhZG93T2Zmc2V0WTogMlxuXG4gICAgfSxcbiAgICBoYW5kbGU6IHtcbiAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgaWNvbjogJ00xMC43LDExLjl2LTEuM0g5LjN2MS4zYy00LjksMC4zLTguOCw0LjQtOC44LDkuNGMwLDUsMy45LDkuMSw4LjgsOS40aDEuM2M0LjktMC4zLDguOC00LjQsOC44LTkuNEMxOS41LDE2LjMsMTUuNiwxMi4yLDEwLjcsMTEuOXogTTEzLjMsMjQuNEg2Ljd2LTEuMmg2LjZ6IE0xMy4zLDIySDYuN3YtMS4yaDYuNnogTTEzLjMsMTkuNkg2Ljd2LTEuMmg2LjZ6JyxcbiAgICAgIC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgICAgc2l6ZTogNDUsXG4gICAgICAvLyBoYW5kbGUgbWFyZ2luIGlzIGZyb20gc3ltYm9sIGNlbnRlciB0byBheGlzLCB3aGljaCBpcyBzdGFibGUgd2hlbiBjaXJjdWxhciBtb3ZlLlxuICAgICAgbWFyZ2luOiA1MCxcbiAgICAgIC8vIGNvbG9yOiAnIzFiOGJiZCdcbiAgICAgIC8vIGNvbG9yOiAnIzJmNDU1NCdcbiAgICAgIGNvbG9yOiAnIzMzMycsXG4gICAgICBzaGFkb3dCbHVyOiAzLFxuICAgICAgc2hhZG93Q29sb3I6ICcjYWFhJyxcbiAgICAgIHNoYWRvd09mZnNldFg6IDAsXG4gICAgICBzaGFkb3dPZmZzZXRZOiAyLFxuICAgICAgLy8gRm9yIG1vYmlsZSBwZXJmb3JtYW5jZVxuICAgICAgdGhyb3R0bGU6IDQwXG4gICAgfVxuICB9XG59KTtcbnZhciBfZGVmYXVsdCA9IEF4aXNQb2ludGVyTW9kZWw7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBlY2hhcnRzID0gcmVxdWlyZShcIi4uLy4uL2VjaGFydHNcIik7XG5cbnZhciBnbG9iYWxMaXN0ZW5lciA9IHJlcXVpcmUoXCIuL2dsb2JhbExpc3RlbmVyXCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgQXhpc1BvaW50ZXJWaWV3ID0gZWNoYXJ0cy5leHRlbmRDb21wb25lbnRWaWV3KHtcbiAgdHlwZTogJ2F4aXNQb2ludGVyJyxcbiAgcmVuZGVyOiBmdW5jdGlvbiAoZ2xvYmFsQXhpc1BvaW50ZXJNb2RlbCwgZWNNb2RlbCwgYXBpKSB7XG4gICAgdmFyIGdsb2JhbFRvb2x0aXBNb2RlbCA9IGVjTW9kZWwuZ2V0Q29tcG9uZW50KCd0b29sdGlwJyk7XG4gICAgdmFyIHRyaWdnZXJPbiA9IGdsb2JhbEF4aXNQb2ludGVyTW9kZWwuZ2V0KCd0cmlnZ2VyT24nKSB8fCBnbG9iYWxUb29sdGlwTW9kZWwgJiYgZ2xvYmFsVG9vbHRpcE1vZGVsLmdldCgndHJpZ2dlck9uJykgfHwgJ21vdXNlbW92ZXxjbGljayc7IC8vIFJlZ2lzdGVyIGdsb2JhbCBsaXN0ZW5lciBpbiBBeGlzUG9pbnRlclZpZXcgdG8gZW5hYmxlXG4gICAgLy8gQXhpc1BvaW50ZXJWaWV3IHRvIGJlIGluZGVwZW5kZW50IHRvIFRvb2x0aXAuXG5cbiAgICBnbG9iYWxMaXN0ZW5lci5yZWdpc3RlcignYXhpc1BvaW50ZXInLCBhcGksIGZ1bmN0aW9uIChjdXJyVHJpZ2dlciwgZSwgZGlzcGF0Y2hBY3Rpb24pIHtcbiAgICAgIC8vIElmICdub25lJywgaXQgaXMgbm90IGNvbnRyb2xsZWQgYnkgbW91c2UgdG90YWxseS5cbiAgICAgIGlmICh0cmlnZ2VyT24gIT09ICdub25lJyAmJiAoY3VyclRyaWdnZXIgPT09ICdsZWF2ZScgfHwgdHJpZ2dlck9uLmluZGV4T2YoY3VyclRyaWdnZXIpID49IDApKSB7XG4gICAgICAgIGRpc3BhdGNoQWN0aW9uKHtcbiAgICAgICAgICB0eXBlOiAndXBkYXRlQXhpc1BvaW50ZXInLFxuICAgICAgICAgIGN1cnJUcmlnZ2VyOiBjdXJyVHJpZ2dlcixcbiAgICAgICAgICB4OiBlICYmIGUub2Zmc2V0WCxcbiAgICAgICAgICB5OiBlICYmIGUub2Zmc2V0WVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICByZW1vdmU6IGZ1bmN0aW9uIChlY01vZGVsLCBhcGkpIHtcbiAgICBnbG9iYWxMaXN0ZW5lci51bnJlZ2lzdGVyKGFwaS5nZXRacigpLCAnYXhpc1BvaW50ZXInKTtcbiAgICBBeGlzUG9pbnRlclZpZXcuc3VwZXJBcHBseSh0aGlzLl9tb2RlbCwgJ3JlbW92ZScsIGFyZ3VtZW50cyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZGlzcG9zZTogZnVuY3Rpb24gKGVjTW9kZWwsIGFwaSkge1xuICAgIGdsb2JhbExpc3RlbmVyLnVucmVnaXN0ZXIoJ2F4aXNQb2ludGVyJywgYXBpKTtcbiAgICBBeGlzUG9pbnRlclZpZXcuc3VwZXJBcHBseSh0aGlzLl9tb2RlbCwgJ2Rpc3Bvc2UnLCBhcmd1bWVudHMpO1xuICB9XG59KTtcbnZhciBfZGVmYXVsdCA9IEF4aXNQb2ludGVyVmlldztcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIHpyVXRpbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3V0aWxcIik7XG5cbnZhciBjbGF6elV0aWwgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9jbGF6elwiKTtcblxudmFyIGdyYXBoaWMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9ncmFwaGljXCIpO1xuXG52YXIgYXhpc1BvaW50ZXJNb2RlbEhlbHBlciA9IHJlcXVpcmUoXCIuL21vZGVsSGVscGVyXCIpO1xuXG52YXIgZXZlbnRUb29sID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvZXZlbnRcIik7XG5cbnZhciB0aHJvdHRsZVV0aWwgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC90aHJvdHRsZVwiKTtcblxudmFyIF9tb2RlbCA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL21vZGVsXCIpO1xuXG52YXIgbWFrZUlubmVyID0gX21vZGVsLm1ha2VJbm5lcjtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xudmFyIGlubmVyID0gbWFrZUlubmVyKCk7XG52YXIgY2xvbmUgPSB6clV0aWwuY2xvbmU7XG52YXIgYmluZCA9IHpyVXRpbC5iaW5kO1xuLyoqXG4gKiBCYXNlIGF4aXMgcG9pbnRlciBjbGFzcyBpbiAyRC5cbiAqIEltcGxlbWVuZW50cyB7bW9kdWxlOmVjaGFydHMvY29tcG9uZW50L2F4aXMvSUF4aXNQb2ludGVyfS5cbiAqL1xuXG5mdW5jdGlvbiBCYXNlQXhpc1BvaW50ZXIoKSB7fVxuXG5CYXNlQXhpc1BvaW50ZXIucHJvdG90eXBlID0ge1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ncm91cDogbnVsbCxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9sYXN0R3JhcGhpY0tleTogbnVsbCxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9oYW5kbGU6IG51bGwsXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZHJhZ2dpbmc6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2xhc3RWYWx1ZTogbnVsbCxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9sYXN0U3RhdHVzOiBudWxsLFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3BheWxvYWRJbmZvOiBudWxsLFxuXG4gIC8qKlxuICAgKiBJbiBweCwgYXJiaXRyYXJ5IHZhbHVlLiBEbyBub3Qgc2V0IHRvbyBzbWFsbCxcbiAgICogbm8gYW5pbWF0aW9uIGlzIG9rIGZvciBtb3N0IGNhc2VzLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBhbmltYXRpb25UaHJlc2hvbGQ6IDE1LFxuXG4gIC8qKlxuICAgKiBAaW1wbGVtZW50XG4gICAqL1xuICByZW5kZXI6IGZ1bmN0aW9uIChheGlzTW9kZWwsIGF4aXNQb2ludGVyTW9kZWwsIGFwaSwgZm9yY2VSZW5kZXIpIHtcbiAgICB2YXIgdmFsdWUgPSBheGlzUG9pbnRlck1vZGVsLmdldCgndmFsdWUnKTtcbiAgICB2YXIgc3RhdHVzID0gYXhpc1BvaW50ZXJNb2RlbC5nZXQoJ3N0YXR1cycpOyAvLyBCaW5kIHRoZW0gdG8gYHRoaXNgLCBub3QgaW4gY2xvc3VyZSwgb3RoZXJ3aXNlIHRoZXkgd2lsbCBub3RcbiAgICAvLyBiZSByZXBsYWNlZCB3aGVuIHVzZXIgY2FsbGluZyBzZXRPcHRpb24gaW4gbm90IG1lcmdlIG1vZGUuXG5cbiAgICB0aGlzLl9heGlzTW9kZWwgPSBheGlzTW9kZWw7XG4gICAgdGhpcy5fYXhpc1BvaW50ZXJNb2RlbCA9IGF4aXNQb2ludGVyTW9kZWw7XG4gICAgdGhpcy5fYXBpID0gYXBpOyAvLyBPcHRpbWl6ZTogYHJlbmRlcmAgd2lsbCBiZSBjYWxsZWQgcmVwZWF0bHkgZHVyaW5nIG1vdXNlIG1vdmUuXG4gICAgLy8gU28gaXQgaXMgcG93ZXIgY29uc3VtaW5nIGlmIHBlcmZvcm1pbmcgYHJlbmRlcmAgZWFjaCB0aW1lLFxuICAgIC8vIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZS5cblxuICAgIGlmICghZm9yY2VSZW5kZXIgJiYgdGhpcy5fbGFzdFZhbHVlID09PSB2YWx1ZSAmJiB0aGlzLl9sYXN0U3RhdHVzID09PSBzdGF0dXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9sYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLl9sYXN0U3RhdHVzID0gc3RhdHVzO1xuICAgIHZhciBncm91cCA9IHRoaXMuX2dyb3VwO1xuICAgIHZhciBoYW5kbGUgPSB0aGlzLl9oYW5kbGU7XG5cbiAgICBpZiAoIXN0YXR1cyB8fCBzdGF0dXMgPT09ICdoaWRlJykge1xuICAgICAgLy8gRG8gbm90IGNsZWFyIGhlcmUsIGZvciBhbmltYXRpb24gYmV0dGVyLlxuICAgICAgZ3JvdXAgJiYgZ3JvdXAuaGlkZSgpO1xuICAgICAgaGFuZGxlICYmIGhhbmRsZS5oaWRlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZ3JvdXAgJiYgZ3JvdXAuc2hvdygpO1xuICAgIGhhbmRsZSAmJiBoYW5kbGUuc2hvdygpOyAvLyBPdGhlcndpc2Ugc3RhdHVzIGlzICdzaG93J1xuXG4gICAgdmFyIGVsT3B0aW9uID0ge307XG4gICAgdGhpcy5tYWtlRWxPcHRpb24oZWxPcHRpb24sIHZhbHVlLCBheGlzTW9kZWwsIGF4aXNQb2ludGVyTW9kZWwsIGFwaSk7IC8vIEVuYWJsZSBjaGFuZ2UgYXhpcyBwb2ludGVyIHR5cGUuXG5cbiAgICB2YXIgZ3JhcGhpY0tleSA9IGVsT3B0aW9uLmdyYXBoaWNLZXk7XG5cbiAgICBpZiAoZ3JhcGhpY0tleSAhPT0gdGhpcy5fbGFzdEdyYXBoaWNLZXkpIHtcbiAgICAgIHRoaXMuY2xlYXIoYXBpKTtcbiAgICB9XG5cbiAgICB0aGlzLl9sYXN0R3JhcGhpY0tleSA9IGdyYXBoaWNLZXk7XG4gICAgdmFyIG1vdmVBbmltYXRpb24gPSB0aGlzLl9tb3ZlQW5pbWF0aW9uID0gdGhpcy5kZXRlcm1pbmVBbmltYXRpb24oYXhpc01vZGVsLCBheGlzUG9pbnRlck1vZGVsKTtcblxuICAgIGlmICghZ3JvdXApIHtcbiAgICAgIGdyb3VwID0gdGhpcy5fZ3JvdXAgPSBuZXcgZ3JhcGhpYy5Hcm91cCgpO1xuICAgICAgdGhpcy5jcmVhdGVQb2ludGVyRWwoZ3JvdXAsIGVsT3B0aW9uLCBheGlzTW9kZWwsIGF4aXNQb2ludGVyTW9kZWwpO1xuICAgICAgdGhpcy5jcmVhdGVMYWJlbEVsKGdyb3VwLCBlbE9wdGlvbiwgYXhpc01vZGVsLCBheGlzUG9pbnRlck1vZGVsKTtcbiAgICAgIGFwaS5nZXRacigpLmFkZChncm91cCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBkb1VwZGF0ZVByb3BzID0genJVdGlsLmN1cnJ5KHVwZGF0ZVByb3BzLCBheGlzUG9pbnRlck1vZGVsLCBtb3ZlQW5pbWF0aW9uKTtcbiAgICAgIHRoaXMudXBkYXRlUG9pbnRlckVsKGdyb3VwLCBlbE9wdGlvbiwgZG9VcGRhdGVQcm9wcywgYXhpc1BvaW50ZXJNb2RlbCk7XG4gICAgICB0aGlzLnVwZGF0ZUxhYmVsRWwoZ3JvdXAsIGVsT3B0aW9uLCBkb1VwZGF0ZVByb3BzLCBheGlzUG9pbnRlck1vZGVsKTtcbiAgICB9XG5cbiAgICB1cGRhdGVNYW5kYXRvcnlQcm9wcyhncm91cCwgYXhpc1BvaW50ZXJNb2RlbCwgdHJ1ZSk7XG5cbiAgICB0aGlzLl9yZW5kZXJIYW5kbGUodmFsdWUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAaW1wbGVtZW50XG4gICAqL1xuICByZW1vdmU6IGZ1bmN0aW9uIChhcGkpIHtcbiAgICB0aGlzLmNsZWFyKGFwaSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBpbXBsZW1lbnRcbiAgICovXG4gIGRpc3Bvc2U6IGZ1bmN0aW9uIChhcGkpIHtcbiAgICB0aGlzLmNsZWFyKGFwaSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGRldGVybWluZUFuaW1hdGlvbjogZnVuY3Rpb24gKGF4aXNNb2RlbCwgYXhpc1BvaW50ZXJNb2RlbCkge1xuICAgIHZhciBhbmltYXRpb24gPSBheGlzUG9pbnRlck1vZGVsLmdldCgnYW5pbWF0aW9uJyk7XG4gICAgdmFyIGF4aXMgPSBheGlzTW9kZWwuYXhpcztcbiAgICB2YXIgaXNDYXRlZ29yeUF4aXMgPSBheGlzLnR5cGUgPT09ICdjYXRlZ29yeSc7XG4gICAgdmFyIHVzZVNuYXAgPSBheGlzUG9pbnRlck1vZGVsLmdldCgnc25hcCcpOyAvLyBWYWx1ZSBheGlzIHdpdGhvdXQgc25hcCBhbHdheXMgZG8gbm90IHNuYXAuXG5cbiAgICBpZiAoIXVzZVNuYXAgJiYgIWlzQ2F0ZWdvcnlBeGlzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGFuaW1hdGlvbiA9PT0gJ2F1dG8nIHx8IGFuaW1hdGlvbiA9PSBudWxsKSB7XG4gICAgICB2YXIgYW5pbWF0aW9uVGhyZXNob2xkID0gdGhpcy5hbmltYXRpb25UaHJlc2hvbGQ7XG5cbiAgICAgIGlmIChpc0NhdGVnb3J5QXhpcyAmJiBheGlzLmdldEJhbmRXaWR0aCgpID4gYW5pbWF0aW9uVGhyZXNob2xkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSAvLyBJdCBpcyBpbXBvcnRhbnQgdG8gYXV0byBhbmltYXRpb24gd2hlbiBzbmFwIHVzZWQuIENvbnNpZGVyIGlmIHRoZXJlIGlzXG4gICAgICAvLyBhIGRhdGFab29tLCBhbmltYXRpb24gd2lsbCBiZSBkaXNhYmxlZCB3aGVuIHRvbyBtYW55IHBvaW50cyBleGlzdCwgd2hpbGVcbiAgICAgIC8vIGl0IHdpbGwgYmUgZW5hYmxlZCBmb3IgYmV0dGVyIHZpc3VhbCBlZmZlY3Qgd2hlbiBsaXR0bGUgcG9pbnRzIGV4aXN0LlxuXG5cbiAgICAgIGlmICh1c2VTbmFwKSB7XG4gICAgICAgIHZhciBzZXJpZXNEYXRhQ291bnQgPSBheGlzUG9pbnRlck1vZGVsSGVscGVyLmdldEF4aXNJbmZvKGF4aXNNb2RlbCkuc2VyaWVzRGF0YUNvdW50O1xuICAgICAgICB2YXIgYXhpc0V4dGVudCA9IGF4aXMuZ2V0RXh0ZW50KCk7IC8vIEFwcHJveGltYXRlIGJhbmQgd2lkdGhcblxuICAgICAgICByZXR1cm4gTWF0aC5hYnMoYXhpc0V4dGVudFswXSAtIGF4aXNFeHRlbnRbMV0pIC8gc2VyaWVzRGF0YUNvdW50ID4gYW5pbWF0aW9uVGhyZXNob2xkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFuaW1hdGlvbiA9PT0gdHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogYWRkIHtwb2ludGVyLCBsYWJlbCwgZ3JhcGhpY0tleX0gdG8gZWxPcHRpb25cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgbWFrZUVsT3B0aW9uOiBmdW5jdGlvbiAoZWxPcHRpb24sIHZhbHVlLCBheGlzTW9kZWwsIGF4aXNQb2ludGVyTW9kZWwsIGFwaSkgey8vIFNob3VsZSBiZSBpbXBsZW1lbmVudGVkIGJ5IHN1Yi1jbGFzcy5cbiAgfSxcblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgY3JlYXRlUG9pbnRlckVsOiBmdW5jdGlvbiAoZ3JvdXAsIGVsT3B0aW9uLCBheGlzTW9kZWwsIGF4aXNQb2ludGVyTW9kZWwpIHtcbiAgICB2YXIgcG9pbnRlck9wdGlvbiA9IGVsT3B0aW9uLnBvaW50ZXI7XG5cbiAgICBpZiAocG9pbnRlck9wdGlvbikge1xuICAgICAgdmFyIHBvaW50ZXJFbCA9IGlubmVyKGdyb3VwKS5wb2ludGVyRWwgPSBuZXcgZ3JhcGhpY1twb2ludGVyT3B0aW9uLnR5cGVdKGNsb25lKGVsT3B0aW9uLnBvaW50ZXIpKTtcbiAgICAgIGdyb3VwLmFkZChwb2ludGVyRWwpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgY3JlYXRlTGFiZWxFbDogZnVuY3Rpb24gKGdyb3VwLCBlbE9wdGlvbiwgYXhpc01vZGVsLCBheGlzUG9pbnRlck1vZGVsKSB7XG4gICAgaWYgKGVsT3B0aW9uLmxhYmVsKSB7XG4gICAgICB2YXIgbGFiZWxFbCA9IGlubmVyKGdyb3VwKS5sYWJlbEVsID0gbmV3IGdyYXBoaWMuUmVjdChjbG9uZShlbE9wdGlvbi5sYWJlbCkpO1xuICAgICAgZ3JvdXAuYWRkKGxhYmVsRWwpO1xuICAgICAgdXBkYXRlTGFiZWxTaG93SGlkZShsYWJlbEVsLCBheGlzUG9pbnRlck1vZGVsKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHVwZGF0ZVBvaW50ZXJFbDogZnVuY3Rpb24gKGdyb3VwLCBlbE9wdGlvbiwgdXBkYXRlUHJvcHMpIHtcbiAgICB2YXIgcG9pbnRlckVsID0gaW5uZXIoZ3JvdXApLnBvaW50ZXJFbDtcblxuICAgIGlmIChwb2ludGVyRWwpIHtcbiAgICAgIHBvaW50ZXJFbC5zZXRTdHlsZShlbE9wdGlvbi5wb2ludGVyLnN0eWxlKTtcbiAgICAgIHVwZGF0ZVByb3BzKHBvaW50ZXJFbCwge1xuICAgICAgICBzaGFwZTogZWxPcHRpb24ucG9pbnRlci5zaGFwZVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICB1cGRhdGVMYWJlbEVsOiBmdW5jdGlvbiAoZ3JvdXAsIGVsT3B0aW9uLCB1cGRhdGVQcm9wcywgYXhpc1BvaW50ZXJNb2RlbCkge1xuICAgIHZhciBsYWJlbEVsID0gaW5uZXIoZ3JvdXApLmxhYmVsRWw7XG5cbiAgICBpZiAobGFiZWxFbCkge1xuICAgICAgbGFiZWxFbC5zZXRTdHlsZShlbE9wdGlvbi5sYWJlbC5zdHlsZSk7XG4gICAgICB1cGRhdGVQcm9wcyhsYWJlbEVsLCB7XG4gICAgICAgIC8vIENvbnNpZGVyIHRleHQgbGVuZ3RoIGNoYW5nZSBpbiB2ZXJ0aWNhbCBheGlzLCBhbmltYXRpb24gc2hvdWxkXG4gICAgICAgIC8vIGJlIHVzZWQgb24gc2hhcGUsIG90aGVyd2lzZSB0aGUgZWZmZWN0IHdpbGwgYmUgd2VpcmQuXG4gICAgICAgIHNoYXBlOiBlbE9wdGlvbi5sYWJlbC5zaGFwZSxcbiAgICAgICAgcG9zaXRpb246IGVsT3B0aW9uLmxhYmVsLnBvc2l0aW9uXG4gICAgICB9KTtcbiAgICAgIHVwZGF0ZUxhYmVsU2hvd0hpZGUobGFiZWxFbCwgYXhpc1BvaW50ZXJNb2RlbCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlckhhbmRsZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuX2RyYWdnaW5nIHx8ICF0aGlzLnVwZGF0ZUhhbmRsZVRyYW5zZm9ybSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBheGlzUG9pbnRlck1vZGVsID0gdGhpcy5fYXhpc1BvaW50ZXJNb2RlbDtcblxuICAgIHZhciB6ciA9IHRoaXMuX2FwaS5nZXRacigpO1xuXG4gICAgdmFyIGhhbmRsZSA9IHRoaXMuX2hhbmRsZTtcbiAgICB2YXIgaGFuZGxlTW9kZWwgPSBheGlzUG9pbnRlck1vZGVsLmdldE1vZGVsKCdoYW5kbGUnKTtcbiAgICB2YXIgc3RhdHVzID0gYXhpc1BvaW50ZXJNb2RlbC5nZXQoJ3N0YXR1cycpO1xuXG4gICAgaWYgKCFoYW5kbGVNb2RlbC5nZXQoJ3Nob3cnKSB8fCAhc3RhdHVzIHx8IHN0YXR1cyA9PT0gJ2hpZGUnKSB7XG4gICAgICBoYW5kbGUgJiYgenIucmVtb3ZlKGhhbmRsZSk7XG4gICAgICB0aGlzLl9oYW5kbGUgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBpc0luaXQ7XG5cbiAgICBpZiAoIXRoaXMuX2hhbmRsZSkge1xuICAgICAgaXNJbml0ID0gdHJ1ZTtcbiAgICAgIGhhbmRsZSA9IHRoaXMuX2hhbmRsZSA9IGdyYXBoaWMuY3JlYXRlSWNvbihoYW5kbGVNb2RlbC5nZXQoJ2ljb24nKSwge1xuICAgICAgICBjdXJzb3I6ICdtb3ZlJyxcbiAgICAgICAgZHJhZ2dhYmxlOiB0cnVlLFxuICAgICAgICBvbm1vdXNlbW92ZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAvLyBGb3QgbW9iaWxlIGRldmljZW0sIHByZXZlbnQgc2NyZWVuIHNsaWRlciBvbiB0aGUgYnV0dG9uLlxuICAgICAgICAgIGV2ZW50VG9vbC5zdG9wKGUuZXZlbnQpO1xuICAgICAgICB9LFxuICAgICAgICBvbm1vdXNlZG93bjogYmluZCh0aGlzLl9vbkhhbmRsZURyYWdNb3ZlLCB0aGlzLCAwLCAwKSxcbiAgICAgICAgZHJpZnQ6IGJpbmQodGhpcy5fb25IYW5kbGVEcmFnTW92ZSwgdGhpcyksXG4gICAgICAgIG9uZHJhZ2VuZDogYmluZCh0aGlzLl9vbkhhbmRsZURyYWdFbmQsIHRoaXMpXG4gICAgICB9KTtcbiAgICAgIHpyLmFkZChoYW5kbGUpO1xuICAgIH1cblxuICAgIHVwZGF0ZU1hbmRhdG9yeVByb3BzKGhhbmRsZSwgYXhpc1BvaW50ZXJNb2RlbCwgZmFsc2UpOyAvLyB1cGRhdGUgc3R5bGVcblxuICAgIHZhciBpbmNsdWRlU3R5bGVzID0gWydjb2xvcicsICdib3JkZXJDb2xvcicsICdib3JkZXJXaWR0aCcsICdvcGFjaXR5JywgJ3NoYWRvd0NvbG9yJywgJ3NoYWRvd0JsdXInLCAnc2hhZG93T2Zmc2V0WCcsICdzaGFkb3dPZmZzZXRZJ107XG4gICAgaGFuZGxlLnNldFN0eWxlKGhhbmRsZU1vZGVsLmdldEl0ZW1TdHlsZShudWxsLCBpbmNsdWRlU3R5bGVzKSk7IC8vIHVwZGF0ZSBwb3NpdGlvblxuXG4gICAgdmFyIGhhbmRsZVNpemUgPSBoYW5kbGVNb2RlbC5nZXQoJ3NpemUnKTtcblxuICAgIGlmICghenJVdGlsLmlzQXJyYXkoaGFuZGxlU2l6ZSkpIHtcbiAgICAgIGhhbmRsZVNpemUgPSBbaGFuZGxlU2l6ZSwgaGFuZGxlU2l6ZV07XG4gICAgfVxuXG4gICAgaGFuZGxlLmF0dHIoJ3NjYWxlJywgW2hhbmRsZVNpemVbMF0gLyAyLCBoYW5kbGVTaXplWzFdIC8gMl0pO1xuICAgIHRocm90dGxlVXRpbC5jcmVhdGVPclVwZGF0ZSh0aGlzLCAnX2RvRGlzcGF0Y2hBeGlzUG9pbnRlcicsIGhhbmRsZU1vZGVsLmdldCgndGhyb3R0bGUnKSB8fCAwLCAnZml4UmF0ZScpO1xuXG4gICAgdGhpcy5fbW92ZUhhbmRsZVRvVmFsdWUodmFsdWUsIGlzSW5pdCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfbW92ZUhhbmRsZVRvVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgaXNJbml0KSB7XG4gICAgdXBkYXRlUHJvcHModGhpcy5fYXhpc1BvaW50ZXJNb2RlbCwgIWlzSW5pdCAmJiB0aGlzLl9tb3ZlQW5pbWF0aW9uLCB0aGlzLl9oYW5kbGUsIGdldEhhbmRsZVRyYW5zUHJvcHModGhpcy5nZXRIYW5kbGVUcmFuc2Zvcm0odmFsdWUsIHRoaXMuX2F4aXNNb2RlbCwgdGhpcy5fYXhpc1BvaW50ZXJNb2RlbCkpKTtcbiAgfSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkhhbmRsZURyYWdNb3ZlOiBmdW5jdGlvbiAoZHgsIGR5KSB7XG4gICAgdmFyIGhhbmRsZSA9IHRoaXMuX2hhbmRsZTtcblxuICAgIGlmICghaGFuZGxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fZHJhZ2dpbmcgPSB0cnVlOyAvLyBQZXJzaXN0ZW50IGZvciB0aHJvdHRsZS5cblxuICAgIHZhciB0cmFucyA9IHRoaXMudXBkYXRlSGFuZGxlVHJhbnNmb3JtKGdldEhhbmRsZVRyYW5zUHJvcHMoaGFuZGxlKSwgW2R4LCBkeV0sIHRoaXMuX2F4aXNNb2RlbCwgdGhpcy5fYXhpc1BvaW50ZXJNb2RlbCk7XG4gICAgdGhpcy5fcGF5bG9hZEluZm8gPSB0cmFucztcbiAgICBoYW5kbGUuc3RvcEFuaW1hdGlvbigpO1xuICAgIGhhbmRsZS5hdHRyKGdldEhhbmRsZVRyYW5zUHJvcHModHJhbnMpKTtcbiAgICBpbm5lcihoYW5kbGUpLmxhc3RQcm9wID0gbnVsbDtcblxuICAgIHRoaXMuX2RvRGlzcGF0Y2hBeGlzUG9pbnRlcigpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUaHJvdHRsZWQgbWV0aG9kLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2RvRGlzcGF0Y2hBeGlzUG9pbnRlcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGUgPSB0aGlzLl9oYW5kbGU7XG5cbiAgICBpZiAoIWhhbmRsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwYXlsb2FkSW5mbyA9IHRoaXMuX3BheWxvYWRJbmZvO1xuICAgIHZhciBheGlzTW9kZWwgPSB0aGlzLl9heGlzTW9kZWw7XG5cbiAgICB0aGlzLl9hcGkuZGlzcGF0Y2hBY3Rpb24oe1xuICAgICAgdHlwZTogJ3VwZGF0ZUF4aXNQb2ludGVyJyxcbiAgICAgIHg6IHBheWxvYWRJbmZvLmN1cnNvclBvaW50WzBdLFxuICAgICAgeTogcGF5bG9hZEluZm8uY3Vyc29yUG9pbnRbMV0sXG4gICAgICB0b29sdGlwT3B0aW9uOiBwYXlsb2FkSW5mby50b29sdGlwT3B0aW9uLFxuICAgICAgYXhlc0luZm86IFt7XG4gICAgICAgIGF4aXNEaW06IGF4aXNNb2RlbC5heGlzLmRpbSxcbiAgICAgICAgYXhpc0luZGV4OiBheGlzTW9kZWwuY29tcG9uZW50SW5kZXhcbiAgICAgIH1dXG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25IYW5kbGVEcmFnRW5kOiBmdW5jdGlvbiAobW92ZUFuaW1hdGlvbikge1xuICAgIHRoaXMuX2RyYWdnaW5nID0gZmFsc2U7XG4gICAgdmFyIGhhbmRsZSA9IHRoaXMuX2hhbmRsZTtcblxuICAgIGlmICghaGFuZGxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gdGhpcy5fYXhpc1BvaW50ZXJNb2RlbC5nZXQoJ3ZhbHVlJyk7IC8vIENvbnNpZGVyIHNuYXAgb3IgY2F0ZWdyb3kgYXhpcywgaGFuZGxlIG1heSBiZSBub3QgY29uc2lzdGVudCB3aXRoXG4gICAgLy8gYXhpc1BvaW50ZXIuIFNvIG1vdmUgaGFuZGxlIHRvIGFsaWduIHRoZSBleGFjdCB2YWx1ZSBwb3NpdGlvbiB3aGVuXG4gICAgLy8gZHJhZyBlbmRlZC5cblxuXG4gICAgdGhpcy5fbW92ZUhhbmRsZVRvVmFsdWUodmFsdWUpOyAvLyBGb3IgdGhlIGVmZmVjdDogdG9vbHRpcCB3aWxsIGJlIHNob3duIHdoZW4gZmluZ2VyIGhvbGRpbmcgb24gaGFuZGxlXG4gICAgLy8gYnV0dG9uLCBhbmQgd2lsbCBiZSBoaWRkZW4gYWZ0ZXIgZmluZ2VyIGxlZnQgaGFuZGxlIGJ1dHRvbi5cblxuXG4gICAgdGhpcy5fYXBpLmRpc3BhdGNoQWN0aW9uKHtcbiAgICAgIHR5cGU6ICdoaWRlVGlwJ1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTaG91bGQgYmUgaW1wbGVtZW5lbnRlZCBieSBzdWItY2xhc3MgaWYgc3VwcG9ydCBgaGFuZGxlYC5cbiAgICogQHByb3RlY3RlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Nb2RlbH0gYXhpc01vZGVsXG4gICAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvbW9kZWwvTW9kZWx9IGF4aXNQb2ludGVyTW9kZWxcbiAgICogQHJldHVybiB7T2JqZWN0fSB7cG9zaXRpb246IFt4LCB5XSwgcm90YXRpb246IDB9XG4gICAqL1xuICBnZXRIYW5kbGVUcmFuc2Zvcm06IG51bGwsXG5cbiAgLyoqXG4gICAqICogU2hvdWxkIGJlIGltcGxlbWVuZW50ZWQgYnkgc3ViLWNsYXNzIGlmIHN1cHBvcnQgYGhhbmRsZWAuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQHBhcmFtIHtPYmplY3R9IHRyYW5zZm9ybSB7cG9zaXRpb24sIHJvdGF0aW9ufVxuICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBkZWx0YSBbZHgsIGR5XVxuICAgKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL21vZGVsL01vZGVsfSBheGlzTW9kZWxcbiAgICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Nb2RlbH0gYXhpc1BvaW50ZXJNb2RlbFxuICAgKiBAcmV0dXJuIHtPYmplY3R9IHtwb3NpdGlvbjogW3gsIHldLCByb3RhdGlvbjogMCwgY3Vyc29yUG9pbnQ6IFt4LCB5XX1cbiAgICovXG4gIHVwZGF0ZUhhbmRsZVRyYW5zZm9ybTogbnVsbCxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNsZWFyOiBmdW5jdGlvbiAoYXBpKSB7XG4gICAgdGhpcy5fbGFzdFZhbHVlID0gbnVsbDtcbiAgICB0aGlzLl9sYXN0U3RhdHVzID0gbnVsbDtcbiAgICB2YXIgenIgPSBhcGkuZ2V0WnIoKTtcbiAgICB2YXIgZ3JvdXAgPSB0aGlzLl9ncm91cDtcbiAgICB2YXIgaGFuZGxlID0gdGhpcy5faGFuZGxlO1xuXG4gICAgaWYgKHpyICYmIGdyb3VwKSB7XG4gICAgICB0aGlzLl9sYXN0R3JhcGhpY0tleSA9IG51bGw7XG4gICAgICBncm91cCAmJiB6ci5yZW1vdmUoZ3JvdXApO1xuICAgICAgaGFuZGxlICYmIHpyLnJlbW92ZShoYW5kbGUpO1xuICAgICAgdGhpcy5fZ3JvdXAgPSBudWxsO1xuICAgICAgdGhpcy5faGFuZGxlID0gbnVsbDtcbiAgICAgIHRoaXMuX3BheWxvYWRJbmZvID0gbnVsbDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGRvQ2xlYXI6IGZ1bmN0aW9uICgpIHsvLyBJbXBsZW1lbnRlZCBieSBzdWItY2xhc3MgaWYgbmVjZXNzYXJ5LlxuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IHh5XG4gICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IHdoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbeERpbUluZGV4PTBdIG9yIDFcbiAgICovXG4gIGJ1aWxkTGFiZWw6IGZ1bmN0aW9uICh4eSwgd2gsIHhEaW1JbmRleCkge1xuICAgIHhEaW1JbmRleCA9IHhEaW1JbmRleCB8fCAwO1xuICAgIHJldHVybiB7XG4gICAgICB4OiB4eVt4RGltSW5kZXhdLFxuICAgICAgeTogeHlbMSAtIHhEaW1JbmRleF0sXG4gICAgICB3aWR0aDogd2hbeERpbUluZGV4XSxcbiAgICAgIGhlaWdodDogd2hbMSAtIHhEaW1JbmRleF1cbiAgICB9O1xuICB9XG59O1xuQmFzZUF4aXNQb2ludGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJhc2VBeGlzUG9pbnRlcjtcblxuZnVuY3Rpb24gdXBkYXRlUHJvcHMoYW5pbWF0aW9uTW9kZWwsIG1vdmVBbmltYXRpb24sIGVsLCBwcm9wcykge1xuICAvLyBBbmltYXRpb24gb3B0aW1pemUuXG4gIGlmICghcHJvcHNFcXVhbChpbm5lcihlbCkubGFzdFByb3AsIHByb3BzKSkge1xuICAgIGlubmVyKGVsKS5sYXN0UHJvcCA9IHByb3BzO1xuICAgIG1vdmVBbmltYXRpb24gPyBncmFwaGljLnVwZGF0ZVByb3BzKGVsLCBwcm9wcywgYW5pbWF0aW9uTW9kZWwpIDogKGVsLnN0b3BBbmltYXRpb24oKSwgZWwuYXR0cihwcm9wcykpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb3BzRXF1YWwobGFzdFByb3BzLCBuZXdQcm9wcykge1xuICBpZiAoenJVdGlsLmlzT2JqZWN0KGxhc3RQcm9wcykgJiYgenJVdGlsLmlzT2JqZWN0KG5ld1Byb3BzKSkge1xuICAgIHZhciBlcXVhbHMgPSB0cnVlO1xuICAgIHpyVXRpbC5lYWNoKG5ld1Byb3BzLCBmdW5jdGlvbiAoaXRlbSwga2V5KSB7XG4gICAgICBlcXVhbHMgPSBlcXVhbHMgJiYgcHJvcHNFcXVhbChsYXN0UHJvcHNba2V5XSwgaXRlbSk7XG4gICAgfSk7XG4gICAgcmV0dXJuICEhZXF1YWxzO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsYXN0UHJvcHMgPT09IG5ld1Byb3BzO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxhYmVsU2hvd0hpZGUobGFiZWxFbCwgYXhpc1BvaW50ZXJNb2RlbCkge1xuICBsYWJlbEVsW2F4aXNQb2ludGVyTW9kZWwuZ2V0KCdsYWJlbC5zaG93JykgPyAnc2hvdycgOiAnaGlkZSddKCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhbmRsZVRyYW5zUHJvcHModHJhbnMpIHtcbiAgcmV0dXJuIHtcbiAgICBwb3NpdGlvbjogdHJhbnMucG9zaXRpb24uc2xpY2UoKSxcbiAgICByb3RhdGlvbjogdHJhbnMucm90YXRpb24gfHwgMFxuICB9O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVNYW5kYXRvcnlQcm9wcyhncm91cCwgYXhpc1BvaW50ZXJNb2RlbCwgc2lsZW50KSB7XG4gIHZhciB6ID0gYXhpc1BvaW50ZXJNb2RlbC5nZXQoJ3onKTtcbiAgdmFyIHpsZXZlbCA9IGF4aXNQb2ludGVyTW9kZWwuZ2V0KCd6bGV2ZWwnKTtcbiAgZ3JvdXAgJiYgZ3JvdXAudHJhdmVyc2UoZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKGVsLnR5cGUgIT09ICdncm91cCcpIHtcbiAgICAgIHogIT0gbnVsbCAmJiAoZWwueiA9IHopO1xuICAgICAgemxldmVsICE9IG51bGwgJiYgKGVsLnpsZXZlbCA9IHpsZXZlbCk7XG4gICAgICBlbC5zaWxlbnQgPSBzaWxlbnQ7XG4gICAgfVxuICB9KTtcbn1cblxuY2xhenpVdGlsLmVuYWJsZUNsYXNzRXh0ZW5kKEJhc2VBeGlzUG9pbnRlcik7XG52YXIgX2RlZmF1bHQgPSBCYXNlQXhpc1BvaW50ZXI7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBncmFwaGljID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvZ3JhcGhpY1wiKTtcblxudmFyIEJhc2VBeGlzUG9pbnRlciA9IHJlcXVpcmUoXCIuL0Jhc2VBeGlzUG9pbnRlclwiKTtcblxudmFyIHZpZXdIZWxwZXIgPSByZXF1aXJlKFwiLi92aWV3SGVscGVyXCIpO1xuXG52YXIgY2FydGVzaWFuQXhpc0hlbHBlciA9IHJlcXVpcmUoXCIuLi8uLi9jb29yZC9jYXJ0ZXNpYW4vY2FydGVzaWFuQXhpc0hlbHBlclwiKTtcblxudmFyIEF4aXNWaWV3ID0gcmVxdWlyZShcIi4uL2F4aXMvQXhpc1ZpZXdcIik7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbnZhciBDYXJ0ZXNpYW5BeGlzUG9pbnRlciA9IEJhc2VBeGlzUG9pbnRlci5leHRlbmQoe1xuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBtYWtlRWxPcHRpb246IGZ1bmN0aW9uIChlbE9wdGlvbiwgdmFsdWUsIGF4aXNNb2RlbCwgYXhpc1BvaW50ZXJNb2RlbCwgYXBpKSB7XG4gICAgdmFyIGF4aXMgPSBheGlzTW9kZWwuYXhpcztcbiAgICB2YXIgZ3JpZCA9IGF4aXMuZ3JpZDtcbiAgICB2YXIgYXhpc1BvaW50ZXJUeXBlID0gYXhpc1BvaW50ZXJNb2RlbC5nZXQoJ3R5cGUnKTtcbiAgICB2YXIgb3RoZXJFeHRlbnQgPSBnZXRDYXJ0ZXNpYW4oZ3JpZCwgYXhpcykuZ2V0T3RoZXJBeGlzKGF4aXMpLmdldEdsb2JhbEV4dGVudCgpO1xuICAgIHZhciBwaXhlbFZhbHVlID0gYXhpcy50b0dsb2JhbENvb3JkKGF4aXMuZGF0YVRvQ29vcmQodmFsdWUsIHRydWUpKTtcblxuICAgIGlmIChheGlzUG9pbnRlclR5cGUgJiYgYXhpc1BvaW50ZXJUeXBlICE9PSAnbm9uZScpIHtcbiAgICAgIHZhciBlbFN0eWxlID0gdmlld0hlbHBlci5idWlsZEVsU3R5bGUoYXhpc1BvaW50ZXJNb2RlbCk7XG4gICAgICB2YXIgcG9pbnRlck9wdGlvbiA9IHBvaW50ZXJTaGFwZUJ1aWxkZXJbYXhpc1BvaW50ZXJUeXBlXShheGlzLCBwaXhlbFZhbHVlLCBvdGhlckV4dGVudCwgZWxTdHlsZSk7XG4gICAgICBwb2ludGVyT3B0aW9uLnN0eWxlID0gZWxTdHlsZTtcbiAgICAgIGVsT3B0aW9uLmdyYXBoaWNLZXkgPSBwb2ludGVyT3B0aW9uLnR5cGU7XG4gICAgICBlbE9wdGlvbi5wb2ludGVyID0gcG9pbnRlck9wdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgbGF5b3V0SW5mbyA9IGNhcnRlc2lhbkF4aXNIZWxwZXIubGF5b3V0KGdyaWQubW9kZWwsIGF4aXNNb2RlbCk7XG4gICAgdmlld0hlbHBlci5idWlsZENhcnRlc2lhblNpbmdsZUxhYmVsRWxPcHRpb24odmFsdWUsIGVsT3B0aW9uLCBsYXlvdXRJbmZvLCBheGlzTW9kZWwsIGF4aXNQb2ludGVyTW9kZWwsIGFwaSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0SGFuZGxlVHJhbnNmb3JtOiBmdW5jdGlvbiAodmFsdWUsIGF4aXNNb2RlbCwgYXhpc1BvaW50ZXJNb2RlbCkge1xuICAgIHZhciBsYXlvdXRJbmZvID0gY2FydGVzaWFuQXhpc0hlbHBlci5sYXlvdXQoYXhpc01vZGVsLmF4aXMuZ3JpZC5tb2RlbCwgYXhpc01vZGVsLCB7XG4gICAgICBsYWJlbEluc2lkZTogZmFsc2VcbiAgICB9KTtcbiAgICBsYXlvdXRJbmZvLmxhYmVsTWFyZ2luID0gYXhpc1BvaW50ZXJNb2RlbC5nZXQoJ2hhbmRsZS5tYXJnaW4nKTtcbiAgICByZXR1cm4ge1xuICAgICAgcG9zaXRpb246IHZpZXdIZWxwZXIuZ2V0VHJhbnNmb3JtZWRQb3NpdGlvbihheGlzTW9kZWwuYXhpcywgdmFsdWUsIGxheW91dEluZm8pLFxuICAgICAgcm90YXRpb246IGxheW91dEluZm8ucm90YXRpb24gKyAobGF5b3V0SW5mby5sYWJlbERpcmVjdGlvbiA8IDAgPyBNYXRoLlBJIDogMClcbiAgICB9O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHVwZGF0ZUhhbmRsZVRyYW5zZm9ybTogZnVuY3Rpb24gKHRyYW5zZm9ybSwgZGVsdGEsIGF4aXNNb2RlbCwgYXhpc1BvaW50ZXJNb2RlbCkge1xuICAgIHZhciBheGlzID0gYXhpc01vZGVsLmF4aXM7XG4gICAgdmFyIGdyaWQgPSBheGlzLmdyaWQ7XG4gICAgdmFyIGF4aXNFeHRlbnQgPSBheGlzLmdldEdsb2JhbEV4dGVudCh0cnVlKTtcbiAgICB2YXIgb3RoZXJFeHRlbnQgPSBnZXRDYXJ0ZXNpYW4oZ3JpZCwgYXhpcykuZ2V0T3RoZXJBeGlzKGF4aXMpLmdldEdsb2JhbEV4dGVudCgpO1xuICAgIHZhciBkaW1JbmRleCA9IGF4aXMuZGltID09PSAneCcgPyAwIDogMTtcbiAgICB2YXIgY3VyclBvc2l0aW9uID0gdHJhbnNmb3JtLnBvc2l0aW9uO1xuICAgIGN1cnJQb3NpdGlvbltkaW1JbmRleF0gKz0gZGVsdGFbZGltSW5kZXhdO1xuICAgIGN1cnJQb3NpdGlvbltkaW1JbmRleF0gPSBNYXRoLm1pbihheGlzRXh0ZW50WzFdLCBjdXJyUG9zaXRpb25bZGltSW5kZXhdKTtcbiAgICBjdXJyUG9zaXRpb25bZGltSW5kZXhdID0gTWF0aC5tYXgoYXhpc0V4dGVudFswXSwgY3VyclBvc2l0aW9uW2RpbUluZGV4XSk7XG4gICAgdmFyIGN1cnNvck90aGVyVmFsdWUgPSAob3RoZXJFeHRlbnRbMV0gKyBvdGhlckV4dGVudFswXSkgLyAyO1xuICAgIHZhciBjdXJzb3JQb2ludCA9IFtjdXJzb3JPdGhlclZhbHVlLCBjdXJzb3JPdGhlclZhbHVlXTtcbiAgICBjdXJzb3JQb2ludFtkaW1JbmRleF0gPSBjdXJyUG9zaXRpb25bZGltSW5kZXhdOyAvLyBNYWtlIHRvb2x0aXAgZG8gbm90IG92ZXJsYXAgYXhpc1BvaW50ZXIgYW5kIGluIHRoZSBtaWRkbGUgb2YgdGhlIGdyaWQuXG5cbiAgICB2YXIgdG9vbHRpcE9wdGlvbnMgPSBbe1xuICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZSdcbiAgICB9LCB7XG4gICAgICBhbGlnbjogJ2NlbnRlcidcbiAgICB9XTtcbiAgICByZXR1cm4ge1xuICAgICAgcG9zaXRpb246IGN1cnJQb3NpdGlvbixcbiAgICAgIHJvdGF0aW9uOiB0cmFuc2Zvcm0ucm90YXRpb24sXG4gICAgICBjdXJzb3JQb2ludDogY3Vyc29yUG9pbnQsXG4gICAgICB0b29sdGlwT3B0aW9uOiB0b29sdGlwT3B0aW9uc1tkaW1JbmRleF1cbiAgICB9O1xuICB9XG59KTtcblxuZnVuY3Rpb24gZ2V0Q2FydGVzaWFuKGdyaWQsIGF4aXMpIHtcbiAgdmFyIG9wdCA9IHt9O1xuICBvcHRbYXhpcy5kaW0gKyAnQXhpc0luZGV4J10gPSBheGlzLmluZGV4O1xuICByZXR1cm4gZ3JpZC5nZXRDYXJ0ZXNpYW4ob3B0KTtcbn1cblxudmFyIHBvaW50ZXJTaGFwZUJ1aWxkZXIgPSB7XG4gIGxpbmU6IGZ1bmN0aW9uIChheGlzLCBwaXhlbFZhbHVlLCBvdGhlckV4dGVudCwgZWxTdHlsZSkge1xuICAgIHZhciB0YXJnZXRTaGFwZSA9IHZpZXdIZWxwZXIubWFrZUxpbmVTaGFwZShbcGl4ZWxWYWx1ZSwgb3RoZXJFeHRlbnRbMF1dLCBbcGl4ZWxWYWx1ZSwgb3RoZXJFeHRlbnRbMV1dLCBnZXRBeGlzRGltSW5kZXgoYXhpcykpO1xuICAgIGdyYXBoaWMuc3ViUGl4ZWxPcHRpbWl6ZUxpbmUoe1xuICAgICAgc2hhcGU6IHRhcmdldFNoYXBlLFxuICAgICAgc3R5bGU6IGVsU3R5bGVcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ0xpbmUnLFxuICAgICAgc2hhcGU6IHRhcmdldFNoYXBlXG4gICAgfTtcbiAgfSxcbiAgc2hhZG93OiBmdW5jdGlvbiAoYXhpcywgcGl4ZWxWYWx1ZSwgb3RoZXJFeHRlbnQsIGVsU3R5bGUpIHtcbiAgICB2YXIgYmFuZFdpZHRoID0gTWF0aC5tYXgoMSwgYXhpcy5nZXRCYW5kV2lkdGgoKSk7XG4gICAgdmFyIHNwYW4gPSBvdGhlckV4dGVudFsxXSAtIG90aGVyRXh0ZW50WzBdO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnUmVjdCcsXG4gICAgICBzaGFwZTogdmlld0hlbHBlci5tYWtlUmVjdFNoYXBlKFtwaXhlbFZhbHVlIC0gYmFuZFdpZHRoIC8gMiwgb3RoZXJFeHRlbnRbMF1dLCBbYmFuZFdpZHRoLCBzcGFuXSwgZ2V0QXhpc0RpbUluZGV4KGF4aXMpKVxuICAgIH07XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldEF4aXNEaW1JbmRleChheGlzKSB7XG4gIHJldHVybiBheGlzLmRpbSA9PT0gJ3gnID8gMCA6IDE7XG59XG5cbkF4aXNWaWV3LnJlZ2lzdGVyQXhpc1BvaW50ZXJDbGFzcygnQ2FydGVzaWFuQXhpc1BvaW50ZXInLCBDYXJ0ZXNpYW5BeGlzUG9pbnRlcik7XG52YXIgX2RlZmF1bHQgPSBDYXJ0ZXNpYW5BeGlzUG9pbnRlcjtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIHpyVXRpbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3V0aWxcIik7XG5cbnZhciBfbW9kZWwgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9tb2RlbFwiKTtcblxudmFyIG1ha2VJbm5lciA9IF9tb2RlbC5tYWtlSW5uZXI7XG5cbnZhciBtb2RlbEhlbHBlciA9IHJlcXVpcmUoXCIuL21vZGVsSGVscGVyXCIpO1xuXG52YXIgZmluZFBvaW50RnJvbVNlcmllcyA9IHJlcXVpcmUoXCIuL2ZpbmRQb2ludEZyb21TZXJpZXNcIik7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbnZhciBlYWNoID0genJVdGlsLmVhY2g7XG52YXIgY3VycnkgPSB6clV0aWwuY3Vycnk7XG52YXIgaW5uZXIgPSBtYWtlSW5uZXIoKTtcbi8qKlxuICogQmFzaWMgbG9naWM6IGNoZWNrIGFsbCBheGlzLCBpZiB0aGV5IGRvIG5vdCBkZW1hbmQgc2hvdy9oaWdobGlnaHQsXG4gKiB0aGVuIGhpZGUvZG93bnBsYXkgdGhlbS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29vcmRTeXNBeGVzSW5mb1xuICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGF5bG9hZC5jdXJyVHJpZ2dlcl0gJ2NsaWNrJyB8ICdtb3VzZW1vdmUnIHwgJ2xlYXZlJ1xuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gW3BheWxvYWQueF0geCBhbmQgeSwgd2hpY2ggYXJlIG1hbmRhdG9yeSwgc3BlY2lmeSBhIHBvaW50IHRvXG4gKiAgICAgICAgICAgICAgdHJpZ2dlciBheGlzUG9pbnRlciBhbmQgdG9vbHRpcC5cbiAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IFtwYXlsb2FkLnldIHggYW5kIHksIHdoaWNoIGFyZSBtYW5kYXRvcnksIHNwZWNpZnkgYSBwb2ludCB0b1xuICogICAgICAgICAgICAgIHRyaWdnZXIgYXhpc1BvaW50ZXIgYW5kIHRvb2x0aXAuXG4gKiBAcGFyYW0ge09iamVjdH0gW3BheWxvYWQuc2VyaWVzSW5kZXhdIGZpbmRlciwgb3B0aW9uYWwsIHJlc3RyaWN0IHRhcmdldCBheGVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtwYXlsb2FkLmRhdGFJbmRleF0gZmluZGVyLCByZXN0cmljdCB0YXJnZXQgYXhlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcGF5bG9hZC5heGVzSW5mb10gZmluZGVyLCByZXN0cmljdCB0YXJnZXQgYXhlcy5cbiAqICAgICAgICBbe1xuICogICAgICAgICAgYXhpc0RpbTogJ3gnfCd5J3wnYW5nbGUnfC4uLixcbiAqICAgICAgICAgIGF4aXNJbmRleDogLi4uLFxuICogICAgICAgICAgdmFsdWU6IC4uLlxuICogICAgICAgIH0sIC4uLl1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwYXlsb2FkLmRpc3BhdGNoQWN0aW9uXVxuICogQHBhcmFtIHtPYmplY3R9IFtwYXlsb2FkLnRvb2x0aXBPcHRpb25dXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheS48bnVtYmVyPnxGdW5jdGlvbn0gW3BheWxvYWQucG9zaXRpb25dIFRvb2x0aXAgcG9zaXRpb24sXG4gKiAgICAgICAgd2hpY2ggY2FuIGJlIHNwZWNpZmllZCBpbiBkaXNwYXRjaEFjdGlvblxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9HbG9iYWx9IGVjTW9kZWxcbiAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvRXh0ZW5zaW9uQVBJfSBhcGlcbiAqIEByZXR1cm4ge09iamVjdH0gY29udGVudCBvZiBldmVudCBvYmogZm9yIGVjaGFydHMuY29ubmVjdC5cbiAqL1xuXG5mdW5jdGlvbiBfZGVmYXVsdChwYXlsb2FkLCBlY01vZGVsLCBhcGkpIHtcbiAgdmFyIGN1cnJUcmlnZ2VyID0gcGF5bG9hZC5jdXJyVHJpZ2dlcjtcbiAgdmFyIHBvaW50ID0gW3BheWxvYWQueCwgcGF5bG9hZC55XTtcbiAgdmFyIGZpbmRlciA9IHBheWxvYWQ7XG4gIHZhciBkaXNwYXRjaEFjdGlvbiA9IHBheWxvYWQuZGlzcGF0Y2hBY3Rpb24gfHwgenJVdGlsLmJpbmQoYXBpLmRpc3BhdGNoQWN0aW9uLCBhcGkpO1xuICB2YXIgY29vcmRTeXNBeGVzSW5mbyA9IGVjTW9kZWwuZ2V0Q29tcG9uZW50KCdheGlzUG9pbnRlcicpLmNvb3JkU3lzQXhlc0luZm87IC8vIFBlbmRpbmdcbiAgLy8gU2VlICM2MTIxLiBCdXQgd2UgYXJlIG5vdCBhYmxlIHRvIHJlcHJvZHVjZSBpdCB5ZXQuXG5cbiAgaWYgKCFjb29yZFN5c0F4ZXNJbmZvKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGlsbGVnYWxQb2ludChwb2ludCkpIHtcbiAgICAvLyBVc2VkIGluIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIGBjb25uZWN0aW9uYDogdXNlIHRoZSBzYW1wbGUgc2VyaWVzSW5kZXhcbiAgICAvLyBhbmQgZGF0YUluZGV4LiBBbmQgYWxzbyB1c2VkIGluIHRoZSB0b29sdGlwVmlldyB0cmlnZ2VyLlxuICAgIHBvaW50ID0gZmluZFBvaW50RnJvbVNlcmllcyh7XG4gICAgICBzZXJpZXNJbmRleDogZmluZGVyLnNlcmllc0luZGV4LFxuICAgICAgLy8gRG8gbm90IHVzZSBkYXRhSW5kZXhJbnNpZGUgZnJvbSBvdGhlciBlYyBpbnN0YW5jZS5cbiAgICAgIC8vIEZJWE1FOiBhdXRvIGRldGVjdCBpdD9cbiAgICAgIGRhdGFJbmRleDogZmluZGVyLmRhdGFJbmRleFxuICAgIH0sIGVjTW9kZWwpLnBvaW50O1xuICB9XG5cbiAgdmFyIGlzSWxsZWdhbFBvaW50ID0gaWxsZWdhbFBvaW50KHBvaW50KTsgLy8gQXhpcyBhbmQgdmFsdWUgY2FuIGJlIHNwZWNpZmllZCB3aGVuIGNhbGxpbmcgZGlzcGF0Y2hBY3Rpb24oe3R5cGU6ICd1cGRhdGVBeGlzUG9pbnRlcid9KS5cbiAgLy8gTm90aWNlOiBJbiB0aGlzIGNhc2UsIGl0IGlzIGRpZmZpY3VsdCB0byBnZXQgdGhlIGBwb2ludGAgKHdoaWNoIGlzIG5lY2Vzc2FyeSB0byBzaG93XG4gIC8vIHRvb2x0aXAsIHNvIGlmIHBvaW50IGlzIG5vdCBnaXZlbiwgd2UganVzdCB1c2UgdGhlIHBvaW50IGZvdW5kIGJ5IHNhbXBsZSBzZXJpZXNJbmRleFxuICAvLyBhbmQgZGF0YUluZGV4LlxuXG4gIHZhciBpbnB1dEF4ZXNJbmZvID0gZmluZGVyLmF4ZXNJbmZvO1xuICB2YXIgYXhlc0luZm8gPSBjb29yZFN5c0F4ZXNJbmZvLmF4ZXNJbmZvO1xuICB2YXIgc2hvdWxkSGlkZSA9IGN1cnJUcmlnZ2VyID09PSAnbGVhdmUnIHx8IGlsbGVnYWxQb2ludChwb2ludCk7XG4gIHZhciBvdXRwdXRGaW5kZXIgPSB7fTtcbiAgdmFyIHNob3dWYWx1ZU1hcCA9IHt9O1xuICB2YXIgZGF0YUJ5Q29vcmRTeXMgPSB7XG4gICAgbGlzdDogW10sXG4gICAgbWFwOiB7fVxuICB9O1xuICB2YXIgdXBkYXRlcnMgPSB7XG4gICAgc2hvd1BvaW50ZXI6IGN1cnJ5KHNob3dQb2ludGVyLCBzaG93VmFsdWVNYXApLFxuICAgIHNob3dUb29sdGlwOiBjdXJyeShzaG93VG9vbHRpcCwgZGF0YUJ5Q29vcmRTeXMpXG4gIH07IC8vIFByb2Nlc3MgZm9yIHRyaWdnZXJlZCBheGVzLlxuXG4gIGVhY2goY29vcmRTeXNBeGVzSW5mby5jb29yZFN5c01hcCwgZnVuY3Rpb24gKGNvb3JkU3lzLCBjb29yZFN5c0tleSkge1xuICAgIC8vIElmIGEgcG9pbnQgZ2l2ZW4sIGl0IG11c3QgYmUgY29udGFpbmVkIGJ5IHRoZSBjb29yZGluYXRlIHN5c3RlbS5cbiAgICB2YXIgY29vcmRTeXNDb250YWluc1BvaW50ID0gaXNJbGxlZ2FsUG9pbnQgfHwgY29vcmRTeXMuY29udGFpblBvaW50KHBvaW50KTtcbiAgICBlYWNoKGNvb3JkU3lzQXhlc0luZm8uY29vcmRTeXNBeGVzSW5mb1tjb29yZFN5c0tleV0sIGZ1bmN0aW9uIChheGlzSW5mbywga2V5KSB7XG4gICAgICB2YXIgYXhpcyA9IGF4aXNJbmZvLmF4aXM7XG4gICAgICB2YXIgaW5wdXRBeGlzSW5mbyA9IGZpbmRJbnB1dEF4aXNJbmZvKGlucHV0QXhlc0luZm8sIGF4aXNJbmZvKTsgLy8gSWYgbm8gaW5wdXRBeGVzSW5mbywgbm8gYXhpcyBpcyByZXN0cmljdGVkLlxuXG4gICAgICBpZiAoIXNob3VsZEhpZGUgJiYgY29vcmRTeXNDb250YWluc1BvaW50ICYmICghaW5wdXRBeGVzSW5mbyB8fCBpbnB1dEF4aXNJbmZvKSkge1xuICAgICAgICB2YXIgdmFsID0gaW5wdXRBeGlzSW5mbyAmJiBpbnB1dEF4aXNJbmZvLnZhbHVlO1xuXG4gICAgICAgIGlmICh2YWwgPT0gbnVsbCAmJiAhaXNJbGxlZ2FsUG9pbnQpIHtcbiAgICAgICAgICB2YWwgPSBheGlzLnBvaW50VG9EYXRhKHBvaW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhbCAhPSBudWxsICYmIHByb2Nlc3NPbkF4aXMoYXhpc0luZm8sIHZhbCwgdXBkYXRlcnMsIGZhbHNlLCBvdXRwdXRGaW5kZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTsgLy8gUHJvY2VzcyBmb3IgbGlua2VkIGF4ZXMuXG5cbiAgdmFyIGxpbmtUcmlnZ2VycyA9IHt9O1xuICBlYWNoKGF4ZXNJbmZvLCBmdW5jdGlvbiAodGFyQXhpc0luZm8sIHRhcktleSkge1xuICAgIHZhciBsaW5rR3JvdXAgPSB0YXJBeGlzSW5mby5saW5rR3JvdXA7IC8vIElmIGF4aXMgaGFzIGJlZW4gdHJpZ2dlcmVkIGluIHRoZSBwcmV2aW91cyBzdGFnZSwgaXQgc2hvdWxkIG5vdCBiZSB0cmlnZ2VyZWQgYnkgbGluay5cblxuICAgIGlmIChsaW5rR3JvdXAgJiYgIXNob3dWYWx1ZU1hcFt0YXJLZXldKSB7XG4gICAgICBlYWNoKGxpbmtHcm91cC5heGVzSW5mbywgZnVuY3Rpb24gKHNyY0F4aXNJbmZvLCBzcmNLZXkpIHtcbiAgICAgICAgdmFyIHNyY1ZhbEl0ZW0gPSBzaG93VmFsdWVNYXBbc3JjS2V5XTsgLy8gSWYgc3JjVmFsSXRlbSBleGlzdCwgc291cmNlIGF4aXMgaXMgdHJpZ2dlcmVkLCBzbyBsaW5rIHRvIHRhcmdldCBheGlzLlxuXG4gICAgICAgIGlmIChzcmNBeGlzSW5mbyAhPT0gdGFyQXhpc0luZm8gJiYgc3JjVmFsSXRlbSkge1xuICAgICAgICAgIHZhciB2YWwgPSBzcmNWYWxJdGVtLnZhbHVlO1xuICAgICAgICAgIGxpbmtHcm91cC5tYXBwZXIgJiYgKHZhbCA9IHRhckF4aXNJbmZvLmF4aXMuc2NhbGUucGFyc2UobGlua0dyb3VwLm1hcHBlcih2YWwsIG1ha2VNYXBwZXJQYXJhbShzcmNBeGlzSW5mbyksIG1ha2VNYXBwZXJQYXJhbSh0YXJBeGlzSW5mbykpKSk7XG4gICAgICAgICAgbGlua1RyaWdnZXJzW3RhckF4aXNJbmZvLmtleV0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIGVhY2gobGlua1RyaWdnZXJzLCBmdW5jdGlvbiAodmFsLCB0YXJLZXkpIHtcbiAgICBwcm9jZXNzT25BeGlzKGF4ZXNJbmZvW3RhcktleV0sIHZhbCwgdXBkYXRlcnMsIHRydWUsIG91dHB1dEZpbmRlcik7XG4gIH0pO1xuICB1cGRhdGVNb2RlbEFjdHVhbGx5KHNob3dWYWx1ZU1hcCwgYXhlc0luZm8sIG91dHB1dEZpbmRlcik7XG4gIGRpc3BhdGNoVG9vbHRpcEFjdHVhbGx5KGRhdGFCeUNvb3JkU3lzLCBwb2ludCwgcGF5bG9hZCwgZGlzcGF0Y2hBY3Rpb24pO1xuICBkaXNwYXRjaEhpZ2hEb3duQWN0dWFsbHkoYXhlc0luZm8sIGRpc3BhdGNoQWN0aW9uLCBhcGkpO1xuICByZXR1cm4gb3V0cHV0RmluZGVyO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzT25BeGlzKGF4aXNJbmZvLCBuZXdWYWx1ZSwgdXBkYXRlcnMsIGRvbnRTbmFwLCBvdXRwdXRGaW5kZXIpIHtcbiAgdmFyIGF4aXMgPSBheGlzSW5mby5heGlzO1xuXG4gIGlmIChheGlzLnNjYWxlLmlzQmxhbmsoKSB8fCAhYXhpcy5jb250YWluRGF0YShuZXdWYWx1ZSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWF4aXNJbmZvLmludm9sdmVTZXJpZXMpIHtcbiAgICB1cGRhdGVycy5zaG93UG9pbnRlcihheGlzSW5mbywgbmV3VmFsdWUpO1xuICAgIHJldHVybjtcbiAgfSAvLyBIZWF2eSBjYWxjdWxhdGlvbi4gU28gcHV0IGl0IGFmdGVyIGF4aXMuY29udGFpbkRhdGEgY2hlY2tpbmcuXG5cblxuICB2YXIgcGF5bG9hZEluZm8gPSBidWlsZFBheWxvYWRzQnlTZXJpZXMobmV3VmFsdWUsIGF4aXNJbmZvKTtcbiAgdmFyIHBheWxvYWRCYXRjaCA9IHBheWxvYWRJbmZvLnBheWxvYWRCYXRjaDtcbiAgdmFyIHNuYXBUb1ZhbHVlID0gcGF5bG9hZEluZm8uc25hcFRvVmFsdWU7IC8vIEZpbGwgY29udGVudCBvZiBldmVudCBvYmogZm9yIGVjaGFydHMuY29ubmVjdC5cbiAgLy8gQnkgZGVmdWFsdCB1c2UgdGhlIGZpcnN0IGludm9sdmVkIHNlcmllcyBkYXRhIGFzIGEgc2FtcGxlIHRvIGNvbm5lY3QuXG5cbiAgaWYgKHBheWxvYWRCYXRjaFswXSAmJiBvdXRwdXRGaW5kZXIuc2VyaWVzSW5kZXggPT0gbnVsbCkge1xuICAgIHpyVXRpbC5leHRlbmQob3V0cHV0RmluZGVyLCBwYXlsb2FkQmF0Y2hbMF0pO1xuICB9IC8vIElmIG5vIGxpbmtTb3VyY2UgaW5wdXQsIHRoaXMgcHJvY2VzcyBpcyBmb3IgY29sbGVjdGluZyBsaW5rXG4gIC8vIHRhcmdldCwgd2hlcmUgc25hcCBzaG91bGQgbm90IGJlIGFjY2VwdGVkLlxuXG5cbiAgaWYgKCFkb250U25hcCAmJiBheGlzSW5mby5zbmFwKSB7XG4gICAgaWYgKGF4aXMuY29udGFpbkRhdGEoc25hcFRvVmFsdWUpICYmIHNuYXBUb1ZhbHVlICE9IG51bGwpIHtcbiAgICAgIG5ld1ZhbHVlID0gc25hcFRvVmFsdWU7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlcnMuc2hvd1BvaW50ZXIoYXhpc0luZm8sIG5ld1ZhbHVlLCBwYXlsb2FkQmF0Y2gsIG91dHB1dEZpbmRlcik7IC8vIFRvb2x0aXAgc2hvdWxkIGFsd2F5cyBiZSBzbmFwVG9WYWx1ZSwgb3RoZXJ3aXNlIHRoZXJlIHdpbGwgYmVcbiAgLy8gaW5jb3JyZWN0IFwiYXhpcyB2YWx1ZSB+IHNlcmllcyB2YWx1ZVwiIG1hcHBpbmcgZGlzcGxheWVkIGluIHRvb2x0aXAuXG5cbiAgdXBkYXRlcnMuc2hvd1Rvb2x0aXAoYXhpc0luZm8sIHBheWxvYWRJbmZvLCBzbmFwVG9WYWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkUGF5bG9hZHNCeVNlcmllcyh2YWx1ZSwgYXhpc0luZm8pIHtcbiAgdmFyIGF4aXMgPSBheGlzSW5mby5heGlzO1xuICB2YXIgZGltID0gYXhpcy5kaW07XG4gIHZhciBzbmFwVG9WYWx1ZSA9IHZhbHVlO1xuICB2YXIgcGF5bG9hZEJhdGNoID0gW107XG4gIHZhciBtaW5EaXN0ID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgdmFyIG1pbkRpZmYgPSAtMTtcbiAgZWFjaChheGlzSW5mby5zZXJpZXNNb2RlbHMsIGZ1bmN0aW9uIChzZXJpZXMsIGlkeCkge1xuICAgIHZhciBkYXRhRGltID0gc2VyaWVzLmdldERhdGEoKS5tYXBEaW1lbnNpb24oZGltLCB0cnVlKTtcbiAgICB2YXIgc2VyaWVzTmVzdGVzdFZhbHVlO1xuICAgIHZhciBkYXRhSW5kaWNlcztcblxuICAgIGlmIChzZXJpZXMuZ2V0QXhpc1Rvb2x0aXBEYXRhKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gc2VyaWVzLmdldEF4aXNUb29sdGlwRGF0YShkYXRhRGltLCB2YWx1ZSwgYXhpcyk7XG4gICAgICBkYXRhSW5kaWNlcyA9IHJlc3VsdC5kYXRhSW5kaWNlcztcbiAgICAgIHNlcmllc05lc3Rlc3RWYWx1ZSA9IHJlc3VsdC5uZXN0ZXN0VmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGFJbmRpY2VzID0gc2VyaWVzLmdldERhdGEoKS5pbmRpY2VzT2ZOZWFyZXN0KGRhdGFEaW1bMF0sIHZhbHVlLCAvLyBBZGQgYSB0aHJlc2hvbGQgdG8gYXZvaWQgZmluZCB0aGUgd3JvbmcgZGF0YUluZGV4XG4gICAgICAvLyB3aGVuIGRhdGEgbGVuZ3RoIGlzIG5vdCBzYW1lLlxuICAgICAgLy8gZmFsc2UsXG4gICAgICBheGlzLnR5cGUgPT09ICdjYXRlZ29yeScgPyAwLjUgOiBudWxsKTtcblxuICAgICAgaWYgKCFkYXRhSW5kaWNlcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZXJpZXNOZXN0ZXN0VmFsdWUgPSBzZXJpZXMuZ2V0RGF0YSgpLmdldChkYXRhRGltWzBdLCBkYXRhSW5kaWNlc1swXSk7XG4gICAgfVxuXG4gICAgaWYgKHNlcmllc05lc3Rlc3RWYWx1ZSA9PSBudWxsIHx8ICFpc0Zpbml0ZShzZXJpZXNOZXN0ZXN0VmFsdWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRpZmYgPSB2YWx1ZSAtIHNlcmllc05lc3Rlc3RWYWx1ZTtcbiAgICB2YXIgZGlzdCA9IE1hdGguYWJzKGRpZmYpOyAvLyBDb25zaWRlciBjYXRlZ29yeSBjYXNlXG5cbiAgICBpZiAoZGlzdCA8PSBtaW5EaXN0KSB7XG4gICAgICBpZiAoZGlzdCA8IG1pbkRpc3QgfHwgZGlmZiA+PSAwICYmIG1pbkRpZmYgPCAwKSB7XG4gICAgICAgIG1pbkRpc3QgPSBkaXN0O1xuICAgICAgICBtaW5EaWZmID0gZGlmZjtcbiAgICAgICAgc25hcFRvVmFsdWUgPSBzZXJpZXNOZXN0ZXN0VmFsdWU7XG4gICAgICAgIHBheWxvYWRCYXRjaC5sZW5ndGggPSAwO1xuICAgICAgfVxuXG4gICAgICBlYWNoKGRhdGFJbmRpY2VzLCBmdW5jdGlvbiAoZGF0YUluZGV4KSB7XG4gICAgICAgIHBheWxvYWRCYXRjaC5wdXNoKHtcbiAgICAgICAgICBzZXJpZXNJbmRleDogc2VyaWVzLnNlcmllc0luZGV4LFxuICAgICAgICAgIGRhdGFJbmRleEluc2lkZTogZGF0YUluZGV4LFxuICAgICAgICAgIGRhdGFJbmRleDogc2VyaWVzLmdldERhdGEoKS5nZXRSYXdJbmRleChkYXRhSW5kZXgpXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBwYXlsb2FkQmF0Y2g6IHBheWxvYWRCYXRjaCxcbiAgICBzbmFwVG9WYWx1ZTogc25hcFRvVmFsdWVcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2hvd1BvaW50ZXIoc2hvd1ZhbHVlTWFwLCBheGlzSW5mbywgdmFsdWUsIHBheWxvYWRCYXRjaCkge1xuICBzaG93VmFsdWVNYXBbYXhpc0luZm8ua2V5XSA9IHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgcGF5bG9hZEJhdGNoOiBwYXlsb2FkQmF0Y2hcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2hvd1Rvb2x0aXAoZGF0YUJ5Q29vcmRTeXMsIGF4aXNJbmZvLCBwYXlsb2FkSW5mbywgdmFsdWUpIHtcbiAgdmFyIHBheWxvYWRCYXRjaCA9IHBheWxvYWRJbmZvLnBheWxvYWRCYXRjaDtcbiAgdmFyIGF4aXMgPSBheGlzSW5mby5heGlzO1xuICB2YXIgYXhpc01vZGVsID0gYXhpcy5tb2RlbDtcbiAgdmFyIGF4aXNQb2ludGVyTW9kZWwgPSBheGlzSW5mby5heGlzUG9pbnRlck1vZGVsOyAvLyBJZiBubyBkYXRhLCBkbyBub3QgY3JlYXRlIGFueXRoaW5nIGluIGRhdGFCeUNvb3JkU3lzLFxuICAvLyB3aG9zZSBsZW5ndGggd2lsbCBiZSB1c2VkIHRvIGp1ZGdlIHdoZXRoZXIgZGlzcGF0Y2ggYWN0aW9uLlxuXG4gIGlmICghYXhpc0luZm8udHJpZ2dlclRvb2x0aXAgfHwgIXBheWxvYWRCYXRjaC5sZW5ndGgpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY29vcmRTeXNNb2RlbCA9IGF4aXNJbmZvLmNvb3JkU3lzLm1vZGVsO1xuICB2YXIgY29vcmRTeXNLZXkgPSBtb2RlbEhlbHBlci5tYWtlS2V5KGNvb3JkU3lzTW9kZWwpO1xuICB2YXIgY29vcmRTeXNJdGVtID0gZGF0YUJ5Q29vcmRTeXMubWFwW2Nvb3JkU3lzS2V5XTtcblxuICBpZiAoIWNvb3JkU3lzSXRlbSkge1xuICAgIGNvb3JkU3lzSXRlbSA9IGRhdGFCeUNvb3JkU3lzLm1hcFtjb29yZFN5c0tleV0gPSB7XG4gICAgICBjb29yZFN5c0lkOiBjb29yZFN5c01vZGVsLmlkLFxuICAgICAgY29vcmRTeXNJbmRleDogY29vcmRTeXNNb2RlbC5jb21wb25lbnRJbmRleCxcbiAgICAgIGNvb3JkU3lzVHlwZTogY29vcmRTeXNNb2RlbC50eXBlLFxuICAgICAgY29vcmRTeXNNYWluVHlwZTogY29vcmRTeXNNb2RlbC5tYWluVHlwZSxcbiAgICAgIGRhdGFCeUF4aXM6IFtdXG4gICAgfTtcbiAgICBkYXRhQnlDb29yZFN5cy5saXN0LnB1c2goY29vcmRTeXNJdGVtKTtcbiAgfVxuXG4gIGNvb3JkU3lzSXRlbS5kYXRhQnlBeGlzLnB1c2goe1xuICAgIGF4aXNEaW06IGF4aXMuZGltLFxuICAgIGF4aXNJbmRleDogYXhpc01vZGVsLmNvbXBvbmVudEluZGV4LFxuICAgIGF4aXNUeXBlOiBheGlzTW9kZWwudHlwZSxcbiAgICBheGlzSWQ6IGF4aXNNb2RlbC5pZCxcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgLy8gQ2F1c3Rpb246IHZpZXdIZWxwZXIuZ2V0VmFsdWVMYWJlbCBpcyBhY3R1YWxseSBvbiBcInZpZXcgc3RhZ2VcIiwgd2hpY2hcbiAgICAvLyBkZXBlbmRzIHRoYXQgYWxsIG1vZGVscyBoYXZlIGJlZW4gdXBkYXRlZC4gU28gaXQgc2hvdWxkIG5vdCBiZSBwZXJmb3JtZWRcbiAgICAvLyBoZXJlLiBDb25zaWRlcmluZyBheGlzUG9pbnRlck1vZGVsIHVzZWQgaGVyZSBpcyB2b2xhdGlsZSwgd2hpY2ggaXMgaGFyZFxuICAgIC8vIHRvIGJlIHJldHJpZXZlIGluIFRvb2x0aXBWaWV3LCB3ZSBwcmVwYXJlIHBhcmFtZXRlcnMgaGVyZS5cbiAgICB2YWx1ZUxhYmVsT3B0OiB7XG4gICAgICBwcmVjaXNpb246IGF4aXNQb2ludGVyTW9kZWwuZ2V0KCdsYWJlbC5wcmVjaXNpb24nKSxcbiAgICAgIGZvcm1hdHRlcjogYXhpc1BvaW50ZXJNb2RlbC5nZXQoJ2xhYmVsLmZvcm1hdHRlcicpXG4gICAgfSxcbiAgICBzZXJpZXNEYXRhSW5kaWNlczogcGF5bG9hZEJhdGNoLnNsaWNlKClcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU1vZGVsQWN0dWFsbHkoc2hvd1ZhbHVlTWFwLCBheGVzSW5mbywgb3V0cHV0RmluZGVyKSB7XG4gIHZhciBvdXRwdXRBeGVzSW5mbyA9IG91dHB1dEZpbmRlci5heGVzSW5mbyA9IFtdOyAvLyBCYXNpYyBsb2dpYzogSWYgbm8gJ3Nob3cnIHJlcXVpcmVkLCAnaGlkZScgdGhpcyBheGlzUG9pbnRlci5cblxuICBlYWNoKGF4ZXNJbmZvLCBmdW5jdGlvbiAoYXhpc0luZm8sIGtleSkge1xuICAgIHZhciBvcHRpb24gPSBheGlzSW5mby5heGlzUG9pbnRlck1vZGVsLm9wdGlvbjtcbiAgICB2YXIgdmFsSXRlbSA9IHNob3dWYWx1ZU1hcFtrZXldO1xuXG4gICAgaWYgKHZhbEl0ZW0pIHtcbiAgICAgICFheGlzSW5mby51c2VIYW5kbGUgJiYgKG9wdGlvbi5zdGF0dXMgPSAnc2hvdycpO1xuICAgICAgb3B0aW9uLnZhbHVlID0gdmFsSXRlbS52YWx1ZTsgLy8gRm9yIGxhYmVsIGZvcm1hdHRlciBwYXJhbSBhbmQgaGlnaGxpZ2h0LlxuXG4gICAgICBvcHRpb24uc2VyaWVzRGF0YUluZGljZXMgPSAodmFsSXRlbS5wYXlsb2FkQmF0Y2ggfHwgW10pLnNsaWNlKCk7XG4gICAgfSAvLyBXaGVuIGFsd2F5cyBzaG93IChlLmcuLCBoYW5kbGUgdXNlZCksIHJlbWFpblxuICAgIC8vIG9yaWdpbmFsIHZhbHVlIGFuZCBzdGF0dXMuXG4gICAgZWxzZSB7XG4gICAgICAgIC8vIElmIGhpZGUsIHZhbHVlIHN0aWxsIG5lZWQgdG8gYmUgc2V0LCBjb25zaWRlclxuICAgICAgICAvLyBjbGljayBsZWdlbmQgdG8gdG9nZ2xlIGF4aXMgYmxhbmsuXG4gICAgICAgICFheGlzSW5mby51c2VIYW5kbGUgJiYgKG9wdGlvbi5zdGF0dXMgPSAnaGlkZScpO1xuICAgICAgfSAvLyBJZiBzdGF0dXMgaXMgJ2hpZGUnLCBzaG91bGQgYmUgbm8gaW5mbyBpbiBwYXlsb2FkLlxuXG5cbiAgICBvcHRpb24uc3RhdHVzID09PSAnc2hvdycgJiYgb3V0cHV0QXhlc0luZm8ucHVzaCh7XG4gICAgICBheGlzRGltOiBheGlzSW5mby5heGlzLmRpbSxcbiAgICAgIGF4aXNJbmRleDogYXhpc0luZm8uYXhpcy5tb2RlbC5jb21wb25lbnRJbmRleCxcbiAgICAgIHZhbHVlOiBvcHRpb24udmFsdWVcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoVG9vbHRpcEFjdHVhbGx5KGRhdGFCeUNvb3JkU3lzLCBwb2ludCwgcGF5bG9hZCwgZGlzcGF0Y2hBY3Rpb24pIHtcbiAgLy8gQmFzaWMgbG9naWM6IElmIG5vIHNob3dUaXAgcmVxdWlyZWQsIGhpZGVUaXAgd2lsbCBiZSBkaXNwYXRjaGVkLlxuICBpZiAoaWxsZWdhbFBvaW50KHBvaW50KSB8fCAhZGF0YUJ5Q29vcmRTeXMubGlzdC5sZW5ndGgpIHtcbiAgICBkaXNwYXRjaEFjdGlvbih7XG4gICAgICB0eXBlOiAnaGlkZVRpcCdcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH0gLy8gSW4gbW9zdCBjYXNlIG9ubHkgb25lIGF4aXMgKG9yIGV2ZW50IG9uZSBzZXJpZXMgaXMgdXNlZCkuIEl0IGlzXG4gIC8vIGNvbnZpbmllbnQgdG8gZmV0Y2ggcGF5bG9hZC5zZXJpZXNJbmRleCBhbmQgcGF5bG9hZC5kYXRhSW5kZXhcbiAgLy8gZGlydGVjdGx5LiBTbyBwdXQgdGhlIGZpcnN0IHNlcmllc0luZGV4IGFuZCBkYXRhSW5kZXggb2YgdGhlIGZpcnN0XG4gIC8vIGF4aXMgb24gdGhlIHBheWxvYWQuXG5cblxuICB2YXIgc2FtcGxlSXRlbSA9ICgoZGF0YUJ5Q29vcmRTeXMubGlzdFswXS5kYXRhQnlBeGlzWzBdIHx8IHt9KS5zZXJpZXNEYXRhSW5kaWNlcyB8fCBbXSlbMF0gfHwge307XG4gIGRpc3BhdGNoQWN0aW9uKHtcbiAgICB0eXBlOiAnc2hvd1RpcCcsXG4gICAgZXNjYXBlQ29ubmVjdDogdHJ1ZSxcbiAgICB4OiBwb2ludFswXSxcbiAgICB5OiBwb2ludFsxXSxcbiAgICB0b29sdGlwT3B0aW9uOiBwYXlsb2FkLnRvb2x0aXBPcHRpb24sXG4gICAgcG9zaXRpb246IHBheWxvYWQucG9zaXRpb24sXG4gICAgZGF0YUluZGV4SW5zaWRlOiBzYW1wbGVJdGVtLmRhdGFJbmRleEluc2lkZSxcbiAgICBkYXRhSW5kZXg6IHNhbXBsZUl0ZW0uZGF0YUluZGV4LFxuICAgIHNlcmllc0luZGV4OiBzYW1wbGVJdGVtLnNlcmllc0luZGV4LFxuICAgIGRhdGFCeUNvb3JkU3lzOiBkYXRhQnlDb29yZFN5cy5saXN0XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaEhpZ2hEb3duQWN0dWFsbHkoYXhlc0luZm8sIGRpc3BhdGNoQWN0aW9uLCBhcGkpIHtcbiAgLy8gRklYTUVcbiAgLy8gaGlnaGxpZ2h0IHN0YXR1cyBtb2RpZmljYXRpb24gc2hvdWxlIGJlIGEgc3RhZ2Ugb2YgbWFpbiBwcm9jZXNzP1xuICAvLyAoQ29uc2lkZXIgY29uZmlsY3QgKGUuZy4sIGxlZ2VuZCBhbmQgYXhpc1BvaW50ZXIpIGFuZCBzZXRPcHRpb24pXG4gIHZhciB6ciA9IGFwaS5nZXRacigpO1xuICB2YXIgaGlnaERvd25LZXkgPSAnYXhpc1BvaW50ZXJMYXN0SGlnaGxpZ2h0cyc7XG4gIHZhciBsYXN0SGlnaGxpZ2h0cyA9IGlubmVyKHpyKVtoaWdoRG93bktleV0gfHwge307XG4gIHZhciBuZXdIaWdobGlnaHRzID0gaW5uZXIoenIpW2hpZ2hEb3duS2V5XSA9IHt9OyAvLyBVcGRhdGUgaGlnaGxpZ2h0L2Rvd25wbGF5IHN0YXR1cyBhY2NvcmRpbmcgdG8gYXhpc1BvaW50ZXIgbW9kZWwuXG4gIC8vIEJ1aWxkIGhhc2ggbWFwIGFuZCByZW1vdmUgZHVwbGljYXRlIGluY2lkZW50YWxseS5cblxuICBlYWNoKGF4ZXNJbmZvLCBmdW5jdGlvbiAoYXhpc0luZm8sIGtleSkge1xuICAgIHZhciBvcHRpb24gPSBheGlzSW5mby5heGlzUG9pbnRlck1vZGVsLm9wdGlvbjtcbiAgICBvcHRpb24uc3RhdHVzID09PSAnc2hvdycgJiYgZWFjaChvcHRpb24uc2VyaWVzRGF0YUluZGljZXMsIGZ1bmN0aW9uIChiYXRjaEl0ZW0pIHtcbiAgICAgIHZhciBrZXkgPSBiYXRjaEl0ZW0uc2VyaWVzSW5kZXggKyAnIHwgJyArIGJhdGNoSXRlbS5kYXRhSW5kZXg7XG4gICAgICBuZXdIaWdobGlnaHRzW2tleV0gPSBiYXRjaEl0ZW07XG4gICAgfSk7XG4gIH0pOyAvLyBEaWZmLlxuXG4gIHZhciB0b0hpZ2hsaWdodCA9IFtdO1xuICB2YXIgdG9Eb3ducGxheSA9IFtdO1xuICB6clV0aWwuZWFjaChsYXN0SGlnaGxpZ2h0cywgZnVuY3Rpb24gKGJhdGNoSXRlbSwga2V5KSB7XG4gICAgIW5ld0hpZ2hsaWdodHNba2V5XSAmJiB0b0Rvd25wbGF5LnB1c2goYmF0Y2hJdGVtKTtcbiAgfSk7XG4gIHpyVXRpbC5lYWNoKG5ld0hpZ2hsaWdodHMsIGZ1bmN0aW9uIChiYXRjaEl0ZW0sIGtleSkge1xuICAgICFsYXN0SGlnaGxpZ2h0c1trZXldICYmIHRvSGlnaGxpZ2h0LnB1c2goYmF0Y2hJdGVtKTtcbiAgfSk7XG4gIHRvRG93bnBsYXkubGVuZ3RoICYmIGFwaS5kaXNwYXRjaEFjdGlvbih7XG4gICAgdHlwZTogJ2Rvd25wbGF5JyxcbiAgICBlc2NhcGVDb25uZWN0OiB0cnVlLFxuICAgIGJhdGNoOiB0b0Rvd25wbGF5XG4gIH0pO1xuICB0b0hpZ2hsaWdodC5sZW5ndGggJiYgYXBpLmRpc3BhdGNoQWN0aW9uKHtcbiAgICB0eXBlOiAnaGlnaGxpZ2h0JyxcbiAgICBlc2NhcGVDb25uZWN0OiB0cnVlLFxuICAgIGJhdGNoOiB0b0hpZ2hsaWdodFxuICB9KTtcbn1cblxuZnVuY3Rpb24gZmluZElucHV0QXhpc0luZm8oaW5wdXRBeGVzSW5mbywgYXhpc0luZm8pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAoaW5wdXRBeGVzSW5mbyB8fCBbXSkubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaW5wdXRBeGlzSW5mbyA9IGlucHV0QXhlc0luZm9baV07XG5cbiAgICBpZiAoYXhpc0luZm8uYXhpcy5kaW0gPT09IGlucHV0QXhpc0luZm8uYXhpc0RpbSAmJiBheGlzSW5mby5heGlzLm1vZGVsLmNvbXBvbmVudEluZGV4ID09PSBpbnB1dEF4aXNJbmZvLmF4aXNJbmRleCkge1xuICAgICAgcmV0dXJuIGlucHV0QXhpc0luZm87XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VNYXBwZXJQYXJhbShheGlzSW5mbykge1xuICB2YXIgYXhpc01vZGVsID0gYXhpc0luZm8uYXhpcy5tb2RlbDtcbiAgdmFyIGl0ZW0gPSB7fTtcbiAgdmFyIGRpbSA9IGl0ZW0uYXhpc0RpbSA9IGF4aXNJbmZvLmF4aXMuZGltO1xuICBpdGVtLmF4aXNJbmRleCA9IGl0ZW1bZGltICsgJ0F4aXNJbmRleCddID0gYXhpc01vZGVsLmNvbXBvbmVudEluZGV4O1xuICBpdGVtLmF4aXNOYW1lID0gaXRlbVtkaW0gKyAnQXhpc05hbWUnXSA9IGF4aXNNb2RlbC5uYW1lO1xuICBpdGVtLmF4aXNJZCA9IGl0ZW1bZGltICsgJ0F4aXNJZCddID0gYXhpc01vZGVsLmlkO1xuICByZXR1cm4gaXRlbTtcbn1cblxuZnVuY3Rpb24gaWxsZWdhbFBvaW50KHBvaW50KSB7XG4gIHJldHVybiAhcG9pbnQgfHwgcG9pbnRbMF0gPT0gbnVsbCB8fCBpc05hTihwb2ludFswXSkgfHwgcG9pbnRbMV0gPT0gbnVsbCB8fCBpc05hTihwb2ludFsxXSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIHpyVXRpbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3V0aWxcIik7XG5cbnZhciBtb2RlbFV0aWwgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9tb2RlbFwiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBmaW5kZXIgY29udGFpbnMge3Nlcmllc0luZGV4LCBkYXRhSW5kZXgsIGRhdGFJbmRleEluc2lkZX1cbiAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvbW9kZWwvR2xvYmFsfSBlY01vZGVsXG4gKiBAcmV0dXJuIHtPYmplY3R9IHtwb2ludDogW3gsIHldLCBlbDogLi4ufSBwb2ludCBXaWxsIG5vdCBiZSBudWxsLlxuICovXG5mdW5jdGlvbiBfZGVmYXVsdChmaW5kZXIsIGVjTW9kZWwpIHtcbiAgdmFyIHBvaW50ID0gW107XG4gIHZhciBzZXJpZXNJbmRleCA9IGZpbmRlci5zZXJpZXNJbmRleDtcbiAgdmFyIHNlcmllc01vZGVsO1xuXG4gIGlmIChzZXJpZXNJbmRleCA9PSBudWxsIHx8ICEoc2VyaWVzTW9kZWwgPSBlY01vZGVsLmdldFNlcmllc0J5SW5kZXgoc2VyaWVzSW5kZXgpKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwb2ludDogW11cbiAgICB9O1xuICB9XG5cbiAgdmFyIGRhdGEgPSBzZXJpZXNNb2RlbC5nZXREYXRhKCk7XG4gIHZhciBkYXRhSW5kZXggPSBtb2RlbFV0aWwucXVlcnlEYXRhSW5kZXgoZGF0YSwgZmluZGVyKTtcblxuICBpZiAoZGF0YUluZGV4ID09IG51bGwgfHwgZGF0YUluZGV4IDwgMCB8fCB6clV0aWwuaXNBcnJheShkYXRhSW5kZXgpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvaW50OiBbXVxuICAgIH07XG4gIH1cblxuICB2YXIgZWwgPSBkYXRhLmdldEl0ZW1HcmFwaGljRWwoZGF0YUluZGV4KTtcbiAgdmFyIGNvb3JkU3lzID0gc2VyaWVzTW9kZWwuY29vcmRpbmF0ZVN5c3RlbTtcblxuICBpZiAoc2VyaWVzTW9kZWwuZ2V0VG9vbHRpcFBvc2l0aW9uKSB7XG4gICAgcG9pbnQgPSBzZXJpZXNNb2RlbC5nZXRUb29sdGlwUG9zaXRpb24oZGF0YUluZGV4KSB8fCBbXTtcbiAgfSBlbHNlIGlmIChjb29yZFN5cyAmJiBjb29yZFN5cy5kYXRhVG9Qb2ludCkge1xuICAgIHBvaW50ID0gY29vcmRTeXMuZGF0YVRvUG9pbnQoZGF0YS5nZXRWYWx1ZXMoenJVdGlsLm1hcChjb29yZFN5cy5kaW1lbnNpb25zLCBmdW5jdGlvbiAoZGltKSB7XG4gICAgICByZXR1cm4gZGF0YS5tYXBEaW1lbnNpb24oZGltKTtcbiAgICB9KSwgZGF0YUluZGV4LCB0cnVlKSkgfHwgW107XG4gIH0gZWxzZSBpZiAoZWwpIHtcbiAgICAvLyBVc2UgZ3JhcGhpYyBib3VuZGluZyByZWN0XG4gICAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ1JlY3QoKS5jbG9uZSgpO1xuICAgIHJlY3QuYXBwbHlUcmFuc2Zvcm0oZWwudHJhbnNmb3JtKTtcbiAgICBwb2ludCA9IFtyZWN0LnggKyByZWN0LndpZHRoIC8gMiwgcmVjdC55ICsgcmVjdC5oZWlnaHQgLyAyXTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcG9pbnQ6IHBvaW50LFxuICAgIGVsOiBlbFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciB6clV0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgZW52ID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvZW52XCIpO1xuXG52YXIgX21vZGVsID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvbW9kZWxcIik7XG5cbnZhciBtYWtlSW5uZXIgPSBfbW9kZWwubWFrZUlubmVyO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgaW5uZXIgPSBtYWtlSW5uZXIoKTtcbnZhciBlYWNoID0genJVdGlsLmVhY2g7XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvRXh0ZW5zaW9uQVBJfSBhcGlcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcbiAqICAgICAgcGFyYW06IHtzdHJpbmd9IGN1cnJUcmlnZ2VyXG4gKiAgICAgIHBhcmFtOiB7QXJyYXkuPG51bWJlcj59IHBvaW50XG4gKi9cblxuZnVuY3Rpb24gcmVnaXN0ZXIoa2V5LCBhcGksIGhhbmRsZXIpIHtcbiAgaWYgKGVudi5ub2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHpyID0gYXBpLmdldFpyKCk7XG4gIGlubmVyKHpyKS5yZWNvcmRzIHx8IChpbm5lcih6cikucmVjb3JkcyA9IHt9KTtcbiAgaW5pdEdsb2JhbExpc3RlbmVycyh6ciwgYXBpKTtcbiAgdmFyIHJlY29yZCA9IGlubmVyKHpyKS5yZWNvcmRzW2tleV0gfHwgKGlubmVyKHpyKS5yZWNvcmRzW2tleV0gPSB7fSk7XG4gIHJlY29yZC5oYW5kbGVyID0gaGFuZGxlcjtcbn1cblxuZnVuY3Rpb24gaW5pdEdsb2JhbExpc3RlbmVycyh6ciwgYXBpKSB7XG4gIGlmIChpbm5lcih6cikuaW5pdGlhbGl6ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpbm5lcih6cikuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICB1c2VIYW5kbGVyKCdjbGljaycsIHpyVXRpbC5jdXJyeShkb0VudGVyLCAnY2xpY2snKSk7XG4gIHVzZUhhbmRsZXIoJ21vdXNlbW92ZScsIHpyVXRpbC5jdXJyeShkb0VudGVyLCAnbW91c2Vtb3ZlJykpOyAvLyB1c2VIYW5kbGVyKCdtb3VzZW91dCcsIG9uTGVhdmUpO1xuXG4gIHVzZUhhbmRsZXIoJ2dsb2JhbG91dCcsIG9uTGVhdmUpO1xuXG4gIGZ1bmN0aW9uIHVzZUhhbmRsZXIoZXZlbnRUeXBlLCBjYikge1xuICAgIHpyLm9uKGV2ZW50VHlwZSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBkaXMgPSBtYWtlRGlzcGF0Y2hBY3Rpb24oYXBpKTtcbiAgICAgIGVhY2goaW5uZXIoenIpLnJlY29yZHMsIGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgICAgcmVjb3JkICYmIGNiKHJlY29yZCwgZSwgZGlzLmRpc3BhdGNoQWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgZGlzcGF0Y2hUb29sdGlwRmluYWxseShkaXMucGVuZGluZ3MsIGFwaSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hUb29sdGlwRmluYWxseShwZW5kaW5ncywgYXBpKSB7XG4gIHZhciBzaG93TGVuID0gcGVuZGluZ3Muc2hvd1RpcC5sZW5ndGg7XG4gIHZhciBoaWRlTGVuID0gcGVuZGluZ3MuaGlkZVRpcC5sZW5ndGg7XG4gIHZhciBhY3R1YWxseVBheWxvYWQ7XG5cbiAgaWYgKHNob3dMZW4pIHtcbiAgICBhY3R1YWxseVBheWxvYWQgPSBwZW5kaW5ncy5zaG93VGlwW3Nob3dMZW4gLSAxXTtcbiAgfSBlbHNlIGlmIChoaWRlTGVuKSB7XG4gICAgYWN0dWFsbHlQYXlsb2FkID0gcGVuZGluZ3MuaGlkZVRpcFtoaWRlTGVuIC0gMV07XG4gIH1cblxuICBpZiAoYWN0dWFsbHlQYXlsb2FkKSB7XG4gICAgYWN0dWFsbHlQYXlsb2FkLmRpc3BhdGNoQWN0aW9uID0gbnVsbDtcbiAgICBhcGkuZGlzcGF0Y2hBY3Rpb24oYWN0dWFsbHlQYXlsb2FkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbkxlYXZlKHJlY29yZCwgZSwgZGlzcGF0Y2hBY3Rpb24pIHtcbiAgcmVjb3JkLmhhbmRsZXIoJ2xlYXZlJywgbnVsbCwgZGlzcGF0Y2hBY3Rpb24pO1xufVxuXG5mdW5jdGlvbiBkb0VudGVyKGN1cnJUcmlnZ2VyLCByZWNvcmQsIGUsIGRpc3BhdGNoQWN0aW9uKSB7XG4gIHJlY29yZC5oYW5kbGVyKGN1cnJUcmlnZ2VyLCBlLCBkaXNwYXRjaEFjdGlvbik7XG59XG5cbmZ1bmN0aW9uIG1ha2VEaXNwYXRjaEFjdGlvbihhcGkpIHtcbiAgdmFyIHBlbmRpbmdzID0ge1xuICAgIHNob3dUaXA6IFtdLFxuICAgIGhpZGVUaXA6IFtdXG4gIH07IC8vIEZJWE1FXG4gIC8vIGJldHRlciBhcHByb2FjaD9cbiAgLy8gJ3Nob3dUaXAnIGFuZCAnaGlkZVRpcCcgY2FuIGJlIHRyaWdnZXJlZCBieSBheGlzUG9pbnRlciBhbmQgdG9vbHRpcCxcbiAgLy8gd2hpY2ggbWF5IGJlIGNvbmZsaWN0LCAoYXhpc1BvaW50ZXIgY2FsbCBzaG93VGlwIGJ1dCB0b29sdGlwIGNhbGwgaGlkZVRpcCk7XG4gIC8vIFNvIHdlIGhhdmUgdG8gYWRkIFwiZmluYWwgc3RhZ2VcIiB0byBtZXJnZSB0aG9zZSBkaXNwYXRjaGVkIGFjdGlvbnMuXG5cbiAgdmFyIGRpc3BhdGNoQWN0aW9uID0gZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICB2YXIgcGVuZGluZ0xpc3QgPSBwZW5kaW5nc1twYXlsb2FkLnR5cGVdO1xuXG4gICAgaWYgKHBlbmRpbmdMaXN0KSB7XG4gICAgICBwZW5kaW5nTGlzdC5wdXNoKHBheWxvYWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXlsb2FkLmRpc3BhdGNoQWN0aW9uID0gZGlzcGF0Y2hBY3Rpb247XG4gICAgICBhcGkuZGlzcGF0Y2hBY3Rpb24ocGF5bG9hZCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgZGlzcGF0Y2hBY3Rpb246IGRpc3BhdGNoQWN0aW9uLFxuICAgIHBlbmRpbmdzOiBwZW5kaW5nc1xuICB9O1xufVxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL0V4dGVuc2lvbkFQSX0gYXBpXG4gKi9cblxuXG5mdW5jdGlvbiB1bnJlZ2lzdGVyKGtleSwgYXBpKSB7XG4gIGlmIChlbnYubm9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB6ciA9IGFwaS5nZXRacigpO1xuICB2YXIgcmVjb3JkID0gKGlubmVyKHpyKS5yZWNvcmRzIHx8IHt9KVtrZXldO1xuXG4gIGlmIChyZWNvcmQpIHtcbiAgICBpbm5lcih6cikucmVjb3Jkc1trZXldID0gbnVsbDtcbiAgfVxufVxuXG5leHBvcnRzLnJlZ2lzdGVyID0gcmVnaXN0ZXI7XG5leHBvcnRzLnVucmVnaXN0ZXIgPSB1bnJlZ2lzdGVyOyIsInZhciB6clV0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgTW9kZWwgPSByZXF1aXJlKFwiLi4vLi4vbW9kZWwvTW9kZWxcIik7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbnZhciBlYWNoID0genJVdGlsLmVhY2g7XG52YXIgY3VycnkgPSB6clV0aWwuY3Vycnk7IC8vIEJ1aWxkIGF4aXNQb2ludGVyTW9kZWwsIG1lcmdpbiB0b29sdGlwLmF4aXNQb2ludGVyIG1vZGVsIGZvciBlYWNoIGF4aXMuXG4vLyBhbGxBeGVzSW5mbyBzaG91bGQgYmUgdXBkYXRlZCB3aGVuIHNldE9wdGlvbiBwZXJmb3JtZWQuXG5cbmZ1bmN0aW9uIGNvbGxlY3QoZWNNb2RlbCwgYXBpKSB7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgLyoqXG4gICAgICoga2V5OiBtYWtlS2V5KGF4aXMubW9kZWwpXG4gICAgICogdmFsdWU6IHtcbiAgICAgKiAgICAgIGF4aXMsXG4gICAgICogICAgICBjb29yZFN5cyxcbiAgICAgKiAgICAgIGF4aXNQb2ludGVyTW9kZWwsXG4gICAgICogICAgICB0cmlnZ2VyVG9vbHRpcCxcbiAgICAgKiAgICAgIGludm9sdmVTZXJpZXMsXG4gICAgICogICAgICBzbmFwLFxuICAgICAqICAgICAgc2VyaWVzTW9kZWxzLFxuICAgICAqICAgICAgc2VyaWVzRGF0YUNvdW50XG4gICAgICogfVxuICAgICAqL1xuICAgIGF4ZXNJbmZvOiB7fSxcbiAgICBzZXJpZXNJbnZvbHZlZDogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBrZXk6IG1ha2VLZXkoY29vcmRTeXMubW9kZWwpXG4gICAgICogdmFsdWU6IE9iamVjdDoga2V5IG1ha2VLZXkoYXhpcy5tb2RlbCksIHZhbHVlOiBheGlzSW5mb1xuICAgICAqL1xuICAgIGNvb3JkU3lzQXhlc0luZm86IHt9LFxuICAgIGNvb3JkU3lzTWFwOiB7fVxuICB9O1xuICBjb2xsZWN0QXhlc0luZm8ocmVzdWx0LCBlY01vZGVsLCBhcGkpOyAvLyBDaGVjayBzZXJpZXNJbnZvbHZlZCBmb3IgcGVyZm9ybWFuY2UsIGluIGNhc2UgdG9vIG1hbnkgc2VyaWVzIGluIHNvbWUgY2hhcnQuXG5cbiAgcmVzdWx0LnNlcmllc0ludm9sdmVkICYmIGNvbGxlY3RTZXJpZXNJbmZvKHJlc3VsdCwgZWNNb2RlbCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3RBeGVzSW5mbyhyZXN1bHQsIGVjTW9kZWwsIGFwaSkge1xuICB2YXIgZ2xvYmFsVG9vbHRpcE1vZGVsID0gZWNNb2RlbC5nZXRDb21wb25lbnQoJ3Rvb2x0aXAnKTtcbiAgdmFyIGdsb2JhbEF4aXNQb2ludGVyTW9kZWwgPSBlY01vZGVsLmdldENvbXBvbmVudCgnYXhpc1BvaW50ZXInKTsgLy8gbGlua3MgY2FuIG9ubHkgYmUgc2V0IG9uIGdsb2JhbC5cblxuICB2YXIgbGlua3NPcHRpb24gPSBnbG9iYWxBeGlzUG9pbnRlck1vZGVsLmdldCgnbGluaycsIHRydWUpIHx8IFtdO1xuICB2YXIgbGlua0dyb3VwcyA9IFtdOyAvLyBDb2xsZWN0IGF4ZXMgaW5mby5cblxuICBlYWNoKGFwaS5nZXRDb29yZGluYXRlU3lzdGVtcygpLCBmdW5jdGlvbiAoY29vcmRTeXMpIHtcbiAgICAvLyBTb21lIGNvb3JkaW5hdGUgc3lzdGVtIGRvIG5vdCBzdXBwb3J0IGF4ZXMsIGxpa2UgZ2VvLlxuICAgIGlmICghY29vcmRTeXMuYXhpc1BvaW50ZXJFbmFibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNvb3JkU3lzS2V5ID0gbWFrZUtleShjb29yZFN5cy5tb2RlbCk7XG4gICAgdmFyIGF4ZXNJbmZvSW5Db29yZFN5cyA9IHJlc3VsdC5jb29yZFN5c0F4ZXNJbmZvW2Nvb3JkU3lzS2V5XSA9IHt9O1xuICAgIHJlc3VsdC5jb29yZFN5c01hcFtjb29yZFN5c0tleV0gPSBjb29yZFN5czsgLy8gU2V0IHRvb2x0aXAgKGxpa2UgJ2Nyb3NzJykgaXMgYSBjb252aWVuZW50IHdheSB0byBzaG93IGF4aXNQb2ludGVyXG4gICAgLy8gZm9yIHVzZXIuIFNvIHdlIGVuYWJsZSBzZXRpbmcgdG9vbHRpcCBvbiBjb29yZFN5cyBtb2RlbC5cblxuICAgIHZhciBjb29yZFN5c01vZGVsID0gY29vcmRTeXMubW9kZWw7XG4gICAgdmFyIGJhc2VUb29sdGlwTW9kZWwgPSBjb29yZFN5c01vZGVsLmdldE1vZGVsKCd0b29sdGlwJywgZ2xvYmFsVG9vbHRpcE1vZGVsKTtcbiAgICBlYWNoKGNvb3JkU3lzLmdldEF4ZXMoKSwgY3Vycnkoc2F2ZVRvb2x0aXBBeGlzSW5mbywgZmFsc2UsIG51bGwpKTsgLy8gSWYgYXhpcyB0b29sdGlwIHVzZWQsIGNob29zZSB0b29sdGlwIGF4aXMgZm9yIGVhY2ggY29vcmRTeXMuXG4gICAgLy8gTm90aWNlIHRoaXMgY2FzZTogY29vcmRTeXMgaXMgYGdyaWRgIGJ1dCBub3QgYGNhcnRlc2lhbjJEYCBoZXJlLlxuXG4gICAgaWYgKGNvb3JkU3lzLmdldFRvb2x0aXBBeGVzICYmIGdsb2JhbFRvb2x0aXBNb2RlbCAvLyBJZiB0b29sdGlwLnNob3dDb250ZW50IGlzIHNldCBhcyBmYWxzZSwgdG9vbHRpcCB3aWxsIG5vdFxuICAgIC8vIHNob3cgYnV0IGF4aXNQb2ludGVyIHdpbGwgc2hvdyBhcyBub3JtYWwuXG4gICAgJiYgYmFzZVRvb2x0aXBNb2RlbC5nZXQoJ3Nob3cnKSkge1xuICAgICAgLy8gQ29tcGF0aWJsZSB3aXRoIHByZXZpb3VzIGxvZ2ljLiBCdXQgc2VyaWVzLnRvb2x0aXAudHJpZ2dlcjogJ2F4aXMnXG4gICAgICAvLyBvciBzZXJpZXMuZGF0YVtuXS50b29sdGlwLnRyaWdnZXI6ICdheGlzJyBhcmUgbm90IHN1cHBvcnQgYW55IG1vcmUuXG4gICAgICB2YXIgdHJpZ2dlckF4aXMgPSBiYXNlVG9vbHRpcE1vZGVsLmdldCgndHJpZ2dlcicpID09PSAnYXhpcyc7XG4gICAgICB2YXIgY3Jvc3MgPSBiYXNlVG9vbHRpcE1vZGVsLmdldCgnYXhpc1BvaW50ZXIudHlwZScpID09PSAnY3Jvc3MnO1xuICAgICAgdmFyIHRvb2x0aXBBeGVzID0gY29vcmRTeXMuZ2V0VG9vbHRpcEF4ZXMoYmFzZVRvb2x0aXBNb2RlbC5nZXQoJ2F4aXNQb2ludGVyLmF4aXMnKSk7XG5cbiAgICAgIGlmICh0cmlnZ2VyQXhpcyB8fCBjcm9zcykge1xuICAgICAgICBlYWNoKHRvb2x0aXBBeGVzLmJhc2VBeGVzLCBjdXJyeShzYXZlVG9vbHRpcEF4aXNJbmZvLCBjcm9zcyA/ICdjcm9zcycgOiB0cnVlLCB0cmlnZ2VyQXhpcykpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3Jvc3MpIHtcbiAgICAgICAgZWFjaCh0b29sdGlwQXhlcy5vdGhlckF4ZXMsIGN1cnJ5KHNhdmVUb29sdGlwQXhpc0luZm8sICdjcm9zcycsIGZhbHNlKSk7XG4gICAgICB9XG4gICAgfSAvLyBmcm9tVG9vbHRpcDogdHJ1ZSB8IGZhbHNlIHwgJ2Nyb3NzJ1xuICAgIC8vIHRyaWdnZXJUb29sdGlwOiB0cnVlIHwgZmFsc2UgfCBudWxsXG5cblxuICAgIGZ1bmN0aW9uIHNhdmVUb29sdGlwQXhpc0luZm8oZnJvbVRvb2x0aXAsIHRyaWdnZXJUb29sdGlwLCBheGlzKSB7XG4gICAgICB2YXIgYXhpc1BvaW50ZXJNb2RlbCA9IGF4aXMubW9kZWwuZ2V0TW9kZWwoJ2F4aXNQb2ludGVyJywgZ2xvYmFsQXhpc1BvaW50ZXJNb2RlbCk7XG4gICAgICB2YXIgYXhpc1BvaW50ZXJTaG93ID0gYXhpc1BvaW50ZXJNb2RlbC5nZXQoJ3Nob3cnKTtcblxuICAgICAgaWYgKCFheGlzUG9pbnRlclNob3cgfHwgYXhpc1BvaW50ZXJTaG93ID09PSAnYXV0bycgJiYgIWZyb21Ub29sdGlwICYmICFpc0hhbmRsZVRyaWdnZXIoYXhpc1BvaW50ZXJNb2RlbCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodHJpZ2dlclRvb2x0aXAgPT0gbnVsbCkge1xuICAgICAgICB0cmlnZ2VyVG9vbHRpcCA9IGF4aXNQb2ludGVyTW9kZWwuZ2V0KCd0cmlnZ2VyVG9vbHRpcCcpO1xuICAgICAgfVxuXG4gICAgICBheGlzUG9pbnRlck1vZGVsID0gZnJvbVRvb2x0aXAgPyBtYWtlQXhpc1BvaW50ZXJNb2RlbChheGlzLCBiYXNlVG9vbHRpcE1vZGVsLCBnbG9iYWxBeGlzUG9pbnRlck1vZGVsLCBlY01vZGVsLCBmcm9tVG9vbHRpcCwgdHJpZ2dlclRvb2x0aXApIDogYXhpc1BvaW50ZXJNb2RlbDtcbiAgICAgIHZhciBzbmFwID0gYXhpc1BvaW50ZXJNb2RlbC5nZXQoJ3NuYXAnKTtcbiAgICAgIHZhciBrZXkgPSBtYWtlS2V5KGF4aXMubW9kZWwpO1xuICAgICAgdmFyIGludm9sdmVTZXJpZXMgPSB0cmlnZ2VyVG9vbHRpcCB8fCBzbmFwIHx8IGF4aXMudHlwZSA9PT0gJ2NhdGVnb3J5JzsgLy8gSWYgcmVzdWx0LmF4ZXNJbmZvW2tleV0gZXhpc3QsIG92ZXJyaWRlIGl0ICh0b29sdGlwIGhhcyBoaWdoZXIgcHJpb3JpdHkpLlxuXG4gICAgICB2YXIgYXhpc0luZm8gPSByZXN1bHQuYXhlc0luZm9ba2V5XSA9IHtcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIGF4aXM6IGF4aXMsXG4gICAgICAgIGNvb3JkU3lzOiBjb29yZFN5cyxcbiAgICAgICAgYXhpc1BvaW50ZXJNb2RlbDogYXhpc1BvaW50ZXJNb2RlbCxcbiAgICAgICAgdHJpZ2dlclRvb2x0aXA6IHRyaWdnZXJUb29sdGlwLFxuICAgICAgICBpbnZvbHZlU2VyaWVzOiBpbnZvbHZlU2VyaWVzLFxuICAgICAgICBzbmFwOiBzbmFwLFxuICAgICAgICB1c2VIYW5kbGU6IGlzSGFuZGxlVHJpZ2dlcihheGlzUG9pbnRlck1vZGVsKSxcbiAgICAgICAgc2VyaWVzTW9kZWxzOiBbXVxuICAgICAgfTtcbiAgICAgIGF4ZXNJbmZvSW5Db29yZFN5c1trZXldID0gYXhpc0luZm87XG4gICAgICByZXN1bHQuc2VyaWVzSW52b2x2ZWQgfD0gaW52b2x2ZVNlcmllcztcbiAgICAgIHZhciBncm91cEluZGV4ID0gZ2V0TGlua0dyb3VwSW5kZXgobGlua3NPcHRpb24sIGF4aXMpO1xuXG4gICAgICBpZiAoZ3JvdXBJbmRleCAhPSBudWxsKSB7XG4gICAgICAgIHZhciBsaW5rR3JvdXAgPSBsaW5rR3JvdXBzW2dyb3VwSW5kZXhdIHx8IChsaW5rR3JvdXBzW2dyb3VwSW5kZXhdID0ge1xuICAgICAgICAgIGF4ZXNJbmZvOiB7fVxuICAgICAgICB9KTtcbiAgICAgICAgbGlua0dyb3VwLmF4ZXNJbmZvW2tleV0gPSBheGlzSW5mbztcbiAgICAgICAgbGlua0dyb3VwLm1hcHBlciA9IGxpbmtzT3B0aW9uW2dyb3VwSW5kZXhdLm1hcHBlcjtcbiAgICAgICAgYXhpc0luZm8ubGlua0dyb3VwID0gbGlua0dyb3VwO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VBeGlzUG9pbnRlck1vZGVsKGF4aXMsIGJhc2VUb29sdGlwTW9kZWwsIGdsb2JhbEF4aXNQb2ludGVyTW9kZWwsIGVjTW9kZWwsIGZyb21Ub29sdGlwLCB0cmlnZ2VyVG9vbHRpcCkge1xuICB2YXIgdG9vbHRpcEF4aXNQb2ludGVyTW9kZWwgPSBiYXNlVG9vbHRpcE1vZGVsLmdldE1vZGVsKCdheGlzUG9pbnRlcicpO1xuICB2YXIgdm9sYXRpbGVPcHRpb24gPSB7fTtcbiAgZWFjaChbJ3R5cGUnLCAnc25hcCcsICdsaW5lU3R5bGUnLCAnc2hhZG93U3R5bGUnLCAnbGFiZWwnLCAnYW5pbWF0aW9uJywgJ2FuaW1hdGlvbkR1cmF0aW9uVXBkYXRlJywgJ2FuaW1hdGlvbkVhc2luZ1VwZGF0ZScsICd6J10sIGZ1bmN0aW9uIChmaWVsZCkge1xuICAgIHZvbGF0aWxlT3B0aW9uW2ZpZWxkXSA9IHpyVXRpbC5jbG9uZSh0b29sdGlwQXhpc1BvaW50ZXJNb2RlbC5nZXQoZmllbGQpKTtcbiAgfSk7IC8vIGNhdGVnb3J5IGF4aXMgZG8gbm90IGF1dG8gc25hcCwgb3RoZXJ3aXNlIHNvbWUgdGljayB0aGF0IGRvIG5vdFxuICAvLyBoYXMgdmFsdWUgY2FuIG5vdCBiZSBob3ZlcmVkLiB2YWx1ZS90aW1lL2xvZyBheGlzIGRlZmF1bHQgc25hcCBpZlxuICAvLyB0cmlnZ2VyZWQgZnJvbSB0b29sdGlwIGFuZCB0cmlnZ2VyIHRvb2x0aXAuXG5cbiAgdm9sYXRpbGVPcHRpb24uc25hcCA9IGF4aXMudHlwZSAhPT0gJ2NhdGVnb3J5JyAmJiAhIXRyaWdnZXJUb29sdGlwOyAvLyBDb21wYXRpYmVsIHdpdGggcHJldmlvdXMgYmVoYXZpb3IsIHRvb2x0aXAgYXhpcyBkbyBub3Qgc2hvdyBsYWJlbCBieSBkZWZhdWx0LlxuICAvLyBPbmx5IHRoZXNlIHByb3BlcnRpZXMgY2FuIGJlIG92ZXJyaWRlZCBmcm9tIHRvb2x0aXAgdG8gYXhpc1BvaW50ZXIuXG5cbiAgaWYgKHRvb2x0aXBBeGlzUG9pbnRlck1vZGVsLmdldCgndHlwZScpID09PSAnY3Jvc3MnKSB7XG4gICAgdm9sYXRpbGVPcHRpb24udHlwZSA9ICdsaW5lJztcbiAgfVxuXG4gIHZhciBsYWJlbE9wdGlvbiA9IHZvbGF0aWxlT3B0aW9uLmxhYmVsIHx8ICh2b2xhdGlsZU9wdGlvbi5sYWJlbCA9IHt9KTsgLy8gRm9sbG93IHRoZSBjb252ZW50aW9uLCBkbyBub3Qgc2hvdyBsYWJlbCB3aGVuIHRyaWdnZXJlZCBieSB0b29sdGlwIGJ5IGRlZmF1bHQuXG5cbiAgbGFiZWxPcHRpb24uc2hvdyA9PSBudWxsICYmIChsYWJlbE9wdGlvbi5zaG93ID0gZmFsc2UpO1xuXG4gIGlmIChmcm9tVG9vbHRpcCA9PT0gJ2Nyb3NzJykge1xuICAgIC8vIFdoZW4gJ2Nyb3NzJywgYm90aCBheGVzIHNob3cgbGFiZWxzLlxuICAgIHZhciB0b29sdGlwQXhpc1BvaW50ZXJMYWJlbFNob3cgPSB0b29sdGlwQXhpc1BvaW50ZXJNb2RlbC5nZXQoJ2xhYmVsLnNob3cnKTtcbiAgICBsYWJlbE9wdGlvbi5zaG93ID0gdG9vbHRpcEF4aXNQb2ludGVyTGFiZWxTaG93ICE9IG51bGwgPyB0b29sdGlwQXhpc1BvaW50ZXJMYWJlbFNob3cgOiB0cnVlOyAvLyBJZiB0cmlnZ2VyVG9vbHRpcCwgdGhpcyBpcyBhIGJhc2UgYXhpcywgd2hpY2ggc2hvdWxkIGJldHRlciBub3QgdXNlIGNyb3NzIHN0eWxlXG4gICAgLy8gKGNyb3NzIHN0eWxlIGlzIGRhc2hlZCBieSBkZWZhdWx0KVxuXG4gICAgaWYgKCF0cmlnZ2VyVG9vbHRpcCkge1xuICAgICAgdmFyIGNyb3NzU3R5bGUgPSB2b2xhdGlsZU9wdGlvbi5saW5lU3R5bGUgPSB0b29sdGlwQXhpc1BvaW50ZXJNb2RlbC5nZXQoJ2Nyb3NzU3R5bGUnKTtcbiAgICAgIGNyb3NzU3R5bGUgJiYgenJVdGlsLmRlZmF1bHRzKGxhYmVsT3B0aW9uLCBjcm9zc1N0eWxlLnRleHRTdHlsZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF4aXMubW9kZWwuZ2V0TW9kZWwoJ2F4aXNQb2ludGVyJywgbmV3IE1vZGVsKHZvbGF0aWxlT3B0aW9uLCBnbG9iYWxBeGlzUG9pbnRlck1vZGVsLCBlY01vZGVsKSk7XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3RTZXJpZXNJbmZvKHJlc3VsdCwgZWNNb2RlbCkge1xuICAvLyBQcmVwYXJlIGRhdGEgZm9yIGF4aXMgdHJpZ2dlclxuICBlY01vZGVsLmVhY2hTZXJpZXMoZnVuY3Rpb24gKHNlcmllc01vZGVsKSB7XG4gICAgLy8gTm90aWNlIHRoaXMgY2FzZTogdGhpcyBjb29yZFN5cyBpcyBgY2FydGVzaWFuMkRgIGJ1dCBub3QgYGdyaWRgLlxuICAgIHZhciBjb29yZFN5cyA9IHNlcmllc01vZGVsLmNvb3JkaW5hdGVTeXN0ZW07XG4gICAgdmFyIHNlcmllc1Rvb2x0aXBUcmlnZ2VyID0gc2VyaWVzTW9kZWwuZ2V0KCd0b29sdGlwLnRyaWdnZXInLCB0cnVlKTtcbiAgICB2YXIgc2VyaWVzVG9vbHRpcFNob3cgPSBzZXJpZXNNb2RlbC5nZXQoJ3Rvb2x0aXAuc2hvdycsIHRydWUpO1xuXG4gICAgaWYgKCFjb29yZFN5cyB8fCBzZXJpZXNUb29sdGlwVHJpZ2dlciA9PT0gJ25vbmUnIHx8IHNlcmllc1Rvb2x0aXBUcmlnZ2VyID09PSBmYWxzZSB8fCBzZXJpZXNUb29sdGlwVHJpZ2dlciA9PT0gJ2l0ZW0nIHx8IHNlcmllc1Rvb2x0aXBTaG93ID09PSBmYWxzZSB8fCBzZXJpZXNNb2RlbC5nZXQoJ2F4aXNQb2ludGVyLnNob3cnLCB0cnVlKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBlYWNoKHJlc3VsdC5jb29yZFN5c0F4ZXNJbmZvW21ha2VLZXkoY29vcmRTeXMubW9kZWwpXSwgZnVuY3Rpb24gKGF4aXNJbmZvKSB7XG4gICAgICB2YXIgYXhpcyA9IGF4aXNJbmZvLmF4aXM7XG5cbiAgICAgIGlmIChjb29yZFN5cy5nZXRBeGlzKGF4aXMuZGltKSA9PT0gYXhpcykge1xuICAgICAgICBheGlzSW5mby5zZXJpZXNNb2RlbHMucHVzaChzZXJpZXNNb2RlbCk7XG4gICAgICAgIGF4aXNJbmZvLnNlcmllc0RhdGFDb3VudCA9PSBudWxsICYmIChheGlzSW5mby5zZXJpZXNEYXRhQ291bnQgPSAwKTtcbiAgICAgICAgYXhpc0luZm8uc2VyaWVzRGF0YUNvdW50ICs9IHNlcmllc01vZGVsLmdldERhdGEoKS5jb3VudCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LCB0aGlzKTtcbn1cbi8qKlxuICogRm9yIGV4YW1wbGU6XG4gKiB7XG4gKiAgICAgYXhpc1BvaW50ZXI6IHtcbiAqICAgICAgICAgbGlua3M6IFt7XG4gKiAgICAgICAgICAgICB4QXhpc0luZGV4OiBbMiwgNF0sXG4gKiAgICAgICAgICAgICB5QXhpc0luZGV4OiAnYWxsJ1xuICogICAgICAgICB9LCB7XG4gKiAgICAgICAgICAgICB4QXhpc0lkOiBbJ2E1JywgJ2E3J10sXG4gKiAgICAgICAgICAgICB4QXhpc05hbWU6ICd4eHgnXG4gKiAgICAgICAgIH1dXG4gKiAgICAgfVxuICogfVxuICovXG5cblxuZnVuY3Rpb24gZ2V0TGlua0dyb3VwSW5kZXgobGlua3NPcHRpb24sIGF4aXMpIHtcbiAgdmFyIGF4aXNNb2RlbCA9IGF4aXMubW9kZWw7XG4gIHZhciBkaW0gPSBheGlzLmRpbTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmtzT3B0aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGxpbmtPcHRpb24gPSBsaW5rc09wdGlvbltpXSB8fCB7fTtcblxuICAgIGlmIChjaGVja1Byb3BJbkxpbmsobGlua09wdGlvbltkaW0gKyAnQXhpc0lkJ10sIGF4aXNNb2RlbC5pZCkgfHwgY2hlY2tQcm9wSW5MaW5rKGxpbmtPcHRpb25bZGltICsgJ0F4aXNJbmRleCddLCBheGlzTW9kZWwuY29tcG9uZW50SW5kZXgpIHx8IGNoZWNrUHJvcEluTGluayhsaW5rT3B0aW9uW2RpbSArICdBeGlzTmFtZSddLCBheGlzTW9kZWwubmFtZSkpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja1Byb3BJbkxpbmsobGlua1Byb3BWYWx1ZSwgYXhpc1Byb3BWYWx1ZSkge1xuICByZXR1cm4gbGlua1Byb3BWYWx1ZSA9PT0gJ2FsbCcgfHwgenJVdGlsLmlzQXJyYXkobGlua1Byb3BWYWx1ZSkgJiYgenJVdGlsLmluZGV4T2YobGlua1Byb3BWYWx1ZSwgYXhpc1Byb3BWYWx1ZSkgPj0gMCB8fCBsaW5rUHJvcFZhbHVlID09PSBheGlzUHJvcFZhbHVlO1xufVxuXG5mdW5jdGlvbiBmaXhWYWx1ZShheGlzTW9kZWwpIHtcbiAgdmFyIGF4aXNJbmZvID0gZ2V0QXhpc0luZm8oYXhpc01vZGVsKTtcblxuICBpZiAoIWF4aXNJbmZvKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGF4aXNQb2ludGVyTW9kZWwgPSBheGlzSW5mby5heGlzUG9pbnRlck1vZGVsO1xuICB2YXIgc2NhbGUgPSBheGlzSW5mby5heGlzLnNjYWxlO1xuICB2YXIgb3B0aW9uID0gYXhpc1BvaW50ZXJNb2RlbC5vcHRpb247XG4gIHZhciBzdGF0dXMgPSBheGlzUG9pbnRlck1vZGVsLmdldCgnc3RhdHVzJyk7XG4gIHZhciB2YWx1ZSA9IGF4aXNQb2ludGVyTW9kZWwuZ2V0KCd2YWx1ZScpOyAvLyBQYXJzZSBpbml0IHZhbHVlIGZvciBjYXRlZ29yeSBhbmQgdGltZSBheGlzLlxuXG4gIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgdmFsdWUgPSBzY2FsZS5wYXJzZSh2YWx1ZSk7XG4gIH1cblxuICB2YXIgdXNlSGFuZGxlID0gaXNIYW5kbGVUcmlnZ2VyKGF4aXNQb2ludGVyTW9kZWwpOyAvLyBJZiBgaGFuZGxlYCB1c2VkLCBgYXhpc1BvaW50ZXJgIHdpbGwgYWx3YXlzIGJlIGRpc3BsYXllZCwgc28gdmFsdWVcbiAgLy8gYW5kIHN0YXR1cyBzaG91bGQgYmUgaW5pdGlhbGl6ZWQuXG5cbiAgaWYgKHN0YXR1cyA9PSBudWxsKSB7XG4gICAgb3B0aW9uLnN0YXR1cyA9IHVzZUhhbmRsZSA/ICdzaG93JyA6ICdoaWRlJztcbiAgfVxuXG4gIHZhciBleHRlbnQgPSBzY2FsZS5nZXRFeHRlbnQoKS5zbGljZSgpO1xuICBleHRlbnRbMF0gPiBleHRlbnRbMV0gJiYgZXh0ZW50LnJldmVyc2UoKTtcblxuICBpZiAoIC8vIFBpY2sgYSB2YWx1ZSBvbiBheGlzIHdoZW4gaW5pdGlhbGl6aW5nLlxuICB2YWx1ZSA9PSBudWxsIC8vIElmIGJvdGggYGhhbmRsZWAgYW5kIGBkYXRhWm9vbWAgYXJlIHVzZWQsIHZhbHVlIG1heSBiZSBvdXQgb2YgYXhpcyBleHRlbnQsXG4gIC8vIHdoZXJlIHdlIHNob3VsZCByZS1waWNrIGEgdmFsdWUgdG8ga2VlcCBgaGFuZGxlYCBkaXNwbGF5aW5nIG5vcm1hbGx5LlxuICB8fCB2YWx1ZSA+IGV4dGVudFsxXSkge1xuICAgIC8vIE1ha2UgaGFuZGxlIGRpc3BsYXllZCBvbiB0aGUgZW5kIG9mIHRoZSBheGlzIHdoZW4gaW5pdCwgd2hpY2ggbG9va3MgYmV0dGVyLlxuICAgIHZhbHVlID0gZXh0ZW50WzFdO1xuICB9XG5cbiAgaWYgKHZhbHVlIDwgZXh0ZW50WzBdKSB7XG4gICAgdmFsdWUgPSBleHRlbnRbMF07XG4gIH1cblxuICBvcHRpb24udmFsdWUgPSB2YWx1ZTtcblxuICBpZiAodXNlSGFuZGxlKSB7XG4gICAgb3B0aW9uLnN0YXR1cyA9IGF4aXNJbmZvLmF4aXMuc2NhbGUuaXNCbGFuaygpID8gJ2hpZGUnIDogJ3Nob3cnO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEF4aXNJbmZvKGF4aXNNb2RlbCkge1xuICB2YXIgY29vcmRTeXNBeGVzSW5mbyA9IChheGlzTW9kZWwuZWNNb2RlbC5nZXRDb21wb25lbnQoJ2F4aXNQb2ludGVyJykgfHwge30pLmNvb3JkU3lzQXhlc0luZm87XG4gIHJldHVybiBjb29yZFN5c0F4ZXNJbmZvICYmIGNvb3JkU3lzQXhlc0luZm8uYXhlc0luZm9bbWFrZUtleShheGlzTW9kZWwpXTtcbn1cblxuZnVuY3Rpb24gZ2V0QXhpc1BvaW50ZXJNb2RlbChheGlzTW9kZWwpIHtcbiAgdmFyIGF4aXNJbmZvID0gZ2V0QXhpc0luZm8oYXhpc01vZGVsKTtcbiAgcmV0dXJuIGF4aXNJbmZvICYmIGF4aXNJbmZvLmF4aXNQb2ludGVyTW9kZWw7XG59XG5cbmZ1bmN0aW9uIGlzSGFuZGxlVHJpZ2dlcihheGlzUG9pbnRlck1vZGVsKSB7XG4gIHJldHVybiAhIWF4aXNQb2ludGVyTW9kZWwuZ2V0KCdoYW5kbGUuc2hvdycpO1xufVxuLyoqXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL21vZGVsL01vZGVsfSBtb2RlbFxuICogQHJldHVybiB7c3RyaW5nfSB1bmlxdWUga2V5XG4gKi9cblxuXG5mdW5jdGlvbiBtYWtlS2V5KG1vZGVsKSB7XG4gIHJldHVybiBtb2RlbC50eXBlICsgJ3x8JyArIG1vZGVsLmlkO1xufVxuXG5leHBvcnRzLmNvbGxlY3QgPSBjb2xsZWN0O1xuZXhwb3J0cy5maXhWYWx1ZSA9IGZpeFZhbHVlO1xuZXhwb3J0cy5nZXRBeGlzSW5mbyA9IGdldEF4aXNJbmZvO1xuZXhwb3J0cy5nZXRBeGlzUG9pbnRlck1vZGVsID0gZ2V0QXhpc1BvaW50ZXJNb2RlbDtcbmV4cG9ydHMubWFrZUtleSA9IG1ha2VLZXk7IiwidmFyIHpyVXRpbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3V0aWxcIik7XG5cbnZhciBncmFwaGljID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvZ3JhcGhpY1wiKTtcblxudmFyIHRleHRDb250YWluID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvbnRhaW4vdGV4dFwiKTtcblxudmFyIGZvcm1hdFV0aWwgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9mb3JtYXRcIik7XG5cbnZhciBtYXRyaXggPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS9tYXRyaXhcIik7XG5cbnZhciBheGlzSGVscGVyID0gcmVxdWlyZShcIi4uLy4uL2Nvb3JkL2F4aXNIZWxwZXJcIik7XG5cbnZhciBBeGlzQnVpbGRlciA9IHJlcXVpcmUoXCIuLi9heGlzL0F4aXNCdWlsZGVyXCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbi8qKlxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Nb2RlbH0gYXhpc1BvaW50ZXJNb2RlbFxuICovXG5mdW5jdGlvbiBidWlsZEVsU3R5bGUoYXhpc1BvaW50ZXJNb2RlbCkge1xuICB2YXIgYXhpc1BvaW50ZXJUeXBlID0gYXhpc1BvaW50ZXJNb2RlbC5nZXQoJ3R5cGUnKTtcbiAgdmFyIHN0eWxlTW9kZWwgPSBheGlzUG9pbnRlck1vZGVsLmdldE1vZGVsKGF4aXNQb2ludGVyVHlwZSArICdTdHlsZScpO1xuICB2YXIgc3R5bGU7XG5cbiAgaWYgKGF4aXNQb2ludGVyVHlwZSA9PT0gJ2xpbmUnKSB7XG4gICAgc3R5bGUgPSBzdHlsZU1vZGVsLmdldExpbmVTdHlsZSgpO1xuICAgIHN0eWxlLmZpbGwgPSBudWxsO1xuICB9IGVsc2UgaWYgKGF4aXNQb2ludGVyVHlwZSA9PT0gJ3NoYWRvdycpIHtcbiAgICBzdHlsZSA9IHN0eWxlTW9kZWwuZ2V0QXJlYVN0eWxlKCk7XG4gICAgc3R5bGUuc3Ryb2tlID0gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cbi8qKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gbGFiZWxQb3Mge2FsaWduLCB2ZXJ0aWNhbEFsaWduLCBwb3NpdGlvbn1cbiAqL1xuXG5cbmZ1bmN0aW9uIGJ1aWxkTGFiZWxFbE9wdGlvbihlbE9wdGlvbiwgYXhpc01vZGVsLCBheGlzUG9pbnRlck1vZGVsLCBhcGksIGxhYmVsUG9zKSB7XG4gIHZhciB2YWx1ZSA9IGF4aXNQb2ludGVyTW9kZWwuZ2V0KCd2YWx1ZScpO1xuICB2YXIgdGV4dCA9IGdldFZhbHVlTGFiZWwodmFsdWUsIGF4aXNNb2RlbC5heGlzLCBheGlzTW9kZWwuZWNNb2RlbCwgYXhpc1BvaW50ZXJNb2RlbC5nZXQoJ3Nlcmllc0RhdGFJbmRpY2VzJyksIHtcbiAgICBwcmVjaXNpb246IGF4aXNQb2ludGVyTW9kZWwuZ2V0KCdsYWJlbC5wcmVjaXNpb24nKSxcbiAgICBmb3JtYXR0ZXI6IGF4aXNQb2ludGVyTW9kZWwuZ2V0KCdsYWJlbC5mb3JtYXR0ZXInKVxuICB9KTtcbiAgdmFyIGxhYmVsTW9kZWwgPSBheGlzUG9pbnRlck1vZGVsLmdldE1vZGVsKCdsYWJlbCcpO1xuICB2YXIgcGFkZGluZ3MgPSBmb3JtYXRVdGlsLm5vcm1hbGl6ZUNzc0FycmF5KGxhYmVsTW9kZWwuZ2V0KCdwYWRkaW5nJykgfHwgMCk7XG4gIHZhciBmb250ID0gbGFiZWxNb2RlbC5nZXRGb250KCk7XG4gIHZhciB0ZXh0UmVjdCA9IHRleHRDb250YWluLmdldEJvdW5kaW5nUmVjdCh0ZXh0LCBmb250KTtcbiAgdmFyIHBvc2l0aW9uID0gbGFiZWxQb3MucG9zaXRpb247XG4gIHZhciB3aWR0aCA9IHRleHRSZWN0LndpZHRoICsgcGFkZGluZ3NbMV0gKyBwYWRkaW5nc1szXTtcbiAgdmFyIGhlaWdodCA9IHRleHRSZWN0LmhlaWdodCArIHBhZGRpbmdzWzBdICsgcGFkZGluZ3NbMl07IC8vIEFkanVzdCBieSBhbGlnbi5cblxuICB2YXIgYWxpZ24gPSBsYWJlbFBvcy5hbGlnbjtcbiAgYWxpZ24gPT09ICdyaWdodCcgJiYgKHBvc2l0aW9uWzBdIC09IHdpZHRoKTtcbiAgYWxpZ24gPT09ICdjZW50ZXInICYmIChwb3NpdGlvblswXSAtPSB3aWR0aCAvIDIpO1xuICB2YXIgdmVydGljYWxBbGlnbiA9IGxhYmVsUG9zLnZlcnRpY2FsQWxpZ247XG4gIHZlcnRpY2FsQWxpZ24gPT09ICdib3R0b20nICYmIChwb3NpdGlvblsxXSAtPSBoZWlnaHQpO1xuICB2ZXJ0aWNhbEFsaWduID09PSAnbWlkZGxlJyAmJiAocG9zaXRpb25bMV0gLT0gaGVpZ2h0IC8gMik7IC8vIE5vdCBvdmVyZmxvdyBlYyBjb250YWluZXJcblxuICBjb25maW5lSW5Db250YWluZXIocG9zaXRpb24sIHdpZHRoLCBoZWlnaHQsIGFwaSk7XG4gIHZhciBiZ0NvbG9yID0gbGFiZWxNb2RlbC5nZXQoJ2JhY2tncm91bmRDb2xvcicpO1xuXG4gIGlmICghYmdDb2xvciB8fCBiZ0NvbG9yID09PSAnYXV0bycpIHtcbiAgICBiZ0NvbG9yID0gYXhpc01vZGVsLmdldCgnYXhpc0xpbmUubGluZVN0eWxlLmNvbG9yJyk7XG4gIH1cblxuICBlbE9wdGlvbi5sYWJlbCA9IHtcbiAgICBzaGFwZToge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgICB3aWR0aDogd2lkdGgsXG4gICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgIHI6IGxhYmVsTW9kZWwuZ2V0KCdib3JkZXJSYWRpdXMnKVxuICAgIH0sXG4gICAgcG9zaXRpb246IHBvc2l0aW9uLnNsaWNlKCksXG4gICAgLy8gVE9ETzogcmljaFxuICAgIHN0eWxlOiB7XG4gICAgICB0ZXh0OiB0ZXh0LFxuICAgICAgdGV4dEZvbnQ6IGZvbnQsXG4gICAgICB0ZXh0RmlsbDogbGFiZWxNb2RlbC5nZXRUZXh0Q29sb3IoKSxcbiAgICAgIHRleHRQb3NpdGlvbjogJ2luc2lkZScsXG4gICAgICBmaWxsOiBiZ0NvbG9yLFxuICAgICAgc3Ryb2tlOiBsYWJlbE1vZGVsLmdldCgnYm9yZGVyQ29sb3InKSB8fCAndHJhbnNwYXJlbnQnLFxuICAgICAgbGluZVdpZHRoOiBsYWJlbE1vZGVsLmdldCgnYm9yZGVyV2lkdGgnKSB8fCAwLFxuICAgICAgc2hhZG93Qmx1cjogbGFiZWxNb2RlbC5nZXQoJ3NoYWRvd0JsdXInKSxcbiAgICAgIHNoYWRvd0NvbG9yOiBsYWJlbE1vZGVsLmdldCgnc2hhZG93Q29sb3InKSxcbiAgICAgIHNoYWRvd09mZnNldFg6IGxhYmVsTW9kZWwuZ2V0KCdzaGFkb3dPZmZzZXRYJyksXG4gICAgICBzaGFkb3dPZmZzZXRZOiBsYWJlbE1vZGVsLmdldCgnc2hhZG93T2Zmc2V0WScpXG4gICAgfSxcbiAgICAvLyBMYWJsZSBzaG91bGQgYmUgb3ZlciBheGlzUG9pbnRlci5cbiAgICB6MjogMTBcbiAgfTtcbn0gLy8gRG8gbm90IG92ZXJmbG93IGVjIGNvbnRhaW5lclxuXG5cbmZ1bmN0aW9uIGNvbmZpbmVJbkNvbnRhaW5lcihwb3NpdGlvbiwgd2lkdGgsIGhlaWdodCwgYXBpKSB7XG4gIHZhciB2aWV3V2lkdGggPSBhcGkuZ2V0V2lkdGgoKTtcbiAgdmFyIHZpZXdIZWlnaHQgPSBhcGkuZ2V0SGVpZ2h0KCk7XG4gIHBvc2l0aW9uWzBdID0gTWF0aC5taW4ocG9zaXRpb25bMF0gKyB3aWR0aCwgdmlld1dpZHRoKSAtIHdpZHRoO1xuICBwb3NpdGlvblsxXSA9IE1hdGgubWluKHBvc2l0aW9uWzFdICsgaGVpZ2h0LCB2aWV3SGVpZ2h0KSAtIGhlaWdodDtcbiAgcG9zaXRpb25bMF0gPSBNYXRoLm1heChwb3NpdGlvblswXSwgMCk7XG4gIHBvc2l0aW9uWzFdID0gTWF0aC5tYXgocG9zaXRpb25bMV0sIDApO1xufVxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvY29vcmQvQXhpc30gYXhpc1xuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9HbG9iYWx9IGVjTW9kZWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRcbiAqIEBwYXJhbSB7QXJyYXkuPE9iamVjdD59IHNlcmllc0RhdGFJbmRpY2VzXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IG9wdC5wcmVjaXNpb24gJ2F1dG8nIG9yIGEgbnVtYmVyXG4gKiBAcGFyYW0ge3N0cmluZ3xGdW5jdGlvbn0gb3B0LmZvcm1hdHRlciBsYWJlbCBmb3JtYXR0ZXJcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFZhbHVlTGFiZWwodmFsdWUsIGF4aXMsIGVjTW9kZWwsIHNlcmllc0RhdGFJbmRpY2VzLCBvcHQpIHtcbiAgdmFsdWUgPSBheGlzLnNjYWxlLnBhcnNlKHZhbHVlKTtcbiAgdmFyIHRleHQgPSBheGlzLnNjYWxlLmdldExhYmVsKCAvLyBJZiBgcHJlY2lzaW9uYCBpcyBzZXQsIHdpZHRoIGNhbiBiZSBmaXhlZCAobGlrZSAnMTIuMDA1MDAnKSwgd2hpY2hcbiAgLy8gaGVscHMgdG8gZGVib3VuY2Ugd2hlbiB3aGVuIG1vdmluZyBsYWJlbC5cbiAgdmFsdWUsIHtcbiAgICBwcmVjaXNpb246IG9wdC5wcmVjaXNpb25cbiAgfSk7XG4gIHZhciBmb3JtYXR0ZXIgPSBvcHQuZm9ybWF0dGVyO1xuXG4gIGlmIChmb3JtYXR0ZXIpIHtcbiAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgdmFsdWU6IGF4aXNIZWxwZXIuZ2V0QXhpc1Jhd1ZhbHVlKGF4aXMsIHZhbHVlKSxcbiAgICAgIHNlcmllc0RhdGE6IFtdXG4gICAgfTtcbiAgICB6clV0aWwuZWFjaChzZXJpZXNEYXRhSW5kaWNlcywgZnVuY3Rpb24gKGlkeEl0ZW0pIHtcbiAgICAgIHZhciBzZXJpZXMgPSBlY01vZGVsLmdldFNlcmllc0J5SW5kZXgoaWR4SXRlbS5zZXJpZXNJbmRleCk7XG4gICAgICB2YXIgZGF0YUluZGV4ID0gaWR4SXRlbS5kYXRhSW5kZXhJbnNpZGU7XG4gICAgICB2YXIgZGF0YVBhcmFtcyA9IHNlcmllcyAmJiBzZXJpZXMuZ2V0RGF0YVBhcmFtcyhkYXRhSW5kZXgpO1xuICAgICAgZGF0YVBhcmFtcyAmJiBwYXJhbXMuc2VyaWVzRGF0YS5wdXNoKGRhdGFQYXJhbXMpO1xuICAgIH0pO1xuXG4gICAgaWYgKHpyVXRpbC5pc1N0cmluZyhmb3JtYXR0ZXIpKSB7XG4gICAgICB0ZXh0ID0gZm9ybWF0dGVyLnJlcGxhY2UoJ3t2YWx1ZX0nLCB0ZXh0KTtcbiAgICB9IGVsc2UgaWYgKHpyVXRpbC5pc0Z1bmN0aW9uKGZvcm1hdHRlcikpIHtcbiAgICAgIHRleHQgPSBmb3JtYXR0ZXIocGFyYW1zKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGV4dDtcbn1cbi8qKlxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9jb29yZC9BeGlzfSBheGlzXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSB7T2JqZWN0fSBsYXlvdXRJbmZvIHtcbiAqICByb3RhdGlvbiwgcG9zaXRpb24sIGxhYmVsT2Zmc2V0LCBsYWJlbERpcmVjdGlvbiwgbGFiZWxNYXJnaW5cbiAqIH1cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFRyYW5zZm9ybWVkUG9zaXRpb24oYXhpcywgdmFsdWUsIGxheW91dEluZm8pIHtcbiAgdmFyIHRyYW5zZm9ybSA9IG1hdHJpeC5jcmVhdGUoKTtcbiAgbWF0cml4LnJvdGF0ZSh0cmFuc2Zvcm0sIHRyYW5zZm9ybSwgbGF5b3V0SW5mby5yb3RhdGlvbik7XG4gIG1hdHJpeC50cmFuc2xhdGUodHJhbnNmb3JtLCB0cmFuc2Zvcm0sIGxheW91dEluZm8ucG9zaXRpb24pO1xuICByZXR1cm4gZ3JhcGhpYy5hcHBseVRyYW5zZm9ybShbYXhpcy5kYXRhVG9Db29yZCh2YWx1ZSksIChsYXlvdXRJbmZvLmxhYmVsT2Zmc2V0IHx8IDApICsgKGxheW91dEluZm8ubGFiZWxEaXJlY3Rpb24gfHwgMSkgKiAobGF5b3V0SW5mby5sYWJlbE1hcmdpbiB8fCAwKV0sIHRyYW5zZm9ybSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQ2FydGVzaWFuU2luZ2xlTGFiZWxFbE9wdGlvbih2YWx1ZSwgZWxPcHRpb24sIGxheW91dEluZm8sIGF4aXNNb2RlbCwgYXhpc1BvaW50ZXJNb2RlbCwgYXBpKSB7XG4gIHZhciB0ZXh0TGF5b3V0ID0gQXhpc0J1aWxkZXIuaW5uZXJUZXh0TGF5b3V0KGxheW91dEluZm8ucm90YXRpb24sIDAsIGxheW91dEluZm8ubGFiZWxEaXJlY3Rpb24pO1xuICBsYXlvdXRJbmZvLmxhYmVsTWFyZ2luID0gYXhpc1BvaW50ZXJNb2RlbC5nZXQoJ2xhYmVsLm1hcmdpbicpO1xuICBidWlsZExhYmVsRWxPcHRpb24oZWxPcHRpb24sIGF4aXNNb2RlbCwgYXhpc1BvaW50ZXJNb2RlbCwgYXBpLCB7XG4gICAgcG9zaXRpb246IGdldFRyYW5zZm9ybWVkUG9zaXRpb24oYXhpc01vZGVsLmF4aXMsIHZhbHVlLCBsYXlvdXRJbmZvKSxcbiAgICBhbGlnbjogdGV4dExheW91dC50ZXh0QWxpZ24sXG4gICAgdmVydGljYWxBbGlnbjogdGV4dExheW91dC50ZXh0VmVydGljYWxBbGlnblxuICB9KTtcbn1cbi8qKlxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gcDFcbiAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IHAyXG4gKiBAcGFyYW0ge251bWJlcn0gW3hEaW1JbmRleD0wXSBvciAxXG4gKi9cblxuXG5mdW5jdGlvbiBtYWtlTGluZVNoYXBlKHAxLCBwMiwgeERpbUluZGV4KSB7XG4gIHhEaW1JbmRleCA9IHhEaW1JbmRleCB8fCAwO1xuICByZXR1cm4ge1xuICAgIHgxOiBwMVt4RGltSW5kZXhdLFxuICAgIHkxOiBwMVsxIC0geERpbUluZGV4XSxcbiAgICB4MjogcDJbeERpbUluZGV4XSxcbiAgICB5MjogcDJbMSAtIHhEaW1JbmRleF1cbiAgfTtcbn1cbi8qKlxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0geHlcbiAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IHdoXG4gKiBAcGFyYW0ge251bWJlcn0gW3hEaW1JbmRleD0wXSBvciAxXG4gKi9cblxuXG5mdW5jdGlvbiBtYWtlUmVjdFNoYXBlKHh5LCB3aCwgeERpbUluZGV4KSB7XG4gIHhEaW1JbmRleCA9IHhEaW1JbmRleCB8fCAwO1xuICByZXR1cm4ge1xuICAgIHg6IHh5W3hEaW1JbmRleF0sXG4gICAgeTogeHlbMSAtIHhEaW1JbmRleF0sXG4gICAgd2lkdGg6IHdoW3hEaW1JbmRleF0sXG4gICAgaGVpZ2h0OiB3aFsxIC0geERpbUluZGV4XVxuICB9O1xufVxuXG5mdW5jdGlvbiBtYWtlU2VjdG9yU2hhcGUoY3gsIGN5LCByMCwgciwgc3RhcnRBbmdsZSwgZW5kQW5nbGUpIHtcbiAgcmV0dXJuIHtcbiAgICBjeDogY3gsXG4gICAgY3k6IGN5LFxuICAgIHIwOiByMCxcbiAgICByOiByLFxuICAgIHN0YXJ0QW5nbGU6IHN0YXJ0QW5nbGUsXG4gICAgZW5kQW5nbGU6IGVuZEFuZ2xlLFxuICAgIGNsb2Nrd2lzZTogdHJ1ZVxuICB9O1xufVxuXG5leHBvcnRzLmJ1aWxkRWxTdHlsZSA9IGJ1aWxkRWxTdHlsZTtcbmV4cG9ydHMuYnVpbGRMYWJlbEVsT3B0aW9uID0gYnVpbGRMYWJlbEVsT3B0aW9uO1xuZXhwb3J0cy5nZXRWYWx1ZUxhYmVsID0gZ2V0VmFsdWVMYWJlbDtcbmV4cG9ydHMuZ2V0VHJhbnNmb3JtZWRQb3NpdGlvbiA9IGdldFRyYW5zZm9ybWVkUG9zaXRpb247XG5leHBvcnRzLmJ1aWxkQ2FydGVzaWFuU2luZ2xlTGFiZWxFbE9wdGlvbiA9IGJ1aWxkQ2FydGVzaWFuU2luZ2xlTGFiZWxFbE9wdGlvbjtcbmV4cG9ydHMubWFrZUxpbmVTaGFwZSA9IG1ha2VMaW5lU2hhcGU7XG5leHBvcnRzLm1ha2VSZWN0U2hhcGUgPSBtYWtlUmVjdFNoYXBlO1xuZXhwb3J0cy5tYWtlU2VjdG9yU2hhcGUgPSBtYWtlU2VjdG9yU2hhcGU7IiwidmFyIENvbXBvbmVudE1vZGVsID0gcmVxdWlyZShcIi4uL21vZGVsL0NvbXBvbmVudFwiKTtcblxudmFyIENvbXBvbmVudFZpZXcgPSByZXF1aXJlKFwiLi4vdmlldy9Db21wb25lbnRcIik7XG5cbnZhciBfc291cmNlSGVscGVyID0gcmVxdWlyZShcIi4uL2RhdGEvaGVscGVyL3NvdXJjZUhlbHBlclwiKTtcblxudmFyIGRldGVjdFNvdXJjZUZvcm1hdCA9IF9zb3VyY2VIZWxwZXIuZGV0ZWN0U291cmNlRm9ybWF0O1xuXG52YXIgX3NvdXJjZVR5cGUgPSByZXF1aXJlKFwiLi4vZGF0YS9oZWxwZXIvc291cmNlVHlwZVwiKTtcblxudmFyIFNFUklFU19MQVlPVVRfQllfQ09MVU1OID0gX3NvdXJjZVR5cGUuU0VSSUVTX0xBWU9VVF9CWV9DT0xVTU47XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBpcyBpbXBvcnRlZCBieSBlY2hhcnRzIGRpcmVjdGx5LlxuICpcbiAqIE5vdGljZTpcbiAqIEFsd2F5cyBrZWVwIHRoaXMgZmlsZSBleGlzdHMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gKiBCZWNhdXNlIGJlZm9yZSA0LjEuMCwgZGF0YXNldCBpcyBhbiBvcHRpb25hbCBjb21wb25lbnQsXG4gKiBzb21lIHVzZXJzIG1heSBpbXBvcnQgdGhpcyBtb2R1bGUgbWFudWFsbHkuXG4gKi9cbkNvbXBvbmVudE1vZGVsLmV4dGVuZCh7XG4gIHR5cGU6ICdkYXRhc2V0JyxcblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgZGVmYXVsdE9wdGlvbjoge1xuICAgIC8vICdyb3cnLCAnY29sdW1uJ1xuICAgIHNlcmllc0xheW91dEJ5OiBTRVJJRVNfTEFZT1VUX0JZX0NPTFVNTixcbiAgICAvLyBudWxsLydhdXRvJzogYXV0byBkZXRlY3QgaGVhZGVyLCBzZWUgXCJtb2R1bGU6ZWNoYXJ0cy9kYXRhL2hlbHBlci9zb3VyY2VIZWxwZXJcIlxuICAgIHNvdXJjZUhlYWRlcjogbnVsbCxcbiAgICBkaW1lbnNpb25zOiBudWxsLFxuICAgIHNvdXJjZTogbnVsbFxuICB9LFxuICBvcHRpb25VcGRhdGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgZGV0ZWN0U291cmNlRm9ybWF0KHRoaXMpO1xuICB9XG59KTtcbkNvbXBvbmVudFZpZXcuZXh0ZW5kKHtcbiAgdHlwZTogJ2RhdGFzZXQnXG59KTsiLCJ2YXIgX2xheW91dCA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2xheW91dFwiKTtcblxudmFyIGdldExheW91dFJlY3QgPSBfbGF5b3V0LmdldExheW91dFJlY3Q7XG52YXIgbGF5b3V0Qm94ID0gX2xheW91dC5ib3g7XG52YXIgcG9zaXRpb25FbGVtZW50ID0gX2xheW91dC5wb3NpdGlvbkVsZW1lbnQ7XG5cbnZhciBmb3JtYXRVdGlsID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvZm9ybWF0XCIpO1xuXG52YXIgZ3JhcGhpYyA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2dyYXBoaWNcIik7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuLyoqXG4gKiBMYXlvdXQgbGlzdCBsaWtlIGNvbXBvbmVudC5cbiAqIEl0IHdpbGwgYm94IGxheW91dCBlYWNoIGl0ZW1zIGluIGdyb3VwIG9mIGNvbXBvbmVudCBhbmQgdGhlbiBwb3NpdGlvbiB0aGUgd2hvbGUgZ3JvdXAgaW4gdGhlIHZpZXdwb3J0XG4gKiBAcGFyYW0ge21vZHVsZTp6cmVuZGVyL2dyb3VwL0dyb3VwfSBncm91cFxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Db21wb25lbnR9IGNvbXBvbmVudE1vZGVsXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL0V4dGVuc2lvbkFQSX1cbiAqL1xuZnVuY3Rpb24gbGF5b3V0KGdyb3VwLCBjb21wb25lbnRNb2RlbCwgYXBpKSB7XG4gIHZhciBib3hMYXlvdXRQYXJhbXMgPSBjb21wb25lbnRNb2RlbC5nZXRCb3hMYXlvdXRQYXJhbXMoKTtcbiAgdmFyIHBhZGRpbmcgPSBjb21wb25lbnRNb2RlbC5nZXQoJ3BhZGRpbmcnKTtcbiAgdmFyIHZpZXdwb3J0U2l6ZSA9IHtcbiAgICB3aWR0aDogYXBpLmdldFdpZHRoKCksXG4gICAgaGVpZ2h0OiBhcGkuZ2V0SGVpZ2h0KClcbiAgfTtcbiAgdmFyIHJlY3QgPSBnZXRMYXlvdXRSZWN0KGJveExheW91dFBhcmFtcywgdmlld3BvcnRTaXplLCBwYWRkaW5nKTtcbiAgbGF5b3V0Qm94KGNvbXBvbmVudE1vZGVsLmdldCgnb3JpZW50JyksIGdyb3VwLCBjb21wb25lbnRNb2RlbC5nZXQoJ2l0ZW1HYXAnKSwgcmVjdC53aWR0aCwgcmVjdC5oZWlnaHQpO1xuICBwb3NpdGlvbkVsZW1lbnQoZ3JvdXAsIGJveExheW91dFBhcmFtcywgdmlld3BvcnRTaXplLCBwYWRkaW5nKTtcbn1cblxuZnVuY3Rpb24gbWFrZUJhY2tncm91bmQocmVjdCwgY29tcG9uZW50TW9kZWwpIHtcbiAgdmFyIHBhZGRpbmcgPSBmb3JtYXRVdGlsLm5vcm1hbGl6ZUNzc0FycmF5KGNvbXBvbmVudE1vZGVsLmdldCgncGFkZGluZycpKTtcbiAgdmFyIHN0eWxlID0gY29tcG9uZW50TW9kZWwuZ2V0SXRlbVN0eWxlKFsnY29sb3InLCAnb3BhY2l0eSddKTtcbiAgc3R5bGUuZmlsbCA9IGNvbXBvbmVudE1vZGVsLmdldCgnYmFja2dyb3VuZENvbG9yJyk7XG4gIHZhciByZWN0ID0gbmV3IGdyYXBoaWMuUmVjdCh7XG4gICAgc2hhcGU6IHtcbiAgICAgIHg6IHJlY3QueCAtIHBhZGRpbmdbM10sXG4gICAgICB5OiByZWN0LnkgLSBwYWRkaW5nWzBdLFxuICAgICAgd2lkdGg6IHJlY3Qud2lkdGggKyBwYWRkaW5nWzFdICsgcGFkZGluZ1szXSxcbiAgICAgIGhlaWdodDogcmVjdC5oZWlnaHQgKyBwYWRkaW5nWzBdICsgcGFkZGluZ1syXSxcbiAgICAgIHI6IGNvbXBvbmVudE1vZGVsLmdldCgnYm9yZGVyUmFkaXVzJylcbiAgICB9LFxuICAgIHN0eWxlOiBzdHlsZSxcbiAgICBzaWxlbnQ6IHRydWUsXG4gICAgejI6IC0xXG4gIH0pOyAvLyBGSVhNRVxuICAvLyBgc3ViUGl4ZWxPcHRpbWl6ZVJlY3RgIG1heSBicmluZyBzb21lIGdhcCBiZXR3ZWVuIGVkZ2Ugb2Ygdmlld3BhcnRcbiAgLy8gYW5kIGJhY2tncm91bmQgcmVjdCB3aGVuIHNldHRpbmcgbGlrZSBgbGVmdDogMGAsIGB0b3A6IDBgLlxuICAvLyBncmFwaGljLnN1YlBpeGVsT3B0aW1pemVSZWN0KHJlY3QpO1xuXG4gIHJldHVybiByZWN0O1xufVxuXG5leHBvcnRzLmxheW91dCA9IGxheW91dDtcbmV4cG9ydHMubWFrZUJhY2tncm91bmQgPSBtYWtlQmFja2dyb3VuZDsiLCJ2YXIgenJVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG4vKipcbiAqIERhdGEgc2VsZWN0YWJsZSBtaXhpbiBmb3IgY2hhcnQgc2VyaWVzLlxuICogVG8gZWFuYmxlIGRhdGEgc2VsZWN0LCBvcHRpb24gb2Ygc2VyaWVzIG11c3QgaGF2ZSBgc2VsZWN0ZWRNb2RlYC5cbiAqIEFuZCBlYWNoIGRhdGEgaXRlbSB3aWxsIHVzZSBgc2VsZWN0ZWRgIHRvIHRvZ2dsZSBpdHNlbGYgc2VsZWN0ZWQgc3RhdHVzXG4gKi9cbnZhciBfZGVmYXVsdCA9IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7QXJyYXkuPE9iamVjdD59IHRhcmdldExpc3QgW3tuYW1lLCB2YWx1ZSwgc2VsZWN0ZWR9LCAuLi5dXG4gICAqICAgICAgICBJZiB0YXJnZXRMaXN0IGlzIGFuIGFycmF5LCBpdCBzaG91bGQgbGlrZSBbe25hbWU6IC4uLiwgdmFsdWU6IC4uLn0sIC4uLl0uXG4gICAqICAgICAgICBJZiB0YXJnZXRMaXN0IGlzIGEgXCJMaXN0XCIsIGl0IG11c3QgaGF2ZSBjb29yZERpbTogJ3ZhbHVlJyBkaW1lbnNpb24gYW5kIG5hbWUuXG4gICAqL1xuICB1cGRhdGVTZWxlY3RlZE1hcDogZnVuY3Rpb24gKHRhcmdldExpc3QpIHtcbiAgICB0aGlzLl90YXJnZXRMaXN0ID0genJVdGlsLmlzQXJyYXkodGFyZ2V0TGlzdCkgPyB0YXJnZXRMaXN0LnNsaWNlKCkgOiBbXTtcbiAgICB0aGlzLl9zZWxlY3RUYXJnZXRNYXAgPSB6clV0aWwucmVkdWNlKHRhcmdldExpc3QgfHwgW10sIGZ1bmN0aW9uICh0YXJnZXRNYXAsIHRhcmdldCkge1xuICAgICAgdGFyZ2V0TWFwLnNldCh0YXJnZXQubmFtZSwgdGFyZ2V0KTtcbiAgICAgIHJldHVybiB0YXJnZXRNYXA7XG4gICAgfSwgenJVdGlsLmNyZWF0ZUhhc2hNYXAoKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEVpdGhlciBuYW1lIG9yIGlkIHNob3VsZCBiZSBwYXNzZWQgYXMgaW5wdXQgaGVyZS5cbiAgICogSWYgYm90aCBvZiB0aGVtIGFyZSBkZWZpbmVkLCBpZCBpcyB1c2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3x1bmRlZmluZWR9IG5hbWUgbmFtZSBvZiBkYXRhXG4gICAqIEBwYXJhbSB7bnVtYmVyfHVuZGVmaW5lZH0gaWQgZGF0YUluZGV4IG9mIGRhdGFcbiAgICovXG4gIC8vIFBFTkdJTkcgSWYgc2VsZWN0ZWRNb2RlIGlzIG51bGwgP1xuICBzZWxlY3Q6IGZ1bmN0aW9uIChuYW1lLCBpZCkge1xuICAgIHZhciB0YXJnZXQgPSBpZCAhPSBudWxsID8gdGhpcy5fdGFyZ2V0TGlzdFtpZF0gOiB0aGlzLl9zZWxlY3RUYXJnZXRNYXAuZ2V0KG5hbWUpO1xuICAgIHZhciBzZWxlY3RlZE1vZGUgPSB0aGlzLmdldCgnc2VsZWN0ZWRNb2RlJyk7XG5cbiAgICBpZiAoc2VsZWN0ZWRNb2RlID09PSAnc2luZ2xlJykge1xuICAgICAgdGhpcy5fc2VsZWN0VGFyZ2V0TWFwLmVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICB0YXJnZXQuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRhcmdldCAmJiAodGFyZ2V0LnNlbGVjdGVkID0gdHJ1ZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEVpdGhlciBuYW1lIG9yIGlkIHNob3VsZCBiZSBwYXNzZWQgYXMgaW5wdXQgaGVyZS5cbiAgICogSWYgYm90aCBvZiB0aGVtIGFyZSBkZWZpbmVkLCBpZCBpcyB1c2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3x1bmRlZmluZWR9IG5hbWUgbmFtZSBvZiBkYXRhXG4gICAqIEBwYXJhbSB7bnVtYmVyfHVuZGVmaW5lZH0gaWQgZGF0YUluZGV4IG9mIGRhdGFcbiAgICovXG4gIHVuU2VsZWN0OiBmdW5jdGlvbiAobmFtZSwgaWQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gaWQgIT0gbnVsbCA/IHRoaXMuX3RhcmdldExpc3RbaWRdIDogdGhpcy5fc2VsZWN0VGFyZ2V0TWFwLmdldChuYW1lKTsgLy8gdmFyIHNlbGVjdGVkTW9kZSA9IHRoaXMuZ2V0KCdzZWxlY3RlZE1vZGUnKTtcbiAgICAvLyBzZWxlY3RlZE1vZGUgIT09ICdzaW5nbGUnICYmIHRhcmdldCAmJiAodGFyZ2V0LnNlbGVjdGVkID0gZmFsc2UpO1xuXG4gICAgdGFyZ2V0ICYmICh0YXJnZXQuc2VsZWN0ZWQgPSBmYWxzZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEVpdGhlciBuYW1lIG9yIGlkIHNob3VsZCBiZSBwYXNzZWQgYXMgaW5wdXQgaGVyZS5cbiAgICogSWYgYm90aCBvZiB0aGVtIGFyZSBkZWZpbmVkLCBpZCBpcyB1c2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3x1bmRlZmluZWR9IG5hbWUgbmFtZSBvZiBkYXRhXG4gICAqIEBwYXJhbSB7bnVtYmVyfHVuZGVmaW5lZH0gaWQgZGF0YUluZGV4IG9mIGRhdGFcbiAgICovXG4gIHRvZ2dsZVNlbGVjdGVkOiBmdW5jdGlvbiAobmFtZSwgaWQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gaWQgIT0gbnVsbCA/IHRoaXMuX3RhcmdldExpc3RbaWRdIDogdGhpcy5fc2VsZWN0VGFyZ2V0TWFwLmdldChuYW1lKTtcblxuICAgIGlmICh0YXJnZXQgIT0gbnVsbCkge1xuICAgICAgdGhpc1t0YXJnZXQuc2VsZWN0ZWQgPyAndW5TZWxlY3QnIDogJ3NlbGVjdCddKG5hbWUsIGlkKTtcbiAgICAgIHJldHVybiB0YXJnZXQuc2VsZWN0ZWQ7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBFaXRoZXIgbmFtZSBvciBpZCBzaG91bGQgYmUgcGFzc2VkIGFzIGlucHV0IGhlcmUuXG4gICAqIElmIGJvdGggb2YgdGhlbSBhcmUgZGVmaW5lZCwgaWQgaXMgdXNlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8dW5kZWZpbmVkfSBuYW1lIG5hbWUgb2YgZGF0YVxuICAgKiBAcGFyYW0ge251bWJlcnx1bmRlZmluZWR9IGlkIGRhdGFJbmRleCBvZiBkYXRhXG4gICAqL1xuICBpc1NlbGVjdGVkOiBmdW5jdGlvbiAobmFtZSwgaWQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gaWQgIT0gbnVsbCA/IHRoaXMuX3RhcmdldExpc3RbaWRdIDogdGhpcy5fc2VsZWN0VGFyZ2V0TWFwLmdldChuYW1lKTtcbiAgICByZXR1cm4gdGFyZ2V0ICYmIHRhcmdldC5zZWxlY3RlZDtcbiAgfVxufTtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIGVjaGFydHMgPSByZXF1aXJlKFwiLi4vZWNoYXJ0c1wiKTtcblxucmVxdWlyZShcIi4vbGVnZW5kL0xlZ2VuZE1vZGVsXCIpO1xuXG5yZXF1aXJlKFwiLi9sZWdlbmQvbGVnZW5kQWN0aW9uXCIpO1xuXG5yZXF1aXJlKFwiLi9sZWdlbmQvTGVnZW5kVmlld1wiKTtcblxudmFyIGxlZ2VuZEZpbHRlciA9IHJlcXVpcmUoXCIuL2xlZ2VuZC9sZWdlbmRGaWx0ZXJcIik7XG5cbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiLi4vbW9kZWwvQ29tcG9uZW50XCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG4vLyBEbyBub3QgY29udGFpbiBzY3JvbGxhYmxlIGxlZ2VuZCwgZm9yIHNha2Ugb2YgZmlsZSBzaXplLlxuLy8gU2VyaWVzIEZpbHRlclxuZWNoYXJ0cy5yZWdpc3RlclByb2Nlc3NvcihsZWdlbmRGaWx0ZXIpO1xuQ29tcG9uZW50LnJlZ2lzdGVyU3ViVHlwZURlZmF1bHRlcignbGVnZW5kJywgZnVuY3Rpb24gKCkge1xuICAvLyBEZWZhdWx0ICdwbGFpbicgd2hlbiBubyB0eXBlIHNwZWNpZmllZC5cbiAgcmV0dXJuICdwbGFpbic7XG59KTsiLCJ2YXIgZWNoYXJ0cyA9IHJlcXVpcmUoXCIuLi8uLi9lY2hhcnRzXCIpO1xuXG52YXIgenJVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxudmFyIE1vZGVsID0gcmVxdWlyZShcIi4uLy4uL21vZGVsL01vZGVsXCIpO1xuXG52YXIgX21vZGVsID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvbW9kZWxcIik7XG5cbnZhciBpc05hbWVTcGVjaWZpZWQgPSBfbW9kZWwuaXNOYW1lU3BlY2lmaWVkO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgTGVnZW5kTW9kZWwgPSBlY2hhcnRzLmV4dGVuZENvbXBvbmVudE1vZGVsKHtcbiAgdHlwZTogJ2xlZ2VuZC5wbGFpbicsXG4gIGRlcGVuZGVuY2llczogWydzZXJpZXMnXSxcbiAgbGF5b3V0TW9kZToge1xuICAgIHR5cGU6ICdib3gnLFxuICAgIC8vIGxlZ2VuZC53aWR0aC9oZWlnaHQgYXJlIG1heFdpZHRoL21heEhlaWdodCBhY3R1YWxseSxcbiAgICAvLyB3aGVyZWFzIHJlYWx5IHdpZHRoL2hlaWdodCBpcyBjYWxjdWxhdGVkIGJ5IGl0cyBjb250ZW50LlxuICAgIC8vIChTZXR0aW5nIHtsZWZ0OiAxMCwgcmlnaHQ6IDEwfSBkb2VzIG5vdCBtYWtlIHNlbnNlKS5cbiAgICAvLyBTbyBjb25zaWRlciB0aGUgY2FzZTpcbiAgICAvLyBgc2V0T3B0aW9uKHtsZWdlbmQ6IHtsZWZ0OiAxMH0pO2BcbiAgICAvLyB0aGVuIGBzZXRPcHRpb24oe2xlZ2VuZDoge3JpZ2h0OiAxMH0pO2BcbiAgICAvLyBUaGUgcHJldmlvdXMgYGxlZnRgIHNob3VsZCBiZSBjbGVhcmVkIGJ5IHNldHRpbmcgYGlnbm9yZVNpemVgLlxuICAgIGlnbm9yZVNpemU6IHRydWVcbiAgfSxcbiAgaW5pdDogZnVuY3Rpb24gKG9wdGlvbiwgcGFyZW50TW9kZWwsIGVjTW9kZWwpIHtcbiAgICB0aGlzLm1lcmdlRGVmYXVsdEFuZFRoZW1lKG9wdGlvbiwgZWNNb2RlbCk7XG4gICAgb3B0aW9uLnNlbGVjdGVkID0gb3B0aW9uLnNlbGVjdGVkIHx8IHt9O1xuICB9LFxuICBtZXJnZU9wdGlvbjogZnVuY3Rpb24gKG9wdGlvbikge1xuICAgIExlZ2VuZE1vZGVsLnN1cGVyQ2FsbCh0aGlzLCAnbWVyZ2VPcHRpb24nLCBvcHRpb24pO1xuICB9LFxuICBvcHRpb25VcGRhdGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fdXBkYXRlRGF0YSh0aGlzLmVjTW9kZWwpO1xuXG4gICAgdmFyIGxlZ2VuZERhdGEgPSB0aGlzLl9kYXRhOyAvLyBJZiBzZWxlY3RlZE1vZGUgaXMgc2luZ2xlLCB0cnkgdG8gc2VsZWN0IG9uZVxuXG4gICAgaWYgKGxlZ2VuZERhdGFbMF0gJiYgdGhpcy5nZXQoJ3NlbGVjdGVkTW9kZScpID09PSAnc2luZ2xlJykge1xuICAgICAgdmFyIGhhc1NlbGVjdGVkID0gZmFsc2U7IC8vIElmIGhhcyBhbnkgc2VsZWN0ZWQgaW4gb3B0aW9uLnNlbGVjdGVkXG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVnZW5kRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbmFtZSA9IGxlZ2VuZERhdGFbaV0uZ2V0KCduYW1lJyk7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNTZWxlY3RlZChuYW1lKSkge1xuICAgICAgICAgIC8vIEZvcmNlIHRvIHVuc2VsZWN0IG90aGVyc1xuICAgICAgICAgIHRoaXMuc2VsZWN0KG5hbWUpO1xuICAgICAgICAgIGhhc1NlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSAvLyBUcnkgc2VsZWN0IHRoZSBmaXJzdCBpZiBzZWxlY3RlZE1vZGUgaXMgc2luZ2xlXG5cblxuICAgICAgIWhhc1NlbGVjdGVkICYmIHRoaXMuc2VsZWN0KGxlZ2VuZERhdGFbMF0uZ2V0KCduYW1lJykpO1xuICAgIH1cbiAgfSxcbiAgX3VwZGF0ZURhdGE6IGZ1bmN0aW9uIChlY01vZGVsKSB7XG4gICAgdmFyIHBvdGVudGlhbERhdGEgPSBbXTtcbiAgICB2YXIgYXZhaWxhYmxlTmFtZXMgPSBbXTtcbiAgICBlY01vZGVsLmVhY2hSYXdTZXJpZXMoZnVuY3Rpb24gKHNlcmllc01vZGVsKSB7XG4gICAgICB2YXIgc2VyaWVzTmFtZSA9IHNlcmllc01vZGVsLm5hbWU7XG4gICAgICBhdmFpbGFibGVOYW1lcy5wdXNoKHNlcmllc05hbWUpO1xuICAgICAgdmFyIGlzUG90ZW50aWFsO1xuXG4gICAgICBpZiAoc2VyaWVzTW9kZWwubGVnZW5kRGF0YVByb3ZpZGVyKSB7XG4gICAgICAgIHZhciBkYXRhID0gc2VyaWVzTW9kZWwubGVnZW5kRGF0YVByb3ZpZGVyKCk7XG4gICAgICAgIHZhciBuYW1lcyA9IGRhdGEubWFwQXJyYXkoZGF0YS5nZXROYW1lKTtcblxuICAgICAgICBpZiAoIWVjTW9kZWwuaXNTZXJpZXNGaWx0ZXJlZChzZXJpZXNNb2RlbCkpIHtcbiAgICAgICAgICBhdmFpbGFibGVOYW1lcyA9IGF2YWlsYWJsZU5hbWVzLmNvbmNhdChuYW1lcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmFtZXMubGVuZ3RoKSB7XG4gICAgICAgICAgcG90ZW50aWFsRGF0YSA9IHBvdGVudGlhbERhdGEuY29uY2F0KG5hbWVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpc1BvdGVudGlhbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlzUG90ZW50aWFsID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzUG90ZW50aWFsICYmIGlzTmFtZVNwZWNpZmllZChzZXJpZXNNb2RlbCkpIHtcbiAgICAgICAgcG90ZW50aWFsRGF0YS5wdXNoKHNlcmllc01vZGVsLm5hbWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheS48c3RyaW5nPn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy5fYXZhaWxhYmxlTmFtZXMgPSBhdmFpbGFibGVOYW1lczsgLy8gSWYgbGVnZW5kLmRhdGEgbm90IHNwZWNpZmllZCBpbiBvcHRpb24sIHVzZSBhdmFpbGFibGVOYW1lcyBhcyBkYXRhLFxuICAgIC8vIHdoaWNoIGlzIGNvbnZpbmllbnQgZm9yIHVzZXIgcHJlcGFyaW5nIG9wdGlvbi5cblxuICAgIHZhciByYXdEYXRhID0gdGhpcy5nZXQoJ2RhdGEnKSB8fCBwb3RlbnRpYWxEYXRhO1xuICAgIHZhciBsZWdlbmREYXRhID0genJVdGlsLm1hcChyYXdEYXRhLCBmdW5jdGlvbiAoZGF0YUl0ZW0pIHtcbiAgICAgIC8vIENhbiBiZSBzdHJpbmcgb3IgbnVtYmVyXG4gICAgICBpZiAodHlwZW9mIGRhdGFJdGVtID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgZGF0YUl0ZW0gPT09ICdudW1iZXInKSB7XG4gICAgICAgIGRhdGFJdGVtID0ge1xuICAgICAgICAgIG5hbWU6IGRhdGFJdGVtXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgTW9kZWwoZGF0YUl0ZW0sIHRoaXMsIHRoaXMuZWNNb2RlbCk7XG4gICAgfSwgdGhpcyk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5Ljxtb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Nb2RlbD59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMuX2RhdGEgPSBsZWdlbmREYXRhO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBcnJheS48bW9kdWxlOmVjaGFydHMvbW9kZWwvTW9kZWw+fVxuICAgKi9cbiAgZ2V0RGF0YTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKi9cbiAgc2VsZWN0OiBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBzZWxlY3RlZCA9IHRoaXMub3B0aW9uLnNlbGVjdGVkO1xuICAgIHZhciBzZWxlY3RlZE1vZGUgPSB0aGlzLmdldCgnc2VsZWN0ZWRNb2RlJyk7XG5cbiAgICBpZiAoc2VsZWN0ZWRNb2RlID09PSAnc2luZ2xlJykge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuICAgICAgenJVdGlsLmVhY2goZGF0YSwgZnVuY3Rpb24gKGRhdGFJdGVtKSB7XG4gICAgICAgIHNlbGVjdGVkW2RhdGFJdGVtLmdldCgnbmFtZScpXSA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2VsZWN0ZWRbbmFtZV0gPSB0cnVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKi9cbiAgdW5TZWxlY3Q6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKHRoaXMuZ2V0KCdzZWxlY3RlZE1vZGUnKSAhPT0gJ3NpbmdsZScpIHtcbiAgICAgIHRoaXMub3B0aW9uLnNlbGVjdGVkW25hbWVdID0gZmFsc2U7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKi9cbiAgdG9nZ2xlU2VsZWN0ZWQ6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHNlbGVjdGVkID0gdGhpcy5vcHRpb24uc2VsZWN0ZWQ7IC8vIERlZmF1bHQgaXMgdHJ1ZVxuXG4gICAgaWYgKCFzZWxlY3RlZC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgc2VsZWN0ZWRbbmFtZV0gPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXNbc2VsZWN0ZWRbbmFtZV0gPyAndW5TZWxlY3QnIDogJ3NlbGVjdCddKG5hbWUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKi9cbiAgaXNTZWxlY3RlZDogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgc2VsZWN0ZWQgPSB0aGlzLm9wdGlvbi5zZWxlY3RlZDtcbiAgICByZXR1cm4gIShzZWxlY3RlZC5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiAhc2VsZWN0ZWRbbmFtZV0pICYmIHpyVXRpbC5pbmRleE9mKHRoaXMuX2F2YWlsYWJsZU5hbWVzLCBuYW1lKSA+PSAwO1xuICB9LFxuICBkZWZhdWx0T3B0aW9uOiB7XG4gICAgLy8g5LiA57qn5bGC5Y+gXG4gICAgemxldmVsOiAwLFxuICAgIC8vIOS6jOe6p+WxguWPoFxuICAgIHo6IDQsXG4gICAgc2hvdzogdHJ1ZSxcbiAgICAvLyDluIPlsYDmlrnlvI/vvIzpu5jorqTkuLrmsLTlubPluIPlsYDvvIzlj6/pgInkuLrvvJpcbiAgICAvLyAnaG9yaXpvbnRhbCcgfCAndmVydGljYWwnXG4gICAgb3JpZW50OiAnaG9yaXpvbnRhbCcsXG4gICAgbGVmdDogJ2NlbnRlcicsXG4gICAgLy8gcmlnaHQ6ICdjZW50ZXInLFxuICAgIHRvcDogMCxcbiAgICAvLyBib3R0b206IG51bGwsXG4gICAgLy8g5rC05bmz5a+56b2QXG4gICAgLy8gJ2F1dG8nIHwgJ2xlZnQnIHwgJ3JpZ2h0J1xuICAgIC8vIOm7mOiupOS4uiAnYXV0bycsIOagueaNriB4IOeahOS9jee9ruWIpOaWreaYr+W3puWvuem9kOi/mOaYr+WPs+Wvuem9kFxuICAgIGFsaWduOiAnYXV0bycsXG4gICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgLy8g5Zu+5L6L6L655qGG6aKc6ImyXG4gICAgYm9yZGVyQ29sb3I6ICcjY2NjJyxcbiAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgLy8g5Zu+5L6L6L655qGG57q/5a6977yM5Y2V5L2NcHjvvIzpu5jorqTkuLow77yI5peg6L655qGG77yJXG4gICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgLy8g5Zu+5L6L5YaF6L656Led77yM5Y2V5L2NcHjvvIzpu5jorqTlkITmlrnlkJHlhoXovrnot53kuLo177yMXG4gICAgLy8g5o6l5Y+X5pWw57uE5YiG5Yir6K6+5a6a5LiK5Y+z5LiL5bem6L656Led77yM5ZCMY3NzXG4gICAgcGFkZGluZzogNSxcbiAgICAvLyDlkITkuKppdGVt5LmL6Ze055qE6Ze06ZqU77yM5Y2V5L2NcHjvvIzpu5jorqTkuLoxMO+8jFxuICAgIC8vIOaoquWQkeW4g+WxgOaXtuS4uuawtOW5s+mXtOmalO+8jOe6teWQkeW4g+WxgOaXtuS4uue6teWQkemXtOmalFxuICAgIGl0ZW1HYXA6IDEwLFxuICAgIC8vIOWbvuS+i+WbvuW9ouWuveW6plxuICAgIGl0ZW1XaWR0aDogMjUsXG4gICAgLy8g5Zu+5L6L5Zu+5b2i6auY5bqmXG4gICAgaXRlbUhlaWdodDogMTQsXG4gICAgLy8g5Zu+5L6L5YWz6Zet5pe25YCZ55qE6aKc6ImyXG4gICAgaW5hY3RpdmVDb2xvcjogJyNjY2MnLFxuICAgIHRleHRTdHlsZToge1xuICAgICAgLy8g5Zu+5L6L5paH5a2X6aKc6ImyXG4gICAgICBjb2xvcjogJyMzMzMnXG4gICAgfSxcbiAgICAvLyBmb3JtYXR0ZXI6ICcnLFxuICAgIC8vIOmAieaLqeaooeW8j++8jOm7mOiupOW8gOWQr+WbvuS+i+W8gOWFs1xuICAgIHNlbGVjdGVkTW9kZTogdHJ1ZSxcbiAgICAvLyDphY3nva7pu5jorqTpgInkuK3nirbmgIHvvIzlj6/phY3lkIhMRUdFTkQuU0VMRUNURUTkuovku7blgZrliqjmgIHmlbDmja7ovb3lhaVcbiAgICAvLyBzZWxlY3RlZDogbnVsbCxcbiAgICAvLyDlm77kvovlhoXlrrnvvIjor6bop4FsZWdlbmQuZGF0Ye+8jOaVsOe7hOS4reavj+S4gOmhueS7o+ihqOS4gOS4qml0ZW1cbiAgICAvLyBkYXRhOiBbXSxcbiAgICAvLyBUb29sdGlwIOebuOWFs+mFjee9rlxuICAgIHRvb2x0aXA6IHtcbiAgICAgIHNob3c6IGZhbHNlXG4gICAgfVxuICB9XG59KTtcbnZhciBfZGVmYXVsdCA9IExlZ2VuZE1vZGVsO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgX2NvbmZpZyA9IHJlcXVpcmUoXCIuLi8uLi9jb25maWdcIik7XG5cbnZhciBfX0RFVl9fID0gX2NvbmZpZy5fX0RFVl9fO1xuXG52YXIgZWNoYXJ0cyA9IHJlcXVpcmUoXCIuLi8uLi9lY2hhcnRzXCIpO1xuXG52YXIgenJVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxudmFyIF9zeW1ib2wgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9zeW1ib2xcIik7XG5cbnZhciBjcmVhdGVTeW1ib2wgPSBfc3ltYm9sLmNyZWF0ZVN5bWJvbDtcblxudmFyIGdyYXBoaWMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9ncmFwaGljXCIpO1xuXG52YXIgX2xpc3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi4vaGVscGVyL2xpc3RDb21wb25lbnRcIik7XG5cbnZhciBtYWtlQmFja2dyb3VuZCA9IF9saXN0Q29tcG9uZW50Lm1ha2VCYWNrZ3JvdW5kO1xuXG52YXIgbGF5b3V0VXRpbCA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2xheW91dFwiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xudmFyIGN1cnJ5ID0genJVdGlsLmN1cnJ5O1xudmFyIGVhY2ggPSB6clV0aWwuZWFjaDtcbnZhciBHcm91cCA9IGdyYXBoaWMuR3JvdXA7XG5cbnZhciBfZGVmYXVsdCA9IGVjaGFydHMuZXh0ZW5kQ29tcG9uZW50Vmlldyh7XG4gIHR5cGU6ICdsZWdlbmQucGxhaW4nLFxuICBuZXdsaW5lRGlzYWJsZWQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHttb2R1bGU6enJlbmRlci9jb250YWluZXIvR3JvdXB9XG4gICAgICovXG4gICAgdGhpcy5ncm91cC5hZGQodGhpcy5fY29udGVudEdyb3VwID0gbmV3IEdyb3VwKCkpO1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge21vZHVsZTp6cmVuZGVyL0VsZW1lbnR9XG4gICAgICovXG5cbiAgICB0aGlzLl9iYWNrZ3JvdW5kRWw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGdldENvbnRlbnRHcm91cDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZW50R3JvdXA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcmVuZGVyOiBmdW5jdGlvbiAobGVnZW5kTW9kZWwsIGVjTW9kZWwsIGFwaSkge1xuICAgIHRoaXMucmVzZXRJbm5lcigpO1xuXG4gICAgaWYgKCFsZWdlbmRNb2RlbC5nZXQoJ3Nob3cnLCB0cnVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBpdGVtQWxpZ24gPSBsZWdlbmRNb2RlbC5nZXQoJ2FsaWduJyk7XG5cbiAgICBpZiAoIWl0ZW1BbGlnbiB8fCBpdGVtQWxpZ24gPT09ICdhdXRvJykge1xuICAgICAgaXRlbUFsaWduID0gbGVnZW5kTW9kZWwuZ2V0KCdsZWZ0JykgPT09ICdyaWdodCcgJiYgbGVnZW5kTW9kZWwuZ2V0KCdvcmllbnQnKSA9PT0gJ3ZlcnRpY2FsJyA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJJbm5lcihpdGVtQWxpZ24sIGxlZ2VuZE1vZGVsLCBlY01vZGVsLCBhcGkpOyAvLyBQZXJmb3JtIGxheW91dC5cblxuICAgIHZhciBwb3NpdGlvbkluZm8gPSBsZWdlbmRNb2RlbC5nZXRCb3hMYXlvdXRQYXJhbXMoKTtcbiAgICB2YXIgdmlld3BvcnRTaXplID0ge1xuICAgICAgd2lkdGg6IGFwaS5nZXRXaWR0aCgpLFxuICAgICAgaGVpZ2h0OiBhcGkuZ2V0SGVpZ2h0KClcbiAgICB9O1xuICAgIHZhciBwYWRkaW5nID0gbGVnZW5kTW9kZWwuZ2V0KCdwYWRkaW5nJyk7XG4gICAgdmFyIG1heFNpemUgPSBsYXlvdXRVdGlsLmdldExheW91dFJlY3QocG9zaXRpb25JbmZvLCB2aWV3cG9ydFNpemUsIHBhZGRpbmcpO1xuICAgIHZhciBtYWluUmVjdCA9IHRoaXMubGF5b3V0SW5uZXIobGVnZW5kTW9kZWwsIGl0ZW1BbGlnbiwgbWF4U2l6ZSk7IC8vIFBsYWNlIG1haW5Hcm91cCwgYmFzZWQgb24gdGhlIGNhbGN1bGF0ZWQgYG1haW5SZWN0YC5cblxuICAgIHZhciBsYXlvdXRSZWN0ID0gbGF5b3V0VXRpbC5nZXRMYXlvdXRSZWN0KHpyVXRpbC5kZWZhdWx0cyh7XG4gICAgICB3aWR0aDogbWFpblJlY3Qud2lkdGgsXG4gICAgICBoZWlnaHQ6IG1haW5SZWN0LmhlaWdodFxuICAgIH0sIHBvc2l0aW9uSW5mbyksIHZpZXdwb3J0U2l6ZSwgcGFkZGluZyk7XG4gICAgdGhpcy5ncm91cC5hdHRyKCdwb3NpdGlvbicsIFtsYXlvdXRSZWN0LnggLSBtYWluUmVjdC54LCBsYXlvdXRSZWN0LnkgLSBtYWluUmVjdC55XSk7IC8vIFJlbmRlciBiYWNrZ3JvdW5kIGFmdGVyIGdyb3VwIGlzIGxheW91dC5cblxuICAgIHRoaXMuZ3JvdXAuYWRkKHRoaXMuX2JhY2tncm91bmRFbCA9IG1ha2VCYWNrZ3JvdW5kKG1haW5SZWN0LCBsZWdlbmRNb2RlbCkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICByZXNldElubmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5nZXRDb250ZW50R3JvdXAoKS5yZW1vdmVBbGwoKTtcbiAgICB0aGlzLl9iYWNrZ3JvdW5kRWwgJiYgdGhpcy5ncm91cC5yZW1vdmUodGhpcy5fYmFja2dyb3VuZEVsKTtcbiAgfSxcblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcmVuZGVySW5uZXI6IGZ1bmN0aW9uIChpdGVtQWxpZ24sIGxlZ2VuZE1vZGVsLCBlY01vZGVsLCBhcGkpIHtcbiAgICB2YXIgY29udGVudEdyb3VwID0gdGhpcy5nZXRDb250ZW50R3JvdXAoKTtcbiAgICB2YXIgbGVnZW5kRHJhd25NYXAgPSB6clV0aWwuY3JlYXRlSGFzaE1hcCgpO1xuICAgIHZhciBzZWxlY3RNb2RlID0gbGVnZW5kTW9kZWwuZ2V0KCdzZWxlY3RlZE1vZGUnKTtcbiAgICB2YXIgZXhjbHVkZVNlcmllc0lkID0gW107XG4gICAgZWNNb2RlbC5lYWNoUmF3U2VyaWVzKGZ1bmN0aW9uIChzZXJpZXNNb2RlbCkge1xuICAgICAgIXNlcmllc01vZGVsLmdldCgnbGVnZW5kSG92ZXJMaW5rJykgJiYgZXhjbHVkZVNlcmllc0lkLnB1c2goc2VyaWVzTW9kZWwuaWQpO1xuICAgIH0pO1xuICAgIGVhY2gobGVnZW5kTW9kZWwuZ2V0RGF0YSgpLCBmdW5jdGlvbiAoaXRlbU1vZGVsLCBkYXRhSW5kZXgpIHtcbiAgICAgIHZhciBuYW1lID0gaXRlbU1vZGVsLmdldCgnbmFtZScpOyAvLyBVc2UgZW1wdHkgc3RyaW5nIG9yIFxcbiBhcyBhIG5ld2xpbmUgc3RyaW5nXG5cbiAgICAgIGlmICghdGhpcy5uZXdsaW5lRGlzYWJsZWQgJiYgKG5hbWUgPT09ICcnIHx8IG5hbWUgPT09ICdcXG4nKSkge1xuICAgICAgICBjb250ZW50R3JvdXAuYWRkKG5ldyBHcm91cCh7XG4gICAgICAgICAgbmV3bGluZTogdHJ1ZVxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gUmVwcmVzZW50aXRpdmUgc2VyaWVzLlxuXG5cbiAgICAgIHZhciBzZXJpZXNNb2RlbCA9IGVjTW9kZWwuZ2V0U2VyaWVzQnlOYW1lKG5hbWUpWzBdO1xuXG4gICAgICBpZiAobGVnZW5kRHJhd25NYXAuZ2V0KG5hbWUpKSB7XG4gICAgICAgIC8vIEhhdmUgYmVlbiBkcmF3ZWRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBTZXJpZXMgbGVnZW5kXG5cblxuICAgICAgaWYgKHNlcmllc01vZGVsKSB7XG4gICAgICAgIHZhciBkYXRhID0gc2VyaWVzTW9kZWwuZ2V0RGF0YSgpO1xuICAgICAgICB2YXIgY29sb3IgPSBkYXRhLmdldFZpc3VhbCgnY29sb3InKTsgLy8gSWYgY29sb3IgaXMgYSBjYWxsYmFjayBmdW5jdGlvblxuXG4gICAgICAgIGlmICh0eXBlb2YgY29sb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBVc2UgdGhlIGZpcnN0IGRhdGFcbiAgICAgICAgICBjb2xvciA9IGNvbG9yKHNlcmllc01vZGVsLmdldERhdGFQYXJhbXMoMCkpO1xuICAgICAgICB9IC8vIFVzaW5nIHJlY3Qgc3ltYm9sIGRlZmF1bHRseVxuXG5cbiAgICAgICAgdmFyIGxlZ2VuZFN5bWJvbFR5cGUgPSBkYXRhLmdldFZpc3VhbCgnbGVnZW5kU3ltYm9sJykgfHwgJ3JvdW5kUmVjdCc7XG4gICAgICAgIHZhciBzeW1ib2xUeXBlID0gZGF0YS5nZXRWaXN1YWwoJ3N5bWJvbCcpO1xuXG4gICAgICAgIHZhciBpdGVtR3JvdXAgPSB0aGlzLl9jcmVhdGVJdGVtKG5hbWUsIGRhdGFJbmRleCwgaXRlbU1vZGVsLCBsZWdlbmRNb2RlbCwgbGVnZW5kU3ltYm9sVHlwZSwgc3ltYm9sVHlwZSwgaXRlbUFsaWduLCBjb2xvciwgc2VsZWN0TW9kZSk7XG5cbiAgICAgICAgaXRlbUdyb3VwLm9uKCdjbGljaycsIGN1cnJ5KGRpc3BhdGNoU2VsZWN0QWN0aW9uLCBuYW1lLCBhcGkpKS5vbignbW91c2VvdmVyJywgY3VycnkoZGlzcGF0Y2hIaWdobGlnaHRBY3Rpb24sIHNlcmllc01vZGVsLCBudWxsLCBhcGksIGV4Y2x1ZGVTZXJpZXNJZCkpLm9uKCdtb3VzZW91dCcsIGN1cnJ5KGRpc3BhdGNoRG93bnBsYXlBY3Rpb24sIHNlcmllc01vZGVsLCBudWxsLCBhcGksIGV4Y2x1ZGVTZXJpZXNJZCkpO1xuICAgICAgICBsZWdlbmREcmF3bk1hcC5zZXQobmFtZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBEYXRhIGxlZ2VuZCBvZiBwaWUsIGZ1bm5lbFxuICAgICAgICBlY01vZGVsLmVhY2hSYXdTZXJpZXMoZnVuY3Rpb24gKHNlcmllc01vZGVsKSB7XG4gICAgICAgICAgLy8gSW4gY2FzZSBtdWx0aXBsZSBzZXJpZXMgaGFzIHNhbWUgZGF0YSBuYW1lXG4gICAgICAgICAgaWYgKGxlZ2VuZERyYXduTWFwLmdldChuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZXJpZXNNb2RlbC5sZWdlbmREYXRhUHJvdmlkZXIpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gc2VyaWVzTW9kZWwubGVnZW5kRGF0YVByb3ZpZGVyKCk7XG4gICAgICAgICAgICB2YXIgaWR4ID0gZGF0YS5pbmRleE9mTmFtZShuYW1lKTtcblxuICAgICAgICAgICAgaWYgKGlkeCA8IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgY29sb3IgPSBkYXRhLmdldEl0ZW1WaXN1YWwoaWR4LCAnY29sb3InKTtcbiAgICAgICAgICAgIHZhciBsZWdlbmRTeW1ib2xUeXBlID0gJ3JvdW5kUmVjdCc7XG5cbiAgICAgICAgICAgIHZhciBpdGVtR3JvdXAgPSB0aGlzLl9jcmVhdGVJdGVtKG5hbWUsIGRhdGFJbmRleCwgaXRlbU1vZGVsLCBsZWdlbmRNb2RlbCwgbGVnZW5kU3ltYm9sVHlwZSwgbnVsbCwgaXRlbUFsaWduLCBjb2xvciwgc2VsZWN0TW9kZSk7IC8vIEZJWE1FOiBjb25zaWRlciBkaWZmZXJlbnQgc2VyaWVzIGhhcyBpdGVtcyB3aXRoIHRoZSBzYW1lIG5hbWUuXG5cblxuICAgICAgICAgICAgaXRlbUdyb3VwLm9uKCdjbGljaycsIGN1cnJ5KGRpc3BhdGNoU2VsZWN0QWN0aW9uLCBuYW1lLCBhcGkpKSAvLyBGSVhNRSBTaG91bGQgbm90IHNwZWNpZnkgdGhlIHNlcmllcyBuYW1lXG4gICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsIGN1cnJ5KGRpc3BhdGNoSGlnaGxpZ2h0QWN0aW9uLCBzZXJpZXNNb2RlbCwgbmFtZSwgYXBpLCBleGNsdWRlU2VyaWVzSWQpKS5vbignbW91c2VvdXQnLCBjdXJyeShkaXNwYXRjaERvd25wbGF5QWN0aW9uLCBzZXJpZXNNb2RlbCwgbmFtZSwgYXBpLCBleGNsdWRlU2VyaWVzSWQpKTtcbiAgICAgICAgICAgIGxlZ2VuZERyYXduTWFwLnNldChuYW1lLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICB9LFxuICBfY3JlYXRlSXRlbTogZnVuY3Rpb24gKG5hbWUsIGRhdGFJbmRleCwgaXRlbU1vZGVsLCBsZWdlbmRNb2RlbCwgbGVnZW5kU3ltYm9sVHlwZSwgc3ltYm9sVHlwZSwgaXRlbUFsaWduLCBjb2xvciwgc2VsZWN0TW9kZSkge1xuICAgIHZhciBpdGVtV2lkdGggPSBsZWdlbmRNb2RlbC5nZXQoJ2l0ZW1XaWR0aCcpO1xuICAgIHZhciBpdGVtSGVpZ2h0ID0gbGVnZW5kTW9kZWwuZ2V0KCdpdGVtSGVpZ2h0Jyk7XG4gICAgdmFyIGluYWN0aXZlQ29sb3IgPSBsZWdlbmRNb2RlbC5nZXQoJ2luYWN0aXZlQ29sb3InKTtcbiAgICB2YXIgc3ltYm9sS2VlcEFzcGVjdCA9IGxlZ2VuZE1vZGVsLmdldCgnc3ltYm9sS2VlcEFzcGVjdCcpO1xuICAgIHZhciBpc1NlbGVjdGVkID0gbGVnZW5kTW9kZWwuaXNTZWxlY3RlZChuYW1lKTtcbiAgICB2YXIgaXRlbUdyb3VwID0gbmV3IEdyb3VwKCk7XG4gICAgdmFyIHRleHRTdHlsZU1vZGVsID0gaXRlbU1vZGVsLmdldE1vZGVsKCd0ZXh0U3R5bGUnKTtcbiAgICB2YXIgaXRlbUljb24gPSBpdGVtTW9kZWwuZ2V0KCdpY29uJyk7XG4gICAgdmFyIHRvb2x0aXBNb2RlbCA9IGl0ZW1Nb2RlbC5nZXRNb2RlbCgndG9vbHRpcCcpO1xuICAgIHZhciBsZWdlbmRHbG9iYWxUb29sdGlwTW9kZWwgPSB0b29sdGlwTW9kZWwucGFyZW50TW9kZWw7IC8vIFVzZSB1c2VyIGdpdmVuIGljb24gZmlyc3RcblxuICAgIGxlZ2VuZFN5bWJvbFR5cGUgPSBpdGVtSWNvbiB8fCBsZWdlbmRTeW1ib2xUeXBlO1xuICAgIGl0ZW1Hcm91cC5hZGQoY3JlYXRlU3ltYm9sKGxlZ2VuZFN5bWJvbFR5cGUsIDAsIDAsIGl0ZW1XaWR0aCwgaXRlbUhlaWdodCwgaXNTZWxlY3RlZCA/IGNvbG9yIDogaW5hY3RpdmVDb2xvciwgLy8gc3ltYm9sS2VlcEFzcGVjdCBkZWZhdWx0IHRydWUgZm9yIGxlZ2VuZFxuICAgIHN5bWJvbEtlZXBBc3BlY3QgPT0gbnVsbCA/IHRydWUgOiBzeW1ib2xLZWVwQXNwZWN0KSk7IC8vIENvbXBvc2Ugc3ltYm9sc1xuICAgIC8vIFBFTkRJTkdcblxuICAgIGlmICghaXRlbUljb24gJiYgc3ltYm9sVHlwZSAvLyBBdCBsZWFzdCBzaG93IG9uZSBzeW1ib2wsIGNhbid0IGJlIGFsbCBub25lXG4gICAgJiYgKHN5bWJvbFR5cGUgIT09IGxlZ2VuZFN5bWJvbFR5cGUgfHwgc3ltYm9sVHlwZSA9PSAnbm9uZScpKSB7XG4gICAgICB2YXIgc2l6ZSA9IGl0ZW1IZWlnaHQgKiAwLjg7XG5cbiAgICAgIGlmIChzeW1ib2xUeXBlID09PSAnbm9uZScpIHtcbiAgICAgICAgc3ltYm9sVHlwZSA9ICdjaXJjbGUnO1xuICAgICAgfSAvLyBQdXQgc3ltYm9sIGluIHRoZSBjZW50ZXJcblxuXG4gICAgICBpdGVtR3JvdXAuYWRkKGNyZWF0ZVN5bWJvbChzeW1ib2xUeXBlLCAoaXRlbVdpZHRoIC0gc2l6ZSkgLyAyLCAoaXRlbUhlaWdodCAtIHNpemUpIC8gMiwgc2l6ZSwgc2l6ZSwgaXNTZWxlY3RlZCA/IGNvbG9yIDogaW5hY3RpdmVDb2xvciwgLy8gc3ltYm9sS2VlcEFzcGVjdCBkZWZhdWx0IHRydWUgZm9yIGxlZ2VuZFxuICAgICAgc3ltYm9sS2VlcEFzcGVjdCA9PSBudWxsID8gdHJ1ZSA6IHN5bWJvbEtlZXBBc3BlY3QpKTtcbiAgICB9XG5cbiAgICB2YXIgdGV4dFggPSBpdGVtQWxpZ24gPT09ICdsZWZ0JyA/IGl0ZW1XaWR0aCArIDUgOiAtNTtcbiAgICB2YXIgdGV4dEFsaWduID0gaXRlbUFsaWduO1xuICAgIHZhciBmb3JtYXR0ZXIgPSBsZWdlbmRNb2RlbC5nZXQoJ2Zvcm1hdHRlcicpO1xuICAgIHZhciBjb250ZW50ID0gbmFtZTtcblxuICAgIGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnc3RyaW5nJyAmJiBmb3JtYXR0ZXIpIHtcbiAgICAgIGNvbnRlbnQgPSBmb3JtYXR0ZXIucmVwbGFjZSgne25hbWV9JywgbmFtZSAhPSBudWxsID8gbmFtZSA6ICcnKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBmb3JtYXR0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnRlbnQgPSBmb3JtYXR0ZXIobmFtZSk7XG4gICAgfVxuXG4gICAgaXRlbUdyb3VwLmFkZChuZXcgZ3JhcGhpYy5UZXh0KHtcbiAgICAgIHN0eWxlOiBncmFwaGljLnNldFRleHRTdHlsZSh7fSwgdGV4dFN0eWxlTW9kZWwsIHtcbiAgICAgICAgdGV4dDogY29udGVudCxcbiAgICAgICAgeDogdGV4dFgsXG4gICAgICAgIHk6IGl0ZW1IZWlnaHQgLyAyLFxuICAgICAgICB0ZXh0RmlsbDogaXNTZWxlY3RlZCA/IHRleHRTdHlsZU1vZGVsLmdldFRleHRDb2xvcigpIDogaW5hY3RpdmVDb2xvcixcbiAgICAgICAgdGV4dEFsaWduOiB0ZXh0QWxpZ24sXG4gICAgICAgIHRleHRWZXJ0aWNhbEFsaWduOiAnbWlkZGxlJ1xuICAgICAgfSlcbiAgICB9KSk7IC8vIEFkZCBhIGludmlzaWJsZSByZWN0IHRvIGluY3JlYXNlIHRoZSBhcmVhIG9mIG1vdXNlIGhvdmVyXG5cbiAgICB2YXIgaGl0UmVjdCA9IG5ldyBncmFwaGljLlJlY3Qoe1xuICAgICAgc2hhcGU6IGl0ZW1Hcm91cC5nZXRCb3VuZGluZ1JlY3QoKSxcbiAgICAgIGludmlzaWJsZTogdHJ1ZSxcbiAgICAgIHRvb2x0aXA6IHRvb2x0aXBNb2RlbC5nZXQoJ3Nob3cnKSA/IHpyVXRpbC5leHRlbmQoe1xuICAgICAgICBjb250ZW50OiBuYW1lLFxuICAgICAgICAvLyBEZWZhdWwgZm9ybWF0dGVyXG4gICAgICAgIGZvcm1hdHRlcjogbGVnZW5kR2xvYmFsVG9vbHRpcE1vZGVsLmdldCgnZm9ybWF0dGVyJywgdHJ1ZSkgfHwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICB9LFxuICAgICAgICBmb3JtYXR0ZXJQYXJhbXM6IHtcbiAgICAgICAgICBjb21wb25lbnRUeXBlOiAnbGVnZW5kJyxcbiAgICAgICAgICBsZWdlbmRJbmRleDogbGVnZW5kTW9kZWwuY29tcG9uZW50SW5kZXgsXG4gICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAkdmFyczogWyduYW1lJ11cbiAgICAgICAgfVxuICAgICAgfSwgdG9vbHRpcE1vZGVsLm9wdGlvbikgOiBudWxsXG4gICAgfSk7XG4gICAgaXRlbUdyb3VwLmFkZChoaXRSZWN0KTtcbiAgICBpdGVtR3JvdXAuZWFjaENoaWxkKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgY2hpbGQuc2lsZW50ID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBoaXRSZWN0LnNpbGVudCA9ICFzZWxlY3RNb2RlO1xuICAgIHRoaXMuZ2V0Q29udGVudEdyb3VwKCkuYWRkKGl0ZW1Hcm91cCk7XG4gICAgZ3JhcGhpYy5zZXRIb3ZlclN0eWxlKGl0ZW1Hcm91cCk7XG4gICAgaXRlbUdyb3VwLl9fbGVnZW5kRGF0YUluZGV4ID0gZGF0YUluZGV4O1xuICAgIHJldHVybiBpdGVtR3JvdXA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGxheW91dElubmVyOiBmdW5jdGlvbiAobGVnZW5kTW9kZWwsIGl0ZW1BbGlnbiwgbWF4U2l6ZSkge1xuICAgIHZhciBjb250ZW50R3JvdXAgPSB0aGlzLmdldENvbnRlbnRHcm91cCgpOyAvLyBQbGFjZSBpdGVtcyBpbiBjb250ZW50R3JvdXAuXG5cbiAgICBsYXlvdXRVdGlsLmJveChsZWdlbmRNb2RlbC5nZXQoJ29yaWVudCcpLCBjb250ZW50R3JvdXAsIGxlZ2VuZE1vZGVsLmdldCgnaXRlbUdhcCcpLCBtYXhTaXplLndpZHRoLCBtYXhTaXplLmhlaWdodCk7XG4gICAgdmFyIGNvbnRlbnRSZWN0ID0gY29udGVudEdyb3VwLmdldEJvdW5kaW5nUmVjdCgpO1xuICAgIGNvbnRlbnRHcm91cC5hdHRyKCdwb3NpdGlvbicsIFstY29udGVudFJlY3QueCwgLWNvbnRlbnRSZWN0LnldKTtcbiAgICByZXR1cm4gdGhpcy5ncm91cC5nZXRCb3VuZGluZ1JlY3QoKTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGRpc3BhdGNoU2VsZWN0QWN0aW9uKG5hbWUsIGFwaSkge1xuICBhcGkuZGlzcGF0Y2hBY3Rpb24oe1xuICAgIHR5cGU6ICdsZWdlbmRUb2dnbGVTZWxlY3QnLFxuICAgIG5hbWU6IG5hbWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoSGlnaGxpZ2h0QWN0aW9uKHNlcmllc01vZGVsLCBkYXRhTmFtZSwgYXBpLCBleGNsdWRlU2VyaWVzSWQpIHtcbiAgLy8gSWYgZWxlbWVudCBob3ZlciB3aWxsIG1vdmUgdG8gYSBob3ZlckxheWVyLlxuICB2YXIgZWwgPSBhcGkuZ2V0WnIoKS5zdG9yYWdlLmdldERpc3BsYXlMaXN0KClbMF07XG5cbiAgaWYgKCEoZWwgJiYgZWwudXNlSG92ZXJMYXllcikpIHtcbiAgICBhcGkuZGlzcGF0Y2hBY3Rpb24oe1xuICAgICAgdHlwZTogJ2hpZ2hsaWdodCcsXG4gICAgICBzZXJpZXNOYW1lOiBzZXJpZXNNb2RlbC5uYW1lLFxuICAgICAgbmFtZTogZGF0YU5hbWUsXG4gICAgICBleGNsdWRlU2VyaWVzSWQ6IGV4Y2x1ZGVTZXJpZXNJZFxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRG93bnBsYXlBY3Rpb24oc2VyaWVzTW9kZWwsIGRhdGFOYW1lLCBhcGksIGV4Y2x1ZGVTZXJpZXNJZCkge1xuICAvLyBJZiBlbGVtZW50IGhvdmVyIHdpbGwgbW92ZSB0byBhIGhvdmVyTGF5ZXIuXG4gIHZhciBlbCA9IGFwaS5nZXRacigpLnN0b3JhZ2UuZ2V0RGlzcGxheUxpc3QoKVswXTtcblxuICBpZiAoIShlbCAmJiBlbC51c2VIb3ZlckxheWVyKSkge1xuICAgIGFwaS5kaXNwYXRjaEFjdGlvbih7XG4gICAgICB0eXBlOiAnZG93bnBsYXknLFxuICAgICAgc2VyaWVzTmFtZTogc2VyaWVzTW9kZWwubmFtZSxcbiAgICAgIG5hbWU6IGRhdGFOYW1lLFxuICAgICAgZXhjbHVkZVNlcmllc0lkOiBleGNsdWRlU2VyaWVzSWRcbiAgICB9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBlY2hhcnRzID0gcmVxdWlyZShcIi4uLy4uL2VjaGFydHNcIik7XG5cbnZhciB6clV0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5mdW5jdGlvbiBsZWdlbmRTZWxlY3RBY3Rpb25IYW5kbGVyKG1ldGhvZE5hbWUsIHBheWxvYWQsIGVjTW9kZWwpIHtcbiAgdmFyIHNlbGVjdGVkTWFwID0ge307XG4gIHZhciBpc1RvZ2dsZVNlbGVjdCA9IG1ldGhvZE5hbWUgPT09ICd0b2dnbGVTZWxlY3RlZCc7XG4gIHZhciBpc1NlbGVjdGVkOyAvLyBVcGRhdGUgYWxsIGxlZ2VuZCBjb21wb25lbnRzXG5cbiAgZWNNb2RlbC5lYWNoQ29tcG9uZW50KCdsZWdlbmQnLCBmdW5jdGlvbiAobGVnZW5kTW9kZWwpIHtcbiAgICBpZiAoaXNUb2dnbGVTZWxlY3QgJiYgaXNTZWxlY3RlZCAhPSBudWxsKSB7XG4gICAgICAvLyBGb3JjZSBvdGhlciBsZWdlbmQgaGFzIHNhbWUgc2VsZWN0ZWQgc3RhdHVzXG4gICAgICAvLyBPciB0aGUgZmlyc3QgaXMgdG9nZ2xlZCB0byB0cnVlIGFuZCBvdGhlciBhcmUgdG9nZ2xlZCB0byBmYWxzZVxuICAgICAgLy8gSW4gdGhlIGNhc2Ugb25lIGxlZ2VuZCBoYXMgc29tZSBpdGVtIHVuU2VsZWN0ZWQgaW4gb3B0aW9uLiBBbmQgaWYgb3RoZXIgbGVnZW5kXG4gICAgICAvLyBkb2Vzbid0IGhhcyB0aGUgaXRlbSwgdGhleSB3aWxsIGFzc3VtZSBpdCBpcyBzZWxlY3RlZC5cbiAgICAgIGxlZ2VuZE1vZGVsW2lzU2VsZWN0ZWQgPyAnc2VsZWN0JyA6ICd1blNlbGVjdCddKHBheWxvYWQubmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlZ2VuZE1vZGVsW21ldGhvZE5hbWVdKHBheWxvYWQubmFtZSk7XG4gICAgICBpc1NlbGVjdGVkID0gbGVnZW5kTW9kZWwuaXNTZWxlY3RlZChwYXlsb2FkLm5hbWUpO1xuICAgIH1cblxuICAgIHZhciBsZWdlbmREYXRhID0gbGVnZW5kTW9kZWwuZ2V0RGF0YSgpO1xuICAgIHpyVXRpbC5lYWNoKGxlZ2VuZERhdGEsIGZ1bmN0aW9uIChtb2RlbCkge1xuICAgICAgdmFyIG5hbWUgPSBtb2RlbC5nZXQoJ25hbWUnKTsgLy8gV3JhcCBlbGVtZW50XG5cbiAgICAgIGlmIChuYW1lID09PSAnXFxuJyB8fCBuYW1lID09PSAnJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpc0l0ZW1TZWxlY3RlZCA9IGxlZ2VuZE1vZGVsLmlzU2VsZWN0ZWQobmFtZSk7XG5cbiAgICAgIGlmIChzZWxlY3RlZE1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAvLyBVbnNlbGVjdGVkIGlmIGFueSBsZWdlbmQgaXMgdW5zZWxlY3RlZFxuICAgICAgICBzZWxlY3RlZE1hcFtuYW1lXSA9IHNlbGVjdGVkTWFwW25hbWVdICYmIGlzSXRlbVNlbGVjdGVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0ZWRNYXBbbmFtZV0gPSBpc0l0ZW1TZWxlY3RlZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7IC8vIFJldHVybiB0aGUgZXZlbnQgZXhwbGljaXRseVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogcGF5bG9hZC5uYW1lLFxuICAgIHNlbGVjdGVkOiBzZWxlY3RlZE1hcFxuICB9O1xufVxuLyoqXG4gKiBAZXZlbnQgbGVnZW5kVG9nZ2xlU2VsZWN0XG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgJ2xlZ2VuZFRvZ2dsZVNlbGVjdCdcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbZnJvbV1cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lIFNlcmllcyBuYW1lIG9yIGRhdGEgaXRlbSBuYW1lXG4gKi9cblxuXG5lY2hhcnRzLnJlZ2lzdGVyQWN0aW9uKCdsZWdlbmRUb2dnbGVTZWxlY3QnLCAnbGVnZW5kc2VsZWN0Y2hhbmdlZCcsIHpyVXRpbC5jdXJyeShsZWdlbmRTZWxlY3RBY3Rpb25IYW5kbGVyLCAndG9nZ2xlU2VsZWN0ZWQnKSk7XG4vKipcbiAqIEBldmVudCBsZWdlbmRTZWxlY3RcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSAnbGVnZW5kU2VsZWN0J1xuICogQHByb3BlcnR5IHtzdHJpbmd9IG5hbWUgU2VyaWVzIG5hbWUgb3IgZGF0YSBpdGVtIG5hbWVcbiAqL1xuXG5lY2hhcnRzLnJlZ2lzdGVyQWN0aW9uKCdsZWdlbmRTZWxlY3QnLCAnbGVnZW5kc2VsZWN0ZWQnLCB6clV0aWwuY3VycnkobGVnZW5kU2VsZWN0QWN0aW9uSGFuZGxlciwgJ3NlbGVjdCcpKTtcbi8qKlxuICogQGV2ZW50IGxlZ2VuZFVuU2VsZWN0XG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgJ2xlZ2VuZFVuU2VsZWN0J1xuICogQHByb3BlcnR5IHtzdHJpbmd9IG5hbWUgU2VyaWVzIG5hbWUgb3IgZGF0YSBpdGVtIG5hbWVcbiAqL1xuXG5lY2hhcnRzLnJlZ2lzdGVyQWN0aW9uKCdsZWdlbmRVblNlbGVjdCcsICdsZWdlbmR1bnNlbGVjdGVkJywgenJVdGlsLmN1cnJ5KGxlZ2VuZFNlbGVjdEFjdGlvbkhhbmRsZXIsICd1blNlbGVjdCcpKTsiLCIvKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5mdW5jdGlvbiBfZGVmYXVsdChlY01vZGVsKSB7XG4gIHZhciBsZWdlbmRNb2RlbHMgPSBlY01vZGVsLmZpbmRDb21wb25lbnRzKHtcbiAgICBtYWluVHlwZTogJ2xlZ2VuZCdcbiAgfSk7XG5cbiAgaWYgKGxlZ2VuZE1vZGVscyAmJiBsZWdlbmRNb2RlbHMubGVuZ3RoKSB7XG4gICAgZWNNb2RlbC5maWx0ZXJTZXJpZXMoZnVuY3Rpb24gKHNlcmllcykge1xuICAgICAgLy8gSWYgaW4gYW55IGxlZ2VuZCBjb21wb25lbnQgdGhlIHN0YXR1cyBpcyBub3Qgc2VsZWN0ZWQuXG4gICAgICAvLyBCZWNhdXNlIGluIGxlZ2VuZCBzZXJpZXMgaXMgYXNzdW1lZCBzZWxlY3RlZCB3aGVuIGl0IGlzIG5vdCBpbiB0aGUgbGVnZW5kIGRhdGEuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlZ2VuZE1vZGVscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIWxlZ2VuZE1vZGVsc1tpXS5pc1NlbGVjdGVkKHNlcmllcy5uYW1lKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBlY2hhcnRzID0gcmVxdWlyZShcIi4uL2VjaGFydHNcIik7XG5cbnZhciBncmFwaGljID0gcmVxdWlyZShcIi4uL3V0aWwvZ3JhcGhpY1wiKTtcblxudmFyIF9sYXlvdXQgPSByZXF1aXJlKFwiLi4vdXRpbC9sYXlvdXRcIik7XG5cbnZhciBnZXRMYXlvdXRSZWN0ID0gX2xheW91dC5nZXRMYXlvdXRSZWN0O1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG4vLyBNb2RlbFxuZWNoYXJ0cy5leHRlbmRDb21wb25lbnRNb2RlbCh7XG4gIHR5cGU6ICd0aXRsZScsXG4gIGxheW91dE1vZGU6IHtcbiAgICB0eXBlOiAnYm94JyxcbiAgICBpZ25vcmVTaXplOiB0cnVlXG4gIH0sXG4gIGRlZmF1bHRPcHRpb246IHtcbiAgICAvLyDkuIDnuqflsYLlj6BcbiAgICB6bGV2ZWw6IDAsXG4gICAgLy8g5LqM57qn5bGC5Y+gXG4gICAgejogNixcbiAgICBzaG93OiB0cnVlLFxuICAgIHRleHQ6ICcnLFxuICAgIC8vIOi2hemTvuaOpei3s+i9rFxuICAgIC8vIGxpbms6IG51bGwsXG4gICAgLy8g5LuF5pSv5oyBc2VsZiB8IGJsYW5rXG4gICAgdGFyZ2V0OiAnYmxhbmsnLFxuICAgIHN1YnRleHQ6ICcnLFxuICAgIC8vIOi2hemTvuaOpei3s+i9rFxuICAgIC8vIHN1Ymxpbms6IG51bGwsXG4gICAgLy8g5LuF5pSv5oyBc2VsZiB8IGJsYW5rXG4gICAgc3VidGFyZ2V0OiAnYmxhbmsnLFxuICAgIC8vICdjZW50ZXInIMKmICdsZWZ0JyDCpiAncmlnaHQnXG4gICAgLy8gwqYge251bWJlcn3vvIh45Z2Q5qCH77yM5Y2V5L2NcHjvvIlcbiAgICBsZWZ0OiAwLFxuICAgIC8vICd0b3AnIMKmICdib3R0b20nIMKmICdjZW50ZXInXG4gICAgLy8gwqYge251bWJlcn3vvIh55Z2Q5qCH77yM5Y2V5L2NcHjvvIlcbiAgICB0b3A6IDAsXG4gICAgLy8g5rC05bmz5a+56b2QXG4gICAgLy8gJ2F1dG8nIHwgJ2xlZnQnIHwgJ3JpZ2h0JyB8ICdjZW50ZXInXG4gICAgLy8g6buY6K6k5qC55o2uIGxlZnQg55qE5L2N572u5Yik5pat5piv5bem5a+56b2Q6L+Y5piv5Y+z5a+56b2QXG4gICAgLy8gdGV4dEFsaWduOiBudWxsXG4gICAgLy9cbiAgICAvLyDlnoLnm7Tlr7npvZBcbiAgICAvLyAnYXV0bycgfCAndG9wJyB8ICdib3R0b20nIHwgJ21pZGRsZSdcbiAgICAvLyDpu5jorqTmoLnmja4gdG9wIOS9jee9ruWIpOaWreaYr+S4iuWvuem9kOi/mOaYr+S4i+Wvuem9kFxuICAgIC8vIHRleHRCYXNlbGluZTogbnVsbFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxuICAgIC8vIOagh+mimOi+ueahhuminOiJslxuICAgIGJvcmRlckNvbG9yOiAnI2NjYycsXG4gICAgLy8g5qCH6aKY6L655qGG57q/5a6977yM5Y2V5L2NcHjvvIzpu5jorqTkuLow77yI5peg6L655qGG77yJXG4gICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgLy8g5qCH6aKY5YaF6L656Led77yM5Y2V5L2NcHjvvIzpu5jorqTlkITmlrnlkJHlhoXovrnot53kuLo177yMXG4gICAgLy8g5o6l5Y+X5pWw57uE5YiG5Yir6K6+5a6a5LiK5Y+z5LiL5bem6L656Led77yM5ZCMY3NzXG4gICAgcGFkZGluZzogNSxcbiAgICAvLyDkuLvlia/moIfpopjnurXlkJHpl7TpmpTvvIzljZXkvY1weO+8jOm7mOiupOS4ujEw77yMXG4gICAgaXRlbUdhcDogMTAsXG4gICAgdGV4dFN0eWxlOiB7XG4gICAgICBmb250U2l6ZTogMTgsXG4gICAgICBmb250V2VpZ2h0OiAnYm9sZGVyJyxcbiAgICAgIGNvbG9yOiAnIzMzMydcbiAgICB9LFxuICAgIHN1YnRleHRTdHlsZToge1xuICAgICAgY29sb3I6ICcjYWFhJ1xuICAgIH1cbiAgfVxufSk7IC8vIFZpZXdcblxuZWNoYXJ0cy5leHRlbmRDb21wb25lbnRWaWV3KHtcbiAgdHlwZTogJ3RpdGxlJyxcbiAgcmVuZGVyOiBmdW5jdGlvbiAodGl0bGVNb2RlbCwgZWNNb2RlbCwgYXBpKSB7XG4gICAgdGhpcy5ncm91cC5yZW1vdmVBbGwoKTtcblxuICAgIGlmICghdGl0bGVNb2RlbC5nZXQoJ3Nob3cnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBncm91cCA9IHRoaXMuZ3JvdXA7XG4gICAgdmFyIHRleHRTdHlsZU1vZGVsID0gdGl0bGVNb2RlbC5nZXRNb2RlbCgndGV4dFN0eWxlJyk7XG4gICAgdmFyIHN1YnRleHRTdHlsZU1vZGVsID0gdGl0bGVNb2RlbC5nZXRNb2RlbCgnc3VidGV4dFN0eWxlJyk7XG4gICAgdmFyIHRleHRBbGlnbiA9IHRpdGxlTW9kZWwuZ2V0KCd0ZXh0QWxpZ24nKTtcbiAgICB2YXIgdGV4dEJhc2VsaW5lID0gdGl0bGVNb2RlbC5nZXQoJ3RleHRCYXNlbGluZScpO1xuICAgIHZhciB0ZXh0RWwgPSBuZXcgZ3JhcGhpYy5UZXh0KHtcbiAgICAgIHN0eWxlOiBncmFwaGljLnNldFRleHRTdHlsZSh7fSwgdGV4dFN0eWxlTW9kZWwsIHtcbiAgICAgICAgdGV4dDogdGl0bGVNb2RlbC5nZXQoJ3RleHQnKSxcbiAgICAgICAgdGV4dEZpbGw6IHRleHRTdHlsZU1vZGVsLmdldFRleHRDb2xvcigpXG4gICAgICB9LCB7XG4gICAgICAgIGRpc2FibGVCb3g6IHRydWVcbiAgICAgIH0pLFxuICAgICAgejI6IDEwXG4gICAgfSk7XG4gICAgdmFyIHRleHRSZWN0ID0gdGV4dEVsLmdldEJvdW5kaW5nUmVjdCgpO1xuICAgIHZhciBzdWJUZXh0ID0gdGl0bGVNb2RlbC5nZXQoJ3N1YnRleHQnKTtcbiAgICB2YXIgc3ViVGV4dEVsID0gbmV3IGdyYXBoaWMuVGV4dCh7XG4gICAgICBzdHlsZTogZ3JhcGhpYy5zZXRUZXh0U3R5bGUoe30sIHN1YnRleHRTdHlsZU1vZGVsLCB7XG4gICAgICAgIHRleHQ6IHN1YlRleHQsXG4gICAgICAgIHRleHRGaWxsOiBzdWJ0ZXh0U3R5bGVNb2RlbC5nZXRUZXh0Q29sb3IoKSxcbiAgICAgICAgeTogdGV4dFJlY3QuaGVpZ2h0ICsgdGl0bGVNb2RlbC5nZXQoJ2l0ZW1HYXAnKSxcbiAgICAgICAgdGV4dFZlcnRpY2FsQWxpZ246ICd0b3AnXG4gICAgICB9LCB7XG4gICAgICAgIGRpc2FibGVCb3g6IHRydWVcbiAgICAgIH0pLFxuICAgICAgejI6IDEwXG4gICAgfSk7XG4gICAgdmFyIGxpbmsgPSB0aXRsZU1vZGVsLmdldCgnbGluaycpO1xuICAgIHZhciBzdWJsaW5rID0gdGl0bGVNb2RlbC5nZXQoJ3N1YmxpbmsnKTtcbiAgICB0ZXh0RWwuc2lsZW50ID0gIWxpbms7XG4gICAgc3ViVGV4dEVsLnNpbGVudCA9ICFzdWJsaW5rO1xuXG4gICAgaWYgKGxpbmspIHtcbiAgICAgIHRleHRFbC5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdpbmRvdy5vcGVuKGxpbmssICdfJyArIHRpdGxlTW9kZWwuZ2V0KCd0YXJnZXQnKSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoc3VibGluaykge1xuICAgICAgc3ViVGV4dEVsLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Lm9wZW4oc3VibGluaywgJ18nICsgdGl0bGVNb2RlbC5nZXQoJ3N1YnRhcmdldCcpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGdyb3VwLmFkZCh0ZXh0RWwpO1xuICAgIHN1YlRleHQgJiYgZ3JvdXAuYWRkKHN1YlRleHRFbCk7IC8vIElmIG5vIHN1YlRleHQsIGJ1dCBhZGQgc3ViVGV4dEVsLCB0aGVyZSB3aWxsIGJlIGFuIGVtcHR5IGxpbmUuXG5cbiAgICB2YXIgZ3JvdXBSZWN0ID0gZ3JvdXAuZ2V0Qm91bmRpbmdSZWN0KCk7XG4gICAgdmFyIGxheW91dE9wdGlvbiA9IHRpdGxlTW9kZWwuZ2V0Qm94TGF5b3V0UGFyYW1zKCk7XG4gICAgbGF5b3V0T3B0aW9uLndpZHRoID0gZ3JvdXBSZWN0LndpZHRoO1xuICAgIGxheW91dE9wdGlvbi5oZWlnaHQgPSBncm91cFJlY3QuaGVpZ2h0O1xuICAgIHZhciBsYXlvdXRSZWN0ID0gZ2V0TGF5b3V0UmVjdChsYXlvdXRPcHRpb24sIHtcbiAgICAgIHdpZHRoOiBhcGkuZ2V0V2lkdGgoKSxcbiAgICAgIGhlaWdodDogYXBpLmdldEhlaWdodCgpXG4gICAgfSwgdGl0bGVNb2RlbC5nZXQoJ3BhZGRpbmcnKSk7IC8vIEFkanVzdCB0ZXh0IGFsaWduIGJhc2VkIG9uIHBvc2l0aW9uXG5cbiAgICBpZiAoIXRleHRBbGlnbikge1xuICAgICAgLy8gQWxpZ24gbGVmdCBpZiB0aXRsZSBpcyBvbiB0aGUgbGVmdC4gY2VudGVyIGFuZCByaWdodCBpcyBzYW1lXG4gICAgICB0ZXh0QWxpZ24gPSB0aXRsZU1vZGVsLmdldCgnbGVmdCcpIHx8IHRpdGxlTW9kZWwuZ2V0KCdyaWdodCcpO1xuXG4gICAgICBpZiAodGV4dEFsaWduID09PSAnbWlkZGxlJykge1xuICAgICAgICB0ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgIH0gLy8gQWRqdXN0IGxheW91dCBieSB0ZXh0IGFsaWduXG5cblxuICAgICAgaWYgKHRleHRBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICBsYXlvdXRSZWN0LnggKz0gbGF5b3V0UmVjdC53aWR0aDtcbiAgICAgIH0gZWxzZSBpZiAodGV4dEFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICBsYXlvdXRSZWN0LnggKz0gbGF5b3V0UmVjdC53aWR0aCAvIDI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0ZXh0QmFzZWxpbmUpIHtcbiAgICAgIHRleHRCYXNlbGluZSA9IHRpdGxlTW9kZWwuZ2V0KCd0b3AnKSB8fCB0aXRsZU1vZGVsLmdldCgnYm90dG9tJyk7XG5cbiAgICAgIGlmICh0ZXh0QmFzZWxpbmUgPT09ICdjZW50ZXInKSB7XG4gICAgICAgIHRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgfVxuXG4gICAgICBpZiAodGV4dEJhc2VsaW5lID09PSAnYm90dG9tJykge1xuICAgICAgICBsYXlvdXRSZWN0LnkgKz0gbGF5b3V0UmVjdC5oZWlnaHQ7XG4gICAgICB9IGVsc2UgaWYgKHRleHRCYXNlbGluZSA9PT0gJ21pZGRsZScpIHtcbiAgICAgICAgbGF5b3V0UmVjdC55ICs9IGxheW91dFJlY3QuaGVpZ2h0IC8gMjtcbiAgICAgIH1cblxuICAgICAgdGV4dEJhc2VsaW5lID0gdGV4dEJhc2VsaW5lIHx8ICd0b3AnO1xuICAgIH1cblxuICAgIGdyb3VwLmF0dHIoJ3Bvc2l0aW9uJywgW2xheW91dFJlY3QueCwgbGF5b3V0UmVjdC55XSk7XG4gICAgdmFyIGFsaWduU3R5bGUgPSB7XG4gICAgICB0ZXh0QWxpZ246IHRleHRBbGlnbixcbiAgICAgIHRleHRWZXJ0aWNhbEFsaWduOiB0ZXh0QmFzZWxpbmVcbiAgICB9O1xuICAgIHRleHRFbC5zZXRTdHlsZShhbGlnblN0eWxlKTtcbiAgICBzdWJUZXh0RWwuc2V0U3R5bGUoYWxpZ25TdHlsZSk7IC8vIFJlbmRlciBiYWNrZ3JvdW5kXG4gICAgLy8gR2V0IGdyb3VwUmVjdCBhZ2FpbiBiZWNhdXNlIHRleHRBbGlnbiBoYXMgYmVlbiBjaGFuZ2VkXG5cbiAgICBncm91cFJlY3QgPSBncm91cC5nZXRCb3VuZGluZ1JlY3QoKTtcbiAgICB2YXIgcGFkZGluZyA9IGxheW91dFJlY3QubWFyZ2luO1xuICAgIHZhciBzdHlsZSA9IHRpdGxlTW9kZWwuZ2V0SXRlbVN0eWxlKFsnY29sb3InLCAnb3BhY2l0eSddKTtcbiAgICBzdHlsZS5maWxsID0gdGl0bGVNb2RlbC5nZXQoJ2JhY2tncm91bmRDb2xvcicpO1xuICAgIHZhciByZWN0ID0gbmV3IGdyYXBoaWMuUmVjdCh7XG4gICAgICBzaGFwZToge1xuICAgICAgICB4OiBncm91cFJlY3QueCAtIHBhZGRpbmdbM10sXG4gICAgICAgIHk6IGdyb3VwUmVjdC55IC0gcGFkZGluZ1swXSxcbiAgICAgICAgd2lkdGg6IGdyb3VwUmVjdC53aWR0aCArIHBhZGRpbmdbMV0gKyBwYWRkaW5nWzNdLFxuICAgICAgICBoZWlnaHQ6IGdyb3VwUmVjdC5oZWlnaHQgKyBwYWRkaW5nWzBdICsgcGFkZGluZ1syXSxcbiAgICAgICAgcjogdGl0bGVNb2RlbC5nZXQoJ2JvcmRlclJhZGl1cycpXG4gICAgICB9LFxuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgc2lsZW50OiB0cnVlXG4gICAgfSk7XG4gICAgZ3JhcGhpYy5zdWJQaXhlbE9wdGltaXplUmVjdChyZWN0KTtcbiAgICBncm91cC5hZGQocmVjdCk7XG4gIH1cbn0pOyIsInZhciBlY2hhcnRzID0gcmVxdWlyZShcIi4uL2VjaGFydHNcIik7XG5cbnJlcXVpcmUoXCIuL2F4aXNQb2ludGVyXCIpO1xuXG5yZXF1aXJlKFwiLi90b29sdGlwL1Rvb2x0aXBNb2RlbFwiKTtcblxucmVxdWlyZShcIi4vdG9vbHRpcC9Ub29sdGlwVmlld1wiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuLy8gRklYTUUgQmV0dGVyIHdheSB0byBwYWNrIGRhdGEgaW4gZ3JhcGhpYyBlbGVtZW50XG5cbi8qKlxuICogQGFjdGlvblxuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzZXJpZXNJbmRleFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGFJbmRleFxuICogQHByb3BlcnR5IHtudW1iZXJ9IFt4XVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFt5XVxuICovXG5lY2hhcnRzLnJlZ2lzdGVyQWN0aW9uKHtcbiAgdHlwZTogJ3Nob3dUaXAnLFxuICBldmVudDogJ3Nob3dUaXAnLFxuICB1cGRhdGU6ICd0b29sdGlwOm1hbnVhbGx5U2hvd1RpcCdcbn0sIC8vIG5vb3BcbmZ1bmN0aW9uICgpIHt9KTtcbmVjaGFydHMucmVnaXN0ZXJBY3Rpb24oe1xuICB0eXBlOiAnaGlkZVRpcCcsXG4gIGV2ZW50OiAnaGlkZVRpcCcsXG4gIHVwZGF0ZTogJ3Rvb2x0aXA6bWFudWFsbHlIaWRlVGlwJ1xufSwgLy8gbm9vcFxuZnVuY3Rpb24gKCkge30pOyIsInZhciB6clV0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgenJDb2xvciA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi90b29sL2NvbG9yXCIpO1xuXG52YXIgZXZlbnRVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvZXZlbnRcIik7XG5cbnZhciBlbnYgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS9lbnZcIik7XG5cbnZhciBmb3JtYXRVdGlsID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvZm9ybWF0XCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgZWFjaCA9IHpyVXRpbC5lYWNoO1xudmFyIHRvQ2FtZWxDYXNlID0gZm9ybWF0VXRpbC50b0NhbWVsQ2FzZTtcbnZhciB2ZW5kb3JzID0gWycnLCAnLXdlYmtpdC0nLCAnLW1vei0nLCAnLW8tJ107XG52YXIgZ0Nzc1RleHQgPSAncG9zaXRpb246YWJzb2x1dGU7ZGlzcGxheTpibG9jaztib3JkZXItc3R5bGU6c29saWQ7d2hpdGUtc3BhY2U6bm93cmFwO3otaW5kZXg6OTk5OTk5OTsnO1xuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb25cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBpbm5lclxuICovXG5cbmZ1bmN0aW9uIGFzc2VtYmxlVHJhbnNpdGlvbihkdXJhdGlvbikge1xuICB2YXIgdHJhbnNpdGlvbkN1cnZlID0gJ2N1YmljLWJlemllcigwLjIzLCAxLCAwLjMyLCAxKSc7XG4gIHZhciB0cmFuc2l0aW9uVGV4dCA9ICdsZWZ0ICcgKyBkdXJhdGlvbiArICdzICcgKyB0cmFuc2l0aW9uQ3VydmUgKyAnLCcgKyAndG9wICcgKyBkdXJhdGlvbiArICdzICcgKyB0cmFuc2l0aW9uQ3VydmU7XG4gIHJldHVybiB6clV0aWwubWFwKHZlbmRvcnMsIGZ1bmN0aW9uICh2ZW5kb3JQcmVmaXgpIHtcbiAgICByZXR1cm4gdmVuZG9yUHJlZml4ICsgJ3RyYW5zaXRpb246JyArIHRyYW5zaXRpb25UZXh0O1xuICB9KS5qb2luKCc7Jyk7XG59XG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSB0ZXh0U3R5bGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBpbm5lclxuICovXG5cblxuZnVuY3Rpb24gYXNzZW1ibGVGb250KHRleHRTdHlsZU1vZGVsKSB7XG4gIHZhciBjc3NUZXh0ID0gW107XG4gIHZhciBmb250U2l6ZSA9IHRleHRTdHlsZU1vZGVsLmdldCgnZm9udFNpemUnKTtcbiAgdmFyIGNvbG9yID0gdGV4dFN0eWxlTW9kZWwuZ2V0VGV4dENvbG9yKCk7XG4gIGNvbG9yICYmIGNzc1RleHQucHVzaCgnY29sb3I6JyArIGNvbG9yKTtcbiAgY3NzVGV4dC5wdXNoKCdmb250OicgKyB0ZXh0U3R5bGVNb2RlbC5nZXRGb250KCkpO1xuICBmb250U2l6ZSAmJiBjc3NUZXh0LnB1c2goJ2xpbmUtaGVpZ2h0OicgKyBNYXRoLnJvdW5kKGZvbnRTaXplICogMyAvIDIpICsgJ3B4Jyk7XG4gIGVhY2goWydkZWNvcmF0aW9uJywgJ2FsaWduJ10sIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHZhbCA9IHRleHRTdHlsZU1vZGVsLmdldChuYW1lKTtcbiAgICB2YWwgJiYgY3NzVGV4dC5wdXNoKCd0ZXh0LScgKyBuYW1lICsgJzonICsgdmFsKTtcbiAgfSk7XG4gIHJldHVybiBjc3NUZXh0LmpvaW4oJzsnKTtcbn1cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IHRvb2x0aXBNb2RlbFxuICogQHJldHVybiB7c3RyaW5nfVxuICogQGlubmVyXG4gKi9cblxuXG5mdW5jdGlvbiBhc3NlbWJsZUNzc1RleHQodG9vbHRpcE1vZGVsKSB7XG4gIHZhciBjc3NUZXh0ID0gW107XG4gIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSB0b29sdGlwTW9kZWwuZ2V0KCd0cmFuc2l0aW9uRHVyYXRpb24nKTtcbiAgdmFyIGJhY2tncm91bmRDb2xvciA9IHRvb2x0aXBNb2RlbC5nZXQoJ2JhY2tncm91bmRDb2xvcicpO1xuICB2YXIgdGV4dFN0eWxlTW9kZWwgPSB0b29sdGlwTW9kZWwuZ2V0TW9kZWwoJ3RleHRTdHlsZScpO1xuICB2YXIgcGFkZGluZyA9IHRvb2x0aXBNb2RlbC5nZXQoJ3BhZGRpbmcnKTsgLy8gQW5pbWF0aW9uIHRyYW5zaXRpb24uIERvIG5vdCBhbmltYXRlIHdoZW4gdHJhbnNpdGlvbkR1cmF0aW9uIGlzIDAuXG5cbiAgdHJhbnNpdGlvbkR1cmF0aW9uICYmIGNzc1RleHQucHVzaChhc3NlbWJsZVRyYW5zaXRpb24odHJhbnNpdGlvbkR1cmF0aW9uKSk7XG5cbiAgaWYgKGJhY2tncm91bmRDb2xvcikge1xuICAgIGlmIChlbnYuY2FudmFzU3VwcG9ydGVkKSB7XG4gICAgICBjc3NUZXh0LnB1c2goJ2JhY2tncm91bmQtQ29sb3I6JyArIGJhY2tncm91bmRDb2xvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBpZVxuICAgICAgY3NzVGV4dC5wdXNoKCdiYWNrZ3JvdW5kLUNvbG9yOiMnICsgenJDb2xvci50b0hleChiYWNrZ3JvdW5kQ29sb3IpKTtcbiAgICAgIGNzc1RleHQucHVzaCgnZmlsdGVyOmFscGhhKG9wYWNpdHk9NzApJyk7XG4gICAgfVxuICB9IC8vIEJvcmRlciBzdHlsZVxuXG5cbiAgZWFjaChbJ3dpZHRoJywgJ2NvbG9yJywgJ3JhZGl1cyddLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBib3JkZXJOYW1lID0gJ2JvcmRlci0nICsgbmFtZTtcbiAgICB2YXIgY2FtZWxDYXNlID0gdG9DYW1lbENhc2UoYm9yZGVyTmFtZSk7XG4gICAgdmFyIHZhbCA9IHRvb2x0aXBNb2RlbC5nZXQoY2FtZWxDYXNlKTtcbiAgICB2YWwgIT0gbnVsbCAmJiBjc3NUZXh0LnB1c2goYm9yZGVyTmFtZSArICc6JyArIHZhbCArIChuYW1lID09PSAnY29sb3InID8gJycgOiAncHgnKSk7XG4gIH0pOyAvLyBUZXh0IHN0eWxlXG5cbiAgY3NzVGV4dC5wdXNoKGFzc2VtYmxlRm9udCh0ZXh0U3R5bGVNb2RlbCkpOyAvLyBQYWRkaW5nXG5cbiAgaWYgKHBhZGRpbmcgIT0gbnVsbCkge1xuICAgIGNzc1RleHQucHVzaCgncGFkZGluZzonICsgZm9ybWF0VXRpbC5ub3JtYWxpemVDc3NBcnJheShwYWRkaW5nKS5qb2luKCdweCAnKSArICdweCcpO1xuICB9XG5cbiAgcmV0dXJuIGNzc1RleHQuam9pbignOycpICsgJzsnO1xufVxuLyoqXG4gKiBAYWxpYXMgbW9kdWxlOmVjaGFydHMvY29tcG9uZW50L3Rvb2x0aXAvVG9vbHRpcENvbnRlbnRcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5cblxuZnVuY3Rpb24gVG9vbHRpcENvbnRlbnQoY29udGFpbmVyLCBhcGkpIHtcbiAgaWYgKGVudi53eGEpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB2YXIgenIgPSB0aGlzLl96ciA9IGFwaS5nZXRacigpO1xuICB0aGlzLmVsID0gZWw7XG4gIHRoaXMuX3ggPSBhcGkuZ2V0V2lkdGgoKSAvIDI7XG4gIHRoaXMuX3kgPSBhcGkuZ2V0SGVpZ2h0KCkgLyAyO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWwpO1xuICB0aGlzLl9jb250YWluZXIgPSBjb250YWluZXI7XG4gIHRoaXMuX3Nob3cgPSBmYWxzZTtcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIHRoaXMuX2hpZGVUaW1lb3V0O1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgZWwub25tb3VzZWVudGVyID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIGNsZWFyIHRoZSB0aW1lb3V0IGluIGhpZGVMYXRlciBhbmQga2VlcCBzaG93aW5nIHRvb2x0aXBcbiAgICBpZiAoc2VsZi5fZW50ZXJhYmxlKSB7XG4gICAgICBjbGVhclRpbWVvdXQoc2VsZi5faGlkZVRpbWVvdXQpO1xuICAgICAgc2VsZi5fc2hvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgc2VsZi5faW5Db250ZW50ID0gdHJ1ZTtcbiAgfTtcblxuICBlbC5vbm1vdXNlbW92ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuXG4gICAgaWYgKCFzZWxmLl9lbnRlcmFibGUpIHtcbiAgICAgIC8vIFRyeSB0cmlnZ2VyIHpyZW5kZXIgZXZlbnQgdG8gYXZvaWQgbW91c2VcbiAgICAgIC8vIGluIGFuZCBvdXQgc2hhcGUgdG9vIGZyZXF1ZW50bHlcbiAgICAgIHZhciBoYW5kbGVyID0genIuaGFuZGxlcjtcbiAgICAgIGV2ZW50VXRpbC5ub3JtYWxpemVFdmVudChjb250YWluZXIsIGUsIHRydWUpO1xuICAgICAgaGFuZGxlci5kaXNwYXRjaCgnbW91c2Vtb3ZlJywgZSk7XG4gICAgfVxuICB9O1xuXG4gIGVsLm9ubW91c2VsZWF2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2VsZi5fZW50ZXJhYmxlKSB7XG4gICAgICBpZiAoc2VsZi5fc2hvdykge1xuICAgICAgICBzZWxmLmhpZGVMYXRlcihzZWxmLl9oaWRlRGVsYXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNlbGYuX2luQ29udGVudCA9IGZhbHNlO1xuICB9O1xufVxuXG5Ub29sdGlwQ29udGVudC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUb29sdGlwQ29udGVudCxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBfZW50ZXJhYmxlOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBVcGRhdGUgd2hlbiB0b29sdGlwIGlzIHJlbmRlcmVkXG4gICAqL1xuICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBGSVhNRVxuICAgIC8vIE1vdmUgdGhpcyBsb2dpYyB0byBlYyBtYWluP1xuICAgIHZhciBjb250YWluZXIgPSB0aGlzLl9jb250YWluZXI7XG4gICAgdmFyIHN0bCA9IGNvbnRhaW5lci5jdXJyZW50U3R5bGUgfHwgZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShjb250YWluZXIpO1xuICAgIHZhciBkb21TdHlsZSA9IGNvbnRhaW5lci5zdHlsZTtcblxuICAgIGlmIChkb21TdHlsZS5wb3NpdGlvbiAhPT0gJ2Fic29sdXRlJyAmJiBzdGwucG9zaXRpb24gIT09ICdhYnNvbHV0ZScpIHtcbiAgICAgIGRvbVN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICB9IC8vIEhpZGUgdGhlIHRvb2x0aXBcbiAgICAvLyBQRU5ESU5HXG4gICAgLy8gdGhpcy5oaWRlKCk7XG5cbiAgfSxcbiAgc2hvdzogZnVuY3Rpb24gKHRvb2x0aXBNb2RlbCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl9oaWRlVGltZW91dCk7XG4gICAgdmFyIGVsID0gdGhpcy5lbDtcbiAgICBlbC5zdHlsZS5jc3NUZXh0ID0gZ0Nzc1RleHQgKyBhc3NlbWJsZUNzc1RleHQodG9vbHRpcE1vZGVsKSAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIxMTI1NTg3L2NzczMtdHJhbnNpdGlvbi1ub3Qtd29ya2luZy1pbi1jaHJvbWUtYW55bW9yZVxuICAgICsgJztsZWZ0OicgKyB0aGlzLl94ICsgJ3B4O3RvcDonICsgdGhpcy5feSArICdweDsnICsgKHRvb2x0aXBNb2RlbC5nZXQoJ2V4dHJhQ3NzVGV4dCcpIHx8ICcnKTtcbiAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuaW5uZXJIVE1MID8gJ2Jsb2NrJyA6ICdub25lJztcbiAgICB0aGlzLl9zaG93ID0gdHJ1ZTtcbiAgfSxcbiAgc2V0Q29udGVudDogZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICB0aGlzLmVsLmlubmVySFRNTCA9IGNvbnRlbnQgPT0gbnVsbCA/ICcnIDogY29udGVudDtcbiAgfSxcbiAgc2V0RW50ZXJhYmxlOiBmdW5jdGlvbiAoZW50ZXJhYmxlKSB7XG4gICAgdGhpcy5fZW50ZXJhYmxlID0gZW50ZXJhYmxlO1xuICB9LFxuICBnZXRTaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsID0gdGhpcy5lbDtcbiAgICByZXR1cm4gW2VsLmNsaWVudFdpZHRoLCBlbC5jbGllbnRIZWlnaHRdO1xuICB9LFxuICBtb3ZlVG86IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgLy8geHkgc2hvdWxkIGJlIGJhc2VkIG9uIGNhbnZhcyByb290LiBCdXQgdG9vbHRpcENvbnRlbnQgaXNcbiAgICAvLyB0aGUgc2libGluZyBvZiBjYW52YXMgcm9vdC4gU28gcGFkZGluZyBvZiBlYyBjb250YWluZXJcbiAgICAvLyBzaG91bGQgYmUgY29uc2lkZXJlZCBoZXJlLlxuICAgIHZhciB6ciA9IHRoaXMuX3pyO1xuICAgIHZhciB2aWV3cG9ydFJvb3RPZmZzZXQ7XG5cbiAgICBpZiAoenIgJiYgenIucGFpbnRlciAmJiAodmlld3BvcnRSb290T2Zmc2V0ID0genIucGFpbnRlci5nZXRWaWV3cG9ydFJvb3RPZmZzZXQoKSkpIHtcbiAgICAgIHggKz0gdmlld3BvcnRSb290T2Zmc2V0Lm9mZnNldExlZnQ7XG4gICAgICB5ICs9IHZpZXdwb3J0Um9vdE9mZnNldC5vZmZzZXRUb3A7XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlID0gdGhpcy5lbC5zdHlsZTtcbiAgICBzdHlsZS5sZWZ0ID0geCArICdweCc7XG4gICAgc3R5bGUudG9wID0geSArICdweCc7XG4gICAgdGhpcy5feCA9IHg7XG4gICAgdGhpcy5feSA9IHk7XG4gIH0sXG4gIGhpZGU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgdGhpcy5fc2hvdyA9IGZhbHNlO1xuICB9LFxuICBoaWRlTGF0ZXI6IGZ1bmN0aW9uICh0aW1lKSB7XG4gICAgaWYgKHRoaXMuX3Nob3cgJiYgISh0aGlzLl9pbkNvbnRlbnQgJiYgdGhpcy5fZW50ZXJhYmxlKSkge1xuICAgICAgaWYgKHRpbWUpIHtcbiAgICAgICAgdGhpcy5faGlkZURlbGF5ID0gdGltZTsgLy8gU2V0IHNob3cgZmFsc2UgdG8gYXZvaWQgaW52b2tlIGhpZGVMYXRlciBtdXRpcGxlIHRpbWVzXG5cbiAgICAgICAgdGhpcy5fc2hvdyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9oaWRlVGltZW91dCA9IHNldFRpbWVvdXQoenJVdGlsLmJpbmQodGhpcy5oaWRlLCB0aGlzKSwgdGltZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGlzU2hvdzogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9zaG93O1xuICB9XG59O1xudmFyIF9kZWZhdWx0ID0gVG9vbHRpcENvbnRlbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBlY2hhcnRzID0gcmVxdWlyZShcIi4uLy4uL2VjaGFydHNcIik7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbnZhciBfZGVmYXVsdCA9IGVjaGFydHMuZXh0ZW5kQ29tcG9uZW50TW9kZWwoe1xuICB0eXBlOiAndG9vbHRpcCcsXG4gIGRlcGVuZGVuY2llczogWydheGlzUG9pbnRlciddLFxuICBkZWZhdWx0T3B0aW9uOiB7XG4gICAgemxldmVsOiAwLFxuICAgIHo6IDgsXG4gICAgc2hvdzogdHJ1ZSxcbiAgICAvLyB0b29sdGlw5Li75L2T5YaF5a65XG4gICAgc2hvd0NvbnRlbnQ6IHRydWUsXG4gICAgLy8gJ3RyaWdnZXInIG9ubHkgd29ya3Mgb24gY29vcmRpbmF0ZSBzeXN0ZW0uXG4gICAgLy8gJ2l0ZW0nIHwgJ2F4aXMnIHwgJ25vbmUnXG4gICAgdHJpZ2dlcjogJ2l0ZW0nLFxuICAgIC8vICdjbGljaycgfCAnbW91c2Vtb3ZlJyB8ICdub25lJ1xuICAgIHRyaWdnZXJPbjogJ21vdXNlbW92ZXxjbGljaycsXG4gICAgYWx3YXlzU2hvd0NvbnRlbnQ6IGZhbHNlLFxuICAgIGRpc3BsYXlNb2RlOiAnc2luZ2xlJyxcbiAgICAvLyAnc2luZ2xlJyB8ICdtdWx0aXBsZUJ5Q29vcmRTeXMnXG4gICAgLy8g5L2N572uIHtBcnJheX0gfCB7RnVuY3Rpb259XG4gICAgLy8gcG9zaXRpb246IG51bGxcbiAgICAvLyBDb25zaWRlciB0cmlnZ2VyZWQgZnJvbSBheGlzUG9pbnRlciBoYW5kbGUsIHZlcnRpY2FsQWxpZ24gc2hvdWxkIGJlICdtaWRkbGUnXG4gICAgLy8gYWxpZ246IG51bGwsXG4gICAgLy8gdmVydGljYWxBbGlnbjogbnVsbCxcbiAgICAvLyDmmK/lkKbnuqbmnZ8gY29udGVudCDlnKggdmlld1JlY3Qg5Lit44CC6buY6K6kIGZhbHNlIOaYr+S4uuS6huWFvOWuueS7peWJjeeJiOacrOOAglxuICAgIGNvbmZpbmU6IGZhbHNlLFxuICAgIC8vIOWGheWuueagvOW8j+WZqO+8mntzdHJpbmd977yIVGVtcGxhdGXvvIkgwqYge0Z1bmN0aW9ufVxuICAgIC8vIGZvcm1hdHRlcjogbnVsbFxuICAgIHNob3dEZWxheTogMCxcbiAgICAvLyDpmpDol4/lu7bov5/vvIzljZXkvY1tc1xuICAgIGhpZGVEZWxheTogMTAwLFxuICAgIC8vIOWKqOeUu+WPmOaNouaXtumXtO+8jOWNleS9jXNcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246IDAuNCxcbiAgICBlbnRlcmFibGU6IGZhbHNlLFxuICAgIC8vIOaPkOekuuiDjOaZr+minOiJsu+8jOm7mOiupOS4uumAj+aYjuW6puS4ujAuN+eahOm7keiJslxuICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoNTAsNTAsNTAsMC43KScsXG4gICAgLy8g5o+Q56S66L655qGG6aKc6ImyXG4gICAgYm9yZGVyQ29sb3I6ICcjMzMzJyxcbiAgICAvLyDmj5DnpLrovrnmoYblnIbop5LvvIzljZXkvY1weO+8jOm7mOiupOS4ujRcbiAgICBib3JkZXJSYWRpdXM6IDQsXG4gICAgLy8g5o+Q56S66L655qGG57q/5a6977yM5Y2V5L2NcHjvvIzpu5jorqTkuLow77yI5peg6L655qGG77yJXG4gICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgLy8g5o+Q56S65YaF6L656Led77yM5Y2V5L2NcHjvvIzpu5jorqTlkITmlrnlkJHlhoXovrnot53kuLo177yMXG4gICAgLy8g5o6l5Y+X5pWw57uE5YiG5Yir6K6+5a6a5LiK5Y+z5LiL5bem6L656Led77yM5ZCMY3NzXG4gICAgcGFkZGluZzogNSxcbiAgICAvLyBFeHRyYSBjc3MgdGV4dFxuICAgIGV4dHJhQ3NzVGV4dDogJycsXG4gICAgLy8g5Z2Q5qCH6L205oyH56S65Zmo77yM5Z2Q5qCH6L206Kem5Y+R5pyJ5pWIXG4gICAgYXhpc1BvaW50ZXI6IHtcbiAgICAgIC8vIOm7mOiupOS4uuebtOe6v1xuICAgICAgLy8g5Y+v6YCJ5Li677yaJ2xpbmUnIHwgJ3NoYWRvdycgfCAnY3Jvc3MnXG4gICAgICB0eXBlOiAnbGluZScsXG4gICAgICAvLyB0eXBlIOS4uiBsaW5lIOeahOaXtuWAmeacieaViO+8jOaMh+WumiB0b29sdGlwIGxpbmUg5omA5Zyo55qE6L2077yM5Y+v6YCJXG4gICAgICAvLyDlj6/pgIkgJ3gnIHwgJ3knIHwgJ2FuZ2xlJyB8ICdyYWRpdXMnIHwgJ2F1dG8nXG4gICAgICAvLyDpu5jorqQgJ2F1dG8n77yM5Lya6YCJ5oup57G75Z6L5Li6IGNhdGVnb3J5IOeahOi9tO+8jOWvueS6juWPjOaVsOWAvOi9tO+8jOesm+WNoeWwlOWdkOagh+ezu+S8mum7mOiupOmAieaLqSB4IOi9tFxuICAgICAgLy8g5p6B5Z2Q5qCH57O75Lya6buY6K6k6YCJ5oupIGFuZ2xlIOi9tFxuICAgICAgYXhpczogJ2F1dG8nLFxuICAgICAgYW5pbWF0aW9uOiAnYXV0bycsXG4gICAgICBhbmltYXRpb25EdXJhdGlvblVwZGF0ZTogMjAwLFxuICAgICAgYW5pbWF0aW9uRWFzaW5nVXBkYXRlOiAnZXhwb25lbnRpYWxPdXQnLFxuICAgICAgY3Jvc3NTdHlsZToge1xuICAgICAgICBjb2xvcjogJyM5OTknLFxuICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgdHlwZTogJ2Rhc2hlZCcsXG4gICAgICAgIC8vIFRPRE8gZm9ybWF0dGVyXG4gICAgICAgIHRleHRTdHlsZToge30gLy8gbGluZVN0eWxlIGFuZCBzaGFkb3dTdHlsZSBzaG91bGQgbm90IGJlIHNwZWNpZmllZCBoZXJlLFxuICAgICAgICAvLyBvdGhlcndpc2UgaXQgd2lsbCBhbHdheXMgb3ZlcnJpZGUgdGhvc2Ugc3R5bGVzIG9uIG9wdGlvbi5heGlzUG9pbnRlci5cblxuICAgICAgfVxuICAgIH0sXG4gICAgdGV4dFN0eWxlOiB7XG4gICAgICBjb2xvcjogJyNmZmYnLFxuICAgICAgZm9udFNpemU6IDE0XG4gICAgfVxuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgZWNoYXJ0cyA9IHJlcXVpcmUoXCIuLi8uLi9lY2hhcnRzXCIpO1xuXG52YXIgenJVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxudmFyIGVudiA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL2VudlwiKTtcblxudmFyIFRvb2x0aXBDb250ZW50ID0gcmVxdWlyZShcIi4vVG9vbHRpcENvbnRlbnRcIik7XG5cbnZhciBmb3JtYXRVdGlsID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvZm9ybWF0XCIpO1xuXG52YXIgbnVtYmVyVXRpbCA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL251bWJlclwiKTtcblxudmFyIGdyYXBoaWMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9ncmFwaGljXCIpO1xuXG52YXIgZmluZFBvaW50RnJvbVNlcmllcyA9IHJlcXVpcmUoXCIuLi9heGlzUG9pbnRlci9maW5kUG9pbnRGcm9tU2VyaWVzXCIpO1xuXG52YXIgbGF5b3V0VXRpbCA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2xheW91dFwiKTtcblxudmFyIE1vZGVsID0gcmVxdWlyZShcIi4uLy4uL21vZGVsL01vZGVsXCIpO1xuXG52YXIgZ2xvYmFsTGlzdGVuZXIgPSByZXF1aXJlKFwiLi4vYXhpc1BvaW50ZXIvZ2xvYmFsTGlzdGVuZXJcIik7XG5cbnZhciBheGlzSGVscGVyID0gcmVxdWlyZShcIi4uLy4uL2Nvb3JkL2F4aXNIZWxwZXJcIik7XG5cbnZhciBheGlzUG9pbnRlclZpZXdIZWxwZXIgPSByZXF1aXJlKFwiLi4vYXhpc1BvaW50ZXIvdmlld0hlbHBlclwiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xudmFyIGJpbmQgPSB6clV0aWwuYmluZDtcbnZhciBlYWNoID0genJVdGlsLmVhY2g7XG52YXIgcGFyc2VQZXJjZW50ID0gbnVtYmVyVXRpbC5wYXJzZVBlcmNlbnQ7XG52YXIgcHJveHlSZWN0ID0gbmV3IGdyYXBoaWMuUmVjdCh7XG4gIHNoYXBlOiB7XG4gICAgeDogLTEsXG4gICAgeTogLTEsXG4gICAgd2lkdGg6IDIsXG4gICAgaGVpZ2h0OiAyXG4gIH1cbn0pO1xuXG52YXIgX2RlZmF1bHQgPSBlY2hhcnRzLmV4dGVuZENvbXBvbmVudFZpZXcoe1xuICB0eXBlOiAndG9vbHRpcCcsXG4gIGluaXQ6IGZ1bmN0aW9uIChlY01vZGVsLCBhcGkpIHtcbiAgICBpZiAoZW52Lm5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdG9vbHRpcENvbnRlbnQgPSBuZXcgVG9vbHRpcENvbnRlbnQoYXBpLmdldERvbSgpLCBhcGkpO1xuICAgIHRoaXMuX3Rvb2x0aXBDb250ZW50ID0gdG9vbHRpcENvbnRlbnQ7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gKHRvb2x0aXBNb2RlbCwgZWNNb2RlbCwgYXBpKSB7XG4gICAgaWYgKGVudi5ub2RlIHx8IGVudi53eGEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFJlc2V0XG5cblxuICAgIHRoaXMuZ3JvdXAucmVtb3ZlQWxsKCk7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7bW9kdWxlOmVjaGFydHMvY29tcG9uZW50L3Rvb2x0aXAvVG9vbHRpcE1vZGVsfVxuICAgICAqL1xuXG4gICAgdGhpcy5fdG9vbHRpcE1vZGVsID0gdG9vbHRpcE1vZGVsO1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge21vZHVsZTplY2hhcnRzL21vZGVsL0dsb2JhbH1cbiAgICAgKi9cblxuICAgIHRoaXMuX2VjTW9kZWwgPSBlY01vZGVsO1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge21vZHVsZTplY2hhcnRzL0V4dGVuc2lvbkFQSX1cbiAgICAgKi9cblxuICAgIHRoaXMuX2FwaSA9IGFwaTtcbiAgICAvKipcbiAgICAgKiBTaG91bGQgYmUgY2xlYW5lZCB3aGVuIHJlbmRlci5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtBcnJheS48QXJyYXkuPE9iamVjdD4+fVxuICAgICAqL1xuXG4gICAgdGhpcy5fbGFzdERhdGFCeUNvb3JkU3lzID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuXG4gICAgdGhpcy5fYWx3YXlzU2hvd0NvbnRlbnQgPSB0b29sdGlwTW9kZWwuZ2V0KCdhbHdheXNTaG93Q29udGVudCcpO1xuICAgIHZhciB0b29sdGlwQ29udGVudCA9IHRoaXMuX3Rvb2x0aXBDb250ZW50O1xuICAgIHRvb2x0aXBDb250ZW50LnVwZGF0ZSgpO1xuICAgIHRvb2x0aXBDb250ZW50LnNldEVudGVyYWJsZSh0b29sdGlwTW9kZWwuZ2V0KCdlbnRlcmFibGUnKSk7XG5cbiAgICB0aGlzLl9pbml0R2xvYmFsTGlzdGVuZXIoKTtcblxuICAgIHRoaXMuX2tlZXBTaG93KCk7XG4gIH0sXG4gIF9pbml0R2xvYmFsTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdG9vbHRpcE1vZGVsID0gdGhpcy5fdG9vbHRpcE1vZGVsO1xuICAgIHZhciB0cmlnZ2VyT24gPSB0b29sdGlwTW9kZWwuZ2V0KCd0cmlnZ2VyT24nKTtcbiAgICBnbG9iYWxMaXN0ZW5lci5yZWdpc3RlcignaXRlbVRvb2x0aXAnLCB0aGlzLl9hcGksIGJpbmQoZnVuY3Rpb24gKGN1cnJUcmlnZ2VyLCBlLCBkaXNwYXRjaEFjdGlvbikge1xuICAgICAgLy8gSWYgJ25vbmUnLCBpdCBpcyBub3QgY29udHJvbGxlZCBieSBtb3VzZSB0b3RhbGx5LlxuICAgICAgaWYgKHRyaWdnZXJPbiAhPT0gJ25vbmUnKSB7XG4gICAgICAgIGlmICh0cmlnZ2VyT24uaW5kZXhPZihjdXJyVHJpZ2dlcikgPj0gMCkge1xuICAgICAgICAgIHRoaXMuX3RyeVNob3coZSwgZGlzcGF0Y2hBY3Rpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKGN1cnJUcmlnZ2VyID09PSAnbGVhdmUnKSB7XG4gICAgICAgICAgdGhpcy5faGlkZShkaXNwYXRjaEFjdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB0aGlzKSk7XG4gIH0sXG4gIF9rZWVwU2hvdzogZnVuY3Rpb24gKCkge1xuICAgIHZhciB0b29sdGlwTW9kZWwgPSB0aGlzLl90b29sdGlwTW9kZWw7XG4gICAgdmFyIGVjTW9kZWwgPSB0aGlzLl9lY01vZGVsO1xuICAgIHZhciBhcGkgPSB0aGlzLl9hcGk7IC8vIFRyeSB0byBrZWVwIHRoZSB0b29sdGlwIHNob3cgd2hlbiByZWZyZXNoaW5nXG5cbiAgICBpZiAodGhpcy5fbGFzdFggIT0gbnVsbCAmJiB0aGlzLl9sYXN0WSAhPSBudWxsIC8vIFdoZW4gdXNlciBpcyB3aWxsaW5nIHRvIGNvbnRyb2wgdG9vbHRpcCB0b3RhbGx5IHVzaW5nIEFQSSxcbiAgICAvLyBzZWxmLm1hbnVhbGx5U2hvd1RpcCh7eCwgeX0pIG1pZ2h0IGNhdXNlIHRvb2x0aXAgaGlkZSxcbiAgICAvLyB3aGljaCBpcyBub3QgZXhwZWN0ZWQuXG4gICAgJiYgdG9vbHRpcE1vZGVsLmdldCgndHJpZ2dlck9uJykgIT09ICdub25lJykge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3JlZnJlc2hVcGRhdGVUaW1lb3V0KTtcbiAgICAgIHRoaXMuX3JlZnJlc2hVcGRhdGVUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFNob3cgdGlwIG5leHQgdGljayBhZnRlciBvdGhlciBjaGFydHMgYXJlIHJlbmRlcmVkXG4gICAgICAgIC8vIEluIGNhc2UgaGlnaGxpZ2h0IGFjdGlvbiBoYXMgd3JvbmcgcmVzdWx0XG4gICAgICAgIC8vIEZJWE1FXG4gICAgICAgIHNlbGYubWFudWFsbHlTaG93VGlwKHRvb2x0aXBNb2RlbCwgZWNNb2RlbCwgYXBpLCB7XG4gICAgICAgICAgeDogc2VsZi5fbGFzdFgsXG4gICAgICAgICAgeTogc2VsZi5fbGFzdFlcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNob3cgdGlwIG1hbnVhbGx5IGJ5XG4gICAqIGRpc3BhdGNoQWN0aW9uKHtcbiAgICogICAgIHR5cGU6ICdzaG93VGlwJyxcbiAgICogICAgIHg6IDEwLFxuICAgKiAgICAgeTogMTBcbiAgICogfSk7XG4gICAqIE9yXG4gICAqIGRpc3BhdGNoQWN0aW9uKHtcbiAgICogICAgICB0eXBlOiAnc2hvd1RpcCcsXG4gICAqICAgICAgc2VyaWVzSW5kZXg6IDAsXG4gICAqICAgICAgZGF0YUluZGV4IG9yIGRhdGFJbmRleEluc2lkZSBvciBuYW1lXG4gICAqIH0pO1xuICAgKlxuICAgKiAgVE9ETyBCYXRjaFxuICAgKi9cbiAgbWFudWFsbHlTaG93VGlwOiBmdW5jdGlvbiAodG9vbHRpcE1vZGVsLCBlY01vZGVsLCBhcGksIHBheWxvYWQpIHtcbiAgICBpZiAocGF5bG9hZC5mcm9tID09PSB0aGlzLnVpZCB8fCBlbnYubm9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkaXNwYXRjaEFjdGlvbiA9IG1ha2VEaXNwYXRjaEFjdGlvbihwYXlsb2FkLCBhcGkpOyAvLyBSZXNldCB0aWNrZXRcblxuICAgIHRoaXMuX3RpY2tldCA9ICcnOyAvLyBXaGVuIHRyaWdnZXJlZCBmcm9tIGF4aXNQb2ludGVyLlxuXG4gICAgdmFyIGRhdGFCeUNvb3JkU3lzID0gcGF5bG9hZC5kYXRhQnlDb29yZFN5cztcblxuICAgIGlmIChwYXlsb2FkLnRvb2x0aXAgJiYgcGF5bG9hZC54ICE9IG51bGwgJiYgcGF5bG9hZC55ICE9IG51bGwpIHtcbiAgICAgIHZhciBlbCA9IHByb3h5UmVjdDtcbiAgICAgIGVsLnBvc2l0aW9uID0gW3BheWxvYWQueCwgcGF5bG9hZC55XTtcbiAgICAgIGVsLnVwZGF0ZSgpO1xuICAgICAgZWwudG9vbHRpcCA9IHBheWxvYWQudG9vbHRpcDsgLy8gTWFudWFsbHkgc2hvdyB0b29sdGlwIHdoaWxlIHZpZXcgaXMgbm90IHVzaW5nIHpyZW5kZXIgZWxlbWVudHMuXG5cbiAgICAgIHRoaXMuX3RyeVNob3coe1xuICAgICAgICBvZmZzZXRYOiBwYXlsb2FkLngsXG4gICAgICAgIG9mZnNldFk6IHBheWxvYWQueSxcbiAgICAgICAgdGFyZ2V0OiBlbFxuICAgICAgfSwgZGlzcGF0Y2hBY3Rpb24pO1xuICAgIH0gZWxzZSBpZiAoZGF0YUJ5Q29vcmRTeXMpIHtcbiAgICAgIHRoaXMuX3RyeVNob3coe1xuICAgICAgICBvZmZzZXRYOiBwYXlsb2FkLngsXG4gICAgICAgIG9mZnNldFk6IHBheWxvYWQueSxcbiAgICAgICAgcG9zaXRpb246IHBheWxvYWQucG9zaXRpb24sXG4gICAgICAgIGV2ZW50OiB7fSxcbiAgICAgICAgZGF0YUJ5Q29vcmRTeXM6IHBheWxvYWQuZGF0YUJ5Q29vcmRTeXMsXG4gICAgICAgIHRvb2x0aXBPcHRpb246IHBheWxvYWQudG9vbHRpcE9wdGlvblxuICAgICAgfSwgZGlzcGF0Y2hBY3Rpb24pO1xuICAgIH0gZWxzZSBpZiAocGF5bG9hZC5zZXJpZXNJbmRleCAhPSBudWxsKSB7XG4gICAgICBpZiAodGhpcy5fbWFudWFsbHlBeGlzU2hvd1RpcCh0b29sdGlwTW9kZWwsIGVjTW9kZWwsIGFwaSwgcGF5bG9hZCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9pbnRJbmZvID0gZmluZFBvaW50RnJvbVNlcmllcyhwYXlsb2FkLCBlY01vZGVsKTtcbiAgICAgIHZhciBjeCA9IHBvaW50SW5mby5wb2ludFswXTtcbiAgICAgIHZhciBjeSA9IHBvaW50SW5mby5wb2ludFsxXTtcblxuICAgICAgaWYgKGN4ICE9IG51bGwgJiYgY3kgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLl90cnlTaG93KHtcbiAgICAgICAgICBvZmZzZXRYOiBjeCxcbiAgICAgICAgICBvZmZzZXRZOiBjeSxcbiAgICAgICAgICBwb3NpdGlvbjogcGF5bG9hZC5wb3NpdGlvbixcbiAgICAgICAgICB0YXJnZXQ6IHBvaW50SW5mby5lbCxcbiAgICAgICAgICBldmVudDoge31cbiAgICAgICAgfSwgZGlzcGF0Y2hBY3Rpb24pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGF5bG9hZC54ICE9IG51bGwgJiYgcGF5bG9hZC55ICE9IG51bGwpIHtcbiAgICAgIC8vIEZJWE1FXG4gICAgICAvLyBzaG91bGQgd3JhcCBkaXNwYXRjaEFjdGlvbiBsaWtlIGBheGlzUG9pbnRlci9nbG9iYWxMaXN0ZW5lcmAgP1xuICAgICAgYXBpLmRpc3BhdGNoQWN0aW9uKHtcbiAgICAgICAgdHlwZTogJ3VwZGF0ZUF4aXNQb2ludGVyJyxcbiAgICAgICAgeDogcGF5bG9hZC54LFxuICAgICAgICB5OiBwYXlsb2FkLnlcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl90cnlTaG93KHtcbiAgICAgICAgb2Zmc2V0WDogcGF5bG9hZC54LFxuICAgICAgICBvZmZzZXRZOiBwYXlsb2FkLnksXG4gICAgICAgIHBvc2l0aW9uOiBwYXlsb2FkLnBvc2l0aW9uLFxuICAgICAgICB0YXJnZXQ6IGFwaS5nZXRacigpLmZpbmRIb3ZlcihwYXlsb2FkLngsIHBheWxvYWQueSkudGFyZ2V0LFxuICAgICAgICBldmVudDoge31cbiAgICAgIH0sIGRpc3BhdGNoQWN0aW9uKTtcbiAgICB9XG4gIH0sXG4gIG1hbnVhbGx5SGlkZVRpcDogZnVuY3Rpb24gKHRvb2x0aXBNb2RlbCwgZWNNb2RlbCwgYXBpLCBwYXlsb2FkKSB7XG4gICAgdmFyIHRvb2x0aXBDb250ZW50ID0gdGhpcy5fdG9vbHRpcENvbnRlbnQ7XG5cbiAgICBpZiAoIXRoaXMuX2Fsd2F5c1Nob3dDb250ZW50ICYmIHRoaXMuX3Rvb2x0aXBNb2RlbCkge1xuICAgICAgdG9vbHRpcENvbnRlbnQuaGlkZUxhdGVyKHRoaXMuX3Rvb2x0aXBNb2RlbC5nZXQoJ2hpZGVEZWxheScpKTtcbiAgICB9XG5cbiAgICB0aGlzLl9sYXN0WCA9IHRoaXMuX2xhc3RZID0gbnVsbDtcblxuICAgIGlmIChwYXlsb2FkLmZyb20gIT09IHRoaXMudWlkKSB7XG4gICAgICB0aGlzLl9oaWRlKG1ha2VEaXNwYXRjaEFjdGlvbihwYXlsb2FkLCBhcGkpKTtcbiAgICB9XG4gIH0sXG4gIC8vIEJlIGNvbXBhdGlibGUgd2l0aCBwcmV2aW91cyBkZXNpZ24sIHRoYXQgaXMsIHdoZW4gdG9vbHRpcC50eXBlIGlzICdheGlzJyBhbmRcbiAgLy8gZGlzcGF0Y2hBY3Rpb24gJ3Nob3dUaXAnIHdpdGggc2VyaWVzSW5kZXggYW5kIGRhdGFJbmRleCB3aWxsIHRyaWdnZXIgYXhpcyBwb2ludGVyXG4gIC8vIGFuZCB0b29sdGlwLlxuICBfbWFudWFsbHlBeGlzU2hvd1RpcDogZnVuY3Rpb24gKHRvb2x0aXBNb2RlbCwgZWNNb2RlbCwgYXBpLCBwYXlsb2FkKSB7XG4gICAgdmFyIHNlcmllc0luZGV4ID0gcGF5bG9hZC5zZXJpZXNJbmRleDtcbiAgICB2YXIgZGF0YUluZGV4ID0gcGF5bG9hZC5kYXRhSW5kZXg7XG4gICAgdmFyIGNvb3JkU3lzQXhlc0luZm8gPSBlY01vZGVsLmdldENvbXBvbmVudCgnYXhpc1BvaW50ZXInKS5jb29yZFN5c0F4ZXNJbmZvO1xuXG4gICAgaWYgKHNlcmllc0luZGV4ID09IG51bGwgfHwgZGF0YUluZGV4ID09IG51bGwgfHwgY29vcmRTeXNBeGVzSW5mbyA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNlcmllc01vZGVsID0gZWNNb2RlbC5nZXRTZXJpZXNCeUluZGV4KHNlcmllc0luZGV4KTtcblxuICAgIGlmICghc2VyaWVzTW9kZWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHNlcmllc01vZGVsLmdldERhdGEoKTtcbiAgICB2YXIgdG9vbHRpcE1vZGVsID0gYnVpbGRUb29sdGlwTW9kZWwoW2RhdGEuZ2V0SXRlbU1vZGVsKGRhdGFJbmRleCksIHNlcmllc01vZGVsLCAoc2VyaWVzTW9kZWwuY29vcmRpbmF0ZVN5c3RlbSB8fCB7fSkubW9kZWwsIHRvb2x0aXBNb2RlbF0pO1xuXG4gICAgaWYgKHRvb2x0aXBNb2RlbC5nZXQoJ3RyaWdnZXInKSAhPT0gJ2F4aXMnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXBpLmRpc3BhdGNoQWN0aW9uKHtcbiAgICAgIHR5cGU6ICd1cGRhdGVBeGlzUG9pbnRlcicsXG4gICAgICBzZXJpZXNJbmRleDogc2VyaWVzSW5kZXgsXG4gICAgICBkYXRhSW5kZXg6IGRhdGFJbmRleCxcbiAgICAgIHBvc2l0aW9uOiBwYXlsb2FkLnBvc2l0aW9uXG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIF90cnlTaG93OiBmdW5jdGlvbiAoZSwgZGlzcGF0Y2hBY3Rpb24pIHtcbiAgICB2YXIgZWwgPSBlLnRhcmdldDtcbiAgICB2YXIgdG9vbHRpcE1vZGVsID0gdGhpcy5fdG9vbHRpcE1vZGVsO1xuXG4gICAgaWYgKCF0b29sdGlwTW9kZWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFNhdmUgbW91c2UgeCwgbW91c2UgeS4gU28gd2UgY2FuIHRyeSB0byBrZWVwIHNob3dpbmcgdGhlIHRpcCBpZiBjaGFydCBpcyByZWZyZXNoZWRcblxuXG4gICAgdGhpcy5fbGFzdFggPSBlLm9mZnNldFg7XG4gICAgdGhpcy5fbGFzdFkgPSBlLm9mZnNldFk7XG4gICAgdmFyIGRhdGFCeUNvb3JkU3lzID0gZS5kYXRhQnlDb29yZFN5cztcblxuICAgIGlmIChkYXRhQnlDb29yZFN5cyAmJiBkYXRhQnlDb29yZFN5cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3Nob3dBeGlzVG9vbHRpcChkYXRhQnlDb29yZFN5cywgZSk7XG4gICAgfSAvLyBBbHdheXMgc2hvdyBpdGVtIHRvb2x0aXAgaWYgbW91c2UgaXMgb24gdGhlIGVsZW1lbnQgd2l0aCBkYXRhSW5kZXhcbiAgICBlbHNlIGlmIChlbCAmJiBlbC5kYXRhSW5kZXggIT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9sYXN0RGF0YUJ5Q29vcmRTeXMgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX3Nob3dTZXJpZXNJdGVtVG9vbHRpcChlLCBlbCwgZGlzcGF0Y2hBY3Rpb24pO1xuICAgICAgfSAvLyBUb29sdGlwIHByb3ZpZGVkIGRpcmVjdGx5LiBMaWtlIGxlZ2VuZC5cbiAgICAgIGVsc2UgaWYgKGVsICYmIGVsLnRvb2x0aXApIHtcbiAgICAgICAgICB0aGlzLl9sYXN0RGF0YUJ5Q29vcmRTeXMgPSBudWxsO1xuXG4gICAgICAgICAgdGhpcy5fc2hvd0NvbXBvbmVudEl0ZW1Ub29sdGlwKGUsIGVsLCBkaXNwYXRjaEFjdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fbGFzdERhdGFCeUNvb3JkU3lzID0gbnVsbDtcblxuICAgICAgICAgIHRoaXMuX2hpZGUoZGlzcGF0Y2hBY3Rpb24pO1xuICAgICAgICB9XG4gIH0sXG4gIF9zaG93T3JNb3ZlOiBmdW5jdGlvbiAodG9vbHRpcE1vZGVsLCBjYikge1xuICAgIC8vIHNob3dEZWxheSBpcyB1c2VkIGluIHRoaXMgY2FzZTogdG9vbHRpcC5lbnRlcmFibGUgaXMgc2V0XG4gICAgLy8gYXMgdHJ1ZS4gVXNlciBpbnRlbnQgdG8gbW92ZSBtb3VzZSBpbnRvIHRvb2x0aXAgYW5kIGNsaWNrXG4gICAgLy8gc29tZXRoaW5nLiBgc2hvd0RlbGF5YCBtYWtlcyBpdCBlYXN5ZXIgdG8gZW50ZXIgdGhlIGNvbnRlbnRcbiAgICAvLyBidXQgdG9vbHRpcCBkbyBub3QgbW92ZSBpbW1lZGlhdGVseS5cbiAgICB2YXIgZGVsYXkgPSB0b29sdGlwTW9kZWwuZ2V0KCdzaG93RGVsYXknKTtcbiAgICBjYiA9IHpyVXRpbC5iaW5kKGNiLCB0aGlzKTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5fc2hvd1RpbW91dCk7XG4gICAgZGVsYXkgPiAwID8gdGhpcy5fc2hvd1RpbW91dCA9IHNldFRpbWVvdXQoY2IsIGRlbGF5KSA6IGNiKCk7XG4gIH0sXG4gIF9zaG93QXhpc1Rvb2x0aXA6IGZ1bmN0aW9uIChkYXRhQnlDb29yZFN5cywgZSkge1xuICAgIHZhciBlY01vZGVsID0gdGhpcy5fZWNNb2RlbDtcbiAgICB2YXIgZ2xvYmFsVG9vbHRpcE1vZGVsID0gdGhpcy5fdG9vbHRpcE1vZGVsO1xuICAgIHZhciBwb2ludCA9IFtlLm9mZnNldFgsIGUub2Zmc2V0WV07XG4gICAgdmFyIHNpbmdsZURlZmF1bHRIVE1MID0gW107XG4gICAgdmFyIHNpbmdsZVBhcmFtc0xpc3QgPSBbXTtcbiAgICB2YXIgc2luZ2xlVG9vbHRpcE1vZGVsID0gYnVpbGRUb29sdGlwTW9kZWwoW2UudG9vbHRpcE9wdGlvbiwgZ2xvYmFsVG9vbHRpcE1vZGVsXSk7XG4gICAgZWFjaChkYXRhQnlDb29yZFN5cywgZnVuY3Rpb24gKGl0ZW1Db29yZFN5cykge1xuICAgICAgLy8gdmFyIGNvb3JkUGFyYW1MaXN0ID0gW107XG4gICAgICAvLyB2YXIgY29vcmREZWZhdWx0SFRNTCA9IFtdO1xuICAgICAgLy8gdmFyIGNvb3JkVG9vbHRpcE1vZGVsID0gYnVpbGRUb29sdGlwTW9kZWwoW1xuICAgICAgLy8gICAgIGUudG9vbHRpcE9wdGlvbixcbiAgICAgIC8vICAgICBpdGVtQ29vcmRTeXMudG9vbHRpcE9wdGlvbixcbiAgICAgIC8vICAgICBlY01vZGVsLmdldENvbXBvbmVudChpdGVtQ29vcmRTeXMuY29vcmRTeXNNYWluVHlwZSwgaXRlbUNvb3JkU3lzLmNvb3JkU3lzSW5kZXgpLFxuICAgICAgLy8gICAgIGdsb2JhbFRvb2x0aXBNb2RlbFxuICAgICAgLy8gXSk7XG4gICAgICAvLyB2YXIgZGlzcGxheU1vZGUgPSBjb29yZFRvb2x0aXBNb2RlbC5nZXQoJ2Rpc3BsYXlNb2RlJyk7XG4gICAgICAvLyB2YXIgcGFyYW1zTGlzdCA9IGRpc3BsYXlNb2RlID09PSAnc2luZ2xlJyA/IHNpbmdsZVBhcmFtc0xpc3QgOiBbXTtcbiAgICAgIGVhY2goaXRlbUNvb3JkU3lzLmRhdGFCeUF4aXMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHZhciBheGlzTW9kZWwgPSBlY01vZGVsLmdldENvbXBvbmVudChpdGVtLmF4aXNEaW0gKyAnQXhpcycsIGl0ZW0uYXhpc0luZGV4KTtcbiAgICAgICAgdmFyIGF4aXNWYWx1ZSA9IGl0ZW0udmFsdWU7XG4gICAgICAgIHZhciBzZXJpZXNEZWZhdWx0SFRNTCA9IFtdO1xuXG4gICAgICAgIGlmICghYXhpc01vZGVsIHx8IGF4aXNWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHZhbHVlTGFiZWwgPSBheGlzUG9pbnRlclZpZXdIZWxwZXIuZ2V0VmFsdWVMYWJlbChheGlzVmFsdWUsIGF4aXNNb2RlbC5heGlzLCBlY01vZGVsLCBpdGVtLnNlcmllc0RhdGFJbmRpY2VzLCBpdGVtLnZhbHVlTGFiZWxPcHQpO1xuICAgICAgICB6clV0aWwuZWFjaChpdGVtLnNlcmllc0RhdGFJbmRpY2VzLCBmdW5jdGlvbiAoaWR4SXRlbSkge1xuICAgICAgICAgIHZhciBzZXJpZXMgPSBlY01vZGVsLmdldFNlcmllc0J5SW5kZXgoaWR4SXRlbS5zZXJpZXNJbmRleCk7XG4gICAgICAgICAgdmFyIGRhdGFJbmRleCA9IGlkeEl0ZW0uZGF0YUluZGV4SW5zaWRlO1xuICAgICAgICAgIHZhciBkYXRhUGFyYW1zID0gc2VyaWVzICYmIHNlcmllcy5nZXREYXRhUGFyYW1zKGRhdGFJbmRleCk7XG4gICAgICAgICAgZGF0YVBhcmFtcy5heGlzRGltID0gaXRlbS5heGlzRGltO1xuICAgICAgICAgIGRhdGFQYXJhbXMuYXhpc0luZGV4ID0gaXRlbS5heGlzSW5kZXg7XG4gICAgICAgICAgZGF0YVBhcmFtcy5heGlzVHlwZSA9IGl0ZW0uYXhpc1R5cGU7XG4gICAgICAgICAgZGF0YVBhcmFtcy5heGlzSWQgPSBpdGVtLmF4aXNJZDtcbiAgICAgICAgICBkYXRhUGFyYW1zLmF4aXNWYWx1ZSA9IGF4aXNIZWxwZXIuZ2V0QXhpc1Jhd1ZhbHVlKGF4aXNNb2RlbC5heGlzLCBheGlzVmFsdWUpO1xuICAgICAgICAgIGRhdGFQYXJhbXMuYXhpc1ZhbHVlTGFiZWwgPSB2YWx1ZUxhYmVsO1xuXG4gICAgICAgICAgaWYgKGRhdGFQYXJhbXMpIHtcbiAgICAgICAgICAgIHNpbmdsZVBhcmFtc0xpc3QucHVzaChkYXRhUGFyYW1zKTtcbiAgICAgICAgICAgIHNlcmllc0RlZmF1bHRIVE1MLnB1c2goc2VyaWVzLmZvcm1hdFRvb2x0aXAoZGF0YUluZGV4LCB0cnVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTsgLy8gRGVmYXVsdCB0b29sdGlwIGNvbnRlbnRcbiAgICAgICAgLy8gRklYTUVcbiAgICAgICAgLy8gKDEpIHNob2xkIGJlIHRoZSBmaXJzdCBkYXRhIHdoaWNoIGhhcyBuYW1lP1xuICAgICAgICAvLyAoMikgdGhlbWVSaXZlciwgZmlyc3REYXRhSW5kZXggaXMgYXJyYXksIGFuZCBmaXJzdCBsaW5lIGlzIHVubmVjZXNzYXJ5LlxuXG4gICAgICAgIHZhciBmaXJzdExpbmUgPSB2YWx1ZUxhYmVsO1xuICAgICAgICBzaW5nbGVEZWZhdWx0SFRNTC5wdXNoKChmaXJzdExpbmUgPyBmb3JtYXRVdGlsLmVuY29kZUhUTUwoZmlyc3RMaW5lKSArICc8YnIgLz4nIDogJycpICsgc2VyaWVzRGVmYXVsdEhUTUwuam9pbignPGJyIC8+JykpO1xuICAgICAgfSk7XG4gICAgfSwgdGhpcyk7IC8vIEluIG1vc3QgY2FzZSwgdGhlIHNlY29uZCBheGlzIGlzIHNob3duIHVwcGVyIHRoYW4gdGhlIGZpcnN0IG9uZS5cblxuICAgIHNpbmdsZURlZmF1bHRIVE1MLnJldmVyc2UoKTtcbiAgICBzaW5nbGVEZWZhdWx0SFRNTCA9IHNpbmdsZURlZmF1bHRIVE1MLmpvaW4oJzxiciAvPjxiciAvPicpO1xuICAgIHZhciBwb3NpdGlvbkV4cHIgPSBlLnBvc2l0aW9uO1xuXG4gICAgdGhpcy5fc2hvd09yTW92ZShzaW5nbGVUb29sdGlwTW9kZWwsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLl91cGRhdGVDb250ZW50Tm90Q2hhbmdlZE9uQXhpcyhkYXRhQnlDb29yZFN5cykpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlUG9zaXRpb24oc2luZ2xlVG9vbHRpcE1vZGVsLCBwb3NpdGlvbkV4cHIsIHBvaW50WzBdLCBwb2ludFsxXSwgdGhpcy5fdG9vbHRpcENvbnRlbnQsIHNpbmdsZVBhcmFtc0xpc3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2hvd1Rvb2x0aXBDb250ZW50KHNpbmdsZVRvb2x0aXBNb2RlbCwgc2luZ2xlRGVmYXVsdEhUTUwsIHNpbmdsZVBhcmFtc0xpc3QsIE1hdGgucmFuZG9tKCksIHBvaW50WzBdLCBwb2ludFsxXSwgcG9zaXRpb25FeHByKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gRG8gbm90IHRyaWdnZXIgZXZlbnRzIGhlcmUsIGJlY2F1c2UgdGhpcyBicmFuY2ggb25seSBiZSBlbnRlcmVkXG4gICAgLy8gZnJvbSBkaXNwYXRjaEFjdGlvbi5cblxuICB9LFxuICBfc2hvd1Nlcmllc0l0ZW1Ub29sdGlwOiBmdW5jdGlvbiAoZSwgZWwsIGRpc3BhdGNoQWN0aW9uKSB7XG4gICAgdmFyIGVjTW9kZWwgPSB0aGlzLl9lY01vZGVsOyAvLyBVc2UgZGF0YU1vZGVsIGluIGVsZW1lbnQgaWYgcG9zc2libGVcbiAgICAvLyBVc2VkIHdoZW4gbW91c2VvdmVyIG9uIGEgZWxlbWVudCBsaWtlIG1hcmtQb2ludCBvciBlZGdlXG4gICAgLy8gSW4gd2hpY2ggY2FzZSwgdGhlIGRhdGEgaXMgbm90IG1haW4gZGF0YSBpbiBzZXJpZXMuXG5cbiAgICB2YXIgc2VyaWVzSW5kZXggPSBlbC5zZXJpZXNJbmRleDtcbiAgICB2YXIgc2VyaWVzTW9kZWwgPSBlY01vZGVsLmdldFNlcmllc0J5SW5kZXgoc2VyaWVzSW5kZXgpOyAvLyBGb3IgZXhhbXBsZSwgZ3JhcGggbGluay5cblxuICAgIHZhciBkYXRhTW9kZWwgPSBlbC5kYXRhTW9kZWwgfHwgc2VyaWVzTW9kZWw7XG4gICAgdmFyIGRhdGFJbmRleCA9IGVsLmRhdGFJbmRleDtcbiAgICB2YXIgZGF0YVR5cGUgPSBlbC5kYXRhVHlwZTtcbiAgICB2YXIgZGF0YSA9IGRhdGFNb2RlbC5nZXREYXRhKCk7XG4gICAgdmFyIHRvb2x0aXBNb2RlbCA9IGJ1aWxkVG9vbHRpcE1vZGVsKFtkYXRhLmdldEl0ZW1Nb2RlbChkYXRhSW5kZXgpLCBkYXRhTW9kZWwsIHNlcmllc01vZGVsICYmIChzZXJpZXNNb2RlbC5jb29yZGluYXRlU3lzdGVtIHx8IHt9KS5tb2RlbCwgdGhpcy5fdG9vbHRpcE1vZGVsXSk7XG4gICAgdmFyIHRvb2x0aXBUcmlnZ2VyID0gdG9vbHRpcE1vZGVsLmdldCgndHJpZ2dlcicpO1xuXG4gICAgaWYgKHRvb2x0aXBUcmlnZ2VyICE9IG51bGwgJiYgdG9vbHRpcFRyaWdnZXIgIT09ICdpdGVtJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwYXJhbXMgPSBkYXRhTW9kZWwuZ2V0RGF0YVBhcmFtcyhkYXRhSW5kZXgsIGRhdGFUeXBlKTtcbiAgICB2YXIgZGVmYXVsdEh0bWwgPSBkYXRhTW9kZWwuZm9ybWF0VG9vbHRpcChkYXRhSW5kZXgsIGZhbHNlLCBkYXRhVHlwZSk7XG4gICAgdmFyIGFzeW5jVGlja2V0ID0gJ2l0ZW1fJyArIGRhdGFNb2RlbC5uYW1lICsgJ18nICsgZGF0YUluZGV4O1xuXG4gICAgdGhpcy5fc2hvd09yTW92ZSh0b29sdGlwTW9kZWwsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX3Nob3dUb29sdGlwQ29udGVudCh0b29sdGlwTW9kZWwsIGRlZmF1bHRIdG1sLCBwYXJhbXMsIGFzeW5jVGlja2V0LCBlLm9mZnNldFgsIGUub2Zmc2V0WSwgZS5wb3NpdGlvbiwgZS50YXJnZXQpO1xuICAgIH0pOyAvLyBGSVhNRVxuICAgIC8vIGR1cGxpY2F0ZWQgc2hvd3RpcCBpZiBtYW51YWxseVNob3dUaXAgaXMgY2FsbGVkIGZyb20gZGlzcGF0Y2hBY3Rpb24uXG5cblxuICAgIGRpc3BhdGNoQWN0aW9uKHtcbiAgICAgIHR5cGU6ICdzaG93VGlwJyxcbiAgICAgIGRhdGFJbmRleEluc2lkZTogZGF0YUluZGV4LFxuICAgICAgZGF0YUluZGV4OiBkYXRhLmdldFJhd0luZGV4KGRhdGFJbmRleCksXG4gICAgICBzZXJpZXNJbmRleDogc2VyaWVzSW5kZXgsXG4gICAgICBmcm9tOiB0aGlzLnVpZFxuICAgIH0pO1xuICB9LFxuICBfc2hvd0NvbXBvbmVudEl0ZW1Ub29sdGlwOiBmdW5jdGlvbiAoZSwgZWwsIGRpc3BhdGNoQWN0aW9uKSB7XG4gICAgdmFyIHRvb2x0aXBPcHQgPSBlbC50b29sdGlwO1xuXG4gICAgaWYgKHR5cGVvZiB0b29sdGlwT3B0ID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIGNvbnRlbnQgPSB0b29sdGlwT3B0O1xuICAgICAgdG9vbHRpcE9wdCA9IHtcbiAgICAgICAgY29udGVudDogY29udGVudCxcbiAgICAgICAgLy8gRml4ZWQgZm9ybWF0dGVyXG4gICAgICAgIGZvcm1hdHRlcjogY29udGVudFxuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgc3ViVG9vbHRpcE1vZGVsID0gbmV3IE1vZGVsKHRvb2x0aXBPcHQsIHRoaXMuX3Rvb2x0aXBNb2RlbCwgdGhpcy5fZWNNb2RlbCk7XG4gICAgdmFyIGRlZmF1bHRIdG1sID0gc3ViVG9vbHRpcE1vZGVsLmdldCgnY29udGVudCcpO1xuICAgIHZhciBhc3luY1RpY2tldCA9IE1hdGgucmFuZG9tKCk7IC8vIERvIG5vdCBjaGVjayB3aGV0aGVyIGB0cmlnZ2VyYCBpcyAnbm9uZScgaGVyZSwgYmVjYXVzZSBgdHJpZ2dlcmBcbiAgICAvLyBvbmx5IHdvcmtzIG9uIGNvb3JpZGluYXRlIHN5c3RlbS4gSW4gZmFjdCwgd2UgaGF2ZSBub3QgZm91bmQgY2FzZVxuICAgIC8vIHRoYXQgcmVxdWlyZXMgc2V0dGluZyBgdHJpZ2dlcmAgbm90aGluZyBvbiBjb21wb25lbnQgeWV0LlxuXG4gICAgdGhpcy5fc2hvd09yTW92ZShzdWJUb29sdGlwTW9kZWwsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX3Nob3dUb29sdGlwQ29udGVudChzdWJUb29sdGlwTW9kZWwsIGRlZmF1bHRIdG1sLCBzdWJUb29sdGlwTW9kZWwuZ2V0KCdmb3JtYXR0ZXJQYXJhbXMnKSB8fCB7fSwgYXN5bmNUaWNrZXQsIGUub2Zmc2V0WCwgZS5vZmZzZXRZLCBlLnBvc2l0aW9uLCBlbCk7XG4gICAgfSk7IC8vIElmIG5vdCBkaXNwYXRjaCBzaG93VGlwLCB0aXAgbWF5IGJlIGhpZGUgdHJpZ2dlcmVkIGJ5IGF4aXMuXG5cblxuICAgIGRpc3BhdGNoQWN0aW9uKHtcbiAgICAgIHR5cGU6ICdzaG93VGlwJyxcbiAgICAgIGZyb206IHRoaXMudWlkXG4gICAgfSk7XG4gIH0sXG4gIF9zaG93VG9vbHRpcENvbnRlbnQ6IGZ1bmN0aW9uICh0b29sdGlwTW9kZWwsIGRlZmF1bHRIdG1sLCBwYXJhbXMsIGFzeW5jVGlja2V0LCB4LCB5LCBwb3NpdGlvbkV4cHIsIGVsKSB7XG4gICAgLy8gUmVzZXQgdGlja2V0XG4gICAgdGhpcy5fdGlja2V0ID0gJyc7XG5cbiAgICBpZiAoIXRvb2x0aXBNb2RlbC5nZXQoJ3Nob3dDb250ZW50JykgfHwgIXRvb2x0aXBNb2RlbC5nZXQoJ3Nob3cnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0b29sdGlwQ29udGVudCA9IHRoaXMuX3Rvb2x0aXBDb250ZW50O1xuICAgIHZhciBmb3JtYXR0ZXIgPSB0b29sdGlwTW9kZWwuZ2V0KCdmb3JtYXR0ZXInKTtcbiAgICBwb3NpdGlvbkV4cHIgPSBwb3NpdGlvbkV4cHIgfHwgdG9vbHRpcE1vZGVsLmdldCgncG9zaXRpb24nKTtcbiAgICB2YXIgaHRtbCA9IGRlZmF1bHRIdG1sO1xuXG4gICAgaWYgKGZvcm1hdHRlciAmJiB0eXBlb2YgZm9ybWF0dGVyID09PSAnc3RyaW5nJykge1xuICAgICAgaHRtbCA9IGZvcm1hdFV0aWwuZm9ybWF0VHBsKGZvcm1hdHRlciwgcGFyYW1zLCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBmb3JtYXR0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciBjYWxsYmFjayA9IGJpbmQoZnVuY3Rpb24gKGNiVGlja2V0LCBodG1sKSB7XG4gICAgICAgIGlmIChjYlRpY2tldCA9PT0gdGhpcy5fdGlja2V0KSB7XG4gICAgICAgICAgdG9vbHRpcENvbnRlbnQuc2V0Q29udGVudChodG1sKTtcblxuICAgICAgICAgIHRoaXMuX3VwZGF0ZVBvc2l0aW9uKHRvb2x0aXBNb2RlbCwgcG9zaXRpb25FeHByLCB4LCB5LCB0b29sdGlwQ29udGVudCwgcGFyYW1zLCBlbCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpO1xuICAgICAgdGhpcy5fdGlja2V0ID0gYXN5bmNUaWNrZXQ7XG4gICAgICBodG1sID0gZm9ybWF0dGVyKHBhcmFtcywgYXN5bmNUaWNrZXQsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICB0b29sdGlwQ29udGVudC5zZXRDb250ZW50KGh0bWwpO1xuICAgIHRvb2x0aXBDb250ZW50LnNob3codG9vbHRpcE1vZGVsKTtcblxuICAgIHRoaXMuX3VwZGF0ZVBvc2l0aW9uKHRvb2x0aXBNb2RlbCwgcG9zaXRpb25FeHByLCB4LCB5LCB0b29sdGlwQ29udGVudCwgcGFyYW1zLCBlbCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSAge3N0cmluZ3xGdW5jdGlvbnxBcnJheS48bnVtYmVyPnxPYmplY3R9IHBvc2l0aW9uRXhwclxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IHggTW91c2UgeFxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IHkgTW91c2UgeVxuICAgKiBAcGFyYW0gIHtib29sZWFufSBjb25maW5lIFdoZXRoZXIgY29uZmluZSB0b29sdGlwIGNvbnRlbnQgaW4gdmlldyByZWN0LlxuICAgKiBAcGFyYW0gIHtPYmplY3R8PEFycmF5LjxPYmplY3Q+fSBwYXJhbXNcbiAgICogQHBhcmFtICB7bW9kdWxlOnpyZW5kZXIvRWxlbWVudH0gZWwgdGFyZ2V0IGVsZW1lbnRcbiAgICogQHBhcmFtICB7bW9kdWxlOmVjaGFydHMvRXh0ZW5zaW9uQVBJfSBhcGlcbiAgICogQHJldHVybiB7QXJyYXkuPG51bWJlcj59XG4gICAqL1xuICBfdXBkYXRlUG9zaXRpb246IGZ1bmN0aW9uICh0b29sdGlwTW9kZWwsIHBvc2l0aW9uRXhwciwgeCwgeSwgY29udGVudCwgcGFyYW1zLCBlbCkge1xuICAgIHZhciB2aWV3V2lkdGggPSB0aGlzLl9hcGkuZ2V0V2lkdGgoKTtcblxuICAgIHZhciB2aWV3SGVpZ2h0ID0gdGhpcy5fYXBpLmdldEhlaWdodCgpO1xuXG4gICAgcG9zaXRpb25FeHByID0gcG9zaXRpb25FeHByIHx8IHRvb2x0aXBNb2RlbC5nZXQoJ3Bvc2l0aW9uJyk7XG4gICAgdmFyIGNvbnRlbnRTaXplID0gY29udGVudC5nZXRTaXplKCk7XG4gICAgdmFyIGFsaWduID0gdG9vbHRpcE1vZGVsLmdldCgnYWxpZ24nKTtcbiAgICB2YXIgdkFsaWduID0gdG9vbHRpcE1vZGVsLmdldCgndmVydGljYWxBbGlnbicpO1xuICAgIHZhciByZWN0ID0gZWwgJiYgZWwuZ2V0Qm91bmRpbmdSZWN0KCkuY2xvbmUoKTtcbiAgICBlbCAmJiByZWN0LmFwcGx5VHJhbnNmb3JtKGVsLnRyYW5zZm9ybSk7XG5cbiAgICBpZiAodHlwZW9mIHBvc2l0aW9uRXhwciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQ2FsbGJhY2sgb2YgcG9zaXRpb24gY2FuIGJlIGFuIGFycmF5IG9yIGEgc3RyaW5nIHNwZWNpZnkgdGhlIHBvc2l0aW9uXG4gICAgICBwb3NpdGlvbkV4cHIgPSBwb3NpdGlvbkV4cHIoW3gsIHldLCBwYXJhbXMsIGNvbnRlbnQuZWwsIHJlY3QsIHtcbiAgICAgICAgdmlld1NpemU6IFt2aWV3V2lkdGgsIHZpZXdIZWlnaHRdLFxuICAgICAgICBjb250ZW50U2l6ZTogY29udGVudFNpemUuc2xpY2UoKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHpyVXRpbC5pc0FycmF5KHBvc2l0aW9uRXhwcikpIHtcbiAgICAgIHggPSBwYXJzZVBlcmNlbnQocG9zaXRpb25FeHByWzBdLCB2aWV3V2lkdGgpO1xuICAgICAgeSA9IHBhcnNlUGVyY2VudChwb3NpdGlvbkV4cHJbMV0sIHZpZXdIZWlnaHQpO1xuICAgIH0gZWxzZSBpZiAoenJVdGlsLmlzT2JqZWN0KHBvc2l0aW9uRXhwcikpIHtcbiAgICAgIHBvc2l0aW9uRXhwci53aWR0aCA9IGNvbnRlbnRTaXplWzBdO1xuICAgICAgcG9zaXRpb25FeHByLmhlaWdodCA9IGNvbnRlbnRTaXplWzFdO1xuICAgICAgdmFyIGxheW91dFJlY3QgPSBsYXlvdXRVdGlsLmdldExheW91dFJlY3QocG9zaXRpb25FeHByLCB7XG4gICAgICAgIHdpZHRoOiB2aWV3V2lkdGgsXG4gICAgICAgIGhlaWdodDogdmlld0hlaWdodFxuICAgICAgfSk7XG4gICAgICB4ID0gbGF5b3V0UmVjdC54O1xuICAgICAgeSA9IGxheW91dFJlY3QueTtcbiAgICAgIGFsaWduID0gbnVsbDsgLy8gV2hlbiBwb3NpdGlvbkV4cHIgaXMgbGVmdC90b3AvcmlnaHQvYm90dG9tLFxuICAgICAgLy8gYWxpZ24gYW5kIHZlcnRpY2FsQWxpZ24gd2lsbCBub3Qgd29yay5cblxuICAgICAgdkFsaWduID0gbnVsbDtcbiAgICB9IC8vIFNwZWNpZnkgdG9vbHRpcCBwb3NpdGlvbiBieSBzdHJpbmcgJ3RvcCcgJ2JvdHRvbScgJ2xlZnQnICdyaWdodCcgYXJvdW5kIGdyYXBoaWMgZWxlbWVudFxuICAgIGVsc2UgaWYgKHR5cGVvZiBwb3NpdGlvbkV4cHIgPT09ICdzdHJpbmcnICYmIGVsKSB7XG4gICAgICAgIHZhciBwb3MgPSBjYWxjVG9vbHRpcFBvc2l0aW9uKHBvc2l0aW9uRXhwciwgcmVjdCwgY29udGVudFNpemUpO1xuICAgICAgICB4ID0gcG9zWzBdO1xuICAgICAgICB5ID0gcG9zWzFdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHBvcyA9IHJlZml4VG9vbHRpcFBvc2l0aW9uKHgsIHksIGNvbnRlbnQuZWwsIHZpZXdXaWR0aCwgdmlld0hlaWdodCwgYWxpZ24gPyBudWxsIDogMjAsIHZBbGlnbiA/IG51bGwgOiAyMCk7XG4gICAgICAgIHggPSBwb3NbMF07XG4gICAgICAgIHkgPSBwb3NbMV07XG4gICAgICB9XG5cbiAgICBhbGlnbiAmJiAoeCAtPSBpc0NlbnRlckFsaWduKGFsaWduKSA/IGNvbnRlbnRTaXplWzBdIC8gMiA6IGFsaWduID09PSAncmlnaHQnID8gY29udGVudFNpemVbMF0gOiAwKTtcbiAgICB2QWxpZ24gJiYgKHkgLT0gaXNDZW50ZXJBbGlnbih2QWxpZ24pID8gY29udGVudFNpemVbMV0gLyAyIDogdkFsaWduID09PSAnYm90dG9tJyA/IGNvbnRlbnRTaXplWzFdIDogMCk7XG5cbiAgICBpZiAodG9vbHRpcE1vZGVsLmdldCgnY29uZmluZScpKSB7XG4gICAgICB2YXIgcG9zID0gY29uZmluZVRvb2x0aXBQb3NpdGlvbih4LCB5LCBjb250ZW50LmVsLCB2aWV3V2lkdGgsIHZpZXdIZWlnaHQpO1xuICAgICAgeCA9IHBvc1swXTtcbiAgICAgIHkgPSBwb3NbMV07XG4gICAgfVxuXG4gICAgY29udGVudC5tb3ZlVG8oeCwgeSk7XG4gIH0sXG4gIC8vIEZJWE1FXG4gIC8vIFNob3VsZCB3ZSByZW1vdmUgdGhpcyBidXQgbGVhdmUgdGhpcyB0byB1c2VyP1xuICBfdXBkYXRlQ29udGVudE5vdENoYW5nZWRPbkF4aXM6IGZ1bmN0aW9uIChkYXRhQnlDb29yZFN5cykge1xuICAgIHZhciBsYXN0Q29vcmRTeXMgPSB0aGlzLl9sYXN0RGF0YUJ5Q29vcmRTeXM7XG4gICAgdmFyIGNvbnRlbnROb3RDaGFuZ2VkID0gISFsYXN0Q29vcmRTeXMgJiYgbGFzdENvb3JkU3lzLmxlbmd0aCA9PT0gZGF0YUJ5Q29vcmRTeXMubGVuZ3RoO1xuICAgIGNvbnRlbnROb3RDaGFuZ2VkICYmIGVhY2gobGFzdENvb3JkU3lzLCBmdW5jdGlvbiAobGFzdEl0ZW1Db29yZFN5cywgaW5kZXhDb29yZFN5cykge1xuICAgICAgdmFyIGxhc3REYXRhQnlBeGlzID0gbGFzdEl0ZW1Db29yZFN5cy5kYXRhQnlBeGlzIHx8IHt9O1xuICAgICAgdmFyIHRoaXNJdGVtQ29vcmRTeXMgPSBkYXRhQnlDb29yZFN5c1tpbmRleENvb3JkU3lzXSB8fCB7fTtcbiAgICAgIHZhciB0aGlzRGF0YUJ5QXhpcyA9IHRoaXNJdGVtQ29vcmRTeXMuZGF0YUJ5QXhpcyB8fCBbXTtcbiAgICAgIGNvbnRlbnROb3RDaGFuZ2VkICY9IGxhc3REYXRhQnlBeGlzLmxlbmd0aCA9PT0gdGhpc0RhdGFCeUF4aXMubGVuZ3RoO1xuICAgICAgY29udGVudE5vdENoYW5nZWQgJiYgZWFjaChsYXN0RGF0YUJ5QXhpcywgZnVuY3Rpb24gKGxhc3RJdGVtLCBpbmRleEF4aXMpIHtcbiAgICAgICAgdmFyIHRoaXNJdGVtID0gdGhpc0RhdGFCeUF4aXNbaW5kZXhBeGlzXSB8fCB7fTtcbiAgICAgICAgdmFyIGxhc3RJbmRpY2VzID0gbGFzdEl0ZW0uc2VyaWVzRGF0YUluZGljZXMgfHwgW107XG4gICAgICAgIHZhciBuZXdJbmRpY2VzID0gdGhpc0l0ZW0uc2VyaWVzRGF0YUluZGljZXMgfHwgW107XG4gICAgICAgIGNvbnRlbnROb3RDaGFuZ2VkICY9IGxhc3RJdGVtLnZhbHVlID09PSB0aGlzSXRlbS52YWx1ZSAmJiBsYXN0SXRlbS5heGlzVHlwZSA9PT0gdGhpc0l0ZW0uYXhpc1R5cGUgJiYgbGFzdEl0ZW0uYXhpc0lkID09PSB0aGlzSXRlbS5heGlzSWQgJiYgbGFzdEluZGljZXMubGVuZ3RoID09PSBuZXdJbmRpY2VzLmxlbmd0aDtcbiAgICAgICAgY29udGVudE5vdENoYW5nZWQgJiYgZWFjaChsYXN0SW5kaWNlcywgZnVuY3Rpb24gKGxhc3RJZHhJdGVtLCBqKSB7XG4gICAgICAgICAgdmFyIG5ld0lkeEl0ZW0gPSBuZXdJbmRpY2VzW2pdO1xuICAgICAgICAgIGNvbnRlbnROb3RDaGFuZ2VkICY9IGxhc3RJZHhJdGVtLnNlcmllc0luZGV4ID09PSBuZXdJZHhJdGVtLnNlcmllc0luZGV4ICYmIGxhc3RJZHhJdGVtLmRhdGFJbmRleCA9PT0gbmV3SWR4SXRlbS5kYXRhSW5kZXg7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5fbGFzdERhdGFCeUNvb3JkU3lzID0gZGF0YUJ5Q29vcmRTeXM7XG4gICAgcmV0dXJuICEhY29udGVudE5vdENoYW5nZWQ7XG4gIH0sXG4gIF9oaWRlOiBmdW5jdGlvbiAoZGlzcGF0Y2hBY3Rpb24pIHtcbiAgICAvLyBEbyBub3QgZGlyZWN0bHkgaGlkZUxhdGVyIGhlcmUsIGJlY2F1c2UgdGhpcyBiZWhhdmlvciBtYXkgYmUgcHJldmVudGVkXG4gICAgLy8gaW4gZGlzcGF0Y2hBY3Rpb24gd2hlbiBzaG93VGlwIGlzIGRpc3BhdGNoZWQuXG4gICAgLy8gRklYTUVcbiAgICAvLyBkdXBsaWNhdGVkIGhpZGVUaXAgaWYgbWFudWFsbHlIaWRlVGlwIGlzIGNhbGxlZCBmcm9tIGRpc3BhdGNoQWN0aW9uLlxuICAgIHRoaXMuX2xhc3REYXRhQnlDb29yZFN5cyA9IG51bGw7XG4gICAgZGlzcGF0Y2hBY3Rpb24oe1xuICAgICAgdHlwZTogJ2hpZGVUaXAnLFxuICAgICAgZnJvbTogdGhpcy51aWRcbiAgICB9KTtcbiAgfSxcbiAgZGlzcG9zZTogZnVuY3Rpb24gKGVjTW9kZWwsIGFwaSkge1xuICAgIGlmIChlbnYubm9kZSB8fCBlbnYud3hhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fdG9vbHRpcENvbnRlbnQuaGlkZSgpO1xuXG4gICAgZ2xvYmFsTGlzdGVuZXIudW5yZWdpc3RlcignaXRlbVRvb2x0aXAnLCBhcGkpO1xuICB9XG59KTtcbi8qKlxuICogQHBhcmFtIHtBcnJheS48T2JqZWN0fG1vZHVsZTplY2hhcnRzL21vZGVsL01vZGVsPn0gbW9kZWxDYXNjYWRlXG4gKiBGcm9tIHRvcCB0byBib3R0b20uICh0aGUgbGFzdCBvbmUgc2hvdWxkIGJlIGdsb2JhbFRvb2x0aXBNb2RlbCk7XG4gKi9cblxuXG5mdW5jdGlvbiBidWlsZFRvb2x0aXBNb2RlbChtb2RlbENhc2NhZGUpIHtcbiAgdmFyIHJlc3VsdE1vZGVsID0gbW9kZWxDYXNjYWRlLnBvcCgpO1xuXG4gIHdoaWxlIChtb2RlbENhc2NhZGUubGVuZ3RoKSB7XG4gICAgdmFyIHRvb2x0aXBPcHQgPSBtb2RlbENhc2NhZGUucG9wKCk7XG5cbiAgICBpZiAodG9vbHRpcE9wdCkge1xuICAgICAgaWYgKE1vZGVsLmlzSW5zdGFuY2UodG9vbHRpcE9wdCkpIHtcbiAgICAgICAgdG9vbHRpcE9wdCA9IHRvb2x0aXBPcHQuZ2V0KCd0b29sdGlwJywgdHJ1ZSk7XG4gICAgICB9IC8vIEluIGVhY2ggZGF0YSBpdGVtIHRvb2x0aXAgY2FuIGJlIHNpbXBseSB3cml0ZTpcbiAgICAgIC8vIHtcbiAgICAgIC8vICB2YWx1ZTogMTAsXG4gICAgICAvLyAgdG9vbHRpcDogJ1NvbWV0aGluZyB5b3UgbmVlZCB0byBrbm93J1xuICAgICAgLy8gfVxuXG5cbiAgICAgIGlmICh0eXBlb2YgdG9vbHRpcE9wdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdG9vbHRpcE9wdCA9IHtcbiAgICAgICAgICBmb3JtYXR0ZXI6IHRvb2x0aXBPcHRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0TW9kZWwgPSBuZXcgTW9kZWwodG9vbHRpcE9wdCwgcmVzdWx0TW9kZWwsIHJlc3VsdE1vZGVsLmVjTW9kZWwpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHRNb2RlbDtcbn1cblxuZnVuY3Rpb24gbWFrZURpc3BhdGNoQWN0aW9uKHBheWxvYWQsIGFwaSkge1xuICByZXR1cm4gcGF5bG9hZC5kaXNwYXRjaEFjdGlvbiB8fCB6clV0aWwuYmluZChhcGkuZGlzcGF0Y2hBY3Rpb24sIGFwaSk7XG59XG5cbmZ1bmN0aW9uIHJlZml4VG9vbHRpcFBvc2l0aW9uKHgsIHksIGVsLCB2aWV3V2lkdGgsIHZpZXdIZWlnaHQsIGdhcEgsIGdhcFYpIHtcbiAgdmFyIHNpemUgPSBnZXRPdXRlclNpemUoZWwpO1xuICB2YXIgd2lkdGggPSBzaXplLndpZHRoO1xuICB2YXIgaGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG5cbiAgaWYgKGdhcEggIT0gbnVsbCkge1xuICAgIGlmICh4ICsgd2lkdGggKyBnYXBIID4gdmlld1dpZHRoKSB7XG4gICAgICB4IC09IHdpZHRoICsgZ2FwSDtcbiAgICB9IGVsc2Uge1xuICAgICAgeCArPSBnYXBIO1xuICAgIH1cbiAgfVxuXG4gIGlmIChnYXBWICE9IG51bGwpIHtcbiAgICBpZiAoeSArIGhlaWdodCArIGdhcFYgPiB2aWV3SGVpZ2h0KSB7XG4gICAgICB5IC09IGhlaWdodCArIGdhcFY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgKz0gZ2FwVjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gW3gsIHldO1xufVxuXG5mdW5jdGlvbiBjb25maW5lVG9vbHRpcFBvc2l0aW9uKHgsIHksIGVsLCB2aWV3V2lkdGgsIHZpZXdIZWlnaHQpIHtcbiAgdmFyIHNpemUgPSBnZXRPdXRlclNpemUoZWwpO1xuICB2YXIgd2lkdGggPSBzaXplLndpZHRoO1xuICB2YXIgaGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG4gIHggPSBNYXRoLm1pbih4ICsgd2lkdGgsIHZpZXdXaWR0aCkgLSB3aWR0aDtcbiAgeSA9IE1hdGgubWluKHkgKyBoZWlnaHQsIHZpZXdIZWlnaHQpIC0gaGVpZ2h0O1xuICB4ID0gTWF0aC5tYXgoeCwgMCk7XG4gIHkgPSBNYXRoLm1heCh5LCAwKTtcbiAgcmV0dXJuIFt4LCB5XTtcbn1cblxuZnVuY3Rpb24gZ2V0T3V0ZXJTaXplKGVsKSB7XG4gIHZhciB3aWR0aCA9IGVsLmNsaWVudFdpZHRoO1xuICB2YXIgaGVpZ2h0ID0gZWwuY2xpZW50SGVpZ2h0OyAvLyBDb25zaWRlciBicm93c2VyIGNvbXBhdGliaWxpdHkuXG4gIC8vIElFOCBkb2VzIG5vdCBzdXBwb3J0IGdldENvbXB1dGVkU3R5bGUuXG5cbiAgaWYgKGRvY3VtZW50LmRlZmF1bHRWaWV3ICYmIGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICB2YXIgc3RsID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG5cbiAgICBpZiAoc3RsKSB7XG4gICAgICB3aWR0aCArPSBwYXJzZUludChzdGwucGFkZGluZ0xlZnQsIDEwKSArIHBhcnNlSW50KHN0bC5wYWRkaW5nUmlnaHQsIDEwKSArIHBhcnNlSW50KHN0bC5ib3JkZXJMZWZ0V2lkdGgsIDEwKSArIHBhcnNlSW50KHN0bC5ib3JkZXJSaWdodFdpZHRoLCAxMCk7XG4gICAgICBoZWlnaHQgKz0gcGFyc2VJbnQoc3RsLnBhZGRpbmdUb3AsIDEwKSArIHBhcnNlSW50KHN0bC5wYWRkaW5nQm90dG9tLCAxMCkgKyBwYXJzZUludChzdGwuYm9yZGVyVG9wV2lkdGgsIDEwKSArIHBhcnNlSW50KHN0bC5ib3JkZXJCb3R0b21XaWR0aCwgMTApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNhbGNUb29sdGlwUG9zaXRpb24ocG9zaXRpb24sIHJlY3QsIGNvbnRlbnRTaXplKSB7XG4gIHZhciBkb21XaWR0aCA9IGNvbnRlbnRTaXplWzBdO1xuICB2YXIgZG9tSGVpZ2h0ID0gY29udGVudFNpemVbMV07XG4gIHZhciBnYXAgPSA1O1xuICB2YXIgeCA9IDA7XG4gIHZhciB5ID0gMDtcbiAgdmFyIHJlY3RXaWR0aCA9IHJlY3Qud2lkdGg7XG4gIHZhciByZWN0SGVpZ2h0ID0gcmVjdC5oZWlnaHQ7XG5cbiAgc3dpdGNoIChwb3NpdGlvbikge1xuICAgIGNhc2UgJ2luc2lkZSc6XG4gICAgICB4ID0gcmVjdC54ICsgcmVjdFdpZHRoIC8gMiAtIGRvbVdpZHRoIC8gMjtcbiAgICAgIHkgPSByZWN0LnkgKyByZWN0SGVpZ2h0IC8gMiAtIGRvbUhlaWdodCAvIDI7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3RvcCc6XG4gICAgICB4ID0gcmVjdC54ICsgcmVjdFdpZHRoIC8gMiAtIGRvbVdpZHRoIC8gMjtcbiAgICAgIHkgPSByZWN0LnkgLSBkb21IZWlnaHQgLSBnYXA7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICB4ID0gcmVjdC54ICsgcmVjdFdpZHRoIC8gMiAtIGRvbVdpZHRoIC8gMjtcbiAgICAgIHkgPSByZWN0LnkgKyByZWN0SGVpZ2h0ICsgZ2FwO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdsZWZ0JzpcbiAgICAgIHggPSByZWN0LnggLSBkb21XaWR0aCAtIGdhcDtcbiAgICAgIHkgPSByZWN0LnkgKyByZWN0SGVpZ2h0IC8gMiAtIGRvbUhlaWdodCAvIDI7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgIHggPSByZWN0LnggKyByZWN0V2lkdGggKyBnYXA7XG4gICAgICB5ID0gcmVjdC55ICsgcmVjdEhlaWdodCAvIDIgLSBkb21IZWlnaHQgLyAyO1xuICB9XG5cbiAgcmV0dXJuIFt4LCB5XTtcbn1cblxuZnVuY3Rpb24gaXNDZW50ZXJBbGlnbihhbGlnbikge1xuICByZXR1cm4gYWxpZ24gPT09ICdjZW50ZXInIHx8IGFsaWduID09PSAnbWlkZGxlJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCIvKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG4vLyAoMSkgVGhlIGNvZGUgYGlmIChfX0RFVl9fKSAuLi5gIGNhbiBiZSByZW1vdmVkIGJ5IGJ1aWxkIHRvb2wuXG4vLyAoMikgSWYgaW50ZW5kIHRvIHVzZSBgX19ERVZfX2AsIHRoaXMgbW9kdWxlIHNob3VsZCBiZSBpbXBvcnRlZC4gVXNlIGEgZ2xvYmFsXG4vLyB2YXJpYWJsZSBgX19ERVZfX2AgbWF5IGNhdXNlIHRoYXQgbWlzcyB0aGUgZGVjbGFyYXRpb24gKHNlZSAjNjUzNSksIG9yIHRoZVxuLy8gZGVjbGFyYXRpb24gaXMgYmVoaW5kIG9mIHRoZSB1c2luZyBwb3NpdGlvbiAoZm9yIGV4YW1wbGUgaW4gYE1vZGVsLmV4dGVudGAsXG4vLyBBbmQgdG9vbHMgbGlrZSByb2xsdXAgY2FuIG5vdCBhbmFseXNpcyB0aGUgZGVwZW5kZW5jeSBpZiBub3QgaW1wb3J0KS5cbnZhciBkZXY7IC8vIEluIGJyb3dzZXJcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIGRldiA9IHdpbmRvdy5fX0RFVl9fO1xufSAvLyBJbiBub2RlXG5lbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgIGRldiA9IGdsb2JhbC5fX0RFVl9fO1xuICB9XG5cbmlmICh0eXBlb2YgZGV2ID09PSAndW5kZWZpbmVkJykge1xuICBkZXYgPSB0cnVlO1xufVxuXG52YXIgX19ERVZfXyA9IGRldjtcbmV4cG9ydHMuX19ERVZfXyA9IF9fREVWX187IiwidmFyIF91dGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxudmFyIGVhY2ggPSBfdXRpbC5lYWNoO1xudmFyIG1hcCA9IF91dGlsLm1hcDtcblxudmFyIF9udW1iZXIgPSByZXF1aXJlKFwiLi4vdXRpbC9udW1iZXJcIik7XG5cbnZhciBsaW5lYXJNYXAgPSBfbnVtYmVyLmxpbmVhck1hcDtcbnZhciBnZXRQaXhlbFByZWNpc2lvbiA9IF9udW1iZXIuZ2V0UGl4ZWxQcmVjaXNpb247XG5cbnZhciBfYXhpc1RpY2tMYWJlbEJ1aWxkZXIgPSByZXF1aXJlKFwiLi9heGlzVGlja0xhYmVsQnVpbGRlclwiKTtcblxudmFyIGNyZWF0ZUF4aXNUaWNrcyA9IF9heGlzVGlja0xhYmVsQnVpbGRlci5jcmVhdGVBeGlzVGlja3M7XG52YXIgY3JlYXRlQXhpc0xhYmVscyA9IF9heGlzVGlja0xhYmVsQnVpbGRlci5jcmVhdGVBeGlzTGFiZWxzO1xudmFyIGNhbGN1bGF0ZUNhdGVnb3J5SW50ZXJ2YWwgPSBfYXhpc1RpY2tMYWJlbEJ1aWxkZXIuY2FsY3VsYXRlQ2F0ZWdvcnlJbnRlcnZhbDtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xudmFyIE5PUk1BTElaRURfRVhURU5UID0gWzAsIDFdO1xuLyoqXG4gKiBCYXNlIGNsYXNzIG9mIEF4aXMuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuXG52YXIgQXhpcyA9IGZ1bmN0aW9uIChkaW0sIHNjYWxlLCBleHRlbnQpIHtcbiAgLyoqXG4gICAqIEF4aXMgZGltZW5zaW9uLiBTdWNoIGFzICd4JywgJ3knLCAneicsICdhbmdsZScsICdyYWRpdXMnLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5kaW0gPSBkaW07XG4gIC8qKlxuICAgKiBBeGlzIHNjYWxlXG4gICAqIEB0eXBlIHttb2R1bGU6ZWNoYXJ0cy9jb29yZC9zY2FsZS8qfVxuICAgKi9cblxuICB0aGlzLnNjYWxlID0gc2NhbGU7XG4gIC8qKlxuICAgKiBAdHlwZSB7QXJyYXkuPG51bWJlcj59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIHRoaXMuX2V4dGVudCA9IGV4dGVudCB8fCBbMCwgMF07XG4gIC8qKlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG5cbiAgdGhpcy5pbnZlcnNlID0gZmFsc2U7XG4gIC8qKlxuICAgKiBVc3VhbGx5IHRydWUgd2hlbiBheGlzIGhhcyBhIG9yZGluYWwgc2NhbGVcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuXG4gIHRoaXMub25CYW5kID0gZmFsc2U7XG59O1xuXG5BeGlzLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEF4aXMsXG5cbiAgLyoqXG4gICAqIElmIGF4aXMgZXh0ZW50IGNvbnRhaW4gZ2l2ZW4gY29vcmRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvb3JkXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBjb250YWluOiBmdW5jdGlvbiAoY29vcmQpIHtcbiAgICB2YXIgZXh0ZW50ID0gdGhpcy5fZXh0ZW50O1xuICAgIHZhciBtaW4gPSBNYXRoLm1pbihleHRlbnRbMF0sIGV4dGVudFsxXSk7XG4gICAgdmFyIG1heCA9IE1hdGgubWF4KGV4dGVudFswXSwgZXh0ZW50WzFdKTtcbiAgICByZXR1cm4gY29vcmQgPj0gbWluICYmIGNvb3JkIDw9IG1heDtcbiAgfSxcblxuICAvKipcbiAgICogSWYgYXhpcyBleHRlbnQgY29udGFpbiBnaXZlbiBkYXRhXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkYXRhXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBjb250YWluRGF0YTogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gdGhpcy5jb250YWluKHRoaXMuZGF0YVRvQ29vcmQoZGF0YSkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgY29vcmQgZXh0ZW50LlxuICAgKiBAcmV0dXJuIHtBcnJheS48bnVtYmVyPn1cbiAgICovXG4gIGdldEV4dGVudDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9leHRlbnQuc2xpY2UoKTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IHByZWNpc2lvbiB1c2VkIGZvciBmb3JtYXR0aW5nXG4gICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IFtkYXRhRXh0ZW50XVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRQaXhlbFByZWNpc2lvbjogZnVuY3Rpb24gKGRhdGFFeHRlbnQpIHtcbiAgICByZXR1cm4gZ2V0UGl4ZWxQcmVjaXNpb24oZGF0YUV4dGVudCB8fCB0aGlzLnNjYWxlLmdldEV4dGVudCgpLCB0aGlzLl9leHRlbnQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXQgY29vcmQgZXh0ZW50XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFxuICAgKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gICAqL1xuICBzZXRFeHRlbnQ6IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgdmFyIGV4dGVudCA9IHRoaXMuX2V4dGVudDtcbiAgICBleHRlbnRbMF0gPSBzdGFydDtcbiAgICBleHRlbnRbMV0gPSBlbmQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbnZlcnQgZGF0YSB0byBjb29yZC4gRGF0YSBpcyB0aGUgcmFuayBpZiBpdCBoYXMgYW4gb3JkaW5hbCBzY2FsZVxuICAgKiBAcGFyYW0ge251bWJlcn0gZGF0YVxuICAgKiBAcGFyYW0gIHtib29sZWFufSBjbGFtcFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBkYXRhVG9Db29yZDogZnVuY3Rpb24gKGRhdGEsIGNsYW1wKSB7XG4gICAgdmFyIGV4dGVudCA9IHRoaXMuX2V4dGVudDtcbiAgICB2YXIgc2NhbGUgPSB0aGlzLnNjYWxlO1xuICAgIGRhdGEgPSBzY2FsZS5ub3JtYWxpemUoZGF0YSk7XG5cbiAgICBpZiAodGhpcy5vbkJhbmQgJiYgc2NhbGUudHlwZSA9PT0gJ29yZGluYWwnKSB7XG4gICAgICBleHRlbnQgPSBleHRlbnQuc2xpY2UoKTtcbiAgICAgIGZpeEV4dGVudFdpdGhCYW5kcyhleHRlbnQsIHNjYWxlLmNvdW50KCkpO1xuICAgIH1cblxuICAgIHJldHVybiBsaW5lYXJNYXAoZGF0YSwgTk9STUFMSVpFRF9FWFRFTlQsIGV4dGVudCwgY2xhbXApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IGNvb3JkIHRvIGRhdGEuIERhdGEgaXMgdGhlIHJhbmsgaWYgaXQgaGFzIGFuIG9yZGluYWwgc2NhbGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvb3JkXG4gICAqIEBwYXJhbSAge2Jvb2xlYW59IGNsYW1wXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGNvb3JkVG9EYXRhOiBmdW5jdGlvbiAoY29vcmQsIGNsYW1wKSB7XG4gICAgdmFyIGV4dGVudCA9IHRoaXMuX2V4dGVudDtcbiAgICB2YXIgc2NhbGUgPSB0aGlzLnNjYWxlO1xuXG4gICAgaWYgKHRoaXMub25CYW5kICYmIHNjYWxlLnR5cGUgPT09ICdvcmRpbmFsJykge1xuICAgICAgZXh0ZW50ID0gZXh0ZW50LnNsaWNlKCk7XG4gICAgICBmaXhFeHRlbnRXaXRoQmFuZHMoZXh0ZW50LCBzY2FsZS5jb3VudCgpKTtcbiAgICB9XG5cbiAgICB2YXIgdCA9IGxpbmVhck1hcChjb29yZCwgZXh0ZW50LCBOT1JNQUxJWkVEX0VYVEVOVCwgY2xhbXApO1xuICAgIHJldHVybiB0aGlzLnNjYWxlLnNjYWxlKHQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHBpeGVsIHBvaW50IHRvIGRhdGEgaW4gYXhpc1xuICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBwb2ludFxuICAgKiBAcGFyYW0gIHtib29sZWFufSBjbGFtcFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IGRhdGFcbiAgICovXG4gIHBvaW50VG9EYXRhOiBmdW5jdGlvbiAocG9pbnQsIGNsYW1wKSB7Ly8gU2hvdWxkIGJlIGltcGxlbWVudGVkIGluIGRlcml2ZWQgY2xhc3MgaWYgbmVjZXNzYXJ5LlxuICB9LFxuXG4gIC8qKlxuICAgKiBEaWZmZXJlbnQgZnJvbSBgenJVdGlsLm1hcChheGlzLmdldFRpY2tzKCksIGF4aXMuZGF0YVRvQ29vcmQsIGF4aXMpYCxcbiAgICogYGF4aXMuZ2V0VGlja3NDb29yZHNgIGNvbnNpZGVycyBgb25CYW5kYCwgd2hpY2ggaXMgdXNlZCBieVxuICAgKiBgYm91bmRhcnlHYXA6dHJ1ZWAgb2YgY2F0ZWdvcnkgYXhpcyBhbmQgc3BsaXRMaW5lIGFuZCBzcGxpdEFyZWEuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0XVxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdC50aWNrTW9kZWw9YXhpcy5tb2RlbC5nZXRNb2RlbCgnYXhpc1RpY2snKV1cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0LmNsYW1wXSBJZiBgdHJ1ZWAsIHRoZSBmaXJzdCBhbmQgdGhlIGxhc3RcbiAgICogICAgICAgIHRpY2sgbXVzdCBiZSBhdCB0aGUgYXhpcyBlbmQgcG9pbnRzLiBPdGhlcndpc2UsIGNsaXAgdGlja3NcbiAgICogICAgICAgIHRoYXQgb3V0c2lkZSB0aGUgYXhpcyBleHRlbnQuXG4gICAqIEByZXR1cm4ge0FycmF5LjxPYmplY3Q+fSBbe1xuICAgKiAgICAgY29vcmQ6IC4uLixcbiAgICogICAgIHRpY2tWYWx1ZTogLi4uXG4gICAqIH0sIC4uLl1cbiAgICovXG4gIGdldFRpY2tzQ29vcmRzOiBmdW5jdGlvbiAob3B0KSB7XG4gICAgb3B0ID0gb3B0IHx8IHt9O1xuICAgIHZhciB0aWNrTW9kZWwgPSBvcHQudGlja01vZGVsIHx8IHRoaXMuZ2V0VGlja01vZGVsKCk7XG4gICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUF4aXNUaWNrcyh0aGlzLCB0aWNrTW9kZWwpO1xuICAgIHZhciB0aWNrcyA9IHJlc3VsdC50aWNrcztcbiAgICB2YXIgdGlja3NDb29yZHMgPSBtYXAodGlja3MsIGZ1bmN0aW9uICh0aWNrVmFsdWUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvb3JkOiB0aGlzLmRhdGFUb0Nvb3JkKHRpY2tWYWx1ZSksXG4gICAgICAgIHRpY2tWYWx1ZTogdGlja1ZhbHVlXG4gICAgICB9O1xuICAgIH0sIHRoaXMpO1xuICAgIHZhciBhbGlnbldpdGhMYWJlbCA9IHRpY2tNb2RlbC5nZXQoJ2FsaWduV2l0aExhYmVsJyk7XG4gICAgZml4T25CYW5kVGlja3NDb29yZHModGhpcywgdGlja3NDb29yZHMsIHJlc3VsdC50aWNrQ2F0ZWdvcnlJbnRlcnZhbCwgYWxpZ25XaXRoTGFiZWwsIG9wdC5jbGFtcCk7XG4gICAgcmV0dXJuIHRpY2tzQ29vcmRzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBcnJheS48T2JqZWN0Pn0gW3tcbiAgICogICAgIGZvcm1hdHRlZExhYmVsOiBzdHJpbmcsXG4gICAqICAgICByYXdMYWJlbDogYXhpcy5zY2FsZS5nZXRMYWJlbCh0aWNrVmFsdWUpXG4gICAqICAgICB0aWNrVmFsdWU6IG51bWJlclxuICAgKiB9LCAuLi5dXG4gICAqL1xuICBnZXRWaWV3TGFiZWxzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUF4aXNMYWJlbHModGhpcykubGFiZWxzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHttb2R1bGU6ZWNoYXJ0cy9jb29yZC9tb2RlbC9Nb2RlbH1cbiAgICovXG4gIGdldExhYmVsTW9kZWw6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5tb2RlbC5nZXRNb2RlbCgnYXhpc0xhYmVsJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE5vdGljZSBoZXJlIHdlIG9ubHkgZ2V0IHRoZSBkZWZhdWx0IHRpY2sgbW9kZWwuIEZvciBzcGxpdExpbmVcbiAgICogb3Igc3BsaXRBcmVhLCB3ZSBzaG91bGQgcGFzcyB0aGUgc3BsaXRMaW5lTW9kZWwgb3Igc3BsaXRBcmVhTW9kZWxcbiAgICogbWFudWFsbHkgd2hlbiBjYWxsaW5nIGBnZXRUaWNrc0Nvb3Jkc2AuXG4gICAqIEluIEdMLCB0aGlzIG1ldGhvZCBtYXkgYmUgb3ZlcnJpZGVkIHRvOlxuICAgKiBgYXhpc01vZGVsLmdldE1vZGVsKCdheGlzVGljaycsIGdyaWQzRE1vZGVsLmdldE1vZGVsKCdheGlzVGljaycpKTtgXG4gICAqIEByZXR1cm4ge21vZHVsZTplY2hhcnRzL2Nvb3JkL21vZGVsL01vZGVsfVxuICAgKi9cbiAgZ2V0VGlja01vZGVsOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kZWwuZ2V0TW9kZWwoJ2F4aXNUaWNrJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCB3aWR0aCBvZiBiYW5kXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldEJhbmRXaWR0aDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBheGlzRXh0ZW50ID0gdGhpcy5fZXh0ZW50O1xuICAgIHZhciBkYXRhRXh0ZW50ID0gdGhpcy5zY2FsZS5nZXRFeHRlbnQoKTtcbiAgICB2YXIgbGVuID0gZGF0YUV4dGVudFsxXSAtIGRhdGFFeHRlbnRbMF0gKyAodGhpcy5vbkJhbmQgPyAxIDogMCk7IC8vIEZpeCAjMjcyOCwgYXZvaWQgTmFOIHdoZW4gb25seSBvbmUgZGF0YS5cblxuICAgIGxlbiA9PT0gMCAmJiAobGVuID0gMSk7XG4gICAgdmFyIHNpemUgPSBNYXRoLmFicyhheGlzRXh0ZW50WzFdIC0gYXhpc0V4dGVudFswXSk7XG4gICAgcmV0dXJuIE1hdGguYWJzKHNpemUpIC8gbGVuO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gSXMgaG9yaXpvbnRhbFxuICAgKi9cbiAgaXNIb3Jpem9udGFsOiBudWxsLFxuXG4gIC8qKlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHJldHVybiB7bnVtYmVyfSBHZXQgYXhpcyByb3RhdGUsIGJ5IGRlZ3JlZS5cbiAgICovXG4gIGdldFJvdGF0ZTogbnVsbCxcblxuICAvKipcbiAgICogT25seSBiZSBjYWxsZWQgaW4gY2F0ZWdvcnkgYXhpcy5cbiAgICogQ2FuIGJlIG92ZXJyaWRlZCwgY29uc2lkZXIgb3RoZXIgYXhlcyBsaWtlIGluIDNELlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IEF1dG8gaW50ZXJ2YWwgZm9yIGNhdGVvZ3J5IGF4aXMgdGljayBhbmQgbGFiZWxcbiAgICovXG4gIGNhbGN1bGF0ZUNhdGVnb3J5SW50ZXJ2YWw6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2FsY3VsYXRlQ2F0ZWdvcnlJbnRlcnZhbCh0aGlzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZml4RXh0ZW50V2l0aEJhbmRzKGV4dGVudCwgblRpY2spIHtcbiAgdmFyIHNpemUgPSBleHRlbnRbMV0gLSBleHRlbnRbMF07XG4gIHZhciBsZW4gPSBuVGljaztcbiAgdmFyIG1hcmdpbiA9IHNpemUgLyBsZW4gLyAyO1xuICBleHRlbnRbMF0gKz0gbWFyZ2luO1xuICBleHRlbnRbMV0gLT0gbWFyZ2luO1xufSAvLyBJZiBheGlzIGhhcyBsYWJlbHMgWzEsIDIsIDMsIDRdLiBCYW5kcyBvbiB0aGUgYXhpcyBhcmVcbi8vIHwtLS0xLS0tfC0tLTItLS18LS0tMy0tLXwtLS00LS0tfC5cbi8vIFNvIHRoZSBkaXNwbGF5ZWQgdGlja3MgYW5kIHNwbGl0TGluZS9zcGxpdEFyZWEgc2hvdWxkIGJldHdlZW5cbi8vIGVhY2ggZGF0YSBpdGVtLCBvdGhlcndpc2UgY2F1c2UgbWlzbGVhZGluZyAoZS5nLiwgc3BsaXQgdG93IGJhcnNcbi8vIG9mIGEgc2luZ2xlIGRhdGEgaXRlbSB3aGVuIHRoZXJlIGFyZSB0d28gYmFyIHNlcmllcykuXG4vLyBBbHNvIGNvbnNpZGVyIGlmIHRpY2tDYXRlZ29yeUludGVydmFsID4gMCBhbmQgb25CYW5kLCB0aWNrcyBhbmRcbi8vIHNwbGl0TGluZS9zcGxpdGVBcmVhIHNob3VsZCBsYXlvdXQgYXBwcm9wcmlhdGVseSBjb3JyZXNwb25kaW5nXG4vLyB0byBkaXNwbGF5ZWQgbGFiZWxzLiAoU28gd2Ugc2hvdWxkIG5vdCB1c2UgYGdldEJhbmRXaWR0aGAgaW4gdGhpc1xuLy8gY2FzZSkuXG5cblxuZnVuY3Rpb24gZml4T25CYW5kVGlja3NDb29yZHMoYXhpcywgdGlja3NDb29yZHMsIHRpY2tDYXRlZ29yeUludGVydmFsLCBhbGlnbldpdGhMYWJlbCwgY2xhbXApIHtcbiAgdmFyIHRpY2tzTGVuID0gdGlja3NDb29yZHMubGVuZ3RoO1xuXG4gIGlmICghYXhpcy5vbkJhbmQgfHwgYWxpZ25XaXRoTGFiZWwgfHwgIXRpY2tzTGVuKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGF4aXNFeHRlbnQgPSBheGlzLmdldEV4dGVudCgpO1xuICB2YXIgbGFzdDtcblxuICBpZiAodGlja3NMZW4gPT09IDEpIHtcbiAgICB0aWNrc0Nvb3Jkc1swXS5jb29yZCA9IGF4aXNFeHRlbnRbMF07XG4gICAgbGFzdCA9IHRpY2tzQ29vcmRzWzFdID0ge1xuICAgICAgY29vcmQ6IGF4aXNFeHRlbnRbMF1cbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHZhciBzaGlmdCA9IHRpY2tzQ29vcmRzWzFdLmNvb3JkIC0gdGlja3NDb29yZHNbMF0uY29vcmQ7XG4gICAgZWFjaCh0aWNrc0Nvb3JkcywgZnVuY3Rpb24gKHRpY2tzSXRlbSkge1xuICAgICAgdGlja3NJdGVtLmNvb3JkIC09IHNoaWZ0IC8gMjtcbiAgICAgIHZhciB0aWNrQ2F0ZWdvcnlJbnRlcnZhbCA9IHRpY2tDYXRlZ29yeUludGVydmFsIHx8IDA7IC8vIEF2b2lkIHNwbGl0IGEgc2luZ2xlIGRhdGEgaXRlbSB3aGVuIG9kZCBpbnRlcnZhbC5cblxuICAgICAgaWYgKHRpY2tDYXRlZ29yeUludGVydmFsICUgMiA+IDApIHtcbiAgICAgICAgdGlja3NJdGVtLmNvb3JkIC09IHNoaWZ0IC8gKCh0aWNrQ2F0ZWdvcnlJbnRlcnZhbCArIDEpICogMik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbGFzdCA9IHtcbiAgICAgIGNvb3JkOiB0aWNrc0Nvb3Jkc1t0aWNrc0xlbiAtIDFdLmNvb3JkICsgc2hpZnRcbiAgICB9O1xuICAgIHRpY2tzQ29vcmRzLnB1c2gobGFzdCk7XG4gIH1cblxuICB2YXIgaW52ZXJzZSA9IGF4aXNFeHRlbnRbMF0gPiBheGlzRXh0ZW50WzFdO1xuXG4gIGlmIChsaXR0bGVUaGFuKHRpY2tzQ29vcmRzWzBdLmNvb3JkLCBheGlzRXh0ZW50WzBdKSkge1xuICAgIGNsYW1wID8gdGlja3NDb29yZHNbMF0uY29vcmQgPSBheGlzRXh0ZW50WzBdIDogdGlja3NDb29yZHMuc2hpZnQoKTtcbiAgfVxuXG4gIGlmIChjbGFtcCAmJiBsaXR0bGVUaGFuKGF4aXNFeHRlbnRbMF0sIHRpY2tzQ29vcmRzWzBdLmNvb3JkKSkge1xuICAgIHRpY2tzQ29vcmRzLnVuc2hpZnQoe1xuICAgICAgY29vcmQ6IGF4aXNFeHRlbnRbMF1cbiAgICB9KTtcbiAgfVxuXG4gIGlmIChsaXR0bGVUaGFuKGF4aXNFeHRlbnRbMV0sIGxhc3QuY29vcmQpKSB7XG4gICAgY2xhbXAgPyBsYXN0LmNvb3JkID0gYXhpc0V4dGVudFsxXSA6IHRpY2tzQ29vcmRzLnBvcCgpO1xuICB9XG5cbiAgaWYgKGNsYW1wICYmIGxpdHRsZVRoYW4obGFzdC5jb29yZCwgYXhpc0V4dGVudFsxXSkpIHtcbiAgICB0aWNrc0Nvb3Jkcy5wdXNoKHtcbiAgICAgIGNvb3JkOiBheGlzRXh0ZW50WzFdXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXR0bGVUaGFuKGEsIGIpIHtcbiAgICByZXR1cm4gaW52ZXJzZSA/IGEgPiBiIDogYSA8IGI7XG4gIH1cbn1cblxudmFyIF9kZWZhdWx0ID0gQXhpcztcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIF9jb25maWcgPSByZXF1aXJlKFwiLi4vY29uZmlnXCIpO1xuXG52YXIgX19ERVZfXyA9IF9jb25maWcuX19ERVZfXztcblxudmFyIHpyVXRpbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3V0aWxcIik7XG5cbnZhciBPcmRpbmFsU2NhbGUgPSByZXF1aXJlKFwiLi4vc2NhbGUvT3JkaW5hbFwiKTtcblxudmFyIEludGVydmFsU2NhbGUgPSByZXF1aXJlKFwiLi4vc2NhbGUvSW50ZXJ2YWxcIik7XG5cbnZhciBTY2FsZSA9IHJlcXVpcmUoXCIuLi9zY2FsZS9TY2FsZVwiKTtcblxudmFyIG51bWJlclV0aWwgPSByZXF1aXJlKFwiLi4vdXRpbC9udW1iZXJcIik7XG5cbnZhciBfYmFyR3JpZCA9IHJlcXVpcmUoXCIuLi9sYXlvdXQvYmFyR3JpZFwiKTtcblxudmFyIHByZXBhcmVMYXlvdXRCYXJTZXJpZXMgPSBfYmFyR3JpZC5wcmVwYXJlTGF5b3V0QmFyU2VyaWVzO1xudmFyIG1ha2VDb2x1bW5MYXlvdXQgPSBfYmFyR3JpZC5tYWtlQ29sdW1uTGF5b3V0O1xudmFyIHJldHJpZXZlQ29sdW1uTGF5b3V0ID0gX2JhckdyaWQucmV0cmlldmVDb2x1bW5MYXlvdXQ7XG5cbnZhciBCb3VuZGluZ1JlY3QgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS9Cb3VuZGluZ1JlY3RcIik7XG5cbnJlcXVpcmUoXCIuLi9zY2FsZS9UaW1lXCIpO1xuXG5yZXF1aXJlKFwiLi4vc2NhbGUvTG9nXCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbi8qKlxuICogR2V0IGF4aXMgc2NhbGUgZXh0ZW50IGJlZm9yZSBuaWNlZC5cbiAqIEl0ZW0gb2YgcmV0dXJuZWQgYXJyYXkgY2FuIG9ubHkgYmUgbnVtYmVyIChpbmNsdWRpbmcgSW5maW5pdHkgYW5kIE5hTikuXG4gKi9cbmZ1bmN0aW9uIGdldFNjYWxlRXh0ZW50KHNjYWxlLCBtb2RlbCkge1xuICB2YXIgc2NhbGVUeXBlID0gc2NhbGUudHlwZTtcbiAgdmFyIG1pbiA9IG1vZGVsLmdldE1pbigpO1xuICB2YXIgbWF4ID0gbW9kZWwuZ2V0TWF4KCk7XG4gIHZhciBmaXhNaW4gPSBtaW4gIT0gbnVsbDtcbiAgdmFyIGZpeE1heCA9IG1heCAhPSBudWxsO1xuICB2YXIgb3JpZ2luYWxFeHRlbnQgPSBzY2FsZS5nZXRFeHRlbnQoKTtcbiAgdmFyIGF4aXNEYXRhTGVuO1xuICB2YXIgYm91bmRhcnlHYXA7XG4gIHZhciBzcGFuO1xuXG4gIGlmIChzY2FsZVR5cGUgPT09ICdvcmRpbmFsJykge1xuICAgIGF4aXNEYXRhTGVuID0gbW9kZWwuZ2V0Q2F0ZWdvcmllcygpLmxlbmd0aDtcbiAgfSBlbHNlIHtcbiAgICBib3VuZGFyeUdhcCA9IG1vZGVsLmdldCgnYm91bmRhcnlHYXAnKTtcblxuICAgIGlmICghenJVdGlsLmlzQXJyYXkoYm91bmRhcnlHYXApKSB7XG4gICAgICBib3VuZGFyeUdhcCA9IFtib3VuZGFyeUdhcCB8fCAwLCBib3VuZGFyeUdhcCB8fCAwXTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGJvdW5kYXJ5R2FwWzBdID09PSAnYm9vbGVhbicpIHtcbiAgICAgIGJvdW5kYXJ5R2FwID0gWzAsIDBdO1xuICAgIH1cblxuICAgIGJvdW5kYXJ5R2FwWzBdID0gbnVtYmVyVXRpbC5wYXJzZVBlcmNlbnQoYm91bmRhcnlHYXBbMF0sIDEpO1xuICAgIGJvdW5kYXJ5R2FwWzFdID0gbnVtYmVyVXRpbC5wYXJzZVBlcmNlbnQoYm91bmRhcnlHYXBbMV0sIDEpO1xuICAgIHNwYW4gPSBvcmlnaW5hbEV4dGVudFsxXSAtIG9yaWdpbmFsRXh0ZW50WzBdIHx8IE1hdGguYWJzKG9yaWdpbmFsRXh0ZW50WzBdKTtcbiAgfSAvLyBOb3RpY2U6IFdoZW4gbWluL21heCBpcyBub3Qgc2V0ICh0aGF0IGlzLCB3aGVuIHRoZXJlIGFyZSBudWxsL3VuZGVmaW5lZCxcbiAgLy8gd2hpY2ggaXMgdGhlIG1vc3QgY29tbW9uIGNhc2UpLCB0aGVzZSBjYXNlcyBzaG91bGQgYmUgZW5zdXJlZDpcbiAgLy8gKDEpIEZvciAnb3JkaW5hbCcsIHNob3cgYWxsIGF4aXMuZGF0YS5cbiAgLy8gKDIpIEZvciBvdGhlcnM6XG4gIC8vICAgICAgKyBgYm91bmRhcnlHYXBgIGlzIGFwcGxpZWQgKGlmIG1pbi9tYXggc2V0LCBib3VuZGFyeUdhcCBpc1xuICAvLyAgICAgIGRpc2FibGVkKS5cbiAgLy8gICAgICArIElmIGBuZWVkQ3Jvc3NaZXJvYCwgbWluL21heCBzaG91bGQgYmUgemVybywgb3RoZXJ3aXNlLCBtaW4vbWF4IHNob3VsZFxuICAvLyAgICAgIGJlIHRoZSByZXN1bHQgdGhhdCBvcmlnaW5hbEV4dGVudCBlbmxhcmdlZCBieSBib3VuZGFyeUdhcC5cbiAgLy8gKDMpIElmIG5vIGRhdGEsIGl0IHNob3VsZCBiZSBlbnN1cmVkIHRoYXQgYHNjYWxlLnNldEJsYW5rYCBpcyBzZXQuXG4gIC8vIEZJWE1FXG4gIC8vICgxKSBXaGVuIG1pbi9tYXggaXMgJ2RhdGFNaW4nIG9yICdkYXRhTWF4Jywgc2hvdWxkIGJvdW5kYXJ5R2FwIGJlIGFibGUgdG8gdXNlZD9cbiAgLy8gKDIpIFdoZW4gYG5lZWRDcm9zc1plcm9gIGFuZCBhbGwgZGF0YSBpcyBwb3NpdGl2ZS9uZWdhdGl2ZSwgc2hvdWxkIGl0IGJlIGVuc3VyZWRcbiAgLy8gdGhhdCB0aGUgcmVzdWx0cyBwcm9jZXNzZWQgYnkgYm91bmRhcnlHYXAgYXJlIHBvc2l0aXZlL25lZ2F0aXZlP1xuXG5cbiAgaWYgKG1pbiA9PSBudWxsKSB7XG4gICAgbWluID0gc2NhbGVUeXBlID09PSAnb3JkaW5hbCcgPyBheGlzRGF0YUxlbiA/IDAgOiBOYU4gOiBvcmlnaW5hbEV4dGVudFswXSAtIGJvdW5kYXJ5R2FwWzBdICogc3BhbjtcbiAgfVxuXG4gIGlmIChtYXggPT0gbnVsbCkge1xuICAgIG1heCA9IHNjYWxlVHlwZSA9PT0gJ29yZGluYWwnID8gYXhpc0RhdGFMZW4gPyBheGlzRGF0YUxlbiAtIDEgOiBOYU4gOiBvcmlnaW5hbEV4dGVudFsxXSArIGJvdW5kYXJ5R2FwWzFdICogc3BhbjtcbiAgfVxuXG4gIGlmIChtaW4gPT09ICdkYXRhTWluJykge1xuICAgIG1pbiA9IG9yaWdpbmFsRXh0ZW50WzBdO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBtaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICBtaW4gPSBtaW4oe1xuICAgICAgbWluOiBvcmlnaW5hbEV4dGVudFswXSxcbiAgICAgIG1heDogb3JpZ2luYWxFeHRlbnRbMV1cbiAgICB9KTtcbiAgfVxuXG4gIGlmIChtYXggPT09ICdkYXRhTWF4Jykge1xuICAgIG1heCA9IG9yaWdpbmFsRXh0ZW50WzFdO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBtYXggPT09ICdmdW5jdGlvbicpIHtcbiAgICBtYXggPSBtYXgoe1xuICAgICAgbWluOiBvcmlnaW5hbEV4dGVudFswXSxcbiAgICAgIG1heDogb3JpZ2luYWxFeHRlbnRbMV1cbiAgICB9KTtcbiAgfVxuXG4gIChtaW4gPT0gbnVsbCB8fCAhaXNGaW5pdGUobWluKSkgJiYgKG1pbiA9IE5hTik7XG4gIChtYXggPT0gbnVsbCB8fCAhaXNGaW5pdGUobWF4KSkgJiYgKG1heCA9IE5hTik7XG4gIHNjYWxlLnNldEJsYW5rKHpyVXRpbC5lcU5hTihtaW4pIHx8IHpyVXRpbC5lcU5hTihtYXgpIHx8IHNjYWxlVHlwZSA9PT0gJ29yZGluYWwnICYmICFzY2FsZS5nZXRPcmRpbmFsTWV0YSgpLmNhdGVnb3JpZXMubGVuZ3RoKTsgLy8gRXZhbHVhdGUgaWYgYXhpcyBuZWVkcyBjcm9zcyB6ZXJvXG5cbiAgaWYgKG1vZGVsLmdldE5lZWRDcm9zc1plcm8oKSkge1xuICAgIC8vIEF4aXMgaXMgb3ZlciB6ZXJvIGFuZCBtaW4gaXMgbm90IHNldFxuICAgIGlmIChtaW4gPiAwICYmIG1heCA+IDAgJiYgIWZpeE1pbikge1xuICAgICAgbWluID0gMDtcbiAgICB9IC8vIEF4aXMgaXMgdW5kZXIgemVybyBhbmQgbWF4IGlzIG5vdCBzZXRcblxuXG4gICAgaWYgKG1pbiA8IDAgJiYgbWF4IDwgMCAmJiAhZml4TWF4KSB7XG4gICAgICBtYXggPSAwO1xuICAgIH1cbiAgfSAvLyBJZiBiYXJzIGFyZSBwbGFjZWQgb24gYSBiYXNlIGF4aXMgb2YgdHlwZSB0aW1lIG9yIGludGVydmFsIGFjY291bnQgZm9yIGF4aXMgYm91bmRhcnkgb3ZlcmZsb3cgYW5kIGN1cnJlbnQgYXhpc1xuICAvLyBpcyBiYXNlIGF4aXNcbiAgLy8gRklYTUVcbiAgLy8gKDEpIENvbnNpZGVyIHN1cHBvcnQgdmFsdWUgYXhpcywgd2hlcmUgYmVsb3cgemVybyBhbmQgYXhpcyBgb25aZXJvYCBzaG91bGQgYmUgaGFuZGxlZCBwcm9wZXJseS5cbiAgLy8gKDIpIFJlZmFjdG9yIHRoZSBsb2dpYyB3aXRoIGBiYXJHcmlkYC4gSXMgaXQgbm90IG5lZWQgdG8gYG1ha2VCYXJXaWR0aEFuZE9mZnNldEluZm9gIHR3aWNlIHdpdGggZGlmZmVyZW50IGV4dGVudD9cbiAgLy8gICAgIFNob3VsZCBub3QgZGVwZW5kIG9uIHNlcmllcyB0eXBlIGBiYXJgP1xuICAvLyAoMykgRml4IHRoYXQgbWlnaHQgb3ZlcmxhcCB3aGVuIHVzaW5nIGRhdGFab29tLlxuICAvLyAoNCkgQ29uc2lkZXIgb3RoZXIgY2hhcnQgdHlwZXMgdXNpbmcgYGJhckdyaWRgP1xuICAvLyBTZWUgIzY3MjgsICM0ODYyLCBgdGVzdC9iYXItb3ZlcmZsb3ctdGltZS1wbG90Lmh0bWxgXG5cblxuICB2YXIgZWNNb2RlbCA9IG1vZGVsLmVjTW9kZWw7XG5cbiAgaWYgKGVjTW9kZWwgJiYgc2NhbGVUeXBlID09PSAndGltZSdcbiAgLyp8fCBzY2FsZVR5cGUgPT09ICdpbnRlcnZhbCcgKi9cbiAgKSB7XG4gICAgdmFyIGJhclNlcmllc01vZGVscyA9IHByZXBhcmVMYXlvdXRCYXJTZXJpZXMoJ2JhcicsIGVjTW9kZWwpO1xuICAgIHZhciBpc0Jhc2VBeGlzQW5kSGFzQmFyU2VyaWVzO1xuICAgIHpyVXRpbC5lYWNoKGJhclNlcmllc01vZGVscywgZnVuY3Rpb24gKHNlcmllc01vZGVsKSB7XG4gICAgICBpc0Jhc2VBeGlzQW5kSGFzQmFyU2VyaWVzIHw9IHNlcmllc01vZGVsLmdldEJhc2VBeGlzKCkgPT09IG1vZGVsLmF4aXM7XG4gICAgfSk7XG5cbiAgICBpZiAoaXNCYXNlQXhpc0FuZEhhc0JhclNlcmllcykge1xuICAgICAgLy8gQ2FsY3VsYXRlIHBsYWNlbWVudCBvZiBiYXJzIG9uIGF4aXNcbiAgICAgIHZhciBiYXJXaWR0aEFuZE9mZnNldCA9IG1ha2VDb2x1bW5MYXlvdXQoYmFyU2VyaWVzTW9kZWxzKTsgLy8gQWRqdXN0IGF4aXMgbWluIGFuZCBtYXggdG8gYWNjb3VudCBmb3Igb3ZlcmZsb3dcblxuICAgICAgdmFyIGFkanVzdGVkU2NhbGUgPSBhZGp1c3RTY2FsZUZvck92ZXJmbG93KG1pbiwgbWF4LCBtb2RlbCwgYmFyV2lkdGhBbmRPZmZzZXQpO1xuICAgICAgbWluID0gYWRqdXN0ZWRTY2FsZS5taW47XG4gICAgICBtYXggPSBhZGp1c3RlZFNjYWxlLm1heDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gW21pbiwgbWF4XTtcbn1cblxuZnVuY3Rpb24gYWRqdXN0U2NhbGVGb3JPdmVyZmxvdyhtaW4sIG1heCwgbW9kZWwsIGJhcldpZHRoQW5kT2Zmc2V0KSB7XG4gIC8vIEdldCBBeGlzIExlbmd0aFxuICB2YXIgYXhpc0V4dGVudCA9IG1vZGVsLmF4aXMuZ2V0RXh0ZW50KCk7XG4gIHZhciBheGlzTGVuZ3RoID0gYXhpc0V4dGVudFsxXSAtIGF4aXNFeHRlbnRbMF07IC8vIEdldCBiYXJzIG9uIGN1cnJlbnQgYmFzZSBheGlzIGFuZCBjYWxjdWxhdGUgbWluIGFuZCBtYXggb3ZlcmZsb3dcblxuICB2YXIgYmFyc09uQ3VycmVudEF4aXMgPSByZXRyaWV2ZUNvbHVtbkxheW91dChiYXJXaWR0aEFuZE9mZnNldCwgbW9kZWwuYXhpcyk7XG5cbiAgaWYgKGJhcnNPbkN1cnJlbnRBeGlzID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWluOiBtaW4sXG4gICAgICBtYXg6IG1heFxuICAgIH07XG4gIH1cblxuICB2YXIgbWluT3ZlcmZsb3cgPSBJbmZpbml0eTtcbiAgenJVdGlsLmVhY2goYmFyc09uQ3VycmVudEF4aXMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgbWluT3ZlcmZsb3cgPSBNYXRoLm1pbihpdGVtLm9mZnNldCwgbWluT3ZlcmZsb3cpO1xuICB9KTtcbiAgdmFyIG1heE92ZXJmbG93ID0gLUluZmluaXR5O1xuICB6clV0aWwuZWFjaChiYXJzT25DdXJyZW50QXhpcywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBtYXhPdmVyZmxvdyA9IE1hdGgubWF4KGl0ZW0ub2Zmc2V0ICsgaXRlbS53aWR0aCwgbWF4T3ZlcmZsb3cpO1xuICB9KTtcbiAgbWluT3ZlcmZsb3cgPSBNYXRoLmFicyhtaW5PdmVyZmxvdyk7XG4gIG1heE92ZXJmbG93ID0gTWF0aC5hYnMobWF4T3ZlcmZsb3cpO1xuICB2YXIgdG90YWxPdmVyRmxvdyA9IG1pbk92ZXJmbG93ICsgbWF4T3ZlcmZsb3c7IC8vIENhbHVsYXRlIHJlcXVpcmVkIGJ1ZmZlciBiYXNlZCBvbiBvbGQgcmFuZ2UgYW5kIG92ZXJmbG93XG5cbiAgdmFyIG9sZFJhbmdlID0gbWF4IC0gbWluO1xuICB2YXIgb2xkUmFuZ2VQZXJjZW50T2ZOZXcgPSAxIC0gKG1pbk92ZXJmbG93ICsgbWF4T3ZlcmZsb3cpIC8gYXhpc0xlbmd0aDtcbiAgdmFyIG92ZXJmbG93QnVmZmVyID0gb2xkUmFuZ2UgLyBvbGRSYW5nZVBlcmNlbnRPZk5ldyAtIG9sZFJhbmdlO1xuICBtYXggKz0gb3ZlcmZsb3dCdWZmZXIgKiAobWF4T3ZlcmZsb3cgLyB0b3RhbE92ZXJGbG93KTtcbiAgbWluIC09IG92ZXJmbG93QnVmZmVyICogKG1pbk92ZXJmbG93IC8gdG90YWxPdmVyRmxvdyk7XG4gIHJldHVybiB7XG4gICAgbWluOiBtaW4sXG4gICAgbWF4OiBtYXhcbiAgfTtcbn1cblxuZnVuY3Rpb24gbmljZVNjYWxlRXh0ZW50KHNjYWxlLCBtb2RlbCkge1xuICB2YXIgZXh0ZW50ID0gZ2V0U2NhbGVFeHRlbnQoc2NhbGUsIG1vZGVsKTtcbiAgdmFyIGZpeE1pbiA9IG1vZGVsLmdldE1pbigpICE9IG51bGw7XG4gIHZhciBmaXhNYXggPSBtb2RlbC5nZXRNYXgoKSAhPSBudWxsO1xuICB2YXIgc3BsaXROdW1iZXIgPSBtb2RlbC5nZXQoJ3NwbGl0TnVtYmVyJyk7XG5cbiAgaWYgKHNjYWxlLnR5cGUgPT09ICdsb2cnKSB7XG4gICAgc2NhbGUuYmFzZSA9IG1vZGVsLmdldCgnbG9nQmFzZScpO1xuICB9XG5cbiAgdmFyIHNjYWxlVHlwZSA9IHNjYWxlLnR5cGU7XG4gIHNjYWxlLnNldEV4dGVudChleHRlbnRbMF0sIGV4dGVudFsxXSk7XG4gIHNjYWxlLm5pY2VFeHRlbnQoe1xuICAgIHNwbGl0TnVtYmVyOiBzcGxpdE51bWJlcixcbiAgICBmaXhNaW46IGZpeE1pbixcbiAgICBmaXhNYXg6IGZpeE1heCxcbiAgICBtaW5JbnRlcnZhbDogc2NhbGVUeXBlID09PSAnaW50ZXJ2YWwnIHx8IHNjYWxlVHlwZSA9PT0gJ3RpbWUnID8gbW9kZWwuZ2V0KCdtaW5JbnRlcnZhbCcpIDogbnVsbCxcbiAgICBtYXhJbnRlcnZhbDogc2NhbGVUeXBlID09PSAnaW50ZXJ2YWwnIHx8IHNjYWxlVHlwZSA9PT0gJ3RpbWUnID8gbW9kZWwuZ2V0KCdtYXhJbnRlcnZhbCcpIDogbnVsbFxuICB9KTsgLy8gSWYgc29tZSBvbmUgc3BlY2lmaWVkIHRoZSBtaW4sIG1heC4gQW5kIHRoZSBkZWZhdWx0IGNhbGN1bGF0ZWQgaW50ZXJ2YWxcbiAgLy8gaXMgbm90IGdvb2QgZW5vdWdoLiBIZSBjYW4gc3BlY2lmeSB0aGUgaW50ZXJ2YWwuIEl0IGlzIG9mdGVuIGFwcGVhcmVkXG4gIC8vIGluIGFuZ2xlIGF4aXMgd2l0aCBhbmdsZSAwIC0gMzYwLiBJbnRlcnZhbCBjYWxjdWxhdGVkIGluIGludGVydmFsIHNjYWxlIGlzIGhhcmRcbiAgLy8gdG8gYmUgNjAuXG4gIC8vIEZJWE1FXG5cbiAgdmFyIGludGVydmFsID0gbW9kZWwuZ2V0KCdpbnRlcnZhbCcpO1xuXG4gIGlmIChpbnRlcnZhbCAhPSBudWxsKSB7XG4gICAgc2NhbGUuc2V0SW50ZXJ2YWwgJiYgc2NhbGUuc2V0SW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICB9XG59XG4vKipcbiAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvbW9kZWwvTW9kZWx9IG1vZGVsXG4gKiBAcGFyYW0ge3N0cmluZ30gW2F4aXNUeXBlXSBEZWZhdWx0IHJldHJpZXZlIGZyb20gbW9kZWwudHlwZVxuICogQHJldHVybiB7bW9kdWxlOmVjaGFydHMvc2NhbGUvKn1cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZVNjYWxlQnlNb2RlbChtb2RlbCwgYXhpc1R5cGUpIHtcbiAgYXhpc1R5cGUgPSBheGlzVHlwZSB8fCBtb2RlbC5nZXQoJ3R5cGUnKTtcblxuICBpZiAoYXhpc1R5cGUpIHtcbiAgICBzd2l0Y2ggKGF4aXNUeXBlKSB7XG4gICAgICAvLyBCdWlsZGluIHNjYWxlXG4gICAgICBjYXNlICdjYXRlZ29yeSc6XG4gICAgICAgIHJldHVybiBuZXcgT3JkaW5hbFNjYWxlKG1vZGVsLmdldE9yZGluYWxNZXRhID8gbW9kZWwuZ2V0T3JkaW5hbE1ldGEoKSA6IG1vZGVsLmdldENhdGVnb3JpZXMoKSwgW0luZmluaXR5LCAtSW5maW5pdHldKTtcblxuICAgICAgY2FzZSAndmFsdWUnOlxuICAgICAgICByZXR1cm4gbmV3IEludGVydmFsU2NhbGUoKTtcbiAgICAgIC8vIEV4dGVuZGVkIHNjYWxlLCBsaWtlIHRpbWUgYW5kIGxvZ1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gKFNjYWxlLmdldENsYXNzKGF4aXNUeXBlKSB8fCBJbnRlcnZhbFNjYWxlKS5jcmVhdGUobW9kZWwpO1xuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBDaGVjayBpZiB0aGUgYXhpcyBjb3JzcyAwXG4gKi9cblxuXG5mdW5jdGlvbiBpZkF4aXNDcm9zc1plcm8oYXhpcykge1xuICB2YXIgZGF0YUV4dGVudCA9IGF4aXMuc2NhbGUuZ2V0RXh0ZW50KCk7XG4gIHZhciBtaW4gPSBkYXRhRXh0ZW50WzBdO1xuICB2YXIgbWF4ID0gZGF0YUV4dGVudFsxXTtcbiAgcmV0dXJuICEobWluID4gMCAmJiBtYXggPiAwIHx8IG1pbiA8IDAgJiYgbWF4IDwgMCk7XG59XG4vKipcbiAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvY29vcmQvQXhpc30gYXhpc1xuICogQHJldHVybiB7RnVuY3Rpb259IExhYmVsIGZvcm1hdHRlciBmdW5jdGlvbi5cbiAqICAgICAgICAgcGFyYW06IHtudW1iZXJ9IHRpY2tWYWx1ZSxcbiAqICAgICAgICAgcGFyYW06IHtudW1iZXJ9IGlkeCwgdGhlIGluZGV4IGluIGFsbCB0aWNrcy5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgIElmIGNhdGVnb3J5IGF4aXMsIHRoaXMgcGFyYW0gaXMgbm90IHJlcXVpZWQuXG4gKiAgICAgICAgIHJldHVybjoge3N0cmluZ30gbGFiZWwgc3RyaW5nLlxuICovXG5cblxuZnVuY3Rpb24gbWFrZUxhYmVsRm9ybWF0dGVyKGF4aXMpIHtcbiAgdmFyIGxhYmVsRm9ybWF0dGVyID0gYXhpcy5nZXRMYWJlbE1vZGVsKCkuZ2V0KCdmb3JtYXR0ZXInKTtcbiAgdmFyIGNhdGVnb3J5VGlja1N0YXJ0ID0gYXhpcy50eXBlID09PSAnY2F0ZWdvcnknID8gYXhpcy5zY2FsZS5nZXRFeHRlbnQoKVswXSA6IG51bGw7XG5cbiAgaWYgKHR5cGVvZiBsYWJlbEZvcm1hdHRlciA9PT0gJ3N0cmluZycpIHtcbiAgICBsYWJlbEZvcm1hdHRlciA9IGZ1bmN0aW9uICh0cGwpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHJldHVybiB0cGwucmVwbGFjZSgne3ZhbHVlfScsIHZhbCAhPSBudWxsID8gdmFsIDogJycpO1xuICAgICAgfTtcbiAgICB9KGxhYmVsRm9ybWF0dGVyKTsgLy8gQ29uc2lkZXIgZW1wdHkgYXJyYXlcblxuXG4gICAgcmV0dXJuIGxhYmVsRm9ybWF0dGVyO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBsYWJlbEZvcm1hdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGlja1ZhbHVlLCBpZHgpIHtcbiAgICAgIC8vIFRoZSBvcmlnaW5hbCBpbnRlbnRpb24gb2YgYGlkeGAgaXMgXCJ0aGUgaW5kZXggb2YgdGhlIHRpY2sgaW4gYWxsIHRpY2tzXCIuXG4gICAgICAvLyBCdXQgdGhlIHByZXZpb3VzIGltcGxlbWVudGF0aW9uIG9mIGNhdGVnb3J5IGF4aXMgZG8gbm90IGNvbnNpZGVyIHRoZVxuICAgICAgLy8gYGF4aXNMYWJlbC5pbnRlcnZhbGAsIHdoaWNoIGNhdXNlIHRoYXQsIGZvciBleGFtcGxlLCB0aGUgYGludGVydmFsYCBpc1xuICAgICAgLy8gYDFgLCB0aGVuIHRoZSB0aWNrcyBcIm5hbWU1XCIsIFwibmFtZTdcIiwgXCJuYW1lOVwiIGFyZSBkaXNwbGF5ZWQsIHdoZXJlIHRoZVxuICAgICAgLy8gY29ycmVzcG9uZGluZyBgaWR4YCBhcmUgYDBgLCBgMmAsIGA0YCwgYnV0IG5vdCBgMGAsIGAxYCwgYDJgLiBTbyB3ZSBrZWVwXG4gICAgICAvLyB0aGUgZGVmaW5pdGlvbiBoZXJlIGZvciBiYWNrIGNvbXBhdGliaWxpdHkuXG4gICAgICBpZiAoY2F0ZWdvcnlUaWNrU3RhcnQgIT0gbnVsbCkge1xuICAgICAgICBpZHggPSB0aWNrVmFsdWUgLSBjYXRlZ29yeVRpY2tTdGFydDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxhYmVsRm9ybWF0dGVyKGdldEF4aXNSYXdWYWx1ZShheGlzLCB0aWNrVmFsdWUpLCBpZHgpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0aWNrKSB7XG4gICAgICByZXR1cm4gYXhpcy5zY2FsZS5nZXRMYWJlbCh0aWNrKTtcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEF4aXNSYXdWYWx1ZShheGlzLCB2YWx1ZSkge1xuICAvLyBJbiBjYXRlZ29yeSBheGlzIHdpdGggZGF0YSB6b29tLCB0aWNrIGlzIG5vdCB0aGUgb3JpZ2luYWxcbiAgLy8gaW5kZXggb2YgYXhpcy5kYXRhLiBTbyB0aWNrIHNob3VsZCBub3QgYmUgZXhwb3NlZCB0byB1c2VyXG4gIC8vIGluIGNhdGVnb3J5IGF4aXMuXG4gIHJldHVybiBheGlzLnR5cGUgPT09ICdjYXRlZ29yeScgPyBheGlzLnNjYWxlLmdldExhYmVsKHZhbHVlKSA6IHZhbHVlO1xufVxuLyoqXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL2Nvb3JkL0F4aXN9IGF4aXNcbiAqIEByZXR1cm4ge21vZHVsZTp6cmVuZGVyL2NvcmUvQm91bmRpbmdSZWN0fSBCZSBudWxsL3VuZGVmaW5lZCBpZiBubyBsYWJlbHMuXG4gKi9cblxuXG5mdW5jdGlvbiBlc3RpbWF0ZUxhYmVsVW5pb25SZWN0KGF4aXMpIHtcbiAgdmFyIGF4aXNNb2RlbCA9IGF4aXMubW9kZWw7XG4gIHZhciBzY2FsZSA9IGF4aXMuc2NhbGU7XG5cbiAgaWYgKCFheGlzTW9kZWwuZ2V0KCdheGlzTGFiZWwuc2hvdycpIHx8IHNjYWxlLmlzQmxhbmsoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBpc0NhdGVnb3J5ID0gYXhpcy50eXBlID09PSAnY2F0ZWdvcnknO1xuICB2YXIgcmVhbE51bWJlclNjYWxlVGlja3M7XG4gIHZhciB0aWNrQ291bnQ7XG4gIHZhciBjYXRlZ29yeVNjYWxlRXh0ZW50ID0gc2NhbGUuZ2V0RXh0ZW50KCk7IC8vIE9wdGltaXplIGZvciBsYXJnZSBjYXRlZ29yeSBkYXRhLCBhdm9pZCBjYWxsIGBnZXRUaWNrcygpYC5cblxuICBpZiAoaXNDYXRlZ29yeSkge1xuICAgIHRpY2tDb3VudCA9IHNjYWxlLmNvdW50KCk7XG4gIH0gZWxzZSB7XG4gICAgcmVhbE51bWJlclNjYWxlVGlja3MgPSBzY2FsZS5nZXRUaWNrcygpO1xuICAgIHRpY2tDb3VudCA9IHJlYWxOdW1iZXJTY2FsZVRpY2tzLmxlbmd0aDtcbiAgfVxuXG4gIHZhciBheGlzTGFiZWxNb2RlbCA9IGF4aXMuZ2V0TGFiZWxNb2RlbCgpO1xuICB2YXIgbGFiZWxGb3JtYXR0ZXIgPSBtYWtlTGFiZWxGb3JtYXR0ZXIoYXhpcyk7XG4gIHZhciByZWN0O1xuICB2YXIgc3RlcCA9IDE7IC8vIFNpbXBsZSBvcHRpbWl6YXRpb24gZm9yIGxhcmdlIGFtb3VudCBvZiBsYWJlbHNcblxuICBpZiAodGlja0NvdW50ID4gNDApIHtcbiAgICBzdGVwID0gTWF0aC5jZWlsKHRpY2tDb3VudCAvIDQwKTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGlja0NvdW50OyBpICs9IHN0ZXApIHtcbiAgICB2YXIgdGlja1ZhbHVlID0gcmVhbE51bWJlclNjYWxlVGlja3MgPyByZWFsTnVtYmVyU2NhbGVUaWNrc1tpXSA6IGNhdGVnb3J5U2NhbGVFeHRlbnRbMF0gKyBpO1xuICAgIHZhciBsYWJlbCA9IGxhYmVsRm9ybWF0dGVyKHRpY2tWYWx1ZSk7XG4gICAgdmFyIHVucm90YXRlZFNpbmdsZVJlY3QgPSBheGlzTGFiZWxNb2RlbC5nZXRUZXh0UmVjdChsYWJlbCk7XG4gICAgdmFyIHNpbmdsZVJlY3QgPSByb3RhdGVUZXh0UmVjdCh1bnJvdGF0ZWRTaW5nbGVSZWN0LCBheGlzTGFiZWxNb2RlbC5nZXQoJ3JvdGF0ZScpIHx8IDApO1xuICAgIHJlY3QgPyByZWN0LnVuaW9uKHNpbmdsZVJlY3QpIDogcmVjdCA9IHNpbmdsZVJlY3Q7XG4gIH1cblxuICByZXR1cm4gcmVjdDtcbn1cblxuZnVuY3Rpb24gcm90YXRlVGV4dFJlY3QodGV4dFJlY3QsIHJvdGF0ZSkge1xuICB2YXIgcm90YXRlUmFkaWFucyA9IHJvdGF0ZSAqIE1hdGguUEkgLyAxODA7XG4gIHZhciBib3VuZGluZ0JveCA9IHRleHRSZWN0LnBsYWluKCk7XG4gIHZhciBiZWZvcmVXaWR0aCA9IGJvdW5kaW5nQm94LndpZHRoO1xuICB2YXIgYmVmb3JlSGVpZ2h0ID0gYm91bmRpbmdCb3guaGVpZ2h0O1xuICB2YXIgYWZ0ZXJXaWR0aCA9IGJlZm9yZVdpZHRoICogTWF0aC5jb3Mocm90YXRlUmFkaWFucykgKyBiZWZvcmVIZWlnaHQgKiBNYXRoLnNpbihyb3RhdGVSYWRpYW5zKTtcbiAgdmFyIGFmdGVySGVpZ2h0ID0gYmVmb3JlV2lkdGggKiBNYXRoLnNpbihyb3RhdGVSYWRpYW5zKSArIGJlZm9yZUhlaWdodCAqIE1hdGguY29zKHJvdGF0ZVJhZGlhbnMpO1xuICB2YXIgcm90YXRlZFJlY3QgPSBuZXcgQm91bmRpbmdSZWN0KGJvdW5kaW5nQm94LngsIGJvdW5kaW5nQm94LnksIGFmdGVyV2lkdGgsIGFmdGVySGVpZ2h0KTtcbiAgcmV0dXJuIHJvdGF0ZWRSZWN0O1xufVxuXG5leHBvcnRzLmdldFNjYWxlRXh0ZW50ID0gZ2V0U2NhbGVFeHRlbnQ7XG5leHBvcnRzLm5pY2VTY2FsZUV4dGVudCA9IG5pY2VTY2FsZUV4dGVudDtcbmV4cG9ydHMuY3JlYXRlU2NhbGVCeU1vZGVsID0gY3JlYXRlU2NhbGVCeU1vZGVsO1xuZXhwb3J0cy5pZkF4aXNDcm9zc1plcm8gPSBpZkF4aXNDcm9zc1plcm87XG5leHBvcnRzLm1ha2VMYWJlbEZvcm1hdHRlciA9IG1ha2VMYWJlbEZvcm1hdHRlcjtcbmV4cG9ydHMuZ2V0QXhpc1Jhd1ZhbHVlID0gZ2V0QXhpc1Jhd1ZhbHVlO1xuZXhwb3J0cy5lc3RpbWF0ZUxhYmVsVW5pb25SZWN0ID0gZXN0aW1hdGVMYWJlbFVuaW9uUmVjdDsiLCJ2YXIgenJVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxudmFyIGF4aXNIZWxwZXIgPSByZXF1aXJlKFwiLi9heGlzSGVscGVyXCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgX2RlZmF1bHQgPSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9yaWdpblxuICAgKiBAcmV0dXJuIHtudW1iZXJ8c3RyaW5nfSBtaW4gdmFsdWUgb3IgJ2RhdGFNaW4nIG9yIG51bGwvdW5kZWZpbmVkIChtZWFucyBhdXRvKSBvciBOYU5cbiAgICovXG4gIGdldE1pbjogZnVuY3Rpb24gKG9yaWdpbikge1xuICAgIHZhciBvcHRpb24gPSB0aGlzLm9wdGlvbjtcbiAgICB2YXIgbWluID0gIW9yaWdpbiAmJiBvcHRpb24ucmFuZ2VTdGFydCAhPSBudWxsID8gb3B0aW9uLnJhbmdlU3RhcnQgOiBvcHRpb24ubWluO1xuXG4gICAgaWYgKHRoaXMuYXhpcyAmJiBtaW4gIT0gbnVsbCAmJiBtaW4gIT09ICdkYXRhTWluJyAmJiB0eXBlb2YgbWluICE9PSAnZnVuY3Rpb24nICYmICF6clV0aWwuZXFOYU4obWluKSkge1xuICAgICAgbWluID0gdGhpcy5heGlzLnNjYWxlLnBhcnNlKG1pbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1pbjtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtib29sZWFufSBvcmlnaW5cbiAgICogQHJldHVybiB7bnVtYmVyfHN0cmluZ30gbWF4IHZhbHVlIG9yICdkYXRhTWF4JyBvciBudWxsL3VuZGVmaW5lZCAobWVhbnMgYXV0bykgb3IgTmFOXG4gICAqL1xuICBnZXRNYXg6IGZ1bmN0aW9uIChvcmlnaW4pIHtcbiAgICB2YXIgb3B0aW9uID0gdGhpcy5vcHRpb247XG4gICAgdmFyIG1heCA9ICFvcmlnaW4gJiYgb3B0aW9uLnJhbmdlRW5kICE9IG51bGwgPyBvcHRpb24ucmFuZ2VFbmQgOiBvcHRpb24ubWF4O1xuXG4gICAgaWYgKHRoaXMuYXhpcyAmJiBtYXggIT0gbnVsbCAmJiBtYXggIT09ICdkYXRhTWF4JyAmJiB0eXBlb2YgbWF4ICE9PSAnZnVuY3Rpb24nICYmICF6clV0aWwuZXFOYU4obWF4KSkge1xuICAgICAgbWF4ID0gdGhpcy5heGlzLnNjYWxlLnBhcnNlKG1heCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1heDtcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGdldE5lZWRDcm9zc1plcm86IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9uID0gdGhpcy5vcHRpb247XG4gICAgcmV0dXJuIG9wdGlvbi5yYW5nZVN0YXJ0ICE9IG51bGwgfHwgb3B0aW9uLnJhbmdlRW5kICE9IG51bGwgPyBmYWxzZSA6ICFvcHRpb24uc2NhbGU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNob3VsZCBiZSBpbXBsZW1lbnRlZCBieSBlYWNoIGF4aXMgbW9kZWwgaWYgbmVjZXNzYXJ5LlxuICAgKiBAcmV0dXJuIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Db21wb25lbnR9IGNvb3JkaW5hdGUgc3lzdGVtIG1vZGVsXG4gICAqL1xuICBnZXRDb29yZFN5c01vZGVsOiB6clV0aWwubm9vcCxcblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhbmdlU3RhcnQgQ2FuIG9ubHkgYmUgZmluaXRlIG51bWJlciBvciBudWxsL3VuZGVmaW5lZCBvciBOYU4uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYW5nZUVuZCBDYW4gb25seSBiZSBmaW5pdGUgbnVtYmVyIG9yIG51bGwvdW5kZWZpbmVkIG9yIE5hTi5cbiAgICovXG4gIHNldFJhbmdlOiBmdW5jdGlvbiAocmFuZ2VTdGFydCwgcmFuZ2VFbmQpIHtcbiAgICB0aGlzLm9wdGlvbi5yYW5nZVN0YXJ0ID0gcmFuZ2VTdGFydDtcbiAgICB0aGlzLm9wdGlvbi5yYW5nZUVuZCA9IHJhbmdlRW5kO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXNldCByYW5nZVxuICAgKi9cbiAgcmVzZXRSYW5nZTogZnVuY3Rpb24gKCkge1xuICAgIC8vIHJhbmdlU3RhcnQgYW5kIHJhbmdlRW5kIGlzIHJlYWRvbmx5LlxuICAgIHRoaXMub3B0aW9uLnJhbmdlU3RhcnQgPSB0aGlzLm9wdGlvbi5yYW5nZUVuZCA9IG51bGw7XG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciB6clV0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgdGV4dENvbnRhaW4gPSByZXF1aXJlKFwienJlbmRlci9saWIvY29udGFpbi90ZXh0XCIpO1xuXG52YXIgX21vZGVsID0gcmVxdWlyZShcIi4uL3V0aWwvbW9kZWxcIik7XG5cbnZhciBtYWtlSW5uZXIgPSBfbW9kZWwubWFrZUlubmVyO1xuXG52YXIgX2F4aXNIZWxwZXIgPSByZXF1aXJlKFwiLi9heGlzSGVscGVyXCIpO1xuXG52YXIgbWFrZUxhYmVsRm9ybWF0dGVyID0gX2F4aXNIZWxwZXIubWFrZUxhYmVsRm9ybWF0dGVyO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgaW5uZXIgPSBtYWtlSW5uZXIoKTtcbi8qKlxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXRzL2Nvb3JkL0F4aXN9IGF4aXNcbiAqIEByZXR1cm4ge09iamVjdH0ge1xuICogICAgIGxhYmVsczogW3tcbiAqICAgICAgICAgZm9ybWF0dGVkTGFiZWw6IHN0cmluZyxcbiAqICAgICAgICAgcmF3TGFiZWw6IHN0cmluZyxcbiAqICAgICAgICAgdGlja1ZhbHVlOiBudW1iZXJcbiAqICAgICB9LCAuLi5dLFxuICogICAgIGxhYmVsQ2F0ZWdvcnlJbnRlcnZhbDogbnVtYmVyXG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlQXhpc0xhYmVscyhheGlzKSB7XG4gIC8vIE9ubHkgb3JkaW5hbCBzY2FsZSBzdXBwb3J0IHRpY2sgaW50ZXJ2YWxcbiAgcmV0dXJuIGF4aXMudHlwZSA9PT0gJ2NhdGVnb3J5JyA/IG1ha2VDYXRlZ29yeUxhYmVscyhheGlzKSA6IG1ha2VSZWFsTnVtYmVyTGFiZWxzKGF4aXMpO1xufVxuLyoqXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhdHMvY29vcmQvQXhpc30gYXhpc1xuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Nb2RlbH0gdGlja01vZGVsIEZvciBleGFtcGxlLCBjYW4gYmUgYXhpc1RpY2ssIHNwbGl0TGluZSwgc3BsaXRBcmVhLlxuICogQHJldHVybiB7T2JqZWN0fSB7XG4gKiAgICAgdGlja3M6IEFycmF5LjxudW1iZXI+XG4gKiAgICAgdGlja0NhdGVnb3J5SW50ZXJ2YWw6IG51bWJlclxuICogfVxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQXhpc1RpY2tzKGF4aXMsIHRpY2tNb2RlbCkge1xuICAvLyBPbmx5IG9yZGluYWwgc2NhbGUgc3VwcG9ydCB0aWNrIGludGVydmFsXG4gIHJldHVybiBheGlzLnR5cGUgPT09ICdjYXRlZ29yeScgPyBtYWtlQ2F0ZWdvcnlUaWNrcyhheGlzLCB0aWNrTW9kZWwpIDoge1xuICAgIHRpY2tzOiBheGlzLnNjYWxlLmdldFRpY2tzKClcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFrZUNhdGVnb3J5TGFiZWxzKGF4aXMpIHtcbiAgdmFyIGxhYmVsTW9kZWwgPSBheGlzLmdldExhYmVsTW9kZWwoKTtcbiAgdmFyIHJlc3VsdCA9IG1ha2VDYXRlZ29yeUxhYmVsc0FjdHVhbGx5KGF4aXMsIGxhYmVsTW9kZWwpO1xuICByZXR1cm4gIWxhYmVsTW9kZWwuZ2V0KCdzaG93JykgfHwgYXhpcy5zY2FsZS5pc0JsYW5rKCkgPyB7XG4gICAgbGFiZWxzOiBbXSxcbiAgICBsYWJlbENhdGVnb3J5SW50ZXJ2YWw6IHJlc3VsdC5sYWJlbENhdGVnb3J5SW50ZXJ2YWxcbiAgfSA6IHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbWFrZUNhdGVnb3J5TGFiZWxzQWN0dWFsbHkoYXhpcywgbGFiZWxNb2RlbCkge1xuICB2YXIgbGFiZWxzQ2FjaGUgPSBnZXRMaXN0Q2FjaGUoYXhpcywgJ2xhYmVscycpO1xuICB2YXIgb3B0aW9uTGFiZWxJbnRlcnZhbCA9IGdldE9wdGlvbkNhdGVnb3J5SW50ZXJ2YWwobGFiZWxNb2RlbCk7XG4gIHZhciByZXN1bHQgPSBsaXN0Q2FjaGVHZXQobGFiZWxzQ2FjaGUsIG9wdGlvbkxhYmVsSW50ZXJ2YWwpO1xuXG4gIGlmIChyZXN1bHQpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgdmFyIGxhYmVscztcbiAgdmFyIG51bWVyaWNMYWJlbEludGVydmFsO1xuXG4gIGlmICh6clV0aWwuaXNGdW5jdGlvbihvcHRpb25MYWJlbEludGVydmFsKSkge1xuICAgIGxhYmVscyA9IG1ha2VMYWJlbHNCeUN1c3RvbWl6ZWRDYXRlZ29yeUludGVydmFsKGF4aXMsIG9wdGlvbkxhYmVsSW50ZXJ2YWwpO1xuICB9IGVsc2Uge1xuICAgIG51bWVyaWNMYWJlbEludGVydmFsID0gb3B0aW9uTGFiZWxJbnRlcnZhbCA9PT0gJ2F1dG8nID8gbWFrZUF1dG9DYXRlZ29yeUludGVydmFsKGF4aXMpIDogb3B0aW9uTGFiZWxJbnRlcnZhbDtcbiAgICBsYWJlbHMgPSBtYWtlTGFiZWxzQnlOdW1lcmljQ2F0ZWdvcnlJbnRlcnZhbChheGlzLCBudW1lcmljTGFiZWxJbnRlcnZhbCk7XG4gIH0gLy8gQ2FjaGUgdG8gYXZvaWQgY2FsbGluZyBpbnRlcnZhbCBmdW5jdGlvbiByZXBlYXRseS5cblxuXG4gIHJldHVybiBsaXN0Q2FjaGVTZXQobGFiZWxzQ2FjaGUsIG9wdGlvbkxhYmVsSW50ZXJ2YWwsIHtcbiAgICBsYWJlbHM6IGxhYmVscyxcbiAgICBsYWJlbENhdGVnb3J5SW50ZXJ2YWw6IG51bWVyaWNMYWJlbEludGVydmFsXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtYWtlQ2F0ZWdvcnlUaWNrcyhheGlzLCB0aWNrTW9kZWwpIHtcbiAgdmFyIHRpY2tzQ2FjaGUgPSBnZXRMaXN0Q2FjaGUoYXhpcywgJ3RpY2tzJyk7XG4gIHZhciBvcHRpb25UaWNrSW50ZXJ2YWwgPSBnZXRPcHRpb25DYXRlZ29yeUludGVydmFsKHRpY2tNb2RlbCk7XG4gIHZhciByZXN1bHQgPSBsaXN0Q2FjaGVHZXQodGlja3NDYWNoZSwgb3B0aW9uVGlja0ludGVydmFsKTtcblxuICBpZiAocmVzdWx0KSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHZhciB0aWNrcztcbiAgdmFyIHRpY2tDYXRlZ29yeUludGVydmFsOyAvLyBPcHRpbWl6ZSBmb3IgdGhlIGNhc2UgdGhhdCBsYXJnZSBjYXRlZ29yeSBkYXRhIGFuZCBubyBsYWJlbCBkaXNwbGF5ZWQsXG4gIC8vIHdlIHNob3VsZCBub3QgcmV0dXJuIGFsbCB0aWNrcy5cblxuICBpZiAoIXRpY2tNb2RlbC5nZXQoJ3Nob3cnKSB8fCBheGlzLnNjYWxlLmlzQmxhbmsoKSkge1xuICAgIHRpY2tzID0gW107XG4gIH1cblxuICBpZiAoenJVdGlsLmlzRnVuY3Rpb24ob3B0aW9uVGlja0ludGVydmFsKSkge1xuICAgIHRpY2tzID0gbWFrZUxhYmVsc0J5Q3VzdG9taXplZENhdGVnb3J5SW50ZXJ2YWwoYXhpcywgb3B0aW9uVGlja0ludGVydmFsLCB0cnVlKTtcbiAgfSAvLyBBbHdheXMgdXNlIGxhYmVsIGludGVydmFsIGJ5IGRlZmF1bHQgZGVzcGl0ZSBsYWJlbCBzaG93LiBDb25zaWRlciB0aGlzXG4gIC8vIHNjZW5hcmlvLCBVc2UgbXVsdGlwbGUgZ3JpZCB3aXRoIHRoZSB4QXhpcyBzeW5jLCBhbmQgb25seSBvbmUgeEF4aXMgc2hvd3NcbiAgLy8gbGFiZWxzLiBgc3BsaXRMaW5lYCBhbmQgYGF4aXNUaWNrYCBzaG91bGQgYmUgY29uc2lzdGVudCBpbiB0aGlzIGNhc2UuXG4gIGVsc2UgaWYgKG9wdGlvblRpY2tJbnRlcnZhbCA9PT0gJ2F1dG8nKSB7XG4gICAgICB2YXIgbGFiZWxzUmVzdWx0ID0gbWFrZUNhdGVnb3J5TGFiZWxzQWN0dWFsbHkoYXhpcywgYXhpcy5nZXRMYWJlbE1vZGVsKCkpO1xuICAgICAgdGlja0NhdGVnb3J5SW50ZXJ2YWwgPSBsYWJlbHNSZXN1bHQubGFiZWxDYXRlZ29yeUludGVydmFsO1xuICAgICAgdGlja3MgPSB6clV0aWwubWFwKGxhYmVsc1Jlc3VsdC5sYWJlbHMsIGZ1bmN0aW9uIChsYWJlbEl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGxhYmVsSXRlbS50aWNrVmFsdWU7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGlja0NhdGVnb3J5SW50ZXJ2YWwgPSBvcHRpb25UaWNrSW50ZXJ2YWw7XG4gICAgICB0aWNrcyA9IG1ha2VMYWJlbHNCeU51bWVyaWNDYXRlZ29yeUludGVydmFsKGF4aXMsIHRpY2tDYXRlZ29yeUludGVydmFsLCB0cnVlKTtcbiAgICB9IC8vIENhY2hlIHRvIGF2b2lkIGNhbGxpbmcgaW50ZXJ2YWwgZnVuY3Rpb24gcmVwZWF0bHkuXG5cblxuICByZXR1cm4gbGlzdENhY2hlU2V0KHRpY2tzQ2FjaGUsIG9wdGlvblRpY2tJbnRlcnZhbCwge1xuICAgIHRpY2tzOiB0aWNrcyxcbiAgICB0aWNrQ2F0ZWdvcnlJbnRlcnZhbDogdGlja0NhdGVnb3J5SW50ZXJ2YWxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VSZWFsTnVtYmVyTGFiZWxzKGF4aXMpIHtcbiAgdmFyIHRpY2tzID0gYXhpcy5zY2FsZS5nZXRUaWNrcygpO1xuICB2YXIgbGFiZWxGb3JtYXR0ZXIgPSBtYWtlTGFiZWxGb3JtYXR0ZXIoYXhpcyk7XG4gIHJldHVybiB7XG4gICAgbGFiZWxzOiB6clV0aWwubWFwKHRpY2tzLCBmdW5jdGlvbiAodGlja1ZhbHVlLCBpZHgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZvcm1hdHRlZExhYmVsOiBsYWJlbEZvcm1hdHRlcih0aWNrVmFsdWUsIGlkeCksXG4gICAgICAgIHJhd0xhYmVsOiBheGlzLnNjYWxlLmdldExhYmVsKHRpY2tWYWx1ZSksXG4gICAgICAgIHRpY2tWYWx1ZTogdGlja1ZhbHVlXG4gICAgICB9O1xuICAgIH0pXG4gIH07XG59IC8vIExhcmdlIGNhdGVnb3J5IGRhdGEgY2FsY3VsYXRpb24gaXMgcGVyZm9ybWVuY2Ugc2Vuc2l0aXZlLCBhbmQgdGlja3MgYW5kIGxhYmVsXG4vLyBwcm9iYWJseSBiZSBmZXRjaGVkIGJ5IG11bHRpcGxlIHRpbWVzLiBTbyB3ZSBjYWNoZSB0aGUgcmVzdWx0LlxuLy8gYXhpcyBpcyBjcmVhdGVkIGVhY2ggdGltZSBkdXJpbmcgYSBlYyBwcm9jZXNzLCBzbyB3ZSBkbyBub3QgbmVlZCB0byBjbGVhciBjYWNoZS5cblxuXG5mdW5jdGlvbiBnZXRMaXN0Q2FjaGUoYXhpcywgcHJvcCkge1xuICAvLyBCZWNhdXNlIGtleSBjYW4gYmUgZnVuY2l0b24sIGFuZCBjYWNoZSBzaXplIGFsd2F5cyBiZSBzbWFsbCwgd2UgdXNlIGFycmF5IGNhY2hlLlxuICByZXR1cm4gaW5uZXIoYXhpcylbcHJvcF0gfHwgKGlubmVyKGF4aXMpW3Byb3BdID0gW10pO1xufVxuXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoY2FjaGUsIGtleSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhY2hlLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGNhY2hlW2ldLmtleSA9PT0ga2V5KSB7XG4gICAgICByZXR1cm4gY2FjaGVbaV0udmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChjYWNoZSwga2V5LCB2YWx1ZSkge1xuICBjYWNoZS5wdXNoKHtcbiAgICBrZXk6IGtleSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gbWFrZUF1dG9DYXRlZ29yeUludGVydmFsKGF4aXMpIHtcbiAgdmFyIHJlc3VsdCA9IGlubmVyKGF4aXMpLmF1dG9JbnRlcnZhbDtcbiAgcmV0dXJuIHJlc3VsdCAhPSBudWxsID8gcmVzdWx0IDogaW5uZXIoYXhpcykuYXV0b0ludGVydmFsID0gYXhpcy5jYWxjdWxhdGVDYXRlZ29yeUludGVydmFsKCk7XG59XG4vKipcbiAqIENhbGN1bGF0ZSBpbnRlcnZhbCBmb3IgY2F0ZWdvcnkgYXhpcyB0aWNrcyBhbmQgbGFiZWxzLlxuICogVG8gZ2V0IHByZWNpc2UgcmVzdWx0LCBhdCBsZWFzdCBvbmUgb2YgYGdldFJvdGF0ZWAgYW5kIGBpc0hvcml6b250YWxgXG4gKiBzaG91bGQgYmUgaW1wbGVtZW50ZWQgaW4gYXhpcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUNhdGVnb3J5SW50ZXJ2YWwoYXhpcykge1xuICB2YXIgcGFyYW1zID0gZmV0Y2hBdXRvQ2F0ZWdvcnlJbnRlcnZhbENhbGN1bGF0aW9uUGFyYW1zKGF4aXMpO1xuICB2YXIgbGFiZWxGb3JtYXR0ZXIgPSBtYWtlTGFiZWxGb3JtYXR0ZXIoYXhpcyk7XG4gIHZhciByb3RhdGlvbiA9IChwYXJhbXMuYXhpc1JvdGF0ZSAtIHBhcmFtcy5sYWJlbFJvdGF0ZSkgLyAxODAgKiBNYXRoLlBJO1xuICB2YXIgb3JkaW5hbFNjYWxlID0gYXhpcy5zY2FsZTtcbiAgdmFyIG9yZGluYWxFeHRlbnQgPSBvcmRpbmFsU2NhbGUuZ2V0RXh0ZW50KCk7IC8vIFByb3ZpZGluZyB0aGlzIG1ldGhvZCBpcyBmb3Igb3B0aW1pemF0aW9uOlxuICAvLyBhdm9pZCBnZW5lcmF0aW5nIGEgbG9uZyBhcnJheSBieSBgZ2V0VGlja3NgXG4gIC8vIGluIGxhcmdlIGNhdGVnb3J5IGRhdGEgY2FzZS5cblxuICB2YXIgdGlja0NvdW50ID0gb3JkaW5hbFNjYWxlLmNvdW50KCk7XG5cbiAgaWYgKG9yZGluYWxFeHRlbnRbMV0gLSBvcmRpbmFsRXh0ZW50WzBdIDwgMSkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFyIHN0ZXAgPSAxOyAvLyBTaW1wbGUgb3B0aW1pemF0aW9uLiBFbXBpcmljYWwgdmFsdWU6IHRpY2sgY291bnQgc2hvdWxkIGxlc3MgdGhhbiA0MC5cblxuICBpZiAodGlja0NvdW50ID4gNDApIHtcbiAgICBzdGVwID0gTWF0aC5tYXgoMSwgTWF0aC5mbG9vcih0aWNrQ291bnQgLyA0MCkpO1xuICB9XG5cbiAgdmFyIHRpY2tWYWx1ZSA9IG9yZGluYWxFeHRlbnRbMF07XG4gIHZhciB1bml0U3BhbiA9IGF4aXMuZGF0YVRvQ29vcmQodGlja1ZhbHVlICsgMSkgLSBheGlzLmRhdGFUb0Nvb3JkKHRpY2tWYWx1ZSk7XG4gIHZhciB1bml0VyA9IE1hdGguYWJzKHVuaXRTcGFuICogTWF0aC5jb3Mocm90YXRpb24pKTtcbiAgdmFyIHVuaXRIID0gTWF0aC5hYnModW5pdFNwYW4gKiBNYXRoLnNpbihyb3RhdGlvbikpO1xuICB2YXIgbWF4VyA9IDA7XG4gIHZhciBtYXhIID0gMDsgLy8gQ2F1dGlvbjogUGVyZm9ybWFuY2Ugc2Vuc2l0aXZlIGZvciBsYXJnZSBjYXRlZ29yeSBkYXRhLlxuICAvLyBDb25zaWRlciBkYXRhWm9vbSwgd2Ugc2hvdWxkIG1ha2UgYXBwcm9wcmlhdGUgc3RlcCB0byBhdm9pZCBPKG4pIGxvb3AuXG5cbiAgZm9yICg7IHRpY2tWYWx1ZSA8PSBvcmRpbmFsRXh0ZW50WzFdOyB0aWNrVmFsdWUgKz0gc3RlcCkge1xuICAgIHZhciB3aWR0aCA9IDA7XG4gICAgdmFyIGhlaWdodCA9IDA7IC8vIFBvbGFyIGlzIGFsc28gY2FsY3VsYXRlZCBpbiBhc3N1bXB0aXZlIGxpbmVhciBsYXlvdXQgaGVyZS5cbiAgICAvLyBOb3QgcHJlY2lzZSwgZG8gbm90IGNvbnNpZGVyIGFsaWduIGFuZCB2ZXJ0aWNhbCBhbGlnblxuICAgIC8vIGFuZCBlYWNoIGRpc3RhbmNlIGZyb20gYXhpcyBsaW5lIHlldC5cblxuICAgIHZhciByZWN0ID0gdGV4dENvbnRhaW4uZ2V0Qm91bmRpbmdSZWN0KGxhYmVsRm9ybWF0dGVyKHRpY2tWYWx1ZSksIHBhcmFtcy5mb250LCAnY2VudGVyJywgJ3RvcCcpOyAvLyBNYWdpYyBudW1iZXJcblxuICAgIHdpZHRoID0gcmVjdC53aWR0aCAqIDEuMztcbiAgICBoZWlnaHQgPSByZWN0LmhlaWdodCAqIDEuMzsgLy8gTWluIHNpemUsIHZvaWQgbG9uZyBsb29wLlxuXG4gICAgbWF4VyA9IE1hdGgubWF4KG1heFcsIHdpZHRoLCA3KTtcbiAgICBtYXhIID0gTWF0aC5tYXgobWF4SCwgaGVpZ2h0LCA3KTtcbiAgfVxuXG4gIHZhciBkdyA9IG1heFcgLyB1bml0VztcbiAgdmFyIGRoID0gbWF4SCAvIHVuaXRIOyAvLyAwLzAgaXMgTmFOLCAxLzAgaXMgSW5maW5pdHkuXG5cbiAgaXNOYU4oZHcpICYmIChkdyA9IEluZmluaXR5KTtcbiAgaXNOYU4oZGgpICYmIChkaCA9IEluZmluaXR5KTtcbiAgdmFyIGludGVydmFsID0gTWF0aC5tYXgoMCwgTWF0aC5mbG9vcihNYXRoLm1pbihkdywgZGgpKSk7XG4gIHZhciBjYWNoZSA9IGlubmVyKGF4aXMubW9kZWwpO1xuICB2YXIgbGFzdEF1dG9JbnRlcnZhbCA9IGNhY2hlLmxhc3RBdXRvSW50ZXJ2YWw7XG4gIHZhciBsYXN0VGlja0NvdW50ID0gY2FjaGUubGFzdFRpY2tDb3VudDsgLy8gVXNlIGNhY2hlIHRvIGtlZXAgaW50ZXJ2YWwgc3RhYmxlIHdoaWxlIG1vdmluZyB6b29tIHdpbmRvdyxcbiAgLy8gb3RoZXJ3aXNlIHRoZSBjYWxjdWxhdGVkIGludGVydmFsIG1pZ2h0IGppdHRlciB3aGVuIHRoZSB6b29tXG4gIC8vIHdpbmRvdyBzaXplIGlzIGNsb3NlIHRvIHRoZSBpbnRlcnZhbC1jaGFuZ2luZyBzaXplLlxuXG4gIGlmIChsYXN0QXV0b0ludGVydmFsICE9IG51bGwgJiYgbGFzdFRpY2tDb3VudCAhPSBudWxsICYmIE1hdGguYWJzKGxhc3RBdXRvSW50ZXJ2YWwgLSBpbnRlcnZhbCkgPD0gMSAmJiBNYXRoLmFicyhsYXN0VGlja0NvdW50IC0gdGlja0NvdW50KSA8PSAxIC8vIEFsd2F5cyBjaG9vc2UgdGhlIGJpZ2dlciBvbmUsIG90aGVyd2lzZSB0aGUgY3JpdGljYWxcbiAgLy8gcG9pbnQgaXMgbm90IHRoZSBzYW1lIHdoZW4gem9vbWluZyBpbiBvciB6b29taW5nIG91dC5cbiAgJiYgbGFzdEF1dG9JbnRlcnZhbCA+IGludGVydmFsKSB7XG4gICAgaW50ZXJ2YWwgPSBsYXN0QXV0b0ludGVydmFsO1xuICB9IC8vIE9ubHkgdXBkYXRlIGNhY2hlIGlmIGNhY2hlIG5vdCB1c2VkLCBvdGhlcndpc2UgdGhlXG4gIC8vIGNoYW5naW5nIG9mIGludGVydmFsIGlzIHRvbyBpbnNlbnNpdGl2ZS5cbiAgZWxzZSB7XG4gICAgICBjYWNoZS5sYXN0VGlja0NvdW50ID0gdGlja0NvdW50O1xuICAgICAgY2FjaGUubGFzdEF1dG9JbnRlcnZhbCA9IGludGVydmFsO1xuICAgIH1cblxuICByZXR1cm4gaW50ZXJ2YWw7XG59XG5cbmZ1bmN0aW9uIGZldGNoQXV0b0NhdGVnb3J5SW50ZXJ2YWxDYWxjdWxhdGlvblBhcmFtcyhheGlzKSB7XG4gIHZhciBsYWJlbE1vZGVsID0gYXhpcy5nZXRMYWJlbE1vZGVsKCk7XG4gIHJldHVybiB7XG4gICAgYXhpc1JvdGF0ZTogYXhpcy5nZXRSb3RhdGUgPyBheGlzLmdldFJvdGF0ZSgpIDogYXhpcy5pc0hvcml6b250YWwgJiYgIWF4aXMuaXNIb3Jpem9udGFsKCkgPyA5MCA6IDAsXG4gICAgbGFiZWxSb3RhdGU6IGxhYmVsTW9kZWwuZ2V0KCdyb3RhdGUnKSB8fCAwLFxuICAgIGZvbnQ6IGxhYmVsTW9kZWwuZ2V0Rm9udCgpXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1ha2VMYWJlbHNCeU51bWVyaWNDYXRlZ29yeUludGVydmFsKGF4aXMsIGNhdGVnb3J5SW50ZXJ2YWwsIG9ubHlUaWNrKSB7XG4gIHZhciBsYWJlbEZvcm1hdHRlciA9IG1ha2VMYWJlbEZvcm1hdHRlcihheGlzKTtcbiAgdmFyIG9yZGluYWxTY2FsZSA9IGF4aXMuc2NhbGU7XG4gIHZhciBvcmRpbmFsRXh0ZW50ID0gb3JkaW5hbFNjYWxlLmdldEV4dGVudCgpO1xuICB2YXIgbGFiZWxNb2RlbCA9IGF4aXMuZ2V0TGFiZWxNb2RlbCgpO1xuICB2YXIgcmVzdWx0ID0gW107IC8vIFRPRE86IGF4aXNUeXBlOiBvcmRpbmFsVGltZSwgcGljayB0aGUgdGljayBmcm9tIGVhY2ggbW9udGgvZGF5L3llYXIvLi4uXG5cbiAgdmFyIHN0ZXAgPSBNYXRoLm1heCgoY2F0ZWdvcnlJbnRlcnZhbCB8fCAwKSArIDEsIDEpO1xuICB2YXIgc3RhcnRUaWNrID0gb3JkaW5hbEV4dGVudFswXTtcbiAgdmFyIHRpY2tDb3VudCA9IG9yZGluYWxTY2FsZS5jb3VudCgpOyAvLyBDYWxjdWxhdGUgc3RhcnQgdGljayBiYXNlZCBvbiB6ZXJvIGlmIHBvc3NpYmxlIHRvIGtlZXAgbGFiZWwgY29uc2lzdGVudFxuICAvLyB3aGlsZSB6b29taW5nIGFuZCBtb3Zpbmcgd2hpbGUgaW50ZXJ2YWwgPiAwLiBPdGhlcndpc2UgdGhlIHNlbGVjdGlvblxuICAvLyBvZiBkaXNwbGF5YWJsZSB0aWNrcyBhbmQgc3ltYm9scyBwcm9iYWJseSBrZWVwIGNoYW5naW5nLlxuICAvLyAzIGlzIGVtcGlyaWNhbCB2YWx1ZS5cblxuICBpZiAoc3RhcnRUaWNrICE9PSAwICYmIHN0ZXAgPiAxICYmIHRpY2tDb3VudCAvIHN0ZXAgPiAyKSB7XG4gICAgc3RhcnRUaWNrID0gTWF0aC5yb3VuZChNYXRoLmNlaWwoc3RhcnRUaWNrIC8gc3RlcCkgKiBzdGVwKTtcbiAgfSAvLyAoMSkgT25seSBhZGQgbWluIG1heCBsYWJlbCBoZXJlIGJ1dCBsZWF2ZSBvdmVybGFwIGNoZWNraW5nXG4gIC8vIHRvIHJlbmRlciBzdGFnZSwgd2hpY2ggYWxzbyBlbnN1cmUgdGhlIHJldHVybmVkIGxpc3RcbiAgLy8gc3VpdGFibGUgZm9yIHNwbGl0TGluZSBhbmQgc3BsaXRBcmVhIHJlbmRlcmluZy5cbiAgLy8gKDIpIFNjYWxlcyBleGNlcHQgY2F0ZWdvcnkgYWx3YXlzIGNvbnRhaW4gbWluIG1heCBsYWJlbCBzb1xuICAvLyBkbyBub3QgbmVlZCB0byBwZXJmb3JtIHRoaXMgcHJvY2Vzcy5cblxuXG4gIHZhciBzaG93TWluTWF4ID0ge1xuICAgIG1pbjogbGFiZWxNb2RlbC5nZXQoJ3Nob3dNaW5MYWJlbCcpLFxuICAgIG1heDogbGFiZWxNb2RlbC5nZXQoJ3Nob3dNYXhMYWJlbCcpXG4gIH07XG5cbiAgaWYgKHNob3dNaW5NYXgubWluICYmIHN0YXJ0VGljayAhPT0gb3JkaW5hbEV4dGVudFswXSkge1xuICAgIGFkZEl0ZW0ob3JkaW5hbEV4dGVudFswXSk7XG4gIH0gLy8gT3B0aW1pemU6IGF2b2lkIGdlbmVyYXRpbmcgbGFyZ2UgYXJyYXkgYnkgYG9yZGluYWxTY2FsZS5nZXRUaWNrcygpYC5cblxuXG4gIHZhciB0aWNrVmFsdWUgPSBzdGFydFRpY2s7XG5cbiAgZm9yICg7IHRpY2tWYWx1ZSA8PSBvcmRpbmFsRXh0ZW50WzFdOyB0aWNrVmFsdWUgKz0gc3RlcCkge1xuICAgIGFkZEl0ZW0odGlja1ZhbHVlKTtcbiAgfVxuXG4gIGlmIChzaG93TWluTWF4Lm1heCAmJiB0aWNrVmFsdWUgIT09IG9yZGluYWxFeHRlbnRbMV0pIHtcbiAgICBhZGRJdGVtKG9yZGluYWxFeHRlbnRbMV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkSXRlbSh0VmFsKSB7XG4gICAgcmVzdWx0LnB1c2gob25seVRpY2sgPyB0VmFsIDoge1xuICAgICAgZm9ybWF0dGVkTGFiZWw6IGxhYmVsRm9ybWF0dGVyKHRWYWwpLFxuICAgICAgcmF3TGFiZWw6IG9yZGluYWxTY2FsZS5nZXRMYWJlbCh0VmFsKSxcbiAgICAgIHRpY2tWYWx1ZTogdFZhbFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0gLy8gV2hlbiBpbnRlcnZhbCBpcyBmdW5jdGlvbiwgdGhlIHJlc3VsdCBgZmFsc2VgIG1lYW5zIGlnbm9yZSB0aGUgdGljay5cbi8vIEl0IGlzIHRpbWUgY29uc3VtaW5nIGZvciBsYXJnZSBjYXRlZ29yeSBkYXRhLlxuXG5cbmZ1bmN0aW9uIG1ha2VMYWJlbHNCeUN1c3RvbWl6ZWRDYXRlZ29yeUludGVydmFsKGF4aXMsIGNhdGVnb3J5SW50ZXJ2YWwsIG9ubHlUaWNrKSB7XG4gIHZhciBvcmRpbmFsU2NhbGUgPSBheGlzLnNjYWxlO1xuICB2YXIgbGFiZWxGb3JtYXR0ZXIgPSBtYWtlTGFiZWxGb3JtYXR0ZXIoYXhpcyk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgenJVdGlsLmVhY2gob3JkaW5hbFNjYWxlLmdldFRpY2tzKCksIGZ1bmN0aW9uICh0aWNrVmFsdWUpIHtcbiAgICB2YXIgcmF3TGFiZWwgPSBvcmRpbmFsU2NhbGUuZ2V0TGFiZWwodGlja1ZhbHVlKTtcblxuICAgIGlmIChjYXRlZ29yeUludGVydmFsKHRpY2tWYWx1ZSwgcmF3TGFiZWwpKSB7XG4gICAgICByZXN1bHQucHVzaChvbmx5VGljayA/IHRpY2tWYWx1ZSA6IHtcbiAgICAgICAgZm9ybWF0dGVkTGFiZWw6IGxhYmVsRm9ybWF0dGVyKHRpY2tWYWx1ZSksXG4gICAgICAgIHJhd0xhYmVsOiByYXdMYWJlbCxcbiAgICAgICAgdGlja1ZhbHVlOiB0aWNrVmFsdWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59IC8vIENhbiBiZSBudWxsfCdhdXRvJ3xudW1iZXJ8ZnVuY3Rpb25cblxuXG5mdW5jdGlvbiBnZXRPcHRpb25DYXRlZ29yeUludGVydmFsKG1vZGVsKSB7XG4gIHZhciBpbnRlcnZhbCA9IG1vZGVsLmdldCgnaW50ZXJ2YWwnKTtcbiAgcmV0dXJuIGludGVydmFsID09IG51bGwgPyAnYXV0bycgOiBpbnRlcnZhbDtcbn1cblxuZXhwb3J0cy5jcmVhdGVBeGlzTGFiZWxzID0gY3JlYXRlQXhpc0xhYmVscztcbmV4cG9ydHMuY3JlYXRlQXhpc1RpY2tzID0gY3JlYXRlQXhpc1RpY2tzO1xuZXhwb3J0cy5jYWxjdWxhdGVDYXRlZ29yeUludGVydmFsID0gY2FsY3VsYXRlQ2F0ZWdvcnlJbnRlcnZhbDsiLCJ2YXIgenJVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG4vKipcbiAqIENhbiBvbmx5IGJlIGNhbGxlZCBhZnRlciBjb29yZGluYXRlIHN5c3RlbSBjcmVhdGlvbiBzdGFnZS5cbiAqIChDYW4gYmUgY2FsbGVkIGJlZm9yZSBjb29yZGluYXRlIHN5c3RlbSB1cGRhdGUgc3RhZ2UpLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHQge2xhYmVsSW5zaWRlfVxuICogQHJldHVybiB7T2JqZWN0fSB7XG4gKiAgcG9zaXRpb24sIHJvdGF0aW9uLCBsYWJlbERpcmVjdGlvbiwgbGFiZWxPZmZzZXQsXG4gKiAgdGlja0RpcmVjdGlvbiwgbGFiZWxSb3RhdGUsIHoyXG4gKiB9XG4gKi9cbmZ1bmN0aW9uIGxheW91dChncmlkTW9kZWwsIGF4aXNNb2RlbCwgb3B0KSB7XG4gIG9wdCA9IG9wdCB8fCB7fTtcbiAgdmFyIGdyaWQgPSBncmlkTW9kZWwuY29vcmRpbmF0ZVN5c3RlbTtcbiAgdmFyIGF4aXMgPSBheGlzTW9kZWwuYXhpcztcbiAgdmFyIGxheW91dCA9IHt9O1xuICB2YXIgb3RoZXJBeGlzT25aZXJvT2YgPSBheGlzLmdldEF4ZXNPblplcm9PZigpWzBdO1xuICB2YXIgcmF3QXhpc1Bvc2l0aW9uID0gYXhpcy5wb3NpdGlvbjtcbiAgdmFyIGF4aXNQb3NpdGlvbiA9IG90aGVyQXhpc09uWmVyb09mID8gJ29uWmVybycgOiByYXdBeGlzUG9zaXRpb247XG4gIHZhciBheGlzRGltID0gYXhpcy5kaW07XG4gIHZhciByZWN0ID0gZ3JpZC5nZXRSZWN0KCk7XG4gIHZhciByZWN0Qm91bmQgPSBbcmVjdC54LCByZWN0LnggKyByZWN0LndpZHRoLCByZWN0LnksIHJlY3QueSArIHJlY3QuaGVpZ2h0XTtcbiAgdmFyIGlkeCA9IHtcbiAgICBsZWZ0OiAwLFxuICAgIHJpZ2h0OiAxLFxuICAgIHRvcDogMCxcbiAgICBib3R0b206IDEsXG4gICAgb25aZXJvOiAyXG4gIH07XG4gIHZhciBheGlzT2Zmc2V0ID0gYXhpc01vZGVsLmdldCgnb2Zmc2V0JykgfHwgMDtcbiAgdmFyIHBvc0JvdW5kID0gYXhpc0RpbSA9PT0gJ3gnID8gW3JlY3RCb3VuZFsyXSAtIGF4aXNPZmZzZXQsIHJlY3RCb3VuZFszXSArIGF4aXNPZmZzZXRdIDogW3JlY3RCb3VuZFswXSAtIGF4aXNPZmZzZXQsIHJlY3RCb3VuZFsxXSArIGF4aXNPZmZzZXRdO1xuXG4gIGlmIChvdGhlckF4aXNPblplcm9PZikge1xuICAgIHZhciBvblplcm9Db29yZCA9IG90aGVyQXhpc09uWmVyb09mLnRvR2xvYmFsQ29vcmQob3RoZXJBeGlzT25aZXJvT2YuZGF0YVRvQ29vcmQoMCkpO1xuICAgIHBvc0JvdW5kW2lkeFsnb25aZXJvJ11dID0gTWF0aC5tYXgoTWF0aC5taW4ob25aZXJvQ29vcmQsIHBvc0JvdW5kWzFdKSwgcG9zQm91bmRbMF0pO1xuICB9IC8vIEF4aXMgcG9zaXRpb25cblxuXG4gIGxheW91dC5wb3NpdGlvbiA9IFtheGlzRGltID09PSAneScgPyBwb3NCb3VuZFtpZHhbYXhpc1Bvc2l0aW9uXV0gOiByZWN0Qm91bmRbMF0sIGF4aXNEaW0gPT09ICd4JyA/IHBvc0JvdW5kW2lkeFtheGlzUG9zaXRpb25dXSA6IHJlY3RCb3VuZFszXV07IC8vIEF4aXMgcm90YXRpb25cblxuICBsYXlvdXQucm90YXRpb24gPSBNYXRoLlBJIC8gMiAqIChheGlzRGltID09PSAneCcgPyAwIDogMSk7IC8vIFRpY2sgYW5kIGxhYmVsIGRpcmVjdGlvbiwgeCB5IGlzIGF4aXNEaW1cblxuICB2YXIgZGlyTWFwID0ge1xuICAgIHRvcDogLTEsXG4gICAgYm90dG9tOiAxLFxuICAgIGxlZnQ6IC0xLFxuICAgIHJpZ2h0OiAxXG4gIH07XG4gIGxheW91dC5sYWJlbERpcmVjdGlvbiA9IGxheW91dC50aWNrRGlyZWN0aW9uID0gbGF5b3V0Lm5hbWVEaXJlY3Rpb24gPSBkaXJNYXBbcmF3QXhpc1Bvc2l0aW9uXTtcbiAgbGF5b3V0LmxhYmVsT2Zmc2V0ID0gb3RoZXJBeGlzT25aZXJvT2YgPyBwb3NCb3VuZFtpZHhbcmF3QXhpc1Bvc2l0aW9uXV0gLSBwb3NCb3VuZFtpZHhbJ29uWmVybyddXSA6IDA7XG5cbiAgaWYgKGF4aXNNb2RlbC5nZXQoJ2F4aXNUaWNrLmluc2lkZScpKSB7XG4gICAgbGF5b3V0LnRpY2tEaXJlY3Rpb24gPSAtbGF5b3V0LnRpY2tEaXJlY3Rpb247XG4gIH1cblxuICBpZiAoenJVdGlsLnJldHJpZXZlKG9wdC5sYWJlbEluc2lkZSwgYXhpc01vZGVsLmdldCgnYXhpc0xhYmVsLmluc2lkZScpKSkge1xuICAgIGxheW91dC5sYWJlbERpcmVjdGlvbiA9IC1sYXlvdXQubGFiZWxEaXJlY3Rpb247XG4gIH0gLy8gU3BlY2lhbCBsYWJlbCByb3RhdGlvblxuXG5cbiAgdmFyIGxhYmVsUm90YXRlID0gYXhpc01vZGVsLmdldCgnYXhpc0xhYmVsLnJvdGF0ZScpO1xuICBsYXlvdXQubGFiZWxSb3RhdGUgPSBheGlzUG9zaXRpb24gPT09ICd0b3AnID8gLWxhYmVsUm90YXRlIDogbGFiZWxSb3RhdGU7IC8vIE92ZXIgc3BsaXRMaW5lIGFuZCBzcGxpdEFyZWFcblxuICBsYXlvdXQuejIgPSAxO1xuICByZXR1cm4gbGF5b3V0O1xufVxuXG5leHBvcnRzLmxheW91dCA9IGxheW91dDsiLCJ2YXIgQm91bmRpbmdSZWN0ID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvQm91bmRpbmdSZWN0XCIpO1xuXG52YXIgYmJveCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL2Jib3hcIik7XG5cbnZhciB2ZWMyID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdmVjdG9yXCIpO1xuXG52YXIgcG9seWdvbkNvbnRhaW4gPSByZXF1aXJlKFwienJlbmRlci9saWIvY29udGFpbi9wb2x5Z29uXCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbi8qKlxuICogQG1vZHVsZSBlY2hhcnRzL2Nvb3JkL2dlby9SZWdpb25cbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge0FycmF5fSBnZW9tZXRyaWVzXG4gKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBjcFxuICovXG5mdW5jdGlvbiBSZWdpb24obmFtZSwgZ2VvbWV0cmllcywgY3ApIHtcbiAgLyoqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEByZWFkT25seVxuICAgKi9cbiAgdGhpcy5uYW1lID0gbmFtZTtcbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheS48QXJyYXk+fVxuICAgKiBAcmVhZE9ubHlcbiAgICovXG5cbiAgdGhpcy5nZW9tZXRyaWVzID0gZ2VvbWV0cmllcztcblxuICBpZiAoIWNwKSB7XG4gICAgdmFyIHJlY3QgPSB0aGlzLmdldEJvdW5kaW5nUmVjdCgpO1xuICAgIGNwID0gW3JlY3QueCArIHJlY3Qud2lkdGggLyAyLCByZWN0LnkgKyByZWN0LmhlaWdodCAvIDJdO1xuICB9IGVsc2Uge1xuICAgIGNwID0gW2NwWzBdLCBjcFsxXV07XG4gIH1cbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheS48bnVtYmVyPn1cbiAgICovXG5cblxuICB0aGlzLmNlbnRlciA9IGNwO1xufVxuXG5SZWdpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUmVnaW9uLFxuICBwcm9wZXJ0aWVzOiBudWxsLFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHttb2R1bGU6enJlbmRlci9jb3JlL0JvdW5kaW5nUmVjdH1cbiAgICovXG4gIGdldEJvdW5kaW5nUmVjdDogZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWN0ID0gdGhpcy5fcmVjdDtcblxuICAgIGlmIChyZWN0KSB7XG4gICAgICByZXR1cm4gcmVjdDtcbiAgICB9XG5cbiAgICB2YXIgTUFYX05VTUJFUiA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgdmFyIG1pbiA9IFtNQVhfTlVNQkVSLCBNQVhfTlVNQkVSXTtcbiAgICB2YXIgbWF4ID0gWy1NQVhfTlVNQkVSLCAtTUFYX05VTUJFUl07XG4gICAgdmFyIG1pbjIgPSBbXTtcbiAgICB2YXIgbWF4MiA9IFtdO1xuICAgIHZhciBnZW9tZXRyaWVzID0gdGhpcy5nZW9tZXRyaWVzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZW9tZXRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBPbmx5IHN1cHBvcnQgcG9seWdvblxuICAgICAgaWYgKGdlb21ldHJpZXNbaV0udHlwZSAhPT0gJ3BvbHlnb24nKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSAvLyBEb2Vzbid0IGNvbnNpZGVyIGhvbGVcblxuXG4gICAgICB2YXIgZXh0ZXJpb3IgPSBnZW9tZXRyaWVzW2ldLmV4dGVyaW9yO1xuICAgICAgYmJveC5mcm9tUG9pbnRzKGV4dGVyaW9yLCBtaW4yLCBtYXgyKTtcbiAgICAgIHZlYzIubWluKG1pbiwgbWluLCBtaW4yKTtcbiAgICAgIHZlYzIubWF4KG1heCwgbWF4LCBtYXgyKTtcbiAgICB9IC8vIE5vIGRhdGFcblxuXG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIG1pblswXSA9IG1pblsxXSA9IG1heFswXSA9IG1heFsxXSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JlY3QgPSBuZXcgQm91bmRpbmdSZWN0KG1pblswXSwgbWluWzFdLCBtYXhbMF0gLSBtaW5bMF0sIG1heFsxXSAtIG1pblsxXSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7PEFycmF5LjxudW1iZXI+fSBjb29yZFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgY29udGFpbjogZnVuY3Rpb24gKGNvb3JkKSB7XG4gICAgdmFyIHJlY3QgPSB0aGlzLmdldEJvdW5kaW5nUmVjdCgpO1xuICAgIHZhciBnZW9tZXRyaWVzID0gdGhpcy5nZW9tZXRyaWVzO1xuXG4gICAgaWYgKCFyZWN0LmNvbnRhaW4oY29vcmRbMF0sIGNvb3JkWzFdKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGxvb3BHZW86IGZvciAodmFyIGkgPSAwLCBsZW4gPSBnZW9tZXRyaWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAvLyBPbmx5IHN1cHBvcnQgcG9seWdvbi5cbiAgICAgIGlmIChnZW9tZXRyaWVzW2ldLnR5cGUgIT09ICdwb2x5Z29uJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGV4dGVyaW9yID0gZ2VvbWV0cmllc1tpXS5leHRlcmlvcjtcbiAgICAgIHZhciBpbnRlcmlvcnMgPSBnZW9tZXRyaWVzW2ldLmludGVyaW9ycztcblxuICAgICAgaWYgKHBvbHlnb25Db250YWluLmNvbnRhaW4oZXh0ZXJpb3IsIGNvb3JkWzBdLCBjb29yZFsxXSkpIHtcbiAgICAgICAgLy8gTm90IGluIHRoZSByZWdpb24gaWYgcG9pbnQgaXMgaW4gdGhlIGhvbGUuXG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgKGludGVyaW9ycyA/IGludGVyaW9ycy5sZW5ndGggOiAwKTsgaysrKSB7XG4gICAgICAgICAgaWYgKHBvbHlnb25Db250YWluLmNvbnRhaW4oaW50ZXJpb3JzW2tdKSkge1xuICAgICAgICAgICAgY29udGludWUgbG9vcEdlbztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIHRyYW5zZm9ybVRvOiBmdW5jdGlvbiAoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgIHZhciByZWN0ID0gdGhpcy5nZXRCb3VuZGluZ1JlY3QoKTtcbiAgICB2YXIgYXNwZWN0ID0gcmVjdC53aWR0aCAvIHJlY3QuaGVpZ2h0O1xuXG4gICAgaWYgKCF3aWR0aCkge1xuICAgICAgd2lkdGggPSBhc3BlY3QgKiBoZWlnaHQ7XG4gICAgfSBlbHNlIGlmICghaGVpZ2h0KSB7XG4gICAgICBoZWlnaHQgPSB3aWR0aCAvIGFzcGVjdDtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0ID0gbmV3IEJvdW5kaW5nUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB2YXIgdHJhbnNmb3JtID0gcmVjdC5jYWxjdWxhdGVUcmFuc2Zvcm0odGFyZ2V0KTtcbiAgICB2YXIgZ2VvbWV0cmllcyA9IHRoaXMuZ2VvbWV0cmllcztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2VvbWV0cmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gT25seSBzdXBwb3J0IHBvbHlnb24uXG4gICAgICBpZiAoZ2VvbWV0cmllc1tpXS50eXBlICE9PSAncG9seWdvbicpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBleHRlcmlvciA9IGdlb21ldHJpZXNbaV0uZXh0ZXJpb3I7XG4gICAgICB2YXIgaW50ZXJpb3JzID0gZ2VvbWV0cmllc1tpXS5pbnRlcmlvcnM7XG5cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgZXh0ZXJpb3IubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgdmVjMi5hcHBseVRyYW5zZm9ybShleHRlcmlvcltwXSwgZXh0ZXJpb3JbcF0sIHRyYW5zZm9ybSk7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGggPSAwOyBoIDwgKGludGVyaW9ycyA/IGludGVyaW9ycy5sZW5ndGggOiAwKTsgaCsrKSB7XG4gICAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgaW50ZXJpb3JzW2hdLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgdmVjMi5hcHBseVRyYW5zZm9ybShpbnRlcmlvcnNbaF1bcF0sIGludGVyaW9yc1toXVtwXSwgdHJhbnNmb3JtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJlY3QgPSB0aGlzLl9yZWN0O1xuICAgIHJlY3QuY29weSh0YXJnZXQpOyAvLyBVcGRhdGUgY2VudGVyXG5cbiAgICB0aGlzLmNlbnRlciA9IFtyZWN0LnggKyByZWN0LndpZHRoIC8gMiwgcmVjdC55ICsgcmVjdC5oZWlnaHQgLyAyXTtcbiAgfVxufTtcbnZhciBfZGVmYXVsdCA9IFJlZ2lvbjtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIHpyVXRpbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3V0aWxcIik7XG5cbnZhciBSZWdpb24gPSByZXF1aXJlKFwiLi9SZWdpb25cIik7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuLyoqXG4gKiBQYXJzZSBhbmQgZGVjb2RlIGdlbyBqc29uXG4gKiBAbW9kdWxlIGVjaGFydHMvY29vcmQvZ2VvL3BhcnNlR2VvSnNvblxuICovXG5mdW5jdGlvbiBkZWNvZGUoanNvbikge1xuICBpZiAoIWpzb24uVVRGOEVuY29kaW5nKSB7XG4gICAgcmV0dXJuIGpzb247XG4gIH1cblxuICB2YXIgZW5jb2RlU2NhbGUgPSBqc29uLlVURjhTY2FsZTtcblxuICBpZiAoZW5jb2RlU2NhbGUgPT0gbnVsbCkge1xuICAgIGVuY29kZVNjYWxlID0gMTAyNDtcbiAgfVxuXG4gIHZhciBmZWF0dXJlcyA9IGpzb24uZmVhdHVyZXM7XG5cbiAgZm9yICh2YXIgZiA9IDA7IGYgPCBmZWF0dXJlcy5sZW5ndGg7IGYrKykge1xuICAgIHZhciBmZWF0dXJlID0gZmVhdHVyZXNbZl07XG4gICAgdmFyIGdlb21ldHJ5ID0gZmVhdHVyZS5nZW9tZXRyeTtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBnZW9tZXRyeS5jb29yZGluYXRlcztcbiAgICB2YXIgZW5jb2RlT2Zmc2V0cyA9IGdlb21ldHJ5LmVuY29kZU9mZnNldHM7XG5cbiAgICBmb3IgKHZhciBjID0gMDsgYyA8IGNvb3JkaW5hdGVzLmxlbmd0aDsgYysrKSB7XG4gICAgICB2YXIgY29vcmRpbmF0ZSA9IGNvb3JkaW5hdGVzW2NdO1xuXG4gICAgICBpZiAoZ2VvbWV0cnkudHlwZSA9PT0gJ1BvbHlnb24nKSB7XG4gICAgICAgIGNvb3JkaW5hdGVzW2NdID0gZGVjb2RlUG9seWdvbihjb29yZGluYXRlLCBlbmNvZGVPZmZzZXRzW2NdLCBlbmNvZGVTY2FsZSk7XG4gICAgICB9IGVsc2UgaWYgKGdlb21ldHJ5LnR5cGUgPT09ICdNdWx0aVBvbHlnb24nKSB7XG4gICAgICAgIGZvciAodmFyIGMyID0gMDsgYzIgPCBjb29yZGluYXRlLmxlbmd0aDsgYzIrKykge1xuICAgICAgICAgIHZhciBwb2x5Z29uID0gY29vcmRpbmF0ZVtjMl07XG4gICAgICAgICAgY29vcmRpbmF0ZVtjMl0gPSBkZWNvZGVQb2x5Z29uKHBvbHlnb24sIGVuY29kZU9mZnNldHNbY11bYzJdLCBlbmNvZGVTY2FsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gSGFzIGJlZW4gZGVjb2RlZFxuXG5cbiAganNvbi5VVEY4RW5jb2RpbmcgPSBmYWxzZTtcbiAgcmV0dXJuIGpzb247XG59XG5cbmZ1bmN0aW9uIGRlY29kZVBvbHlnb24oY29vcmRpbmF0ZSwgZW5jb2RlT2Zmc2V0cywgZW5jb2RlU2NhbGUpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgcHJldlggPSBlbmNvZGVPZmZzZXRzWzBdO1xuICB2YXIgcHJldlkgPSBlbmNvZGVPZmZzZXRzWzFdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29vcmRpbmF0ZS5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciB4ID0gY29vcmRpbmF0ZS5jaGFyQ29kZUF0KGkpIC0gNjQ7XG4gICAgdmFyIHkgPSBjb29yZGluYXRlLmNoYXJDb2RlQXQoaSArIDEpIC0gNjQ7IC8vIFppZ1phZyBkZWNvZGluZ1xuXG4gICAgeCA9IHggPj4gMSBeIC0oeCAmIDEpO1xuICAgIHkgPSB5ID4+IDEgXiAtKHkgJiAxKTsgLy8gRGVsdGEgZGVvY2RpbmdcblxuICAgIHggKz0gcHJldlg7XG4gICAgeSArPSBwcmV2WTtcbiAgICBwcmV2WCA9IHg7XG4gICAgcHJldlkgPSB5OyAvLyBEZXF1YW50aXplXG5cbiAgICByZXN1bHQucHVzaChbeCAvIGVuY29kZVNjYWxlLCB5IC8gZW5jb2RlU2NhbGVdKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIEBhbGlhcyBtb2R1bGU6ZWNoYXJ0cy9jb29yZC9nZW8vcGFyc2VHZW9Kc29uXG4gKiBAcGFyYW0ge09iamVjdH0gZ2VvSnNvblxuICogQHJldHVybiB7bW9kdWxlOnpyZW5kZXIvY29udGFpbmVyL0dyb3VwfVxuICovXG5cblxuZnVuY3Rpb24gX2RlZmF1bHQoZ2VvSnNvbikge1xuICBkZWNvZGUoZ2VvSnNvbik7XG4gIHJldHVybiB6clV0aWwubWFwKHpyVXRpbC5maWx0ZXIoZ2VvSnNvbi5mZWF0dXJlcywgZnVuY3Rpb24gKGZlYXR1cmVPYmopIHtcbiAgICAvLyBPdXRwdXQgb2YgbWFwc2hhcGVyIG1heSBoYXZlIGdlb21ldHJ5IG51bGxcbiAgICByZXR1cm4gZmVhdHVyZU9iai5nZW9tZXRyeSAmJiBmZWF0dXJlT2JqLnByb3BlcnRpZXMgJiYgZmVhdHVyZU9iai5nZW9tZXRyeS5jb29yZGluYXRlcy5sZW5ndGggPiAwO1xuICB9KSwgZnVuY3Rpb24gKGZlYXR1cmVPYmopIHtcbiAgICB2YXIgcHJvcGVydGllcyA9IGZlYXR1cmVPYmoucHJvcGVydGllcztcbiAgICB2YXIgZ2VvID0gZmVhdHVyZU9iai5nZW9tZXRyeTtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBnZW8uY29vcmRpbmF0ZXM7XG4gICAgdmFyIGdlb21ldHJpZXMgPSBbXTtcblxuICAgIGlmIChnZW8udHlwZSA9PT0gJ1BvbHlnb24nKSB7XG4gICAgICBnZW9tZXRyaWVzLnB1c2goe1xuICAgICAgICB0eXBlOiAncG9seWdvbicsXG4gICAgICAgIC8vIEFjY29yZGluZyB0byB0aGUgR2VvSlNPTiBzcGVjaWZpY2F0aW9uLlxuICAgICAgICAvLyBGaXJzdCBtdXN0IGJlIGV4dGVyaW9yLCBhbmQgdGhlIHJlc3QgYXJlIGFsbCBpbnRlcmlvcihob2xlcykuXG4gICAgICAgIGV4dGVyaW9yOiBjb29yZGluYXRlc1swXSxcbiAgICAgICAgaW50ZXJpb3JzOiBjb29yZGluYXRlcy5zbGljZSgxKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGdlby50eXBlID09PSAnTXVsdGlQb2x5Z29uJykge1xuICAgICAgenJVdGlsLmVhY2goY29vcmRpbmF0ZXMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIGlmIChpdGVtWzBdKSB7XG4gICAgICAgICAgZ2VvbWV0cmllcy5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdwb2x5Z29uJyxcbiAgICAgICAgICAgIGV4dGVyaW9yOiBpdGVtWzBdLFxuICAgICAgICAgICAgaW50ZXJpb3JzOiBpdGVtLnNsaWNlKDEpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciByZWdpb24gPSBuZXcgUmVnaW9uKHByb3BlcnRpZXMubmFtZSwgZ2VvbWV0cmllcywgcHJvcGVydGllcy5jcCk7XG4gICAgcmVnaW9uLnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xuICAgIHJldHVybiByZWdpb247XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsIi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbmZ1bmN0aW9uIGRlZmF1bHRLZXlHZXR0ZXIoaXRlbSkge1xuICByZXR1cm4gaXRlbTtcbn1cbi8qKlxuICogQHBhcmFtIHtBcnJheX0gb2xkQXJyXG4gKiBAcGFyYW0ge0FycmF5fSBuZXdBcnJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9sZEtleUdldHRlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gbmV3S2V5R2V0dGVyXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbnRleHRdIENhbiBiZSB2aXNpdGVkIGJ5IHRoaXMuY29udGV4dCBpbiBjYWxsYmFjay5cbiAqL1xuXG5cbmZ1bmN0aW9uIERhdGFEaWZmZXIob2xkQXJyLCBuZXdBcnIsIG9sZEtleUdldHRlciwgbmV3S2V5R2V0dGVyLCBjb250ZXh0KSB7XG4gIHRoaXMuX29sZCA9IG9sZEFycjtcbiAgdGhpcy5fbmV3ID0gbmV3QXJyO1xuICB0aGlzLl9vbGRLZXlHZXR0ZXIgPSBvbGRLZXlHZXR0ZXIgfHwgZGVmYXVsdEtleUdldHRlcjtcbiAgdGhpcy5fbmV3S2V5R2V0dGVyID0gbmV3S2V5R2V0dGVyIHx8IGRlZmF1bHRLZXlHZXR0ZXI7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkRhdGFEaWZmZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGF0YURpZmZlcixcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gd2hlbiBhZGQgYSBkYXRhXG4gICAqL1xuICBhZGQ6IGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgdGhpcy5fYWRkID0gZnVuYztcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gd2hlbiB1cGRhdGUgYSBkYXRhXG4gICAqL1xuICB1cGRhdGU6IGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgdGhpcy5fdXBkYXRlID0gZnVuYztcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gd2hlbiByZW1vdmUgYSBkYXRhXG4gICAqL1xuICByZW1vdmU6IGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgdGhpcy5fcmVtb3ZlID0gZnVuYztcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgZXhlY3V0ZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBvbGRBcnIgPSB0aGlzLl9vbGQ7XG4gICAgdmFyIG5ld0FyciA9IHRoaXMuX25ldztcbiAgICB2YXIgb2xkRGF0YUluZGV4TWFwID0ge307XG4gICAgdmFyIG5ld0RhdGFJbmRleE1hcCA9IHt9O1xuICAgIHZhciBvbGREYXRhS2V5QXJyID0gW107XG4gICAgdmFyIG5ld0RhdGFLZXlBcnIgPSBbXTtcbiAgICB2YXIgaTtcbiAgICBpbml0SW5kZXhNYXAob2xkQXJyLCBvbGREYXRhSW5kZXhNYXAsIG9sZERhdGFLZXlBcnIsICdfb2xkS2V5R2V0dGVyJywgdGhpcyk7XG4gICAgaW5pdEluZGV4TWFwKG5ld0FyciwgbmV3RGF0YUluZGV4TWFwLCBuZXdEYXRhS2V5QXJyLCAnX25ld0tleUdldHRlcicsIHRoaXMpOyAvLyBUcmF2ZWwgYnkgaW52ZXJ0ZWQgb3JkZXIgdG8gbWFrZSBzdXJlIG9yZGVyIGNvbnNpc3RlbmN5XG4gICAgLy8gd2hlbiBkdXBsaWNhdGUga2V5cyBleGlzdHMgKGNvbnNpZGVyIG5ld0RhdGFJbmRleC5wb3AoKSBiZWxvdykuXG4gICAgLy8gRm9yIHBlcmZvcm1hbmNlIGNvbnNpZGVyYXRpb24sIHRoZXNlIGNvZGUgYmVsb3cgZG8gbm90IGxvb2sgbmVhdC5cblxuICAgIGZvciAoaSA9IDA7IGkgPCBvbGRBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBvbGREYXRhS2V5QXJyW2ldO1xuICAgICAgdmFyIGlkeCA9IG5ld0RhdGFJbmRleE1hcFtrZXldOyAvLyBpZHggY2FuIG5ldmVyIGJlIGVtcHR5IGFycmF5IGhlcmUuIHNlZSAnc2V0IG51bGwnIGxvZ2ljIGJlbG93LlxuXG4gICAgICBpZiAoaWR4ICE9IG51bGwpIHtcbiAgICAgICAgLy8gQ29uc2lkZXIgdGhlcmUgaXMgZHVwbGljYXRlIGtleSAoZm9yIGV4YW1wbGUsIHVzZSBkYXRhSXRlbS5uYW1lIGFzIGtleSkuXG4gICAgICAgIC8vIFdlIHNob3VsZCBtYWtlIHN1cmUgZXZlcnkgaXRlbSBpbiBuZXdBcnIgYW5kIG9sZEFyciBjYW4gYmUgdmlzaXRlZC5cbiAgICAgICAgdmFyIGxlbiA9IGlkeC5sZW5ndGg7XG5cbiAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgIGxlbiA9PT0gMSAmJiAobmV3RGF0YUluZGV4TWFwW2tleV0gPSBudWxsKTtcbiAgICAgICAgICBpZHggPSBpZHgudW5zaGlmdCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0RhdGFJbmRleE1hcFtrZXldID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3VwZGF0ZSAmJiB0aGlzLl91cGRhdGUoaWR4LCBpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3JlbW92ZSAmJiB0aGlzLl9yZW1vdmUoaSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdEYXRhS2V5QXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gbmV3RGF0YUtleUFycltpXTtcblxuICAgICAgaWYgKG5ld0RhdGFJbmRleE1hcC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHZhciBpZHggPSBuZXdEYXRhSW5kZXhNYXBba2V5XTtcblxuICAgICAgICBpZiAoaWR4ID09IG51bGwpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSAvLyBpZHggY2FuIG5ldmVyIGJlIGVtcHR5IGFycmF5IGhlcmUuIHNlZSAnc2V0IG51bGwnIGxvZ2ljIGFib3ZlLlxuXG5cbiAgICAgICAgaWYgKCFpZHgubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5fYWRkICYmIHRoaXMuX2FkZChpZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvciAodmFyIGogPSAwLCBsZW4gPSBpZHgubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZCAmJiB0aGlzLl9hZGQoaWR4W2pdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGluaXRJbmRleE1hcChhcnIsIG1hcCwga2V5QXJyLCBrZXlHZXR0ZXJOYW1lLCBkYXRhRGlmZmVyKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gQWRkIHByZWZpeCB0byBhdm9pZCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUuXG4gICAgdmFyIGtleSA9ICdfZWNfJyArIGRhdGFEaWZmZXJba2V5R2V0dGVyTmFtZV0oYXJyW2ldLCBpKTtcbiAgICB2YXIgZXhpc3RlbmNlID0gbWFwW2tleV07XG5cbiAgICBpZiAoZXhpc3RlbmNlID09IG51bGwpIHtcbiAgICAgIGtleUFyci5wdXNoKGtleSk7XG4gICAgICBtYXBba2V5XSA9IGk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghZXhpc3RlbmNlLmxlbmd0aCkge1xuICAgICAgICBtYXBba2V5XSA9IGV4aXN0ZW5jZSA9IFtleGlzdGVuY2VdO1xuICAgICAgfVxuXG4gICAgICBleGlzdGVuY2UucHVzaChpKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIF9kZWZhdWx0ID0gRGF0YURpZmZlcjtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIF9jb25maWcgPSByZXF1aXJlKFwiLi4vY29uZmlnXCIpO1xuXG52YXIgX19ERVZfXyA9IF9jb25maWcuX19ERVZfXztcblxudmFyIHpyVXRpbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3V0aWxcIik7XG5cbnZhciBNb2RlbCA9IHJlcXVpcmUoXCIuLi9tb2RlbC9Nb2RlbFwiKTtcblxudmFyIERhdGFEaWZmZXIgPSByZXF1aXJlKFwiLi9EYXRhRGlmZmVyXCIpO1xuXG52YXIgU291cmNlID0gcmVxdWlyZShcIi4vU291cmNlXCIpO1xuXG52YXIgX2RhdGFQcm92aWRlciA9IHJlcXVpcmUoXCIuL2hlbHBlci9kYXRhUHJvdmlkZXJcIik7XG5cbnZhciBkZWZhdWx0RGltVmFsdWVHZXR0ZXJzID0gX2RhdGFQcm92aWRlci5kZWZhdWx0RGltVmFsdWVHZXR0ZXJzO1xudmFyIERlZmF1bHREYXRhUHJvdmlkZXIgPSBfZGF0YVByb3ZpZGVyLkRlZmF1bHREYXRhUHJvdmlkZXI7XG5cbnZhciBfZGltZW5zaW9uSGVscGVyID0gcmVxdWlyZShcIi4vaGVscGVyL2RpbWVuc2lvbkhlbHBlclwiKTtcblxudmFyIHN1bW1hcml6ZURpbWVuc2lvbnMgPSBfZGltZW5zaW9uSGVscGVyLnN1bW1hcml6ZURpbWVuc2lvbnM7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuLyoqXG4gKiBMaXN0IGZvciBkYXRhIHN0b3JhZ2VcbiAqIEBtb2R1bGUgZWNoYXJ0cy9kYXRhL0xpc3RcbiAqL1xudmFyIGlzT2JqZWN0ID0genJVdGlsLmlzT2JqZWN0O1xudmFyIFVOREVGSU5FRCA9ICd1bmRlZmluZWQnOyAvLyBVc2UgcHJlZml4IHRvIGF2b2lkIGluZGV4IHRvIGJlIHRoZSBzYW1lIGFzIG90aGVySWRMaXN0W2lkeF0sXG4vLyB3aGljaCB3aWxsIGNhdXNlIHdlaXJkIHVkcGF0ZSBhbmltYXRpb24uXG5cbnZhciBJRF9QUkVGSVggPSAnZVxcMFxcMCc7XG52YXIgZGF0YUN0b3JzID0ge1xuICAnZmxvYXQnOiB0eXBlb2YgRmxvYXQ2NEFycmF5ID09PSBVTkRFRklORUQgPyBBcnJheSA6IEZsb2F0NjRBcnJheSxcbiAgJ2ludCc6IHR5cGVvZiBJbnQzMkFycmF5ID09PSBVTkRFRklORUQgPyBBcnJheSA6IEludDMyQXJyYXksXG4gIC8vIE9yZGluYWwgZGF0YSB0eXBlIGNhbiBiZSBzdHJpbmcgb3IgaW50XG4gICdvcmRpbmFsJzogQXJyYXksXG4gICdudW1iZXInOiBBcnJheSxcbiAgJ3RpbWUnOiBBcnJheVxufTsgLy8gQ2F1dGlvbjogTVVTVCBub3QgdXNlIGBuZXcgQ3RvclVpbnQzMkFycmF5KGFyciwgMCwgbGVuKWAsIGJlY2F1c2UgdGhlIEN0b3Igb2YgYXJyYXkgaXNcbi8vIGRpZmZlcmVudCBmcm9tIHRoZSBDdG9yIG9mIHR5cGVkIGFycmF5LlxuXG52YXIgQ3RvclVpbnQzMkFycmF5ID0gdHlwZW9mIFVpbnQzMkFycmF5ID09PSBVTkRFRklORUQgPyBBcnJheSA6IFVpbnQzMkFycmF5O1xudmFyIEN0b3JVaW50MTZBcnJheSA9IHR5cGVvZiBVaW50MTZBcnJheSA9PT0gVU5ERUZJTkVEID8gQXJyYXkgOiBVaW50MTZBcnJheTtcblxuZnVuY3Rpb24gZ2V0SW5kaWNlc0N0b3IobGlzdCkge1xuICAvLyBUaGUgcG9zc2libGUgbWF4IHZhbHVlIGluIHRoaXMuX2luZGljaWVzIGlzIGFsd2F5cyB0aGlzLl9yYXdDb3VudCBkZXNwaXRlIG9mIGZpbHRlcmluZy5cbiAgcmV0dXJuIGxpc3QuX3Jhd0NvdW50ID4gNjU1MzUgPyBDdG9yVWludDMyQXJyYXkgOiBDdG9yVWludDE2QXJyYXk7XG59XG5cbmZ1bmN0aW9uIGNsb25lQ2h1bmsob3JpZ2luYWxDaHVuaykge1xuICB2YXIgQ3RvciA9IG9yaWdpbmFsQ2h1bmsuY29uc3RydWN0b3I7IC8vIE9ubHkgc2hhbGxvdyBjbG9uZSBpcyBlbm91Z2ggd2hlbiBBcnJheS5cblxuICByZXR1cm4gQ3RvciA9PT0gQXJyYXkgPyBvcmlnaW5hbENodW5rLnNsaWNlKCkgOiBuZXcgQ3RvcihvcmlnaW5hbENodW5rKTtcbn1cblxudmFyIFRSQU5TRkVSQUJMRV9QUk9QRVJUSUVTID0gWydoYXNJdGVtT3B0aW9uJywgJ19uYW1lTGlzdCcsICdfaWRMaXN0JywgJ19pbnZlcnRlZEluZGljZXNNYXAnLCAnX3Jhd0RhdGEnLCAnX2NodW5rU2l6ZScsICdfY2h1bmtDb3VudCcsICdfZGltVmFsdWVHZXR0ZXInLCAnX2NvdW50JywgJ19yYXdDb3VudCcsICdfbmFtZURpbUlkeCcsICdfaWREaW1JZHgnXTtcbnZhciBDTE9ORV9QUk9QRVJUSUVTID0gWydfZXh0ZW50JywgJ19hcHByb3hpbWF0ZUV4dGVudCcsICdfcmF3RXh0ZW50J107XG5cbmZ1bmN0aW9uIHRyYW5zZmVyUHJvcGVydGllcyh0YXJnZXQsIHNvdXJjZSkge1xuICB6clV0aWwuZWFjaChUUkFOU0ZFUkFCTEVfUFJPUEVSVElFUy5jb25jYXQoc291cmNlLl9fd3JhcHBlZE1ldGhvZHMgfHwgW10pLCBmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgdGFyZ2V0W3Byb3BOYW1lXSA9IHNvdXJjZVtwcm9wTmFtZV07XG4gICAgfVxuICB9KTtcbiAgdGFyZ2V0Ll9fd3JhcHBlZE1ldGhvZHMgPSBzb3VyY2UuX193cmFwcGVkTWV0aG9kcztcbiAgenJVdGlsLmVhY2goQ0xPTkVfUFJPUEVSVElFUywgZnVuY3Rpb24gKHByb3BOYW1lKSB7XG4gICAgdGFyZ2V0W3Byb3BOYW1lXSA9IHpyVXRpbC5jbG9uZShzb3VyY2VbcHJvcE5hbWVdKTtcbiAgfSk7XG4gIHRhcmdldC5fY2FsY3VsYXRpb25JbmZvID0genJVdGlsLmV4dGVuZChzb3VyY2UuX2NhbGN1bGF0aW9uSW5mbyk7XG59XG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQGFsaWFzIG1vZHVsZTplY2hhcnRzL2RhdGEvTGlzdFxuICpcbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZ3xPYmplY3Q+fSBkaW1lbnNpb25zXG4gKiAgICAgIEZvciBleGFtcGxlLCBbJ3NvbWVEaW1OYW1lJywge25hbWU6ICdzb21lRGltTmFtZScsIHR5cGU6ICdzb21lRGltVHlwZSd9LCAuLi5dLlxuICogICAgICBEaW1lbnNpb25zIHNob3VsZCBiZSBjb25jcmV0ZSBuYW1lcyBsaWtlIHgsIHksIHosIGxuZywgbGF0LCBhbmdsZSwgcmFkaXVzXG4gKiAgICAgIFNwZXRpYWwgZmllbGRzOiB7XG4gKiAgICAgICAgICBvcmRpbmFsTWV0YTogPG1vZHVsZTplY2hhcnRzL2RhdGEvT3JkaW5hbE1ldGE+XG4gKiAgICAgICAgICBjcmVhdGVJbnZlcnRlZEluZGljZXM6IDxib29sZWFuPlxuICogICAgICB9XG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL21vZGVsL01vZGVsfSBob3N0TW9kZWxcbiAqL1xuXG5cbnZhciBMaXN0ID0gZnVuY3Rpb24gKGRpbWVuc2lvbnMsIGhvc3RNb2RlbCkge1xuICBkaW1lbnNpb25zID0gZGltZW5zaW9ucyB8fCBbJ3gnLCAneSddO1xuICB2YXIgZGltZW5zaW9uSW5mb3MgPSB7fTtcbiAgdmFyIGRpbWVuc2lvbk5hbWVzID0gW107XG4gIHZhciBpbnZlcnRlZEluZGljZXNNYXAgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRpbWVuc2lvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBVc2UgdGhlIG9yaWdpbmFsIGRpbWVuc2lvbnNbaV0sIHdoZXJlIG90aGVyIGZsYWcgcHJvcHMgbWF5IGV4aXN0cy5cbiAgICB2YXIgZGltZW5zaW9uSW5mbyA9IGRpbWVuc2lvbnNbaV07XG5cbiAgICBpZiAoenJVdGlsLmlzU3RyaW5nKGRpbWVuc2lvbkluZm8pKSB7XG4gICAgICBkaW1lbnNpb25JbmZvID0ge1xuICAgICAgICBuYW1lOiBkaW1lbnNpb25JbmZvXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkaW1lbnNpb25OYW1lID0gZGltZW5zaW9uSW5mby5uYW1lO1xuICAgIGRpbWVuc2lvbkluZm8udHlwZSA9IGRpbWVuc2lvbkluZm8udHlwZSB8fCAnZmxvYXQnO1xuXG4gICAgaWYgKCFkaW1lbnNpb25JbmZvLmNvb3JkRGltKSB7XG4gICAgICBkaW1lbnNpb25JbmZvLmNvb3JkRGltID0gZGltZW5zaW9uTmFtZTtcbiAgICAgIGRpbWVuc2lvbkluZm8uY29vcmREaW1JbmRleCA9IDA7XG4gICAgfVxuXG4gICAgZGltZW5zaW9uSW5mby5vdGhlckRpbXMgPSBkaW1lbnNpb25JbmZvLm90aGVyRGltcyB8fCB7fTtcbiAgICBkaW1lbnNpb25OYW1lcy5wdXNoKGRpbWVuc2lvbk5hbWUpO1xuICAgIGRpbWVuc2lvbkluZm9zW2RpbWVuc2lvbk5hbWVdID0gZGltZW5zaW9uSW5mbztcbiAgICBkaW1lbnNpb25JbmZvLmluZGV4ID0gaTtcblxuICAgIGlmIChkaW1lbnNpb25JbmZvLmNyZWF0ZUludmVydGVkSW5kaWNlcykge1xuICAgICAgaW52ZXJ0ZWRJbmRpY2VzTWFwW2RpbWVuc2lvbk5hbWVdID0gW107XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAcmVhZE9ubHlcbiAgICogQHR5cGUge0FycmF5LjxzdHJpbmc+fVxuICAgKi9cblxuXG4gIHRoaXMuZGltZW5zaW9ucyA9IGRpbWVuc2lvbk5hbWVzO1xuICAvKipcbiAgICogSW5mb21hdGlvbiBvZiBlYWNoIGRhdGEgZGltZW5zaW9uLCBsaWtlIGRhdGEgdHlwZS5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG5cbiAgdGhpcy5fZGltZW5zaW9uSW5mb3MgPSBkaW1lbnNpb25JbmZvcztcbiAgLyoqXG4gICAqIEB0eXBlIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Nb2RlbH1cbiAgICovXG5cbiAgdGhpcy5ob3N0TW9kZWwgPSBob3N0TW9kZWw7XG4gIC8qKlxuICAgKiBAdHlwZSB7bW9kdWxlOmVjaGFydHMvbW9kZWwvTW9kZWx9XG4gICAqL1xuXG4gIHRoaXMuZGF0YVR5cGU7XG4gIC8qKlxuICAgKiBJbmRpY2VzIHN0b3JlcyB0aGUgaW5kaWNlcyBvZiBkYXRhIHN1YnNldCBhZnRlciBmaWx0ZXJlZC5cbiAgICogVGhpcyBkYXRhIHN1YnNldCB3aWxsIGJlIHVzZWQgaW4gY2hhcnQuXG4gICAqIEB0eXBlIHtBcnJheS48bnVtYmVyPn1cbiAgICogQHJlYWRPbmx5XG4gICAqL1xuXG4gIHRoaXMuX2luZGljZXMgPSBudWxsO1xuICB0aGlzLl9jb3VudCA9IDA7XG4gIHRoaXMuX3Jhd0NvdW50ID0gMDtcbiAgLyoqXG4gICAqIERhdGEgc3RvcmFnZVxuICAgKiBAdHlwZSB7T2JqZWN0LjxrZXksIEFycmF5LjxUeXBlZEFycmF5fEFycmF5Pj59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIHRoaXMuX3N0b3JhZ2UgPSB7fTtcbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheS48c3RyaW5nPn1cbiAgICovXG5cbiAgdGhpcy5fbmFtZUxpc3QgPSBbXTtcbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheS48c3RyaW5nPn1cbiAgICovXG5cbiAgdGhpcy5faWRMaXN0ID0gW107XG4gIC8qKlxuICAgKiBNb2RlbHMgb2YgZGF0YSBvcHRpb24gaXMgc3RvcmVkIHNwYXJzZSBmb3Igb3B0aW1pemluZyBtZW1vcnkgY29zdFxuICAgKiBAdHlwZSB7QXJyYXkuPG1vZHVsZTplY2hhcnRzL21vZGVsL01vZGVsPn1cbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgdGhpcy5fb3B0aW9uTW9kZWxzID0gW107XG4gIC8qKlxuICAgKiBHbG9iYWwgdmlzdWFsIHByb3BlcnRpZXMgYWZ0ZXIgdmlzdWFsIGNvZGluZ1xuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICB0aGlzLl92aXN1YWwgPSB7fTtcbiAgLyoqXG4gICAqIEdsb2JlbCBsYXlvdXQgcHJvcGVydGllcy5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgdGhpcy5fbGF5b3V0ID0ge307XG4gIC8qKlxuICAgKiBJdGVtIHZpc3VhbCBwcm9wZXJ0aWVzIGFmdGVyIHZpc3VhbCBjb2RpbmdcbiAgICogQHR5cGUge0FycmF5LjxPYmplY3Q+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICB0aGlzLl9pdGVtVmlzdWFscyA9IFtdO1xuICAvKipcbiAgICogS2V5OiB2aXN1YWwgdHlwZSwgVmFsdWU6IGJvb2xlYW5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHJlYWRPbmx5XG4gICAqL1xuXG4gIHRoaXMuaGFzSXRlbVZpc3VhbCA9IHt9O1xuICAvKipcbiAgICogSXRlbSBsYXlvdXQgcHJvcGVydGllcyBhZnRlciBsYXlvdXRcbiAgICogQHR5cGUge0FycmF5LjxPYmplY3Q+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICB0aGlzLl9pdGVtTGF5b3V0cyA9IFtdO1xuICAvKipcbiAgICogR3JhcGhpYyBlbGVtbmVudHNcbiAgICogQHR5cGUge0FycmF5Ljxtb2R1bGU6enJlbmRlci9FbGVtZW50Pn1cbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgdGhpcy5fZ3JhcGhpY0VscyA9IFtdO1xuICAvKipcbiAgICogTWF4IHNpemUgb2YgZWFjaCBjaHVuay5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgdGhpcy5fY2h1bmtTaXplID0gMWU1O1xuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgdGhpcy5fY2h1bmtDb3VudCA9IDA7XG4gIC8qKlxuICAgKiBAdHlwZSB7QXJyYXkuPEFycmF5fE9iamVjdD59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIHRoaXMuX3Jhd0RhdGE7XG4gIC8qKlxuICAgKiBSYXcgZXh0ZW50IHdpbGwgbm90IGJlIGNsb25lZCwgYnV0IG9ubHkgdHJhbnNmZXJlZC5cbiAgICogSXQgd2lsbCBub3QgYmUgY2FsY3VsYXRlZCB1dGlsIG5lZWRlZC5cbiAgICoga2V5OiBkaW0sXG4gICAqIHZhbHVlOiB7ZW5kOiBudW1iZXIsIGV4dGVudDogQXJyYXkuPG51bWJlcj59XG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIHRoaXMuX3Jhd0V4dGVudCA9IHt9O1xuICAvKipcbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgdGhpcy5fZXh0ZW50ID0ge307XG4gIC8qKlxuICAgKiBrZXk6IGRpbVxuICAgKiB2YWx1ZTogZXh0ZW50XG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIHRoaXMuX2FwcHJveGltYXRlRXh0ZW50ID0ge307XG4gIC8qKlxuICAgKiBDYWNoZSBzdW1tYXJ5IGluZm8gZm9yIGZhc3QgdmlzaXQuIFNlZSBcImRpbWVuc2lvbkhlbHBlclwiLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICB0aGlzLl9kaW1lbnNpb25zU3VtbWFyeSA9IHN1bW1hcml6ZURpbWVuc2lvbnModGhpcyk7XG4gIC8qKlxuICAgKiBAdHlwZSB7T2JqZWN0LjxBcnJheXxUeXBlZEFycmF5Pn1cbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgdGhpcy5faW52ZXJ0ZWRJbmRpY2VzTWFwID0gaW52ZXJ0ZWRJbmRpY2VzTWFwO1xuICAvKipcbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgdGhpcy5fY2FsY3VsYXRpb25JbmZvID0ge307XG59O1xuXG52YXIgbGlzdFByb3RvID0gTGlzdC5wcm90b3R5cGU7XG5saXN0UHJvdG8udHlwZSA9ICdsaXN0Jztcbi8qKlxuICogSWYgZWFjaCBkYXRhIGl0ZW0gaGFzIGl0J3Mgb3duIG9wdGlvblxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cblxubGlzdFByb3RvLmhhc0l0ZW1PcHRpb24gPSB0cnVlO1xuLyoqXG4gKiBHZXQgZGltZW5zaW9uIG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gZGltXG4gKiAgICAgICAgRGltZW5zaW9uIGNhbiBiZSBjb25jcmV0ZSBuYW1lcyBsaWtlIHgsIHksIHosIGxuZywgbGF0LCBhbmdsZSwgcmFkaXVzXG4gKiAgICAgICAgT3IgYSBvcmRpbmFsIG51bWJlci4gRm9yIGV4YW1wbGUgZ2V0RGltZW5zaW9uSW5mbygwKSB3aWxsIHJldHVybiAneCcgb3IgJ2xuZycgb3IgJ3JhZGl1cydcbiAqIEByZXR1cm4ge3N0cmluZ30gQ29uY3JldGUgZGltIG5hbWUuXG4gKi9cblxubGlzdFByb3RvLmdldERpbWVuc2lvbiA9IGZ1bmN0aW9uIChkaW0pIHtcbiAgaWYgKCFpc05hTihkaW0pKSB7XG4gICAgZGltID0gdGhpcy5kaW1lbnNpb25zW2RpbV0gfHwgZGltO1xuICB9XG5cbiAgcmV0dXJuIGRpbTtcbn07XG4vKipcbiAqIEdldCB0eXBlIGFuZCBjYWxjdWxhdGlvbiBpbmZvIG9mIHBhcnRpY3VsYXIgZGltZW5zaW9uXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGRpbVxuICogICAgICAgIERpbWVuc2lvbiBjYW4gYmUgY29uY3JldGUgbmFtZXMgbGlrZSB4LCB5LCB6LCBsbmcsIGxhdCwgYW5nbGUsIHJhZGl1c1xuICogICAgICAgIE9yIGEgb3JkaW5hbCBudW1iZXIuIEZvciBleGFtcGxlIGdldERpbWVuc2lvbkluZm8oMCkgd2lsbCByZXR1cm4gJ3gnIG9yICdsbmcnIG9yICdyYWRpdXMnXG4gKi9cblxuXG5saXN0UHJvdG8uZ2V0RGltZW5zaW9uSW5mbyA9IGZ1bmN0aW9uIChkaW0pIHtcbiAgLy8gRG8gbm90IGNsb25lLCBiZWNhdXNlIHRoZXJlIG1heSBiZSBjYXRlZ29yaWVzIGluIGRpbUluZm8uXG4gIHJldHVybiB0aGlzLl9kaW1lbnNpb25JbmZvc1t0aGlzLmdldERpbWVuc2lvbihkaW0pXTtcbn07XG4vKipcbiAqIEByZXR1cm4ge0FycmF5LjxzdHJpbmc+fSBjb25jcmV0ZSBkaW1lbnNpb24gbmFtZSBsaXN0IG9uIGNvb3JkLlxuICovXG5cblxubGlzdFByb3RvLmdldERpbWVuc2lvbnNPbkNvb3JkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fZGltZW5zaW9uc1N1bW1hcnkuZGF0YURpbXNPbkNvb3JkLnNsaWNlKCk7XG59O1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29vcmREaW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbaWR4XSBBIGNvb3JkRGltIG1heSBtYXAgdG8gbW9yZSB0aGFuIG9uZSBkYXRhIGRpbS5cbiAqICAgICAgICBJZiBpZHggaXMgYHRydWVgLCByZXR1cm4gYSBhcnJheSBvZiBhbGwgbWFwcGVkIGRpbXMuXG4gKiAgICAgICAgSWYgaWR4IGlzIG5vdCBzcGVjaWZpZWQsIHJldHVybiB0aGUgZmlyc3QgZGltIG5vdCBleHRyYS5cbiAqIEByZXR1cm4ge3N0cmluZ3xBcnJheS48c3RyaW5nPn0gY29uY3JldGUgZGF0YSBkaW0uXG4gKiAgICAgICAgSWYgaWR4IGlzIG51bWJlciwgYW5kIG5vdCBmb3VuZCwgcmV0dXJuIG51bGwvdW5kZWZpbmVkLlxuICogICAgICAgIElmIGlkeCBpcyBgdHJ1ZWAsIGFuZCBub3QgZm91bmQsIHJldHVybiBlbXB0eSBhcnJheSAoYWx3YXlzIHJldHVybiBhcnJheSkuXG4gKi9cblxuXG5saXN0UHJvdG8ubWFwRGltZW5zaW9uID0gZnVuY3Rpb24gKGNvb3JkRGltLCBpZHgpIHtcbiAgdmFyIGRpbWVuc2lvbnNTdW1tYXJ5ID0gdGhpcy5fZGltZW5zaW9uc1N1bW1hcnk7XG5cbiAgaWYgKGlkeCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGRpbWVuc2lvbnNTdW1tYXJ5LmVuY29kZUZpcnN0RGltTm90RXh0cmFbY29vcmREaW1dO1xuICB9XG5cbiAgdmFyIGRpbXMgPSBkaW1lbnNpb25zU3VtbWFyeS5lbmNvZGVbY29vcmREaW1dO1xuICByZXR1cm4gaWR4ID09PSB0cnVlIC8vIGFsd2F5cyByZXR1cm4gYXJyYXkgaWYgaWR4IGlzIGB0cnVlYFxuICA/IChkaW1zIHx8IFtdKS5zbGljZSgpIDogZGltcyAmJiBkaW1zW2lkeF07XG59O1xuLyoqXG4gKiBJbml0aWFsaXplIGZyb20gZGF0YVxuICogQHBhcmFtIHtBcnJheS48T2JqZWN0fG51bWJlcnxBcnJheT59IGRhdGEgc291cmNlIG9yIGRhdGEgb3IgZGF0YSBwcm92aWRlci5cbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz59IFtuYW1lTElzdF0gVGhlIG5hbWUgb2YgYSBkYXR1bSBpcyB1c2VkIG9uIGRhdGEgZGlmZiBhbmRcbiAqICAgICAgICBkZWZ1YWx0IGxhYmVsL3Rvb2x0aXAuXG4gKiAgICAgICAgQSBuYW1lIGNhbiBiZSBzcGVjaWZpZWQgaW4gZW5jb2RlLml0ZW1OYW1lLFxuICogICAgICAgIG9yIGRhdGFJdGVtLm5hbWUgKG9ubHkgZm9yIHNlcmllcyBvcHRpb24gZGF0YSksXG4gKiAgICAgICAgb3IgcHJvdmlkZWQgaW4gbmFtZUxpc3QgZnJvbSBvdXRzaWRlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2RpbVZhbHVlR2V0dGVyXSAoZGF0YUl0ZW0sIGRpbU5hbWUsIGRhdGFJbmRleCwgZGltSW5kZXgpID0+IG51bWJlclxuICovXG5cblxubGlzdFByb3RvLmluaXREYXRhID0gZnVuY3Rpb24gKGRhdGEsIG5hbWVMaXN0LCBkaW1WYWx1ZUdldHRlcikge1xuICB2YXIgbm90UHJvdmlkZXIgPSBTb3VyY2UuaXNJbnN0YW5jZShkYXRhKSB8fCB6clV0aWwuaXNBcnJheUxpa2UoZGF0YSk7XG5cbiAgaWYgKG5vdFByb3ZpZGVyKSB7XG4gICAgZGF0YSA9IG5ldyBEZWZhdWx0RGF0YVByb3ZpZGVyKGRhdGEsIHRoaXMuZGltZW5zaW9ucy5sZW5ndGgpO1xuICB9XG5cbiAgdGhpcy5fcmF3RGF0YSA9IGRhdGE7IC8vIENsZWFyXG5cbiAgdGhpcy5fc3RvcmFnZSA9IHt9O1xuICB0aGlzLl9pbmRpY2VzID0gbnVsbDtcbiAgdGhpcy5fbmFtZUxpc3QgPSBuYW1lTGlzdCB8fCBbXTtcbiAgdGhpcy5faWRMaXN0ID0gW107XG4gIHRoaXMuX25hbWVSZXBlYXRDb3VudCA9IHt9O1xuXG4gIGlmICghZGltVmFsdWVHZXR0ZXIpIHtcbiAgICB0aGlzLmhhc0l0ZW1PcHRpb24gPSBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogQHJlYWRPbmx5XG4gICAqL1xuXG5cbiAgdGhpcy5kZWZhdWx0RGltVmFsdWVHZXR0ZXIgPSBkZWZhdWx0RGltVmFsdWVHZXR0ZXJzW3RoaXMuX3Jhd0RhdGEuZ2V0U291cmNlKCkuc291cmNlRm9ybWF0XTsgLy8gRGVmYXVsdCBkaW0gdmFsdWUgZ2V0dGVyXG5cbiAgdGhpcy5fZGltVmFsdWVHZXR0ZXIgPSBkaW1WYWx1ZUdldHRlciA9IGRpbVZhbHVlR2V0dGVyIHx8IHRoaXMuZGVmYXVsdERpbVZhbHVlR2V0dGVyOyAvLyBSZXNldCByYXcgZXh0ZW50LlxuXG4gIHRoaXMuX3Jhd0V4dGVudCA9IHt9O1xuXG4gIHRoaXMuX2luaXREYXRhRnJvbVByb3ZpZGVyKDAsIGRhdGEuY291bnQoKSk7IC8vIElmIGRhdGEgaGFzIG5vIGl0ZW0gb3B0aW9uLlxuXG5cbiAgaWYgKGRhdGEucHVyZSkge1xuICAgIHRoaXMuaGFzSXRlbU9wdGlvbiA9IGZhbHNlO1xuICB9XG59O1xuXG5saXN0UHJvdG8uZ2V0UHJvdmlkZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9yYXdEYXRhO1xufTtcblxubGlzdFByb3RvLmFwcGVuZERhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB2YXIgcmF3RGF0YSA9IHRoaXMuX3Jhd0RhdGE7XG4gIHZhciBzdGFydCA9IHRoaXMuY291bnQoKTtcbiAgcmF3RGF0YS5hcHBlbmREYXRhKGRhdGEpO1xuICB2YXIgZW5kID0gcmF3RGF0YS5jb3VudCgpO1xuXG4gIGlmICghcmF3RGF0YS5wZXJzaXN0ZW50KSB7XG4gICAgZW5kICs9IHN0YXJ0O1xuICB9XG5cbiAgdGhpcy5faW5pdERhdGFGcm9tUHJvdmlkZXIoc3RhcnQsIGVuZCk7XG59O1xuXG5saXN0UHJvdG8uX2luaXREYXRhRnJvbVByb3ZpZGVyID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgLy8gT3B0aW1pemUuXG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY2h1bmtTaXplID0gdGhpcy5fY2h1bmtTaXplO1xuICB2YXIgcmF3RGF0YSA9IHRoaXMuX3Jhd0RhdGE7XG4gIHZhciBzdG9yYWdlID0gdGhpcy5fc3RvcmFnZTtcbiAgdmFyIGRpbWVuc2lvbnMgPSB0aGlzLmRpbWVuc2lvbnM7XG4gIHZhciBkaW1MZW4gPSBkaW1lbnNpb25zLmxlbmd0aDtcbiAgdmFyIGRpbWVuc2lvbkluZm9NYXAgPSB0aGlzLl9kaW1lbnNpb25JbmZvcztcbiAgdmFyIG5hbWVMaXN0ID0gdGhpcy5fbmFtZUxpc3Q7XG4gIHZhciBpZExpc3QgPSB0aGlzLl9pZExpc3Q7XG4gIHZhciByYXdFeHRlbnQgPSB0aGlzLl9yYXdFeHRlbnQ7XG4gIHZhciBuYW1lUmVwZWF0Q291bnQgPSB0aGlzLl9uYW1lUmVwZWF0Q291bnQgPSB7fTtcbiAgdmFyIG5hbWVEaW1JZHg7XG4gIHZhciBjaHVua0NvdW50ID0gdGhpcy5fY2h1bmtDb3VudDtcbiAgdmFyIGxhc3RDaHVua0luZGV4ID0gY2h1bmtDb3VudCAtIDE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaW1MZW47IGkrKykge1xuICAgIHZhciBkaW0gPSBkaW1lbnNpb25zW2ldO1xuXG4gICAgaWYgKCFyYXdFeHRlbnRbZGltXSkge1xuICAgICAgcmF3RXh0ZW50W2RpbV0gPSBnZXRJbml0aWFsRXh0ZW50KCk7XG4gICAgfVxuXG4gICAgdmFyIGRpbUluZm8gPSBkaW1lbnNpb25JbmZvTWFwW2RpbV07XG5cbiAgICBpZiAoZGltSW5mby5vdGhlckRpbXMuaXRlbU5hbWUgPT09IDApIHtcbiAgICAgIG5hbWVEaW1JZHggPSB0aGlzLl9uYW1lRGltSWR4ID0gaTtcbiAgICB9XG5cbiAgICBpZiAoZGltSW5mby5vdGhlckRpbXMuaXRlbUlkID09PSAwKSB7XG4gICAgICB0aGlzLl9pZERpbUlkeCA9IGk7XG4gICAgfVxuXG4gICAgdmFyIERhdGFDdG9yID0gZGF0YUN0b3JzW2RpbUluZm8udHlwZV07XG5cbiAgICBpZiAoIXN0b3JhZ2VbZGltXSkge1xuICAgICAgc3RvcmFnZVtkaW1dID0gW107XG4gICAgfVxuXG4gICAgdmFyIHJlc2l6ZUNodW5rQXJyYXkgPSBzdG9yYWdlW2RpbV1bbGFzdENodW5rSW5kZXhdO1xuXG4gICAgaWYgKHJlc2l6ZUNodW5rQXJyYXkgJiYgcmVzaXplQ2h1bmtBcnJheS5sZW5ndGggPCBjaHVua1NpemUpIHtcbiAgICAgIHZhciBuZXdTdG9yZSA9IG5ldyBEYXRhQ3RvcihNYXRoLm1pbihlbmQgLSBsYXN0Q2h1bmtJbmRleCAqIGNodW5rU2l6ZSwgY2h1bmtTaXplKSk7IC8vIFRoZSBjb3N0IG9mIHRoZSBjb3B5IGlzIHByb2JhYmx5IGluY29uc2lkZXJhYmxlXG4gICAgICAvLyB3aXRoaW4gdGhlIGluaXRpYWwgY2h1bmtTaXplLlxuXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJlc2l6ZUNodW5rQXJyYXkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgbmV3U3RvcmVbal0gPSByZXNpemVDaHVua0FycmF5W2pdO1xuICAgICAgfVxuXG4gICAgICBzdG9yYWdlW2RpbV1bbGFzdENodW5rSW5kZXhdID0gbmV3U3RvcmU7XG4gICAgfSAvLyBDcmVhdGUgbmV3IGNodW5rcy5cblxuXG4gICAgZm9yICh2YXIgayA9IGNodW5rQ291bnQgKiBjaHVua1NpemU7IGsgPCBlbmQ7IGsgKz0gY2h1bmtTaXplKSB7XG4gICAgICBzdG9yYWdlW2RpbV0ucHVzaChuZXcgRGF0YUN0b3IoTWF0aC5taW4oZW5kIC0gaywgY2h1bmtTaXplKSkpO1xuICAgIH1cblxuICAgIHRoaXMuX2NodW5rQ291bnQgPSBzdG9yYWdlW2RpbV0ubGVuZ3RoO1xuICB9XG5cbiAgdmFyIGRhdGFJdGVtID0gbmV3IEFycmF5KGRpbUxlbik7XG5cbiAgZm9yICh2YXIgaWR4ID0gc3RhcnQ7IGlkeCA8IGVuZDsgaWR4KyspIHtcbiAgICAvLyBOT1RJQ0U6IFRyeSBub3QgdG8gd3JpdGUgdGhpbmdzIGludG8gZGF0YUl0ZW1cbiAgICBkYXRhSXRlbSA9IHJhd0RhdGEuZ2V0SXRlbShpZHgsIGRhdGFJdGVtKTsgLy8gRWFjaCBkYXRhIGl0ZW0gaXMgdmFsdWVcbiAgICAvLyBbMSwgMl1cbiAgICAvLyAyXG4gICAgLy8gQmFyIGNoYXJ0LCBsaW5lIGNoYXJ0IHdoaWNoIHVzZXMgY2F0ZWdvcnkgYXhpc1xuICAgIC8vIG9ubHkgZ2l2ZXMgdGhlICd5JyB2YWx1ZS4gJ3gnIHZhbHVlIGlzIHRoZSBpbmRpY2VzIG9mIGNhdGVnb3J5XG4gICAgLy8gVXNlIGEgdGVtcFZhbHVlIHRvIG5vcm1hbGl6ZSB0aGUgdmFsdWUgdG8gYmUgYSAoeCwgeSkgdmFsdWVcblxuICAgIHZhciBjaHVua0luZGV4ID0gTWF0aC5mbG9vcihpZHggLyBjaHVua1NpemUpO1xuICAgIHZhciBjaHVua09mZnNldCA9IGlkeCAlIGNodW5rU2l6ZTsgLy8gU3RvcmUgdGhlIGRhdGEgYnkgZGltZW5zaW9uc1xuXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBkaW1MZW47IGsrKykge1xuICAgICAgdmFyIGRpbSA9IGRpbWVuc2lvbnNba107XG4gICAgICB2YXIgZGltU3RvcmFnZSA9IHN0b3JhZ2VbZGltXVtjaHVua0luZGV4XTsgLy8gUEVORElORyBOVUxMIGlzIGVtcHR5IG9yIHplcm9cblxuICAgICAgdmFyIHZhbCA9IHRoaXMuX2RpbVZhbHVlR2V0dGVyKGRhdGFJdGVtLCBkaW0sIGlkeCwgayk7XG5cbiAgICAgIGRpbVN0b3JhZ2VbY2h1bmtPZmZzZXRdID0gdmFsO1xuICAgICAgdmFyIGRpbVJhd0V4dGVudCA9IHJhd0V4dGVudFtkaW1dO1xuXG4gICAgICBpZiAodmFsIDwgZGltUmF3RXh0ZW50WzBdKSB7XG4gICAgICAgIGRpbVJhd0V4dGVudFswXSA9IHZhbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbCA+IGRpbVJhd0V4dGVudFsxXSkge1xuICAgICAgICBkaW1SYXdFeHRlbnRbMV0gPSB2YWw7XG4gICAgICB9XG4gICAgfSAvLyA/Pz8gRklYTUUgbm90IGNoZWNrIGJ5IHB1cmUgYnV0IHNvdXJjZUZvcm1hdD9cbiAgICAvLyBUT0RPIHJlZmFjdG9yIHRoZXNlIGxvZ2ljLlxuXG5cbiAgICBpZiAoIXJhd0RhdGEucHVyZSkge1xuICAgICAgdmFyIG5hbWUgPSBuYW1lTGlzdFtpZHhdO1xuXG4gICAgICBpZiAoZGF0YUl0ZW0gJiYgbmFtZSA9PSBudWxsKSB7XG4gICAgICAgIC8vIElmIGRhdGFJdGVtIGlzIHtuYW1lOiAuLi59LCBpdCBoYXMgaGlnaGVzdCBwcmlvcml0eS5cbiAgICAgICAgLy8gVGhhdCBpcyBhcHByb3ByaWF0ZSBmb3IgbWFueSBjb21tb24gY2FzZXMuXG4gICAgICAgIGlmIChkYXRhSXRlbS5uYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBUaGVyZSBpcyBubyBvdGhlciBwbGFjZSB0byBwZXJzaXN0ZW50IGRhdGFJdGVtLm5hbWUsXG4gICAgICAgICAgLy8gc28gc2F2ZSBpdCB0byBuYW1lTGlzdC5cbiAgICAgICAgICBuYW1lTGlzdFtpZHhdID0gbmFtZSA9IGRhdGFJdGVtLm5hbWU7XG4gICAgICAgIH0gZWxzZSBpZiAobmFtZURpbUlkeCAhPSBudWxsKSB7XG4gICAgICAgICAgdmFyIG5hbWVEaW0gPSBkaW1lbnNpb25zW25hbWVEaW1JZHhdO1xuICAgICAgICAgIHZhciBuYW1lRGltQ2h1bmsgPSBzdG9yYWdlW25hbWVEaW1dW2NodW5rSW5kZXhdO1xuXG4gICAgICAgICAgaWYgKG5hbWVEaW1DaHVuaykge1xuICAgICAgICAgICAgbmFtZSA9IG5hbWVEaW1DaHVua1tjaHVua09mZnNldF07XG4gICAgICAgICAgICB2YXIgb3JkaW5hbE1ldGEgPSBkaW1lbnNpb25JbmZvTWFwW25hbWVEaW1dLm9yZGluYWxNZXRhO1xuXG4gICAgICAgICAgICBpZiAob3JkaW5hbE1ldGEgJiYgb3JkaW5hbE1ldGEuY2F0ZWdvcmllcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgbmFtZSA9IG9yZGluYWxNZXRhLmNhdGVnb3JpZXNbbmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IC8vIFRyeSB1c2luZyB0aGUgaWQgaW4gb3B0aW9uXG4gICAgICAvLyBpZCBvciBuYW1lIGlzIHVzZWQgb24gZHluYW1pY2FsIGRhdGEsIG1hcHBpbmcgb2xkIGFuZCBuZXcgaXRlbXMuXG5cblxuICAgICAgdmFyIGlkID0gZGF0YUl0ZW0gPT0gbnVsbCA/IG51bGwgOiBkYXRhSXRlbS5pZDtcblxuICAgICAgaWYgKGlkID09IG51bGwgJiYgbmFtZSAhPSBudWxsKSB7XG4gICAgICAgIC8vIFVzZSBuYW1lIGFzIGlkIGFuZCBhZGQgY291bnRlciB0byBhdm9pZCBzYW1lIG5hbWVcbiAgICAgICAgbmFtZVJlcGVhdENvdW50W25hbWVdID0gbmFtZVJlcGVhdENvdW50W25hbWVdIHx8IDA7XG4gICAgICAgIGlkID0gbmFtZTtcblxuICAgICAgICBpZiAobmFtZVJlcGVhdENvdW50W25hbWVdID4gMCkge1xuICAgICAgICAgIGlkICs9ICdfX2VjX18nICsgbmFtZVJlcGVhdENvdW50W25hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgbmFtZVJlcGVhdENvdW50W25hbWVdKys7XG4gICAgICB9XG5cbiAgICAgIGlkICE9IG51bGwgJiYgKGlkTGlzdFtpZHhdID0gaWQpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghcmF3RGF0YS5wZXJzaXN0ZW50ICYmIHJhd0RhdGEuY2xlYW4pIHtcbiAgICAvLyBDbGVhbiB1bnVzZWQgZGF0YSBpZiBkYXRhIHNvdXJjZSBpcyB0eXBlZCBhcnJheS5cbiAgICByYXdEYXRhLmNsZWFuKCk7XG4gIH1cblxuICB0aGlzLl9yYXdDb3VudCA9IHRoaXMuX2NvdW50ID0gZW5kOyAvLyBSZXNldCBkYXRhIGV4dGVudFxuXG4gIHRoaXMuX2V4dGVudCA9IHt9O1xuICBwcmVwYXJlSW52ZXJ0ZWRJbmRleCh0aGlzKTtcbn07XG5cbmZ1bmN0aW9uIHByZXBhcmVJbnZlcnRlZEluZGV4KGxpc3QpIHtcbiAgdmFyIGludmVydGVkSW5kaWNlc01hcCA9IGxpc3QuX2ludmVydGVkSW5kaWNlc01hcDtcbiAgenJVdGlsLmVhY2goaW52ZXJ0ZWRJbmRpY2VzTWFwLCBmdW5jdGlvbiAoaW52ZXJ0ZWRJbmRpY2VzLCBkaW0pIHtcbiAgICB2YXIgZGltSW5mbyA9IGxpc3QuX2RpbWVuc2lvbkluZm9zW2RpbV07IC8vIEN1cnJlbnRseSwgb25seSBkaW1lbnNpb25zIHRoYXQgaGFzIG9yZGluYWxNZXRhIGNhbiBjcmVhdGUgaW52ZXJ0ZWQgaW5kaWNlcy5cblxuICAgIHZhciBvcmRpbmFsTWV0YSA9IGRpbUluZm8ub3JkaW5hbE1ldGE7XG5cbiAgICBpZiAob3JkaW5hbE1ldGEpIHtcbiAgICAgIGludmVydGVkSW5kaWNlcyA9IGludmVydGVkSW5kaWNlc01hcFtkaW1dID0gbmV3IEN0b3JVaW50MzJBcnJheShvcmRpbmFsTWV0YS5jYXRlZ29yaWVzLmxlbmd0aCk7IC8vIFRoZSBkZWZhdWx0IHZhbHVlIG9mIFR5cGVkQXJyYXkgaXMgMC4gVG8gYXZvaWQgbWlzc1xuICAgICAgLy8gbWFwcGluZyB0byAwLCB3ZSBzaG91bGQgc2V0IGl0IGFzIE5hTi5cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnZlcnRlZEluZGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW52ZXJ0ZWRJbmRpY2VzW2ldID0gTmFOO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QuX2NvdW50OyBpKyspIHtcbiAgICAgICAgLy8gT25seSBzdXBwb3J0IHRoZSBjYXNlIHRoYXQgYWxsIHZhbHVlcyBhcmUgZGlzdGluY3QuXG4gICAgICAgIGludmVydGVkSW5kaWNlc1tsaXN0LmdldChkaW0sIGkpXSA9IGk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0UmF3VmFsdWVGcm9tU3RvcmUobGlzdCwgZGltSW5kZXgsIHJhd0luZGV4KSB7XG4gIHZhciB2YWw7XG5cbiAgaWYgKGRpbUluZGV4ICE9IG51bGwpIHtcbiAgICB2YXIgY2h1bmtTaXplID0gbGlzdC5fY2h1bmtTaXplO1xuICAgIHZhciBjaHVua0luZGV4ID0gTWF0aC5mbG9vcihyYXdJbmRleCAvIGNodW5rU2l6ZSk7XG4gICAgdmFyIGNodW5rT2Zmc2V0ID0gcmF3SW5kZXggJSBjaHVua1NpemU7XG4gICAgdmFyIGRpbSA9IGxpc3QuZGltZW5zaW9uc1tkaW1JbmRleF07XG4gICAgdmFyIGNodW5rID0gbGlzdC5fc3RvcmFnZVtkaW1dW2NodW5rSW5kZXhdO1xuXG4gICAgaWYgKGNodW5rKSB7XG4gICAgICB2YWwgPSBjaHVua1tjaHVua09mZnNldF07XG4gICAgICB2YXIgb3JkaW5hbE1ldGEgPSBsaXN0Ll9kaW1lbnNpb25JbmZvc1tkaW1dLm9yZGluYWxNZXRhO1xuXG4gICAgICBpZiAob3JkaW5hbE1ldGEgJiYgb3JkaW5hbE1ldGEuY2F0ZWdvcmllcy5sZW5ndGgpIHtcbiAgICAgICAgdmFsID0gb3JkaW5hbE1ldGEuY2F0ZWdvcmllc1t2YWxdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YWw7XG59XG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuXG5cbmxpc3RQcm90by5jb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2NvdW50O1xufTtcblxubGlzdFByb3RvLmdldEluZGljZXMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBuZXdJbmRpY2VzO1xuICB2YXIgaW5kaWNlcyA9IHRoaXMuX2luZGljZXM7XG5cbiAgaWYgKGluZGljZXMpIHtcbiAgICB2YXIgQ3RvciA9IGluZGljZXMuY29uc3RydWN0b3I7XG4gICAgdmFyIHRoaXNDb3VudCA9IHRoaXMuX2NvdW50OyAvLyBgbmV3IEFycmF5KGEsIGIsIGMpYCBpcyBkaWZmZXJlbnQgZnJvbSBgbmV3IFVpbnQzMkFycmF5KGEsIGIsIGMpYC5cblxuICAgIGlmIChDdG9yID09PSBBcnJheSkge1xuICAgICAgbmV3SW5kaWNlcyA9IG5ldyBDdG9yKHRoaXNDb3VudCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpc0NvdW50OyBpKyspIHtcbiAgICAgICAgbmV3SW5kaWNlc1tpXSA9IGluZGljZXNbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0luZGljZXMgPSBuZXcgQ3RvcihpbmRpY2VzLmJ1ZmZlciwgMCwgdGhpc0NvdW50KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIEN0b3IgPSBnZXRJbmRpY2VzQ3Rvcih0aGlzKTtcbiAgICB2YXIgbmV3SW5kaWNlcyA9IG5ldyBDdG9yKHRoaXMuY291bnQoKSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0luZGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5ld0luZGljZXNbaV0gPSBpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdJbmRpY2VzO1xufTtcbi8qKlxuICogR2V0IHZhbHVlLiBSZXR1cm4gTmFOIGlmIGlkeCBpcyBvdXQgb2YgcmFuZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGltIERpbSBtdXN0IGJlIGNvbmNyZXRlIG5hbWUuXG4gKiBAcGFyYW0ge251bWJlcn0gaWR4XG4gKiBAcGFyYW0ge2Jvb2xlYW59IHN0YWNrXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuXG5saXN0UHJvdG8uZ2V0ID0gZnVuY3Rpb24gKGRpbSwgaWR4XG4vKiwgc3RhY2sgKi9cbikge1xuICBpZiAoIShpZHggPj0gMCAmJiBpZHggPCB0aGlzLl9jb3VudCkpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgdmFyIHN0b3JhZ2UgPSB0aGlzLl9zdG9yYWdlO1xuXG4gIGlmICghc3RvcmFnZVtkaW1dKSB7XG4gICAgLy8gVE9ETyBXYXJuID9cbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgaWR4ID0gdGhpcy5nZXRSYXdJbmRleChpZHgpO1xuICB2YXIgY2h1bmtJbmRleCA9IE1hdGguZmxvb3IoaWR4IC8gdGhpcy5fY2h1bmtTaXplKTtcbiAgdmFyIGNodW5rT2Zmc2V0ID0gaWR4ICUgdGhpcy5fY2h1bmtTaXplO1xuICB2YXIgY2h1bmtTdG9yZSA9IHN0b3JhZ2VbZGltXVtjaHVua0luZGV4XTtcbiAgdmFyIHZhbHVlID0gY2h1bmtTdG9yZVtjaHVua09mZnNldF07IC8vIEZJWE1FIG9yZGluYWwgZGF0YSB0eXBlIGlzIG5vdCBzdGFja2FibGVcbiAgLy8gaWYgKHN0YWNrKSB7XG4gIC8vICAgICB2YXIgZGltZW5zaW9uSW5mbyA9IHRoaXMuX2RpbWVuc2lvbkluZm9zW2RpbV07XG4gIC8vICAgICBpZiAoZGltZW5zaW9uSW5mbyAmJiBkaW1lbnNpb25JbmZvLnN0YWNrYWJsZSkge1xuICAvLyAgICAgICAgIHZhciBzdGFja2VkT24gPSB0aGlzLnN0YWNrZWRPbjtcbiAgLy8gICAgICAgICB3aGlsZSAoc3RhY2tlZE9uKSB7XG4gIC8vICAgICAgICAgICAgIC8vIEdldCBubyBzdGFja2VkIGRhdGEgb2Ygc3RhY2tlZCBvblxuICAvLyAgICAgICAgICAgICB2YXIgc3RhY2tlZFZhbHVlID0gc3RhY2tlZE9uLmdldChkaW0sIGlkeCk7XG4gIC8vICAgICAgICAgICAgIC8vIENvbnNpZGVyaW5nIHBvc2l0aXZlIHN0YWNrLCBuZWdhdGl2ZSBzdGFjayBhbmQgZW1wdHkgZGF0YVxuICAvLyAgICAgICAgICAgICBpZiAoKHZhbHVlID49IDAgJiYgc3RhY2tlZFZhbHVlID4gMCkgIC8vIFBvc2l0aXZlIHN0YWNrXG4gIC8vICAgICAgICAgICAgICAgICB8fCAodmFsdWUgPD0gMCAmJiBzdGFja2VkVmFsdWUgPCAwKSAvLyBOZWdhdGl2ZSBzdGFja1xuICAvLyAgICAgICAgICAgICApIHtcbiAgLy8gICAgICAgICAgICAgICAgIHZhbHVlICs9IHN0YWNrZWRWYWx1ZTtcbiAgLy8gICAgICAgICAgICAgfVxuICAvLyAgICAgICAgICAgICBzdGFja2VkT24gPSBzdGFja2VkT24uc3RhY2tlZE9uO1xuICAvLyAgICAgICAgIH1cbiAgLy8gICAgIH1cbiAgLy8gfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBkaW0gY29uY3JldGUgZGltXG4gKiBAcGFyYW0ge251bWJlcn0gcmF3SW5kZXhcbiAqIEByZXR1cm4ge251bWJlcnxzdHJpbmd9XG4gKi9cblxuXG5saXN0UHJvdG8uZ2V0QnlSYXdJbmRleCA9IGZ1bmN0aW9uIChkaW0sIHJhd0lkeCkge1xuICBpZiAoIShyYXdJZHggPj0gMCAmJiByYXdJZHggPCB0aGlzLl9yYXdDb3VudCkpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgdmFyIGRpbVN0b3JlID0gdGhpcy5fc3RvcmFnZVtkaW1dO1xuXG4gIGlmICghZGltU3RvcmUpIHtcbiAgICAvLyBUT0RPIFdhcm4gP1xuICAgIHJldHVybiBOYU47XG4gIH1cblxuICB2YXIgY2h1bmtJbmRleCA9IE1hdGguZmxvb3IocmF3SWR4IC8gdGhpcy5fY2h1bmtTaXplKTtcbiAgdmFyIGNodW5rT2Zmc2V0ID0gcmF3SWR4ICUgdGhpcy5fY2h1bmtTaXplO1xuICB2YXIgY2h1bmtTdG9yZSA9IGRpbVN0b3JlW2NodW5rSW5kZXhdO1xuICByZXR1cm4gY2h1bmtTdG9yZVtjaHVua09mZnNldF07XG59O1xuLyoqXG4gKiBGSVhNRSBVc2UgYGdldGAgb24gY2hyb21lIG1heWJlIHNsb3coaW4gZmlsdGVyU2VsZiBhbmQgc2VsZWN0UmFuZ2UpLlxuICogSGFjayBhIG11Y2ggc2ltcGxlciBfZ2V0RmFzdFxuICogQHByaXZhdGVcbiAqL1xuXG5cbmxpc3RQcm90by5fZ2V0RmFzdCA9IGZ1bmN0aW9uIChkaW0sIHJhd0lkeCkge1xuICB2YXIgY2h1bmtJbmRleCA9IE1hdGguZmxvb3IocmF3SWR4IC8gdGhpcy5fY2h1bmtTaXplKTtcbiAgdmFyIGNodW5rT2Zmc2V0ID0gcmF3SWR4ICUgdGhpcy5fY2h1bmtTaXplO1xuICB2YXIgY2h1bmtTdG9yZSA9IHRoaXMuX3N0b3JhZ2VbZGltXVtjaHVua0luZGV4XTtcbiAgcmV0dXJuIGNodW5rU3RvcmVbY2h1bmtPZmZzZXRdO1xufTtcbi8qKlxuICogR2V0IHZhbHVlIGZvciBtdWx0aSBkaW1lbnNpb25zLlxuICogQHBhcmFtIHtBcnJheS48c3RyaW5nPn0gW2RpbWVuc2lvbnNdIElmIGlnbm9yZWQsIHVzaW5nIGFsbCBkaW1lbnNpb25zLlxuICogQHBhcmFtIHtudW1iZXJ9IGlkeFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5cblxubGlzdFByb3RvLmdldFZhbHVlcyA9IGZ1bmN0aW9uIChkaW1lbnNpb25zLCBpZHhcbi8qLCBzdGFjayAqL1xuKSB7XG4gIHZhciB2YWx1ZXMgPSBbXTtcblxuICBpZiAoIXpyVXRpbC5pc0FycmF5KGRpbWVuc2lvbnMpKSB7XG4gICAgLy8gc3RhY2sgPSBpZHg7XG4gICAgaWR4ID0gZGltZW5zaW9ucztcbiAgICBkaW1lbnNpb25zID0gdGhpcy5kaW1lbnNpb25zO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGRpbWVuc2lvbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YWx1ZXMucHVzaCh0aGlzLmdldChkaW1lbnNpb25zW2ldLCBpZHhcbiAgICAvKiwgc3RhY2sgKi9cbiAgICApKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZXM7XG59O1xuLyoqXG4gKiBJZiB2YWx1ZSBpcyBOYU4uIElubGN1ZGluZyAnLSdcbiAqIE9ubHkgY2hlY2sgdGhlIGNvb3JkIGRpbWVuc2lvbnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGltXG4gKiBAcGFyYW0ge251bWJlcn0gaWR4XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuXG5saXN0UHJvdG8uaGFzVmFsdWUgPSBmdW5jdGlvbiAoaWR4KSB7XG4gIHZhciBkYXRhRGltc09uQ29vcmQgPSB0aGlzLl9kaW1lbnNpb25zU3VtbWFyeS5kYXRhRGltc09uQ29vcmQ7XG4gIHZhciBkaW1lbnNpb25JbmZvcyA9IHRoaXMuX2RpbWVuc2lvbkluZm9zO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBkYXRhRGltc09uQ29vcmQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIC8vIE9yZGluYWwgdHlwZSBjYW4gYmUgc3RyaW5nIG9yIG51bWJlclxuICAgIGRpbWVuc2lvbkluZm9zW2RhdGFEaW1zT25Db29yZFtpXV0udHlwZSAhPT0gJ29yZGluYWwnIC8vIEZJWE1FIGNoZWNrIG9yZGluYWwgd2hlbiB1c2luZyBpbmRleD9cbiAgICAmJiBpc05hTih0aGlzLmdldChkYXRhRGltc09uQ29vcmRbaV0sIGlkeCkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG4gKiBHZXQgZXh0ZW50IG9mIGRhdGEgaW4gb25lIGRpbWVuc2lvblxuICogQHBhcmFtIHtzdHJpbmd9IGRpbVxuICogQHBhcmFtIHtib29sZWFufSBzdGFja1xuICovXG5cblxubGlzdFByb3RvLmdldERhdGFFeHRlbnQgPSBmdW5jdGlvbiAoZGltXG4vKiwgc3RhY2sgKi9cbikge1xuICAvLyBNYWtlIHN1cmUgdXNlIGNvbmNyZXRlIGRpbSBhcyBjYWNoZSBuYW1lLlxuICBkaW0gPSB0aGlzLmdldERpbWVuc2lvbihkaW0pO1xuICB2YXIgZGltRGF0YSA9IHRoaXMuX3N0b3JhZ2VbZGltXTtcbiAgdmFyIGluaXRpYWxFeHRlbnQgPSBnZXRJbml0aWFsRXh0ZW50KCk7IC8vIHN0YWNrID0gISEoKHN0YWNrIHx8IGZhbHNlKSAmJiB0aGlzLmdldENhbGN1bGF0aW9uSW5mbyhkaW0pKTtcblxuICBpZiAoIWRpbURhdGEpIHtcbiAgICByZXR1cm4gaW5pdGlhbEV4dGVudDtcbiAgfSAvLyBNYWtlIG1vcmUgc3RyaWN0IGNoZWNraW5ncyB0byBlbnN1cmUgaGl0dGluZyBjYWNoZS5cblxuXG4gIHZhciBjdXJyRW5kID0gdGhpcy5jb3VudCgpOyAvLyB2YXIgY2FjaGVOYW1lID0gW2RpbSwgISFzdGFja10uam9pbignXycpO1xuICAvLyB2YXIgY2FjaGVOYW1lID0gZGltO1xuICAvLyBDb25zaWRlciB0aGUgbW9zdCBjYXNlcyB3aGVuIHVzaW5nIGRhdGEgem9vbSwgYGdldERhdGFFeHRlbnRgXG4gIC8vIGhhcHBlbmVkIGJlZm9yZSBmaWx0ZXJpbmcuIFdlIGNhY2hlIHJhdyBleHRlbnQsIHdoaWNoIGlzIG5vdFxuICAvLyBuZWNlc3NhcnkgdG8gYmUgY2xlYXJlZCBhbmQgcmVjYWxjdWxhdGVkIHdoZW4gcmVzdG9yZSBkYXRhLlxuXG4gIHZhciB1c2VSYXcgPSAhdGhpcy5faW5kaWNlczsgLy8gJiYgIXN0YWNrO1xuXG4gIHZhciBkaW1FeHRlbnQ7XG5cbiAgaWYgKHVzZVJhdykge1xuICAgIHJldHVybiB0aGlzLl9yYXdFeHRlbnRbZGltXS5zbGljZSgpO1xuICB9XG5cbiAgZGltRXh0ZW50ID0gdGhpcy5fZXh0ZW50W2RpbV07XG5cbiAgaWYgKGRpbUV4dGVudCkge1xuICAgIHJldHVybiBkaW1FeHRlbnQuc2xpY2UoKTtcbiAgfVxuXG4gIGRpbUV4dGVudCA9IGluaXRpYWxFeHRlbnQ7XG4gIHZhciBtaW4gPSBkaW1FeHRlbnRbMF07XG4gIHZhciBtYXggPSBkaW1FeHRlbnRbMV07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdXJyRW5kOyBpKyspIHtcbiAgICAvLyB2YXIgdmFsdWUgPSBzdGFjayA/IHRoaXMuZ2V0KGRpbSwgaSwgdHJ1ZSkgOiB0aGlzLl9nZXRGYXN0KGRpbSwgdGhpcy5nZXRSYXdJbmRleChpKSk7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5fZ2V0RmFzdChkaW0sIHRoaXMuZ2V0UmF3SW5kZXgoaSkpO1xuXG4gICAgdmFsdWUgPCBtaW4gJiYgKG1pbiA9IHZhbHVlKTtcbiAgICB2YWx1ZSA+IG1heCAmJiAobWF4ID0gdmFsdWUpO1xuICB9XG5cbiAgZGltRXh0ZW50ID0gW21pbiwgbWF4XTtcbiAgdGhpcy5fZXh0ZW50W2RpbV0gPSBkaW1FeHRlbnQ7XG4gIHJldHVybiBkaW1FeHRlbnQ7XG59O1xuLyoqXG4gKiBPcHRpbWl6ZSBmb3IgdGhlIHNjZW5hcmlvIHRoYXQgZGF0YSBpcyBmaWx0ZXJlZCBieSBhIGdpdmVuIGV4dGVudC5cbiAqIENvbnNpZGVyIHRoYXQgaWYgZGF0YSBhbW91bnQgaXMgbW9yZSB0aGFuIGh1bmRyZWRzIG9mIHRob3VzYW5kLFxuICogZXh0ZW50IGNhbGN1bGF0aW9uIHdpbGwgY29zdCBtb3JlIHRoYW4gMTBtcyBhbmQgdGhlIGNhY2hlIHdpbGxcbiAqIGJlIGVyYXNlZCBiZWNhdXNlIG9mIHRoZSBmaWx0ZXJpbmcuXG4gKi9cblxuXG5saXN0UHJvdG8uZ2V0QXBwcm94aW1hdGVFeHRlbnQgPSBmdW5jdGlvbiAoZGltXG4vKiwgc3RhY2sgKi9cbikge1xuICBkaW0gPSB0aGlzLmdldERpbWVuc2lvbihkaW0pO1xuICByZXR1cm4gdGhpcy5fYXBwcm94aW1hdGVFeHRlbnRbZGltXSB8fCB0aGlzLmdldERhdGFFeHRlbnQoZGltXG4gIC8qLCBzdGFjayAqL1xuICApO1xufTtcblxubGlzdFByb3RvLnNldEFwcHJveGltYXRlRXh0ZW50ID0gZnVuY3Rpb24gKGV4dGVudCwgZGltXG4vKiwgc3RhY2sgKi9cbikge1xuICBkaW0gPSB0aGlzLmdldERpbWVuc2lvbihkaW0pO1xuICB0aGlzLl9hcHByb3hpbWF0ZUV4dGVudFtkaW1dID0gZXh0ZW50LnNsaWNlKCk7XG59O1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcmV0dXJuIHsqfVxuICovXG5cblxubGlzdFByb3RvLmdldENhbGN1bGF0aW9uSW5mbyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX2NhbGN1bGF0aW9uSW5mb1trZXldO1xufTtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBrZXkgb3Igay12IG9iamVjdFxuICogQHBhcmFtIHsqfSBbdmFsdWVdXG4gKi9cblxuXG5saXN0UHJvdG8uc2V0Q2FsY3VsYXRpb25JbmZvID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgaXNPYmplY3Qoa2V5KSA/IHpyVXRpbC5leHRlbmQodGhpcy5fY2FsY3VsYXRpb25JbmZvLCBrZXkpIDogdGhpcy5fY2FsY3VsYXRpb25JbmZvW2tleV0gPSB2YWx1ZTtcbn07XG4vKipcbiAqIEdldCBzdW0gb2YgZGF0YSBpbiBvbmUgZGltZW5zaW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gZGltXG4gKi9cblxuXG5saXN0UHJvdG8uZ2V0U3VtID0gZnVuY3Rpb24gKGRpbVxuLyosIHN0YWNrICovXG4pIHtcbiAgdmFyIGRpbURhdGEgPSB0aGlzLl9zdG9yYWdlW2RpbV07XG4gIHZhciBzdW0gPSAwO1xuXG4gIGlmIChkaW1EYXRhKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuY291bnQoKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLmdldChkaW0sIGlcbiAgICAgIC8qLCBzdGFjayAqL1xuICAgICAgKTtcblxuICAgICAgaWYgKCFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgc3VtICs9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdW07XG59O1xuLyoqXG4gKiBHZXQgbWVkaWFuIG9mIGRhdGEgaW4gb25lIGRpbWVuc2lvblxuICogQHBhcmFtIHtzdHJpbmd9IGRpbVxuICovXG5cblxubGlzdFByb3RvLmdldE1lZGlhbiA9IGZ1bmN0aW9uIChkaW1cbi8qLCBzdGFjayAqL1xuKSB7XG4gIHZhciBkaW1EYXRhQXJyYXkgPSBbXTsgLy8gbWFwIGFsbCBkYXRhIG9mIG9uZSBkaW1lbnNpb25cblxuICB0aGlzLmVhY2goZGltLCBmdW5jdGlvbiAodmFsLCBpZHgpIHtcbiAgICBpZiAoIWlzTmFOKHZhbCkpIHtcbiAgICAgIGRpbURhdGFBcnJheS5wdXNoKHZhbCk7XG4gICAgfVxuICB9KTsgLy8gVE9ET1xuICAvLyBVc2UgcXVpY2sgc2VsZWN0P1xuICAvLyBpbW11dGFiaWxpdHkgJiBzb3J0XG5cbiAgdmFyIHNvcnRlZERpbURhdGFBcnJheSA9IFtdLmNvbmNhdChkaW1EYXRhQXJyYXkpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYSAtIGI7XG4gIH0pO1xuICB2YXIgbGVuID0gdGhpcy5jb3VudCgpOyAvLyBjYWxjdWxhdGUgbWVkaWFuXG5cbiAgcmV0dXJuIGxlbiA9PT0gMCA/IDAgOiBsZW4gJSAyID09PSAxID8gc29ydGVkRGltRGF0YUFycmF5WyhsZW4gLSAxKSAvIDJdIDogKHNvcnRlZERpbURhdGFBcnJheVtsZW4gLyAyXSArIHNvcnRlZERpbURhdGFBcnJheVtsZW4gLyAyIC0gMV0pIC8gMjtcbn07IC8vIC8qKlxuLy8gICogUmV0cmVpdmUgdGhlIGluZGV4IHdpdGggZ2l2ZW4gdmFsdWVcbi8vICAqIEBwYXJhbSB7c3RyaW5nfSBkaW0gQ29uY3JldGUgZGltZW5zaW9uLlxuLy8gICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4vLyAgKiBAcmV0dXJuIHtudW1iZXJ9XG4vLyAgKi9cbi8vIEN1cnJlbnRseSBpbmNvcnJlY3Q6IHNob3VsZCByZXR1cm4gZGF0YUluZGV4IGJ1dCBub3QgcmF3SW5kZXguXG4vLyBEbyBub3QgZml4IGl0IHVudGlsIHRoaXMgbWV0aG9kIGlzIHRvIGJlIHVzZWQgc29tZXdoZXJlLlxuLy8gRklYTUUgUHJlY2lzaW9uIG9mIGZsb2F0IHZhbHVlXG4vLyBsaXN0UHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIChkaW0sIHZhbHVlKSB7XG4vLyAgICAgdmFyIHN0b3JhZ2UgPSB0aGlzLl9zdG9yYWdlO1xuLy8gICAgIHZhciBkaW1EYXRhID0gc3RvcmFnZVtkaW1dO1xuLy8gICAgIHZhciBjaHVua1NpemUgPSB0aGlzLl9jaHVua1NpemU7XG4vLyAgICAgaWYgKGRpbURhdGEpIHtcbi8vICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuY291bnQoKTsgaSA8IGxlbjsgaSsrKSB7XG4vLyAgICAgICAgICAgICB2YXIgY2h1bmtJbmRleCA9IE1hdGguZmxvb3IoaSAvIGNodW5rU2l6ZSk7XG4vLyAgICAgICAgICAgICB2YXIgY2h1bmtPZmZzZXQgPSBpICUgY2h1bmtTaXplO1xuLy8gICAgICAgICAgICAgaWYgKGRpbURhdGFbY2h1bmtJbmRleF1bY2h1bmtPZmZzZXRdID09PSB2YWx1ZSkge1xuLy8gICAgICAgICAgICAgICAgIHJldHVybiBpO1xuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gICAgIHJldHVybiAtMTtcbi8vIH07XG5cbi8qKlxuICogT25seSBzdXBwb3J0IHRoZSBkaW1lbnNpb24gd2hpY2ggaW52ZXJ0ZWQgaW5kZXggY3JlYXRlZC5cbiAqIERvIG5vdCBzdXBwb3J0IG90aGVyIGNhc2VzIHVudGlsIHJlcXVpcmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbmNyZXRlIGRpbVxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7bnVtYmVyfSByYXdJbmRleFxuICovXG5cblxubGlzdFByb3RvLnJhd0luZGV4T2YgPSBmdW5jdGlvbiAoZGltLCB2YWx1ZSkge1xuICB2YXIgaW52ZXJ0ZWRJbmRpY2VzID0gZGltICYmIHRoaXMuX2ludmVydGVkSW5kaWNlc01hcFtkaW1dO1xuICB2YXIgcmF3SW5kZXggPSBpbnZlcnRlZEluZGljZXNbdmFsdWVdO1xuXG4gIGlmIChyYXdJbmRleCA9PSBudWxsIHx8IGlzTmFOKHJhd0luZGV4KSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIHJldHVybiByYXdJbmRleDtcbn07XG4vKipcbiAqIFJldHJlaXZlIHRoZSBpbmRleCB3aXRoIGdpdmVuIG5hbWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpZHhcbiAqIEBwYXJhbSB7bnVtYmVyfSBuYW1lXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuXG5saXN0UHJvdG8uaW5kZXhPZk5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5jb3VudCgpOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAodGhpcy5nZXROYW1lKGkpID09PSBuYW1lKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTE7XG59O1xuLyoqXG4gKiBSZXRyZWl2ZSB0aGUgaW5kZXggd2l0aCBnaXZlbiByYXcgZGF0YSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IGlkeFxuICogQHBhcmFtIHtudW1iZXJ9IG5hbWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuXG5cbmxpc3RQcm90by5pbmRleE9mUmF3SW5kZXggPSBmdW5jdGlvbiAocmF3SW5kZXgpIHtcbiAgaWYgKCF0aGlzLl9pbmRpY2VzKSB7XG4gICAgcmV0dXJuIHJhd0luZGV4O1xuICB9XG5cbiAgaWYgKHJhd0luZGV4ID49IHRoaXMuX3Jhd0NvdW50IHx8IHJhd0luZGV4IDwgMCkge1xuICAgIHJldHVybiAtMTtcbiAgfSAvLyBJbmRpY2VzIGFyZSBhc2NlbmRpbmdcblxuXG4gIHZhciBpbmRpY2VzID0gdGhpcy5faW5kaWNlczsgLy8gSWYgcmF3SW5kZXggPT09IGRhdGFJbmRleFxuXG4gIHZhciByYXdEYXRhSW5kZXggPSBpbmRpY2VzW3Jhd0luZGV4XTtcblxuICBpZiAocmF3RGF0YUluZGV4ICE9IG51bGwgJiYgcmF3RGF0YUluZGV4IDwgdGhpcy5fY291bnQgJiYgcmF3RGF0YUluZGV4ID09PSByYXdJbmRleCkge1xuICAgIHJldHVybiByYXdJbmRleDtcbiAgfVxuXG4gIHZhciBsZWZ0ID0gMDtcbiAgdmFyIHJpZ2h0ID0gdGhpcy5fY291bnQgLSAxO1xuXG4gIHdoaWxlIChsZWZ0IDw9IHJpZ2h0KSB7XG4gICAgdmFyIG1pZCA9IChsZWZ0ICsgcmlnaHQpIC8gMiB8IDA7XG5cbiAgICBpZiAoaW5kaWNlc1ttaWRdIDwgcmF3SW5kZXgpIHtcbiAgICAgIGxlZnQgPSBtaWQgKyAxO1xuICAgIH0gZWxzZSBpZiAoaW5kaWNlc1ttaWRdID4gcmF3SW5kZXgpIHtcbiAgICAgIHJpZ2h0ID0gbWlkIC0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1pZDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTE7XG59O1xuLyoqXG4gKiBSZXRyZWl2ZSB0aGUgaW5kZXggb2YgbmVhcmVzdCB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IGRpbVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gW21heERpc3RhbmNlPUluZmluaXR5XVxuICogQHJldHVybiB7QXJyYXkuPG51bWJlcj59IENvbnNpZGVyZSBtdWx0aXBsZSBwb2ludHMgaGFzIHRoZSBzYW1lIHZhbHVlLlxuICovXG5cblxubGlzdFByb3RvLmluZGljZXNPZk5lYXJlc3QgPSBmdW5jdGlvbiAoZGltLCB2YWx1ZSwgbWF4RGlzdGFuY2UpIHtcbiAgdmFyIHN0b3JhZ2UgPSB0aGlzLl9zdG9yYWdlO1xuICB2YXIgZGltRGF0YSA9IHN0b3JhZ2VbZGltXTtcbiAgdmFyIG5lYXJlc3RJbmRpY2VzID0gW107XG5cbiAgaWYgKCFkaW1EYXRhKSB7XG4gICAgcmV0dXJuIG5lYXJlc3RJbmRpY2VzO1xuICB9XG5cbiAgaWYgKG1heERpc3RhbmNlID09IG51bGwpIHtcbiAgICBtYXhEaXN0YW5jZSA9IEluZmluaXR5O1xuICB9XG5cbiAgdmFyIG1pbkRpc3QgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICB2YXIgbWluRGlmZiA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmNvdW50KCk7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBkaWZmID0gdmFsdWUgLSB0aGlzLmdldChkaW0sIGlcbiAgICAvKiwgc3RhY2sgKi9cbiAgICApO1xuICAgIHZhciBkaXN0ID0gTWF0aC5hYnMoZGlmZik7XG5cbiAgICBpZiAoZGlmZiA8PSBtYXhEaXN0YW5jZSAmJiBkaXN0IDw9IG1pbkRpc3QpIHtcbiAgICAgIC8vIEZvciB0aGUgY2FzZSBvZiB0d28gZGF0YSBhcmUgc2FtZSBvbiB4QXhpcywgd2hpY2ggaGFzIHNlcXVlbmNlIGRhdGEuXG4gICAgICAvLyBTaG93IHRoZSBuZWFyZXN0IGluZGV4XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZWNvbWZlL2VjaGFydHMvaXNzdWVzLzI4NjlcbiAgICAgIGlmIChkaXN0IDwgbWluRGlzdCB8fCBkaWZmID49IDAgJiYgbWluRGlmZiA8IDApIHtcbiAgICAgICAgbWluRGlzdCA9IGRpc3Q7XG4gICAgICAgIG1pbkRpZmYgPSBkaWZmO1xuICAgICAgICBuZWFyZXN0SW5kaWNlcy5sZW5ndGggPSAwO1xuICAgICAgfVxuXG4gICAgICBuZWFyZXN0SW5kaWNlcy5wdXNoKGkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZWFyZXN0SW5kaWNlcztcbn07XG4vKipcbiAqIEdldCByYXcgZGF0YSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IGlkeFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5cblxubGlzdFByb3RvLmdldFJhd0luZGV4ID0gZ2V0UmF3SW5kZXhXaXRob3V0SW5kaWNlcztcblxuZnVuY3Rpb24gZ2V0UmF3SW5kZXhXaXRob3V0SW5kaWNlcyhpZHgpIHtcbiAgcmV0dXJuIGlkeDtcbn1cblxuZnVuY3Rpb24gZ2V0UmF3SW5kZXhXaXRoSW5kaWNlcyhpZHgpIHtcbiAgaWYgKGlkeCA8IHRoaXMuX2NvdW50ICYmIGlkeCA+PSAwKSB7XG4gICAgcmV0dXJuIHRoaXMuX2luZGljZXNbaWR4XTtcbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cbi8qKlxuICogR2V0IHJhdyBkYXRhIGl0ZW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBpZHhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuXG5cbmxpc3RQcm90by5nZXRSYXdEYXRhSXRlbSA9IGZ1bmN0aW9uIChpZHgpIHtcbiAgaWYgKCF0aGlzLl9yYXdEYXRhLnBlcnNpc3RlbnQpIHtcbiAgICB2YXIgdmFsID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZGltZW5zaW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRpbSA9IHRoaXMuZGltZW5zaW9uc1tpXTtcbiAgICAgIHZhbC5wdXNoKHRoaXMuZ2V0KGRpbSwgaWR4KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5fcmF3RGF0YS5nZXRJdGVtKHRoaXMuZ2V0UmF3SW5kZXgoaWR4KSk7XG4gIH1cbn07XG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBpZHhcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW25vdERlZmF1bHRJZHg9ZmFsc2VdXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblxuXG5saXN0UHJvdG8uZ2V0TmFtZSA9IGZ1bmN0aW9uIChpZHgpIHtcbiAgdmFyIHJhd0luZGV4ID0gdGhpcy5nZXRSYXdJbmRleChpZHgpO1xuICByZXR1cm4gdGhpcy5fbmFtZUxpc3RbcmF3SW5kZXhdIHx8IGdldFJhd1ZhbHVlRnJvbVN0b3JlKHRoaXMsIHRoaXMuX25hbWVEaW1JZHgsIHJhd0luZGV4KSB8fCAnJztcbn07XG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBpZHhcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW25vdERlZmF1bHRJZHg9ZmFsc2VdXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblxuXG5saXN0UHJvdG8uZ2V0SWQgPSBmdW5jdGlvbiAoaWR4KSB7XG4gIHJldHVybiBnZXRJZCh0aGlzLCB0aGlzLmdldFJhd0luZGV4KGlkeCkpO1xufTtcblxuZnVuY3Rpb24gZ2V0SWQobGlzdCwgcmF3SW5kZXgpIHtcbiAgdmFyIGlkID0gbGlzdC5faWRMaXN0W3Jhd0luZGV4XTtcblxuICBpZiAoaWQgPT0gbnVsbCkge1xuICAgIGlkID0gZ2V0UmF3VmFsdWVGcm9tU3RvcmUobGlzdCwgbGlzdC5faWREaW1JZHgsIHJhd0luZGV4KTtcbiAgfVxuXG4gIGlmIChpZCA9PSBudWxsKSB7XG4gICAgLy8gRklYTUUgQ2hlY2sgdGhlIHVzYWdlIGluIGdyYXBoLCBzaG91bGQgbm90IHVzZSBwcmVmaXguXG4gICAgaWQgPSBJRF9QUkVGSVggKyByYXdJbmRleDtcbiAgfVxuXG4gIHJldHVybiBpZDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplRGltZW5zaW9ucyhkaW1lbnNpb25zKSB7XG4gIGlmICghenJVdGlsLmlzQXJyYXkoZGltZW5zaW9ucykpIHtcbiAgICBkaW1lbnNpb25zID0gW2RpbWVuc2lvbnNdO1xuICB9XG5cbiAgcmV0dXJuIGRpbWVuc2lvbnM7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRGltZW5zaW9ucyhsaXN0LCBkaW1zKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGltcy5sZW5ndGg7IGkrKykge1xuICAgIC8vIHN0cm9hZ2UgbWF5IGJlIGVtcHR5IHdoZW4gbm8gZGF0YSwgc28gdXNlXG4gICAgLy8gZGltZW5zaW9uSW5mb3MgdG8gY2hlY2suXG4gICAgaWYgKCFsaXN0Ll9kaW1lbnNpb25JbmZvc1tkaW1zW2ldXSkge1xuICAgICAgY29uc29sZS5lcnJvcignVW5rb3duIGRpbWVuc2lvbiAnICsgZGltc1tpXSk7XG4gICAgfVxuICB9XG59XG4vKipcbiAqIERhdGEgaXRlcmF0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheS48c3RyaW5nPn1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNiXG4gKiBAcGFyYW0geyp9IFtjb250ZXh0PXRoaXNdXG4gKlxuICogQGV4YW1wbGVcbiAqICBsaXN0LmVhY2goJ3gnLCBmdW5jdGlvbiAoeCwgaWR4KSB7fSk7XG4gKiAgbGlzdC5lYWNoKFsneCcsICd5J10sIGZ1bmN0aW9uICh4LCB5LCBpZHgpIHt9KTtcbiAqICBsaXN0LmVhY2goZnVuY3Rpb24gKGlkeCkge30pXG4gKi9cblxuXG5saXN0UHJvdG8uZWFjaCA9IGZ1bmN0aW9uIChkaW1zLCBjYiwgY29udGV4dCwgY29udGV4dENvbXBhdCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKCF0aGlzLl9jb3VudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZGltcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnRleHRDb21wYXQgPSBjb250ZXh0O1xuICAgIGNvbnRleHQgPSBjYjtcbiAgICBjYiA9IGRpbXM7XG4gICAgZGltcyA9IFtdO1xuICB9IC8vIGNvbnRleHRDb21wYXQganVzdCBmb3IgY29tcGF0IGVjaGFydHMzXG5cblxuICBjb250ZXh0ID0gY29udGV4dCB8fCBjb250ZXh0Q29tcGF0IHx8IHRoaXM7XG4gIGRpbXMgPSB6clV0aWwubWFwKG5vcm1hbGl6ZURpbWVuc2lvbnMoZGltcyksIHRoaXMuZ2V0RGltZW5zaW9uLCB0aGlzKTtcbiAgdmFyIGRpbVNpemUgPSBkaW1zLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY291bnQoKTsgaSsrKSB7XG4gICAgLy8gU2ltcGxlIG9wdGltaXphdGlvblxuICAgIHN3aXRjaCAoZGltU2l6ZSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICBjYi5jYWxsKGNvbnRleHQsIGkpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAxOlxuICAgICAgICBjYi5jYWxsKGNvbnRleHQsIHRoaXMuZ2V0KGRpbXNbMF0sIGkpLCBpKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgY2IuY2FsbChjb250ZXh0LCB0aGlzLmdldChkaW1zWzBdLCBpKSwgdGhpcy5nZXQoZGltc1sxXSwgaSksIGkpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIGsgPSAwO1xuICAgICAgICB2YXIgdmFsdWUgPSBbXTtcblxuICAgICAgICBmb3IgKDsgayA8IGRpbVNpemU7IGsrKykge1xuICAgICAgICAgIHZhbHVlW2tdID0gdGhpcy5nZXQoZGltc1trXSwgaSk7XG4gICAgICAgIH0gLy8gSW5kZXhcblxuXG4gICAgICAgIHZhbHVlW2tdID0gaTtcbiAgICAgICAgY2IuYXBwbHkoY29udGV4dCwgdmFsdWUpO1xuICAgIH1cbiAgfVxufTtcbi8qKlxuICogRGF0YSBmaWx0ZXJcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5LjxzdHJpbmc+fVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2JcbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9dGhpc11cbiAqL1xuXG5cbmxpc3RQcm90by5maWx0ZXJTZWxmID0gZnVuY3Rpb24gKGRpbWVuc2lvbnMsIGNiLCBjb250ZXh0LCBjb250ZXh0Q29tcGF0KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoIXRoaXMuX2NvdW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBkaW1lbnNpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29udGV4dENvbXBhdCA9IGNvbnRleHQ7XG4gICAgY29udGV4dCA9IGNiO1xuICAgIGNiID0gZGltZW5zaW9ucztcbiAgICBkaW1lbnNpb25zID0gW107XG4gIH0gLy8gY29udGV4dENvbXBhdCBqdXN0IGZvciBjb21wYXQgZWNoYXJ0czNcblxuXG4gIGNvbnRleHQgPSBjb250ZXh0IHx8IGNvbnRleHRDb21wYXQgfHwgdGhpcztcbiAgZGltZW5zaW9ucyA9IHpyVXRpbC5tYXAobm9ybWFsaXplRGltZW5zaW9ucyhkaW1lbnNpb25zKSwgdGhpcy5nZXREaW1lbnNpb24sIHRoaXMpO1xuICB2YXIgY291bnQgPSB0aGlzLmNvdW50KCk7XG4gIHZhciBDdG9yID0gZ2V0SW5kaWNlc0N0b3IodGhpcyk7XG4gIHZhciBuZXdJbmRpY2VzID0gbmV3IEN0b3IoY291bnQpO1xuICB2YXIgdmFsdWUgPSBbXTtcbiAgdmFyIGRpbVNpemUgPSBkaW1lbnNpb25zLmxlbmd0aDtcbiAgdmFyIG9mZnNldCA9IDA7XG4gIHZhciBkaW0wID0gZGltZW5zaW9uc1swXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICB2YXIga2VlcDtcbiAgICB2YXIgcmF3SWR4ID0gdGhpcy5nZXRSYXdJbmRleChpKTsgLy8gU2ltcGxlIG9wdGltaXphdGlvblxuXG4gICAgaWYgKGRpbVNpemUgPT09IDApIHtcbiAgICAgIGtlZXAgPSBjYi5jYWxsKGNvbnRleHQsIGkpO1xuICAgIH0gZWxzZSBpZiAoZGltU2l6ZSA9PT0gMSkge1xuICAgICAgdmFyIHZhbCA9IHRoaXMuX2dldEZhc3QoZGltMCwgcmF3SWR4KTtcblxuICAgICAga2VlcCA9IGNiLmNhbGwoY29udGV4dCwgdmFsLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBkaW1TaXplOyBrKyspIHtcbiAgICAgICAgdmFsdWVba10gPSB0aGlzLl9nZXRGYXN0KGRpbTAsIHJhd0lkeCk7XG4gICAgICB9XG5cbiAgICAgIHZhbHVlW2tdID0gaTtcbiAgICAgIGtlZXAgPSBjYi5hcHBseShjb250ZXh0LCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGtlZXApIHtcbiAgICAgIG5ld0luZGljZXNbb2Zmc2V0KytdID0gcmF3SWR4O1xuICAgIH1cbiAgfSAvLyBTZXQgaW5kaWNlcyBhZnRlciBmaWx0ZXJlZC5cblxuXG4gIGlmIChvZmZzZXQgPCBjb3VudCkge1xuICAgIHRoaXMuX2luZGljZXMgPSBuZXdJbmRpY2VzO1xuICB9XG5cbiAgdGhpcy5fY291bnQgPSBvZmZzZXQ7IC8vIFJlc2V0IGRhdGEgZXh0ZW50XG5cbiAgdGhpcy5fZXh0ZW50ID0ge307XG4gIHRoaXMuZ2V0UmF3SW5kZXggPSB0aGlzLl9pbmRpY2VzID8gZ2V0UmF3SW5kZXhXaXRoSW5kaWNlcyA6IGdldFJhd0luZGV4V2l0aG91dEluZGljZXM7XG4gIHJldHVybiB0aGlzO1xufTtcbi8qKlxuICogU2VsZWN0IGRhdGEgaW4gcmFuZ2UuIChGb3Igb3B0aW1pemF0aW9uIG9mIGZpbHRlcilcbiAqIChNYW51YWxseSBpbmxpbmUgY29kZSwgc3VwcG9ydCA1IG1pbGxpb24gZGF0YSBmaWx0ZXJpbmcgaW4gZGF0YSB6b29tLilcbiAqL1xuXG5cbmxpc3RQcm90by5zZWxlY3RSYW5nZSA9IGZ1bmN0aW9uIChyYW5nZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKCF0aGlzLl9jb3VudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBkaW1lbnNpb25zID0gW107XG5cbiAgZm9yICh2YXIgZGltIGluIHJhbmdlKSB7XG4gICAgaWYgKHJhbmdlLmhhc093blByb3BlcnR5KGRpbSkpIHtcbiAgICAgIGRpbWVuc2lvbnMucHVzaChkaW0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBkaW1TaXplID0gZGltZW5zaW9ucy5sZW5ndGg7XG5cbiAgaWYgKCFkaW1TaXplKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG9yaWdpbmFsQ291bnQgPSB0aGlzLmNvdW50KCk7XG4gIHZhciBDdG9yID0gZ2V0SW5kaWNlc0N0b3IodGhpcyk7XG4gIHZhciBuZXdJbmRpY2VzID0gbmV3IEN0b3Iob3JpZ2luYWxDb3VudCk7XG4gIHZhciBvZmZzZXQgPSAwO1xuICB2YXIgZGltMCA9IGRpbWVuc2lvbnNbMF07XG4gIHZhciBtaW4gPSByYW5nZVtkaW0wXVswXTtcbiAgdmFyIG1heCA9IHJhbmdlW2RpbTBdWzFdO1xuICB2YXIgcXVpY2tGaW5pc2hlZCA9IGZhbHNlO1xuXG4gIGlmICghdGhpcy5faW5kaWNlcykge1xuICAgIC8vIEV4dHJlbWUgb3B0aW1pemF0aW9uIGZvciBjb21tb24gY2FzZS4gQWJvdXQgMnggZmFzdGVyIGluIGNocm9tZS5cbiAgICB2YXIgaWR4ID0gMDtcblxuICAgIGlmIChkaW1TaXplID09PSAxKSB7XG4gICAgICB2YXIgZGltU3RvcmFnZSA9IHRoaXMuX3N0b3JhZ2VbZGltZW5zaW9uc1swXV07XG5cbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5fY2h1bmtDb3VudDsgaysrKSB7XG4gICAgICAgIHZhciBjaHVua1N0b3JhZ2UgPSBkaW1TdG9yYWdlW2tdO1xuICAgICAgICB2YXIgbGVuID0gTWF0aC5taW4odGhpcy5fY291bnQgLSBrICogdGhpcy5fY2h1bmtTaXplLCB0aGlzLl9jaHVua1NpemUpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICB2YXIgdmFsID0gY2h1bmtTdG9yYWdlW2ldOyAvLyBOYU4gd2lsbCBub3QgYmUgZmlsdGVyZWQuIENvbnNpZGVyIHRoZSBjYXNlLCBpbiBsaW5lIGNoYXJ0LCBlbXB0eVxuICAgICAgICAgIC8vIHZhbHVlIGluZGljYXRlcyB0aGUgbGluZSBzaG91bGQgYmUgYnJva2VuLiBCdXQgZm9yIHRoZSBjYXNlIGxpa2VcbiAgICAgICAgICAvLyBzY2F0dGVyIHBsb3QsIGEgZGF0YSBpdGVtIHdpdGggZW1wdHkgdmFsdWUgd2lsbCBub3QgYmUgcmVuZGVyZWQsXG4gICAgICAgICAgLy8gYnV0IHRoZSBheGlzIGV4dGVudCBtYXkgYmUgZWZmZWN0ZWQgaWYgc29tZSBvdGhlciBkaW0gb2YgdGhlIGRhdGFcbiAgICAgICAgICAvLyBpdGVtIGhhcyB2YWx1ZS4gRm9ydHVuYXRlbHkgaXQgaXMgbm90IGEgc2lnbmlmaWNhbnQgbmVnYXRpdmUgZWZmZWN0LlxuXG4gICAgICAgICAgaWYgKHZhbCA+PSBtaW4gJiYgdmFsIDw9IG1heCB8fCBpc05hTih2YWwpKSB7XG4gICAgICAgICAgICBuZXdJbmRpY2VzW29mZnNldCsrXSA9IGlkeDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZHgrKztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBxdWlja0ZpbmlzaGVkID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGRpbVNpemUgPT09IDIpIHtcbiAgICAgIHZhciBkaW1TdG9yYWdlID0gdGhpcy5fc3RvcmFnZVtkaW0wXTtcbiAgICAgIHZhciBkaW1TdG9yYWdlMiA9IHRoaXMuX3N0b3JhZ2VbZGltZW5zaW9uc1sxXV07XG4gICAgICB2YXIgbWluMiA9IHJhbmdlW2RpbWVuc2lvbnNbMV1dWzBdO1xuICAgICAgdmFyIG1heDIgPSByYW5nZVtkaW1lbnNpb25zWzFdXVsxXTtcblxuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLl9jaHVua0NvdW50OyBrKyspIHtcbiAgICAgICAgdmFyIGNodW5rU3RvcmFnZSA9IGRpbVN0b3JhZ2Vba107XG4gICAgICAgIHZhciBjaHVua1N0b3JhZ2UyID0gZGltU3RvcmFnZTJba107XG4gICAgICAgIHZhciBsZW4gPSBNYXRoLm1pbih0aGlzLl9jb3VudCAtIGsgKiB0aGlzLl9jaHVua1NpemUsIHRoaXMuX2NodW5rU2l6ZSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHZhciB2YWwgPSBjaHVua1N0b3JhZ2VbaV07XG4gICAgICAgICAgdmFyIHZhbDIgPSBjaHVua1N0b3JhZ2UyW2ldOyAvLyBEbyBub3QgZmlsdGVyIE5hTiwgc2VlIGNvbW1lbnQgYWJvdmUuXG5cbiAgICAgICAgICBpZiAoKHZhbCA+PSBtaW4gJiYgdmFsIDw9IG1heCB8fCBpc05hTih2YWwpKSAmJiAodmFsMiA+PSBtaW4yICYmIHZhbDIgPD0gbWF4MiB8fCBpc05hTih2YWwyKSkpIHtcbiAgICAgICAgICAgIG5ld0luZGljZXNbb2Zmc2V0KytdID0gaWR4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlkeCsrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHF1aWNrRmluaXNoZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghcXVpY2tGaW5pc2hlZCkge1xuICAgIGlmIChkaW1TaXplID09PSAxKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9yaWdpbmFsQ291bnQ7IGkrKykge1xuICAgICAgICB2YXIgcmF3SW5kZXggPSB0aGlzLmdldFJhd0luZGV4KGkpO1xuXG4gICAgICAgIHZhciB2YWwgPSB0aGlzLl9nZXRGYXN0KGRpbTAsIHJhd0luZGV4KTsgLy8gRG8gbm90IGZpbHRlciBOYU4sIHNlZSBjb21tZW50IGFib3ZlLlxuXG5cbiAgICAgICAgaWYgKHZhbCA+PSBtaW4gJiYgdmFsIDw9IG1heCB8fCBpc05hTih2YWwpKSB7XG4gICAgICAgICAgbmV3SW5kaWNlc1tvZmZzZXQrK10gPSByYXdJbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9yaWdpbmFsQ291bnQ7IGkrKykge1xuICAgICAgICB2YXIga2VlcCA9IHRydWU7XG4gICAgICAgIHZhciByYXdJbmRleCA9IHRoaXMuZ2V0UmF3SW5kZXgoaSk7XG5cbiAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBkaW1TaXplOyBrKyspIHtcbiAgICAgICAgICB2YXIgZGltayA9IGRpbWVuc2lvbnNba107XG5cbiAgICAgICAgICB2YXIgdmFsID0gdGhpcy5fZ2V0RmFzdChkaW0sIHJhd0luZGV4KTsgLy8gRG8gbm90IGZpbHRlciBOYU4sIHNlZSBjb21tZW50IGFib3ZlLlxuXG5cbiAgICAgICAgICBpZiAodmFsIDwgcmFuZ2VbZGlta11bMF0gfHwgdmFsID4gcmFuZ2VbZGlta11bMV0pIHtcbiAgICAgICAgICAgIGtlZXAgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2VlcCkge1xuICAgICAgICAgIG5ld0luZGljZXNbb2Zmc2V0KytdID0gdGhpcy5nZXRSYXdJbmRleChpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSAvLyBTZXQgaW5kaWNlcyBhZnRlciBmaWx0ZXJlZC5cblxuXG4gIGlmIChvZmZzZXQgPCBvcmlnaW5hbENvdW50KSB7XG4gICAgdGhpcy5faW5kaWNlcyA9IG5ld0luZGljZXM7XG4gIH1cblxuICB0aGlzLl9jb3VudCA9IG9mZnNldDsgLy8gUmVzZXQgZGF0YSBleHRlbnRcblxuICB0aGlzLl9leHRlbnQgPSB7fTtcbiAgdGhpcy5nZXRSYXdJbmRleCA9IHRoaXMuX2luZGljZXMgPyBnZXRSYXdJbmRleFdpdGhJbmRpY2VzIDogZ2V0UmF3SW5kZXhXaXRob3V0SW5kaWNlcztcbiAgcmV0dXJuIHRoaXM7XG59O1xuLyoqXG4gKiBEYXRhIG1hcHBpbmcgdG8gYSBwbGFpbiBhcnJheVxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXkuPHN0cmluZz59IFtkaW1lbnNpb25zXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2JcbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9dGhpc11cbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5cblxubGlzdFByb3RvLm1hcEFycmF5ID0gZnVuY3Rpb24gKGRpbWVuc2lvbnMsIGNiLCBjb250ZXh0LCBjb250ZXh0Q29tcGF0KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAodHlwZW9mIGRpbWVuc2lvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb250ZXh0Q29tcGF0ID0gY29udGV4dDtcbiAgICBjb250ZXh0ID0gY2I7XG4gICAgY2IgPSBkaW1lbnNpb25zO1xuICAgIGRpbWVuc2lvbnMgPSBbXTtcbiAgfSAvLyBjb250ZXh0Q29tcGF0IGp1c3QgZm9yIGNvbXBhdCBlY2hhcnRzM1xuXG5cbiAgY29udGV4dCA9IGNvbnRleHQgfHwgY29udGV4dENvbXBhdCB8fCB0aGlzO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHRoaXMuZWFjaChkaW1lbnNpb25zLCBmdW5jdGlvbiAoKSB7XG4gICAgcmVzdWx0LnB1c2goY2IgJiYgY2IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH0sIGNvbnRleHQpO1xuICByZXR1cm4gcmVzdWx0O1xufTsgLy8gRGF0YSBpbiBleGNsdWRlRGltZW5zaW9ucyBpcyBjb3BpZWQsIG90aGVyd2lzZSB0cmFuc2ZlcmVkLlxuXG5cbmZ1bmN0aW9uIGNsb25lTGlzdEZvck1hcEFuZFNhbXBsZShvcmlnaW5hbCwgZXhjbHVkZURpbWVuc2lvbnMpIHtcbiAgdmFyIGFsbERpbWVuc2lvbnMgPSBvcmlnaW5hbC5kaW1lbnNpb25zO1xuICB2YXIgbGlzdCA9IG5ldyBMaXN0KHpyVXRpbC5tYXAoYWxsRGltZW5zaW9ucywgb3JpZ2luYWwuZ2V0RGltZW5zaW9uSW5mbywgb3JpZ2luYWwpLCBvcmlnaW5hbC5ob3N0TW9kZWwpOyAvLyBGSVhNRSBJZiBuZWVkcyBzdGFja2VkT24sIHZhbHVlIG1heSBhbHJlYWR5IGJlZW4gc3RhY2tlZFxuXG4gIHRyYW5zZmVyUHJvcGVydGllcyhsaXN0LCBvcmlnaW5hbCk7XG4gIHZhciBzdG9yYWdlID0gbGlzdC5fc3RvcmFnZSA9IHt9O1xuICB2YXIgb3JpZ2luYWxTdG9yYWdlID0gb3JpZ2luYWwuX3N0b3JhZ2U7IC8vIEluaXQgc3RvcmFnZVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsRGltZW5zaW9ucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkaW0gPSBhbGxEaW1lbnNpb25zW2ldO1xuXG4gICAgaWYgKG9yaWdpbmFsU3RvcmFnZVtkaW1dKSB7XG4gICAgICAvLyBOb3RpY2UgdGhhdCB3ZSBkbyBub3QgcmVzZXQgaW52ZXJ0ZWRJbmRpY2VzTWFwIGhlcmUsIGJlY3Vhc2VcbiAgICAgIC8vIHRoZXJlIGlzIG5vIHNjZW5hcmlvIG9mIG1hcHBpbmcgb3Igc2FtcGxpbmcgb3JkaW5hbCBkaW1lbnNpb24uXG4gICAgICBpZiAoenJVdGlsLmluZGV4T2YoZXhjbHVkZURpbWVuc2lvbnMsIGRpbSkgPj0gMCkge1xuICAgICAgICBzdG9yYWdlW2RpbV0gPSBjbG9uZURpbVN0b3JlKG9yaWdpbmFsU3RvcmFnZVtkaW1dKTtcbiAgICAgICAgbGlzdC5fcmF3RXh0ZW50W2RpbV0gPSBnZXRJbml0aWFsRXh0ZW50KCk7XG4gICAgICAgIGxpc3QuX2V4dGVudFtkaW1dID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIERpcmVjdCByZWZlcmVuY2UgZm9yIG90aGVyIGRpbWVuc2lvbnNcbiAgICAgICAgc3RvcmFnZVtkaW1dID0gb3JpZ2luYWxTdG9yYWdlW2RpbV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxpc3Q7XG59XG5cbmZ1bmN0aW9uIGNsb25lRGltU3RvcmUob3JpZ2luYWxEaW1TdG9yZSkge1xuICB2YXIgbmV3RGltU3RvcmUgPSBuZXcgQXJyYXkob3JpZ2luYWxEaW1TdG9yZS5sZW5ndGgpO1xuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgb3JpZ2luYWxEaW1TdG9yZS5sZW5ndGg7IGorKykge1xuICAgIG5ld0RpbVN0b3JlW2pdID0gY2xvbmVDaHVuayhvcmlnaW5hbERpbVN0b3JlW2pdKTtcbiAgfVxuXG4gIHJldHVybiBuZXdEaW1TdG9yZTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5pdGlhbEV4dGVudCgpIHtcbiAgcmV0dXJuIFtJbmZpbml0eSwgLUluZmluaXR5XTtcbn1cbi8qKlxuICogRGF0YSBtYXBwaW5nIHRvIGEgbmV3IExpc3Qgd2l0aCBnaXZlbiBkaW1lbnNpb25zXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheS48c3RyaW5nPn0gZGltZW5zaW9uc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY2JcbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9dGhpc11cbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5cblxubGlzdFByb3RvLm1hcCA9IGZ1bmN0aW9uIChkaW1lbnNpb25zLCBjYiwgY29udGV4dCwgY29udGV4dENvbXBhdCkge1xuICAndXNlIHN0cmljdCc7IC8vIGNvbnRleHRDb21wYXQganVzdCBmb3IgY29tcGF0IGVjaGFydHMzXG5cbiAgY29udGV4dCA9IGNvbnRleHQgfHwgY29udGV4dENvbXBhdCB8fCB0aGlzO1xuICBkaW1lbnNpb25zID0genJVdGlsLm1hcChub3JtYWxpemVEaW1lbnNpb25zKGRpbWVuc2lvbnMpLCB0aGlzLmdldERpbWVuc2lvbiwgdGhpcyk7XG4gIHZhciBsaXN0ID0gY2xvbmVMaXN0Rm9yTWFwQW5kU2FtcGxlKHRoaXMsIGRpbWVuc2lvbnMpOyAvLyBGb2xsb3dpbmcgcHJvcGVydGllcyBhcmUgYWxsIGltbXV0YWJsZS5cbiAgLy8gU28gd2UgY2FuIHJlZmVyZW5jZSB0byB0aGUgc2FtZSB2YWx1ZVxuXG4gIGxpc3QuX2luZGljZXMgPSB0aGlzLl9pbmRpY2VzO1xuICBsaXN0LmdldFJhd0luZGV4ID0gbGlzdC5faW5kaWNlcyA/IGdldFJhd0luZGV4V2l0aEluZGljZXMgOiBnZXRSYXdJbmRleFdpdGhvdXRJbmRpY2VzO1xuICB2YXIgc3RvcmFnZSA9IGxpc3QuX3N0b3JhZ2U7XG4gIHZhciB0bXBSZXRWYWx1ZSA9IFtdO1xuICB2YXIgY2h1bmtTaXplID0gdGhpcy5fY2h1bmtTaXplO1xuICB2YXIgZGltU2l6ZSA9IGRpbWVuc2lvbnMubGVuZ3RoO1xuICB2YXIgZGF0YUNvdW50ID0gdGhpcy5jb3VudCgpO1xuICB2YXIgdmFsdWVzID0gW107XG4gIHZhciByYXdFeHRlbnQgPSBsaXN0Ll9yYXdFeHRlbnQ7XG5cbiAgZm9yICh2YXIgZGF0YUluZGV4ID0gMDsgZGF0YUluZGV4IDwgZGF0YUNvdW50OyBkYXRhSW5kZXgrKykge1xuICAgIGZvciAodmFyIGRpbUluZGV4ID0gMDsgZGltSW5kZXggPCBkaW1TaXplOyBkaW1JbmRleCsrKSB7XG4gICAgICB2YWx1ZXNbZGltSW5kZXhdID0gdGhpcy5nZXQoZGltZW5zaW9uc1tkaW1JbmRleF0sIGRhdGFJbmRleFxuICAgICAgLyosIHN0YWNrICovXG4gICAgICApO1xuICAgIH1cblxuICAgIHZhbHVlc1tkaW1TaXplXSA9IGRhdGFJbmRleDtcbiAgICB2YXIgcmV0VmFsdWUgPSBjYiAmJiBjYi5hcHBseShjb250ZXh0LCB2YWx1ZXMpO1xuXG4gICAgaWYgKHJldFZhbHVlICE9IG51bGwpIHtcbiAgICAgIC8vIGEgbnVtYmVyIG9yIHN0cmluZyAoaW4gb3JpZGluYWwgZGltZW5zaW9uKT9cbiAgICAgIGlmICh0eXBlb2YgcmV0VmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRtcFJldFZhbHVlWzBdID0gcmV0VmFsdWU7XG4gICAgICAgIHJldFZhbHVlID0gdG1wUmV0VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciByYXdJbmRleCA9IHRoaXMuZ2V0UmF3SW5kZXgoZGF0YUluZGV4KTtcbiAgICAgIHZhciBjaHVua0luZGV4ID0gTWF0aC5mbG9vcihyYXdJbmRleCAvIGNodW5rU2l6ZSk7XG4gICAgICB2YXIgY2h1bmtPZmZzZXQgPSByYXdJbmRleCAlIGNodW5rU2l6ZTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXRWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGltID0gZGltZW5zaW9uc1tpXTtcbiAgICAgICAgdmFyIHZhbCA9IHJldFZhbHVlW2ldO1xuICAgICAgICB2YXIgcmF3RXh0ZW50T25EaW0gPSByYXdFeHRlbnRbZGltXTtcbiAgICAgICAgdmFyIGRpbVN0b3JlID0gc3RvcmFnZVtkaW1dO1xuXG4gICAgICAgIGlmIChkaW1TdG9yZSkge1xuICAgICAgICAgIGRpbVN0b3JlW2NodW5rSW5kZXhdW2NodW5rT2Zmc2V0XSA9IHZhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWwgPCByYXdFeHRlbnRPbkRpbVswXSkge1xuICAgICAgICAgIHJhd0V4dGVudE9uRGltWzBdID0gdmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCA+IHJhd0V4dGVudE9uRGltWzFdKSB7XG4gICAgICAgICAgcmF3RXh0ZW50T25EaW1bMV0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbGlzdDtcbn07XG4vKipcbiAqIExhcmdlIGRhdGEgZG93biBzYW1wbGluZyBvbiBnaXZlbiBkaW1lbnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaW1lbnNpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSByYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzYW1wbGVWYWx1ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2FtcGxlSW5kZXggU2FtcGxlIGluZGV4IGZvciBuYW1lIGFuZCBpZFxuICovXG5cblxubGlzdFByb3RvLmRvd25TYW1wbGUgPSBmdW5jdGlvbiAoZGltZW5zaW9uLCByYXRlLCBzYW1wbGVWYWx1ZSwgc2FtcGxlSW5kZXgpIHtcbiAgdmFyIGxpc3QgPSBjbG9uZUxpc3RGb3JNYXBBbmRTYW1wbGUodGhpcywgW2RpbWVuc2lvbl0pO1xuICB2YXIgdGFyZ2V0U3RvcmFnZSA9IGxpc3QuX3N0b3JhZ2U7XG4gIHZhciBmcmFtZVZhbHVlcyA9IFtdO1xuICB2YXIgZnJhbWVTaXplID0gTWF0aC5mbG9vcigxIC8gcmF0ZSk7XG4gIHZhciBkaW1TdG9yZSA9IHRhcmdldFN0b3JhZ2VbZGltZW5zaW9uXTtcbiAgdmFyIGxlbiA9IHRoaXMuY291bnQoKTtcbiAgdmFyIGNodW5rU2l6ZSA9IHRoaXMuX2NodW5rU2l6ZTtcbiAgdmFyIHJhd0V4dGVudE9uRGltID0gbGlzdC5fcmF3RXh0ZW50W2RpbWVuc2lvbl07XG4gIHZhciBuZXdJbmRpY2VzID0gbmV3IChnZXRJbmRpY2VzQ3Rvcih0aGlzKSkobGVuKTtcbiAgdmFyIG9mZnNldCA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gZnJhbWVTaXplKSB7XG4gICAgLy8gTGFzdCBmcmFtZVxuICAgIGlmIChmcmFtZVNpemUgPiBsZW4gLSBpKSB7XG4gICAgICBmcmFtZVNpemUgPSBsZW4gLSBpO1xuICAgICAgZnJhbWVWYWx1ZXMubGVuZ3RoID0gZnJhbWVTaXplO1xuICAgIH1cblxuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgZnJhbWVTaXplOyBrKyspIHtcbiAgICAgIHZhciBkYXRhSWR4ID0gdGhpcy5nZXRSYXdJbmRleChpICsgayk7XG4gICAgICB2YXIgb3JpZ2luYWxDaHVua0luZGV4ID0gTWF0aC5mbG9vcihkYXRhSWR4IC8gY2h1bmtTaXplKTtcbiAgICAgIHZhciBvcmlnaW5hbENodW5rT2Zmc2V0ID0gZGF0YUlkeCAlIGNodW5rU2l6ZTtcbiAgICAgIGZyYW1lVmFsdWVzW2tdID0gZGltU3RvcmVbb3JpZ2luYWxDaHVua0luZGV4XVtvcmlnaW5hbENodW5rT2Zmc2V0XTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSBzYW1wbGVWYWx1ZShmcmFtZVZhbHVlcyk7XG4gICAgdmFyIHNhbXBsZUZyYW1lSWR4ID0gdGhpcy5nZXRSYXdJbmRleChNYXRoLm1pbihpICsgc2FtcGxlSW5kZXgoZnJhbWVWYWx1ZXMsIHZhbHVlKSB8fCAwLCBsZW4gLSAxKSk7XG4gICAgdmFyIHNhbXBsZUNodW5rSW5kZXggPSBNYXRoLmZsb29yKHNhbXBsZUZyYW1lSWR4IC8gY2h1bmtTaXplKTtcbiAgICB2YXIgc2FtcGxlQ2h1bmtPZmZzZXQgPSBzYW1wbGVGcmFtZUlkeCAlIGNodW5rU2l6ZTsgLy8gT25seSB3cml0ZSB2YWx1ZSBvbiB0aGUgZmlsdGVyZWQgZGF0YVxuXG4gICAgZGltU3RvcmVbc2FtcGxlQ2h1bmtJbmRleF1bc2FtcGxlQ2h1bmtPZmZzZXRdID0gdmFsdWU7XG5cbiAgICBpZiAodmFsdWUgPCByYXdFeHRlbnRPbkRpbVswXSkge1xuICAgICAgcmF3RXh0ZW50T25EaW1bMF0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgPiByYXdFeHRlbnRPbkRpbVsxXSkge1xuICAgICAgcmF3RXh0ZW50T25EaW1bMV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBuZXdJbmRpY2VzW29mZnNldCsrXSA9IHNhbXBsZUZyYW1lSWR4O1xuICB9XG5cbiAgbGlzdC5fY291bnQgPSBvZmZzZXQ7XG4gIGxpc3QuX2luZGljZXMgPSBuZXdJbmRpY2VzO1xuICBsaXN0LmdldFJhd0luZGV4ID0gZ2V0UmF3SW5kZXhXaXRoSW5kaWNlcztcbiAgcmV0dXJuIGxpc3Q7XG59O1xuLyoqXG4gKiBHZXQgbW9kZWwgb2Ygb25lIGRhdGEgaXRlbS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gaWR4XG4gKi9cbi8vIEZJWE1FIE1vZGVsIHByb3h5ID9cblxuXG5saXN0UHJvdG8uZ2V0SXRlbU1vZGVsID0gZnVuY3Rpb24gKGlkeCkge1xuICB2YXIgaG9zdE1vZGVsID0gdGhpcy5ob3N0TW9kZWw7XG4gIHJldHVybiBuZXcgTW9kZWwodGhpcy5nZXRSYXdEYXRhSXRlbShpZHgpLCBob3N0TW9kZWwsIGhvc3RNb2RlbCAmJiBob3N0TW9kZWwuZWNNb2RlbCk7XG59O1xuLyoqXG4gKiBDcmVhdGUgYSBkYXRhIGRpZmZlclxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9kYXRhL0xpc3R9IG90aGVyTGlzdFxuICogQHJldHVybiB7bW9kdWxlOmVjaGFydHMvZGF0YS9EYXRhRGlmZmVyfVxuICovXG5cblxubGlzdFByb3RvLmRpZmYgPSBmdW5jdGlvbiAob3RoZXJMaXN0KSB7XG4gIHZhciB0aGlzTGlzdCA9IHRoaXM7XG4gIHJldHVybiBuZXcgRGF0YURpZmZlcihvdGhlckxpc3QgPyBvdGhlckxpc3QuZ2V0SW5kaWNlcygpIDogW10sIHRoaXMuZ2V0SW5kaWNlcygpLCBmdW5jdGlvbiAoaWR4KSB7XG4gICAgcmV0dXJuIGdldElkKG90aGVyTGlzdCwgaWR4KTtcbiAgfSwgZnVuY3Rpb24gKGlkeCkge1xuICAgIHJldHVybiBnZXRJZCh0aGlzTGlzdCwgaWR4KTtcbiAgfSk7XG59O1xuLyoqXG4gKiBHZXQgdmlzdWFsIHByb3BlcnR5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICovXG5cblxubGlzdFByb3RvLmdldFZpc3VhbCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgdmFyIHZpc3VhbCA9IHRoaXMuX3Zpc3VhbDtcbiAgcmV0dXJuIHZpc3VhbCAmJiB2aXN1YWxba2V5XTtcbn07XG4vKipcbiAqIFNldCB2aXN1YWwgcHJvcGVydHlcbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0ga2V5XG4gKiBAcGFyYW0geyp9IFt2YWx1ZV1cbiAqXG4gKiBAZXhhbXBsZVxuICogIHNldFZpc3VhbCgnY29sb3InLCBjb2xvcik7XG4gKiAgc2V0VmlzdWFsKHtcbiAqICAgICAgJ2NvbG9yJzogY29sb3JcbiAqICB9KTtcbiAqL1xuXG5cbmxpc3RQcm90by5zZXRWaXN1YWwgPSBmdW5jdGlvbiAoa2V5LCB2YWwpIHtcbiAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIGtleSkge1xuICAgICAgaWYgKGtleS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICB0aGlzLnNldFZpc3VhbChuYW1lLCBrZXlbbmFtZV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuX3Zpc3VhbCA9IHRoaXMuX3Zpc3VhbCB8fCB7fTtcbiAgdGhpcy5fdmlzdWFsW2tleV0gPSB2YWw7XG59O1xuLyoqXG4gKiBTZXQgbGF5b3V0IHByb3BlcnR5LlxuICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBrZXlcbiAqIEBwYXJhbSB7Kn0gW3ZhbF1cbiAqL1xuXG5cbmxpc3RQcm90by5zZXRMYXlvdXQgPSBmdW5jdGlvbiAoa2V5LCB2YWwpIHtcbiAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIGtleSkge1xuICAgICAgaWYgKGtleS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICB0aGlzLnNldExheW91dChuYW1lLCBrZXlbbmFtZV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuX2xheW91dFtrZXldID0gdmFsO1xufTtcbi8qKlxuICogR2V0IGxheW91dCBwcm9wZXJ0eS5cbiAqIEBwYXJhbSAge3N0cmluZ30ga2V5LlxuICogQHJldHVybiB7Kn1cbiAqL1xuXG5cbmxpc3RQcm90by5nZXRMYXlvdXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9sYXlvdXRba2V5XTtcbn07XG4vKipcbiAqIEdldCBsYXlvdXQgb2Ygc2luZ2xlIGRhdGEgaXRlbVxuICogQHBhcmFtIHtudW1iZXJ9IGlkeFxuICovXG5cblxubGlzdFByb3RvLmdldEl0ZW1MYXlvdXQgPSBmdW5jdGlvbiAoaWR4KSB7XG4gIHJldHVybiB0aGlzLl9pdGVtTGF5b3V0c1tpZHhdO1xufTtcbi8qKlxuICogU2V0IGxheW91dCBvZiBzaW5nbGUgZGF0YSBpdGVtXG4gKiBAcGFyYW0ge251bWJlcn0gaWR4XG4gKiBAcGFyYW0ge09iamVjdH0gbGF5b3V0XG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBbbWVyZ2U9ZmFsc2VdXG4gKi9cblxuXG5saXN0UHJvdG8uc2V0SXRlbUxheW91dCA9IGZ1bmN0aW9uIChpZHgsIGxheW91dCwgbWVyZ2UpIHtcbiAgdGhpcy5faXRlbUxheW91dHNbaWR4XSA9IG1lcmdlID8genJVdGlsLmV4dGVuZCh0aGlzLl9pdGVtTGF5b3V0c1tpZHhdIHx8IHt9LCBsYXlvdXQpIDogbGF5b3V0O1xufTtcbi8qKlxuICogQ2xlYXIgYWxsIGxheW91dCBvZiBzaW5nbGUgZGF0YSBpdGVtXG4gKi9cblxuXG5saXN0UHJvdG8uY2xlYXJJdGVtTGF5b3V0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5faXRlbUxheW91dHMubGVuZ3RoID0gMDtcbn07XG4vKipcbiAqIEdldCB2aXN1YWwgcHJvcGVydHkgb2Ygc2luZ2xlIGRhdGEgaXRlbVxuICogQHBhcmFtIHtudW1iZXJ9IGlkeFxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHBhcmFtIHtib29sZWFufSBbaWdub3JlUGFyZW50PWZhbHNlXVxuICovXG5cblxubGlzdFByb3RvLmdldEl0ZW1WaXN1YWwgPSBmdW5jdGlvbiAoaWR4LCBrZXksIGlnbm9yZVBhcmVudCkge1xuICB2YXIgaXRlbVZpc3VhbCA9IHRoaXMuX2l0ZW1WaXN1YWxzW2lkeF07XG4gIHZhciB2YWwgPSBpdGVtVmlzdWFsICYmIGl0ZW1WaXN1YWxba2V5XTtcblxuICBpZiAodmFsID09IG51bGwgJiYgIWlnbm9yZVBhcmVudCkge1xuICAgIC8vIFVzZSBnbG9iYWwgdmlzdWFsIHByb3BlcnR5XG4gICAgcmV0dXJuIHRoaXMuZ2V0VmlzdWFsKGtleSk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufTtcbi8qKlxuICogU2V0IHZpc3VhbCBwcm9wZXJ0eSBvZiBzaW5nbGUgZGF0YSBpdGVtXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGlkeFxuICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBrZXlcbiAqIEBwYXJhbSB7Kn0gW3ZhbHVlXVxuICpcbiAqIEBleGFtcGxlXG4gKiAgc2V0SXRlbVZpc3VhbCgwLCAnY29sb3InLCBjb2xvcik7XG4gKiAgc2V0SXRlbVZpc3VhbCgwLCB7XG4gKiAgICAgICdjb2xvcic6IGNvbG9yXG4gKiAgfSk7XG4gKi9cblxuXG5saXN0UHJvdG8uc2V0SXRlbVZpc3VhbCA9IGZ1bmN0aW9uIChpZHgsIGtleSwgdmFsdWUpIHtcbiAgdmFyIGl0ZW1WaXN1YWwgPSB0aGlzLl9pdGVtVmlzdWFsc1tpZHhdIHx8IHt9O1xuICB2YXIgaGFzSXRlbVZpc3VhbCA9IHRoaXMuaGFzSXRlbVZpc3VhbDtcbiAgdGhpcy5faXRlbVZpc3VhbHNbaWR4XSA9IGl0ZW1WaXN1YWw7XG5cbiAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIGtleSkge1xuICAgICAgaWYgKGtleS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBpdGVtVmlzdWFsW25hbWVdID0ga2V5W25hbWVdO1xuICAgICAgICBoYXNJdGVtVmlzdWFsW25hbWVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBpdGVtVmlzdWFsW2tleV0gPSB2YWx1ZTtcbiAgaGFzSXRlbVZpc3VhbFtrZXldID0gdHJ1ZTtcbn07XG4vKipcbiAqIENsZWFyIGl0ZW1WaXN1YWxzIGFuZCBsaXN0IHZpc3VhbC5cbiAqL1xuXG5cbmxpc3RQcm90by5jbGVhckFsbFZpc3VhbCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fdmlzdWFsID0ge307XG4gIHRoaXMuX2l0ZW1WaXN1YWxzID0gW107XG4gIHRoaXMuaGFzSXRlbVZpc3VhbCA9IHt9O1xufTtcblxudmFyIHNldEl0ZW1EYXRhQW5kU2VyaWVzSW5kZXggPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgY2hpbGQuc2VyaWVzSW5kZXggPSB0aGlzLnNlcmllc0luZGV4O1xuICBjaGlsZC5kYXRhSW5kZXggPSB0aGlzLmRhdGFJbmRleDtcbiAgY2hpbGQuZGF0YVR5cGUgPSB0aGlzLmRhdGFUeXBlO1xufTtcbi8qKlxuICogU2V0IGdyYXBoaWMgZWxlbWVudCByZWxhdGl2ZSB0byBkYXRhLiBJdCBjYW4gYmUgc2V0IGFzIG51bGxcbiAqIEBwYXJhbSB7bnVtYmVyfSBpZHhcbiAqIEBwYXJhbSB7bW9kdWxlOnpyZW5kZXIvRWxlbWVudH0gW2VsXVxuICovXG5cblxubGlzdFByb3RvLnNldEl0ZW1HcmFwaGljRWwgPSBmdW5jdGlvbiAoaWR4LCBlbCkge1xuICB2YXIgaG9zdE1vZGVsID0gdGhpcy5ob3N0TW9kZWw7XG5cbiAgaWYgKGVsKSB7XG4gICAgLy8gQWRkIGRhdGEgaW5kZXggYW5kIHNlcmllcyBpbmRleCBmb3IgaW5kZXhpbmcgdGhlIGRhdGEgYnkgZWxlbWVudFxuICAgIC8vIFVzZWZ1bCBpbiB0b29sdGlwXG4gICAgZWwuZGF0YUluZGV4ID0gaWR4O1xuICAgIGVsLmRhdGFUeXBlID0gdGhpcy5kYXRhVHlwZTtcbiAgICBlbC5zZXJpZXNJbmRleCA9IGhvc3RNb2RlbCAmJiBob3N0TW9kZWwuc2VyaWVzSW5kZXg7XG5cbiAgICBpZiAoZWwudHlwZSA9PT0gJ2dyb3VwJykge1xuICAgICAgZWwudHJhdmVyc2Uoc2V0SXRlbURhdGFBbmRTZXJpZXNJbmRleCwgZWwpO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuX2dyYXBoaWNFbHNbaWR4XSA9IGVsO1xufTtcbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGlkeFxuICogQHJldHVybiB7bW9kdWxlOnpyZW5kZXIvRWxlbWVudH1cbiAqL1xuXG5cbmxpc3RQcm90by5nZXRJdGVtR3JhcGhpY0VsID0gZnVuY3Rpb24gKGlkeCkge1xuICByZXR1cm4gdGhpcy5fZ3JhcGhpY0Vsc1tpZHhdO1xufTtcbi8qKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2JcbiAqIEBwYXJhbSB7Kn0gY29udGV4dFxuICovXG5cblxubGlzdFByb3RvLmVhY2hJdGVtR3JhcGhpY0VsID0gZnVuY3Rpb24gKGNiLCBjb250ZXh0KSB7XG4gIHpyVXRpbC5lYWNoKHRoaXMuX2dyYXBoaWNFbHMsIGZ1bmN0aW9uIChlbCwgaWR4KSB7XG4gICAgaWYgKGVsKSB7XG4gICAgICBjYiAmJiBjYi5jYWxsKGNvbnRleHQsIGVsLCBpZHgpO1xuICAgIH1cbiAgfSk7XG59O1xuLyoqXG4gKiBTaGFsbG93IGNsb25lIGEgbmV3IGxpc3QgZXhjZXB0IHZpc3VhbCBhbmQgbGF5b3V0IHByb3BlcnRpZXMsIGFuZCBncmFwaCBlbGVtZW50cy5cbiAqIE5ldyBsaXN0IG9ubHkgY2hhbmdlIHRoZSBpbmRpY2VzLlxuICovXG5cblxubGlzdFByb3RvLmNsb25lU2hhbGxvdyA9IGZ1bmN0aW9uIChsaXN0KSB7XG4gIGlmICghbGlzdCkge1xuICAgIHZhciBkaW1lbnNpb25JbmZvTGlzdCA9IHpyVXRpbC5tYXAodGhpcy5kaW1lbnNpb25zLCB0aGlzLmdldERpbWVuc2lvbkluZm8sIHRoaXMpO1xuICAgIGxpc3QgPSBuZXcgTGlzdChkaW1lbnNpb25JbmZvTGlzdCwgdGhpcy5ob3N0TW9kZWwpO1xuICB9IC8vIEZJWE1FXG5cblxuICBsaXN0Ll9zdG9yYWdlID0gdGhpcy5fc3RvcmFnZTtcbiAgdHJhbnNmZXJQcm9wZXJ0aWVzKGxpc3QsIHRoaXMpOyAvLyBDbG9uZSB3aWxsIG5vdCBjaGFuZ2UgdGhlIGRhdGEgZXh0ZW50IGFuZCBpbmRpY2VzXG5cbiAgaWYgKHRoaXMuX2luZGljZXMpIHtcbiAgICB2YXIgQ3RvciA9IHRoaXMuX2luZGljZXMuY29uc3RydWN0b3I7XG4gICAgbGlzdC5faW5kaWNlcyA9IG5ldyBDdG9yKHRoaXMuX2luZGljZXMpO1xuICB9IGVsc2Uge1xuICAgIGxpc3QuX2luZGljZXMgPSBudWxsO1xuICB9XG5cbiAgbGlzdC5nZXRSYXdJbmRleCA9IGxpc3QuX2luZGljZXMgPyBnZXRSYXdJbmRleFdpdGhJbmRpY2VzIDogZ2V0UmF3SW5kZXhXaXRob3V0SW5kaWNlcztcbiAgcmV0dXJuIGxpc3Q7XG59O1xuLyoqXG4gKiBXcmFwIHNvbWUgbWV0aG9kIHRvIGFkZCBtb3JlIGZlYXR1cmVcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbmplY3RGdW5jdGlvblxuICovXG5cblxubGlzdFByb3RvLndyYXBNZXRob2QgPSBmdW5jdGlvbiAobWV0aG9kTmFtZSwgaW5qZWN0RnVuY3Rpb24pIHtcbiAgdmFyIG9yaWdpbmFsTWV0aG9kID0gdGhpc1ttZXRob2ROYW1lXTtcblxuICBpZiAodHlwZW9mIG9yaWdpbmFsTWV0aG9kICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5fX3dyYXBwZWRNZXRob2RzID0gdGhpcy5fX3dyYXBwZWRNZXRob2RzIHx8IFtdO1xuXG4gIHRoaXMuX193cmFwcGVkTWV0aG9kcy5wdXNoKG1ldGhvZE5hbWUpO1xuXG4gIHRoaXNbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlcyA9IG9yaWdpbmFsTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGluamVjdEZ1bmN0aW9uLmFwcGx5KHRoaXMsIFtyZXNdLmNvbmNhdCh6clV0aWwuc2xpY2UoYXJndW1lbnRzKSkpO1xuICB9O1xufTsgLy8gTWV0aG9kcyB0aGF0IGNyZWF0ZSBhIG5ldyBsaXN0IGJhc2VkIG9uIHRoaXMgbGlzdCBzaG91bGQgYmUgbGlzdGVkIGhlcmUuXG4vLyBOb3RpY2UgdGhhdCB0aG9zZSBtZXRob2Qgc2hvdWxkIGBSRVRVUk5gIHRoZSBuZXcgbGlzdC5cblxuXG5saXN0UHJvdG8uVFJBTlNGRVJBQkxFX01FVEhPRFMgPSBbJ2Nsb25lU2hhbGxvdycsICdkb3duU2FtcGxlJywgJ21hcCddOyAvLyBNZXRob2RzIHRoYXQgY2hhbmdlIGluZGljZXMgb2YgdGhpcyBsaXN0IHNob3VsZCBiZSBsaXN0ZWQgaGVyZS5cblxubGlzdFByb3RvLkNIQU5HQUJMRV9NRVRIT0RTID0gWydmaWx0ZXJTZWxmJywgJ3NlbGVjdFJhbmdlJ107XG52YXIgX2RlZmF1bHQgPSBMaXN0O1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgX3V0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgY3JlYXRlSGFzaE1hcCA9IF91dGlsLmNyZWF0ZUhhc2hNYXA7XG52YXIgaXNPYmplY3QgPSBfdXRpbC5pc09iamVjdDtcbnZhciBtYXAgPSBfdXRpbC5tYXA7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0XVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHQuY2F0ZWdvcmllcz1bXV1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0Lm5lZWRDb2xsZWN0PWZhbHNlXVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHQuZGVkdXBsaWNhdGlvbj1mYWxzZV1cbiAqL1xuZnVuY3Rpb24gT3JkaW5hbE1ldGEob3B0KSB7XG4gIC8qKlxuICAgKiBAcmVhZE9ubHlcbiAgICogQHR5cGUge0FycmF5LjxzdHJpbmc+fVxuICAgKi9cbiAgdGhpcy5jYXRlZ29yaWVzID0gb3B0LmNhdGVnb3JpZXMgfHwgW107XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG5cbiAgdGhpcy5fbmVlZENvbGxlY3QgPSBvcHQubmVlZENvbGxlY3Q7XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG5cbiAgdGhpcy5fZGVkdXBsaWNhdGlvbiA9IG9wdC5kZWR1cGxpY2F0aW9uO1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuXG4gIHRoaXMuX21hcDtcbn1cbi8qKlxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Nb2RlbH0gYXhpc01vZGVsXG4gKiBAcmV0dXJuIHttb2R1bGU6ZWNoYXJ0cy9kYXRhL09yZGluYWxNZXRhfVxuICovXG5cblxuT3JkaW5hbE1ldGEuY3JlYXRlQnlBeGlzTW9kZWwgPSBmdW5jdGlvbiAoYXhpc01vZGVsKSB7XG4gIHZhciBvcHRpb24gPSBheGlzTW9kZWwub3B0aW9uO1xuICB2YXIgZGF0YSA9IG9wdGlvbi5kYXRhO1xuICB2YXIgY2F0ZWdvcmllcyA9IGRhdGEgJiYgbWFwKGRhdGEsIGdldE5hbWUpO1xuICByZXR1cm4gbmV3IE9yZGluYWxNZXRhKHtcbiAgICBjYXRlZ29yaWVzOiBjYXRlZ29yaWVzLFxuICAgIG5lZWRDb2xsZWN0OiAhY2F0ZWdvcmllcyxcbiAgICAvLyBkZWR1cGxpY2F0aW9uIGlzIGRlZmF1bHQgaW4gYXhpcy5cbiAgICBkZWR1cGxpY2F0aW9uOiBvcHRpb24uZGVkcGxpY2F0aW9uICE9PSBmYWxzZVxuICB9KTtcbn07XG5cbnZhciBwcm90byA9IE9yZGluYWxNZXRhLnByb3RvdHlwZTtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGNhdGVnb3J5XG4gKiBAcmV0dXJuIHtudW1iZXJ9IG9yZGluYWxcbiAqL1xuXG5wcm90by5nZXRPcmRpbmFsID0gZnVuY3Rpb24gKGNhdGVnb3J5KSB7XG4gIHJldHVybiBnZXRPckNyZWF0ZU1hcCh0aGlzKS5nZXQoY2F0ZWdvcnkpO1xufTtcbi8qKlxuICogQHBhcmFtIHsqfSBjYXRlZ29yeVxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgb3JkaW5hbC4gSWYgbm90IGZvdW5kLCByZXR1cm4gTmFOLlxuICovXG5cblxucHJvdG8ucGFyc2VBbmRDb2xsZWN0ID0gZnVuY3Rpb24gKGNhdGVnb3J5KSB7XG4gIHZhciBpbmRleDtcbiAgdmFyIG5lZWRDb2xsZWN0ID0gdGhpcy5fbmVlZENvbGxlY3Q7IC8vIFRoZSB2YWx1ZSBvZiBjYXRlZ29yeSBkaW0gY2FuIGJlIHRoZSBpbmRleCBvZiB0aGUgZ2l2ZW4gY2F0ZWdvcnkgc2V0LlxuICAvLyBUaGlzIGZlYXR1cmUgaXMgb25seSBzdXBwb3J0ZWQgd2hlbiAhbmVlZENvbGxlY3QsIGJlY2F1c2Ugd2Ugc2hvdWxkXG4gIC8vIGNvbnNpZGVyIGEgY29tbW9uIGNhc2U6IGEgdmFsdWUgaXMgMjAxNywgd2hpY2ggaXMgYSBudW1iZXIgYnV0IGlzXG4gIC8vIGV4cGVjdGVkIHRvIGJlIHRyZWFkIGFzIGEgY2F0ZWdvcnkuIFRoaXMgY2FzZSB1c3VhbGx5IGhhcHBlbiBpbiBkYXRhc2V0LFxuICAvLyB3aGVyZSBpdCBoYXBwZW50IHRvIGJlIG5vIG5lZWQgb2YgdGhlIGluZGV4IGZlYXR1cmUuXG5cbiAgaWYgKHR5cGVvZiBjYXRlZ29yeSAhPT0gJ3N0cmluZycgJiYgIW5lZWRDb2xsZWN0KSB7XG4gICAgcmV0dXJuIGNhdGVnb3J5O1xuICB9IC8vIE9wdGltaXplIGZvciB0aGUgc2NlbmFyaW86XG4gIC8vIGNhdGVnb3J5IGlzIFsnMjAxMi0wMS0wMScsICcyMDEyLTAxLTAyJywgLi4uXSwgd2hlcmUgdGhlIGlucHV0XG4gIC8vIGRhdGEgaGFzIGJlZW4gZW5zdXJlZCBub3QgZHVwbGljYXRlIGFuZCBpcyBsYXJnZSBkYXRhLlxuICAvLyBOb3RpY2UsIGlmIGEgZGF0YXNldCBkaW1lbnNpb24gcHJvdmlkZSBjYXRlZ3JvaWVzLCB1c3VhbGx5IGVjaGFydHNcbiAgLy8gc2hvdWxkIHJlbW92ZSBkdXBsaWNhdGlvbiBleGNlcHQgdXNlciB0ZWxsIGVjaGFydHMgZG9udCBkbyB0aGF0XG4gIC8vIChzZXQgYXhpcy5kZWR1cGxpY2F0aW9uID0gZmFsc2UpLCBiZWNhdXNlIGVjaGFydHMgZG8gbm90IGtub3cgd2hldGhlclxuICAvLyB0aGUgdmFsdWVzIGluIHRoZSBjYXRlZ29yeSBkaW1lbnNpb24gaGFzIGR1cGxpY2F0aW9uIChjb25zaWRlciB0aGVcbiAgLy8gcGFyYWxsZWwtYXFpIGV4YW1wbGUpXG5cblxuICBpZiAobmVlZENvbGxlY3QgJiYgIXRoaXMuX2RlZHVwbGljYXRpb24pIHtcbiAgICBpbmRleCA9IHRoaXMuY2F0ZWdvcmllcy5sZW5ndGg7XG4gICAgdGhpcy5jYXRlZ29yaWVzW2luZGV4XSA9IGNhdGVnb3J5O1xuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIHZhciBtYXAgPSBnZXRPckNyZWF0ZU1hcCh0aGlzKTtcbiAgaW5kZXggPSBtYXAuZ2V0KGNhdGVnb3J5KTtcblxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGlmIChuZWVkQ29sbGVjdCkge1xuICAgICAgaW5kZXggPSB0aGlzLmNhdGVnb3JpZXMubGVuZ3RoO1xuICAgICAgdGhpcy5jYXRlZ29yaWVzW2luZGV4XSA9IGNhdGVnb3J5O1xuICAgICAgbWFwLnNldChjYXRlZ29yeSwgaW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleCA9IE5hTjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW5kZXg7XG59OyAvLyBDb25zaWRlciBiaWcgZGF0YSwgZG8gbm90IGNyZWF0ZSBtYXAgdW50aWwgbmVlZGVkLlxuXG5cbmZ1bmN0aW9uIGdldE9yQ3JlYXRlTWFwKG9yZGluYWxNZXRhKSB7XG4gIHJldHVybiBvcmRpbmFsTWV0YS5fbWFwIHx8IChvcmRpbmFsTWV0YS5fbWFwID0gY3JlYXRlSGFzaE1hcChvcmRpbmFsTWV0YS5jYXRlZ29yaWVzKSk7XG59XG5cbmZ1bmN0aW9uIGdldE5hbWUob2JqKSB7XG4gIGlmIChpc09iamVjdChvYmopICYmIG9iai52YWx1ZSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIG9iai52YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2JqICsgJyc7XG4gIH1cbn1cblxudmFyIF9kZWZhdWx0ID0gT3JkaW5hbE1ldGE7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBfdXRpbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3V0aWxcIik7XG5cbnZhciBjcmVhdGVIYXNoTWFwID0gX3V0aWwuY3JlYXRlSGFzaE1hcDtcbnZhciBpc1R5cGVkQXJyYXkgPSBfdXRpbC5pc1R5cGVkQXJyYXk7XG5cbnZhciBfY2xhenogPSByZXF1aXJlKFwiLi4vdXRpbC9jbGF6elwiKTtcblxudmFyIGVuYWJsZUNsYXNzQ2hlY2sgPSBfY2xhenouZW5hYmxlQ2xhc3NDaGVjaztcblxudmFyIF9zb3VyY2VUeXBlID0gcmVxdWlyZShcIi4vaGVscGVyL3NvdXJjZVR5cGVcIik7XG5cbnZhciBTT1VSQ0VfRk9STUFUX09SSUdJTkFMID0gX3NvdXJjZVR5cGUuU09VUkNFX0ZPUk1BVF9PUklHSU5BTDtcbnZhciBTRVJJRVNfTEFZT1VUX0JZX0NPTFVNTiA9IF9zb3VyY2VUeXBlLlNFUklFU19MQVlPVVRfQllfQ09MVU1OO1xudmFyIFNPVVJDRV9GT1JNQVRfVU5LTk9XTiA9IF9zb3VyY2VUeXBlLlNPVVJDRV9GT1JNQVRfVU5LTk9XTjtcbnZhciBTT1VSQ0VfRk9STUFUX1RZUEVEX0FSUkFZID0gX3NvdXJjZVR5cGUuU09VUkNFX0ZPUk1BVF9UWVBFRF9BUlJBWTtcbnZhciBTT1VSQ0VfRk9STUFUX0tFWUVEX0NPTFVNTlMgPSBfc291cmNlVHlwZS5TT1VSQ0VfRk9STUFUX0tFWUVEX0NPTFVNTlM7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuLyoqXG4gKiBbc291cmNlRm9ybWF0XVxuICpcbiAqICsgXCJvcmlnaW5hbFwiOlxuICogVGhpcyBmb3JtYXQgaXMgb25seSB1c2VkIGluIHNlcmllcy5kYXRhLCB3aGVyZVxuICogaXRlbVN0eWxlIGNhbiBiZSBzcGVjaWZpZWQgaW4gZGF0YSBpdGVtLlxuICpcbiAqICsgXCJhcnJheVJvd3NcIjpcbiAqIFtcbiAqICAgICBbJ3Byb2R1Y3QnLCAnc2NvcmUnLCAnYW1vdW50J10sXG4gKiAgICAgWydNYXRjaGEgTGF0dGUnLCA4OS4zLCA5NS44XSxcbiAqICAgICBbJ01pbGsgVGVhJywgOTIuMSwgODkuNF0sXG4gKiAgICAgWydDaGVlc2UgQ29jb2EnLCA5NC40LCA5MS4yXSxcbiAqICAgICBbJ1dhbG51dCBCcm93bmllJywgODUuNCwgNzYuOV1cbiAqIF1cbiAqXG4gKiArIFwib2JqZWN0Um93c1wiOlxuICogW1xuICogICAgIHtwcm9kdWN0OiAnTWF0Y2hhIExhdHRlJywgc2NvcmU6IDg5LjMsIGFtb3VudDogOTUuOH0sXG4gKiAgICAge3Byb2R1Y3Q6ICdNaWxrIFRlYScsIHNjb3JlOiA5Mi4xLCBhbW91bnQ6IDg5LjR9LFxuICogICAgIHtwcm9kdWN0OiAnQ2hlZXNlIENvY29hJywgc2NvcmU6IDk0LjQsIGFtb3VudDogOTEuMn0sXG4gKiAgICAge3Byb2R1Y3Q6ICdXYWxudXQgQnJvd25pZScsIHNjb3JlOiA4NS40LCBhbW91bnQ6IDc2Ljl9XG4gKiBdXG4gKlxuICogKyBcImtleWVkQ29sdW1uc1wiOlxuICoge1xuICogICAgICdwcm9kdWN0JzogWydNYXRjaGEgTGF0dGUnLCAnTWlsayBUZWEnLCAnQ2hlZXNlIENvY29hJywgJ1dhbG51dCBCcm93bmllJ10sXG4gKiAgICAgJ2NvdW50JzogWzgyMywgMjM1LCAxMDQyLCA5ODhdLFxuICogICAgICdzY29yZSc6IFs5NS44LCA4MS40LCA5MS4yLCA3Ni45XVxuICogfVxuICpcbiAqICsgXCJ0eXBlZEFycmF5XCJcbiAqXG4gKiArIFwidW5rbm93blwiXG4gKi9cblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBmaWVsZHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZHMuc291cmNlRm9ybWF0XG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gZmllbGRzLmZyb21EYXRhc2V0XG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gW2ZpZWxkcy5kYXRhXVxuICogQHBhcmFtIHtzdHJpbmd9IFtzZXJpZXNMYXlvdXRCeT0nY29sdW1uJ11cbiAqIEBwYXJhbSB7QXJyYXkuPE9iamVjdHxzdHJpbmc+fSBbZGltZW5zaW9uc0RlZmluZV1cbiAqIEBwYXJhbSB7T2JqZXR8SGFzaE1hcH0gW2VuY29kZURlZmluZV1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnRJbmRleD0wXVxuICogQHBhcmFtIHtudW1iZXJ9IFtkaW1lbnNpb25zRGV0ZWN0Q291bnRdXG4gKi9cbmZ1bmN0aW9uIFNvdXJjZShmaWVsZHMpIHtcbiAgLyoqXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5mcm9tRGF0YXNldCA9IGZpZWxkcy5mcm9tRGF0YXNldDtcbiAgLyoqXG4gICAqIE5vdCBudWxsL3VuZGVmaW5lZC5cbiAgICogQHR5cGUge0FycmF5fE9iamVjdH1cbiAgICovXG5cbiAgdGhpcy5kYXRhID0gZmllbGRzLmRhdGEgfHwgKGZpZWxkcy5zb3VyY2VGb3JtYXQgPT09IFNPVVJDRV9GT1JNQVRfS0VZRURfQ09MVU1OUyA/IHt9IDogW10pO1xuICAvKipcbiAgICogU2VlIGFsc28gXCJkZXRlY3RTb3VyY2VGb3JtYXRcIi5cbiAgICogTm90IG51bGwvdW5kZWZpbmVkLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cblxuICB0aGlzLnNvdXJjZUZvcm1hdCA9IGZpZWxkcy5zb3VyY2VGb3JtYXQgfHwgU09VUkNFX0ZPUk1BVF9VTktOT1dOO1xuICAvKipcbiAgICogJ3Jvdycgb3IgJ2NvbHVtbidcbiAgICogTm90IG51bGwvdW5kZWZpbmVkLlxuICAgKiBAdHlwZSB7c3RyaW5nfSBzZXJpZXNMYXlvdXRCeVxuICAgKi9cblxuICB0aGlzLnNlcmllc0xheW91dEJ5ID0gZmllbGRzLnNlcmllc0xheW91dEJ5IHx8IFNFUklFU19MQVlPVVRfQllfQ09MVU1OO1xuICAvKipcbiAgICogZGltZW5zaW9ucyBkZWZpbml0aW9uIGluIG9wdGlvbi5cbiAgICogY2FuIGJlIG51bGwvdW5kZWZpbmVkLlxuICAgKiBAdHlwZSB7QXJyYXkuPE9iamVjdHxzdHJpbmc+fVxuICAgKi9cblxuICB0aGlzLmRpbWVuc2lvbnNEZWZpbmUgPSBmaWVsZHMuZGltZW5zaW9uc0RlZmluZTtcbiAgLyoqXG4gICAqIGVuY29kZSBkZWZpbml0aW9uIGluIG9wdGlvbi5cbiAgICogY2FuIGJlIG51bGwvdW5kZWZpbmVkLlxuICAgKiBAdHlwZSB7T2JqZXR8SGFzaE1hcH1cbiAgICovXG5cbiAgdGhpcy5lbmNvZGVEZWZpbmUgPSBmaWVsZHMuZW5jb2RlRGVmaW5lICYmIGNyZWF0ZUhhc2hNYXAoZmllbGRzLmVuY29kZURlZmluZSk7XG4gIC8qKlxuICAgKiBOb3QgbnVsbC91bmRlZmluZWQsIHVpbnQuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG4gIHRoaXMuc3RhcnRJbmRleCA9IGZpZWxkcy5zdGFydEluZGV4IHx8IDA7XG4gIC8qKlxuICAgKiBDYW4gYmUgbnVsbC91bmRlZmluZWQgKHdoZW4gdW5rbm93biksIHVpbnQuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG4gIHRoaXMuZGltZW5zaW9uc0RldGVjdENvdW50ID0gZmllbGRzLmRpbWVuc2lvbnNEZXRlY3RDb3VudDtcbn1cbi8qKlxuICogV3JhcCBvcmlnaW5hbCBzZXJpZXMgZGF0YSBmb3Igc29tZSBjb21wYXRpYmlsaXR5IGNhc2VzLlxuICovXG5cblxuU291cmNlLnNlcmllc0RhdGFUb1NvdXJjZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHJldHVybiBuZXcgU291cmNlKHtcbiAgICBkYXRhOiBkYXRhLFxuICAgIHNvdXJjZUZvcm1hdDogaXNUeXBlZEFycmF5KGRhdGEpID8gU09VUkNFX0ZPUk1BVF9UWVBFRF9BUlJBWSA6IFNPVVJDRV9GT1JNQVRfT1JJR0lOQUwsXG4gICAgZnJvbURhdGFzZXQ6IGZhbHNlXG4gIH0pO1xufTtcblxuZW5hYmxlQ2xhc3NDaGVjayhTb3VyY2UpO1xudmFyIF9kZWZhdWx0ID0gU291cmNlO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgX3V0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgY3JlYXRlSGFzaE1hcCA9IF91dGlsLmNyZWF0ZUhhc2hNYXA7XG52YXIgZWFjaCA9IF91dGlsLmVhY2g7XG52YXIgaXNTdHJpbmcgPSBfdXRpbC5pc1N0cmluZztcbnZhciBkZWZhdWx0cyA9IF91dGlsLmRlZmF1bHRzO1xudmFyIGV4dGVuZCA9IF91dGlsLmV4dGVuZDtcbnZhciBpc09iamVjdCA9IF91dGlsLmlzT2JqZWN0O1xudmFyIGNsb25lID0gX3V0aWwuY2xvbmU7XG5cbnZhciBfbW9kZWwgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9tb2RlbFwiKTtcblxudmFyIG5vcm1hbGl6ZVRvQXJyYXkgPSBfbW9kZWwubm9ybWFsaXplVG9BcnJheTtcblxudmFyIF9zb3VyY2VIZWxwZXIgPSByZXF1aXJlKFwiLi9zb3VyY2VIZWxwZXJcIik7XG5cbnZhciBndWVzc09yZGluYWwgPSBfc291cmNlSGVscGVyLmd1ZXNzT3JkaW5hbDtcblxudmFyIFNvdXJjZSA9IHJlcXVpcmUoXCIuLi9Tb3VyY2VcIik7XG5cbnZhciBfZGltZW5zaW9uSGVscGVyID0gcmVxdWlyZShcIi4vZGltZW5zaW9uSGVscGVyXCIpO1xuXG52YXIgT1RIRVJfRElNRU5TSU9OUyA9IF9kaW1lbnNpb25IZWxwZXIuT1RIRVJfRElNRU5TSU9OUztcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG4vKipcbiAqIEBkZXByZWNhdGVkXG4gKiBVc2UgYGVjaGFydHMvZGF0YS9oZWxwZXIvY3JlYXRlRGltZW5zaW9uc2AgaW5zdGVhZC5cbiAqL1xuXG4vKipcbiAqIEBzZWUge21vZHVsZTplY2hhcnRzL3Rlc3QvdXQvc3BlYy9kYXRhL2NvbXBsZXRlRGltZW5zaW9uc31cbiAqXG4gKiBDb21wbGV0ZSB0aGUgZGltZW5zaW9ucyBhcnJheSwgYnkgdXNlciBkZWZpbmVkIGBkaW1lbnNpb25gIGFuZCBgZW5jb2RlYCxcbiAqIGFuZCBndWVzc2luZyBmcm9tIHRoZSBkYXRhIHN0cnVjdHVyZS5cbiAqIElmIG5vICd2YWx1ZScgZGltZW5zaW9uIHNwZWNpZmllZCwgdGhlIGZpcnN0IG5vLW5hbWVkIGRpbWVuc2lvbiB3aWxsIGJlXG4gKiBuYW1lZCBhcyAndmFsdWUnLlxuICpcbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz59IHN5c0RpbXMgTmVjZXNzYXJ5IGRpbWVuc2lvbnMsIGxpa2UgWyd4JywgJ3knXSwgd2hpY2hcbiAqICAgICAgcHJvdmlkZXMgbm90IG9ubHkgZGltIHRlbXBsYXRlLCBidXQgYWxzbyBkZWZhdWx0IG9yZGVyLlxuICogICAgICBwcm9wZXJ0aWVzOiAnbmFtZScsICd0eXBlJywgJ2Rpc3BsYXlOYW1lJy5cbiAqICAgICAgYG5hbWVgIG9mIGVhY2ggaXRlbSBwcm92aWRlcyBkZWZhdWx0IGNvb3JkIG5hbWUuXG4gKiAgICAgIFt7ZGltc0RlZjogW3N0cmluZ3xPYmplY3QsIC4uLl19LCAuLi5dIGRpbXNEZWYgb2Ygc3lzRGltIGl0ZW0gcHJvdmlkZXMgZGVmYXVsdCBkaW0gbmFtZSwgYW5kXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGUgZGltcyBjb3VudCB0aGF0IHRoZSBzeXNEaW0gcmVxdWlyZWQuXG4gKiAgICAgIFt7b3JkaW5hbE1ldGF9XSBjYW4gYmUgc3BlY2lmaWVkLlxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9kYXRhL1NvdXJjZXxBcnJheXxPYmplY3R9IHNvdXJjZSBvciBkYXRhIChmb3IgY29tcGF0aWJhbCB3aXRoIHBlcnZpb3VzKVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRdXG4gKiBAcGFyYW0ge0FycmF5LjxPYmplY3R8c3RyaW5nPn0gW29wdC5kaW1zRGVmXSBvcHRpb24uc2VyaWVzLmRpbWVuc2lvbnMgVXNlciBkZWZpbmVkIGRpbWVuc2lvbnNcbiAqICAgICAgRm9yIGV4YW1wbGU6IFsnYXNkZicsIHtuYW1lLCB0eXBlfSwgLi4uXS5cbiAqIEBwYXJhbSB7T2JqZWN0fEhhc2hNYXB9IFtvcHQuZW5jb2RlRGVmXSBvcHRpb24uc2VyaWVzLmVuY29kZSB7eDogMiwgeTogWzMsIDFdLCB0b29sdGlwOiBbMSwgMl0sIGxhYmVsOiAzfVxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHQuZ2VuZXJhdGVDb29yZF0gR2VuZXJhdGUgY29vcmQgZGltIHdpdGggdGhlIGdpdmVuIG5hbWUuXG4gKiAgICAgICAgICAgICAgICAgSWYgbm90IHNwZWNpZmllZCwgZXh0cmEgZGltIG5hbWVzIHdpbGwgYmU6XG4gKiAgICAgICAgICAgICAgICAgJ3ZhbHVlJywgJ3ZhbHVlMCcsICd2YWx1ZTEnLCAuLi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0LmdlbmVyYXRlQ29vcmRDb3VudF0gQnkgZGVmYXVsdCwgdGhlIGdlbmVyYXRlZCBkaW0gbmFtZSBpcyBgZ2VuZXJhdGVDb29yZGAuXG4gKiAgICAgICAgICAgICAgICAgSWYgYGdlbmVyYXRlQ29vcmRDb3VudGAgc3BlY2lmaWVkLCB0aGUgZ2VuZXJhdGVkIGRpbSBuYW1lcyB3aWxsIGJlOlxuICogICAgICAgICAgICAgICAgIGBnZW5lcmF0ZUNvb3JkYCArIDAsIGBnZW5lcmF0ZUNvb3JkYCArIDEsIC4uLlxuICogICAgICAgICAgICAgICAgIGNhbiBiZSBJbmZpbml0eSwgaW5kaWNhdGUgdGhhdCB1c2UgYWxsIG9mIHRoZSByZW1haW4gY29sdW1ucy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0LmRpbUNvdW50XSBJZiBub3Qgc3BlY2lmaWVkLCBndWVzcyBieSB0aGUgZmlyc3QgZGF0YSBpdGVtLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHQuZW5jb2RlRGVmYXVsdGVyXSBJZiBub3Qgc3BlY2lmaWVkLCBhdXRvIGZpbmQgdGhlIG5leHQgYXZhaWxhYmxlIGRhdGEgZGltLlxuICogQHJldHVybiB7QXJyYXkuPE9iamVjdD59IFt7XG4gKiAgICAgIG5hbWU6IHN0cmluZyBtYW5kYXRvcnksXG4gKiAgICAgIGRpc3BsYXlOYW1lOiBzdHJpbmcsIHRoZSBvcmlnaW4gbmFtZSBpbiBkaW1zRGVmLCBzZWUgc291cmNlIGhlbHBlci5cbiAqICAgICAgICAgICAgICAgICBJZiBkaXNwbGF5TmFtZSBnaXZlbiwgdGhlIHRvb2x0aXAgd2lsbCBkaXNwbGF5ZWQgdmVydGljYWxseS5cbiAqICAgICAgY29vcmREaW06IHN0cmluZyBtYW5kYXRvcnksXG4gKiAgICAgIGNvb3JkRGltSW5kZXg6IG51bWJlciBtYW5kYXRvcnksXG4gKiAgICAgIHR5cGU6IHN0cmluZyBvcHRpb25hbCxcbiAqICAgICAgb3RoZXJEaW1zOiB7IG5ldmVyIG51bGwvdW5kZWZpbmVkXG4gKiAgICAgICAgICB0b29sdGlwOiBudW1iZXIgb3B0aW9uYWwsXG4gKiAgICAgICAgICBsYWJlbDogbnVtYmVyIG9wdGlvbmFsLFxuICogICAgICAgICAgaXRlbU5hbWU6IG51bWJlciBvcHRpb25hbCxcbiAqICAgICAgICAgIHNlcmllc05hbWU6IG51bWJlciBvcHRpb25hbCxcbiAqICAgICAgfSxcbiAqICAgICAgaXNFeHRyYUNvb3JkOiBib29sZWFuIHRydWUgaWYgY29vcmQgaXMgZ2VuZXJhdGVkXG4gKiAgICAgICAgICAobm90IHNwZWNpZmllZCBpbiBlbmNvZGUgYW5kIG5vdCBzZXJpZXMgc3BlY2lmaWVkKVxuICogICAgICBvdGhlciBwcm9wcyAuLi5cbiAqIH1dXG4gKi9cbmZ1bmN0aW9uIGNvbXBsZXRlRGltZW5zaW9ucyhzeXNEaW1zLCBzb3VyY2UsIG9wdCkge1xuICBpZiAoIVNvdXJjZS5pc0luc3RhbmNlKHNvdXJjZSkpIHtcbiAgICBzb3VyY2UgPSBTb3VyY2Uuc2VyaWVzRGF0YVRvU291cmNlKHNvdXJjZSk7XG4gIH1cblxuICBvcHQgPSBvcHQgfHwge307XG4gIHN5c0RpbXMgPSAoc3lzRGltcyB8fCBbXSkuc2xpY2UoKTtcbiAgdmFyIGRpbXNEZWYgPSAob3B0LmRpbXNEZWYgfHwgW10pLnNsaWNlKCk7XG4gIHZhciBlbmNvZGVEZWYgPSBjcmVhdGVIYXNoTWFwKG9wdC5lbmNvZGVEZWYpO1xuICB2YXIgZGF0YURpbU5hbWVNYXAgPSBjcmVhdGVIYXNoTWFwKCk7XG4gIHZhciBjb29yZERpbU5hbWVNYXAgPSBjcmVhdGVIYXNoTWFwKCk7IC8vIHZhciB2YWx1ZUNhbmRpZGF0ZTtcblxuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBkaW1Db3VudCA9IGdldERpbUNvdW50KHNvdXJjZSwgc3lzRGltcywgZGltc0RlZiwgb3B0LmRpbUNvdW50KTsgLy8gQXBwbHkgdXNlciBkZWZpbmVkIGRpbXMgKGBuYW1lYCBhbmQgYHR5cGVgKSBhbmQgaW5pdCByZXN1bHQuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaW1Db3VudDsgaSsrKSB7XG4gICAgdmFyIGRpbURlZkl0ZW0gPSBkaW1zRGVmW2ldID0gZXh0ZW5kKHt9LCBpc09iamVjdChkaW1zRGVmW2ldKSA/IGRpbXNEZWZbaV0gOiB7XG4gICAgICBuYW1lOiBkaW1zRGVmW2ldXG4gICAgfSk7XG4gICAgdmFyIHVzZXJEaW1OYW1lID0gZGltRGVmSXRlbS5uYW1lO1xuICAgIHZhciByZXN1bHRJdGVtID0gcmVzdWx0W2ldID0ge1xuICAgICAgb3RoZXJEaW1zOiB7fVxuICAgIH07IC8vIE5hbWUgd2lsbCBiZSBhcHBsaWVkIGxhdGVyIGZvciBhdm9pZGluZyBkdXBsaWNhdGlvbi5cblxuICAgIGlmICh1c2VyRGltTmFtZSAhPSBudWxsICYmIGRhdGFEaW1OYW1lTWFwLmdldCh1c2VyRGltTmFtZSkgPT0gbnVsbCkge1xuICAgICAgLy8gT25seSBpZiBgc2VyaWVzLmRpbWVuc2lvbnNgIGlzIGRlZmluZWQgaW4gb3B0aW9uXG4gICAgICAvLyBkaXNwbGF5TmFtZSwgd2lsbCBiZSBzZXQsIGFuZCBkaW1lbnNpb24gd2lsbCBiZSBkaXBsYXllZCB2ZXJ0aWNhbGx5IGluXG4gICAgICAvLyB0b29sdGlwIGJ5IGRlZmF1bHQuXG4gICAgICByZXN1bHRJdGVtLm5hbWUgPSByZXN1bHRJdGVtLmRpc3BsYXlOYW1lID0gdXNlckRpbU5hbWU7XG4gICAgICBkYXRhRGltTmFtZU1hcC5zZXQodXNlckRpbU5hbWUsIGkpO1xuICAgIH1cblxuICAgIGRpbURlZkl0ZW0udHlwZSAhPSBudWxsICYmIChyZXN1bHRJdGVtLnR5cGUgPSBkaW1EZWZJdGVtLnR5cGUpO1xuICAgIGRpbURlZkl0ZW0uZGlzcGxheU5hbWUgIT0gbnVsbCAmJiAocmVzdWx0SXRlbS5kaXNwbGF5TmFtZSA9IGRpbURlZkl0ZW0uZGlzcGxheU5hbWUpO1xuICB9IC8vIFNldCBgY29vcmREaW1gIGFuZCBgY29vcmREaW1JbmRleGAgYnkgYGVuY29kZURlZmAgYW5kIG5vcm1hbGl6ZSBgZW5jb2RlRGVmYC5cblxuXG4gIGVuY29kZURlZi5lYWNoKGZ1bmN0aW9uIChkYXRhRGltcywgY29vcmREaW0pIHtcbiAgICBkYXRhRGltcyA9IG5vcm1hbGl6ZVRvQXJyYXkoZGF0YURpbXMpLnNsaWNlKCk7XG4gICAgdmFyIHZhbGlkRGF0YURpbXMgPSBlbmNvZGVEZWYuc2V0KGNvb3JkRGltLCBbXSk7XG4gICAgZWFjaChkYXRhRGltcywgZnVuY3Rpb24gKHJlc3VsdERpbUlkeCwgaWR4KSB7XG4gICAgICAvLyBUaGUgaW5wdXQgcmVzdWx0RGltSWR4IGNhbiBiZSBkaW0gbmFtZSBvciBpbmRleC5cbiAgICAgIGlzU3RyaW5nKHJlc3VsdERpbUlkeCkgJiYgKHJlc3VsdERpbUlkeCA9IGRhdGFEaW1OYW1lTWFwLmdldChyZXN1bHREaW1JZHgpKTtcblxuICAgICAgaWYgKHJlc3VsdERpbUlkeCAhPSBudWxsICYmIHJlc3VsdERpbUlkeCA8IGRpbUNvdW50KSB7XG4gICAgICAgIHZhbGlkRGF0YURpbXNbaWR4XSA9IHJlc3VsdERpbUlkeDtcbiAgICAgICAgYXBwbHlEaW0ocmVzdWx0W3Jlc3VsdERpbUlkeF0sIGNvb3JkRGltLCBpZHgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTsgLy8gQXBwbHkgdGVtcGxldGVzIGFuZCBkZWZhdWx0IG9yZGVyIGZyb20gYHN5c0RpbXNgLlxuXG4gIHZhciBhdmFpbERpbUlkeCA9IDA7XG4gIGVhY2goc3lzRGltcywgZnVuY3Rpb24gKHN5c0RpbUl0ZW0sIHN5c0RpbUluZGV4KSB7XG4gICAgdmFyIGNvb3JkRGltO1xuICAgIHZhciBzeXNEaW1JdGVtO1xuICAgIHZhciBzeXNEaW1JdGVtRGltc0RlZjtcbiAgICB2YXIgc3lzRGltSXRlbU90aGVyRGltcztcblxuICAgIGlmIChpc1N0cmluZyhzeXNEaW1JdGVtKSkge1xuICAgICAgY29vcmREaW0gPSBzeXNEaW1JdGVtO1xuICAgICAgc3lzRGltSXRlbSA9IHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb29yZERpbSA9IHN5c0RpbUl0ZW0ubmFtZTtcbiAgICAgIHZhciBvcmRpbmFsTWV0YSA9IHN5c0RpbUl0ZW0ub3JkaW5hbE1ldGE7XG4gICAgICBzeXNEaW1JdGVtLm9yZGluYWxNZXRhID0gbnVsbDtcbiAgICAgIHN5c0RpbUl0ZW0gPSBjbG9uZShzeXNEaW1JdGVtKTtcbiAgICAgIHN5c0RpbUl0ZW0ub3JkaW5hbE1ldGEgPSBvcmRpbmFsTWV0YTsgLy8gYGNvb3JkRGltSW5kZXhgIHNob3VsZCBub3QgYmUgc2V0IGRpcmVjdGx5LlxuXG4gICAgICBzeXNEaW1JdGVtRGltc0RlZiA9IHN5c0RpbUl0ZW0uZGltc0RlZjtcbiAgICAgIHN5c0RpbUl0ZW1PdGhlckRpbXMgPSBzeXNEaW1JdGVtLm90aGVyRGltcztcbiAgICAgIHN5c0RpbUl0ZW0ubmFtZSA9IHN5c0RpbUl0ZW0uY29vcmREaW0gPSBzeXNEaW1JdGVtLmNvb3JkRGltSW5kZXggPSBzeXNEaW1JdGVtLmRpbXNEZWYgPSBzeXNEaW1JdGVtLm90aGVyRGltcyA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGRhdGFEaW1zID0gbm9ybWFsaXplVG9BcnJheShlbmNvZGVEZWYuZ2V0KGNvb3JkRGltKSk7IC8vIGRpbWVuc2lvbnMgcHJvdmlkZXMgZGVmYXVsdCBkaW0gc2VxdWVuY2VzLlxuXG4gICAgaWYgKCFkYXRhRGltcy5sZW5ndGgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgKHN5c0RpbUl0ZW1EaW1zRGVmICYmIHN5c0RpbUl0ZW1EaW1zRGVmLmxlbmd0aCB8fCAxKTsgaSsrKSB7XG4gICAgICAgIHdoaWxlIChhdmFpbERpbUlkeCA8IHJlc3VsdC5sZW5ndGggJiYgcmVzdWx0W2F2YWlsRGltSWR4XS5jb29yZERpbSAhPSBudWxsKSB7XG4gICAgICAgICAgYXZhaWxEaW1JZHgrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGF2YWlsRGltSWR4IDwgcmVzdWx0Lmxlbmd0aCAmJiBkYXRhRGltcy5wdXNoKGF2YWlsRGltSWR4KyspO1xuICAgICAgfVxuICAgIH0gLy8gQXBwbHkgdGVtcGxhdGVzLlxuXG5cbiAgICBlYWNoKGRhdGFEaW1zLCBmdW5jdGlvbiAocmVzdWx0RGltSWR4LCBjb29yZERpbUluZGV4KSB7XG4gICAgICB2YXIgcmVzdWx0SXRlbSA9IHJlc3VsdFtyZXN1bHREaW1JZHhdO1xuICAgICAgYXBwbHlEaW0oZGVmYXVsdHMocmVzdWx0SXRlbSwgc3lzRGltSXRlbSksIGNvb3JkRGltLCBjb29yZERpbUluZGV4KTtcblxuICAgICAgaWYgKHJlc3VsdEl0ZW0ubmFtZSA9PSBudWxsICYmIHN5c0RpbUl0ZW1EaW1zRGVmKSB7XG4gICAgICAgIHZhciBzeXNEaW1JdGVtRGltc0RlZkl0ZW0gPSBzeXNEaW1JdGVtRGltc0RlZltjb29yZERpbUluZGV4XTtcbiAgICAgICAgIWlzT2JqZWN0KHN5c0RpbUl0ZW1EaW1zRGVmSXRlbSkgJiYgKHN5c0RpbUl0ZW1EaW1zRGVmSXRlbSA9IHtcbiAgICAgICAgICBuYW1lOiBzeXNEaW1JdGVtRGltc0RlZkl0ZW1cbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdEl0ZW0ubmFtZSA9IHJlc3VsdEl0ZW0uZGlzcGxheU5hbWUgPSBzeXNEaW1JdGVtRGltc0RlZkl0ZW0ubmFtZTtcbiAgICAgICAgcmVzdWx0SXRlbS5kZWZhdWx0VG9vbHRpcCA9IHN5c0RpbUl0ZW1EaW1zRGVmSXRlbS5kZWZhdWx0VG9vbHRpcDtcbiAgICAgIH0gLy8gRklYTUUgcmVmYWN0b3IsIGN1cnJlbnRseSBvbmx5IHVzZWQgaW4gY2FzZToge290aGVyRGltczoge3Rvb2x0aXA6IGZhbHNlfX1cblxuXG4gICAgICBzeXNEaW1JdGVtT3RoZXJEaW1zICYmIGRlZmF1bHRzKHJlc3VsdEl0ZW0ub3RoZXJEaW1zLCBzeXNEaW1JdGVtT3RoZXJEaW1zKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gYXBwbHlEaW0ocmVzdWx0SXRlbSwgY29vcmREaW0sIGNvb3JkRGltSW5kZXgpIHtcbiAgICBpZiAoT1RIRVJfRElNRU5TSU9OUy5nZXQoY29vcmREaW0pICE9IG51bGwpIHtcbiAgICAgIHJlc3VsdEl0ZW0ub3RoZXJEaW1zW2Nvb3JkRGltXSA9IGNvb3JkRGltSW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdEl0ZW0uY29vcmREaW0gPSBjb29yZERpbTtcbiAgICAgIHJlc3VsdEl0ZW0uY29vcmREaW1JbmRleCA9IGNvb3JkRGltSW5kZXg7XG4gICAgICBjb29yZERpbU5hbWVNYXAuc2V0KGNvb3JkRGltLCB0cnVlKTtcbiAgICB9XG4gIH0gLy8gTWFrZSBzdXJlIHRoZSBmaXJzdCBleHRyYSBkaW0gaXMgJ3ZhbHVlJy5cblxuXG4gIHZhciBnZW5lcmF0ZUNvb3JkID0gb3B0LmdlbmVyYXRlQ29vcmQ7XG4gIHZhciBnZW5lcmF0ZUNvb3JkQ291bnQgPSBvcHQuZ2VuZXJhdGVDb29yZENvdW50O1xuICB2YXIgZnJvbVplcm8gPSBnZW5lcmF0ZUNvb3JkQ291bnQgIT0gbnVsbDtcbiAgZ2VuZXJhdGVDb29yZENvdW50ID0gZ2VuZXJhdGVDb29yZCA/IGdlbmVyYXRlQ29vcmRDb3VudCB8fCAxIDogMDtcbiAgdmFyIGV4dHJhID0gZ2VuZXJhdGVDb29yZCB8fCAndmFsdWUnOyAvLyBTZXQgZGltIGBuYW1lYCBhbmQgb3RoZXIgYGNvb3JkRGltYCBhbmQgb3RoZXIgcHJvcHMuXG5cbiAgZm9yICh2YXIgcmVzdWx0RGltSWR4ID0gMDsgcmVzdWx0RGltSWR4IDwgZGltQ291bnQ7IHJlc3VsdERpbUlkeCsrKSB7XG4gICAgdmFyIHJlc3VsdEl0ZW0gPSByZXN1bHRbcmVzdWx0RGltSWR4XSA9IHJlc3VsdFtyZXN1bHREaW1JZHhdIHx8IHt9O1xuICAgIHZhciBjb29yZERpbSA9IHJlc3VsdEl0ZW0uY29vcmREaW07XG5cbiAgICBpZiAoY29vcmREaW0gPT0gbnVsbCkge1xuICAgICAgcmVzdWx0SXRlbS5jb29yZERpbSA9IGdlbk5hbWUoZXh0cmEsIGNvb3JkRGltTmFtZU1hcCwgZnJvbVplcm8pO1xuICAgICAgcmVzdWx0SXRlbS5jb29yZERpbUluZGV4ID0gMDtcblxuICAgICAgaWYgKCFnZW5lcmF0ZUNvb3JkIHx8IGdlbmVyYXRlQ29vcmRDb3VudCA8PSAwKSB7XG4gICAgICAgIHJlc3VsdEl0ZW0uaXNFeHRyYUNvb3JkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgZ2VuZXJhdGVDb29yZENvdW50LS07XG4gICAgfVxuXG4gICAgcmVzdWx0SXRlbS5uYW1lID09IG51bGwgJiYgKHJlc3VsdEl0ZW0ubmFtZSA9IGdlbk5hbWUocmVzdWx0SXRlbS5jb29yZERpbSwgZGF0YURpbU5hbWVNYXApKTtcblxuICAgIGlmIChyZXN1bHRJdGVtLnR5cGUgPT0gbnVsbCAmJiBndWVzc09yZGluYWwoc291cmNlLCByZXN1bHREaW1JZHgsIHJlc3VsdEl0ZW0ubmFtZSkpIHtcbiAgICAgIHJlc3VsdEl0ZW0udHlwZSA9ICdvcmRpbmFsJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSAvLyA/Pz8gVE9ET1xuLy8gT3JpZ2luYWxseSBkZXRlY3QgZGltQ291bnQgYnkgZGF0YVswXS4gU2hvdWxkIHdlXG4vLyBvcHRpbWl6ZSBpdCB0byBvbmx5IGJ5IHN5c0RpbXMgYW5kIGRpbWVuc2lvbnMgYW5kIGVuY29kZS5cbi8vIFNvIG9ubHkgbmVjZXNzYXJ5IGRpbXMgd2lsbCBiZSBpbml0aWFsaXplZC5cbi8vIEJ1dFxuLy8gKDEpIGN1c3RvbSBzZXJpZXMgc2hvdWxkIGJlIGNvbnNpZGVyZWQuIHdoZXJlIG90aGVyIGRpbXNcbi8vIG1heSBiZSB2aXNpdGVkLlxuLy8gKDIpIHNvbWV0aW1lcyB1c2VyIG5lZWQgdG8gY2FsY3VhbHRlIGJ1YmJsZSBzaXplIG9yIHVzZSB2aXN1YWxNYXBcbi8vIG9uIG90aGVyIGRpbWVuc2lvbnMgYmVzaWRlcyBjb29yZFN5cyBuZWVkZWQuXG4vLyBTbywgZGltcyB0aGF0IGlzIG5vdCB1c2VkIGJ5IHN5c3RlbSwgc2hvdWxkIGJlIHNoYXJlZCBpbiBzdG9yYWdlP1xuXG5cbmZ1bmN0aW9uIGdldERpbUNvdW50KHNvdXJjZSwgc3lzRGltcywgZGltc0RlZiwgb3B0RGltQ291bnQpIHtcbiAgLy8gTm90ZSB0aGF0IHRoZSByZXN1bHQgZGltQ291bnQgc2hvdWxkIG5vdCBzbWFsbCB0aGFuIGNvbHVtbnMgY291bnRcbiAgLy8gb2YgZGF0YSwgb3RoZXJ3aXNlIGBkYXRhRGltTmFtZU1hcGAgY2hlY2tpbmcgd2lsbCBiZSBpbmNvcnJlY3QuXG4gIHZhciBkaW1Db3VudCA9IE1hdGgubWF4KHNvdXJjZS5kaW1lbnNpb25zRGV0ZWN0Q291bnQgfHwgMSwgc3lzRGltcy5sZW5ndGgsIGRpbXNEZWYubGVuZ3RoLCBvcHREaW1Db3VudCB8fCAwKTtcbiAgZWFjaChzeXNEaW1zLCBmdW5jdGlvbiAoc3lzRGltSXRlbSkge1xuICAgIHZhciBzeXNEaW1JdGVtRGltc0RlZiA9IHN5c0RpbUl0ZW0uZGltc0RlZjtcbiAgICBzeXNEaW1JdGVtRGltc0RlZiAmJiAoZGltQ291bnQgPSBNYXRoLm1heChkaW1Db3VudCwgc3lzRGltSXRlbURpbXNEZWYubGVuZ3RoKSk7XG4gIH0pO1xuICByZXR1cm4gZGltQ291bnQ7XG59XG5cbmZ1bmN0aW9uIGdlbk5hbWUobmFtZSwgbWFwLCBmcm9tWmVybykge1xuICBpZiAoZnJvbVplcm8gfHwgbWFwLmdldChuYW1lKSAhPSBudWxsKSB7XG4gICAgdmFyIGkgPSAwO1xuXG4gICAgd2hpbGUgKG1hcC5nZXQobmFtZSArIGkpICE9IG51bGwpIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICBuYW1lICs9IGk7XG4gIH1cblxuICBtYXAuc2V0KG5hbWUsIHRydWUpO1xuICByZXR1cm4gbmFtZTtcbn1cblxudmFyIF9kZWZhdWx0ID0gY29tcGxldGVEaW1lbnNpb25zO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgY29tcGxldGVEaW1lbnNpb25zID0gcmVxdWlyZShcIi4vY29tcGxldGVEaW1lbnNpb25zXCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbi8qKlxuICogU3Vic3RpdHV0ZSBgY29tcGxldGVEaW1lbnNpb25zYC5cbiAqIGBjb21wbGV0ZURpbWVuc2lvbnNgIGlzIHRvIGJlIGRlcHJlY2F0ZWQuXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL2RhdGEvU291cmNlfG1vZHVsZTplY2hhcnRzL2RhdGEvTGlzdH0gc291cmNlIG9yIGRhdGEuXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gW29wdF1cbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZ3xPYmplY3Q+fSBbb3B0LmNvb3JkRGltZW5zaW9ucz1bXV1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0LmRpbWVuc2lvbnNDb3VudF1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0LmdlbmVyYXRlQ29vcmRdXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdC5nZW5lcmF0ZUNvb3JkQ291bnRdXG4gKiBAcGFyYW0ge0FycmF5LjxzdHJpbmd8T2JqZWN0Pn0gW29wdC5kaW1lbnNpb25zRGVmaW5lPXNvdXJjZS5kaW1lbnNpb25zRGVmaW5lXSBPdmVyd3JpdGUgc291cmNlIGRlZmluZS5cbiAqIEBwYXJhbSB7T2JqZWN0fEhhc2hNYXB9IFtvcHQuZW5jb2RlRGVmaW5lPXNvdXJjZS5lbmNvZGVEZWZpbmVdIE92ZXJ3cml0ZSBzb3VyY2UgZGVmaW5lLlxuICogQHJldHVybiB7QXJyYXkuPE9iamVjdD59IGRpbWVuc2lvbnNJbmZvXG4gKi9cbmZ1bmN0aW9uIF9kZWZhdWx0KHNvdXJjZSwgb3B0KSB7XG4gIG9wdCA9IG9wdCB8fCB7fTtcbiAgcmV0dXJuIGNvbXBsZXRlRGltZW5zaW9ucyhvcHQuY29vcmREaW1lbnNpb25zIHx8IFtdLCBzb3VyY2UsIHtcbiAgICBkaW1zRGVmOiBvcHQuZGltZW5zaW9uc0RlZmluZSB8fCBzb3VyY2UuZGltZW5zaW9uc0RlZmluZSxcbiAgICBlbmNvZGVEZWY6IG9wdC5lbmNvZGVEZWZpbmUgfHwgc291cmNlLmVuY29kZURlZmluZSxcbiAgICBkaW1Db3VudDogb3B0LmRpbWVuc2lvbnNDb3VudCxcbiAgICBnZW5lcmF0ZUNvb3JkOiBvcHQuZ2VuZXJhdGVDb29yZCxcbiAgICBnZW5lcmF0ZUNvb3JkQ291bnQ6IG9wdC5nZW5lcmF0ZUNvb3JkQ291bnRcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIF9jb25maWcgPSByZXF1aXJlKFwiLi4vLi4vY29uZmlnXCIpO1xuXG52YXIgX19ERVZfXyA9IF9jb25maWcuX19ERVZfXztcblxudmFyIF91dGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxudmFyIGlzVHlwZWRBcnJheSA9IF91dGlsLmlzVHlwZWRBcnJheTtcbnZhciBleHRlbmQgPSBfdXRpbC5leHRlbmQ7XG52YXIgYXNzZXJ0ID0gX3V0aWwuYXNzZXJ0O1xudmFyIGVhY2ggPSBfdXRpbC5lYWNoO1xudmFyIGlzT2JqZWN0ID0gX3V0aWwuaXNPYmplY3Q7XG5cbnZhciBfbW9kZWwgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9tb2RlbFwiKTtcblxudmFyIGdldERhdGFJdGVtVmFsdWUgPSBfbW9kZWwuZ2V0RGF0YUl0ZW1WYWx1ZTtcbnZhciBpc0RhdGFJdGVtT3B0aW9uID0gX21vZGVsLmlzRGF0YUl0ZW1PcHRpb247XG5cbnZhciBfbnVtYmVyID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvbnVtYmVyXCIpO1xuXG52YXIgcGFyc2VEYXRlID0gX251bWJlci5wYXJzZURhdGU7XG5cbnZhciBTb3VyY2UgPSByZXF1aXJlKFwiLi4vU291cmNlXCIpO1xuXG52YXIgX3NvdXJjZVR5cGUgPSByZXF1aXJlKFwiLi9zb3VyY2VUeXBlXCIpO1xuXG52YXIgU09VUkNFX0ZPUk1BVF9UWVBFRF9BUlJBWSA9IF9zb3VyY2VUeXBlLlNPVVJDRV9GT1JNQVRfVFlQRURfQVJSQVk7XG52YXIgU09VUkNFX0ZPUk1BVF9BUlJBWV9ST1dTID0gX3NvdXJjZVR5cGUuU09VUkNFX0ZPUk1BVF9BUlJBWV9ST1dTO1xudmFyIFNPVVJDRV9GT1JNQVRfT1JJR0lOQUwgPSBfc291cmNlVHlwZS5TT1VSQ0VfRk9STUFUX09SSUdJTkFMO1xudmFyIFNPVVJDRV9GT1JNQVRfT0JKRUNUX1JPV1MgPSBfc291cmNlVHlwZS5TT1VSQ0VfRk9STUFUX09CSkVDVF9ST1dTO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG4vLyBUT0RPXG4vLyA/Pz8gcmVmYWN0b3I/IGNoZWNrIHRoZSBvdXRlciB1c2FnZSBvZiBkYXRhIHByb3ZpZGVyLlxuLy8gbWVyZ2Ugd2l0aCBkZWZhdWx0RGltVmFsdWVHZXR0ZXI/XG5cbi8qKlxuICogSWYgbm9ybWFsIGFycmF5IHVzZWQsIG11dGFibGUgY2h1bmsgc2l6ZSBpcyBzdXBwb3J0ZWQuXG4gKiBJZiB0eXBlZCBhcnJheSB1c2VkLCBjaHVuayBzaXplIG11c3QgYmUgZml4ZWQuXG4gKi9cbmZ1bmN0aW9uIERlZmF1bHREYXRhUHJvdmlkZXIoc291cmNlLCBkaW1TaXplKSB7XG4gIGlmICghU291cmNlLmlzSW5zdGFuY2Uoc291cmNlKSkge1xuICAgIHNvdXJjZSA9IFNvdXJjZS5zZXJpZXNEYXRhVG9Tb3VyY2Uoc291cmNlKTtcbiAgfVxuXG4gIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhID0gc291cmNlLmRhdGE7XG4gIHZhciBzb3VyY2VGb3JtYXQgPSBzb3VyY2Uuc291cmNlRm9ybWF0OyAvLyBUeXBlZCBhcnJheS4gVE9ETyBJRTEwKz9cblxuICBpZiAoc291cmNlRm9ybWF0ID09PSBTT1VSQ0VfRk9STUFUX1RZUEVEX0FSUkFZKSB7XG4gICAgdGhpcy5fb2Zmc2V0ID0gMDtcbiAgICB0aGlzLl9kaW1TaXplID0gZGltU2l6ZTtcbiAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgfVxuXG4gIHZhciBtZXRob2RzID0gcHJvdmlkZXJNZXRob2RzW3NvdXJjZUZvcm1hdCA9PT0gU09VUkNFX0ZPUk1BVF9BUlJBWV9ST1dTID8gc291cmNlRm9ybWF0ICsgJ18nICsgc291cmNlLnNlcmllc0xheW91dEJ5IDogc291cmNlRm9ybWF0XTtcbiAgZXh0ZW5kKHRoaXMsIG1ldGhvZHMpO1xufVxuXG52YXIgcHJvdmlkZXJQcm90byA9IERlZmF1bHREYXRhUHJvdmlkZXIucHJvdG90eXBlOyAvLyBJZiBkYXRhIGlzIHB1cmUgd2l0aG91dCBzdHlsZSBjb25maWd1cmF0aW9uXG5cbnByb3ZpZGVyUHJvdG8ucHVyZSA9IGZhbHNlOyAvLyBJZiBkYXRhIGlzIHBlcnNpc3RlbnQgYW5kIHdpbGwgbm90IGJlIHJlbGVhc2VkIGFmdGVyIHVzZS5cblxucHJvdmlkZXJQcm90by5wZXJzaXN0ZW50ID0gdHJ1ZTsgLy8gPz8/ISBGSVhNRSBsZWdhY3kgZGF0YSBwcm92aWRlciBkbyBub3QgaGFzIG1ldGhvZCBnZXRTb3VyY2VcblxucHJvdmlkZXJQcm90by5nZXRTb3VyY2UgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9zb3VyY2U7XG59O1xuXG52YXIgcHJvdmlkZXJNZXRob2RzID0ge1xuICAnYXJyYXlSb3dzX2NvbHVtbic6IHtcbiAgICBwdXJlOiB0cnVlLFxuICAgIGNvdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gTWF0aC5tYXgoMCwgdGhpcy5fZGF0YS5sZW5ndGggLSB0aGlzLl9zb3VyY2Uuc3RhcnRJbmRleCk7XG4gICAgfSxcbiAgICBnZXRJdGVtOiBmdW5jdGlvbiAoaWR4KSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGF0YVtpZHggKyB0aGlzLl9zb3VyY2Uuc3RhcnRJbmRleF07XG4gICAgfSxcbiAgICBhcHBlbmREYXRhOiBhcHBlbmREYXRhU2ltcGx5XG4gIH0sXG4gICdhcnJheVJvd3Nfcm93Jzoge1xuICAgIHB1cmU6IHRydWUsXG4gICAgY291bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByb3cgPSB0aGlzLl9kYXRhWzBdO1xuICAgICAgcmV0dXJuIHJvdyA/IE1hdGgubWF4KDAsIHJvdy5sZW5ndGggLSB0aGlzLl9zb3VyY2Uuc3RhcnRJbmRleCkgOiAwO1xuICAgIH0sXG4gICAgZ2V0SXRlbTogZnVuY3Rpb24gKGlkeCkge1xuICAgICAgaWR4ICs9IHRoaXMuX3NvdXJjZS5zdGFydEluZGV4O1xuICAgICAgdmFyIGl0ZW0gPSBbXTtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciByb3cgPSBkYXRhW2ldO1xuICAgICAgICBpdGVtLnB1c2gocm93ID8gcm93W2lkeF0gOiBudWxsKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSxcbiAgICBhcHBlbmREYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RvIG5vdCBzdXBwb3J0IGFwcGVuZERhdGEgd2hlbiBzZXQgc2VyaWVzTGF5b3V0Qnk6IFwicm93XCIuJyk7XG4gICAgfVxuICB9LFxuICAnb2JqZWN0Um93cyc6IHtcbiAgICBwdXJlOiB0cnVlLFxuICAgIGNvdW50OiBjb3VudFNpbXBseSxcbiAgICBnZXRJdGVtOiBnZXRJdGVtU2ltcGx5LFxuICAgIGFwcGVuZERhdGE6IGFwcGVuZERhdGFTaW1wbHlcbiAgfSxcbiAgJ2tleWVkQ29sdW1ucyc6IHtcbiAgICBwdXJlOiB0cnVlLFxuICAgIGNvdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZGltTmFtZSA9IHRoaXMuX3NvdXJjZS5kaW1lbnNpb25zRGVmaW5lWzBdLm5hbWU7XG4gICAgICB2YXIgY29sID0gdGhpcy5fZGF0YVtkaW1OYW1lXTtcbiAgICAgIHJldHVybiBjb2wgPyBjb2wubGVuZ3RoIDogMDtcbiAgICB9LFxuICAgIGdldEl0ZW06IGZ1bmN0aW9uIChpZHgpIHtcbiAgICAgIHZhciBpdGVtID0gW107XG4gICAgICB2YXIgZGltcyA9IHRoaXMuX3NvdXJjZS5kaW1lbnNpb25zRGVmaW5lO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNvbCA9IHRoaXMuX2RhdGFbZGltc1tpXS5uYW1lXTtcbiAgICAgICAgaXRlbS5wdXNoKGNvbCA/IGNvbFtpZHhdIDogbnVsbCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH0sXG4gICAgYXBwZW5kRGF0YTogZnVuY3Rpb24gKG5ld0RhdGEpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcbiAgICAgIGVhY2gobmV3RGF0YSwgZnVuY3Rpb24gKG5ld0NvbCwga2V5KSB7XG4gICAgICAgIHZhciBvbGRDb2wgPSBkYXRhW2tleV0gfHwgKGRhdGFba2V5XSA9IFtdKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IChuZXdDb2wgfHwgW10pLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgb2xkQ29sLnB1c2gobmV3Q29sW2ldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAnb3JpZ2luYWwnOiB7XG4gICAgY291bnQ6IGNvdW50U2ltcGx5LFxuICAgIGdldEl0ZW06IGdldEl0ZW1TaW1wbHksXG4gICAgYXBwZW5kRGF0YTogYXBwZW5kRGF0YVNpbXBseVxuICB9LFxuICAndHlwZWRBcnJheSc6IHtcbiAgICBwZXJzaXN0ZW50OiBmYWxzZSxcbiAgICBwdXJlOiB0cnVlLFxuICAgIGNvdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGF0YSA/IHRoaXMuX2RhdGEubGVuZ3RoIC8gdGhpcy5fZGltU2l6ZSA6IDA7XG4gICAgfSxcbiAgICBnZXRJdGVtOiBmdW5jdGlvbiAoaWR4LCBvdXQpIHtcbiAgICAgIGlkeCA9IGlkeCAtIHRoaXMuX29mZnNldDtcbiAgICAgIG91dCA9IG91dCB8fCBbXTtcbiAgICAgIHZhciBvZmZzZXQgPSB0aGlzLl9kaW1TaXplICogaWR4O1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2RpbVNpemU7IGkrKykge1xuICAgICAgICBvdXRbaV0gPSB0aGlzLl9kYXRhW29mZnNldCArIGldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb3V0O1xuICAgIH0sXG4gICAgYXBwZW5kRGF0YTogZnVuY3Rpb24gKG5ld0RhdGEpIHtcbiAgICAgIHRoaXMuX2RhdGEgPSBuZXdEYXRhO1xuICAgIH0sXG4gICAgLy8gQ2xlYW4gc2VsZiBpZiBkYXRhIGlzIGFscmVhZHkgdXNlZC5cbiAgICBjbGVhbjogZnVuY3Rpb24gKCkge1xuICAgICAgLy8gUEVORElOR1xuICAgICAgdGhpcy5fb2Zmc2V0ICs9IHRoaXMuY291bnQoKTtcbiAgICAgIHRoaXMuX2RhdGEgPSBudWxsO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY291bnRTaW1wbHkoKSB7XG4gIHJldHVybiB0aGlzLl9kYXRhLmxlbmd0aDtcbn1cblxuZnVuY3Rpb24gZ2V0SXRlbVNpbXBseShpZHgpIHtcbiAgcmV0dXJuIHRoaXMuX2RhdGFbaWR4XTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kRGF0YVNpbXBseShuZXdEYXRhKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3RGF0YS5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMuX2RhdGEucHVzaChuZXdEYXRhW2ldKTtcbiAgfVxufVxuXG52YXIgcmF3VmFsdWVHZXR0ZXJzID0ge1xuICBhcnJheVJvd3M6IGdldFJhd1ZhbHVlU2ltcGx5LFxuICBvYmplY3RSb3dzOiBmdW5jdGlvbiAoZGF0YUl0ZW0sIGRhdGFJbmRleCwgZGltSW5kZXgsIGRpbU5hbWUpIHtcbiAgICByZXR1cm4gZGltSW5kZXggIT0gbnVsbCA/IGRhdGFJdGVtW2RpbU5hbWVdIDogZGF0YUl0ZW07XG4gIH0sXG4gIGtleWVkQ29sdW1uczogZ2V0UmF3VmFsdWVTaW1wbHksXG4gIG9yaWdpbmFsOiBmdW5jdGlvbiAoZGF0YUl0ZW0sIGRhdGFJbmRleCwgZGltSW5kZXgsIGRpbU5hbWUpIHtcbiAgICAvLyBGSVhNRVxuICAgIC8vIEluIHNvbWUgY2FzZSAobWFya3BvaW50IGluIGdlbyAoZ2VvLW1hcC5odG1sKSksIGRhdGFJdGVtXG4gICAgLy8gaXMge2Nvb3JkOiBbLi4uXX1cbiAgICB2YXIgdmFsdWUgPSBnZXREYXRhSXRlbVZhbHVlKGRhdGFJdGVtKTtcbiAgICByZXR1cm4gZGltSW5kZXggPT0gbnVsbCB8fCAhKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpID8gdmFsdWUgOiB2YWx1ZVtkaW1JbmRleF07XG4gIH0sXG4gIHR5cGVkQXJyYXk6IGdldFJhd1ZhbHVlU2ltcGx5XG59O1xuXG5mdW5jdGlvbiBnZXRSYXdWYWx1ZVNpbXBseShkYXRhSXRlbSwgZGF0YUluZGV4LCBkaW1JbmRleCwgZGltTmFtZSkge1xuICByZXR1cm4gZGltSW5kZXggIT0gbnVsbCA/IGRhdGFJdGVtW2RpbUluZGV4XSA6IGRhdGFJdGVtO1xufVxuXG52YXIgZGVmYXVsdERpbVZhbHVlR2V0dGVycyA9IHtcbiAgYXJyYXlSb3dzOiBnZXREaW1WYWx1ZVNpbXBseSxcbiAgb2JqZWN0Um93czogZnVuY3Rpb24gKGRhdGFJdGVtLCBkaW1OYW1lLCBkYXRhSW5kZXgsIGRpbUluZGV4KSB7XG4gICAgcmV0dXJuIGNvbnZlckRhdGFWYWx1ZShkYXRhSXRlbVtkaW1OYW1lXSwgdGhpcy5fZGltZW5zaW9uSW5mb3NbZGltTmFtZV0pO1xuICB9LFxuICBrZXllZENvbHVtbnM6IGdldERpbVZhbHVlU2ltcGx5LFxuICBvcmlnaW5hbDogZnVuY3Rpb24gKGRhdGFJdGVtLCBkaW1OYW1lLCBkYXRhSW5kZXgsIGRpbUluZGV4KSB7XG4gICAgLy8gUGVyZm9ybWFuY2Ugc2Vuc2l0aXZlLCBkbyBub3QgdXNlIG1vZGVsVXRpbC5nZXREYXRhSXRlbVZhbHVlLlxuICAgIC8vIElmIGRhdGFJdGVtIGlzIGFuIHBsYWluIG9iamVjdCB3aXRoIG5vIHZhbHVlIGZpZWxkLCB0aGUgdmFyIGB2YWx1ZWBcbiAgICAvLyB3aWxsIGJlIGFzc2lnbmVkIHdpdGggdGhlIG9iamVjdCwgYnV0IGl0IHdpbGwgYmUgdHJlYWQgY29ycmVjdGx5XG4gICAgLy8gaW4gdGhlIGBjb252ZXJ0RGF0YVZhbHVlYC5cbiAgICB2YXIgdmFsdWUgPSBkYXRhSXRlbSAmJiAoZGF0YUl0ZW0udmFsdWUgPT0gbnVsbCA/IGRhdGFJdGVtIDogZGF0YUl0ZW0udmFsdWUpOyAvLyBJZiBhbnkgZGF0YUl0ZW0gaXMgbGlrZSB7IHZhbHVlOiAxMCB9XG5cbiAgICBpZiAoIXRoaXMuX3Jhd0RhdGEucHVyZSAmJiBpc0RhdGFJdGVtT3B0aW9uKGRhdGFJdGVtKSkge1xuICAgICAgdGhpcy5oYXNJdGVtT3B0aW9uID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udmVyRGF0YVZhbHVlKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkgPyB2YWx1ZVtkaW1JbmRleF0gLy8gSWYgdmFsdWUgaXMgYSBzaW5nbGUgbnVtYmVyIG9yIHNvbWV0aGluZyBlbHNlIG5vdCBhcnJheS5cbiAgICA6IHZhbHVlLCB0aGlzLl9kaW1lbnNpb25JbmZvc1tkaW1OYW1lXSk7XG4gIH0sXG4gIHR5cGVkQXJyYXk6IGZ1bmN0aW9uIChkYXRhSXRlbSwgZGltTmFtZSwgZGF0YUluZGV4LCBkaW1JbmRleCkge1xuICAgIHJldHVybiBkYXRhSXRlbVtkaW1JbmRleF07XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldERpbVZhbHVlU2ltcGx5KGRhdGFJdGVtLCBkaW1OYW1lLCBkYXRhSW5kZXgsIGRpbUluZGV4KSB7XG4gIHJldHVybiBjb252ZXJEYXRhVmFsdWUoZGF0YUl0ZW1bZGltSW5kZXhdLCB0aGlzLl9kaW1lbnNpb25JbmZvc1tkaW1OYW1lXSk7XG59XG4vKipcbiAqIFRoaXMgaGVscGVyIG1ldGhvZCBjb252ZXJ0IHZhbHVlIGluIGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ8RGF0ZX0gdmFsdWVcbiAqIEBwYXJhbSB7T2JqZWN0fHN0cmluZ30gW2RpbUluZm9dIElmIHN0cmluZyAobGlrZSAneCcpLCBkaW1UeXBlIGRlZmF1bHRzICdudW1iZXInLlxuICogICAgICAgIElmIFwiZGltSW5mby5vcmRpbmFsUGFyc2VBbmRTYXZlXCIsIG9yZGluYWwgdmFsdWUgY2FuIGJlIHBhcnNlZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbnZlckRhdGFWYWx1ZSh2YWx1ZSwgZGltSW5mbykge1xuICAvLyBQZXJmb3JtYW5jZSBzZW5zaXRpdmUuXG4gIHZhciBkaW1UeXBlID0gZGltSW5mbyAmJiBkaW1JbmZvLnR5cGU7XG5cbiAgaWYgKGRpbVR5cGUgPT09ICdvcmRpbmFsJykge1xuICAgIC8vIElmIGdpdmVuIHZhbHVlIGlzIGEgY2F0ZWdvcnkgc3RyaW5nXG4gICAgdmFyIG9yZGluYWxNZXRhID0gZGltSW5mbyAmJiBkaW1JbmZvLm9yZGluYWxNZXRhO1xuICAgIHJldHVybiBvcmRpbmFsTWV0YSA/IG9yZGluYWxNZXRhLnBhcnNlQW5kQ29sbGVjdCh2YWx1ZSkgOiB2YWx1ZTtcbiAgfVxuXG4gIGlmIChkaW1UeXBlID09PSAndGltZScgLy8gc3BlYWQgdXAgd2hlbiB1c2luZyB0aW1lc3RhbXBcbiAgJiYgdHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJyAmJiB2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9PSAnLScpIHtcbiAgICB2YWx1ZSA9ICtwYXJzZURhdGUodmFsdWUpO1xuICB9IC8vIGRpbVR5cGUgZGVmYXVsdHMgJ251bWJlcicuXG4gIC8vIElmIGRpbVR5cGUgaXMgbm90IG9yZGluYWwgYW5kIHZhbHVlIGlzIG51bGwgb3IgdW5kZWZpbmVkIG9yIE5hTiBvciAnLScsXG4gIC8vIHBhcnNlIHRvIE5hTi5cblxuXG4gIHJldHVybiB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSAnJyA/IE5hTiAvLyBJZiBzdHJpbmcgKGxpa2UgJy0nKSwgdXNpbmcgJysnIHBhcnNlIHRvIE5hTlxuICAvLyBJZiBvYmplY3QsIGFsc28gcGFyc2UgdG8gTmFOXG4gIDogK3ZhbHVlO1xufSAvLyA/Pz8gRklYTUUgY2FuIHRoZXNlIGxvZ2ljIGJlIG1vcmUgbmVhdDogZ2V0UmF3VmFsdWUsIGdldFJhd0RhdGFJdGVtLFxuLy8gQ29uc2lkZXIgcGVyc2lzdGVudC5cbi8vIENhdXRpb246IHdoeSB1c2UgcmF3IHZhbHVlIHRvIGRpc3BsYXkgb24gbGFiZWwgb3IgdG9vbHRpcD9cbi8vIEEgcmVhc29uIGlzIHRvIGF2b2lkIGZvcm1hdC4gRm9yIGV4YW1wbGUgdGltZSB2YWx1ZSB3ZSBkbyBub3Qga25vd1xuLy8gaG93IHRvIGZvcm1hdCBpcyBleHBlY3RlZC4gTW9yZSBvdmVyLCBpZiBzdGFjayBpcyB1c2VkLCBjYWxjdWxhdGVkXG4vLyB2YWx1ZSBtYXkgYmUgMC45MTAwMDAwMDAwMSwgd2hpY2ggaGF2ZSBicmluZ3MgdHJvdWJsZSB0byBkaXNwbGF5LlxuLy8gVE9ETzogY29uc2lkZXIgaG93IHRvIHRyZWF0IG51bGwvdW5kZWZpbmVkL05hTiB3aGVuIGRpc3BsYXk/XG5cbi8qKlxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9kYXRhL0xpc3R9IGRhdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBkYXRhSW5kZXhcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gW2RpbV0gZGltTmFtZSBvciBkaW1JbmRleFxuICogQHJldHVybiB7QXJyYXkuPG51bWJlcj58c3RyaW5nfG51bWJlcn0gY2FuIGJlIG51bGwvdW5kZWZpbmVkLlxuICovXG5cblxuZnVuY3Rpb24gcmV0cmlldmVSYXdWYWx1ZShkYXRhLCBkYXRhSW5kZXgsIGRpbSkge1xuICBpZiAoIWRhdGEpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gQ29uc2lkZXIgZGF0YSBtYXkgYmUgbm90IHBlcnNpc3RlbnQuXG5cblxuICB2YXIgZGF0YUl0ZW0gPSBkYXRhLmdldFJhd0RhdGFJdGVtKGRhdGFJbmRleCk7XG5cbiAgaWYgKGRhdGFJdGVtID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc291cmNlRm9ybWF0ID0gZGF0YS5nZXRQcm92aWRlcigpLmdldFNvdXJjZSgpLnNvdXJjZUZvcm1hdDtcbiAgdmFyIGRpbU5hbWU7XG4gIHZhciBkaW1JbmRleDtcbiAgdmFyIGRpbUluZm8gPSBkYXRhLmdldERpbWVuc2lvbkluZm8oZGltKTtcblxuICBpZiAoZGltSW5mbykge1xuICAgIGRpbU5hbWUgPSBkaW1JbmZvLm5hbWU7XG4gICAgZGltSW5kZXggPSBkaW1JbmZvLmluZGV4O1xuICB9XG5cbiAgcmV0dXJuIHJhd1ZhbHVlR2V0dGVyc1tzb3VyY2VGb3JtYXRdKGRhdGFJdGVtLCBkYXRhSW5kZXgsIGRpbUluZGV4LCBkaW1OYW1lKTtcbn1cbi8qKlxuICogQ29tcGF0aWJsZSB3aXRoIHNvbWUgY2FzZXMgKGluIHBpZSwgbWFwKSBsaWtlOlxuICogZGF0YTogW3tuYW1lOiAneHgnLCB2YWx1ZTogNSwgc2VsZWN0ZWQ6IHRydWV9LCAuLi5dXG4gKiB3aGVyZSBvbmx5IHNvdXJjZUZvcm1hdCBpcyAnb3JpZ2luYWwnIGFuZCAnb2JqZWN0Um93cycgc3VwcG9ydGVkLlxuICpcbiAqID8/PyBUT0RPXG4gKiBTdXBwb3J0ZWQgZGV0YWlsIG9wdGlvbnMgaW4gZGF0YSBpdGVtIHdoZW4gdXNpbmcgJ2FycmF5Um93cycuXG4gKlxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9kYXRhL0xpc3R9IGRhdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBkYXRhSW5kZXhcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyIGxpa2UgJ3NlbGVjdGVkJ1xuICovXG5cblxuZnVuY3Rpb24gcmV0cmlldmVSYXdBdHRyKGRhdGEsIGRhdGFJbmRleCwgYXR0cikge1xuICBpZiAoIWRhdGEpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc291cmNlRm9ybWF0ID0gZGF0YS5nZXRQcm92aWRlcigpLmdldFNvdXJjZSgpLnNvdXJjZUZvcm1hdDtcblxuICBpZiAoc291cmNlRm9ybWF0ICE9PSBTT1VSQ0VfRk9STUFUX09SSUdJTkFMICYmIHNvdXJjZUZvcm1hdCAhPT0gU09VUkNFX0ZPUk1BVF9PQkpFQ1RfUk9XUykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBkYXRhSXRlbSA9IGRhdGEuZ2V0UmF3RGF0YUl0ZW0oZGF0YUluZGV4KTtcblxuICBpZiAoc291cmNlRm9ybWF0ID09PSBTT1VSQ0VfRk9STUFUX09SSUdJTkFMICYmICFpc09iamVjdChkYXRhSXRlbSkpIHtcbiAgICBkYXRhSXRlbSA9IG51bGw7XG4gIH1cblxuICBpZiAoZGF0YUl0ZW0pIHtcbiAgICByZXR1cm4gZGF0YUl0ZW1bYXR0cl07XG4gIH1cbn1cblxuZXhwb3J0cy5EZWZhdWx0RGF0YVByb3ZpZGVyID0gRGVmYXVsdERhdGFQcm92aWRlcjtcbmV4cG9ydHMuZGVmYXVsdERpbVZhbHVlR2V0dGVycyA9IGRlZmF1bHREaW1WYWx1ZUdldHRlcnM7XG5leHBvcnRzLnJldHJpZXZlUmF3VmFsdWUgPSByZXRyaWV2ZVJhd1ZhbHVlO1xuZXhwb3J0cy5yZXRyaWV2ZVJhd0F0dHIgPSByZXRyaWV2ZVJhd0F0dHI7IiwidmFyIF91dGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxudmFyIGVhY2ggPSBfdXRpbC5lYWNoO1xudmFyIGlzU3RyaW5nID0gX3V0aWwuaXNTdHJpbmc7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuLyoqXG4gKiBOb3RlIHRoYXQgaXQgaXMgdG9vIGNvbXBsaWNhdGVkIHRvIHN1cHBvcnQgM2Qgc3RhY2sgYnkgdmFsdWVcbiAqIChoYXZlIHRvIGNyZWF0ZSB0d28tZGltZW5zaW9uIGludmVydGVkIGluZGV4KSwgc28gaW4gM2QgY2FzZVxuICogd2UganVzdCBzdXBwb3J0IHRoYXQgc3RhY2tlZCBieSBpbmRleC5cbiAqXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL21vZGVsL1Nlcmllc30gc2VyaWVzTW9kZWxcbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZ3xPYmplY3Q+fSBkaW1lbnNpb25JbmZvTGlzdCBUaGUgc2FtZSBhcyB0aGUgaW5wdXQgb2YgPG1vZHVsZTplY2hhcnRzL2RhdGEvTGlzdD4uXG4gKiAgICAgICAgVGhlIGlucHV0IGRpbWVuc2lvbkluZm9MaXN0IHdpbGwgYmUgbW9kaWZpZWQuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdF1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdC5zdGFja2VkQ29vcmREaW1lbnNpb249JyddIFNwZWNpZnkgYSBjb29yZCBkaW1lbnNpb24gaWYgbmVlZGVkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0LmJ5SW5kZXg9ZmFsc2VdXG4gKiBAcmV0dXJuIHtPYmplY3R9IGNhbGN1bGF0aW9uSW5mb1xuICoge1xuICogICAgIHN0YWNrZWREaW1lbnNpb246IHN0cmluZ1xuICogICAgIHN0YWNrZWRCeURpbWVuc2lvbjogc3RyaW5nXG4gKiAgICAgaXNTdGFja2VkQnlJbmRleDogYm9vbGVhblxuICogICAgIHN0YWNrZWRPdmVyRGltZW5zaW9uOiBzdHJpbmdcbiAqICAgICBzdGFja1Jlc3VsdERpbWVuc2lvbjogc3RyaW5nXG4gKiB9XG4gKi9cbmZ1bmN0aW9uIGVuYWJsZURhdGFTdGFjayhzZXJpZXNNb2RlbCwgZGltZW5zaW9uSW5mb0xpc3QsIG9wdCkge1xuICBvcHQgPSBvcHQgfHwge307XG4gIHZhciBieUluZGV4ID0gb3B0LmJ5SW5kZXg7XG4gIHZhciBzdGFja2VkQ29vcmREaW1lbnNpb24gPSBvcHQuc3RhY2tlZENvb3JkRGltZW5zaW9uOyAvLyBDb21wYXRpYmFsOiB3aGVuIGBzdGFja2AgaXMgc2V0IGFzICcnLCBkbyBub3Qgc3RhY2suXG5cbiAgdmFyIG1heVN0YWNrID0gISEoc2VyaWVzTW9kZWwgJiYgc2VyaWVzTW9kZWwuZ2V0KCdzdGFjaycpKTtcbiAgdmFyIHN0YWNrZWRCeURpbUluZm87XG4gIHZhciBzdGFja2VkRGltSW5mbztcbiAgdmFyIHN0YWNrUmVzdWx0RGltZW5zaW9uO1xuICB2YXIgc3RhY2tlZE92ZXJEaW1lbnNpb247XG4gIGVhY2goZGltZW5zaW9uSW5mb0xpc3QsIGZ1bmN0aW9uIChkaW1lbnNpb25JbmZvLCBpbmRleCkge1xuICAgIGlmIChpc1N0cmluZyhkaW1lbnNpb25JbmZvKSkge1xuICAgICAgZGltZW5zaW9uSW5mb0xpc3RbaW5kZXhdID0gZGltZW5zaW9uSW5mbyA9IHtcbiAgICAgICAgbmFtZTogZGltZW5zaW9uSW5mb1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAobWF5U3RhY2sgJiYgIWRpbWVuc2lvbkluZm8uaXNFeHRyYUNvb3JkKSB7XG4gICAgICAvLyBGaW5kIHRoZSBmaXJzdCBvcmRpbmFsIGRpbWVuc2lvbiBhcyB0aGUgc3RhY2tlZEJ5RGltSW5mby5cbiAgICAgIGlmICghYnlJbmRleCAmJiAhc3RhY2tlZEJ5RGltSW5mbyAmJiBkaW1lbnNpb25JbmZvLm9yZGluYWxNZXRhKSB7XG4gICAgICAgIHN0YWNrZWRCeURpbUluZm8gPSBkaW1lbnNpb25JbmZvO1xuICAgICAgfSAvLyBGaW5kIHRoZSBmaXJzdCBzdGFja2FibGUgZGltZW5zaW9uIGFzIHRoZSBzdGFja2VkRGltSW5mby5cblxuXG4gICAgICBpZiAoIXN0YWNrZWREaW1JbmZvICYmIGRpbWVuc2lvbkluZm8udHlwZSAhPT0gJ29yZGluYWwnICYmIGRpbWVuc2lvbkluZm8udHlwZSAhPT0gJ3RpbWUnICYmICghc3RhY2tlZENvb3JkRGltZW5zaW9uIHx8IHN0YWNrZWRDb29yZERpbWVuc2lvbiA9PT0gZGltZW5zaW9uSW5mby5jb29yZERpbSkpIHtcbiAgICAgICAgc3RhY2tlZERpbUluZm8gPSBkaW1lbnNpb25JbmZvO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKHN0YWNrZWREaW1JbmZvICYmICFieUluZGV4ICYmICFzdGFja2VkQnlEaW1JbmZvKSB7XG4gICAgLy8gQ29tcGF0aWJsZSB3aXRoIHByZXZpb3VzIGRlc2lnbiwgdmFsdWUgYXhpcyAodGltZSBheGlzKSBvbmx5IHN0YWNrIGJ5IGluZGV4LlxuICAgIC8vIEl0IG1heSBtYWtlIHNlbnNlIGlmIHRoZSB1c2VyIHByb3ZpZGVzIGVsYWJvcmF0ZWx5IGNvbnN0cnVjdGVkIGRhdGEuXG4gICAgYnlJbmRleCA9IHRydWU7XG4gIH0gLy8gQWRkIHN0YWNrIGRpbWVuc2lvbiwgdGhleSBjYW4gYmUgYm90aCBjYWxjdWxhdGVkIGJ5IGNvb3JkaW5hdGUgc3lzdGVtIGluIGB1bmlvbkV4dGVudGAuXG4gIC8vIFRoYXQgcHV0IHN0YWNrIGxvZ2ljIGluIExpc3QgaXMgZm9yIHVzaW5nIGNvbnZlbmllbnRseSBpbiBlY2hhcnRzIGV4dGVuc2lvbnMsIGJ1dCBpdFxuICAvLyBtaWdodCBub3QgYmUgYSBnb29kIHdheS5cblxuXG4gIGlmIChzdGFja2VkRGltSW5mbykge1xuICAgIC8vIFVzZSBhIHdlaXJkIG5hbWUgdGhhdCBub3QgZHVwbGljYXRlZCB3aXRoIG90aGVyIG5hbWVzLlxuICAgIHN0YWNrUmVzdWx0RGltZW5zaW9uID0gJ19fXFwwZWNzdGFja3Jlc3VsdCc7XG4gICAgc3RhY2tlZE92ZXJEaW1lbnNpb24gPSAnX19cXDBlY3N0YWNrZWRvdmVyJzsgLy8gQ3JlYXRlIGludmVydGVkIGluZGV4IHRvIGZhc3QgcXVlcnkgaW5kZXggYnkgdmFsdWUuXG5cbiAgICBpZiAoc3RhY2tlZEJ5RGltSW5mbykge1xuICAgICAgc3RhY2tlZEJ5RGltSW5mby5jcmVhdGVJbnZlcnRlZEluZGljZXMgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBzdGFja2VkRGltQ29vcmREaW0gPSBzdGFja2VkRGltSW5mby5jb29yZERpbTtcbiAgICB2YXIgc3RhY2tlZERpbVR5cGUgPSBzdGFja2VkRGltSW5mby50eXBlO1xuICAgIHZhciBzdGFja2VkRGltQ29vcmRJbmRleCA9IDA7XG4gICAgZWFjaChkaW1lbnNpb25JbmZvTGlzdCwgZnVuY3Rpb24gKGRpbWVuc2lvbkluZm8pIHtcbiAgICAgIGlmIChkaW1lbnNpb25JbmZvLmNvb3JkRGltID09PSBzdGFja2VkRGltQ29vcmREaW0pIHtcbiAgICAgICAgc3RhY2tlZERpbUNvb3JkSW5kZXgrKztcbiAgICAgIH1cbiAgICB9KTtcbiAgICBkaW1lbnNpb25JbmZvTGlzdC5wdXNoKHtcbiAgICAgIG5hbWU6IHN0YWNrUmVzdWx0RGltZW5zaW9uLFxuICAgICAgY29vcmREaW06IHN0YWNrZWREaW1Db29yZERpbSxcbiAgICAgIGNvb3JkRGltSW5kZXg6IHN0YWNrZWREaW1Db29yZEluZGV4LFxuICAgICAgdHlwZTogc3RhY2tlZERpbVR5cGUsXG4gICAgICBpc0V4dHJhQ29vcmQ6IHRydWUsXG4gICAgICBpc0NhbGN1bGF0aW9uQ29vcmQ6IHRydWVcbiAgICB9KTtcbiAgICBzdGFja2VkRGltQ29vcmRJbmRleCsrO1xuICAgIGRpbWVuc2lvbkluZm9MaXN0LnB1c2goe1xuICAgICAgbmFtZTogc3RhY2tlZE92ZXJEaW1lbnNpb24sXG4gICAgICAvLyBUaGlzIGRpbWVuc2lvbiBjb250YWlucyBzdGFjayBiYXNlIChnZW5lcmFsbHksIDApLCBzbyBkbyBub3Qgc2V0IGl0IGFzXG4gICAgICAvLyBgc3RhY2tlZERpbUNvb3JkRGltYCB0byBhdm9pZCBleHRlbnQgY2FsY3VsYXRpb24sIGNvbnNpZGVyIGxvZyBzY2FsZS5cbiAgICAgIGNvb3JkRGltOiBzdGFja2VkT3ZlckRpbWVuc2lvbixcbiAgICAgIGNvb3JkRGltSW5kZXg6IHN0YWNrZWREaW1Db29yZEluZGV4LFxuICAgICAgdHlwZTogc3RhY2tlZERpbVR5cGUsXG4gICAgICBpc0V4dHJhQ29vcmQ6IHRydWUsXG4gICAgICBpc0NhbGN1bGF0aW9uQ29vcmQ6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3RhY2tlZERpbWVuc2lvbjogc3RhY2tlZERpbUluZm8gJiYgc3RhY2tlZERpbUluZm8ubmFtZSxcbiAgICBzdGFja2VkQnlEaW1lbnNpb246IHN0YWNrZWRCeURpbUluZm8gJiYgc3RhY2tlZEJ5RGltSW5mby5uYW1lLFxuICAgIGlzU3RhY2tlZEJ5SW5kZXg6IGJ5SW5kZXgsXG4gICAgc3RhY2tlZE92ZXJEaW1lbnNpb246IHN0YWNrZWRPdmVyRGltZW5zaW9uLFxuICAgIHN0YWNrUmVzdWx0RGltZW5zaW9uOiBzdGFja1Jlc3VsdERpbWVuc2lvblxuICB9O1xufVxuLyoqXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL2RhdGEvTGlzdH0gZGF0YVxuICogQHBhcmFtIHtzdHJpbmd9IHN0YWNrZWREaW1cbiAqL1xuXG5cbmZ1bmN0aW9uIGlzRGltZW5zaW9uU3RhY2tlZChkYXRhLCBzdGFja2VkRGltXG4vKiwgc3RhY2tlZEJ5RGltKi9cbikge1xuICAvLyBFYWNoIHNpbmdsZSBzZXJpZXMgb25seSBtYXBzIHRvIG9uZSBwYWlyIG9mIGF4aXMuIFNvIHdlIGRvIG5vdCBuZWVkIHRvXG4gIC8vIGNoZWNrIHN0YWNrQnlEaW0sIHdoYXRldmVyIHN0YWNrZWQgYnkgYSBkaW1lbnNpb24gb3Igc3RhY2tlZCBieSBpbmRleC5cbiAgcmV0dXJuICEhc3RhY2tlZERpbSAmJiBzdGFja2VkRGltID09PSBkYXRhLmdldENhbGN1bGF0aW9uSW5mbygnc3RhY2tlZERpbWVuc2lvbicpOyAvLyAmJiAoXG4gIC8vICAgICBzdGFja2VkQnlEaW0gIT0gbnVsbFxuICAvLyAgICAgICAgID8gc3RhY2tlZEJ5RGltID09PSBkYXRhLmdldENhbGN1bGF0aW9uSW5mbygnc3RhY2tlZEJ5RGltZW5zaW9uJylcbiAgLy8gICAgICAgICA6IGRhdGEuZ2V0Q2FsY3VsYXRpb25JbmZvKCdpc1N0YWNrZWRCeUluZGV4JylcbiAgLy8gKTtcbn1cbi8qKlxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9kYXRhL0xpc3R9IGRhdGFcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXREaW1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RhY2tlZEJ5RGltXSBJZiBub3QgaW5wdXQgdGhpcyBwYXJhbWV0ZXIsIGNoZWNrIHdoZXRoZXJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja2VkIGJ5IGluZGV4LlxuICogQHJldHVybiB7c3RyaW5nfSBkaW1lbnNpb25cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFN0YWNrZWREaW1lbnNpb24oZGF0YSwgdGFyZ2V0RGltKSB7XG4gIHJldHVybiBpc0RpbWVuc2lvblN0YWNrZWQoZGF0YSwgdGFyZ2V0RGltKSA/IGRhdGEuZ2V0Q2FsY3VsYXRpb25JbmZvKCdzdGFja1Jlc3VsdERpbWVuc2lvbicpIDogdGFyZ2V0RGltO1xufVxuXG5leHBvcnRzLmVuYWJsZURhdGFTdGFjayA9IGVuYWJsZURhdGFTdGFjaztcbmV4cG9ydHMuaXNEaW1lbnNpb25TdGFja2VkID0gaXNEaW1lbnNpb25TdGFja2VkO1xuZXhwb3J0cy5nZXRTdGFja2VkRGltZW5zaW9uID0gZ2V0U3RhY2tlZERpbWVuc2lvbjsiLCJ2YXIgX3V0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgZWFjaCA9IF91dGlsLmVhY2g7XG52YXIgY3JlYXRlSGFzaE1hcCA9IF91dGlsLmNyZWF0ZUhhc2hNYXA7XG52YXIgYXNzZXJ0ID0gX3V0aWwuYXNzZXJ0O1xuXG52YXIgX2NvbmZpZyA9IHJlcXVpcmUoXCIuLi8uLi9jb25maWdcIik7XG5cbnZhciBfX0RFVl9fID0gX2NvbmZpZy5fX0RFVl9fO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgT1RIRVJfRElNRU5TSU9OUyA9IGNyZWF0ZUhhc2hNYXAoWyd0b29sdGlwJywgJ2xhYmVsJywgJ2l0ZW1OYW1lJywgJ2l0ZW1JZCcsICdzZXJpZXNOYW1lJ10pO1xuXG5mdW5jdGlvbiBzdW1tYXJpemVEaW1lbnNpb25zKGRhdGEpIHtcbiAgdmFyIHN1bW1hcnkgPSB7fTtcbiAgdmFyIGVuY29kZSA9IHN1bW1hcnkuZW5jb2RlID0ge307XG4gIHZhciBub3RFeHRyYUNvb3JkRGltTWFwID0gY3JlYXRlSGFzaE1hcCgpO1xuICB2YXIgZGVmYXVsdGVkTGFiZWwgPSBbXTtcbiAgdmFyIGRlZmF1bHRlZFRvb2x0aXAgPSBbXTtcbiAgZWFjaChkYXRhLmRpbWVuc2lvbnMsIGZ1bmN0aW9uIChkaW1OYW1lKSB7XG4gICAgdmFyIGRpbUl0ZW0gPSBkYXRhLmdldERpbWVuc2lvbkluZm8oZGltTmFtZSk7XG4gICAgdmFyIGNvb3JkRGltID0gZGltSXRlbS5jb29yZERpbTtcblxuICAgIGlmIChjb29yZERpbSkge1xuICAgICAgdmFyIGNvb3JkRGltQXJyID0gZW5jb2RlW2Nvb3JkRGltXTtcblxuICAgICAgaWYgKCFlbmNvZGUuaGFzT3duUHJvcGVydHkoY29vcmREaW0pKSB7XG4gICAgICAgIGNvb3JkRGltQXJyID0gZW5jb2RlW2Nvb3JkRGltXSA9IFtdO1xuICAgICAgfVxuXG4gICAgICBjb29yZERpbUFycltkaW1JdGVtLmNvb3JkRGltSW5kZXhdID0gZGltTmFtZTtcblxuICAgICAgaWYgKCFkaW1JdGVtLmlzRXh0cmFDb29yZCkge1xuICAgICAgICBub3RFeHRyYUNvb3JkRGltTWFwLnNldChjb29yZERpbSwgMSk7IC8vIFVzZSB0aGUgbGFzdCBjb29yZCBkaW0gKGFuZCBsYWJlbCBmcmllbmRseSkgYXMgZGVmYXVsdCBsYWJlbCxcbiAgICAgICAgLy8gYmVjYXVzZSB3aGVuIGRhdGFzZXQgaXMgdXNlZCwgaXQgaXMgaGFyZCB0byBndWVzcyB3aGljaCBkaW1lbnNpb25cbiAgICAgICAgLy8gY2FuIGJlIHZhbHVlIGRpbWVuc2lvbi4gSWYgYm90aCBzaG93IHgsIHkgb24gbGFiZWwgaXMgbm90IGxvb2sgZ29vZCxcbiAgICAgICAgLy8gYW5kIGNvbnZlbnRpb25hbGx5IHkgYXhpcyBpcyBmb2N1c2VkIG1vcmUuXG5cbiAgICAgICAgaWYgKG1heUxhYmVsRGltVHlwZShkaW1JdGVtLnR5cGUpKSB7XG4gICAgICAgICAgZGVmYXVsdGVkTGFiZWxbMF0gPSBkaW1OYW1lO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChkaW1JdGVtLmRlZmF1bHRUb29sdGlwKSB7XG4gICAgICAgIGRlZmF1bHRlZFRvb2x0aXAucHVzaChkaW1OYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBPVEhFUl9ESU1FTlNJT05TLmVhY2goZnVuY3Rpb24gKHYsIG90aGVyRGltKSB7XG4gICAgICB2YXIgb3RoZXJEaW1BcnIgPSBlbmNvZGVbb3RoZXJEaW1dO1xuXG4gICAgICBpZiAoIWVuY29kZS5oYXNPd25Qcm9wZXJ0eShvdGhlckRpbSkpIHtcbiAgICAgICAgb3RoZXJEaW1BcnIgPSBlbmNvZGVbb3RoZXJEaW1dID0gW107XG4gICAgICB9XG5cbiAgICAgIHZhciBkaW1JbmRleCA9IGRpbUl0ZW0ub3RoZXJEaW1zW290aGVyRGltXTtcblxuICAgICAgaWYgKGRpbUluZGV4ICE9IG51bGwgJiYgZGltSW5kZXggIT09IGZhbHNlKSB7XG4gICAgICAgIG90aGVyRGltQXJyW2RpbUluZGV4XSA9IGRpbUl0ZW0ubmFtZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHZhciBkYXRhRGltc09uQ29vcmQgPSBbXTtcbiAgdmFyIGVuY29kZUZpcnN0RGltTm90RXh0cmEgPSB7fTtcbiAgbm90RXh0cmFDb29yZERpbU1hcC5lYWNoKGZ1bmN0aW9uICh2LCBjb29yZERpbSkge1xuICAgIHZhciBkaW1BcnIgPSBlbmNvZGVbY29vcmREaW1dOyAvLyA/Pz8gRklYTUUgZXh0cmEgY29vcmQgc2hvdWxkIG5vdCBiZSBzZXQgaW4gZGF0YURpbXNPbkNvb3JkLlxuICAgIC8vIEJ1dCBzaG91bGQgZml4IHRoZSBjYXNlIHRoYXQgcmFkYXIgYXhlczogc2ltcGxpZnkgdGhlIGxvZ2ljXG4gICAgLy8gb2YgYGNvbXBsZXRlRGltZW5zaW9uYCwgcmVtb3ZlIGBleHRyYVByZWZpeGAuXG5cbiAgICBlbmNvZGVGaXJzdERpbU5vdEV4dHJhW2Nvb3JkRGltXSA9IGRpbUFyclswXTsgLy8gTm90IG5lY2Vzc2FyeSB0byByZW1vdmUgZHVwbGljYXRlLCBiZWNhdXNlIGEgZGF0YVxuICAgIC8vIGRpbSBjYW5vdCBvbiBtb3JlIHRoYW4gb25lIGNvb3JkRGltLlxuXG4gICAgZGF0YURpbXNPbkNvb3JkID0gZGF0YURpbXNPbkNvb3JkLmNvbmNhdChkaW1BcnIpO1xuICB9KTtcbiAgc3VtbWFyeS5kYXRhRGltc09uQ29vcmQgPSBkYXRhRGltc09uQ29vcmQ7XG4gIHN1bW1hcnkuZW5jb2RlRmlyc3REaW1Ob3RFeHRyYSA9IGVuY29kZUZpcnN0RGltTm90RXh0cmE7XG4gIHZhciBlbmNvZGVMYWJlbCA9IGVuY29kZS5sYWJlbDsgLy8gRklYTUUgYGVuY29kZS5sYWJlbGAgaXMgbm90IHJlY29tbWFuZGVkLCBiZWNhdXNlIGZvcm1hdHRlciBjYW4gbm90IGJlIHNldFxuICAvLyBpbiB0aGlzIHdheS4gVXNlIGxhYmVsLmZvcm1hdHRlciBpbnN0ZWFkLiBNYXkgYmUgcmVtb3ZlIHRoaXMgYXBwcm9hY2ggc29tZWRheS5cblxuICBpZiAoZW5jb2RlTGFiZWwgJiYgZW5jb2RlTGFiZWwubGVuZ3RoKSB7XG4gICAgZGVmYXVsdGVkTGFiZWwgPSBlbmNvZGVMYWJlbC5zbGljZSgpO1xuICB9XG5cbiAgdmFyIGVuY29kZVRvb2x0aXAgPSBlbmNvZGUudG9vbHRpcDtcblxuICBpZiAoZW5jb2RlVG9vbHRpcCAmJiBlbmNvZGVUb29sdGlwLmxlbmd0aCkge1xuICAgIGRlZmF1bHRlZFRvb2x0aXAgPSBlbmNvZGVUb29sdGlwLnNsaWNlKCk7XG4gIH0gZWxzZSBpZiAoIWRlZmF1bHRlZFRvb2x0aXAubGVuZ3RoKSB7XG4gICAgZGVmYXVsdGVkVG9vbHRpcCA9IGRlZmF1bHRlZExhYmVsLnNsaWNlKCk7XG4gIH1cblxuICBlbmNvZGUuZGVmYXVsdGVkTGFiZWwgPSBkZWZhdWx0ZWRMYWJlbDtcbiAgZW5jb2RlLmRlZmF1bHRlZFRvb2x0aXAgPSBkZWZhdWx0ZWRUb29sdGlwO1xuICByZXR1cm4gc3VtbWFyeTtcbn1cblxuZnVuY3Rpb24gZ2V0RGltZW5zaW9uVHlwZUJ5QXhpcyhheGlzVHlwZSkge1xuICByZXR1cm4gYXhpc1R5cGUgPT09ICdjYXRlZ29yeScgPyAnb3JkaW5hbCcgOiBheGlzVHlwZSA9PT0gJ3RpbWUnID8gJ3RpbWUnIDogJ2Zsb2F0Jztcbn1cblxuZnVuY3Rpb24gbWF5TGFiZWxEaW1UeXBlKGRpbVR5cGUpIHtcbiAgLy8gSW4gbW9zdCBjYXNlcywgb3JkaW5hbCBhbmQgdGltZSBkbyBub3Qgc3VpdGFibGUgZm9yIGxhYmVsLlxuICAvLyBPcmRpbmFsIGluZm8gY2FuIGJlIGRpc3BsYXllZCBvbiBheGlzLiBUaW1lIGlzIHRvbyBsb25nLlxuICByZXR1cm4gIShkaW1UeXBlID09PSAnb3JkaW5hbCcgfHwgZGltVHlwZSA9PT0gJ3RpbWUnKTtcbn0gLy8gZnVuY3Rpb24gZmluZFRoZUxhc3REaW1NYXlMYWJlbChkYXRhKSB7XG4vLyAgICAgLy8gR2V0IGxhc3QgdmFsdWUgZGltXG4vLyAgICAgdmFyIGRpbWVuc2lvbnMgPSBkYXRhLmRpbWVuc2lvbnMuc2xpY2UoKTtcbi8vICAgICB2YXIgdmFsdWVUeXBlO1xuLy8gICAgIHZhciB2YWx1ZURpbTtcbi8vICAgICB3aGlsZSAoZGltZW5zaW9ucy5sZW5ndGggJiYgKFxuLy8gICAgICAgICB2YWx1ZURpbSA9IGRpbWVuc2lvbnMucG9wKCksXG4vLyAgICAgICAgIHZhbHVlVHlwZSA9IGRhdGEuZ2V0RGltZW5zaW9uSW5mbyh2YWx1ZURpbSkudHlwZSxcbi8vICAgICAgICAgdmFsdWVUeXBlID09PSAnb3JkaW5hbCcgfHwgdmFsdWVUeXBlID09PSAndGltZSdcbi8vICAgICApKSB7fSAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbi8vICAgICByZXR1cm4gdmFsdWVEaW07XG4vLyB9XG5cblxuZXhwb3J0cy5PVEhFUl9ESU1FTlNJT05TID0gT1RIRVJfRElNRU5TSU9OUztcbmV4cG9ydHMuc3VtbWFyaXplRGltZW5zaW9ucyA9IHN1bW1hcml6ZURpbWVuc2lvbnM7XG5leHBvcnRzLmdldERpbWVuc2lvblR5cGVCeUF4aXMgPSBnZXREaW1lbnNpb25UeXBlQnlBeGlzOyIsInZhciBfY29uZmlnID0gcmVxdWlyZShcIi4uLy4uL2NvbmZpZ1wiKTtcblxudmFyIF9fREVWX18gPSBfY29uZmlnLl9fREVWX187XG5cbnZhciBfbW9kZWwgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9tb2RlbFwiKTtcblxudmFyIG1ha2VJbm5lciA9IF9tb2RlbC5tYWtlSW5uZXI7XG52YXIgZ2V0RGF0YUl0ZW1WYWx1ZSA9IF9tb2RlbC5nZXREYXRhSXRlbVZhbHVlO1xuXG52YXIgX3JlZmVySGVscGVyID0gcmVxdWlyZShcIi4uLy4uL21vZGVsL3JlZmVySGVscGVyXCIpO1xuXG52YXIgZ2V0Q29vcmRTeXNEZWZpbmVCeVNlcmllcyA9IF9yZWZlckhlbHBlci5nZXRDb29yZFN5c0RlZmluZUJ5U2VyaWVzO1xuXG52YXIgX3V0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgY3JlYXRlSGFzaE1hcCA9IF91dGlsLmNyZWF0ZUhhc2hNYXA7XG52YXIgZWFjaCA9IF91dGlsLmVhY2g7XG52YXIgbWFwID0gX3V0aWwubWFwO1xudmFyIGlzQXJyYXkgPSBfdXRpbC5pc0FycmF5O1xudmFyIGlzU3RyaW5nID0gX3V0aWwuaXNTdHJpbmc7XG52YXIgaXNPYmplY3QgPSBfdXRpbC5pc09iamVjdDtcbnZhciBpc1R5cGVkQXJyYXkgPSBfdXRpbC5pc1R5cGVkQXJyYXk7XG52YXIgaXNBcnJheUxpa2UgPSBfdXRpbC5pc0FycmF5TGlrZTtcbnZhciBleHRlbmQgPSBfdXRpbC5leHRlbmQ7XG52YXIgYXNzZXJ0ID0gX3V0aWwuYXNzZXJ0O1xuXG52YXIgU291cmNlID0gcmVxdWlyZShcIi4uL1NvdXJjZVwiKTtcblxudmFyIF9zb3VyY2VUeXBlID0gcmVxdWlyZShcIi4vc291cmNlVHlwZVwiKTtcblxudmFyIFNPVVJDRV9GT1JNQVRfT1JJR0lOQUwgPSBfc291cmNlVHlwZS5TT1VSQ0VfRk9STUFUX09SSUdJTkFMO1xudmFyIFNPVVJDRV9GT1JNQVRfQVJSQVlfUk9XUyA9IF9zb3VyY2VUeXBlLlNPVVJDRV9GT1JNQVRfQVJSQVlfUk9XUztcbnZhciBTT1VSQ0VfRk9STUFUX09CSkVDVF9ST1dTID0gX3NvdXJjZVR5cGUuU09VUkNFX0ZPUk1BVF9PQkpFQ1RfUk9XUztcbnZhciBTT1VSQ0VfRk9STUFUX0tFWUVEX0NPTFVNTlMgPSBfc291cmNlVHlwZS5TT1VSQ0VfRk9STUFUX0tFWUVEX0NPTFVNTlM7XG52YXIgU09VUkNFX0ZPUk1BVF9VTktOT1dOID0gX3NvdXJjZVR5cGUuU09VUkNFX0ZPUk1BVF9VTktOT1dOO1xudmFyIFNPVVJDRV9GT1JNQVRfVFlQRURfQVJSQVkgPSBfc291cmNlVHlwZS5TT1VSQ0VfRk9STUFUX1RZUEVEX0FSUkFZO1xudmFyIFNFUklFU19MQVlPVVRfQllfUk9XID0gX3NvdXJjZVR5cGUuU0VSSUVTX0xBWU9VVF9CWV9ST1c7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbnZhciBpbm5lciA9IG1ha2VJbm5lcigpO1xuLyoqXG4gKiBAc2VlIHttb2R1bGU6ZWNoYXJ0cy9kYXRhL1NvdXJjZX1cbiAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvY29tcG9uZW50L2RhdGFzZXQvRGF0YXNldE1vZGVsfSBkYXRhc2V0TW9kZWxcbiAqIEByZXR1cm4ge3N0cmluZ30gc291cmNlRm9ybWF0XG4gKi9cblxuZnVuY3Rpb24gZGV0ZWN0U291cmNlRm9ybWF0KGRhdGFzZXRNb2RlbCkge1xuICB2YXIgZGF0YSA9IGRhdGFzZXRNb2RlbC5vcHRpb24uc291cmNlO1xuICB2YXIgc291cmNlRm9ybWF0ID0gU09VUkNFX0ZPUk1BVF9VTktOT1dOO1xuXG4gIGlmIChpc1R5cGVkQXJyYXkoZGF0YSkpIHtcbiAgICBzb3VyY2VGb3JtYXQgPSBTT1VSQ0VfRk9STUFUX1RZUEVEX0FSUkFZO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICAvLyBGSVhNRSBXaGV0aGVyIHRvbGVyYXRlIG51bGwgaW4gdG9wIGxldmVsIGFycmF5P1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBkYXRhLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IGRhdGFbaV07XG5cbiAgICAgIGlmIChpdGVtID09IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoaXRlbSkpIHtcbiAgICAgICAgc291cmNlRm9ybWF0ID0gU09VUkNFX0ZPUk1BVF9BUlJBWV9ST1dTO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoaXRlbSkpIHtcbiAgICAgICAgc291cmNlRm9ybWF0ID0gU09VUkNFX0ZPUk1BVF9PQkpFQ1RfUk9XUztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGRhdGEpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KGtleSkgJiYgaXNBcnJheUxpa2UoZGF0YVtrZXldKSkge1xuICAgICAgICBzb3VyY2VGb3JtYXQgPSBTT1VSQ0VfRk9STUFUX0tFWUVEX0NPTFVNTlM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChkYXRhICE9IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZGF0YScpO1xuICB9XG5cbiAgaW5uZXIoZGF0YXNldE1vZGVsKS5zb3VyY2VGb3JtYXQgPSBzb3VyY2VGb3JtYXQ7XG59XG4vKipcbiAqIFtTY2VuYXJpb3NdOlxuICogKDEpIFByb3ZpZGUgc291cmNlIGRhdGEgZGlyZWN0bHk6XG4gKiAgICAgc2VyaWVzOiB7XG4gKiAgICAgICAgIGVuY29kZTogey4uLn0sXG4gKiAgICAgICAgIGRpbWVuc2lvbnM6IFsuLi5dXG4gKiAgICAgICAgIHNlcmllc0xheW91dEJ5OiAncm93JyxcbiAqICAgICAgICAgZGF0YTogW1suLi5dXVxuICogICAgIH1cbiAqICgyKSBSZWZlciB0byBkYXRhc2V0TW9kZWwuXG4gKiAgICAgc2VyaWVzOiBbe1xuICogICAgICAgICBlbmNvZGU6IHsuLi59XG4gKiAgICAgICAgIC8vIElnbm9yZSBkYXRhc2V0SW5kZXggbWVhbnMgYGRhdGFzZXRJbmRleDogMGBcbiAqICAgICAgICAgLy8gYW5kIHRoZSBkaW1lbnNpb25zIGRlZmluYXRpb24gaW4gZGF0YXNldCBpcyB1c2VkXG4gKiAgICAgfSwge1xuICogICAgICAgICBlbmNvZGU6IHsuLi59LFxuICogICAgICAgICBzZXJpZXNMYXlvdXRCeTogJ2NvbHVtbicsXG4gKiAgICAgICAgIGRhdGFzZXRJbmRleDogMVxuICogICAgIH1dXG4gKlxuICogR2V0IGRhdGEgZnJvbSBzZXJpZXMgaXRzZWxmIG9yIGRhdHNldC5cbiAqIEByZXR1cm4ge21vZHVsZTplY2hhcnRzL2RhdGEvU291cmNlfSBzb3VyY2VcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFNvdXJjZShzZXJpZXNNb2RlbCkge1xuICByZXR1cm4gaW5uZXIoc2VyaWVzTW9kZWwpLnNvdXJjZTtcbn1cbi8qKlxuICogTVVTVCBiZSBjYWxsZWQgYmVmb3JlIG1lcmdlT3B0aW9uIG9mIGFsbCBzZXJpZXMuXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL21vZGVsL0dsb2JhbH0gZWNNb2RlbFxuICovXG5cblxuZnVuY3Rpb24gcmVzZXRTb3VyY2VEZWZhdWx0ZXIoZWNNb2RlbCkge1xuICAvLyBgZGF0YXNldE1hcGAgaXMgdXNlZCB0byBtYWtlIGRlZmF1bHQgZW5jb2RlLlxuICBpbm5lcihlY01vZGVsKS5kYXRhc2V0TWFwID0gY3JlYXRlSGFzaE1hcCgpO1xufVxuLyoqXG4gKiBbQ2F1dGlvbl06XG4gKiBNVVNUIGJlIGNhbGxlZCBhZnRlciBzZXJpZXMgb3B0aW9uIG1lcmdlZCBhbmRcbiAqIGJlZm9yZSBcInNlcmllcy5nZXRJbml0YWlsRGF0YSgpXCIgY2FsbGVkLlxuICpcbiAqIFtUaGUgcnVsZSBvZiBtYWtpbmcgZGVmYXVsdCBlbmNvZGVdOlxuICogQ2F0ZWdvcnkgYXhpcyAoaWYgZXhpc3RzKSBhbHdheSBtYXAgdG8gdGhlIGZpcnN0IGRpbWVuc2lvbi5cbiAqIEVhY2ggb3RoZXIgYXhpcyBvY2N1cGllcyBhIHN1YnNlcXVlbnQgZGltZW5zaW9uLlxuICpcbiAqIFtXaHkgbWFrZSBkZWZhdWx0IGVuY29kZV06XG4gKiBTaW1wbGlmeSB0aGUgdHlwaW5nIG9mIGVuY29kZSBpbiBvcHRpb24sIGF2b2lkaW5nIHRoZSBjYXNlIGxpa2UgdGhhdDpcbiAqIHNlcmllczogW3tlbmNvZGU6IHt4OiAwLCB5OiAxfX0sIHtlbmNvZGU6IHt4OiAwLCB5OiAyfX0sIHtlbmNvZGU6IHt4OiAwLCB5OiAzfX1dLFxuICogd2hlcmUgdGhlIFwieVwiIGhhdmUgdG8gYmUgbWFudWFsbHkgdHlwZWQgYXMgXCIxLCAyLCAzLCAuLi5cIi5cbiAqXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL21vZGVsL1Nlcmllc30gc2VyaWVzTW9kZWxcbiAqL1xuXG5cbmZ1bmN0aW9uIHByZXBhcmVTb3VyY2Uoc2VyaWVzTW9kZWwpIHtcbiAgdmFyIHNlcmllc09wdGlvbiA9IHNlcmllc01vZGVsLm9wdGlvbjtcbiAgdmFyIGRhdGEgPSBzZXJpZXNPcHRpb24uZGF0YTtcbiAgdmFyIHNvdXJjZUZvcm1hdCA9IGlzVHlwZWRBcnJheShkYXRhKSA/IFNPVVJDRV9GT1JNQVRfVFlQRURfQVJSQVkgOiBTT1VSQ0VfRk9STUFUX09SSUdJTkFMO1xuICB2YXIgZnJvbURhdGFzZXQgPSBmYWxzZTtcbiAgdmFyIHNlcmllc0xheW91dEJ5ID0gc2VyaWVzT3B0aW9uLnNlcmllc0xheW91dEJ5O1xuICB2YXIgc291cmNlSGVhZGVyID0gc2VyaWVzT3B0aW9uLnNvdXJjZUhlYWRlcjtcbiAgdmFyIGRpbWVuc2lvbnNEZWZpbmUgPSBzZXJpZXNPcHRpb24uZGltZW5zaW9ucztcbiAgdmFyIGRhdGFzZXRNb2RlbCA9IGdldERhdGFzZXRNb2RlbChzZXJpZXNNb2RlbCk7XG5cbiAgaWYgKGRhdGFzZXRNb2RlbCkge1xuICAgIHZhciBkYXRhc2V0T3B0aW9uID0gZGF0YXNldE1vZGVsLm9wdGlvbjtcbiAgICBkYXRhID0gZGF0YXNldE9wdGlvbi5zb3VyY2U7XG4gICAgc291cmNlRm9ybWF0ID0gaW5uZXIoZGF0YXNldE1vZGVsKS5zb3VyY2VGb3JtYXQ7XG4gICAgZnJvbURhdGFzZXQgPSB0cnVlOyAvLyBUaGVzZSBzZXR0aW5ncyBmcm9tIHNlcmllcyBoYXMgaGlnaGVyIHByaW9yaXR5LlxuXG4gICAgc2VyaWVzTGF5b3V0QnkgPSBzZXJpZXNMYXlvdXRCeSB8fCBkYXRhc2V0T3B0aW9uLnNlcmllc0xheW91dEJ5O1xuICAgIHNvdXJjZUhlYWRlciA9PSBudWxsICYmIChzb3VyY2VIZWFkZXIgPSBkYXRhc2V0T3B0aW9uLnNvdXJjZUhlYWRlcik7XG4gICAgZGltZW5zaW9uc0RlZmluZSA9IGRpbWVuc2lvbnNEZWZpbmUgfHwgZGF0YXNldE9wdGlvbi5kaW1lbnNpb25zO1xuICB9XG5cbiAgdmFyIGNvbXBsZXRlUmVzdWx0ID0gY29tcGxldGVCeVNvdXJjZURhdGEoZGF0YSwgc291cmNlRm9ybWF0LCBzZXJpZXNMYXlvdXRCeSwgc291cmNlSGVhZGVyLCBkaW1lbnNpb25zRGVmaW5lKTsgLy8gTm90ZTogZGF0YXNldCBvcHRpb24gZG9lcyBub3QgaGF2ZSBgZW5jb2RlYC5cblxuICB2YXIgZW5jb2RlRGVmaW5lID0gc2VyaWVzT3B0aW9uLmVuY29kZTtcblxuICBpZiAoIWVuY29kZURlZmluZSAmJiBkYXRhc2V0TW9kZWwpIHtcbiAgICBlbmNvZGVEZWZpbmUgPSBtYWtlRGVmYXVsdEVuY29kZShzZXJpZXNNb2RlbCwgZGF0YXNldE1vZGVsLCBkYXRhLCBzb3VyY2VGb3JtYXQsIHNlcmllc0xheW91dEJ5LCBjb21wbGV0ZVJlc3VsdCk7XG4gIH1cblxuICBpbm5lcihzZXJpZXNNb2RlbCkuc291cmNlID0gbmV3IFNvdXJjZSh7XG4gICAgZGF0YTogZGF0YSxcbiAgICBmcm9tRGF0YXNldDogZnJvbURhdGFzZXQsXG4gICAgc2VyaWVzTGF5b3V0Qnk6IHNlcmllc0xheW91dEJ5LFxuICAgIHNvdXJjZUZvcm1hdDogc291cmNlRm9ybWF0LFxuICAgIGRpbWVuc2lvbnNEZWZpbmU6IGNvbXBsZXRlUmVzdWx0LmRpbWVuc2lvbnNEZWZpbmUsXG4gICAgc3RhcnRJbmRleDogY29tcGxldGVSZXN1bHQuc3RhcnRJbmRleCxcbiAgICBkaW1lbnNpb25zRGV0ZWN0Q291bnQ6IGNvbXBsZXRlUmVzdWx0LmRpbWVuc2lvbnNEZXRlY3RDb3VudCxcbiAgICBlbmNvZGVEZWZpbmU6IGVuY29kZURlZmluZVxuICB9KTtcbn0gLy8gcmV0dXJuIHtzdGFydEluZGV4LCBkaW1lbnNpb25zRGVmaW5lLCBkaW1lbnNpb25zQ291bnR9XG5cblxuZnVuY3Rpb24gY29tcGxldGVCeVNvdXJjZURhdGEoZGF0YSwgc291cmNlRm9ybWF0LCBzZXJpZXNMYXlvdXRCeSwgc291cmNlSGVhZGVyLCBkaW1lbnNpb25zRGVmaW5lKSB7XG4gIGlmICghZGF0YSkge1xuICAgIHJldHVybiB7XG4gICAgICBkaW1lbnNpb25zRGVmaW5lOiBub3JtYWxpemVEaW1lbnNpb25zRGVmaW5lKGRpbWVuc2lvbnNEZWZpbmUpXG4gICAgfTtcbiAgfVxuXG4gIHZhciBkaW1lbnNpb25zRGV0ZWN0Q291bnQ7XG4gIHZhciBzdGFydEluZGV4O1xuICB2YXIgZmluZFBvdGVudGlhbE5hbWU7XG5cbiAgaWYgKHNvdXJjZUZvcm1hdCA9PT0gU09VUkNFX0ZPUk1BVF9BUlJBWV9ST1dTKSB7XG4gICAgLy8gUnVsZTogTW9zdCBvZiB0aGUgZmlyc3QgbGluZSBhcmUgc3RyaW5nOiBpdCBpcyBoZWFkZXIuXG4gICAgLy8gQ2F1dGlvbjogY29uc2lkZXIgYSBsaW5lIHdpdGggNSBzdHJpbmcgYW5kIDEgbnVtYmVyLFxuICAgIC8vIGl0IHN0aWxsIGNhbiBub3QgYmUgc3VyZSBpdCBpcyBhIGhlYWQsIGJlY2F1c2UgdGhlXG4gICAgLy8gNSBzdHJpbmcgbWF5IGJlIDUgdmFsdWVzIG9mIGNhdGVnb3J5IGNvbHVtbnMuXG4gICAgaWYgKHNvdXJjZUhlYWRlciA9PT0gJ2F1dG8nIHx8IHNvdXJjZUhlYWRlciA9PSBudWxsKSB7XG4gICAgICBhcnJheVJvd3NUcmF2ZWxGaXJzdChmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIC8vICctJyBpcyByZWdhcmRlZCBhcyBudWxsL3VuZGVmaW5lZC5cbiAgICAgICAgaWYgKHZhbCAhPSBudWxsICYmIHZhbCAhPT0gJy0nKSB7XG4gICAgICAgICAgaWYgKGlzU3RyaW5nKHZhbCkpIHtcbiAgICAgICAgICAgIHN0YXJ0SW5kZXggPT0gbnVsbCAmJiAoc3RhcnRJbmRleCA9IDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGFydEluZGV4ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gMTAgaXMgYW4gZXhwZXJpZW5jZSBudW1iZXIsIGF2b2lkIGxvbmcgbG9vcC5cblxuICAgICAgfSwgc2VyaWVzTGF5b3V0QnksIGRhdGEsIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRJbmRleCA9IHNvdXJjZUhlYWRlciA/IDEgOiAwO1xuICAgIH1cblxuICAgIGlmICghZGltZW5zaW9uc0RlZmluZSAmJiBzdGFydEluZGV4ID09PSAxKSB7XG4gICAgICBkaW1lbnNpb25zRGVmaW5lID0gW107XG4gICAgICBhcnJheVJvd3NUcmF2ZWxGaXJzdChmdW5jdGlvbiAodmFsLCBpbmRleCkge1xuICAgICAgICBkaW1lbnNpb25zRGVmaW5lW2luZGV4XSA9IHZhbCAhPSBudWxsID8gdmFsIDogJyc7XG4gICAgICB9LCBzZXJpZXNMYXlvdXRCeSwgZGF0YSk7XG4gICAgfVxuXG4gICAgZGltZW5zaW9uc0RldGVjdENvdW50ID0gZGltZW5zaW9uc0RlZmluZSA/IGRpbWVuc2lvbnNEZWZpbmUubGVuZ3RoIDogc2VyaWVzTGF5b3V0QnkgPT09IFNFUklFU19MQVlPVVRfQllfUk9XID8gZGF0YS5sZW5ndGggOiBkYXRhWzBdID8gZGF0YVswXS5sZW5ndGggOiBudWxsO1xuICB9IGVsc2UgaWYgKHNvdXJjZUZvcm1hdCA9PT0gU09VUkNFX0ZPUk1BVF9PQkpFQ1RfUk9XUykge1xuICAgIGlmICghZGltZW5zaW9uc0RlZmluZSkge1xuICAgICAgZGltZW5zaW9uc0RlZmluZSA9IG9iamVjdFJvd3NDb2xsZWN0RGltZW5zaW9ucyhkYXRhKTtcbiAgICAgIGZpbmRQb3RlbnRpYWxOYW1lID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoc291cmNlRm9ybWF0ID09PSBTT1VSQ0VfRk9STUFUX0tFWUVEX0NPTFVNTlMpIHtcbiAgICBpZiAoIWRpbWVuc2lvbnNEZWZpbmUpIHtcbiAgICAgIGRpbWVuc2lvbnNEZWZpbmUgPSBbXTtcbiAgICAgIGZpbmRQb3RlbnRpYWxOYW1lID0gdHJ1ZTtcbiAgICAgIGVhY2goZGF0YSwgZnVuY3Rpb24gKGNvbEFyciwga2V5KSB7XG4gICAgICAgIGRpbWVuc2lvbnNEZWZpbmUucHVzaChrZXkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHNvdXJjZUZvcm1hdCA9PT0gU09VUkNFX0ZPUk1BVF9PUklHSU5BTCkge1xuICAgIHZhciB2YWx1ZTAgPSBnZXREYXRhSXRlbVZhbHVlKGRhdGFbMF0pO1xuICAgIGRpbWVuc2lvbnNEZXRlY3RDb3VudCA9IGlzQXJyYXkodmFsdWUwKSAmJiB2YWx1ZTAubGVuZ3RoIHx8IDE7XG4gIH0gZWxzZSBpZiAoc291cmNlRm9ybWF0ID09PSBTT1VSQ0VfRk9STUFUX1RZUEVEX0FSUkFZKSB7fVxuXG4gIHZhciBwb3RlbnRpYWxOYW1lRGltSW5kZXg7XG5cbiAgaWYgKGZpbmRQb3RlbnRpYWxOYW1lKSB7XG4gICAgZWFjaChkaW1lbnNpb25zRGVmaW5lLCBmdW5jdGlvbiAoZGltLCBpZHgpIHtcbiAgICAgIGlmICgoaXNPYmplY3QoZGltKSA/IGRpbS5uYW1lIDogZGltKSA9PT0gJ25hbWUnKSB7XG4gICAgICAgIHBvdGVudGlhbE5hbWVEaW1JbmRleCA9IGlkeDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3RhcnRJbmRleDogc3RhcnRJbmRleCxcbiAgICBkaW1lbnNpb25zRGVmaW5lOiBub3JtYWxpemVEaW1lbnNpb25zRGVmaW5lKGRpbWVuc2lvbnNEZWZpbmUpLFxuICAgIGRpbWVuc2lvbnNEZXRlY3RDb3VudDogZGltZW5zaW9uc0RldGVjdENvdW50LFxuICAgIHBvdGVudGlhbE5hbWVEaW1JbmRleDogcG90ZW50aWFsTmFtZURpbUluZGV4IC8vIFRPRE86IHBvdGVudGlhbElkRGltSWR4XG5cbiAgfTtcbn0gLy8gQ29uc2lkZXIgZGltZW5zaW9ucyBkZWZpbmVkIGxpa2UgWydBJywgJ3ByaWNlJywgJ0InLCAncHJpY2UnLCAnQycsICdwcmljZSddLFxuLy8gd2hpY2ggaXMgcmVhc29uYWJsZS4gQnV0IGRpbWVuc2lvbiBuYW1lIGlzIGR1cGxpY2F0ZWQuXG4vLyBSZXR1cm5zIHVuZGVmaW5lZCBvciBhbiBhcnJheSBjb250YWlucyBvbmx5IG9iamVjdCB3aXRob3V0IG51bGwvdW5kZWZpZW5kIG9yIHN0cmluZy5cblxuXG5mdW5jdGlvbiBub3JtYWxpemVEaW1lbnNpb25zRGVmaW5lKGRpbWVuc2lvbnNEZWZpbmUpIHtcbiAgaWYgKCFkaW1lbnNpb25zRGVmaW5lKSB7XG4gICAgLy8gVGhlIG1lYW5pbmcgb2YgbnVsbC91bmRlZmluZWQgaXMgZGlmZmVyZW50IGZyb20gZW1wdHkgYXJyYXkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG5hbWVNYXAgPSBjcmVhdGVIYXNoTWFwKCk7XG4gIHJldHVybiBtYXAoZGltZW5zaW9uc0RlZmluZSwgZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgaXRlbSA9IGV4dGVuZCh7fSwgaXNPYmplY3QoaXRlbSkgPyBpdGVtIDoge1xuICAgICAgbmFtZTogaXRlbVxuICAgIH0pOyAvLyBVc2VyIGNhbiBzZXQgbnVsbCBpbiBkaW1lbnNpb25zLlxuICAgIC8vIFdlIGRvbnQgYXV0byBzcGVjaWZ5IG5hbWUsIG90aGV3aXNlIGEgZ2l2ZW4gbmFtZSBtYXlcbiAgICAvLyBjYXVzZSBpdCBiZSByZWZlcmVkIHVuZXhwZWN0ZWRseS5cblxuICAgIGlmIChpdGVtLm5hbWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSAvLyBBbHNvIGNvbnNpZGVyIG51bWJlciBmb3JtIGxpa2UgMjAxMi5cblxuXG4gICAgaXRlbS5uYW1lICs9ICcnOyAvLyBVc2VyIG1heSBhbHNvIHNwZWNpZnkgZGlzcGxheU5hbWUuXG4gICAgLy8gZGlzcGxheU5hbWUgd2lsbCBhbHdheXMgZXhpc3RzIGV4Y2VwdCB1c2VyIG5vdFxuICAgIC8vIHNwZWNpZmllZCBvciBkaW0gbmFtZSBpcyBub3Qgc3BlY2lmaWVkIG9yIGRldGVjdGVkLlxuICAgIC8vIChBIGF1dG8gZ2VuZXJhdGVkIGRpbSBuYW1lIHdpbGwgbm90IGJlIHVzZWQgYXNcbiAgICAvLyBkaXNwbGF5TmFtZSkuXG5cbiAgICBpZiAoaXRlbS5kaXNwbGF5TmFtZSA9PSBudWxsKSB7XG4gICAgICBpdGVtLmRpc3BsYXlOYW1lID0gaXRlbS5uYW1lO1xuICAgIH1cblxuICAgIHZhciBleGlzdCA9IG5hbWVNYXAuZ2V0KGl0ZW0ubmFtZSk7XG5cbiAgICBpZiAoIWV4aXN0KSB7XG4gICAgICBuYW1lTWFwLnNldChpdGVtLm5hbWUsIHtcbiAgICAgICAgY291bnQ6IDFcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtLm5hbWUgKz0gJy0nICsgZXhpc3QuY291bnQrKztcbiAgICB9XG5cbiAgICByZXR1cm4gaXRlbTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFycmF5Um93c1RyYXZlbEZpcnN0KGNiLCBzZXJpZXNMYXlvdXRCeSwgZGF0YSwgbWF4TG9vcCkge1xuICBtYXhMb29wID09IG51bGwgJiYgKG1heExvb3AgPSBJbmZpbml0eSk7XG5cbiAgaWYgKHNlcmllc0xheW91dEJ5ID09PSBTRVJJRVNfTEFZT1VUX0JZX1JPVykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGggJiYgaSA8IG1heExvb3A7IGkrKykge1xuICAgICAgY2IoZGF0YVtpXSA/IGRhdGFbaV1bMF0gOiBudWxsLCBpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHZhbHVlMCA9IGRhdGFbMF0gfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlMC5sZW5ndGggJiYgaSA8IG1heExvb3A7IGkrKykge1xuICAgICAgY2IodmFsdWUwW2ldLCBpKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gb2JqZWN0Um93c0NvbGxlY3REaW1lbnNpb25zKGRhdGEpIHtcbiAgdmFyIGZpcnN0SW5kZXggPSAwO1xuICB2YXIgb2JqO1xuXG4gIHdoaWxlIChmaXJzdEluZGV4IDwgZGF0YS5sZW5ndGggJiYgIShvYmogPSBkYXRhW2ZpcnN0SW5kZXgrK10pKSB7fSAvLyBqc2hpbnQgaWdub3JlOiBsaW5lXG5cblxuICBpZiAob2JqKSB7XG4gICAgdmFyIGRpbWVuc2lvbnMgPSBbXTtcbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgIGRpbWVuc2lvbnMucHVzaChrZXkpO1xuICAgIH0pO1xuICAgIHJldHVybiBkaW1lbnNpb25zO1xuICB9XG59IC8vID8/PyBUT0RPIG1lcmdlIHRvIGNvbXBsZXRlZGltZW5zaW9ucywgd2hlcmUgYWxzbyBoYXNcbi8vIGRlZmF1bHQgZW5jb2RlIG1ha2luZyBsb2dpYy4gQW5kIHRoZSBkZWZhdWx0IHJ1bGVcbi8vIHNob3VsZCBkZXBlbmRzIG9uIHNlcmllcz8gY29uc2lkZXIgJ21hcCcuXG5cblxuZnVuY3Rpb24gbWFrZURlZmF1bHRFbmNvZGUoc2VyaWVzTW9kZWwsIGRhdGFzZXRNb2RlbCwgZGF0YSwgc291cmNlRm9ybWF0LCBzZXJpZXNMYXlvdXRCeSwgY29tcGxldGVSZXN1bHQpIHtcbiAgdmFyIGNvb3JkU3lzRGVmaW5lID0gZ2V0Q29vcmRTeXNEZWZpbmVCeVNlcmllcyhzZXJpZXNNb2RlbCk7XG4gIHZhciBlbmNvZGUgPSB7fTsgLy8gdmFyIGVuY29kZVRvb2x0aXAgPSBbXTtcbiAgLy8gdmFyIGVuY29kZUxhYmVsID0gW107XG5cbiAgdmFyIGVuY29kZUl0ZW1OYW1lID0gW107XG4gIHZhciBlbmNvZGVTZXJpZXNOYW1lID0gW107XG4gIHZhciBzZXJpZXNUeXBlID0gc2VyaWVzTW9kZWwuc3ViVHlwZTsgLy8gPz8/IFRPRE8gcmVmYWN0b3I6IHByb3ZpZGUgYnkgc2VyaWVzIGl0c2VsZi5cbiAgLy8gQ29uc2lkZXIgdGhlIGNhc2U6ICdtYXAnIHNlcmllcyBpcyBiYXNlZCBvbiBnZW8gY29vcmRTeXMsXG4gIC8vICdncmFwaCcsICdoZWF0bWFwJyBjYW4gYmUgYmFzZWQgb24gY2FydGVzaWFuLiBCdXQgY2FuIG5vdFxuICAvLyBnaXZlIGRlZmF1bHQgcnVsZSBzaW1wbHkgaGVyZS5cblxuICB2YXIgblNlcmllc01hcCA9IGNyZWF0ZUhhc2hNYXAoWydwaWUnLCAnbWFwJywgJ2Z1bm5lbCddKTtcbiAgdmFyIGNTZXJpZXNNYXAgPSBjcmVhdGVIYXNoTWFwKFsnbGluZScsICdiYXInLCAncGljdG9yaWFsQmFyJywgJ3NjYXR0ZXInLCAnZWZmZWN0U2NhdHRlcicsICdjYW5kbGVzdGljaycsICdib3hwbG90J10pOyAvLyBVc3VhbGx5IGluIHRoaXMgY2FzZSBzZXJpZXMgd2lsbCB1c2UgdGhlIGZpcnN0IGRhdGFcbiAgLy8gZGltZW5zaW9uIGFzIHRoZSBcInZhbHVlXCIgZGltZW5zaW9uLCBvciBvdGhlciBkZWZhdWx0XG4gIC8vIHByb2Nlc3NlcyByZXNwZWN0aXZlbHkuXG5cbiAgaWYgKGNvb3JkU3lzRGVmaW5lICYmIGNTZXJpZXNNYXAuZ2V0KHNlcmllc1R5cGUpICE9IG51bGwpIHtcbiAgICB2YXIgZWNNb2RlbCA9IHNlcmllc01vZGVsLmVjTW9kZWw7XG4gICAgdmFyIGRhdGFzZXRNYXAgPSBpbm5lcihlY01vZGVsKS5kYXRhc2V0TWFwO1xuICAgIHZhciBrZXkgPSBkYXRhc2V0TW9kZWwudWlkICsgJ18nICsgc2VyaWVzTGF5b3V0Qnk7XG4gICAgdmFyIGRhdGFzZXRSZWNvcmQgPSBkYXRhc2V0TWFwLmdldChrZXkpIHx8IGRhdGFzZXRNYXAuc2V0KGtleSwge1xuICAgICAgY2F0ZWdvcnlXYXlEaW06IDEsXG4gICAgICB2YWx1ZVdheURpbTogMFxuICAgIH0pOyAvLyBUT0RPXG4gICAgLy8gQXV0byBkZXRlY3QgZmlyc3QgdGltZSBheGlzIGFuZCBkbyBhcnJhbmdlbWVudC5cblxuICAgIGVhY2goY29vcmRTeXNEZWZpbmUuY29vcmRTeXNEaW1zLCBmdW5jdGlvbiAoY29vcmREaW0pIHtcbiAgICAgIC8vIEluIHZhbHVlIHdheS5cbiAgICAgIGlmIChjb29yZFN5c0RlZmluZS5maXJzdENhdGVnb3J5RGltSW5kZXggPT0gbnVsbCkge1xuICAgICAgICB2YXIgZGF0YURpbSA9IGRhdGFzZXRSZWNvcmQudmFsdWVXYXlEaW0rKztcbiAgICAgICAgZW5jb2RlW2Nvb3JkRGltXSA9IGRhdGFEaW07IC8vID8/PyBUT0RPIGdpdmUgYSBiZXR0ZXIgZGVmYXVsdCBzZXJpZXMgbmFtZSBydWxlP1xuICAgICAgICAvLyBlc3BlY2lhbGx5IHdoZW4gZW5jb2RlIHggeSBzcGVjaWZpZWQuXG4gICAgICAgIC8vIGNvbnNpZGVyOiB3aGVuIG11dGlwbGUgc2VyaWVzIHNoYXJlIG9uZSBkaW1lbnNpb25cbiAgICAgICAgLy8gY2F0ZWdvcnkgYXhpcywgc2VyaWVzIG5hbWUgc2hvdWxkIGJldHRlciB1c2VcbiAgICAgICAgLy8gdGhlIG90aGVyIGRpbXNpb24gbmFtZS4gT24gdGhlIG90aGVyIGhhbmQsIHVzZVxuICAgICAgICAvLyBib3RoIGRpbWVuc2lvbnMgbmFtZS5cblxuICAgICAgICBlbmNvZGVTZXJpZXNOYW1lLnB1c2goZGF0YURpbSk7IC8vIGVuY29kZVRvb2x0aXAucHVzaChkYXRhRGltKTtcbiAgICAgICAgLy8gZW5jb2RlTGFiZWwucHVzaChkYXRhRGltKTtcbiAgICAgIH0gLy8gSW4gY2F0ZWdvcnkgd2F5LCBjYXRlZ29yeSBheGlzLlxuICAgICAgZWxzZSBpZiAoY29vcmRTeXNEZWZpbmUuY2F0ZWdvcnlBeGlzTWFwLmdldChjb29yZERpbSkpIHtcbiAgICAgICAgICBlbmNvZGVbY29vcmREaW1dID0gMDtcbiAgICAgICAgICBlbmNvZGVJdGVtTmFtZS5wdXNoKDApO1xuICAgICAgICB9IC8vIEluIGNhdGVnb3J5IHdheSwgbm9uLWNhdGVnb3J5IGF4aXMuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGRhdGFEaW0gPSBkYXRhc2V0UmVjb3JkLmNhdGVnb3J5V2F5RGltKys7XG4gICAgICAgICAgICBlbmNvZGVbY29vcmREaW1dID0gZGF0YURpbTsgLy8gZW5jb2RlVG9vbHRpcC5wdXNoKGRhdGFEaW0pO1xuICAgICAgICAgICAgLy8gZW5jb2RlTGFiZWwucHVzaChkYXRhRGltKTtcblxuICAgICAgICAgICAgZW5jb2RlU2VyaWVzTmFtZS5wdXNoKGRhdGFEaW0pO1xuICAgICAgICAgIH1cbiAgICB9KTtcbiAgfSAvLyBEbyBub3QgbWFrZSBhIGNvbXBsZXggcnVsZSEgSGFyZCB0byBjb2RlIG1haW50YWluIGFuZCBub3QgbmVjZXNzYXJ5LlxuICAvLyA/Pz8gVE9ETyByZWZhY3RvcjogcHJvdmlkZSBieSBzZXJpZXMgaXRzZWxmLlxuICAvLyBbe25hbWU6IC4uLiwgdmFsdWU6IC4uLn0sIC4uLl0gbGlrZTpcbiAgZWxzZSBpZiAoblNlcmllc01hcC5nZXQoc2VyaWVzVHlwZSkgIT0gbnVsbCkge1xuICAgICAgLy8gRmluZCB0aGUgZmlyc3Qgbm90IG9yZGluYWwuICg1IGlzIGFuIGV4cGVyaWVuY2UgdmFsdWUpXG4gICAgICB2YXIgZmlyc3ROb3RPcmRpbmFsO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDUgJiYgZmlyc3ROb3RPcmRpbmFsID09IG51bGw7IGkrKykge1xuICAgICAgICBpZiAoIWRvR3Vlc3NPcmRpbmFsKGRhdGEsIHNvdXJjZUZvcm1hdCwgc2VyaWVzTGF5b3V0QnksIGNvbXBsZXRlUmVzdWx0LmRpbWVuc2lvbnNEZWZpbmUsIGNvbXBsZXRlUmVzdWx0LnN0YXJ0SW5kZXgsIGkpKSB7XG4gICAgICAgICAgZmlyc3ROb3RPcmRpbmFsID0gaTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmlyc3ROb3RPcmRpbmFsICE9IG51bGwpIHtcbiAgICAgICAgZW5jb2RlLnZhbHVlID0gZmlyc3ROb3RPcmRpbmFsO1xuICAgICAgICB2YXIgbmFtZURpbUluZGV4ID0gY29tcGxldGVSZXN1bHQucG90ZW50aWFsTmFtZURpbUluZGV4IHx8IE1hdGgubWF4KGZpcnN0Tm90T3JkaW5hbCAtIDEsIDApOyAvLyBCeSBkZWZhdWx0LCBsYWJlbCB1c2UgaXRlbU5hbWUgaW4gY2hhcnRzLlxuICAgICAgICAvLyBTbyB3ZSBkb250IHNldCBlbmNvZGVMYWJlbCBoZXJlLlxuXG4gICAgICAgIGVuY29kZVNlcmllc05hbWUucHVzaChuYW1lRGltSW5kZXgpO1xuICAgICAgICBlbmNvZGVJdGVtTmFtZS5wdXNoKG5hbWVEaW1JbmRleCk7IC8vIGVuY29kZVRvb2x0aXAucHVzaChmaXJzdE5vdE9yZGluYWwpO1xuICAgICAgfVxuICAgIH0gLy8gZW5jb2RlVG9vbHRpcC5sZW5ndGggJiYgKGVuY29kZS50b29sdGlwID0gZW5jb2RlVG9vbHRpcCk7XG4gIC8vIGVuY29kZUxhYmVsLmxlbmd0aCAmJiAoZW5jb2RlLmxhYmVsID0gZW5jb2RlTGFiZWwpO1xuXG5cbiAgZW5jb2RlSXRlbU5hbWUubGVuZ3RoICYmIChlbmNvZGUuaXRlbU5hbWUgPSBlbmNvZGVJdGVtTmFtZSk7XG4gIGVuY29kZVNlcmllc05hbWUubGVuZ3RoICYmIChlbmNvZGUuc2VyaWVzTmFtZSA9IGVuY29kZVNlcmllc05hbWUpO1xuICByZXR1cm4gZW5jb2RlO1xufVxuLyoqXG4gKiBJZiByZXR1cm4gbnVsbC91bmRlZmluZWQsIGluZGljYXRlIHRoYXQgc2hvdWxkIG5vdCB1c2UgZGF0YXNldE1vZGVsLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0RGF0YXNldE1vZGVsKHNlcmllc01vZGVsKSB7XG4gIHZhciBvcHRpb24gPSBzZXJpZXNNb2RlbC5vcHRpb247IC8vIENhdXRpb246IGNvbnNpZGVyIHRoZSBzY2VuYXJpbzpcbiAgLy8gQSBkYXRhc2V0IGlzIGRlY2xhcmVkIGFuZCBhIHNlcmllcyBpcyBub3QgZXhwZWN0ZWQgdG8gdXNlIHRoZSBkYXRhc2V0LFxuICAvLyBhbmQgYXQgdGhlIGJlZ2lubmluZyBgc2V0T3B0aW9uKHtzZXJpZXM6IHsgbm9EYXRhIH0pYCAoanVzdCBwcmVwYXJlIG90aGVyXG4gIC8vIG9wdGlvbiBidXQgbm8gZGF0YSksIHRoZW4gYHNldE9wdGlvbih7c2VyaWVzOiB7ZGF0YTogWy4uLl19KTsgSW4gdGhpcyBjYXNlLFxuICAvLyB0aGUgdXNlciBzaG91bGQgc2V0IGFuIGVtcHR5IGFycmF5IHRvIGF2b2lkIHRoYXQgZGF0YXNldCBpcyB1c2VkIGJ5IGRlZmF1bHQuXG5cbiAgdmFyIHRoaXNEYXRhID0gb3B0aW9uLmRhdGE7XG5cbiAgaWYgKCF0aGlzRGF0YSkge1xuICAgIHJldHVybiBzZXJpZXNNb2RlbC5lY01vZGVsLmdldENvbXBvbmVudCgnZGF0YXNldCcsIG9wdGlvbi5kYXRhc2V0SW5kZXggfHwgMCk7XG4gIH1cbn1cbi8qKlxuICogVGhlIHJ1bGUgc2hvdWxkIG5vdCBiZSBjb21wbGV4LCBvdGhlcndpc2UgdXNlciBtaWdodCBub3RcbiAqIGJlIGFibGUgdG8ga25vd24gd2hlcmUgdGhlIGRhdGEgaXMgd3JvbmcuXG4gKiBUaGUgY29kZSBpcyB1Z2x5LCBidXQgaG93IHRvIG1ha2UgaXQgbmVhdD9cbiAqXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnMvZGF0YS9Tb3VyY2V9IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IGRpbUluZGV4XG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yZGluYWwuXG4gKi9cblxuXG5mdW5jdGlvbiBndWVzc09yZGluYWwoc291cmNlLCBkaW1JbmRleCkge1xuICByZXR1cm4gZG9HdWVzc09yZGluYWwoc291cmNlLmRhdGEsIHNvdXJjZS5zb3VyY2VGb3JtYXQsIHNvdXJjZS5zZXJpZXNMYXlvdXRCeSwgc291cmNlLmRpbWVuc2lvbnNEZWZpbmUsIHNvdXJjZS5zdGFydEluZGV4LCBkaW1JbmRleCk7XG59IC8vIGRpbUluZGV4IG1heSBiZSBvdmVyZmxvdyBzb3VyY2UgZGF0YS5cblxuXG5mdW5jdGlvbiBkb0d1ZXNzT3JkaW5hbChkYXRhLCBzb3VyY2VGb3JtYXQsIHNlcmllc0xheW91dEJ5LCBkaW1lbnNpb25zRGVmaW5lLCBzdGFydEluZGV4LCBkaW1JbmRleCkge1xuICB2YXIgcmVzdWx0OyAvLyBFeHBlcmllbmNlIHZhbHVlLlxuXG4gIHZhciBtYXhMb29wID0gNTtcblxuICBpZiAoaXNUeXBlZEFycmF5KGRhdGEpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIFdoZW4gc291cmNlVHlwZSBpcyAnb2JqZWN0Um93cycgb3IgJ2tleWVkQ29sdW1ucycsIGRpbWVuc2lvbnNEZWZpbmVcbiAgLy8gYWx3YXlzIGV4aXN0cyBpbiBzb3VyY2UuXG5cblxuICB2YXIgZGltTmFtZTtcblxuICBpZiAoZGltZW5zaW9uc0RlZmluZSkge1xuICAgIGRpbU5hbWUgPSBkaW1lbnNpb25zRGVmaW5lW2RpbUluZGV4XTtcbiAgICBkaW1OYW1lID0gaXNPYmplY3QoZGltTmFtZSkgPyBkaW1OYW1lLm5hbWUgOiBkaW1OYW1lO1xuICB9XG5cbiAgaWYgKHNvdXJjZUZvcm1hdCA9PT0gU09VUkNFX0ZPUk1BVF9BUlJBWV9ST1dTKSB7XG4gICAgaWYgKHNlcmllc0xheW91dEJ5ID09PSBTRVJJRVNfTEFZT1VUX0JZX1JPVykge1xuICAgICAgdmFyIHNhbXBsZSA9IGRhdGFbZGltSW5kZXhdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IChzYW1wbGUgfHwgW10pLmxlbmd0aCAmJiBpIDwgbWF4TG9vcDsgaSsrKSB7XG4gICAgICAgIGlmICgocmVzdWx0ID0gZGV0ZWN0VmFsdWUoc2FtcGxlW3N0YXJ0SW5kZXggKyBpXSkpICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGggJiYgaSA8IG1heExvb3A7IGkrKykge1xuICAgICAgICB2YXIgcm93ID0gZGF0YVtzdGFydEluZGV4ICsgaV07XG5cbiAgICAgICAgaWYgKHJvdyAmJiAocmVzdWx0ID0gZGV0ZWN0VmFsdWUocm93W2RpbUluZGV4XSkpICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHNvdXJjZUZvcm1hdCA9PT0gU09VUkNFX0ZPUk1BVF9PQkpFQ1RfUk9XUykge1xuICAgIGlmICghZGltTmFtZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGggJiYgaSA8IG1heExvb3A7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBkYXRhW2ldO1xuXG4gICAgICBpZiAoaXRlbSAmJiAocmVzdWx0ID0gZGV0ZWN0VmFsdWUoaXRlbVtkaW1OYW1lXSkpICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoc291cmNlRm9ybWF0ID09PSBTT1VSQ0VfRk9STUFUX0tFWUVEX0NPTFVNTlMpIHtcbiAgICBpZiAoIWRpbU5hbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc2FtcGxlID0gZGF0YVtkaW1OYW1lXTtcblxuICAgIGlmICghc2FtcGxlIHx8IGlzVHlwZWRBcnJheShzYW1wbGUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzYW1wbGUubGVuZ3RoICYmIGkgPCBtYXhMb29wOyBpKyspIHtcbiAgICAgIGlmICgocmVzdWx0ID0gZGV0ZWN0VmFsdWUoc2FtcGxlW2ldKSkgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChzb3VyY2VGb3JtYXQgPT09IFNPVVJDRV9GT1JNQVRfT1JJR0lOQUwpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoICYmIGkgPCBtYXhMb29wOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gZGF0YVtpXTtcbiAgICAgIHZhciB2YWwgPSBnZXREYXRhSXRlbVZhbHVlKGl0ZW0pO1xuXG4gICAgICBpZiAoIWlzQXJyYXkodmFsKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICgocmVzdWx0ID0gZGV0ZWN0VmFsdWUodmFsW2RpbUluZGV4XSkpICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZXRlY3RWYWx1ZSh2YWwpIHtcbiAgICAvLyBDb25zaWRlciB1c2FnZSBjb252ZW5pZW5jZSwgJzEnLCAnMicgd2lsbCBiZSB0cmVhdGVkIGFzIFwibnVtYmVyXCIuXG4gICAgLy8gYGlzRmluaXQoJycpYCBnZXQgYHRydWVgLlxuICAgIGlmICh2YWwgIT0gbnVsbCAmJiBpc0Zpbml0ZSh2YWwpICYmIHZhbCAhPT0gJycpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGlzU3RyaW5nKHZhbCkgJiYgdmFsICE9PSAnLScpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0cy5kZXRlY3RTb3VyY2VGb3JtYXQgPSBkZXRlY3RTb3VyY2VGb3JtYXQ7XG5leHBvcnRzLmdldFNvdXJjZSA9IGdldFNvdXJjZTtcbmV4cG9ydHMucmVzZXRTb3VyY2VEZWZhdWx0ZXIgPSByZXNldFNvdXJjZURlZmF1bHRlcjtcbmV4cG9ydHMucHJlcGFyZVNvdXJjZSA9IHByZXBhcmVTb3VyY2U7XG5leHBvcnRzLmd1ZXNzT3JkaW5hbCA9IGd1ZXNzT3JkaW5hbDsiLCIvKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG4vLyBBdm9pZCB0eXBvLlxudmFyIFNPVVJDRV9GT1JNQVRfT1JJR0lOQUwgPSAnb3JpZ2luYWwnO1xudmFyIFNPVVJDRV9GT1JNQVRfQVJSQVlfUk9XUyA9ICdhcnJheVJvd3MnO1xudmFyIFNPVVJDRV9GT1JNQVRfT0JKRUNUX1JPV1MgPSAnb2JqZWN0Um93cyc7XG52YXIgU09VUkNFX0ZPUk1BVF9LRVlFRF9DT0xVTU5TID0gJ2tleWVkQ29sdW1ucyc7XG52YXIgU09VUkNFX0ZPUk1BVF9VTktOT1dOID0gJ3Vua25vd24nOyAvLyA/Pz8gQ0hBTkdFIEEgTkFNRVxuXG52YXIgU09VUkNFX0ZPUk1BVF9UWVBFRF9BUlJBWSA9ICd0eXBlZEFycmF5JztcbnZhciBTRVJJRVNfTEFZT1VUX0JZX0NPTFVNTiA9ICdjb2x1bW4nO1xudmFyIFNFUklFU19MQVlPVVRfQllfUk9XID0gJ3Jvdyc7XG5leHBvcnRzLlNPVVJDRV9GT1JNQVRfT1JJR0lOQUwgPSBTT1VSQ0VfRk9STUFUX09SSUdJTkFMO1xuZXhwb3J0cy5TT1VSQ0VfRk9STUFUX0FSUkFZX1JPV1MgPSBTT1VSQ0VfRk9STUFUX0FSUkFZX1JPV1M7XG5leHBvcnRzLlNPVVJDRV9GT1JNQVRfT0JKRUNUX1JPV1MgPSBTT1VSQ0VfRk9STUFUX09CSkVDVF9ST1dTO1xuZXhwb3J0cy5TT1VSQ0VfRk9STUFUX0tFWUVEX0NPTFVNTlMgPSBTT1VSQ0VfRk9STUFUX0tFWUVEX0NPTFVNTlM7XG5leHBvcnRzLlNPVVJDRV9GT1JNQVRfVU5LTk9XTiA9IFNPVVJDRV9GT1JNQVRfVU5LTk9XTjtcbmV4cG9ydHMuU09VUkNFX0ZPUk1BVF9UWVBFRF9BUlJBWSA9IFNPVVJDRV9GT1JNQVRfVFlQRURfQVJSQVk7XG5leHBvcnRzLlNFUklFU19MQVlPVVRfQllfQ09MVU1OID0gU0VSSUVTX0xBWU9VVF9CWV9DT0xVTU47XG5leHBvcnRzLlNFUklFU19MQVlPVVRfQllfUk9XID0gU0VSSUVTX0xBWU9VVF9CWV9ST1c7IiwidmFyIF9jb25maWcgPSByZXF1aXJlKFwiLi9jb25maWdcIik7XG5cbnZhciBfX0RFVl9fID0gX2NvbmZpZy5fX0RFVl9fO1xuXG52YXIgenJlbmRlciA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi96cmVuZGVyXCIpO1xuXG52YXIgenJVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxudmFyIGNvbG9yVG9vbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi90b29sL2NvbG9yXCIpO1xuXG52YXIgZW52ID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvZW52XCIpO1xuXG52YXIgdGltc29ydCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3RpbXNvcnRcIik7XG5cbnZhciBFdmVudGZ1bCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9taXhpbi9FdmVudGZ1bFwiKTtcblxudmFyIEdsb2JhbE1vZGVsID0gcmVxdWlyZShcIi4vbW9kZWwvR2xvYmFsXCIpO1xuXG52YXIgRXh0ZW5zaW9uQVBJID0gcmVxdWlyZShcIi4vRXh0ZW5zaW9uQVBJXCIpO1xuXG52YXIgQ29vcmRpbmF0ZVN5c3RlbU1hbmFnZXIgPSByZXF1aXJlKFwiLi9Db29yZGluYXRlU3lzdGVtXCIpO1xuXG52YXIgT3B0aW9uTWFuYWdlciA9IHJlcXVpcmUoXCIuL21vZGVsL09wdGlvbk1hbmFnZXJcIik7XG5cbnZhciBiYWNrd2FyZENvbXBhdCA9IHJlcXVpcmUoXCIuL3ByZXByb2Nlc3Nvci9iYWNrd2FyZENvbXBhdFwiKTtcblxudmFyIGRhdGFTdGFjayA9IHJlcXVpcmUoXCIuL3Byb2Nlc3Nvci9kYXRhU3RhY2tcIik7XG5cbnZhciBDb21wb25lbnRNb2RlbCA9IHJlcXVpcmUoXCIuL21vZGVsL0NvbXBvbmVudFwiKTtcblxudmFyIFNlcmllc01vZGVsID0gcmVxdWlyZShcIi4vbW9kZWwvU2VyaWVzXCIpO1xuXG52YXIgQ29tcG9uZW50VmlldyA9IHJlcXVpcmUoXCIuL3ZpZXcvQ29tcG9uZW50XCIpO1xuXG52YXIgQ2hhcnRWaWV3ID0gcmVxdWlyZShcIi4vdmlldy9DaGFydFwiKTtcblxudmFyIGdyYXBoaWMgPSByZXF1aXJlKFwiLi91dGlsL2dyYXBoaWNcIik7XG5cbnZhciBtb2RlbFV0aWwgPSByZXF1aXJlKFwiLi91dGlsL21vZGVsXCIpO1xuXG52YXIgX3Rocm90dGxlID0gcmVxdWlyZShcIi4vdXRpbC90aHJvdHRsZVwiKTtcblxudmFyIHRocm90dGxlID0gX3Rocm90dGxlLnRocm90dGxlO1xuXG52YXIgc2VyaWVzQ29sb3IgPSByZXF1aXJlKFwiLi92aXN1YWwvc2VyaWVzQ29sb3JcIik7XG5cbnZhciBhcmlhID0gcmVxdWlyZShcIi4vdmlzdWFsL2FyaWFcIik7XG5cbnZhciBsb2FkaW5nRGVmYXVsdCA9IHJlcXVpcmUoXCIuL2xvYWRpbmcvZGVmYXVsdFwiKTtcblxudmFyIFNjaGVkdWxlciA9IHJlcXVpcmUoXCIuL3N0cmVhbS9TY2hlZHVsZXJcIik7XG5cbnZhciBsaWdodFRoZW1lID0gcmVxdWlyZShcIi4vdGhlbWUvbGlnaHRcIik7XG5cbnZhciBkYXJrVGhlbWUgPSByZXF1aXJlKFwiLi90aGVtZS9kYXJrXCIpO1xuXG5yZXF1aXJlKFwiLi9jb21wb25lbnQvZGF0YXNldFwiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xudmFyIGFzc2VydCA9IHpyVXRpbC5hc3NlcnQ7XG52YXIgZWFjaCA9IHpyVXRpbC5lYWNoO1xudmFyIGlzRnVuY3Rpb24gPSB6clV0aWwuaXNGdW5jdGlvbjtcbnZhciBpc09iamVjdCA9IHpyVXRpbC5pc09iamVjdDtcbnZhciBwYXJzZUNsYXNzVHlwZSA9IENvbXBvbmVudE1vZGVsLnBhcnNlQ2xhc3NUeXBlO1xudmFyIHZlcnNpb24gPSAnNC4xLjAnO1xudmFyIGRlcGVuZGVuY2llcyA9IHtcbiAgenJlbmRlcjogJzQuMC40J1xufTtcbnZhciBURVNUX0ZSQU1FX1JFTUFJTl9USU1FID0gMTtcbnZhciBQUklPUklUWV9QUk9DRVNTT1JfRklMVEVSID0gMTAwMDtcbnZhciBQUklPUklUWV9QUk9DRVNTT1JfU1RBVElTVElDID0gNTAwMDtcbnZhciBQUklPUklUWV9WSVNVQUxfTEFZT1VUID0gMTAwMDtcbnZhciBQUklPUklUWV9WSVNVQUxfR0xPQkFMID0gMjAwMDtcbnZhciBQUklPUklUWV9WSVNVQUxfQ0hBUlQgPSAzMDAwO1xudmFyIFBSSU9SSVRZX1ZJU1VBTF9DT01QT05FTlQgPSA0MDAwOyAvLyBGSVhNRVxuLy8gbmVjZXNzYXJ5P1xuXG52YXIgUFJJT1JJVFlfVklTVUFMX0JSVVNIID0gNTAwMDtcbnZhciBQUklPUklUWSA9IHtcbiAgUFJPQ0VTU09SOiB7XG4gICAgRklMVEVSOiBQUklPUklUWV9QUk9DRVNTT1JfRklMVEVSLFxuICAgIFNUQVRJU1RJQzogUFJJT1JJVFlfUFJPQ0VTU09SX1NUQVRJU1RJQ1xuICB9LFxuICBWSVNVQUw6IHtcbiAgICBMQVlPVVQ6IFBSSU9SSVRZX1ZJU1VBTF9MQVlPVVQsXG4gICAgR0xPQkFMOiBQUklPUklUWV9WSVNVQUxfR0xPQkFMLFxuICAgIENIQVJUOiBQUklPUklUWV9WSVNVQUxfQ0hBUlQsXG4gICAgQ09NUE9ORU5UOiBQUklPUklUWV9WSVNVQUxfQ09NUE9ORU5ULFxuICAgIEJSVVNIOiBQUklPUklUWV9WSVNVQUxfQlJVU0hcbiAgfVxufTsgLy8gTWFpbiBwcm9jZXNzIGhhdmUgdGhyZWUgZW50cmllczogYHNldE9wdGlvbmAsIGBkaXNwYXRjaEFjdGlvbmAgYW5kIGByZXNpemVgLFxuLy8gd2hlcmUgdGhleSBtdXN0IG5vdCBiZSBpbnZva2VkIG5lc3RlZGx5LCBleGNlcHQgdGhlIG9ubHkgY2FzZTogaW52b2tlXG4vLyBkaXNwYXRjaEFjdGlvbiB3aXRoIHVwZGF0ZU1ldGhvZCBcIm5vbmVcIiBpbiBtYWluIHByb2Nlc3MuXG4vLyBUaGlzIGZsYWcgaXMgdXNlZCB0byBjYXJyeSBvdXQgdGhpcyBydWxlLlxuLy8gQWxsIGV2ZW50cyB3aWxsIGJlIHRyaWdnZXJlZCBvdXQgc2lkZSBtYWluIHByb2Nlc3MgKGkuZS4gd2hlbiAhdGhpc1tJTl9NQUlOX1BST0NFU1NdKS5cblxudmFyIElOX01BSU5fUFJPQ0VTUyA9ICdfX2ZsYWdJbk1haW5Qcm9jZXNzJztcbnZhciBPUFRJT05fVVBEQVRFRCA9ICdfX29wdGlvblVwZGF0ZWQnO1xudmFyIEFDVElPTl9SRUcgPSAvXlthLXpBLVowLTlfXSskLztcblxuZnVuY3Rpb24gY3JlYXRlUmVnaXN0ZXJFdmVudFdpdGhMb3dlcmNhc2VOYW1lKG1ldGhvZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50TmFtZSwgaGFuZGxlciwgY29udGV4dCkge1xuICAgIC8vIEV2ZW50IG5hbWUgaXMgYWxsIGxvd2VyY2FzZVxuICAgIGV2ZW50TmFtZSA9IGV2ZW50TmFtZSAmJiBldmVudE5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBFdmVudGZ1bC5wcm90b3R5cGVbbWV0aG9kXS5jYWxsKHRoaXMsIGV2ZW50TmFtZSwgaGFuZGxlciwgY29udGV4dCk7XG4gIH07XG59XG4vKipcbiAqIEBtb2R1bGUgZWNoYXJ0c35NZXNzYWdlQ2VudGVyXG4gKi9cblxuXG5mdW5jdGlvbiBNZXNzYWdlQ2VudGVyKCkge1xuICBFdmVudGZ1bC5jYWxsKHRoaXMpO1xufVxuXG5NZXNzYWdlQ2VudGVyLnByb3RvdHlwZS5vbiA9IGNyZWF0ZVJlZ2lzdGVyRXZlbnRXaXRoTG93ZXJjYXNlTmFtZSgnb24nKTtcbk1lc3NhZ2VDZW50ZXIucHJvdG90eXBlLm9mZiA9IGNyZWF0ZVJlZ2lzdGVyRXZlbnRXaXRoTG93ZXJjYXNlTmFtZSgnb2ZmJyk7XG5NZXNzYWdlQ2VudGVyLnByb3RvdHlwZS5vbmUgPSBjcmVhdGVSZWdpc3RlckV2ZW50V2l0aExvd2VyY2FzZU5hbWUoJ29uZScpO1xuenJVdGlsLm1peGluKE1lc3NhZ2VDZW50ZXIsIEV2ZW50ZnVsKTtcbi8qKlxuICogQG1vZHVsZSBlY2hhcnRzfkVDaGFydHNcbiAqL1xuXG5mdW5jdGlvbiBFQ2hhcnRzKGRvbSwgdGhlbWUsIG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307IC8vIEdldCB0aGVtZSBieSBuYW1lXG5cbiAgaWYgKHR5cGVvZiB0aGVtZSA9PT0gJ3N0cmluZycpIHtcbiAgICB0aGVtZSA9IHRoZW1lU3RvcmFnZVt0aGVtZV07XG4gIH1cbiAgLyoqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgdGhpcy5pZDtcbiAgLyoqXG4gICAqIEdyb3VwIGlkXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG4gIHRoaXMuZ3JvdXA7XG4gIC8qKlxuICAgKiBAdHlwZSB7SFRNTEVsZW1lbnR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIHRoaXMuX2RvbSA9IGRvbTtcbiAgdmFyIGRlZmF1bHRSZW5kZXJlciA9ICdjYW52YXMnO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7bW9kdWxlOnpyZW5kZXIvWlJlbmRlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHZhciB6ciA9IHRoaXMuX3pyID0genJlbmRlci5pbml0KGRvbSwge1xuICAgIHJlbmRlcmVyOiBvcHRzLnJlbmRlcmVyIHx8IGRlZmF1bHRSZW5kZXJlcixcbiAgICBkZXZpY2VQaXhlbFJhdGlvOiBvcHRzLmRldmljZVBpeGVsUmF0aW8sXG4gICAgd2lkdGg6IG9wdHMud2lkdGgsXG4gICAgaGVpZ2h0OiBvcHRzLmhlaWdodFxuICB9KTtcbiAgLyoqXG4gICAqIEV4cGVjdCA2MCBwZnMuXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgdGhpcy5fdGhyb3R0bGVkWnJGbHVzaCA9IHRocm90dGxlKHpyVXRpbC5iaW5kKHpyLmZsdXNoLCB6ciksIDE3KTtcbiAgdmFyIHRoZW1lID0genJVdGlsLmNsb25lKHRoZW1lKTtcbiAgdGhlbWUgJiYgYmFja3dhcmRDb21wYXQodGhlbWUsIHRydWUpO1xuICAvKipcbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgdGhpcy5fdGhlbWUgPSB0aGVtZTtcbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheS48bW9kdWxlOmVjaGFydHMvdmlldy9DaGFydD59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIHRoaXMuX2NoYXJ0c1ZpZXdzID0gW107XG4gIC8qKlxuICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsIG1vZHVsZTplY2hhcnRzL3ZpZXcvQ2hhcnQ+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICB0aGlzLl9jaGFydHNNYXAgPSB7fTtcbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheS48bW9kdWxlOmVjaGFydHMvdmlldy9Db21wb25lbnQ+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICB0aGlzLl9jb21wb25lbnRzVmlld3MgPSBbXTtcbiAgLyoqXG4gICAqIEB0eXBlIHtPYmplY3QuPHN0cmluZywgbW9kdWxlOmVjaGFydHMvdmlldy9Db21wb25lbnQ+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICB0aGlzLl9jb21wb25lbnRzTWFwID0ge307XG4gIC8qKlxuICAgKiBAdHlwZSB7bW9kdWxlOmVjaGFydHMvQ29vcmRpbmF0ZVN5c3RlbX1cbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgdGhpcy5fY29vcmRTeXNNZ3IgPSBuZXcgQ29vcmRpbmF0ZVN5c3RlbU1hbmFnZXIoKTtcbiAgLyoqXG4gICAqIEB0eXBlIHttb2R1bGU6ZWNoYXJ0cy9FeHRlbnNpb25BUEl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIHZhciBhcGkgPSB0aGlzLl9hcGkgPSBjcmVhdGVFeHRlbnNpb25BUEkodGhpcyk7IC8vIFNvcnQgb24gZGVtYW5kXG5cbiAgZnVuY3Rpb24gcHJpb3JpdHlTb3J0RnVuYyhhLCBiKSB7XG4gICAgcmV0dXJuIGEuX19wcmlvIC0gYi5fX3ByaW87XG4gIH1cblxuICB0aW1zb3J0KHZpc3VhbEZ1bmNzLCBwcmlvcml0eVNvcnRGdW5jKTtcbiAgdGltc29ydChkYXRhUHJvY2Vzc29yRnVuY3MsIHByaW9yaXR5U29ydEZ1bmMpO1xuICAvKipcbiAgICogQHR5cGUge21vZHVsZTplY2hhcnRzL3N0cmVhbS9TY2hlZHVsZXJ9XG4gICAqL1xuXG4gIHRoaXMuX3NjaGVkdWxlciA9IG5ldyBTY2hlZHVsZXIodGhpcywgYXBpLCBkYXRhUHJvY2Vzc29yRnVuY3MsIHZpc3VhbEZ1bmNzKTtcbiAgRXZlbnRmdWwuY2FsbCh0aGlzKTtcbiAgLyoqXG4gICAqIEB0eXBlIHttb2R1bGU6ZWNoYXJ0c35NZXNzYWdlQ2VudGVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICB0aGlzLl9tZXNzYWdlQ2VudGVyID0gbmV3IE1lc3NhZ2VDZW50ZXIoKTsgLy8gSW5pdCBtb3VzZSBldmVudHNcblxuICB0aGlzLl9pbml0RXZlbnRzKCk7IC8vIEluIGNhc2Ugc29tZSBwZW9wbGUgd3JpdGUgYHdpbmRvdy5vbnJlc2l6ZSA9IGNoYXJ0LnJlc2l6ZWBcblxuXG4gIHRoaXMucmVzaXplID0genJVdGlsLmJpbmQodGhpcy5yZXNpemUsIHRoaXMpOyAvLyBDYW4ndCBkaXNwYXRjaCBhY3Rpb24gZHVyaW5nIHJlbmRlcmluZyBwcm9jZWR1cmVcblxuICB0aGlzLl9wZW5kaW5nQWN0aW9ucyA9IFtdO1xuICB6ci5hbmltYXRpb24ub24oJ2ZyYW1lJywgdGhpcy5fb25mcmFtZSwgdGhpcyk7XG4gIGJpbmRSZW5kZXJlZEV2ZW50KHpyLCB0aGlzKTsgLy8gRUNoYXJ0cyBpbnN0YW5jZSBjYW4gYmUgdXNlZCBhcyB2YWx1ZS5cblxuICB6clV0aWwuc2V0QXNQcmltaXRpdmUodGhpcyk7XG59XG5cbnZhciBlY2hhcnRzUHJvdG8gPSBFQ2hhcnRzLnByb3RvdHlwZTtcblxuZWNoYXJ0c1Byb3RvLl9vbmZyYW1lID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5fZGlzcG9zZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2NoZWR1bGVyID0gdGhpcy5fc2NoZWR1bGVyOyAvLyBMYXp5IHVwZGF0ZVxuXG4gIGlmICh0aGlzW09QVElPTl9VUERBVEVEXSkge1xuICAgIHZhciBzaWxlbnQgPSB0aGlzW09QVElPTl9VUERBVEVEXS5zaWxlbnQ7XG4gICAgdGhpc1tJTl9NQUlOX1BST0NFU1NdID0gdHJ1ZTtcbiAgICBwcmVwYXJlKHRoaXMpO1xuICAgIHVwZGF0ZU1ldGhvZHMudXBkYXRlLmNhbGwodGhpcyk7XG4gICAgdGhpc1tJTl9NQUlOX1BST0NFU1NdID0gZmFsc2U7XG4gICAgdGhpc1tPUFRJT05fVVBEQVRFRF0gPSBmYWxzZTtcbiAgICBmbHVzaFBlbmRpbmdBY3Rpb25zLmNhbGwodGhpcywgc2lsZW50KTtcbiAgICB0cmlnZ2VyVXBkYXRlZEV2ZW50LmNhbGwodGhpcywgc2lsZW50KTtcbiAgfSAvLyBBdm9pZCBkbyBib3RoIGxhenkgdXBkYXRlIGFuZCBwcm9ncmVzcyBpbiBvbmUgZnJhbWUuXG4gIGVsc2UgaWYgKHNjaGVkdWxlci51bmZpbmlzaGVkKSB7XG4gICAgICAvLyBTdHJlYW0gcHJvZ3Jlc3MuXG4gICAgICB2YXIgcmVtYWluVGltZSA9IFRFU1RfRlJBTUVfUkVNQUlOX1RJTUU7XG4gICAgICB2YXIgZWNNb2RlbCA9IHRoaXMuX21vZGVsO1xuICAgICAgdmFyIGFwaSA9IHRoaXMuX2FwaTtcbiAgICAgIHNjaGVkdWxlci51bmZpbmlzaGVkID0gZmFsc2U7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgdmFyIHN0YXJ0VGltZSA9ICtuZXcgRGF0ZSgpO1xuICAgICAgICBzY2hlZHVsZXIucGVyZm9ybVNlcmllc1Rhc2tzKGVjTW9kZWwpOyAvLyBDdXJyZW50bHkgZGF0YVByb2Nlc3NvckZ1bmNzIGRvIG5vdCBjaGVjayB0aHJlc2hvbGQuXG5cbiAgICAgICAgc2NoZWR1bGVyLnBlcmZvcm1EYXRhUHJvY2Vzc29yVGFza3MoZWNNb2RlbCk7XG4gICAgICAgIHVwZGF0ZVN0cmVhbU1vZGVzKHRoaXMsIGVjTW9kZWwpOyAvLyBEbyBub3QgdXBkYXRlIGNvb3JkaW5hdGUgc3lzdGVtIGhlcmUuIEJlY2F1c2UgdGhhdCBjb29yZCBzeXN0ZW0gdXBkYXRlIGluXG4gICAgICAgIC8vIGVhY2ggZnJhbWUgaXMgbm90IGEgZ29vZCB1c2VyIGV4cGVyaWVuY2UuIFNvIHdlIGZvbGxvdyB0aGUgcnVsZSB0aGF0XG4gICAgICAgIC8vIHRoZSBleHRlbnQgb2YgdGhlIGNvb3JkaW5hdGUgc3lzdGVtIGlzIGRldGVybWluIGluIHRoZSBmaXJzdCBmcmFtZSAodGhlXG4gICAgICAgIC8vIGZyYW1lIGlzIGV4ZWN1dGVkIGltbWVkaWV0ZWx5IGFmdGVyIHRhc2sgcmVzZXQuXG4gICAgICAgIC8vIHRoaXMuX2Nvb3JkU3lzTWdyLnVwZGF0ZShlY01vZGVsLCBhcGkpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnLS0tIGVjIGZyYW1lIHZpc3VhbCAtLS0nLCByZW1haW5UaW1lKTtcblxuICAgICAgICBzY2hlZHVsZXIucGVyZm9ybVZpc3VhbFRhc2tzKGVjTW9kZWwpO1xuICAgICAgICByZW5kZXJTZXJpZXModGhpcywgdGhpcy5fbW9kZWwsIGFwaSwgJ3JlbWFpbicpO1xuICAgICAgICByZW1haW5UaW1lIC09ICtuZXcgRGF0ZSgpIC0gc3RhcnRUaW1lO1xuICAgICAgfSB3aGlsZSAocmVtYWluVGltZSA+IDAgJiYgc2NoZWR1bGVyLnVuZmluaXNoZWQpOyAvLyBDYWxsIGZsdXNoIGV4cGxpY2l0bHkgZm9yIHRyaWdnZXIgZmluaXNoZWQgZXZlbnQuXG5cblxuICAgICAgaWYgKCFzY2hlZHVsZXIudW5maW5pc2hlZCkge1xuICAgICAgICB0aGlzLl96ci5mbHVzaCgpO1xuICAgICAgfSAvLyBFbHNlLCB6ciBmbHVzaGluZyBiZSBlbnN1ZSB3aXRoaW4gdGhlIHNhbWUgZnJhbWUsXG4gICAgICAvLyBiZWNhdXNlIHpyIGZsdXNoaW5nIGlzIGFmdGVyIG9uZnJhbWUgZXZlbnQuXG5cbiAgICB9XG59O1xuLyoqXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH1cbiAqL1xuXG5cbmVjaGFydHNQcm90by5nZXREb20gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9kb207XG59O1xuLyoqXG4gKiBAcmV0dXJuIHttb2R1bGU6enJlbmRlcn5aUmVuZGVyfVxuICovXG5cblxuZWNoYXJ0c1Byb3RvLmdldFpyID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fenI7XG59O1xuLyoqXG4gKiBVc2FnZTpcbiAqIGNoYXJ0LnNldE9wdGlvbihvcHRpb24sIG5vdE1lcmdlLCBsYXp5VXBkYXRlKTtcbiAqIGNoYXJ0LnNldE9wdGlvbihvcHRpb24sIHtcbiAqICAgICBub3RNZXJnZTogLi4uLFxuICogICAgIGxhenlVcGRhdGU6IC4uLixcbiAqICAgICBzaWxlbnQ6IC4uLlxuICogfSk7XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvblxuICogQHBhcmFtIHtPYmplY3R8Ym9vbGVhbn0gW29wdHNdIG9wdHMgb3Igbm90TWVyZ2UuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLm5vdE1lcmdlPWZhbHNlXVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5sYXp5VXBkYXRlPWZhbHNlXSBVc2VmdWwgd2hlbiBzZXRPcHRpb24gZnJlcXVlbnRseS5cbiAqL1xuXG5cbmVjaGFydHNQcm90by5zZXRPcHRpb24gPSBmdW5jdGlvbiAob3B0aW9uLCBub3RNZXJnZSwgbGF6eVVwZGF0ZSkge1xuICB2YXIgc2lsZW50O1xuXG4gIGlmIChpc09iamVjdChub3RNZXJnZSkpIHtcbiAgICBsYXp5VXBkYXRlID0gbm90TWVyZ2UubGF6eVVwZGF0ZTtcbiAgICBzaWxlbnQgPSBub3RNZXJnZS5zaWxlbnQ7XG4gICAgbm90TWVyZ2UgPSBub3RNZXJnZS5ub3RNZXJnZTtcbiAgfVxuXG4gIHRoaXNbSU5fTUFJTl9QUk9DRVNTXSA9IHRydWU7XG5cbiAgaWYgKCF0aGlzLl9tb2RlbCB8fCBub3RNZXJnZSkge1xuICAgIHZhciBvcHRpb25NYW5hZ2VyID0gbmV3IE9wdGlvbk1hbmFnZXIodGhpcy5fYXBpKTtcbiAgICB2YXIgdGhlbWUgPSB0aGlzLl90aGVtZTtcbiAgICB2YXIgZWNNb2RlbCA9IHRoaXMuX21vZGVsID0gbmV3IEdsb2JhbE1vZGVsKG51bGwsIG51bGwsIHRoZW1lLCBvcHRpb25NYW5hZ2VyKTtcbiAgICBlY01vZGVsLnNjaGVkdWxlciA9IHRoaXMuX3NjaGVkdWxlcjtcbiAgICBlY01vZGVsLmluaXQobnVsbCwgbnVsbCwgdGhlbWUsIG9wdGlvbk1hbmFnZXIpO1xuICB9XG5cbiAgdGhpcy5fbW9kZWwuc2V0T3B0aW9uKG9wdGlvbiwgb3B0aW9uUHJlcHJvY2Vzc29yRnVuY3MpO1xuXG4gIGlmIChsYXp5VXBkYXRlKSB7XG4gICAgdGhpc1tPUFRJT05fVVBEQVRFRF0gPSB7XG4gICAgICBzaWxlbnQ6IHNpbGVudFxuICAgIH07XG4gICAgdGhpc1tJTl9NQUlOX1BST0NFU1NdID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcHJlcGFyZSh0aGlzKTtcbiAgICB1cGRhdGVNZXRob2RzLnVwZGF0ZS5jYWxsKHRoaXMpOyAvLyBFbnN1cmUgenIgcmVmcmVzaCBzeWNocm9ub3VzbHksIGFuZCB0aGVuIHBpeGVsIGluIGNhbnZhcyBjYW4gYmVcbiAgICAvLyBmZXRjaGVkIGFmdGVyIGBzZXRPcHRpb25gLlxuXG4gICAgdGhpcy5fenIuZmx1c2goKTtcblxuICAgIHRoaXNbT1BUSU9OX1VQREFURURdID0gZmFsc2U7XG4gICAgdGhpc1tJTl9NQUlOX1BST0NFU1NdID0gZmFsc2U7XG4gICAgZmx1c2hQZW5kaW5nQWN0aW9ucy5jYWxsKHRoaXMsIHNpbGVudCk7XG4gICAgdHJpZ2dlclVwZGF0ZWRFdmVudC5jYWxsKHRoaXMsIHNpbGVudCk7XG4gIH1cbn07XG4vKipcbiAqIEBERVBSRUNBVEVEXG4gKi9cblxuXG5lY2hhcnRzUHJvdG8uc2V0VGhlbWUgPSBmdW5jdGlvbiAoKSB7XG4gIGNvbnNvbGUubG9nKCdFQ2hhcnRzI3NldFRoZW1lKCkgaXMgREVQUkVDQVRFRCBpbiBFQ2hhcnRzIDMuMCcpO1xufTtcbi8qKlxuICogQHJldHVybiB7bW9kdWxlOmVjaGFydHMvbW9kZWwvR2xvYmFsfVxuICovXG5cblxuZWNoYXJ0c1Byb3RvLmdldE1vZGVsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fbW9kZWw7XG59O1xuLyoqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxuXG5lY2hhcnRzUHJvdG8uZ2V0T3B0aW9uID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fbW9kZWwgJiYgdGhpcy5fbW9kZWwuZ2V0T3B0aW9uKCk7XG59O1xuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuXG5lY2hhcnRzUHJvdG8uZ2V0V2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl96ci5nZXRXaWR0aCgpO1xufTtcbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5cblxuZWNoYXJ0c1Byb3RvLmdldEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3pyLmdldEhlaWdodCgpO1xufTtcbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5cblxuZWNoYXJ0c1Byb3RvLmdldERldmljZVBpeGVsUmF0aW8gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl96ci5wYWludGVyLmRwciB8fCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xufTtcbi8qKlxuICogR2V0IGNhbnZhcyB3aGljaCBoYXMgYWxsIHRoaW5nIHJlbmRlcmVkXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmJhY2tncm91bmRDb2xvcl1cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuXG5cbmVjaGFydHNQcm90by5nZXRSZW5kZXJlZENhbnZhcyA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIGlmICghZW52LmNhbnZhc1N1cHBvcnRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICBvcHRzLnBpeGVsUmF0aW8gPSBvcHRzLnBpeGVsUmF0aW8gfHwgMTtcbiAgb3B0cy5iYWNrZ3JvdW5kQ29sb3IgPSBvcHRzLmJhY2tncm91bmRDb2xvciB8fCB0aGlzLl9tb2RlbC5nZXQoJ2JhY2tncm91bmRDb2xvcicpO1xuICB2YXIgenIgPSB0aGlzLl96cjsgLy8gdmFyIGxpc3QgPSB6ci5zdG9yYWdlLmdldERpc3BsYXlMaXN0KCk7XG4gIC8vIFN0b3AgYW5pbWF0aW9uc1xuICAvLyBOZXZlciB3b3JrcyBiZWZvcmUgaW4gaW5pdCBhbmltYXRpb24sIHNvIHJlbW92ZSBpdC5cbiAgLy8genJVdGlsLmVhY2gobGlzdCwgZnVuY3Rpb24gKGVsKSB7XG4gIC8vICAgICBlbC5zdG9wQW5pbWF0aW9uKHRydWUpO1xuICAvLyB9KTtcblxuICByZXR1cm4genIucGFpbnRlci5nZXRSZW5kZXJlZENhbnZhcyhvcHRzKTtcbn07XG4vKipcbiAqIEdldCBzdmcgZGF0YSB1cmxcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuXG5cbmVjaGFydHNQcm90by5nZXRTdmdEYXRhVXJsID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIWVudi5zdmdTdXBwb3J0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgenIgPSB0aGlzLl96cjtcbiAgdmFyIGxpc3QgPSB6ci5zdG9yYWdlLmdldERpc3BsYXlMaXN0KCk7IC8vIFN0b3AgYW5pbWF0aW9uc1xuXG4gIHpyVXRpbC5lYWNoKGxpc3QsIGZ1bmN0aW9uIChlbCkge1xuICAgIGVsLnN0b3BBbmltYXRpb24odHJ1ZSk7XG4gIH0pO1xuICByZXR1cm4genIucGFpbnRlci5wYXRoVG9EYXRhVXJsKCk7XG59O1xuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnR5cGU9J3BuZyddXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMucGl4ZWxSYXRpbz0xXVxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmJhY2tncm91bmRDb2xvcl1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5leGNsdWRlQ29tcG9uZW50c11cbiAqL1xuXG5cbmVjaGFydHNQcm90by5nZXREYXRhVVJMID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIHZhciBleGNsdWRlQ29tcG9uZW50cyA9IG9wdHMuZXhjbHVkZUNvbXBvbmVudHM7XG4gIHZhciBlY01vZGVsID0gdGhpcy5fbW9kZWw7XG4gIHZhciBleGNsdWRlc0NvbXBvbmVudFZpZXdzID0gW107XG4gIHZhciBzZWxmID0gdGhpcztcbiAgZWFjaChleGNsdWRlQ29tcG9uZW50cywgZnVuY3Rpb24gKGNvbXBvbmVudFR5cGUpIHtcbiAgICBlY01vZGVsLmVhY2hDb21wb25lbnQoe1xuICAgICAgbWFpblR5cGU6IGNvbXBvbmVudFR5cGVcbiAgICB9LCBmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgICB2YXIgdmlldyA9IHNlbGYuX2NvbXBvbmVudHNNYXBbY29tcG9uZW50Ll9fdmlld0lkXTtcblxuICAgICAgaWYgKCF2aWV3Lmdyb3VwLmlnbm9yZSkge1xuICAgICAgICBleGNsdWRlc0NvbXBvbmVudFZpZXdzLnB1c2godmlldyk7XG4gICAgICAgIHZpZXcuZ3JvdXAuaWdub3JlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHZhciB1cmwgPSB0aGlzLl96ci5wYWludGVyLmdldFR5cGUoKSA9PT0gJ3N2ZycgPyB0aGlzLmdldFN2Z0RhdGFVcmwoKSA6IHRoaXMuZ2V0UmVuZGVyZWRDYW52YXMob3B0cykudG9EYXRhVVJMKCdpbWFnZS8nICsgKG9wdHMgJiYgb3B0cy50eXBlIHx8ICdwbmcnKSk7XG4gIGVhY2goZXhjbHVkZXNDb21wb25lbnRWaWV3cywgZnVuY3Rpb24gKHZpZXcpIHtcbiAgICB2aWV3Lmdyb3VwLmlnbm9yZSA9IGZhbHNlO1xuICB9KTtcbiAgcmV0dXJuIHVybDtcbn07XG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMudHlwZT0ncG5nJ11cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5waXhlbFJhdGlvPTFdXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuYmFja2dyb3VuZENvbG9yXVxuICovXG5cblxuZWNoYXJ0c1Byb3RvLmdldENvbm5lY3RlZERhdGFVUkwgPSBmdW5jdGlvbiAob3B0cykge1xuICBpZiAoIWVudi5jYW52YXNTdXBwb3J0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZ3JvdXBJZCA9IHRoaXMuZ3JvdXA7XG4gIHZhciBtYXRoTWluID0gTWF0aC5taW47XG4gIHZhciBtYXRoTWF4ID0gTWF0aC5tYXg7XG4gIHZhciBNQVhfTlVNQkVSID0gSW5maW5pdHk7XG5cbiAgaWYgKGNvbm5lY3RlZEdyb3Vwc1tncm91cElkXSkge1xuICAgIHZhciBsZWZ0ID0gTUFYX05VTUJFUjtcbiAgICB2YXIgdG9wID0gTUFYX05VTUJFUjtcbiAgICB2YXIgcmlnaHQgPSAtTUFYX05VTUJFUjtcbiAgICB2YXIgYm90dG9tID0gLU1BWF9OVU1CRVI7XG4gICAgdmFyIGNhbnZhc0xpc3QgPSBbXTtcbiAgICB2YXIgZHByID0gb3B0cyAmJiBvcHRzLnBpeGVsUmF0aW8gfHwgMTtcbiAgICB6clV0aWwuZWFjaChpbnN0YW5jZXMsIGZ1bmN0aW9uIChjaGFydCwgaWQpIHtcbiAgICAgIGlmIChjaGFydC5ncm91cCA9PT0gZ3JvdXBJZCkge1xuICAgICAgICB2YXIgY2FudmFzID0gY2hhcnQuZ2V0UmVuZGVyZWRDYW52YXMoenJVdGlsLmNsb25lKG9wdHMpKTtcbiAgICAgICAgdmFyIGJvdW5kaW5nUmVjdCA9IGNoYXJ0LmdldERvbSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBsZWZ0ID0gbWF0aE1pbihib3VuZGluZ1JlY3QubGVmdCwgbGVmdCk7XG4gICAgICAgIHRvcCA9IG1hdGhNaW4oYm91bmRpbmdSZWN0LnRvcCwgdG9wKTtcbiAgICAgICAgcmlnaHQgPSBtYXRoTWF4KGJvdW5kaW5nUmVjdC5yaWdodCwgcmlnaHQpO1xuICAgICAgICBib3R0b20gPSBtYXRoTWF4KGJvdW5kaW5nUmVjdC5ib3R0b20sIGJvdHRvbSk7XG4gICAgICAgIGNhbnZhc0xpc3QucHVzaCh7XG4gICAgICAgICAgZG9tOiBjYW52YXMsXG4gICAgICAgICAgbGVmdDogYm91bmRpbmdSZWN0LmxlZnQsXG4gICAgICAgICAgdG9wOiBib3VuZGluZ1JlY3QudG9wXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGxlZnQgKj0gZHByO1xuICAgIHRvcCAqPSBkcHI7XG4gICAgcmlnaHQgKj0gZHByO1xuICAgIGJvdHRvbSAqPSBkcHI7XG4gICAgdmFyIHdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICAgIHZhciBoZWlnaHQgPSBib3R0b20gLSB0b3A7XG4gICAgdmFyIHRhcmdldENhbnZhcyA9IHpyVXRpbC5jcmVhdGVDYW52YXMoKTtcbiAgICB0YXJnZXRDYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICB0YXJnZXRDYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHZhciB6ciA9IHpyZW5kZXIuaW5pdCh0YXJnZXRDYW52YXMpO1xuICAgIGVhY2goY2FudmFzTGlzdCwgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBpbWcgPSBuZXcgZ3JhcGhpYy5JbWFnZSh7XG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgeDogaXRlbS5sZWZ0ICogZHByIC0gbGVmdCxcbiAgICAgICAgICB5OiBpdGVtLnRvcCAqIGRwciAtIHRvcCxcbiAgICAgICAgICBpbWFnZTogaXRlbS5kb21cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB6ci5hZGQoaW1nKTtcbiAgICB9KTtcbiAgICB6ci5yZWZyZXNoSW1tZWRpYXRlbHkoKTtcbiAgICByZXR1cm4gdGFyZ2V0Q2FudmFzLnRvRGF0YVVSTCgnaW1hZ2UvJyArIChvcHRzICYmIG9wdHMudHlwZSB8fCAncG5nJykpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0aGlzLmdldERhdGFVUkwob3B0cyk7XG4gIH1cbn07XG4vKipcbiAqIENvbnZlcnQgZnJvbSBsb2dpY2FsIGNvb3JkaW5hdGUgc3lzdGVtIHRvIHBpeGVsIGNvb3JkaW5hdGUgc3lzdGVtLlxuICogU2VlIENvb3JkaW5hdGVTeXN0ZW0jY29udmVydFRvUGl4ZWwuXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IGZpbmRlclxuICogICAgICAgIElmIHN0cmluZywgZS5nLiwgJ2dlbycsIG1lYW5zIHtnZW9JbmRleDogMH0uXG4gKiAgICAgICAgSWYgT2JqZWN0LCBjb3VsZCBjb250YWluIHNvbWUgb2YgdGhlc2UgcHJvcGVydGllcyBiZWxvdzpcbiAqICAgICAgICB7XG4gKiAgICAgICAgICAgIHNlcmllc0luZGV4IC8gc2VyaWVzSWQgLyBzZXJpZXNOYW1lLFxuICogICAgICAgICAgICBnZW9JbmRleCAvIGdlb0lkLCBnZW9OYW1lLFxuICogICAgICAgICAgICBibWFwSW5kZXggLyBibWFwSWQgLyBibWFwTmFtZSxcbiAqICAgICAgICAgICAgeEF4aXNJbmRleCAvIHhBeGlzSWQgLyB4QXhpc05hbWUsXG4gKiAgICAgICAgICAgIHlBeGlzSW5kZXggLyB5QXhpc0lkIC8geUF4aXNOYW1lLFxuICogICAgICAgICAgICBncmlkSW5kZXggLyBncmlkSWQgLyBncmlkTmFtZSxcbiAqICAgICAgICAgICAgLi4uIChjYW4gYmUgZXh0ZW5kZWQpXG4gKiAgICAgICAgfVxuICogQHBhcmFtIHtBcnJheXxudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHtBcnJheXxudW1iZXJ9IHJlc3VsdFxuICovXG5cblxuZWNoYXJ0c1Byb3RvLmNvbnZlcnRUb1BpeGVsID0genJVdGlsLmN1cnJ5KGRvQ29udmVydFBpeGVsLCAnY29udmVydFRvUGl4ZWwnKTtcbi8qKlxuICogQ29udmVydCBmcm9tIHBpeGVsIGNvb3JkaW5hdGUgc3lzdGVtIHRvIGxvZ2ljYWwgY29vcmRpbmF0ZSBzeXN0ZW0uXG4gKiBTZWUgQ29vcmRpbmF0ZVN5c3RlbSNjb252ZXJ0RnJvbVBpeGVsLlxuICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBmaW5kZXJcbiAqICAgICAgICBJZiBzdHJpbmcsIGUuZy4sICdnZW8nLCBtZWFucyB7Z2VvSW5kZXg6IDB9LlxuICogICAgICAgIElmIE9iamVjdCwgY291bGQgY29udGFpbiBzb21lIG9mIHRoZXNlIHByb3BlcnRpZXMgYmVsb3c6XG4gKiAgICAgICAge1xuICogICAgICAgICAgICBzZXJpZXNJbmRleCAvIHNlcmllc0lkIC8gc2VyaWVzTmFtZSxcbiAqICAgICAgICAgICAgZ2VvSW5kZXggLyBnZW9JZCAvIGdlb05hbWUsXG4gKiAgICAgICAgICAgIGJtYXBJbmRleCAvIGJtYXBJZCAvIGJtYXBOYW1lLFxuICogICAgICAgICAgICB4QXhpc0luZGV4IC8geEF4aXNJZCAvIHhBeGlzTmFtZSxcbiAqICAgICAgICAgICAgeUF4aXNJbmRleCAvIHlBeGlzSWQgLyB5QXhpc05hbWVcbiAqICAgICAgICAgICAgZ3JpZEluZGV4IC8gZ3JpZElkIC8gZ3JpZE5hbWUsXG4gKiAgICAgICAgICAgIC4uLiAoY2FuIGJlIGV4dGVuZGVkKVxuICogICAgICAgIH1cbiAqIEBwYXJhbSB7QXJyYXl8bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7QXJyYXl8bnVtYmVyfSByZXN1bHRcbiAqL1xuXG5lY2hhcnRzUHJvdG8uY29udmVydEZyb21QaXhlbCA9IHpyVXRpbC5jdXJyeShkb0NvbnZlcnRQaXhlbCwgJ2NvbnZlcnRGcm9tUGl4ZWwnKTtcblxuZnVuY3Rpb24gZG9Db252ZXJ0UGl4ZWwobWV0aG9kTmFtZSwgZmluZGVyLCB2YWx1ZSkge1xuICB2YXIgZWNNb2RlbCA9IHRoaXMuX21vZGVsO1xuXG4gIHZhciBjb29yZFN5c0xpc3QgPSB0aGlzLl9jb29yZFN5c01nci5nZXRDb29yZGluYXRlU3lzdGVtcygpO1xuXG4gIHZhciByZXN1bHQ7XG4gIGZpbmRlciA9IG1vZGVsVXRpbC5wYXJzZUZpbmRlcihlY01vZGVsLCBmaW5kZXIpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29vcmRTeXNMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGNvb3JkU3lzID0gY29vcmRTeXNMaXN0W2ldO1xuXG4gICAgaWYgKGNvb3JkU3lzW21ldGhvZE5hbWVdICYmIChyZXN1bHQgPSBjb29yZFN5c1ttZXRob2ROYW1lXShlY01vZGVsLCBmaW5kZXIsIHZhbHVlKSkgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogSXMgdGhlIHNwZWNpZmllZCBjb29yZGluYXRlIHN5c3RlbXMgb3IgY29tcG9uZW50cyBjb250YWluIHRoZSBnaXZlbiBwaXhlbCBwb2ludC5cbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gZmluZGVyXG4gKiAgICAgICAgSWYgc3RyaW5nLCBlLmcuLCAnZ2VvJywgbWVhbnMge2dlb0luZGV4OiAwfS5cbiAqICAgICAgICBJZiBPYmplY3QsIGNvdWxkIGNvbnRhaW4gc29tZSBvZiB0aGVzZSBwcm9wZXJ0aWVzIGJlbG93OlxuICogICAgICAgIHtcbiAqICAgICAgICAgICAgc2VyaWVzSW5kZXggLyBzZXJpZXNJZCAvIHNlcmllc05hbWUsXG4gKiAgICAgICAgICAgIGdlb0luZGV4IC8gZ2VvSWQgLyBnZW9OYW1lLFxuICogICAgICAgICAgICBibWFwSW5kZXggLyBibWFwSWQgLyBibWFwTmFtZSxcbiAqICAgICAgICAgICAgeEF4aXNJbmRleCAvIHhBeGlzSWQgLyB4QXhpc05hbWUsXG4gKiAgICAgICAgICAgIHlBeGlzSW5kZXggLyB5QXhpc0lkIC8geUF4aXNOYW1lLFxuICogICAgICAgICAgICBncmlkSW5kZXggLyBncmlkSWQgLyBncmlkTmFtZSxcbiAqICAgICAgICAgICAgLi4uIChjYW4gYmUgZXh0ZW5kZWQpXG4gKiAgICAgICAgfVxuICogQHBhcmFtIHtBcnJheXxudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHtib29sZWFufSByZXN1bHRcbiAqL1xuXG5cbmVjaGFydHNQcm90by5jb250YWluUGl4ZWwgPSBmdW5jdGlvbiAoZmluZGVyLCB2YWx1ZSkge1xuICB2YXIgZWNNb2RlbCA9IHRoaXMuX21vZGVsO1xuICB2YXIgcmVzdWx0O1xuICBmaW5kZXIgPSBtb2RlbFV0aWwucGFyc2VGaW5kZXIoZWNNb2RlbCwgZmluZGVyKTtcbiAgenJVdGlsLmVhY2goZmluZGVyLCBmdW5jdGlvbiAobW9kZWxzLCBrZXkpIHtcbiAgICBrZXkuaW5kZXhPZignTW9kZWxzJykgPj0gMCAmJiB6clV0aWwuZWFjaChtb2RlbHMsIGZ1bmN0aW9uIChtb2RlbCkge1xuICAgICAgdmFyIGNvb3JkU3lzID0gbW9kZWwuY29vcmRpbmF0ZVN5c3RlbTtcblxuICAgICAgaWYgKGNvb3JkU3lzICYmIGNvb3JkU3lzLmNvbnRhaW5Qb2ludCkge1xuICAgICAgICByZXN1bHQgfD0gISFjb29yZFN5cy5jb250YWluUG9pbnQodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdzZXJpZXNNb2RlbHMnKSB7XG4gICAgICAgIHZhciB2aWV3ID0gdGhpcy5fY2hhcnRzTWFwW21vZGVsLl9fdmlld0lkXTtcblxuICAgICAgICBpZiAodmlldyAmJiB2aWV3LmNvbnRhaW5Qb2ludCkge1xuICAgICAgICAgIHJlc3VsdCB8PSB2aWV3LmNvbnRhaW5Qb2ludCh2YWx1ZSwgbW9kZWwpO1xuICAgICAgICB9IGVsc2Uge31cbiAgICAgIH0gZWxzZSB7fVxuICAgIH0sIHRoaXMpO1xuICB9LCB0aGlzKTtcbiAgcmV0dXJuICEhcmVzdWx0O1xufTtcbi8qKlxuICogR2V0IHZpc3VhbCBmcm9tIHNlcmllcyBvciBkYXRhLlxuICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBmaW5kZXJcbiAqICAgICAgICBJZiBzdHJpbmcsIGUuZy4sICdzZXJpZXMnLCBtZWFucyB7c2VyaWVzSW5kZXg6IDB9LlxuICogICAgICAgIElmIE9iamVjdCwgY291bGQgY29udGFpbiBzb21lIG9mIHRoZXNlIHByb3BlcnRpZXMgYmVsb3c6XG4gKiAgICAgICAge1xuICogICAgICAgICAgICBzZXJpZXNJbmRleCAvIHNlcmllc0lkIC8gc2VyaWVzTmFtZSxcbiAqICAgICAgICAgICAgZGF0YUluZGV4IC8gZGF0YUluZGV4SW5zaWRlXG4gKiAgICAgICAgfVxuICogICAgICAgIElmIGRhdGFJbmRleCBpcyBub3Qgc3BlY2lmaWVkLCBzZXJpZXMgdmlzdWFsIHdpbGwgYmUgZmV0Y2hlZCxcbiAqICAgICAgICBidXQgbm90IGRhdGEgaXRlbSB2aXN1YWwuXG4gKiAgICAgICAgSWYgYWxsIG9mIHNlcmllc0luZGV4LCBzZXJpZXNJZCwgc2VyaWVzTmFtZSBhcmUgbm90IHNwZWNpZmllZCxcbiAqICAgICAgICB2aXN1YWwgd2lsbCBiZSBmZXRjaGVkIGZyb20gZmlyc3Qgc2VyaWVzLlxuICogQHBhcmFtIHtzdHJpbmd9IHZpc3VhbFR5cGUgJ2NvbG9yJywgJ3N5bWJvbCcsICdzeW1ib2xTaXplJ1xuICovXG5cblxuZWNoYXJ0c1Byb3RvLmdldFZpc3VhbCA9IGZ1bmN0aW9uIChmaW5kZXIsIHZpc3VhbFR5cGUpIHtcbiAgdmFyIGVjTW9kZWwgPSB0aGlzLl9tb2RlbDtcbiAgZmluZGVyID0gbW9kZWxVdGlsLnBhcnNlRmluZGVyKGVjTW9kZWwsIGZpbmRlciwge1xuICAgIGRlZmF1bHRNYWluVHlwZTogJ3NlcmllcydcbiAgfSk7XG4gIHZhciBzZXJpZXNNb2RlbCA9IGZpbmRlci5zZXJpZXNNb2RlbDtcbiAgdmFyIGRhdGEgPSBzZXJpZXNNb2RlbC5nZXREYXRhKCk7XG4gIHZhciBkYXRhSW5kZXhJbnNpZGUgPSBmaW5kZXIuaGFzT3duUHJvcGVydHkoJ2RhdGFJbmRleEluc2lkZScpID8gZmluZGVyLmRhdGFJbmRleEluc2lkZSA6IGZpbmRlci5oYXNPd25Qcm9wZXJ0eSgnZGF0YUluZGV4JykgPyBkYXRhLmluZGV4T2ZSYXdJbmRleChmaW5kZXIuZGF0YUluZGV4KSA6IG51bGw7XG4gIHJldHVybiBkYXRhSW5kZXhJbnNpZGUgIT0gbnVsbCA/IGRhdGEuZ2V0SXRlbVZpc3VhbChkYXRhSW5kZXhJbnNpZGUsIHZpc3VhbFR5cGUpIDogZGF0YS5nZXRWaXN1YWwodmlzdWFsVHlwZSk7XG59O1xuLyoqXG4gKiBHZXQgdmlldyBvZiBjb3JyZXNwb25kaW5nIGNvbXBvbmVudCBtb2RlbFxuICogQHBhcmFtICB7bW9kdWxlOmVjaGFydHMvbW9kZWwvQ29tcG9uZW50fSBjb21wb25lbnRNb2RlbFxuICogQHJldHVybiB7bW9kdWxlOmVjaGFydHMvdmlldy9Db21wb25lbnR9XG4gKi9cblxuXG5lY2hhcnRzUHJvdG8uZ2V0Vmlld09mQ29tcG9uZW50TW9kZWwgPSBmdW5jdGlvbiAoY29tcG9uZW50TW9kZWwpIHtcbiAgcmV0dXJuIHRoaXMuX2NvbXBvbmVudHNNYXBbY29tcG9uZW50TW9kZWwuX192aWV3SWRdO1xufTtcbi8qKlxuICogR2V0IHZpZXcgb2YgY29ycmVzcG9uZGluZyBzZXJpZXMgbW9kZWxcbiAqIEBwYXJhbSAge21vZHVsZTplY2hhcnRzL21vZGVsL1Nlcmllc30gc2VyaWVzTW9kZWxcbiAqIEByZXR1cm4ge21vZHVsZTplY2hhcnRzL3ZpZXcvQ2hhcnR9XG4gKi9cblxuXG5lY2hhcnRzUHJvdG8uZ2V0Vmlld09mU2VyaWVzTW9kZWwgPSBmdW5jdGlvbiAoc2VyaWVzTW9kZWwpIHtcbiAgcmV0dXJuIHRoaXMuX2NoYXJ0c01hcFtzZXJpZXNNb2RlbC5fX3ZpZXdJZF07XG59O1xuXG52YXIgdXBkYXRlTWV0aG9kcyA9IHtcbiAgcHJlcGFyZUFuZFVwZGF0ZTogZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICBwcmVwYXJlKHRoaXMpO1xuICAgIHVwZGF0ZU1ldGhvZHMudXBkYXRlLmNhbGwodGhpcywgcGF5bG9hZCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB1cGRhdGU6IGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgLy8gY29uc29sZS5wcm9maWxlICYmIGNvbnNvbGUucHJvZmlsZSgndXBkYXRlJyk7XG4gICAgdmFyIGVjTW9kZWwgPSB0aGlzLl9tb2RlbDtcbiAgICB2YXIgYXBpID0gdGhpcy5fYXBpO1xuICAgIHZhciB6ciA9IHRoaXMuX3pyO1xuICAgIHZhciBjb29yZFN5c01nciA9IHRoaXMuX2Nvb3JkU3lzTWdyO1xuICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLl9zY2hlZHVsZXI7IC8vIHVwZGF0ZSBiZWZvcmUgc2V0T3B0aW9uXG5cbiAgICBpZiAoIWVjTW9kZWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzY2hlZHVsZXIucmVzdG9yZURhdGEoZWNNb2RlbCwgcGF5bG9hZCk7XG4gICAgc2NoZWR1bGVyLnBlcmZvcm1TZXJpZXNUYXNrcyhlY01vZGVsKTsgLy8gVE9ET1xuICAgIC8vIFNhdmUgdG90YWwgZWNNb2RlbCBoZXJlIGZvciB1bmRvL3JlZG8gKGFmdGVyIHJlc3RvcmluZyBkYXRhIGFuZCBiZWZvcmUgcHJvY2Vzc2luZyBkYXRhKS5cbiAgICAvLyBVbmRvIChyZXN0b3JhdGlvbiBvZiB0b3RhbCBlY01vZGVsKSBjYW4gYmUgY2FycmllZCBvdXQgaW4gJ2FjdGlvbicgb3Igb3V0c2lkZSBBUEkgY2FsbC5cbiAgICAvLyBDcmVhdGUgbmV3IGNvb3JkaW5hdGUgc3lzdGVtIGVhY2ggdXBkYXRlXG4gICAgLy8gSW4gTGluZVZpZXcgbWF5IHNhdmUgdGhlIG9sZCBjb29yZGluYXRlIHN5c3RlbSBhbmQgdXNlIGl0IHRvIGdldCB0aGUgb3JpZ25hbCBwb2ludFxuXG4gICAgY29vcmRTeXNNZ3IuY3JlYXRlKGVjTW9kZWwsIGFwaSk7XG4gICAgc2NoZWR1bGVyLnBlcmZvcm1EYXRhUHJvY2Vzc29yVGFza3MoZWNNb2RlbCwgcGF5bG9hZCk7IC8vIEN1cnJlbnQgc3RyZWFtIHJlbmRlciBpcyBub3Qgc3VwcG9ydGVkIGluIGRhdGEgcHJvY2Vzcy4gU28gd2UgY2FuIHVwZGF0ZVxuICAgIC8vIHN0cmVhbSBtb2RlcyBhZnRlciBkYXRhIHByb2Nlc3NpbmcsIHdoZXJlIHRoZSBmaWx0ZXJlZCBkYXRhIGlzIHVzZWQgdG9cbiAgICAvLyBkZXRlbWluZyB3aGV0aGVyIHVzZSBwcm9ncmVzc2l2ZSByZW5kZXJpbmcuXG5cbiAgICB1cGRhdGVTdHJlYW1Nb2Rlcyh0aGlzLCBlY01vZGVsKTsgLy8gV2UgdXBkYXRlIHN0cmVhbSBtb2RlcyBiZWZvcmUgY29vcmRpbmF0ZSBzeXN0ZW0gdXBkYXRlZCwgdGhlbiB0aGUgbW9kZXMgaW5mb1xuICAgIC8vIGNhbiBiZSBmZXRjaGVkIHdoZW4gY29vcmQgc3lzIHVwZGF0aW5nIChjb25zaWRlciB0aGUgYmFyR3JpZCBleHRlbnQgZml4KS4gQnV0XG4gICAgLy8gdGhlIGRyYXdiYWNrIGlzIHRoZSBmdWxsIGNvb3JkIGluZm8gY2FuIG5vdCBiZSBmZXRjaGVkLiBGb3J0dW5hdGVseSB0aGlzIGZ1bGxcbiAgICAvLyBjb29yZCBpcyBub3QgcmVxdWllZCBpbiBzdHJlYW0gbW9kZSB1cGRhdGVyIGN1cnJlbnRseS5cblxuICAgIGNvb3JkU3lzTWdyLnVwZGF0ZShlY01vZGVsLCBhcGkpO1xuICAgIGNsZWFyQ29sb3JQYWxldHRlKGVjTW9kZWwpO1xuICAgIHNjaGVkdWxlci5wZXJmb3JtVmlzdWFsVGFza3MoZWNNb2RlbCwgcGF5bG9hZCk7XG4gICAgcmVuZGVyKHRoaXMsIGVjTW9kZWwsIGFwaSwgcGF5bG9hZCk7IC8vIFNldCBiYWNrZ3JvdW5kXG5cbiAgICB2YXIgYmFja2dyb3VuZENvbG9yID0gZWNNb2RlbC5nZXQoJ2JhY2tncm91bmRDb2xvcicpIHx8ICd0cmFuc3BhcmVudCc7IC8vIEluIElFOFxuXG4gICAgaWYgKCFlbnYuY2FudmFzU3VwcG9ydGVkKSB7XG4gICAgICB2YXIgY29sb3JBcnIgPSBjb2xvclRvb2wucGFyc2UoYmFja2dyb3VuZENvbG9yKTtcbiAgICAgIGJhY2tncm91bmRDb2xvciA9IGNvbG9yVG9vbC5zdHJpbmdpZnkoY29sb3JBcnIsICdyZ2InKTtcblxuICAgICAgaWYgKGNvbG9yQXJyWzNdID09PSAwKSB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvciA9ICd0cmFuc3BhcmVudCc7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHpyLnNldEJhY2tncm91bmRDb2xvcihiYWNrZ3JvdW5kQ29sb3IpO1xuICAgIH1cblxuICAgIHBlcmZvcm1Qb3N0VXBkYXRlRnVuY3MoZWNNb2RlbCwgYXBpKTsgLy8gY29uc29sZS5wcm9maWxlICYmIGNvbnNvbGUucHJvZmlsZUVuZCgndXBkYXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB1cGRhdGVUcmFuc2Zvcm06IGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgdmFyIGVjTW9kZWwgPSB0aGlzLl9tb2RlbDtcbiAgICB2YXIgZWNJbnMgPSB0aGlzO1xuICAgIHZhciBhcGkgPSB0aGlzLl9hcGk7IC8vIHVwZGF0ZSBiZWZvcmUgc2V0T3B0aW9uXG5cbiAgICBpZiAoIWVjTW9kZWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIENoYXJ0Vmlldy5tYXJrVXBkYXRlTWV0aG9kKHBheWxvYWQsICd1cGRhdGVUcmFuc2Zvcm0nKTtcblxuXG4gICAgdmFyIGNvbXBvbmVudERpcnR5TGlzdCA9IFtdO1xuICAgIGVjTW9kZWwuZWFjaENvbXBvbmVudChmdW5jdGlvbiAoY29tcG9uZW50VHlwZSwgY29tcG9uZW50TW9kZWwpIHtcbiAgICAgIHZhciBjb21wb25lbnRWaWV3ID0gZWNJbnMuZ2V0Vmlld09mQ29tcG9uZW50TW9kZWwoY29tcG9uZW50TW9kZWwpO1xuXG4gICAgICBpZiAoY29tcG9uZW50VmlldyAmJiBjb21wb25lbnRWaWV3Ll9fYWxpdmUpIHtcbiAgICAgICAgaWYgKGNvbXBvbmVudFZpZXcudXBkYXRlVHJhbnNmb3JtKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGNvbXBvbmVudFZpZXcudXBkYXRlVHJhbnNmb3JtKGNvbXBvbmVudE1vZGVsLCBlY01vZGVsLCBhcGksIHBheWxvYWQpO1xuICAgICAgICAgIHJlc3VsdCAmJiByZXN1bHQudXBkYXRlICYmIGNvbXBvbmVudERpcnR5TGlzdC5wdXNoKGNvbXBvbmVudFZpZXcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbXBvbmVudERpcnR5TGlzdC5wdXNoKGNvbXBvbmVudFZpZXcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIHNlcmllc0RpcnR5TWFwID0genJVdGlsLmNyZWF0ZUhhc2hNYXAoKTtcbiAgICBlY01vZGVsLmVhY2hTZXJpZXMoZnVuY3Rpb24gKHNlcmllc01vZGVsKSB7XG4gICAgICB2YXIgY2hhcnRWaWV3ID0gZWNJbnMuX2NoYXJ0c01hcFtzZXJpZXNNb2RlbC5fX3ZpZXdJZF07XG5cbiAgICAgIGlmIChjaGFydFZpZXcudXBkYXRlVHJhbnNmb3JtKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjaGFydFZpZXcudXBkYXRlVHJhbnNmb3JtKHNlcmllc01vZGVsLCBlY01vZGVsLCBhcGksIHBheWxvYWQpO1xuICAgICAgICByZXN1bHQgJiYgcmVzdWx0LnVwZGF0ZSAmJiBzZXJpZXNEaXJ0eU1hcC5zZXQoc2VyaWVzTW9kZWwudWlkLCAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlcmllc0RpcnR5TWFwLnNldChzZXJpZXNNb2RlbC51aWQsIDEpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNsZWFyQ29sb3JQYWxldHRlKGVjTW9kZWwpOyAvLyBLZWVwIHBpcGUgdG8gdGhlIGV4aXN0IHBpcGVsaW5lIGJlY2F1c2UgaXQgZGVwZW5kcyBvbiB0aGUgcmVuZGVyIHRhc2sgb2YgdGhlIGZ1bGwgcGlwZWxpbmUuXG4gICAgLy8gdGhpcy5fc2NoZWR1bGVyLnBlcmZvcm1WaXN1YWxUYXNrcyhlY01vZGVsLCBwYXlsb2FkLCAnbGF5b3V0JywgdHJ1ZSk7XG5cbiAgICB0aGlzLl9zY2hlZHVsZXIucGVyZm9ybVZpc3VhbFRhc2tzKGVjTW9kZWwsIHBheWxvYWQsIHtcbiAgICAgIHNldERpcnR5OiB0cnVlLFxuICAgICAgZGlydHlNYXA6IHNlcmllc0RpcnR5TWFwXG4gICAgfSk7IC8vIEN1cnJlbnRseSwgbm90IGNhbGwgcmVuZGVyIG9mIGNvbXBvbmVudHMuIEdlbyByZW5kZXIgY29zdCBhIGxvdC5cbiAgICAvLyByZW5kZXJDb21wb25lbnRzKGVjSW5zLCBlY01vZGVsLCBhcGksIHBheWxvYWQsIGNvbXBvbmVudERpcnR5TGlzdCk7XG5cblxuICAgIHJlbmRlclNlcmllcyhlY0lucywgZWNNb2RlbCwgYXBpLCBwYXlsb2FkLCBzZXJpZXNEaXJ0eU1hcCk7XG4gICAgcGVyZm9ybVBvc3RVcGRhdGVGdW5jcyhlY01vZGVsLCB0aGlzLl9hcGkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGF5bG9hZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdXBkYXRlVmlldzogZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICB2YXIgZWNNb2RlbCA9IHRoaXMuX21vZGVsOyAvLyB1cGRhdGUgYmVmb3JlIHNldE9wdGlvblxuXG4gICAgaWYgKCFlY01vZGVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgQ2hhcnRWaWV3Lm1hcmtVcGRhdGVNZXRob2QocGF5bG9hZCwgJ3VwZGF0ZVZpZXcnKTtcbiAgICBjbGVhckNvbG9yUGFsZXR0ZShlY01vZGVsKTsgLy8gS2VlcCBwaXBlIHRvIHRoZSBleGlzdCBwaXBlbGluZSBiZWNhdXNlIGl0IGRlcGVuZHMgb24gdGhlIHJlbmRlciB0YXNrIG9mIHRoZSBmdWxsIHBpcGVsaW5lLlxuXG4gICAgdGhpcy5fc2NoZWR1bGVyLnBlcmZvcm1WaXN1YWxUYXNrcyhlY01vZGVsLCBwYXlsb2FkLCB7XG4gICAgICBzZXREaXJ0eTogdHJ1ZVxuICAgIH0pO1xuXG4gICAgcmVuZGVyKHRoaXMsIHRoaXMuX21vZGVsLCB0aGlzLl9hcGksIHBheWxvYWQpO1xuICAgIHBlcmZvcm1Qb3N0VXBkYXRlRnVuY3MoZWNNb2RlbCwgdGhpcy5fYXBpKTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHVwZGF0ZVZpc3VhbDogZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICB1cGRhdGVNZXRob2RzLnVwZGF0ZS5jYWxsKHRoaXMsIHBheWxvYWQpOyAvLyB2YXIgZWNNb2RlbCA9IHRoaXMuX21vZGVsO1xuICAgIC8vIC8vIHVwZGF0ZSBiZWZvcmUgc2V0T3B0aW9uXG4gICAgLy8gaWYgKCFlY01vZGVsKSB7XG4gICAgLy8gICAgIHJldHVybjtcbiAgICAvLyB9XG4gICAgLy8gQ2hhcnRWaWV3Lm1hcmtVcGRhdGVNZXRob2QocGF5bG9hZCwgJ3VwZGF0ZVZpc3VhbCcpO1xuICAgIC8vIGNsZWFyQ29sb3JQYWxldHRlKGVjTW9kZWwpO1xuICAgIC8vIC8vIEtlZXAgcGlwZSB0byB0aGUgZXhpc3QgcGlwZWxpbmUgYmVjYXVzZSBpdCBkZXBlbmRzIG9uIHRoZSByZW5kZXIgdGFzayBvZiB0aGUgZnVsbCBwaXBlbGluZS5cbiAgICAvLyB0aGlzLl9zY2hlZHVsZXIucGVyZm9ybVZpc3VhbFRhc2tzKGVjTW9kZWwsIHBheWxvYWQsIHt2aXN1YWxUeXBlOiAndmlzdWFsJywgc2V0RGlydHk6IHRydWV9KTtcbiAgICAvLyByZW5kZXIodGhpcywgdGhpcy5fbW9kZWwsIHRoaXMuX2FwaSwgcGF5bG9hZCk7XG4gICAgLy8gcGVyZm9ybVBvc3RVcGRhdGVGdW5jcyhlY01vZGVsLCB0aGlzLl9hcGkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGF5bG9hZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdXBkYXRlTGF5b3V0OiBmdW5jdGlvbiAocGF5bG9hZCkge1xuICAgIHVwZGF0ZU1ldGhvZHMudXBkYXRlLmNhbGwodGhpcywgcGF5bG9hZCk7IC8vIHZhciBlY01vZGVsID0gdGhpcy5fbW9kZWw7XG4gICAgLy8gLy8gdXBkYXRlIGJlZm9yZSBzZXRPcHRpb25cbiAgICAvLyBpZiAoIWVjTW9kZWwpIHtcbiAgICAvLyAgICAgcmV0dXJuO1xuICAgIC8vIH1cbiAgICAvLyBDaGFydFZpZXcubWFya1VwZGF0ZU1ldGhvZChwYXlsb2FkLCAndXBkYXRlTGF5b3V0Jyk7XG4gICAgLy8gLy8gS2VlcCBwaXBlIHRvIHRoZSBleGlzdCBwaXBlbGluZSBiZWNhdXNlIGl0IGRlcGVuZHMgb24gdGhlIHJlbmRlciB0YXNrIG9mIHRoZSBmdWxsIHBpcGVsaW5lLlxuICAgIC8vIC8vIHRoaXMuX3NjaGVkdWxlci5wZXJmb3JtVmlzdWFsVGFza3MoZWNNb2RlbCwgcGF5bG9hZCwgJ2xheW91dCcsIHRydWUpO1xuICAgIC8vIHRoaXMuX3NjaGVkdWxlci5wZXJmb3JtVmlzdWFsVGFza3MoZWNNb2RlbCwgcGF5bG9hZCwge3NldERpcnR5OiB0cnVlfSk7XG4gICAgLy8gcmVuZGVyKHRoaXMsIHRoaXMuX21vZGVsLCB0aGlzLl9hcGksIHBheWxvYWQpO1xuICAgIC8vIHBlcmZvcm1Qb3N0VXBkYXRlRnVuY3MoZWNNb2RlbCwgdGhpcy5fYXBpKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcHJlcGFyZShlY0lucykge1xuICB2YXIgZWNNb2RlbCA9IGVjSW5zLl9tb2RlbDtcbiAgdmFyIHNjaGVkdWxlciA9IGVjSW5zLl9zY2hlZHVsZXI7XG4gIHNjaGVkdWxlci5yZXN0b3JlUGlwZWxpbmVzKGVjTW9kZWwpO1xuICBzY2hlZHVsZXIucHJlcGFyZVN0YWdlVGFza3MoKTtcbiAgcHJlcGFyZVZpZXcoZWNJbnMsICdjb21wb25lbnQnLCBlY01vZGVsLCBzY2hlZHVsZXIpO1xuICBwcmVwYXJlVmlldyhlY0lucywgJ2NoYXJ0JywgZWNNb2RlbCwgc2NoZWR1bGVyKTtcbiAgc2NoZWR1bGVyLnBsYW4oKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIHVwZGF0ZURpcmVjdGx5KGVjSW5zLCBtZXRob2QsIHBheWxvYWQsIG1haW5UeXBlLCBzdWJUeXBlKSB7XG4gIHZhciBlY01vZGVsID0gZWNJbnMuX21vZGVsOyAvLyBicm9hZGNhc3RcblxuICBpZiAoIW1haW5UeXBlKSB7XG4gICAgLy8gRklYTUVcbiAgICAvLyBDaGFydCB3aWxsIG5vdCBiZSB1cGRhdGUgZGlyZWN0bHkgaGVyZSwgZXhjZXB0IHNldCBkaXJ0eS5cbiAgICAvLyBCdXQgdGhlcmUgaXMgbm8gc3VjaCBzY2VuYXJpbyBub3cuXG4gICAgZWFjaChlY0lucy5fY29tcG9uZW50c1ZpZXdzLmNvbmNhdChlY0lucy5fY2hhcnRzVmlld3MpLCBjYWxsVmlldyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHF1ZXJ5ID0ge307XG4gIHF1ZXJ5W21haW5UeXBlICsgJ0lkJ10gPSBwYXlsb2FkW21haW5UeXBlICsgJ0lkJ107XG4gIHF1ZXJ5W21haW5UeXBlICsgJ0luZGV4J10gPSBwYXlsb2FkW21haW5UeXBlICsgJ0luZGV4J107XG4gIHF1ZXJ5W21haW5UeXBlICsgJ05hbWUnXSA9IHBheWxvYWRbbWFpblR5cGUgKyAnTmFtZSddO1xuICB2YXIgY29uZGl0aW9uID0ge1xuICAgIG1haW5UeXBlOiBtYWluVHlwZSxcbiAgICBxdWVyeTogcXVlcnlcbiAgfTtcbiAgc3ViVHlwZSAmJiAoY29uZGl0aW9uLnN1YlR5cGUgPSBzdWJUeXBlKTsgLy8gc3ViVHlwZSBtYXkgYmUgJycgYnkgcGFyc2VDbGFzc1R5cGU7XG5cbiAgdmFyIGV4Y2x1ZGVTZXJpZXNJZCA9IHBheWxvYWQuZXhjbHVkZVNlcmllc0lkO1xuXG4gIGlmIChleGNsdWRlU2VyaWVzSWQgIT0gbnVsbCkge1xuICAgIGV4Y2x1ZGVTZXJpZXNJZCA9IHpyVXRpbC5jcmVhdGVIYXNoTWFwKG1vZGVsVXRpbC5ub3JtYWxpemVUb0FycmF5KGV4Y2x1ZGVTZXJpZXNJZCkpO1xuICB9IC8vIElmIGRpc3BhdGNoQWN0aW9uIGJlZm9yZSBzZXRPcHRpb24sIGRvIG5vdGhpbmcuXG5cblxuICBlY01vZGVsICYmIGVjTW9kZWwuZWFjaENvbXBvbmVudChjb25kaXRpb24sIGZ1bmN0aW9uIChtb2RlbCkge1xuICAgIGlmICghZXhjbHVkZVNlcmllc0lkIHx8IGV4Y2x1ZGVTZXJpZXNJZC5nZXQobW9kZWwuaWQpID09IG51bGwpIHtcbiAgICAgIGNhbGxWaWV3KGVjSW5zW21haW5UeXBlID09PSAnc2VyaWVzJyA/ICdfY2hhcnRzTWFwJyA6ICdfY29tcG9uZW50c01hcCddW21vZGVsLl9fdmlld0lkXSk7XG4gICAgfVxuICB9LCBlY0lucyk7XG5cbiAgZnVuY3Rpb24gY2FsbFZpZXcodmlldykge1xuICAgIHZpZXcgJiYgdmlldy5fX2FsaXZlICYmIHZpZXdbbWV0aG9kXSAmJiB2aWV3W21ldGhvZF0odmlldy5fX21vZGVsLCBlY01vZGVsLCBlY0lucy5fYXBpLCBwYXlsb2FkKTtcbiAgfVxufVxuLyoqXG4gKiBSZXNpemUgdGhlIGNoYXJ0XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLndpZHRoXSBDYW4gYmUgJ2F1dG8nICh0aGUgc2FtZSBhcyBudWxsL3VuZGVmaW5lZClcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5oZWlnaHRdIENhbiBiZSAnYXV0bycgKHRoZSBzYW1lIGFzIG51bGwvdW5kZWZpbmVkKVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zaWxlbnQ9ZmFsc2VdXG4gKi9cblxuXG5lY2hhcnRzUHJvdG8ucmVzaXplID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgdGhpcy5fenIucmVzaXplKG9wdHMpO1xuXG4gIHZhciBlY01vZGVsID0gdGhpcy5fbW9kZWw7IC8vIFJlc2l6ZSBsb2FkaW5nIGVmZmVjdFxuXG4gIHRoaXMuX2xvYWRpbmdGWCAmJiB0aGlzLl9sb2FkaW5nRlgucmVzaXplKCk7XG5cbiAgaWYgKCFlY01vZGVsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG9wdGlvbkNoYW5nZWQgPSBlY01vZGVsLnJlc2V0T3B0aW9uKCdtZWRpYScpO1xuICB2YXIgc2lsZW50ID0gb3B0cyAmJiBvcHRzLnNpbGVudDtcbiAgdGhpc1tJTl9NQUlOX1BST0NFU1NdID0gdHJ1ZTtcbiAgb3B0aW9uQ2hhbmdlZCAmJiBwcmVwYXJlKHRoaXMpO1xuICB1cGRhdGVNZXRob2RzLnVwZGF0ZS5jYWxsKHRoaXMpO1xuICB0aGlzW0lOX01BSU5fUFJPQ0VTU10gPSBmYWxzZTtcbiAgZmx1c2hQZW5kaW5nQWN0aW9ucy5jYWxsKHRoaXMsIHNpbGVudCk7XG4gIHRyaWdnZXJVcGRhdGVkRXZlbnQuY2FsbCh0aGlzLCBzaWxlbnQpO1xufTtcblxuZnVuY3Rpb24gdXBkYXRlU3RyZWFtTW9kZXMoZWNJbnMsIGVjTW9kZWwpIHtcbiAgdmFyIGNoYXJ0c01hcCA9IGVjSW5zLl9jaGFydHNNYXA7XG4gIHZhciBzY2hlZHVsZXIgPSBlY0lucy5fc2NoZWR1bGVyO1xuICBlY01vZGVsLmVhY2hTZXJpZXMoZnVuY3Rpb24gKHNlcmllc01vZGVsKSB7XG4gICAgc2NoZWR1bGVyLnVwZGF0ZVN0cmVhbU1vZGVzKHNlcmllc01vZGVsLCBjaGFydHNNYXBbc2VyaWVzTW9kZWwuX192aWV3SWRdKTtcbiAgfSk7XG59XG4vKipcbiAqIFNob3cgbG9hZGluZyBlZmZlY3RcbiAqIEBwYXJhbSAge3N0cmluZ30gW25hbWU9J2RlZmF1bHQnXVxuICogQHBhcmFtICB7T2JqZWN0fSBbY2ZnXVxuICovXG5cblxuZWNoYXJ0c1Byb3RvLnNob3dMb2FkaW5nID0gZnVuY3Rpb24gKG5hbWUsIGNmZykge1xuICBpZiAoaXNPYmplY3QobmFtZSkpIHtcbiAgICBjZmcgPSBuYW1lO1xuICAgIG5hbWUgPSAnJztcbiAgfVxuXG4gIG5hbWUgPSBuYW1lIHx8ICdkZWZhdWx0JztcbiAgdGhpcy5oaWRlTG9hZGluZygpO1xuXG4gIGlmICghbG9hZGluZ0VmZmVjdHNbbmFtZV0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZWwgPSBsb2FkaW5nRWZmZWN0c1tuYW1lXSh0aGlzLl9hcGksIGNmZyk7XG4gIHZhciB6ciA9IHRoaXMuX3pyO1xuICB0aGlzLl9sb2FkaW5nRlggPSBlbDtcbiAgenIuYWRkKGVsKTtcbn07XG4vKipcbiAqIEhpZGUgbG9hZGluZyBlZmZlY3RcbiAqL1xuXG5cbmVjaGFydHNQcm90by5oaWRlTG9hZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fbG9hZGluZ0ZYICYmIHRoaXMuX3pyLnJlbW92ZSh0aGlzLl9sb2FkaW5nRlgpO1xuICB0aGlzLl9sb2FkaW5nRlggPSBudWxsO1xufTtcbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IGV2ZW50T2JqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxuXG5lY2hhcnRzUHJvdG8ubWFrZUFjdGlvbkZyb21FdmVudCA9IGZ1bmN0aW9uIChldmVudE9iaikge1xuICB2YXIgcGF5bG9hZCA9IHpyVXRpbC5leHRlbmQoe30sIGV2ZW50T2JqKTtcbiAgcGF5bG9hZC50eXBlID0gZXZlbnRBY3Rpb25NYXBbZXZlbnRPYmoudHlwZV07XG4gIHJldHVybiBwYXlsb2FkO1xufTtcbi8qKlxuICogQHB1YmlsY1xuICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGF5bG9hZC50eXBlXSBBY3Rpb24gdHlwZVxuICogQHBhcmFtIHtPYmplY3R8Ym9vbGVhbn0gW29wdF0gSWYgcGFzcyBib29sZWFuLCBtZWFucyBvcHQuc2lsZW50XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHQuc2lsZW50PWZhbHNlXSBXaGV0aGVyIHRyaWdnZXIgZXZlbnRzLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0LmZsdXNoPXVuZGVmaW5lZF1cbiAqICAgICAgICAgICAgICAgICAgdHJ1ZTogRmx1c2ggaW1tZWRpYXRlbHksIGFuZCB0aGVuIHBpeGVsIGluIGNhbnZhcyBjYW4gYmUgZmV0Y2hlZFxuICogICAgICAgICAgICAgICAgICAgICAgaW1tZWRpYXRlbHkuIENhdXRpb246IGl0IG1pZ2h0IGFmZmVjdCBwZXJmb3JtYW5jZS5cbiAqICAgICAgICAgICAgICAgICAgZmFsc2U6IE5vdCBub3QgZmx1c2guXG4gKiAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZDogQXV0byBkZWNpZGUgd2hldGhlciBwZXJmb3JtIGZsdXNoLlxuICovXG5cblxuZWNoYXJ0c1Byb3RvLmRpc3BhdGNoQWN0aW9uID0gZnVuY3Rpb24gKHBheWxvYWQsIG9wdCkge1xuICBpZiAoIWlzT2JqZWN0KG9wdCkpIHtcbiAgICBvcHQgPSB7XG4gICAgICBzaWxlbnQ6ICEhb3B0XG4gICAgfTtcbiAgfVxuXG4gIGlmICghYWN0aW9uc1twYXlsb2FkLnR5cGVdKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIEF2b2lkIGRpc3BhdGNoIGFjdGlvbiBiZWZvcmUgc2V0T3B0aW9uLiBFc3BlY2lhbGx5IGluIGBjb25uZWN0YC5cblxuXG4gIGlmICghdGhpcy5fbW9kZWwpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gTWF5IGRpc3BhdGNoQWN0aW9uIGluIHJlbmRlcmluZyBwcm9jZWR1cmVcblxuXG4gIGlmICh0aGlzW0lOX01BSU5fUFJPQ0VTU10pIHtcbiAgICB0aGlzLl9wZW5kaW5nQWN0aW9ucy5wdXNoKHBheWxvYWQpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZG9EaXNwYXRjaEFjdGlvbi5jYWxsKHRoaXMsIHBheWxvYWQsIG9wdC5zaWxlbnQpO1xuXG4gIGlmIChvcHQuZmx1c2gpIHtcbiAgICB0aGlzLl96ci5mbHVzaCh0cnVlKTtcbiAgfSBlbHNlIGlmIChvcHQuZmx1c2ggIT09IGZhbHNlICYmIGVudi5icm93c2VyLndlQ2hhdCkge1xuICAgIC8vIEluIFdlQ2hhdCBlbWJlZGVkIGJyb3dzZXIsIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgIGFuZCBgc2V0SW50ZXJ2YWxgXG4gICAgLy8gaGFuZyB3aGVuIHNsaWRpbmcgcGFnZSAob24gdG91Y2ggZXZlbnQpLCB3aGljaCBjYXVzZSB0aGF0IHpyIGRvZXMgbm90XG4gICAgLy8gcmVmcmVzaCB1dGlsIHVzZXIgaW50ZXJhY3Rpb24gZmluaXNoZWQsIHdoaWNoIGlzIG5vdCBleHBlY3RlZC5cbiAgICAvLyBCdXQgYGRpc3BhdGNoQWN0aW9uYCBtYXkgYmUgY2FsbGVkIHRvbyBmcmVxdWVudGx5IHdoZW4gcGFuIG9uIHRvdWNoXG4gICAgLy8gc2NyZWVuLCB3aGljaCBpbXBhY3RzIHBlcmZvcm1hbmNlIGlmIGRvIG5vdCB0aHJvdHRsZSB0aGVtLlxuICAgIHRoaXMuX3Rocm90dGxlZFpyRmx1c2goKTtcbiAgfVxuXG4gIGZsdXNoUGVuZGluZ0FjdGlvbnMuY2FsbCh0aGlzLCBvcHQuc2lsZW50KTtcbiAgdHJpZ2dlclVwZGF0ZWRFdmVudC5jYWxsKHRoaXMsIG9wdC5zaWxlbnQpO1xufTtcblxuZnVuY3Rpb24gZG9EaXNwYXRjaEFjdGlvbihwYXlsb2FkLCBzaWxlbnQpIHtcbiAgdmFyIHBheWxvYWRUeXBlID0gcGF5bG9hZC50eXBlO1xuICB2YXIgZXNjYXBlQ29ubmVjdCA9IHBheWxvYWQuZXNjYXBlQ29ubmVjdDtcbiAgdmFyIGFjdGlvbldyYXAgPSBhY3Rpb25zW3BheWxvYWRUeXBlXTtcbiAgdmFyIGFjdGlvbkluZm8gPSBhY3Rpb25XcmFwLmFjdGlvbkluZm87XG4gIHZhciBjcHRUeXBlID0gKGFjdGlvbkluZm8udXBkYXRlIHx8ICd1cGRhdGUnKS5zcGxpdCgnOicpO1xuICB2YXIgdXBkYXRlTWV0aG9kID0gY3B0VHlwZS5wb3AoKTtcbiAgY3B0VHlwZSA9IGNwdFR5cGVbMF0gIT0gbnVsbCAmJiBwYXJzZUNsYXNzVHlwZShjcHRUeXBlWzBdKTtcbiAgdGhpc1tJTl9NQUlOX1BST0NFU1NdID0gdHJ1ZTtcbiAgdmFyIHBheWxvYWRzID0gW3BheWxvYWRdO1xuICB2YXIgYmF0Y2hlZCA9IGZhbHNlOyAvLyBCYXRjaCBhY3Rpb25cblxuICBpZiAocGF5bG9hZC5iYXRjaCkge1xuICAgIGJhdGNoZWQgPSB0cnVlO1xuICAgIHBheWxvYWRzID0genJVdGlsLm1hcChwYXlsb2FkLmJhdGNoLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgaXRlbSA9IHpyVXRpbC5kZWZhdWx0cyh6clV0aWwuZXh0ZW5kKHt9LCBpdGVtKSwgcGF5bG9hZCk7XG4gICAgICBpdGVtLmJhdGNoID0gbnVsbDtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGV2ZW50T2JqQmF0Y2ggPSBbXTtcbiAgdmFyIGV2ZW50T2JqO1xuICB2YXIgaXNIaWdoRG93biA9IHBheWxvYWRUeXBlID09PSAnaGlnaGxpZ2h0JyB8fCBwYXlsb2FkVHlwZSA9PT0gJ2Rvd25wbGF5JztcbiAgZWFjaChwYXlsb2FkcywgZnVuY3Rpb24gKGJhdGNoSXRlbSkge1xuICAgIC8vIEFjdGlvbiBjYW4gc3BlY2lmeSB0aGUgZXZlbnQgYnkgcmV0dXJuIGl0LlxuICAgIGV2ZW50T2JqID0gYWN0aW9uV3JhcC5hY3Rpb24oYmF0Y2hJdGVtLCB0aGlzLl9tb2RlbCwgdGhpcy5fYXBpKTsgLy8gRW1pdCBldmVudCBvdXRzaWRlXG5cbiAgICBldmVudE9iaiA9IGV2ZW50T2JqIHx8IHpyVXRpbC5leHRlbmQoe30sIGJhdGNoSXRlbSk7IC8vIENvbnZlcnQgdHlwZSB0byBldmVudFR5cGVcblxuICAgIGV2ZW50T2JqLnR5cGUgPSBhY3Rpb25JbmZvLmV2ZW50IHx8IGV2ZW50T2JqLnR5cGU7XG4gICAgZXZlbnRPYmpCYXRjaC5wdXNoKGV2ZW50T2JqKTsgLy8gbGlnaHQgdXBkYXRlIGRvZXMgbm90IHBlcmZvcm0gZGF0YSBwcm9jZXNzLCBsYXlvdXQgYW5kIHZpc3VhbC5cblxuICAgIGlmIChpc0hpZ2hEb3duKSB7XG4gICAgICAvLyBtZXRob2QsIHBheWxvYWQsIG1haW5UeXBlLCBzdWJUeXBlXG4gICAgICB1cGRhdGVEaXJlY3RseSh0aGlzLCB1cGRhdGVNZXRob2QsIGJhdGNoSXRlbSwgJ3NlcmllcycpO1xuICAgIH0gZWxzZSBpZiAoY3B0VHlwZSkge1xuICAgICAgdXBkYXRlRGlyZWN0bHkodGhpcywgdXBkYXRlTWV0aG9kLCBiYXRjaEl0ZW0sIGNwdFR5cGUubWFpbiwgY3B0VHlwZS5zdWIpO1xuICAgIH1cbiAgfSwgdGhpcyk7XG5cbiAgaWYgKHVwZGF0ZU1ldGhvZCAhPT0gJ25vbmUnICYmICFpc0hpZ2hEb3duICYmICFjcHRUeXBlKSB7XG4gICAgLy8gU3RpbGwgZGlydHlcbiAgICBpZiAodGhpc1tPUFRJT05fVVBEQVRFRF0pIHtcbiAgICAgIC8vIEZJWE1FIFBhc3MgcGF5bG9hZCA/XG4gICAgICBwcmVwYXJlKHRoaXMpO1xuICAgICAgdXBkYXRlTWV0aG9kcy51cGRhdGUuY2FsbCh0aGlzLCBwYXlsb2FkKTtcbiAgICAgIHRoaXNbT1BUSU9OX1VQREFURURdID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZU1ldGhvZHNbdXBkYXRlTWV0aG9kXS5jYWxsKHRoaXMsIHBheWxvYWQpO1xuICAgIH1cbiAgfSAvLyBGb2xsb3cgdGhlIHJ1bGUgb2YgYWN0aW9uIGJhdGNoXG5cblxuICBpZiAoYmF0Y2hlZCkge1xuICAgIGV2ZW50T2JqID0ge1xuICAgICAgdHlwZTogYWN0aW9uSW5mby5ldmVudCB8fCBwYXlsb2FkVHlwZSxcbiAgICAgIGVzY2FwZUNvbm5lY3Q6IGVzY2FwZUNvbm5lY3QsXG4gICAgICBiYXRjaDogZXZlbnRPYmpCYXRjaFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZXZlbnRPYmogPSBldmVudE9iakJhdGNoWzBdO1xuICB9XG5cbiAgdGhpc1tJTl9NQUlOX1BST0NFU1NdID0gZmFsc2U7XG4gICFzaWxlbnQgJiYgdGhpcy5fbWVzc2FnZUNlbnRlci50cmlnZ2VyKGV2ZW50T2JqLnR5cGUsIGV2ZW50T2JqKTtcbn1cblxuZnVuY3Rpb24gZmx1c2hQZW5kaW5nQWN0aW9ucyhzaWxlbnQpIHtcbiAgdmFyIHBlbmRpbmdBY3Rpb25zID0gdGhpcy5fcGVuZGluZ0FjdGlvbnM7XG5cbiAgd2hpbGUgKHBlbmRpbmdBY3Rpb25zLmxlbmd0aCkge1xuICAgIHZhciBwYXlsb2FkID0gcGVuZGluZ0FjdGlvbnMuc2hpZnQoKTtcbiAgICBkb0Rpc3BhdGNoQWN0aW9uLmNhbGwodGhpcywgcGF5bG9hZCwgc2lsZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cmlnZ2VyVXBkYXRlZEV2ZW50KHNpbGVudCkge1xuICAhc2lsZW50ICYmIHRoaXMudHJpZ2dlcigndXBkYXRlZCcpO1xufVxuLyoqXG4gKiBFdmVudCBgcmVuZGVyZWRgIGlzIHRyaWdnZXJlZCB3aGVuIHpyXG4gKiByZW5kZXJlZC4gSXQgaXMgdXNlZnVsIGZvciByZWFsdGltZVxuICogc25hcHNob3QgKHJlZmxlY3QgYW5pbWF0aW9uKS5cbiAqXG4gKiBFdmVudCBgZmluaXNoZWRgIGlzIHRyaWdnZXJlZCB3aGVuOlxuICogKDEpIHpyZW5kZXIgcmVuZGVyaW5nIGZpbmlzaGVkLlxuICogKDIpIGluaXRpYWwgYW5pbWF0aW9uIGZpbmlzaGVkLlxuICogKDMpIHByb2dyZXNzaXZlIHJlbmRlcmluZyBmaW5pc2hlZC5cbiAqICg0KSBubyBwZW5kaW5nIGFjdGlvbi5cbiAqICg1KSBubyBkZWxheWVkIHNldE9wdGlvbiBuZWVkcyB0byBiZSBwcm9jZXNzZWQuXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kUmVuZGVyZWRFdmVudCh6ciwgZWNJbnMpIHtcbiAgenIub24oJ3JlbmRlcmVkJywgZnVuY3Rpb24gKCkge1xuICAgIGVjSW5zLnRyaWdnZXIoJ3JlbmRlcmVkJyk7IC8vIFRoZSBgZmluaXNoZWRgIGV2ZW50IHNob3VsZCBub3QgYmUgdHJpZ2dlcmVkIHJlcGVhdGx5LFxuICAgIC8vIHNvIGl0IHNob3VsZCBvbmx5IGJlIHRyaWdnZXJlZCB3aGVuIHJlbmRlcmluZyBpbmRlZWQgaGFwcGVuZFxuICAgIC8vIGluIHpyZW5kZXIuIChDb25zaWRlciB0aGUgY2FzZSB0aGF0IGRpcGF0Y2hBY3Rpb24gaXMga2VlcFxuICAgIC8vIHRyaWdnZXJpbmcgd2hlbiBtb3VzZSBtb3ZlKS5cblxuICAgIGlmICggLy8gQWx0aG91Z2ggenIgaXMgZGlydHkgaWYgaW5pdGlhbCBhbmltYXRpb24gaXMgbm90IGZpbmlzaGVkXG4gICAgLy8gYW5kIHRoaXMgY2hlY2tpbmcgaXMgY2FsbGVkIG9uIGZyYW1lLCB3ZSBhbHNvIGNoZWNrXG4gICAgLy8gYW5pbWF0aW9uIGZpbmlzaGVkIGZvciByb2J1c3RuZXNzLlxuICAgIHpyLmFuaW1hdGlvbi5pc0ZpbmlzaGVkKCkgJiYgIWVjSW5zW09QVElPTl9VUERBVEVEXSAmJiAhZWNJbnMuX3NjaGVkdWxlci51bmZpbmlzaGVkICYmICFlY0lucy5fcGVuZGluZ0FjdGlvbnMubGVuZ3RoKSB7XG4gICAgICBlY0lucy50cmlnZ2VyKCdmaW5pc2hlZCcpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYXJhbXMuc2VyaWVzSW5kZXhcbiAqIEBwYXJhbSB7QXJyYXl8VHlwZWRBcnJheX0gcGFyYW1zLmRhdGFcbiAqL1xuXG5cbmVjaGFydHNQcm90by5hcHBlbmREYXRhID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICB2YXIgc2VyaWVzSW5kZXggPSBwYXJhbXMuc2VyaWVzSW5kZXg7XG4gIHZhciBlY01vZGVsID0gdGhpcy5nZXRNb2RlbCgpO1xuICB2YXIgc2VyaWVzTW9kZWwgPSBlY01vZGVsLmdldFNlcmllc0J5SW5kZXgoc2VyaWVzSW5kZXgpO1xuICBzZXJpZXNNb2RlbC5hcHBlbmREYXRhKHBhcmFtcyk7IC8vIE5vdGU6IGBhcHBlbmREYXRhYCBkb2VzIG5vdCBzdXBwb3J0IHRoYXQgdXBkYXRlIGV4dGVudCBvZiBjb29yZGluYXRlXG4gIC8vIHN5c3RlbSwgdXRpbCBzb21lIHNjZW5hcmlvIHJlcXVpcmUgdGhhdC4gSW4gdGhlIGV4cGVjdGVkIHVzYWdlIG9mXG4gIC8vIGBhcHBlbmREYXRhYCwgdGhlIGluaXRpYWwgZXh0ZW50IG9mIGNvb3JkaW5hdGUgc3lzdGVtIHNob3VsZCBiZXR0ZXJcbiAgLy8gYmUgZml4ZWQgYnkgYXhpcyBgbWluYC9gbWF4YCBzZXR0aW5nIG9yIGluaXRpYWwgZGF0YSwgb3RoZXJ3aXNlIGlmXG4gIC8vIHRoZSBleHRlbnQgY2hhbmdlZCB3aGlsZSBgYXBwZW5kRGF0YWAsIHRoZSBsb2NhdGlvbiBvZiB0aGUgcGFpbnRlZFxuICAvLyBncmFwaGljIGVsZW1lbnRzIGhhdmUgdG8gYmUgY2hhbmdlZCwgd2hpY2ggbWFrZSB0aGUgdXNhZ2Ugb2ZcbiAgLy8gYGFwcGVuZERhdGFgIG1lYW5pbmdsZXNzLlxuXG4gIHRoaXMuX3NjaGVkdWxlci51bmZpbmlzaGVkID0gdHJ1ZTtcbn07XG4vKipcbiAqIFJlZ2lzdGVyIGV2ZW50XG4gKiBAbWV0aG9kXG4gKi9cblxuXG5lY2hhcnRzUHJvdG8ub24gPSBjcmVhdGVSZWdpc3RlckV2ZW50V2l0aExvd2VyY2FzZU5hbWUoJ29uJyk7XG5lY2hhcnRzUHJvdG8ub2ZmID0gY3JlYXRlUmVnaXN0ZXJFdmVudFdpdGhMb3dlcmNhc2VOYW1lKCdvZmYnKTtcbmVjaGFydHNQcm90by5vbmUgPSBjcmVhdGVSZWdpc3RlckV2ZW50V2l0aExvd2VyY2FzZU5hbWUoJ29uZScpO1xuLyoqXG4gKiBQcmVwYXJlIHZpZXcgaW5zdGFuY2VzIG9mIGNoYXJ0cyBhbmQgY29tcG9uZW50c1xuICogQHBhcmFtICB7bW9kdWxlOmVjaGFydHMvbW9kZWwvR2xvYmFsfSBlY01vZGVsXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHByZXBhcmVWaWV3KGVjSW5zLCB0eXBlLCBlY01vZGVsLCBzY2hlZHVsZXIpIHtcbiAgdmFyIGlzQ29tcG9uZW50ID0gdHlwZSA9PT0gJ2NvbXBvbmVudCc7XG4gIHZhciB2aWV3TGlzdCA9IGlzQ29tcG9uZW50ID8gZWNJbnMuX2NvbXBvbmVudHNWaWV3cyA6IGVjSW5zLl9jaGFydHNWaWV3cztcbiAgdmFyIHZpZXdNYXAgPSBpc0NvbXBvbmVudCA/IGVjSW5zLl9jb21wb25lbnRzTWFwIDogZWNJbnMuX2NoYXJ0c01hcDtcbiAgdmFyIHpyID0gZWNJbnMuX3pyO1xuICB2YXIgYXBpID0gZWNJbnMuX2FwaTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXdMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmlld0xpc3RbaV0uX19hbGl2ZSA9IGZhbHNlO1xuICB9XG5cbiAgaXNDb21wb25lbnQgPyBlY01vZGVsLmVhY2hDb21wb25lbnQoZnVuY3Rpb24gKGNvbXBvbmVudFR5cGUsIG1vZGVsKSB7XG4gICAgY29tcG9uZW50VHlwZSAhPT0gJ3NlcmllcycgJiYgZG9QcmVwYXJlKG1vZGVsKTtcbiAgfSkgOiBlY01vZGVsLmVhY2hTZXJpZXMoZG9QcmVwYXJlKTtcblxuICBmdW5jdGlvbiBkb1ByZXBhcmUobW9kZWwpIHtcbiAgICAvLyBDb25zaWRlcjogaWQgc2FtZSBhbmQgdHlwZSBjaGFuZ2VkLlxuICAgIHZhciB2aWV3SWQgPSAnX2VjXycgKyBtb2RlbC5pZCArICdfJyArIG1vZGVsLnR5cGU7XG4gICAgdmFyIHZpZXcgPSB2aWV3TWFwW3ZpZXdJZF07XG5cbiAgICBpZiAoIXZpZXcpIHtcbiAgICAgIHZhciBjbGFzc1R5cGUgPSBwYXJzZUNsYXNzVHlwZShtb2RlbC50eXBlKTtcbiAgICAgIHZhciBDbGF6eiA9IGlzQ29tcG9uZW50ID8gQ29tcG9uZW50Vmlldy5nZXRDbGFzcyhjbGFzc1R5cGUubWFpbiwgY2xhc3NUeXBlLnN1YikgOiBDaGFydFZpZXcuZ2V0Q2xhc3MoY2xhc3NUeXBlLnN1Yik7XG4gICAgICB2aWV3ID0gbmV3IENsYXp6KCk7XG4gICAgICB2aWV3LmluaXQoZWNNb2RlbCwgYXBpKTtcbiAgICAgIHZpZXdNYXBbdmlld0lkXSA9IHZpZXc7XG4gICAgICB2aWV3TGlzdC5wdXNoKHZpZXcpO1xuICAgICAgenIuYWRkKHZpZXcuZ3JvdXApO1xuICAgIH1cblxuICAgIG1vZGVsLl9fdmlld0lkID0gdmlldy5fX2lkID0gdmlld0lkO1xuICAgIHZpZXcuX19hbGl2ZSA9IHRydWU7XG4gICAgdmlldy5fX21vZGVsID0gbW9kZWw7XG4gICAgdmlldy5ncm91cC5fX2VjQ29tcG9uZW50SW5mbyA9IHtcbiAgICAgIG1haW5UeXBlOiBtb2RlbC5tYWluVHlwZSxcbiAgICAgIGluZGV4OiBtb2RlbC5jb21wb25lbnRJbmRleFxuICAgIH07XG4gICAgIWlzQ29tcG9uZW50ICYmIHNjaGVkdWxlci5wcmVwYXJlVmlldyh2aWV3LCBtb2RlbCwgZWNNb2RlbCwgYXBpKTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmlld0xpc3QubGVuZ3RoOykge1xuICAgIHZhciB2aWV3ID0gdmlld0xpc3RbaV07XG5cbiAgICBpZiAoIXZpZXcuX19hbGl2ZSkge1xuICAgICAgIWlzQ29tcG9uZW50ICYmIHZpZXcucmVuZGVyVGFzay5kaXNwb3NlKCk7XG4gICAgICB6ci5yZW1vdmUodmlldy5ncm91cCk7XG4gICAgICB2aWV3LmRpc3Bvc2UoZWNNb2RlbCwgYXBpKTtcbiAgICAgIHZpZXdMaXN0LnNwbGljZShpLCAxKTtcbiAgICAgIGRlbGV0ZSB2aWV3TWFwW3ZpZXcuX19pZF07XG4gICAgICB2aWV3Ll9faWQgPSB2aWV3Lmdyb3VwLl9fZWNDb21wb25lbnRJbmZvID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgaSsrO1xuICAgIH1cbiAgfVxufSAvLyAvKipcbi8vICAqIEVuY29kZSB2aXN1YWwgaW5mb21hdGlvbiBmcm9tIGRhdGEgYWZ0ZXIgZGF0YSBwcm9jZXNzaW5nXG4vLyAgKlxuLy8gICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9HbG9iYWx9IGVjTW9kZWxcbi8vICAqIEBwYXJhbSB7b2JqZWN0fSBsYXlvdXRcbi8vICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2xheW91dEZpbHRlcl0gYHRydWVgOiBvbmx5IGxheW91dCxcbi8vICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGZhbHNlYDogb25seSBub3QgbGF5b3V0LFxuLy8gICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbnVsbGAvYHVuZGVmaW5lZGA6IGFsbC5cbi8vICAqIEBwYXJhbSB7c3RyaW5nfSB0YXNrQmFzZVRhZ1xuLy8gICogQHByaXZhdGVcbi8vICAqL1xuLy8gZnVuY3Rpb24gc3RhcnRWaXN1YWxFbmNvZGluZyhlY0lucywgZWNNb2RlbCwgYXBpLCBwYXlsb2FkLCBsYXlvdXRGaWx0ZXIpIHtcbi8vICAgICBlYWNoKHZpc3VhbEZ1bmNzLCBmdW5jdGlvbiAodmlzdWFsLCBpbmRleCkge1xuLy8gICAgICAgICB2YXIgaXNMYXlvdXQgPSB2aXN1YWwuaXNMYXlvdXQ7XG4vLyAgICAgICAgIGlmIChsYXlvdXRGaWx0ZXIgPT0gbnVsbFxuLy8gICAgICAgICAgICAgfHwgKGxheW91dEZpbHRlciA9PT0gZmFsc2UgJiYgIWlzTGF5b3V0KVxuLy8gICAgICAgICAgICAgfHwgKGxheW91dEZpbHRlciA9PT0gdHJ1ZSAmJiBpc0xheW91dClcbi8vICAgICAgICAgKSB7XG4vLyAgICAgICAgICAgICB2aXN1YWwuZnVuYyhlY01vZGVsLCBhcGksIHBheWxvYWQpO1xuLy8gICAgICAgICB9XG4vLyAgICAgfSk7XG4vLyB9XG5cblxuZnVuY3Rpb24gY2xlYXJDb2xvclBhbGV0dGUoZWNNb2RlbCkge1xuICBlY01vZGVsLmNsZWFyQ29sb3JQYWxldHRlKCk7XG4gIGVjTW9kZWwuZWFjaFNlcmllcyhmdW5jdGlvbiAoc2VyaWVzTW9kZWwpIHtcbiAgICBzZXJpZXNNb2RlbC5jbGVhckNvbG9yUGFsZXR0ZSgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyKGVjSW5zLCBlY01vZGVsLCBhcGksIHBheWxvYWQpIHtcbiAgcmVuZGVyQ29tcG9uZW50cyhlY0lucywgZWNNb2RlbCwgYXBpLCBwYXlsb2FkKTtcbiAgZWFjaChlY0lucy5fY2hhcnRzVmlld3MsIGZ1bmN0aW9uIChjaGFydCkge1xuICAgIGNoYXJ0Ll9fYWxpdmUgPSBmYWxzZTtcbiAgfSk7XG4gIHJlbmRlclNlcmllcyhlY0lucywgZWNNb2RlbCwgYXBpLCBwYXlsb2FkKTsgLy8gUmVtb3ZlIGdyb3VwcyBvZiB1bnJlbmRlcmVkIGNoYXJ0c1xuXG4gIGVhY2goZWNJbnMuX2NoYXJ0c1ZpZXdzLCBmdW5jdGlvbiAoY2hhcnQpIHtcbiAgICBpZiAoIWNoYXJ0Ll9fYWxpdmUpIHtcbiAgICAgIGNoYXJ0LnJlbW92ZShlY01vZGVsLCBhcGkpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNvbXBvbmVudHMoZWNJbnMsIGVjTW9kZWwsIGFwaSwgcGF5bG9hZCwgZGlydHlMaXN0KSB7XG4gIGVhY2goZGlydHlMaXN0IHx8IGVjSW5zLl9jb21wb25lbnRzVmlld3MsIGZ1bmN0aW9uIChjb21wb25lbnRWaWV3KSB7XG4gICAgdmFyIGNvbXBvbmVudE1vZGVsID0gY29tcG9uZW50Vmlldy5fX21vZGVsO1xuICAgIGNvbXBvbmVudFZpZXcucmVuZGVyKGNvbXBvbmVudE1vZGVsLCBlY01vZGVsLCBhcGksIHBheWxvYWQpO1xuICAgIHVwZGF0ZVooY29tcG9uZW50TW9kZWwsIGNvbXBvbmVudFZpZXcpO1xuICB9KTtcbn1cbi8qKlxuICogUmVuZGVyIGVhY2ggY2hhcnQgYW5kIGNvbXBvbmVudFxuICogQHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIHJlbmRlclNlcmllcyhlY0lucywgZWNNb2RlbCwgYXBpLCBwYXlsb2FkLCBkaXJ0eU1hcCkge1xuICAvLyBSZW5kZXIgYWxsIGNoYXJ0c1xuICB2YXIgc2NoZWR1bGVyID0gZWNJbnMuX3NjaGVkdWxlcjtcbiAgdmFyIHVuZmluaXNoZWQ7XG4gIGVjTW9kZWwuZWFjaFNlcmllcyhmdW5jdGlvbiAoc2VyaWVzTW9kZWwpIHtcbiAgICB2YXIgY2hhcnRWaWV3ID0gZWNJbnMuX2NoYXJ0c01hcFtzZXJpZXNNb2RlbC5fX3ZpZXdJZF07XG4gICAgY2hhcnRWaWV3Ll9fYWxpdmUgPSB0cnVlO1xuICAgIHZhciByZW5kZXJUYXNrID0gY2hhcnRWaWV3LnJlbmRlclRhc2s7XG4gICAgc2NoZWR1bGVyLnVwZGF0ZVBheWxvYWQocmVuZGVyVGFzaywgcGF5bG9hZCk7XG5cbiAgICBpZiAoZGlydHlNYXAgJiYgZGlydHlNYXAuZ2V0KHNlcmllc01vZGVsLnVpZCkpIHtcbiAgICAgIHJlbmRlclRhc2suZGlydHkoKTtcbiAgICB9XG5cbiAgICB1bmZpbmlzaGVkIHw9IHJlbmRlclRhc2sucGVyZm9ybShzY2hlZHVsZXIuZ2V0UGVyZm9ybUFyZ3MocmVuZGVyVGFzaykpO1xuICAgIGNoYXJ0Vmlldy5ncm91cC5zaWxlbnQgPSAhIXNlcmllc01vZGVsLmdldCgnc2lsZW50Jyk7XG4gICAgdXBkYXRlWihzZXJpZXNNb2RlbCwgY2hhcnRWaWV3KTtcbiAgICB1cGRhdGVCbGVuZChzZXJpZXNNb2RlbCwgY2hhcnRWaWV3KTtcbiAgfSk7XG4gIHNjaGVkdWxlci51bmZpbmlzaGVkIHw9IHVuZmluaXNoZWQ7IC8vIElmIHVzZSBob3ZlciBsYXllclxuXG4gIHVwZGF0ZUhvdmVyTGF5ZXJTdGF0dXMoZWNJbnMuX3pyLCBlY01vZGVsKTsgLy8gQWRkIGFyaWFcblxuICBhcmlhKGVjSW5zLl96ci5kb20sIGVjTW9kZWwpO1xufVxuXG5mdW5jdGlvbiBwZXJmb3JtUG9zdFVwZGF0ZUZ1bmNzKGVjTW9kZWwsIGFwaSkge1xuICBlYWNoKHBvc3RVcGRhdGVGdW5jcywgZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICBmdW5jKGVjTW9kZWwsIGFwaSk7XG4gIH0pO1xufVxuXG52YXIgTU9VU0VfRVZFTlRfTkFNRVMgPSBbJ2NsaWNrJywgJ2RibGNsaWNrJywgJ21vdXNlb3ZlcicsICdtb3VzZW91dCcsICdtb3VzZW1vdmUnLCAnbW91c2Vkb3duJywgJ21vdXNldXAnLCAnZ2xvYmFsb3V0JywgJ2NvbnRleHRtZW51J107XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuZWNoYXJ0c1Byb3RvLl9pbml0RXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICBlYWNoKE1PVVNFX0VWRU5UX05BTUVTLCBmdW5jdGlvbiAoZXZlTmFtZSkge1xuICAgIHRoaXMuX3pyLm9uKGV2ZU5hbWUsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgZWNNb2RlbCA9IHRoaXMuZ2V0TW9kZWwoKTtcbiAgICAgIHZhciBlbCA9IGUudGFyZ2V0O1xuICAgICAgdmFyIHBhcmFtczsgLy8gbm8gZS50YXJnZXQgd2hlbiAnZ2xvYmFsb3V0Jy5cblxuICAgICAgaWYgKGV2ZU5hbWUgPT09ICdnbG9iYWxvdXQnKSB7XG4gICAgICAgIHBhcmFtcyA9IHt9O1xuICAgICAgfSBlbHNlIGlmIChlbCAmJiBlbC5kYXRhSW5kZXggIT0gbnVsbCkge1xuICAgICAgICB2YXIgZGF0YU1vZGVsID0gZWwuZGF0YU1vZGVsIHx8IGVjTW9kZWwuZ2V0U2VyaWVzQnlJbmRleChlbC5zZXJpZXNJbmRleCk7XG4gICAgICAgIHBhcmFtcyA9IGRhdGFNb2RlbCAmJiBkYXRhTW9kZWwuZ2V0RGF0YVBhcmFtcyhlbC5kYXRhSW5kZXgsIGVsLmRhdGFUeXBlKSB8fCB7fTtcbiAgICAgIH0gLy8gSWYgZWxlbWVudCBoYXMgY3VzdG9tIGV2ZW50RGF0YSBvZiBjb21wb25lbnRzXG4gICAgICBlbHNlIGlmIChlbCAmJiBlbC5ldmVudERhdGEpIHtcbiAgICAgICAgICBwYXJhbXMgPSB6clV0aWwuZXh0ZW5kKHt9LCBlbC5ldmVudERhdGEpO1xuICAgICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMpIHtcbiAgICAgICAgcGFyYW1zLmV2ZW50ID0gZTtcbiAgICAgICAgcGFyYW1zLnR5cGUgPSBldmVOYW1lO1xuICAgICAgICB0aGlzLnRyaWdnZXIoZXZlTmFtZSwgcGFyYW1zKTtcbiAgICAgIH1cbiAgICB9LCB0aGlzKTtcbiAgfSwgdGhpcyk7XG4gIGVhY2goZXZlbnRBY3Rpb25NYXAsIGZ1bmN0aW9uIChhY3Rpb25UeXBlLCBldmVudFR5cGUpIHtcbiAgICB0aGlzLl9tZXNzYWdlQ2VudGVyLm9uKGV2ZW50VHlwZSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB0aGlzLnRyaWdnZXIoZXZlbnRUeXBlLCBldmVudCk7XG4gICAgfSwgdGhpcyk7XG4gIH0sIHRoaXMpO1xufTtcbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG5cbmVjaGFydHNQcm90by5pc0Rpc3Bvc2VkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fZGlzcG9zZWQ7XG59O1xuLyoqXG4gKiBDbGVhclxuICovXG5cblxuZWNoYXJ0c1Byb3RvLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnNldE9wdGlvbih7XG4gICAgc2VyaWVzOiBbXVxuICB9LCB0cnVlKTtcbn07XG4vKipcbiAqIERpc3Bvc2UgaW5zdGFuY2VcbiAqL1xuXG5cbmVjaGFydHNQcm90by5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5fZGlzcG9zZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9kaXNwb3NlZCA9IHRydWU7XG4gIG1vZGVsVXRpbC5zZXRBdHRyaWJ1dGUodGhpcy5nZXREb20oKSwgRE9NX0FUVFJJQlVURV9LRVksICcnKTtcbiAgdmFyIGFwaSA9IHRoaXMuX2FwaTtcbiAgdmFyIGVjTW9kZWwgPSB0aGlzLl9tb2RlbDtcbiAgZWFjaCh0aGlzLl9jb21wb25lbnRzVmlld3MsIGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICBjb21wb25lbnQuZGlzcG9zZShlY01vZGVsLCBhcGkpO1xuICB9KTtcbiAgZWFjaCh0aGlzLl9jaGFydHNWaWV3cywgZnVuY3Rpb24gKGNoYXJ0KSB7XG4gICAgY2hhcnQuZGlzcG9zZShlY01vZGVsLCBhcGkpO1xuICB9KTsgLy8gRGlzcG9zZSBhZnRlciBhbGwgdmlld3MgZGlzcG9zZWRcblxuICB0aGlzLl96ci5kaXNwb3NlKCk7XG5cbiAgZGVsZXRlIGluc3RhbmNlc1t0aGlzLmlkXTtcbn07XG5cbnpyVXRpbC5taXhpbihFQ2hhcnRzLCBFdmVudGZ1bCk7XG5cbmZ1bmN0aW9uIHVwZGF0ZUhvdmVyTGF5ZXJTdGF0dXMoenIsIGVjTW9kZWwpIHtcbiAgdmFyIHN0b3JhZ2UgPSB6ci5zdG9yYWdlO1xuICB2YXIgZWxDb3VudCA9IDA7XG4gIHN0b3JhZ2UudHJhdmVyc2UoZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKCFlbC5pc0dyb3VwKSB7XG4gICAgICBlbENvdW50Kys7XG4gICAgfVxuICB9KTtcblxuICBpZiAoZWxDb3VudCA+IGVjTW9kZWwuZ2V0KCdob3ZlckxheWVyVGhyZXNob2xkJykgJiYgIWVudi5ub2RlKSB7XG4gICAgc3RvcmFnZS50cmF2ZXJzZShmdW5jdGlvbiAoZWwpIHtcbiAgICAgIGlmICghZWwuaXNHcm91cCkge1xuICAgICAgICAvLyBEb24ndCBzd2l0Y2ggYmFjay5cbiAgICAgICAgZWwudXNlSG92ZXJMYXllciA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbi8qKlxuICogVXBkYXRlIGNoYXJ0IHByb2dyZXNzaXZlIGFuZCBibGVuZC5cbiAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvbW9kZWwvU2VyaWVzfG1vZHVsZTplY2hhcnRzL21vZGVsL0NvbXBvbmVudH0gbW9kZWxcbiAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvdmlldy9Db21wb25lbnR8bW9kdWxlOmVjaGFydHMvdmlldy9DaGFydH0gdmlld1xuICovXG5cblxuZnVuY3Rpb24gdXBkYXRlQmxlbmQoc2VyaWVzTW9kZWwsIGNoYXJ0Vmlldykge1xuICB2YXIgYmxlbmRNb2RlID0gc2VyaWVzTW9kZWwuZ2V0KCdibGVuZE1vZGUnKSB8fCBudWxsO1xuICBjaGFydFZpZXcuZ3JvdXAudHJhdmVyc2UoZnVuY3Rpb24gKGVsKSB7XG4gICAgLy8gRklYTUUgbWFya2VyIGFuZCBvdGhlciBjb21wb25lbnRzXG4gICAgaWYgKCFlbC5pc0dyb3VwKSB7XG4gICAgICAvLyBPbmx5IHNldCBpZiBibGVuZE1vZGUgaXMgY2hhbmdlZC4gSW4gY2FzZSBlbGVtZW50IGlzIGluY3JlbWVudGFsIGFuZCBkb24ndCB3YW4ndCB0byByZXJlbmRlci5cbiAgICAgIGlmIChlbC5zdHlsZS5ibGVuZCAhPT0gYmxlbmRNb2RlKSB7XG4gICAgICAgIGVsLnNldFN0eWxlKCdibGVuZCcsIGJsZW5kTW9kZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVsLmVhY2hQZW5kaW5nRGlzcGxheWFibGUpIHtcbiAgICAgIGVsLmVhY2hQZW5kaW5nRGlzcGxheWFibGUoZnVuY3Rpb24gKGRpc3BsYXlhYmxlKSB7XG4gICAgICAgIGRpc3BsYXlhYmxlLnNldFN0eWxlKCdibGVuZCcsIGJsZW5kTW9kZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL21vZGVsL1Nlcmllc3xtb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Db21wb25lbnR9IG1vZGVsXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL3ZpZXcvQ29tcG9uZW50fG1vZHVsZTplY2hhcnRzL3ZpZXcvQ2hhcnR9IHZpZXdcbiAqL1xuXG5cbmZ1bmN0aW9uIHVwZGF0ZVoobW9kZWwsIHZpZXcpIHtcbiAgdmFyIHogPSBtb2RlbC5nZXQoJ3onKTtcbiAgdmFyIHpsZXZlbCA9IG1vZGVsLmdldCgnemxldmVsJyk7IC8vIFNldCB6IGFuZCB6bGV2ZWxcblxuICB2aWV3Lmdyb3VwLnRyYXZlcnNlKGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbC50eXBlICE9PSAnZ3JvdXAnKSB7XG4gICAgICB6ICE9IG51bGwgJiYgKGVsLnogPSB6KTtcbiAgICAgIHpsZXZlbCAhPSBudWxsICYmIChlbC56bGV2ZWwgPSB6bGV2ZWwpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV4dGVuc2lvbkFQSShlY0luc3RhbmNlKSB7XG4gIHZhciBjb29yZFN5c01nciA9IGVjSW5zdGFuY2UuX2Nvb3JkU3lzTWdyO1xuICByZXR1cm4genJVdGlsLmV4dGVuZChuZXcgRXh0ZW5zaW9uQVBJKGVjSW5zdGFuY2UpLCB7XG4gICAgLy8gSW5qZWN0IG1ldGhvZHNcbiAgICBnZXRDb29yZGluYXRlU3lzdGVtczogenJVdGlsLmJpbmQoY29vcmRTeXNNZ3IuZ2V0Q29vcmRpbmF0ZVN5c3RlbXMsIGNvb3JkU3lzTWdyKSxcbiAgICBnZXRDb21wb25lbnRCeUVsZW1lbnQ6IGZ1bmN0aW9uIChlbCkge1xuICAgICAgd2hpbGUgKGVsKSB7XG4gICAgICAgIHZhciBtb2RlbEluZm8gPSBlbC5fX2VjQ29tcG9uZW50SW5mbztcblxuICAgICAgICBpZiAobW9kZWxJbmZvICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZWNJbnN0YW5jZS5fbW9kZWwuZ2V0Q29tcG9uZW50KG1vZGVsSW5mby5tYWluVHlwZSwgbW9kZWxJbmZvLmluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsID0gZWwucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIEB0eXBlIHtPYmplY3R9IGtleTogYWN0aW9uVHlwZS5cbiAqIEBpbm5lclxuICovXG5cblxudmFyIGFjdGlvbnMgPSB7fTtcbi8qKlxuICogTWFwIGV2ZW50VHlwZSB0byBhY3Rpb25UeXBlXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5cbnZhciBldmVudEFjdGlvbk1hcCA9IHt9O1xuLyoqXG4gKiBEYXRhIHByb2Nlc3NvciBmdW5jdGlvbnMgb2YgZWFjaCBzdGFnZVxuICogQHR5cGUge0FycmF5LjxPYmplY3QuPHN0cmluZywgRnVuY3Rpb24+Pn1cbiAqIEBpbm5lclxuICovXG5cbnZhciBkYXRhUHJvY2Vzc29yRnVuY3MgPSBbXTtcbi8qKlxuICogQHR5cGUge0FycmF5LjxGdW5jdGlvbj59XG4gKiBAaW5uZXJcbiAqL1xuXG52YXIgb3B0aW9uUHJlcHJvY2Vzc29yRnVuY3MgPSBbXTtcbi8qKlxuICogQHR5cGUge0FycmF5LjxGdW5jdGlvbj59XG4gKiBAaW5uZXJcbiAqL1xuXG52YXIgcG9zdFVwZGF0ZUZ1bmNzID0gW107XG4vKipcbiAqIFZpc3VhbCBlbmNvZGluZyBmdW5jdGlvbnMgb2YgZWFjaCBzdGFnZVxuICogQHR5cGUge0FycmF5LjxPYmplY3QuPHN0cmluZywgRnVuY3Rpb24+Pn1cbiAqL1xuXG52YXIgdmlzdWFsRnVuY3MgPSBbXTtcbi8qKlxuICogVGhlbWUgc3RvcmFnZVxuICogQHR5cGUge09iamVjdC48a2V5LCBPYmplY3Q+fVxuICovXG5cbnZhciB0aGVtZVN0b3JhZ2UgPSB7fTtcbi8qKlxuICogTG9hZGluZyBlZmZlY3RzXG4gKi9cblxudmFyIGxvYWRpbmdFZmZlY3RzID0ge307XG52YXIgaW5zdGFuY2VzID0ge307XG52YXIgY29ubmVjdGVkR3JvdXBzID0ge307XG52YXIgaWRCYXNlID0gbmV3IERhdGUoKSAtIDA7XG52YXIgZ3JvdXBJZEJhc2UgPSBuZXcgRGF0ZSgpIC0gMDtcbnZhciBET01fQVRUUklCVVRFX0tFWSA9ICdfZWNoYXJ0c19pbnN0YW5jZV8nO1xudmFyIG1hcERhdGFTdG9yZXMgPSB7fTtcblxuZnVuY3Rpb24gZW5hYmxlQ29ubmVjdChjaGFydCkge1xuICB2YXIgU1RBVFVTX1BFTkRJTkcgPSAwO1xuICB2YXIgU1RBVFVTX1VQREFUSU5HID0gMTtcbiAgdmFyIFNUQVRVU19VUERBVEVEID0gMjtcbiAgdmFyIFNUQVRVU19LRVkgPSAnX19jb25uZWN0VXBkYXRlU3RhdHVzJztcblxuICBmdW5jdGlvbiB1cGRhdGVDb25uZWN0ZWRDaGFydHNTdGF0dXMoY2hhcnRzLCBzdGF0dXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG90aGVyQ2hhcnQgPSBjaGFydHNbaV07XG4gICAgICBvdGhlckNoYXJ0W1NUQVRVU19LRVldID0gc3RhdHVzO1xuICAgIH1cbiAgfVxuXG4gIGVhY2goZXZlbnRBY3Rpb25NYXAsIGZ1bmN0aW9uIChhY3Rpb25UeXBlLCBldmVudFR5cGUpIHtcbiAgICBjaGFydC5fbWVzc2FnZUNlbnRlci5vbihldmVudFR5cGUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGNvbm5lY3RlZEdyb3Vwc1tjaGFydC5ncm91cF0gJiYgY2hhcnRbU1RBVFVTX0tFWV0gIT09IFNUQVRVU19QRU5ESU5HKSB7XG4gICAgICAgIGlmIChldmVudCAmJiBldmVudC5lc2NhcGVDb25uZWN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFjdGlvbiA9IGNoYXJ0Lm1ha2VBY3Rpb25Gcm9tRXZlbnQoZXZlbnQpO1xuICAgICAgICB2YXIgb3RoZXJDaGFydHMgPSBbXTtcbiAgICAgICAgZWFjaChpbnN0YW5jZXMsIGZ1bmN0aW9uIChvdGhlckNoYXJ0KSB7XG4gICAgICAgICAgaWYgKG90aGVyQ2hhcnQgIT09IGNoYXJ0ICYmIG90aGVyQ2hhcnQuZ3JvdXAgPT09IGNoYXJ0Lmdyb3VwKSB7XG4gICAgICAgICAgICBvdGhlckNoYXJ0cy5wdXNoKG90aGVyQ2hhcnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHVwZGF0ZUNvbm5lY3RlZENoYXJ0c1N0YXR1cyhvdGhlckNoYXJ0cywgU1RBVFVTX1BFTkRJTkcpO1xuICAgICAgICBlYWNoKG90aGVyQ2hhcnRzLCBmdW5jdGlvbiAob3RoZXJDaGFydCkge1xuICAgICAgICAgIGlmIChvdGhlckNoYXJ0W1NUQVRVU19LRVldICE9PSBTVEFUVVNfVVBEQVRJTkcpIHtcbiAgICAgICAgICAgIG90aGVyQ2hhcnQuZGlzcGF0Y2hBY3Rpb24oYWN0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB1cGRhdGVDb25uZWN0ZWRDaGFydHNTdGF0dXMob3RoZXJDaGFydHMsIFNUQVRVU19VUERBVEVEKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGRvbVxuICogQHBhcmFtIHtPYmplY3R9IFt0aGVtZV1cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMuZGV2aWNlUGl4ZWxSYXRpb10gVXNlIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIGJ5IGRlZmF1bHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5yZW5kZXJlcl0gQ3VycmVudGx5IG9ubHkgJ2NhbnZhcycgaXMgc3VwcG9ydGVkLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLndpZHRoXSBVc2UgY2xpZW50V2lkdGggb2YgdGhlIGlucHV0IGBkb21gIGJ5IGRlZmF1bHQuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhbiBiZSAnYXV0bycgKHRoZSBzYW1lIGFzIG51bGwvdW5kZWZpbmVkKVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLmhlaWdodF0gVXNlIGNsaWVudEhlaWdodCBvZiB0aGUgaW5wdXQgYGRvbWAgYnkgZGVmYXVsdC5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhbiBiZSAnYXV0bycgKHRoZSBzYW1lIGFzIG51bGwvdW5kZWZpbmVkKVxuICovXG5cblxuZnVuY3Rpb24gaW5pdChkb20sIHRoZW1lLCBvcHRzKSB7XG4gIHZhciBleGlzdEluc3RhbmNlID0gZ2V0SW5zdGFuY2VCeURvbShkb20pO1xuXG4gIGlmIChleGlzdEluc3RhbmNlKSB7XG4gICAgcmV0dXJuIGV4aXN0SW5zdGFuY2U7XG4gIH1cblxuICB2YXIgY2hhcnQgPSBuZXcgRUNoYXJ0cyhkb20sIHRoZW1lLCBvcHRzKTtcbiAgY2hhcnQuaWQgPSAnZWNfJyArIGlkQmFzZSsrO1xuICBpbnN0YW5jZXNbY2hhcnQuaWRdID0gY2hhcnQ7XG4gIG1vZGVsVXRpbC5zZXRBdHRyaWJ1dGUoZG9tLCBET01fQVRUUklCVVRFX0tFWSwgY2hhcnQuaWQpO1xuICBlbmFibGVDb25uZWN0KGNoYXJ0KTtcbiAgcmV0dXJuIGNoYXJ0O1xufVxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd8QXJyYXkuPG1vZHVsZTplY2hhcnRzfkVDaGFydHM+fSBncm91cElkXG4gKi9cblxuXG5mdW5jdGlvbiBjb25uZWN0KGdyb3VwSWQpIHtcbiAgLy8gSXMgYXJyYXkgb2YgY2hhcnRzXG4gIGlmICh6clV0aWwuaXNBcnJheShncm91cElkKSkge1xuICAgIHZhciBjaGFydHMgPSBncm91cElkO1xuICAgIGdyb3VwSWQgPSBudWxsOyAvLyBJZiBhbnkgY2hhcnQgaGFzIGdyb3VwXG5cbiAgICBlYWNoKGNoYXJ0cywgZnVuY3Rpb24gKGNoYXJ0KSB7XG4gICAgICBpZiAoY2hhcnQuZ3JvdXAgIT0gbnVsbCkge1xuICAgICAgICBncm91cElkID0gY2hhcnQuZ3JvdXA7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZ3JvdXBJZCA9IGdyb3VwSWQgfHwgJ2dfJyArIGdyb3VwSWRCYXNlKys7XG4gICAgZWFjaChjaGFydHMsIGZ1bmN0aW9uIChjaGFydCkge1xuICAgICAgY2hhcnQuZ3JvdXAgPSBncm91cElkO1xuICAgIH0pO1xuICB9XG5cbiAgY29ubmVjdGVkR3JvdXBzW2dyb3VwSWRdID0gdHJ1ZTtcbiAgcmV0dXJuIGdyb3VwSWQ7XG59XG4vKipcbiAqIEBERVBSRUNBVEVEXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGdyb3VwSWRcbiAqL1xuXG5cbmZ1bmN0aW9uIGRpc0Nvbm5lY3QoZ3JvdXBJZCkge1xuICBjb25uZWN0ZWRHcm91cHNbZ3JvdXBJZF0gPSBmYWxzZTtcbn1cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfSBncm91cElkXG4gKi9cblxuXG52YXIgZGlzY29ubmVjdCA9IGRpc0Nvbm5lY3Q7XG4vKipcbiAqIERpc3Bvc2UgYSBjaGFydCBpbnN0YW5jZVxuICogQHBhcmFtICB7bW9kdWxlOmVjaGFydHN+RUNoYXJ0c3xIVE1MRG9tRWxlbWVudHxzdHJpbmd9IGNoYXJ0XG4gKi9cblxuZnVuY3Rpb24gZGlzcG9zZShjaGFydCkge1xuICBpZiAodHlwZW9mIGNoYXJ0ID09PSAnc3RyaW5nJykge1xuICAgIGNoYXJ0ID0gaW5zdGFuY2VzW2NoYXJ0XTtcbiAgfSBlbHNlIGlmICghKGNoYXJ0IGluc3RhbmNlb2YgRUNoYXJ0cykpIHtcbiAgICAvLyBUcnkgdG8gdHJlYXQgYXMgZG9tXG4gICAgY2hhcnQgPSBnZXRJbnN0YW5jZUJ5RG9tKGNoYXJ0KTtcbiAgfVxuXG4gIGlmIChjaGFydCBpbnN0YW5jZW9mIEVDaGFydHMgJiYgIWNoYXJ0LmlzRGlzcG9zZWQoKSkge1xuICAgIGNoYXJ0LmRpc3Bvc2UoKTtcbiAgfVxufVxuLyoqXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZG9tXG4gKiBAcmV0dXJuIHtlY2hhcnRzfkVDaGFydHN9XG4gKi9cblxuXG5mdW5jdGlvbiBnZXRJbnN0YW5jZUJ5RG9tKGRvbSkge1xuICByZXR1cm4gaW5zdGFuY2VzW21vZGVsVXRpbC5nZXRBdHRyaWJ1dGUoZG9tLCBET01fQVRUUklCVVRFX0tFWSldO1xufVxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcmV0dXJuIHtlY2hhcnRzfkVDaGFydHN9XG4gKi9cblxuXG5mdW5jdGlvbiBnZXRJbnN0YW5jZUJ5SWQoa2V5KSB7XG4gIHJldHVybiBpbnN0YW5jZXNba2V5XTtcbn1cbi8qKlxuICogUmVnaXN0ZXIgdGhlbWVcbiAqL1xuXG5cbmZ1bmN0aW9uIHJlZ2lzdGVyVGhlbWUobmFtZSwgdGhlbWUpIHtcbiAgdGhlbWVTdG9yYWdlW25hbWVdID0gdGhlbWU7XG59XG4vKipcbiAqIFJlZ2lzdGVyIG9wdGlvbiBwcmVwcm9jZXNzb3JcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZXByb2Nlc3NvckZ1bmNcbiAqL1xuXG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUHJlcHJvY2Vzc29yKHByZXByb2Nlc3NvckZ1bmMpIHtcbiAgb3B0aW9uUHJlcHJvY2Vzc29yRnVuY3MucHVzaChwcmVwcm9jZXNzb3JGdW5jKTtcbn1cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IFtwcmlvcml0eT0xMDAwXVxuICogQHBhcmFtIHtPYmplY3R8RnVuY3Rpb259IHByb2Nlc3NvclxuICovXG5cblxuZnVuY3Rpb24gcmVnaXN0ZXJQcm9jZXNzb3IocHJpb3JpdHksIHByb2Nlc3Nvcikge1xuICBub3JtYWxpemVSZWdpc3RlcihkYXRhUHJvY2Vzc29yRnVuY3MsIHByaW9yaXR5LCBwcm9jZXNzb3IsIFBSSU9SSVRZX1BST0NFU1NPUl9GSUxURVIpO1xufVxuLyoqXG4gKiBSZWdpc3RlciBwb3N0VXBkYXRlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gcG9zdFVwZGF0ZUZ1bmNcbiAqL1xuXG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUG9zdFVwZGF0ZShwb3N0VXBkYXRlRnVuYykge1xuICBwb3N0VXBkYXRlRnVuY3MucHVzaChwb3N0VXBkYXRlRnVuYyk7XG59XG4vKipcbiAqIFVzYWdlOlxuICogcmVnaXN0ZXJBY3Rpb24oJ3NvbWVBY3Rpb24nLCAnc29tZUV2ZW50JywgZnVuY3Rpb24gKCkgeyAuLi4gfSk7XG4gKiByZWdpc3RlckFjdGlvbignc29tZUFjdGlvbicsIGZ1bmN0aW9uICgpIHsgLi4uIH0pO1xuICogcmVnaXN0ZXJBY3Rpb24oXG4gKiAgICAge3R5cGU6ICdzb21lQWN0aW9uJywgZXZlbnQ6ICdzb21lRXZlbnQnLCB1cGRhdGU6ICd1cGRhdGVWaWV3J30sXG4gKiAgICAgZnVuY3Rpb24gKCkgeyAuLi4gfVxuICogKTtcbiAqXG4gKiBAcGFyYW0geyhzdHJpbmd8T2JqZWN0KX0gYWN0aW9uSW5mb1xuICogQHBhcmFtIHtzdHJpbmd9IGFjdGlvbkluZm8udHlwZVxuICogQHBhcmFtIHtzdHJpbmd9IFthY3Rpb25JbmZvLmV2ZW50XVxuICogQHBhcmFtIHtzdHJpbmd9IFthY3Rpb25JbmZvLnVwZGF0ZV1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbZXZlbnROYW1lXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gYWN0aW9uXG4gKi9cblxuXG5mdW5jdGlvbiByZWdpc3RlckFjdGlvbihhY3Rpb25JbmZvLCBldmVudE5hbWUsIGFjdGlvbikge1xuICBpZiAodHlwZW9mIGV2ZW50TmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGFjdGlvbiA9IGV2ZW50TmFtZTtcbiAgICBldmVudE5hbWUgPSAnJztcbiAgfVxuXG4gIHZhciBhY3Rpb25UeXBlID0gaXNPYmplY3QoYWN0aW9uSW5mbykgPyBhY3Rpb25JbmZvLnR5cGUgOiBbYWN0aW9uSW5mbywgYWN0aW9uSW5mbyA9IHtcbiAgICBldmVudDogZXZlbnROYW1lXG4gIH1dWzBdOyAvLyBFdmVudCBuYW1lIGlzIGFsbCBsb3dlcmNhc2VcblxuICBhY3Rpb25JbmZvLmV2ZW50ID0gKGFjdGlvbkluZm8uZXZlbnQgfHwgYWN0aW9uVHlwZSkudG9Mb3dlckNhc2UoKTtcbiAgZXZlbnROYW1lID0gYWN0aW9uSW5mby5ldmVudDsgLy8gVmFsaWRhdGUgYWN0aW9uIHR5cGUgYW5kIGV2ZW50IG5hbWUuXG5cbiAgYXNzZXJ0KEFDVElPTl9SRUcudGVzdChhY3Rpb25UeXBlKSAmJiBBQ1RJT05fUkVHLnRlc3QoZXZlbnROYW1lKSk7XG5cbiAgaWYgKCFhY3Rpb25zW2FjdGlvblR5cGVdKSB7XG4gICAgYWN0aW9uc1thY3Rpb25UeXBlXSA9IHtcbiAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgYWN0aW9uSW5mbzogYWN0aW9uSW5mb1xuICAgIH07XG4gIH1cblxuICBldmVudEFjdGlvbk1hcFtldmVudE5hbWVdID0gYWN0aW9uVHlwZTtcbn1cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7Kn0gQ29vcmRpbmF0ZVN5c3RlbVxuICovXG5cblxuZnVuY3Rpb24gcmVnaXN0ZXJDb29yZGluYXRlU3lzdGVtKHR5cGUsIENvb3JkaW5hdGVTeXN0ZW0pIHtcbiAgQ29vcmRpbmF0ZVN5c3RlbU1hbmFnZXIucmVnaXN0ZXIodHlwZSwgQ29vcmRpbmF0ZVN5c3RlbSk7XG59XG4vKipcbiAqIEdldCBkaW1lbnNpb25zIG9mIHNwZWNpZmllZCBjb29yZGluYXRlIHN5c3RlbS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcmV0dXJuIHtBcnJheS48c3RyaW5nfE9iamVjdD59XG4gKi9cblxuXG5mdW5jdGlvbiBnZXRDb29yZGluYXRlU3lzdGVtRGltZW5zaW9ucyh0eXBlKSB7XG4gIHZhciBjb29yZFN5c0NyZWF0b3IgPSBDb29yZGluYXRlU3lzdGVtTWFuYWdlci5nZXQodHlwZSk7XG5cbiAgaWYgKGNvb3JkU3lzQ3JlYXRvcikge1xuICAgIHJldHVybiBjb29yZFN5c0NyZWF0b3IuZ2V0RGltZW5zaW9uc0luZm8gPyBjb29yZFN5c0NyZWF0b3IuZ2V0RGltZW5zaW9uc0luZm8oKSA6IGNvb3JkU3lzQ3JlYXRvci5kaW1lbnNpb25zLnNsaWNlKCk7XG4gIH1cbn1cbi8qKlxuICogTGF5b3V0IGlzIGEgc3BlY2lhbCBzdGFnZSBvZiB2aXN1YWwgZW5jb2RpbmdcbiAqIE1vc3QgdmlzdWFsIGVuY29kaW5nIGxpa2UgY29sb3IgYXJlIGNvbW1vbiBmb3IgZGlmZmVyZW50IGNoYXJ0XG4gKiBCdXQgZWFjaCBjaGFydCBoYXMgaXQncyBvd24gbGF5b3V0IGFsZ29yaXRobVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbcHJpb3JpdHk9MTAwMF1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGxheW91dFRhc2tcbiAqL1xuXG5cbmZ1bmN0aW9uIHJlZ2lzdGVyTGF5b3V0KHByaW9yaXR5LCBsYXlvdXRUYXNrKSB7XG4gIG5vcm1hbGl6ZVJlZ2lzdGVyKHZpc3VhbEZ1bmNzLCBwcmlvcml0eSwgbGF5b3V0VGFzaywgUFJJT1JJVFlfVklTVUFMX0xBWU9VVCwgJ2xheW91dCcpO1xufVxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gW3ByaW9yaXR5PTMwMDBdXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL3N0cmVhbS9UYXNrfSB2aXN1YWxUYXNrXG4gKi9cblxuXG5mdW5jdGlvbiByZWdpc3RlclZpc3VhbChwcmlvcml0eSwgdmlzdWFsVGFzaykge1xuICBub3JtYWxpemVSZWdpc3Rlcih2aXN1YWxGdW5jcywgcHJpb3JpdHksIHZpc3VhbFRhc2ssIFBSSU9SSVRZX1ZJU1VBTF9DSEFSVCwgJ3Zpc3VhbCcpO1xufVxuLyoqXG4gKiBAcGFyYW0ge09iamVjdHxGdW5jdGlvbn0gZm46IHtzZXJpZXNUeXBlLCBjcmVhdGVPbkFsbFNlcmllcywgcGVyZm9ybVJhd1NlcmllcywgcmVzZXR9XG4gKi9cblxuXG5mdW5jdGlvbiBub3JtYWxpemVSZWdpc3Rlcih0YXJnZXRMaXN0LCBwcmlvcml0eSwgZm4sIGRlZmF1bHRQcmlvcml0eSwgdmlzdWFsVHlwZSkge1xuICBpZiAoaXNGdW5jdGlvbihwcmlvcml0eSkgfHwgaXNPYmplY3QocHJpb3JpdHkpKSB7XG4gICAgZm4gPSBwcmlvcml0eTtcbiAgICBwcmlvcml0eSA9IGRlZmF1bHRQcmlvcml0eTtcbiAgfVxuXG4gIHZhciBzdGFnZUhhbmRsZXIgPSBTY2hlZHVsZXIud3JhcFN0YWdlSGFuZGxlcihmbiwgdmlzdWFsVHlwZSk7XG4gIHN0YWdlSGFuZGxlci5fX3ByaW8gPSBwcmlvcml0eTtcbiAgc3RhZ2VIYW5kbGVyLl9fcmF3ID0gZm47XG4gIHRhcmdldExpc3QucHVzaChzdGFnZUhhbmRsZXIpO1xuICByZXR1cm4gc3RhZ2VIYW5kbGVyO1xufVxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICovXG5cblxuZnVuY3Rpb24gcmVnaXN0ZXJMb2FkaW5nKG5hbWUsIGxvYWRpbmdGeCkge1xuICBsb2FkaW5nRWZmZWN0c1tuYW1lXSA9IGxvYWRpbmdGeDtcbn1cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3VwZXJDbGFzc11cbiAqL1xuXG5cbmZ1bmN0aW9uIGV4dGVuZENvbXBvbmVudE1vZGVsKG9wdHNcbi8qLCBzdXBlckNsYXNzKi9cbikge1xuICAvLyB2YXIgQ2xhenogPSBDb21wb25lbnRNb2RlbDtcbiAgLy8gaWYgKHN1cGVyQ2xhc3MpIHtcbiAgLy8gICAgIHZhciBjbGFzc1R5cGUgPSBwYXJzZUNsYXNzVHlwZShzdXBlckNsYXNzKTtcbiAgLy8gICAgIENsYXp6ID0gQ29tcG9uZW50TW9kZWwuZ2V0Q2xhc3MoY2xhc3NUeXBlLm1haW4sIGNsYXNzVHlwZS5zdWIsIHRydWUpO1xuICAvLyB9XG4gIHJldHVybiBDb21wb25lbnRNb2RlbC5leHRlbmQob3B0cyk7XG59XG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N1cGVyQ2xhc3NdXG4gKi9cblxuXG5mdW5jdGlvbiBleHRlbmRDb21wb25lbnRWaWV3KG9wdHNcbi8qLCBzdXBlckNsYXNzKi9cbikge1xuICAvLyB2YXIgQ2xhenogPSBDb21wb25lbnRWaWV3O1xuICAvLyBpZiAoc3VwZXJDbGFzcykge1xuICAvLyAgICAgdmFyIGNsYXNzVHlwZSA9IHBhcnNlQ2xhc3NUeXBlKHN1cGVyQ2xhc3MpO1xuICAvLyAgICAgQ2xhenogPSBDb21wb25lbnRWaWV3LmdldENsYXNzKGNsYXNzVHlwZS5tYWluLCBjbGFzc1R5cGUuc3ViLCB0cnVlKTtcbiAgLy8gfVxuICByZXR1cm4gQ29tcG9uZW50Vmlldy5leHRlbmQob3B0cyk7XG59XG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N1cGVyQ2xhc3NdXG4gKi9cblxuXG5mdW5jdGlvbiBleHRlbmRTZXJpZXNNb2RlbChvcHRzXG4vKiwgc3VwZXJDbGFzcyovXG4pIHtcbiAgLy8gdmFyIENsYXp6ID0gU2VyaWVzTW9kZWw7XG4gIC8vIGlmIChzdXBlckNsYXNzKSB7XG4gIC8vICAgICBzdXBlckNsYXNzID0gJ3Nlcmllcy4nICsgc3VwZXJDbGFzcy5yZXBsYWNlKCdzZXJpZXMuJywgJycpO1xuICAvLyAgICAgdmFyIGNsYXNzVHlwZSA9IHBhcnNlQ2xhc3NUeXBlKHN1cGVyQ2xhc3MpO1xuICAvLyAgICAgQ2xhenogPSBDb21wb25lbnRNb2RlbC5nZXRDbGFzcyhjbGFzc1R5cGUubWFpbiwgY2xhc3NUeXBlLnN1YiwgdHJ1ZSk7XG4gIC8vIH1cbiAgcmV0dXJuIFNlcmllc01vZGVsLmV4dGVuZChvcHRzKTtcbn1cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3VwZXJDbGFzc11cbiAqL1xuXG5cbmZ1bmN0aW9uIGV4dGVuZENoYXJ0VmlldyhvcHRzXG4vKiwgc3VwZXJDbGFzcyovXG4pIHtcbiAgLy8gdmFyIENsYXp6ID0gQ2hhcnRWaWV3O1xuICAvLyBpZiAoc3VwZXJDbGFzcykge1xuICAvLyAgICAgc3VwZXJDbGFzcyA9IHN1cGVyQ2xhc3MucmVwbGFjZSgnc2VyaWVzLicsICcnKTtcbiAgLy8gICAgIHZhciBjbGFzc1R5cGUgPSBwYXJzZUNsYXNzVHlwZShzdXBlckNsYXNzKTtcbiAgLy8gICAgIENsYXp6ID0gQ2hhcnRWaWV3LmdldENsYXNzKGNsYXNzVHlwZS5tYWluLCB0cnVlKTtcbiAgLy8gfVxuICByZXR1cm4gQ2hhcnRWaWV3LmV4dGVuZChvcHRzKTtcbn1cbi8qKlxuICogWlJlbmRlciBuZWVkIGEgY2FudmFzIGNvbnRleHQgdG8gZG8gbWVhc3VyZVRleHQuXG4gKiBCdXQgaW4gbm9kZSBlbnZpcm9ubWVudCBjYW52YXMgbWF5IGJlIGNyZWF0ZWQgYnkgbm9kZS1jYW52YXMuXG4gKiBTbyB3ZSBuZWVkIHRvIHNwZWNpZnkgaG93IHRvIGNyZWF0ZSBhIGNhbnZhcyBpbnN0ZWFkIG9mIHVzaW5nIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXG4gKlxuICogQmUgY2FyZWZ1bCBvZiB1c2luZyBpdCBpbiB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjcmVhdG9yXG4gKiBAZXhhbXBsZVxuICogICAgIHZhciBDYW52YXMgPSByZXF1aXJlKCdjYW52YXMnKTtcbiAqICAgICB2YXIgZWNoYXJ0cyA9IHJlcXVpcmUoJ2VjaGFydHMnKTtcbiAqICAgICBlY2hhcnRzLnNldENhbnZhc0NyZWF0b3IoZnVuY3Rpb24gKCkge1xuICogICAgICAgICAvLyBTbWFsbCBzaXplIGlzIGVub3VnaC5cbiAqICAgICAgICAgcmV0dXJuIG5ldyBDYW52YXMoMzIsIDMyKTtcbiAqICAgICB9KTtcbiAqL1xuXG5cbmZ1bmN0aW9uIHNldENhbnZhc0NyZWF0b3IoY3JlYXRvcikge1xuICB6clV0aWwuJG92ZXJyaWRlKCdjcmVhdGVDYW52YXMnLCBjcmVhdG9yKTtcbn1cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcE5hbWVcbiAqIEBwYXJhbSB7T2JqZWN0fHN0cmluZ30gZ2VvSnNvblxuICogQHBhcmFtIHtPYmplY3R9IFtzcGVjaWFsQXJlYXNdXG4gKlxuICogQGV4YW1wbGVcbiAqICAgICAkLmdldCgnVVNBLmpzb24nLCBmdW5jdGlvbiAoZ2VvSnNvbikge1xuICogICAgICAgICBlY2hhcnRzLnJlZ2lzdGVyTWFwKCdVU0EnLCBnZW9Kc29uKTtcbiAqICAgICAgICAgLy8gT3JcbiAqICAgICAgICAgZWNoYXJ0cy5yZWdpc3Rlck1hcCgnVVNBJywge1xuICogICAgICAgICAgICAgZ2VvSnNvbjogZ2VvSnNvbixcbiAqICAgICAgICAgICAgIHNwZWNpYWxBcmVhczoge31cbiAqICAgICAgICAgfSlcbiAqICAgICB9KTtcbiAqL1xuXG5cbmZ1bmN0aW9uIHJlZ2lzdGVyTWFwKG1hcE5hbWUsIGdlb0pzb24sIHNwZWNpYWxBcmVhcykge1xuICBpZiAoZ2VvSnNvbi5nZW9Kc29uICYmICFnZW9Kc29uLmZlYXR1cmVzKSB7XG4gICAgc3BlY2lhbEFyZWFzID0gZ2VvSnNvbi5zcGVjaWFsQXJlYXM7XG4gICAgZ2VvSnNvbiA9IGdlb0pzb24uZ2VvSnNvbjtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZ2VvSnNvbiA9PT0gJ3N0cmluZycpIHtcbiAgICBnZW9Kc29uID0gdHlwZW9mIEpTT04gIT09ICd1bmRlZmluZWQnICYmIEpTT04ucGFyc2UgPyBKU09OLnBhcnNlKGdlb0pzb24pIDogbmV3IEZ1bmN0aW9uKCdyZXR1cm4gKCcgKyBnZW9Kc29uICsgJyk7JykoKTtcbiAgfVxuXG4gIG1hcERhdGFTdG9yZXNbbWFwTmFtZV0gPSB7XG4gICAgZ2VvSnNvbjogZ2VvSnNvbixcbiAgICBzcGVjaWFsQXJlYXM6IHNwZWNpYWxBcmVhc1xuICB9O1xufVxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFwTmFtZVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cblxuZnVuY3Rpb24gZ2V0TWFwKG1hcE5hbWUpIHtcbiAgcmV0dXJuIG1hcERhdGFTdG9yZXNbbWFwTmFtZV07XG59XG5cbnJlZ2lzdGVyVmlzdWFsKFBSSU9SSVRZX1ZJU1VBTF9HTE9CQUwsIHNlcmllc0NvbG9yKTtcbnJlZ2lzdGVyUHJlcHJvY2Vzc29yKGJhY2t3YXJkQ29tcGF0KTtcbnJlZ2lzdGVyUHJvY2Vzc29yKFBSSU9SSVRZX1BST0NFU1NPUl9TVEFUSVNUSUMsIGRhdGFTdGFjayk7XG5yZWdpc3RlckxvYWRpbmcoJ2RlZmF1bHQnLCBsb2FkaW5nRGVmYXVsdCk7IC8vIERlZmF1bHQgYWN0aW9uc1xuXG5yZWdpc3RlckFjdGlvbih7XG4gIHR5cGU6ICdoaWdobGlnaHQnLFxuICBldmVudDogJ2hpZ2hsaWdodCcsXG4gIHVwZGF0ZTogJ2hpZ2hsaWdodCdcbn0sIHpyVXRpbC5ub29wKTtcbnJlZ2lzdGVyQWN0aW9uKHtcbiAgdHlwZTogJ2Rvd25wbGF5JyxcbiAgZXZlbnQ6ICdkb3ducGxheScsXG4gIHVwZGF0ZTogJ2Rvd25wbGF5J1xufSwgenJVdGlsLm5vb3ApOyAvLyBEZWZhdWx0IHRoZW1lXG5cbnJlZ2lzdGVyVGhlbWUoJ2xpZ2h0JywgbGlnaHRUaGVtZSk7XG5yZWdpc3RlclRoZW1lKCdkYXJrJywgZGFya1RoZW1lKTsgLy8gRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHdoZXJlIHRoZSBuYW1lc3BhY2UgYGRhdGFUb29sYCB3aWxsXG4vLyBiZSBtb3VudGVkIG9uIGBlY2hhcnRzYCBpcyB0aGUgZXh0ZW5zaW9uIGBkYXRhVG9vbGAgaXMgaW1wb3J0ZWQuXG5cbnZhciBkYXRhVG9vbCA9IHt9O1xuZXhwb3J0cy52ZXJzaW9uID0gdmVyc2lvbjtcbmV4cG9ydHMuZGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzO1xuZXhwb3J0cy5QUklPUklUWSA9IFBSSU9SSVRZO1xuZXhwb3J0cy5pbml0ID0gaW5pdDtcbmV4cG9ydHMuY29ubmVjdCA9IGNvbm5lY3Q7XG5leHBvcnRzLmRpc0Nvbm5lY3QgPSBkaXNDb25uZWN0O1xuZXhwb3J0cy5kaXNjb25uZWN0ID0gZGlzY29ubmVjdDtcbmV4cG9ydHMuZGlzcG9zZSA9IGRpc3Bvc2U7XG5leHBvcnRzLmdldEluc3RhbmNlQnlEb20gPSBnZXRJbnN0YW5jZUJ5RG9tO1xuZXhwb3J0cy5nZXRJbnN0YW5jZUJ5SWQgPSBnZXRJbnN0YW5jZUJ5SWQ7XG5leHBvcnRzLnJlZ2lzdGVyVGhlbWUgPSByZWdpc3RlclRoZW1lO1xuZXhwb3J0cy5yZWdpc3RlclByZXByb2Nlc3NvciA9IHJlZ2lzdGVyUHJlcHJvY2Vzc29yO1xuZXhwb3J0cy5yZWdpc3RlclByb2Nlc3NvciA9IHJlZ2lzdGVyUHJvY2Vzc29yO1xuZXhwb3J0cy5yZWdpc3RlclBvc3RVcGRhdGUgPSByZWdpc3RlclBvc3RVcGRhdGU7XG5leHBvcnRzLnJlZ2lzdGVyQWN0aW9uID0gcmVnaXN0ZXJBY3Rpb247XG5leHBvcnRzLnJlZ2lzdGVyQ29vcmRpbmF0ZVN5c3RlbSA9IHJlZ2lzdGVyQ29vcmRpbmF0ZVN5c3RlbTtcbmV4cG9ydHMuZ2V0Q29vcmRpbmF0ZVN5c3RlbURpbWVuc2lvbnMgPSBnZXRDb29yZGluYXRlU3lzdGVtRGltZW5zaW9ucztcbmV4cG9ydHMucmVnaXN0ZXJMYXlvdXQgPSByZWdpc3RlckxheW91dDtcbmV4cG9ydHMucmVnaXN0ZXJWaXN1YWwgPSByZWdpc3RlclZpc3VhbDtcbmV4cG9ydHMucmVnaXN0ZXJMb2FkaW5nID0gcmVnaXN0ZXJMb2FkaW5nO1xuZXhwb3J0cy5leHRlbmRDb21wb25lbnRNb2RlbCA9IGV4dGVuZENvbXBvbmVudE1vZGVsO1xuZXhwb3J0cy5leHRlbmRDb21wb25lbnRWaWV3ID0gZXh0ZW5kQ29tcG9uZW50VmlldztcbmV4cG9ydHMuZXh0ZW5kU2VyaWVzTW9kZWwgPSBleHRlbmRTZXJpZXNNb2RlbDtcbmV4cG9ydHMuZXh0ZW5kQ2hhcnRWaWV3ID0gZXh0ZW5kQ2hhcnRWaWV3O1xuZXhwb3J0cy5zZXRDYW52YXNDcmVhdG9yID0gc2V0Q2FudmFzQ3JlYXRvcjtcbmV4cG9ydHMucmVnaXN0ZXJNYXAgPSByZWdpc3Rlck1hcDtcbmV4cG9ydHMuZ2V0TWFwID0gZ2V0TWFwO1xuZXhwb3J0cy5kYXRhVG9vbCA9IGRhdGFUb29sO1xudmFyIF9fX2VjX2V4cG9ydCA9IHJlcXVpcmUoXCIuL2V4cG9ydFwiKTtcbihmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIga2V5IGluIF9fX2VjX2V4cG9ydCkge1xuICAgICAgICBpZiAoX19fZWNfZXhwb3J0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIGV4cG9ydHNba2V5XSA9IF9fX2VjX2V4cG9ydFtrZXldO1xuICAgICAgICB9XG4gICAgfVxufSkoKTsiLCJ2YXIgenJlbmRlciA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi96cmVuZGVyXCIpO1xuXG5leHBvcnRzLnpyZW5kZXIgPSB6cmVuZGVyO1xuXG52YXIgbWF0cml4ID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvbWF0cml4XCIpO1xuXG5leHBvcnRzLm1hdHJpeCA9IG1hdHJpeDtcblxudmFyIHZlY3RvciA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3ZlY3RvclwiKTtcblxuZXhwb3J0cy52ZWN0b3IgPSB2ZWN0b3I7XG5cbnZhciB6clV0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgY29sb3JUb29sID0gcmVxdWlyZShcInpyZW5kZXIvbGliL3Rvb2wvY29sb3JcIik7XG5cbmV4cG9ydHMuY29sb3IgPSBjb2xvclRvb2w7XG5cbnZhciBncmFwaGljID0gcmVxdWlyZShcIi4vdXRpbC9ncmFwaGljXCIpO1xuXG5leHBvcnRzLmdyYXBoaWMgPSBncmFwaGljO1xuXG52YXIgbnVtYmVyVXRpbCA9IHJlcXVpcmUoXCIuL3V0aWwvbnVtYmVyXCIpO1xuXG5leHBvcnRzLm51bWJlciA9IG51bWJlclV0aWw7XG5cbnZhciBmb3JtYXRVdGlsID0gcmVxdWlyZShcIi4vdXRpbC9mb3JtYXRcIik7XG5cbmV4cG9ydHMuZm9ybWF0ID0gZm9ybWF0VXRpbDtcblxudmFyIF90aHJvdHRsZSA9IHJlcXVpcmUoXCIuL3V0aWwvdGhyb3R0bGVcIik7XG5cbnZhciB0aHJvdHRsZSA9IF90aHJvdHRsZS50aHJvdHRsZTtcbmV4cG9ydHMudGhyb3R0bGUgPSBfdGhyb3R0bGUudGhyb3R0bGU7XG5cbnZhciBlY0hlbHBlciA9IHJlcXVpcmUoXCIuL2hlbHBlclwiKTtcblxuZXhwb3J0cy5oZWxwZXIgPSBlY0hlbHBlcjtcblxudmFyIHBhcnNlR2VvSlNPTiA9IHJlcXVpcmUoXCIuL2Nvb3JkL2dlby9wYXJzZUdlb0pzb25cIik7XG5cbmV4cG9ydHMucGFyc2VHZW9KU09OID0gcGFyc2VHZW9KU09OO1xuXG52YXIgX0xpc3QgPSByZXF1aXJlKFwiLi9kYXRhL0xpc3RcIik7XG5cbmV4cG9ydHMuTGlzdCA9IF9MaXN0O1xuXG52YXIgX01vZGVsID0gcmVxdWlyZShcIi4vbW9kZWwvTW9kZWxcIik7XG5cbmV4cG9ydHMuTW9kZWwgPSBfTW9kZWw7XG5cbnZhciBfQXhpcyA9IHJlcXVpcmUoXCIuL2Nvb3JkL0F4aXNcIik7XG5cbmV4cG9ydHMuQXhpcyA9IF9BeGlzO1xuXG52YXIgX2VudiA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL2VudlwiKTtcblxuZXhwb3J0cy5lbnYgPSBfZW52O1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbi8qKlxuICogRG8gbm90IG1vdW50IHRob3NlIG1vZHVsZXMgb24gJ3NyYy9lY2hhcnRzJyBmb3IgYmV0dGVyIHRyZWUgc2hha2luZy5cbiAqL1xudmFyIHBhcnNlR2VvSnNvbiA9IHBhcnNlR2VvSlNPTjtcbnZhciBlY1V0aWwgPSB7fTtcbnpyVXRpbC5lYWNoKFsnbWFwJywgJ2VhY2gnLCAnZmlsdGVyJywgJ2luZGV4T2YnLCAnaW5oZXJpdHMnLCAncmVkdWNlJywgJ2ZpbHRlcicsICdiaW5kJywgJ2N1cnJ5JywgJ2lzQXJyYXknLCAnaXNTdHJpbmcnLCAnaXNPYmplY3QnLCAnaXNGdW5jdGlvbicsICdleHRlbmQnLCAnZGVmYXVsdHMnLCAnY2xvbmUnLCAnbWVyZ2UnXSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgZWNVdGlsW25hbWVdID0genJVdGlsW25hbWVdO1xufSk7XG5leHBvcnRzLnBhcnNlR2VvSnNvbiA9IHBhcnNlR2VvSnNvbjtcbmV4cG9ydHMudXRpbCA9IGVjVXRpbDsiLCJ2YXIgenJVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxudmFyIGNyZWF0ZUxpc3RGcm9tQXJyYXkgPSByZXF1aXJlKFwiLi9jaGFydC9oZWxwZXIvY3JlYXRlTGlzdEZyb21BcnJheVwiKTtcblxudmFyIGF4aXNIZWxwZXIgPSByZXF1aXJlKFwiLi9jb29yZC9heGlzSGVscGVyXCIpO1xuXG52YXIgYXhpc01vZGVsQ29tbW9uTWl4aW4gPSByZXF1aXJlKFwiLi9jb29yZC9heGlzTW9kZWxDb21tb25NaXhpblwiKTtcblxudmFyIE1vZGVsID0gcmVxdWlyZShcIi4vbW9kZWwvTW9kZWxcIik7XG5cbnZhciBfbGF5b3V0ID0gcmVxdWlyZShcIi4vdXRpbC9sYXlvdXRcIik7XG5cbnZhciBnZXRMYXlvdXRSZWN0ID0gX2xheW91dC5nZXRMYXlvdXRSZWN0O1xuZXhwb3J0cy5nZXRMYXlvdXRSZWN0ID0gX2xheW91dC5nZXRMYXlvdXRSZWN0O1xuXG52YXIgX2RhdGFTdGFja0hlbHBlciA9IHJlcXVpcmUoXCIuL2RhdGEvaGVscGVyL2RhdGFTdGFja0hlbHBlclwiKTtcblxudmFyIGVuYWJsZURhdGFTdGFjayA9IF9kYXRhU3RhY2tIZWxwZXIuZW5hYmxlRGF0YVN0YWNrO1xudmFyIGlzRGltZW5zaW9uU3RhY2tlZCA9IF9kYXRhU3RhY2tIZWxwZXIuaXNEaW1lbnNpb25TdGFja2VkO1xudmFyIGdldFN0YWNrZWREaW1lbnNpb24gPSBfZGF0YVN0YWNrSGVscGVyLmdldFN0YWNrZWREaW1lbnNpb247XG5cbnZhciBfY29tcGxldGVEaW1lbnNpb25zID0gcmVxdWlyZShcIi4vZGF0YS9oZWxwZXIvY29tcGxldGVEaW1lbnNpb25zXCIpO1xuXG5leHBvcnRzLmNvbXBsZXRlRGltZW5zaW9ucyA9IF9jb21wbGV0ZURpbWVuc2lvbnM7XG5cbnZhciBfY3JlYXRlRGltZW5zaW9ucyA9IHJlcXVpcmUoXCIuL2RhdGEvaGVscGVyL2NyZWF0ZURpbWVuc2lvbnNcIik7XG5cbmV4cG9ydHMuY3JlYXRlRGltZW5zaW9ucyA9IF9jcmVhdGVEaW1lbnNpb25zO1xuXG52YXIgX3N5bWJvbCA9IHJlcXVpcmUoXCIuL3V0aWwvc3ltYm9sXCIpO1xuXG5leHBvcnRzLmNyZWF0ZVN5bWJvbCA9IF9zeW1ib2wuY3JlYXRlU3ltYm9sO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG4vLyBpbXBvcnQgY3JlYXRlR3JhcGhGcm9tTm9kZUVkZ2UgZnJvbSAnLi9jaGFydC9oZWxwZXIvY3JlYXRlR3JhcGhGcm9tTm9kZUVkZ2UnO1xuXG4vKipcbiAqIENyZWF0ZSBhIG11dGkgZGltZW5zaW9uIExpc3Qgc3RydWN0dXJlIGZyb20gc2VyaWVzTW9kZWwuXG4gKiBAcGFyYW0gIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Nb2RlbH0gc2VyaWVzTW9kZWxcbiAqIEByZXR1cm4ge21vZHVsZTplY2hhcnRzL2RhdGEvTGlzdH0gbGlzdFxuICovXG5mdW5jdGlvbiBjcmVhdGVMaXN0KHNlcmllc01vZGVsKSB7XG4gIHJldHVybiBjcmVhdGVMaXN0RnJvbUFycmF5KHNlcmllc01vZGVsLmdldFNvdXJjZSgpLCBzZXJpZXNNb2RlbCk7XG59IC8vIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVHcmFwaChzZXJpZXNNb2RlbCkge1xuLy8gICAgIHZhciBub2RlcyA9IHNlcmllc01vZGVsLmdldCgnZGF0YScpO1xuLy8gICAgIHZhciBsaW5rcyA9IHNlcmllc01vZGVsLmdldCgnbGlua3MnKTtcbi8vICAgICByZXR1cm4gY3JlYXRlR3JhcGhGcm9tTm9kZUVkZ2Uobm9kZXMsIGxpbmtzLCBzZXJpZXNNb2RlbCk7XG4vLyB9XG5cblxudmFyIGRhdGFTdGFjayA9IHtcbiAgaXNEaW1lbnNpb25TdGFja2VkOiBpc0RpbWVuc2lvblN0YWNrZWQsXG4gIGVuYWJsZURhdGFTdGFjazogZW5hYmxlRGF0YVN0YWNrLFxuICBnZXRTdGFja2VkRGltZW5zaW9uOiBnZXRTdGFja2VkRGltZW5zaW9uXG59O1xuLyoqXG4gKiBDcmVhdGUgYSBzeW1ib2wgZWxlbWVudCB3aXRoIGdpdmVuIHN5bWJvbCBjb25maWd1cmF0aW9uOiBzaGFwZSwgeCwgeSwgd2lkdGgsIGhlaWdodCwgY29sb3JcbiAqIEBzZWUgaHR0cDovL2VjaGFydHMuYmFpZHUuY29tL29wdGlvbi5odG1sI3Nlcmllcy1zY2F0dGVyLnN5bWJvbFxuICogQHBhcmFtIHtzdHJpbmd9IHN5bWJvbERlc2NcbiAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gKiBAcGFyYW0ge251bWJlcn0geVxuICogQHBhcmFtIHtudW1iZXJ9IHdcbiAqIEBwYXJhbSB7bnVtYmVyfSBoXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3JcbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBzY2FsZVxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gZGF0YUV4dGVudFxuICogQHBhcmFtIHtPYmplY3R8bW9kdWxlOmVjaGFydHMvTW9kZWx9IG9wdGlvblxuICovXG5mdW5jdGlvbiBjcmVhdGVTY2FsZShkYXRhRXh0ZW50LCBvcHRpb24pIHtcbiAgdmFyIGF4aXNNb2RlbCA9IG9wdGlvbjtcblxuICBpZiAoIU1vZGVsLmlzSW5zdGFuY2Uob3B0aW9uKSkge1xuICAgIGF4aXNNb2RlbCA9IG5ldyBNb2RlbChvcHRpb24pO1xuICAgIHpyVXRpbC5taXhpbihheGlzTW9kZWwsIGF4aXNNb2RlbENvbW1vbk1peGluKTtcbiAgfVxuXG4gIHZhciBzY2FsZSA9IGF4aXNIZWxwZXIuY3JlYXRlU2NhbGVCeU1vZGVsKGF4aXNNb2RlbCk7XG4gIHNjYWxlLnNldEV4dGVudChkYXRhRXh0ZW50WzBdLCBkYXRhRXh0ZW50WzFdKTtcbiAgYXhpc0hlbHBlci5uaWNlU2NhbGVFeHRlbnQoc2NhbGUsIGF4aXNNb2RlbCk7XG4gIHJldHVybiBzY2FsZTtcbn1cbi8qKlxuICogTWl4aW4gY29tbW9uIG1ldGhvZHMgdG8gYXhpcyBtb2RlbCxcbiAqXG4gKiBJbmxjdWRlIG1ldGhvZHNcbiAqIGBnZXRGb3JtYXR0ZWRMYWJlbHMoKSA9PiBBcnJheS48c3RyaW5nPmBcbiAqIGBnZXRDYXRlZ29yaWVzKCkgPT4gQXJyYXkuPHN0cmluZz5gXG4gKiBgZ2V0TWluKG9yaWdpbjogYm9vbGVhbikgPT4gbnVtYmVyYFxuICogYGdldE1heChvcmlnaW46IGJvb2xlYW4pID0+IG51bWJlcmBcbiAqIGBnZXROZWVkQ3Jvc3NaZXJvKCkgPT4gYm9vbGVhbmBcbiAqIGBzZXRSYW5nZShzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcilgXG4gKiBgcmVzZXRSYW5nZSgpYFxuICovXG5cblxuZnVuY3Rpb24gbWl4aW5BeGlzTW9kZWxDb21tb25NZXRob2RzKE1vZGVsKSB7XG4gIHpyVXRpbC5taXhpbihNb2RlbCwgYXhpc01vZGVsQ29tbW9uTWl4aW4pO1xufVxuXG5leHBvcnRzLmNyZWF0ZUxpc3QgPSBjcmVhdGVMaXN0O1xuZXhwb3J0cy5kYXRhU3RhY2sgPSBkYXRhU3RhY2s7XG5leHBvcnRzLmNyZWF0ZVNjYWxlID0gY3JlYXRlU2NhbGU7XG5leHBvcnRzLm1peGluQXhpc01vZGVsQ29tbW9uTWV0aG9kcyA9IG1peGluQXhpc01vZGVsQ29tbW9uTWV0aG9kczsiLCIvKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgX2RlZmF1bHQgPSB7XG4gIHRvb2xib3g6IHtcbiAgICBicnVzaDoge1xuICAgICAgdGl0bGU6IHtcbiAgICAgICAgcmVjdDogJ+efqeW9oumAieaLqScsXG4gICAgICAgIHBvbHlnb246ICflnIjpgIknLFxuICAgICAgICBsaW5lWDogJ+aoquWQkemAieaLqScsXG4gICAgICAgIGxpbmVZOiAn57q15ZCR6YCJ5oupJyxcbiAgICAgICAga2VlcDogJ+S/neaMgemAieaLqScsXG4gICAgICAgIGNsZWFyOiAn5riF6Zmk6YCJ5oupJ1xuICAgICAgfVxuICAgIH0sXG4gICAgZGF0YVZpZXc6IHtcbiAgICAgIHRpdGxlOiAn5pWw5o2u6KeG5Zu+JyxcbiAgICAgIGxhbmc6IFsn5pWw5o2u6KeG5Zu+JywgJ+WFs+mXrScsICfliLfmlrAnXVxuICAgIH0sXG4gICAgZGF0YVpvb206IHtcbiAgICAgIHRpdGxlOiB7XG4gICAgICAgIHpvb206ICfljLrln5/nvKnmlL4nLFxuICAgICAgICBiYWNrOiAn5Yy65Z+f57yp5pS+6L+Y5Y6fJ1xuICAgICAgfVxuICAgIH0sXG4gICAgbWFnaWNUeXBlOiB7XG4gICAgICB0aXRsZToge1xuICAgICAgICBsaW5lOiAn5YiH5o2i5Li65oqY57q/5Zu+JyxcbiAgICAgICAgYmFyOiAn5YiH5o2i5Li65p+x54q25Zu+JyxcbiAgICAgICAgc3RhY2s6ICfliIfmjaLkuLrloIblj6AnLFxuICAgICAgICB0aWxlZDogJ+WIh+aNouS4uuW5s+mTuidcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlc3RvcmU6IHtcbiAgICAgIHRpdGxlOiAn6L+Y5Y6fJ1xuICAgIH0sXG4gICAgc2F2ZUFzSW1hZ2U6IHtcbiAgICAgIHRpdGxlOiAn5L+d5a2Y5Li65Zu+54mHJyxcbiAgICAgIGxhbmc6IFsn5Y+z6ZSu5Y+m5a2Y5Li65Zu+54mHJ11cbiAgICB9XG4gIH0sXG4gIHNlcmllczoge1xuICAgIHR5cGVOYW1lczoge1xuICAgICAgcGllOiAn6aW85Zu+JyxcbiAgICAgIGJhcjogJ+afseeKtuWbvicsXG4gICAgICBsaW5lOiAn5oqY57q/5Zu+JyxcbiAgICAgIHNjYXR0ZXI6ICfmlaPngrnlm74nLFxuICAgICAgZWZmZWN0U2NhdHRlcjogJ+a2n+a8quaVo+eCueWbvicsXG4gICAgICByYWRhcjogJ+mbt+i+vuWbvicsXG4gICAgICB0cmVlOiAn5qCR5Zu+JyxcbiAgICAgIHRyZWVtYXA6ICfnn6nlvaLmoJHlm74nLFxuICAgICAgYm94cGxvdDogJ+euseWei+WbvicsXG4gICAgICBjYW5kbGVzdGljazogJ0vnur/lm74nLFxuICAgICAgazogJ0vnur/lm74nLFxuICAgICAgaGVhdG1hcDogJ+eDreWKm+WbvicsXG4gICAgICBtYXA6ICflnLDlm74nLFxuICAgICAgcGFyYWxsZWw6ICflubPooYzlnZDmoIflm74nLFxuICAgICAgbGluZXM6ICfnur/lm74nLFxuICAgICAgZ3JhcGg6ICflhbPns7vlm74nLFxuICAgICAgc2Fua2V5OiAn5qGR5Z+65Zu+JyxcbiAgICAgIGZ1bm5lbDogJ+a8j+aWl+WbvicsXG4gICAgICBnYXVnZTogJ+S7quihqOebmOWbvicsXG4gICAgICBwaWN0b3JpYWxCYXI6ICfosaHlvaLmn7Hlm74nLFxuICAgICAgdGhlbWVSaXZlcjogJ+S4u+mimOays+a1geWbvicsXG4gICAgICBzdW5idXJzdDogJ+aXreaXpeWbvidcbiAgICB9XG4gIH0sXG4gIGFyaWE6IHtcbiAgICBnZW5lcmFsOiB7XG4gICAgICB3aXRoVGl0bGU6ICfov5nmmK/kuIDkuKrlhbPkuo7igJx7dGl0bGV94oCd55qE5Zu+6KGo44CCJyxcbiAgICAgIHdpdGhvdXRUaXRsZTogJ+i/meaYr+S4gOS4quWbvuihqO+8jCdcbiAgICB9LFxuICAgIHNlcmllczoge1xuICAgICAgc2luZ2xlOiB7XG4gICAgICAgIHByZWZpeDogJycsXG4gICAgICAgIHdpdGhOYW1lOiAn5Zu+6KGo57G75Z6L5pive3Nlcmllc1R5cGV977yM6KGo56S6e3Nlcmllc05hbWV944CCJyxcbiAgICAgICAgd2l0aG91dE5hbWU6ICflm77ooajnsbvlnovmmK97c2VyaWVzVHlwZX3jgIInXG4gICAgICB9LFxuICAgICAgbXVsdGlwbGU6IHtcbiAgICAgICAgcHJlZml4OiAn5a6D55Sxe3Nlcmllc0NvdW50feS4quWbvuihqOezu+WIl+e7hOaIkOOAgicsXG4gICAgICAgIHdpdGhOYW1lOiAn56yse3Nlcmllc0lkfeS4quezu+WIl+aYr+S4gOS4quihqOekuntzZXJpZXNOYW1lfeeahHtzZXJpZXNUeXBlfe+8jCcsXG4gICAgICAgIHdpdGhvdXROYW1lOiAn56yse3Nlcmllc0lkfeS4quezu+WIl+aYr+S4gOS4qntzZXJpZXNUeXBlfe+8jCcsXG4gICAgICAgIHNlcGFyYXRvcjoge1xuICAgICAgICAgIG1pZGRsZTogJ++8mycsXG4gICAgICAgICAgZW5kOiAn44CCJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkYXRhOiB7XG4gICAgICBhbGxEYXRhOiAn5YW25pWw5o2u5piv4oCU4oCUJyxcbiAgICAgIHBhcnRpYWxEYXRhOiAn5YW25Lit77yM5YmNe2Rpc3BsYXlDbnR96aG55piv4oCU4oCUJyxcbiAgICAgIHdpdGhOYW1lOiAne25hbWV955qE5pWw5o2u5pive3ZhbHVlfScsXG4gICAgICB3aXRob3V0TmFtZTogJ3t2YWx1ZX0nLFxuICAgICAgc2VwYXJhdG9yOiB7XG4gICAgICAgIG1pZGRsZTogJ++8jCcsXG4gICAgICAgIGVuZDogJydcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciB6clV0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgX251bWJlciA9IHJlcXVpcmUoXCIuLi91dGlsL251bWJlclwiKTtcblxudmFyIHBhcnNlUGVyY2VudCA9IF9udW1iZXIucGFyc2VQZXJjZW50O1xuXG52YXIgX2RhdGFTdGFja0hlbHBlciA9IHJlcXVpcmUoXCIuLi9kYXRhL2hlbHBlci9kYXRhU3RhY2tIZWxwZXJcIik7XG5cbnZhciBpc0RpbWVuc2lvblN0YWNrZWQgPSBfZGF0YVN0YWNrSGVscGVyLmlzRGltZW5zaW9uU3RhY2tlZDtcblxudmFyIGNyZWF0ZVJlbmRlclBsYW5uZXIgPSByZXF1aXJlKFwiLi4vY2hhcnQvaGVscGVyL2NyZWF0ZVJlbmRlclBsYW5uZXJcIik7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbnZhciBTVEFDS19QUkVGSVggPSAnX19lY19zdGFja18nO1xudmFyIExBUkdFX0JBUl9NSU5fV0lEVEggPSAwLjU7XG52YXIgTGFyZ2VBcnIgPSB0eXBlb2YgRmxvYXQzMkFycmF5ICE9PSAndW5kZWZpbmVkJyA/IEZsb2F0MzJBcnJheSA6IEFycmF5O1xuXG5mdW5jdGlvbiBnZXRTZXJpZXNTdGFja0lkKHNlcmllc01vZGVsKSB7XG4gIHJldHVybiBzZXJpZXNNb2RlbC5nZXQoJ3N0YWNrJykgfHwgU1RBQ0tfUFJFRklYICsgc2VyaWVzTW9kZWwuc2VyaWVzSW5kZXg7XG59XG5cbmZ1bmN0aW9uIGdldEF4aXNLZXkoYXhpcykge1xuICByZXR1cm4gYXhpcy5kaW0gKyBheGlzLmluZGV4O1xufVxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0XG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL2Nvb3JkL0F4aXN9IG9wdC5heGlzIE9ubHkgc3VwcG9ydCBjYXRlZ29yeSBheGlzIGN1cnJlbnRseS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHQuY291bnQgUG9zaXRpdmUgaW50ZXJnZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdC5iYXJXaWR0aF1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0LmJhck1heFdpZHRoXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHQuYmFyR2FwXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHQuYmFyQ2F0ZWdvcnlHYXBdXG4gKiBAcmV0dXJuIHtPYmplY3R9IHt3aWR0aCwgb2Zmc2V0LCBvZmZzZXRDZW50ZXJ9IElmIGF4aXMudHlwZSBpcyBub3QgJ2NhdGVnb3J5JywgcmV0dXJuIHVuZGVmaW5lZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldExheW91dE9uQXhpcyhvcHQpIHtcbiAgdmFyIHBhcmFtcyA9IFtdO1xuICB2YXIgYmFzZUF4aXMgPSBvcHQuYXhpcztcbiAgdmFyIGF4aXNLZXkgPSAnYXhpczAnO1xuXG4gIGlmIChiYXNlQXhpcy50eXBlICE9PSAnY2F0ZWdvcnknKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGJhbmRXaWR0aCA9IGJhc2VBeGlzLmdldEJhbmRXaWR0aCgpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0LmNvdW50IHx8IDA7IGkrKykge1xuICAgIHBhcmFtcy5wdXNoKHpyVXRpbC5kZWZhdWx0cyh7XG4gICAgICBiYW5kV2lkdGg6IGJhbmRXaWR0aCxcbiAgICAgIGF4aXNLZXk6IGF4aXNLZXksXG4gICAgICBzdGFja0lkOiBTVEFDS19QUkVGSVggKyBpXG4gICAgfSwgb3B0KSk7XG4gIH1cblxuICB2YXIgd2lkdGhBbmRPZmZzZXRzID0gZG9DYWxCYXJXaWR0aEFuZE9mZnNldChwYXJhbXMpO1xuICB2YXIgcmVzdWx0ID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcHQuY291bnQ7IGkrKykge1xuICAgIHZhciBpdGVtID0gd2lkdGhBbmRPZmZzZXRzW2F4aXNLZXldW1NUQUNLX1BSRUZJWCArIGldO1xuICAgIGl0ZW0ub2Zmc2V0Q2VudGVyID0gaXRlbS5vZmZzZXQgKyBpdGVtLndpZHRoIC8gMjtcbiAgICByZXN1bHQucHVzaChpdGVtKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVMYXlvdXRCYXJTZXJpZXMoc2VyaWVzVHlwZSwgZWNNb2RlbCkge1xuICB2YXIgc2VyaWVzTW9kZWxzID0gW107XG4gIGVjTW9kZWwuZWFjaFNlcmllc0J5VHlwZShzZXJpZXNUeXBlLCBmdW5jdGlvbiAoc2VyaWVzTW9kZWwpIHtcbiAgICAvLyBDaGVjayBzZXJpZXMgY29vcmRpbmF0ZSwgZG8gbGF5b3V0IGZvciBjYXJ0ZXNpYW4yZCBvbmx5XG4gICAgaWYgKGlzT25DYXJ0ZXNpYW4oc2VyaWVzTW9kZWwpICYmICFpc0luTGFyZ2VNb2RlKHNlcmllc01vZGVsKSkge1xuICAgICAgc2VyaWVzTW9kZWxzLnB1c2goc2VyaWVzTW9kZWwpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzZXJpZXNNb2RlbHM7XG59XG5cbmZ1bmN0aW9uIG1ha2VDb2x1bW5MYXlvdXQoYmFyU2VyaWVzKSB7XG4gIHZhciBzZXJpZXNJbmZvTGlzdCA9IFtdO1xuICB6clV0aWwuZWFjaChiYXJTZXJpZXMsIGZ1bmN0aW9uIChzZXJpZXNNb2RlbCkge1xuICAgIHZhciBkYXRhID0gc2VyaWVzTW9kZWwuZ2V0RGF0YSgpO1xuICAgIHZhciBjYXJ0ZXNpYW4gPSBzZXJpZXNNb2RlbC5jb29yZGluYXRlU3lzdGVtO1xuICAgIHZhciBiYXNlQXhpcyA9IGNhcnRlc2lhbi5nZXRCYXNlQXhpcygpO1xuICAgIHZhciBheGlzRXh0ZW50ID0gYmFzZUF4aXMuZ2V0RXh0ZW50KCk7XG4gICAgdmFyIGJhbmRXaWR0aCA9IGJhc2VBeGlzLnR5cGUgPT09ICdjYXRlZ29yeScgPyBiYXNlQXhpcy5nZXRCYW5kV2lkdGgoKSA6IE1hdGguYWJzKGF4aXNFeHRlbnRbMV0gLSBheGlzRXh0ZW50WzBdKSAvIGRhdGEuY291bnQoKTtcbiAgICB2YXIgYmFyV2lkdGggPSBwYXJzZVBlcmNlbnQoc2VyaWVzTW9kZWwuZ2V0KCdiYXJXaWR0aCcpLCBiYW5kV2lkdGgpO1xuICAgIHZhciBiYXJNYXhXaWR0aCA9IHBhcnNlUGVyY2VudChzZXJpZXNNb2RlbC5nZXQoJ2Jhck1heFdpZHRoJyksIGJhbmRXaWR0aCk7XG4gICAgdmFyIGJhckdhcCA9IHNlcmllc01vZGVsLmdldCgnYmFyR2FwJyk7XG4gICAgdmFyIGJhckNhdGVnb3J5R2FwID0gc2VyaWVzTW9kZWwuZ2V0KCdiYXJDYXRlZ29yeUdhcCcpO1xuICAgIHNlcmllc0luZm9MaXN0LnB1c2goe1xuICAgICAgYmFuZFdpZHRoOiBiYW5kV2lkdGgsXG4gICAgICBiYXJXaWR0aDogYmFyV2lkdGgsXG4gICAgICBiYXJNYXhXaWR0aDogYmFyTWF4V2lkdGgsXG4gICAgICBiYXJHYXA6IGJhckdhcCxcbiAgICAgIGJhckNhdGVnb3J5R2FwOiBiYXJDYXRlZ29yeUdhcCxcbiAgICAgIGF4aXNLZXk6IGdldEF4aXNLZXkoYmFzZUF4aXMpLFxuICAgICAgc3RhY2tJZDogZ2V0U2VyaWVzU3RhY2tJZChzZXJpZXNNb2RlbClcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBkb0NhbEJhcldpZHRoQW5kT2Zmc2V0KHNlcmllc0luZm9MaXN0KTtcbn1cblxuZnVuY3Rpb24gZG9DYWxCYXJXaWR0aEFuZE9mZnNldChzZXJpZXNJbmZvTGlzdCkge1xuICAvLyBDb2x1bW5zIGluZm8gb24gZWFjaCBjYXRlZ29yeSBheGlzLiBLZXkgaXMgY2FydGVzaWFuIG5hbWVcbiAgdmFyIGNvbHVtbnNNYXAgPSB7fTtcbiAgenJVdGlsLmVhY2goc2VyaWVzSW5mb0xpc3QsIGZ1bmN0aW9uIChzZXJpZXNJbmZvLCBpZHgpIHtcbiAgICB2YXIgYXhpc0tleSA9IHNlcmllc0luZm8uYXhpc0tleTtcbiAgICB2YXIgYmFuZFdpZHRoID0gc2VyaWVzSW5mby5iYW5kV2lkdGg7XG4gICAgdmFyIGNvbHVtbnNPbkF4aXMgPSBjb2x1bW5zTWFwW2F4aXNLZXldIHx8IHtcbiAgICAgIGJhbmRXaWR0aDogYmFuZFdpZHRoLFxuICAgICAgcmVtYWluZWRXaWR0aDogYmFuZFdpZHRoLFxuICAgICAgYXV0b1dpZHRoQ291bnQ6IDAsXG4gICAgICBjYXRlZ29yeUdhcDogJzIwJScsXG4gICAgICBnYXA6ICczMCUnLFxuICAgICAgc3RhY2tzOiB7fVxuICAgIH07XG4gICAgdmFyIHN0YWNrcyA9IGNvbHVtbnNPbkF4aXMuc3RhY2tzO1xuICAgIGNvbHVtbnNNYXBbYXhpc0tleV0gPSBjb2x1bW5zT25BeGlzO1xuICAgIHZhciBzdGFja0lkID0gc2VyaWVzSW5mby5zdGFja0lkO1xuXG4gICAgaWYgKCFzdGFja3Nbc3RhY2tJZF0pIHtcbiAgICAgIGNvbHVtbnNPbkF4aXMuYXV0b1dpZHRoQ291bnQrKztcbiAgICB9XG5cbiAgICBzdGFja3Nbc3RhY2tJZF0gPSBzdGFja3Nbc3RhY2tJZF0gfHwge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBtYXhXaWR0aDogMFxuICAgIH07IC8vIENhdXRpb246IEluIGEgc2luZ2xlIGNvb3JkaW5hdGUgc3lzdGVtLCB0aGVzZSBiYXJHcmlkIGF0dHJpYnV0ZXNcbiAgICAvLyB3aWxsIGJlIHNoYXJlZCBieSBzZXJpZXMuIENvbnNpZGVyIHRoYXQgdGhleSBoYXZlIGRlZmF1bHQgdmFsdWVzLFxuICAgIC8vIG9ubHkgdGhlIGF0dHJpYnV0ZXMgc2V0IG9uIHRoZSBsYXN0IHNlcmllcyB3aWxsIHdvcmsuXG4gICAgLy8gRG8gbm90IGNoYW5nZSB0aGlzIGZhY3QgdW5sZXNzIHRoZXJlIHdpbGwgYmUgYSBicmVhayBjaGFuZ2UuXG4gICAgLy8gVE9ET1xuXG4gICAgdmFyIGJhcldpZHRoID0gc2VyaWVzSW5mby5iYXJXaWR0aDtcblxuICAgIGlmIChiYXJXaWR0aCAmJiAhc3RhY2tzW3N0YWNrSWRdLndpZHRoKSB7XG4gICAgICAvLyBTZWUgIzYzMTIsIGRvIG5vdCByZXN0cmljdCB3aWR0aC5cbiAgICAgIHN0YWNrc1tzdGFja0lkXS53aWR0aCA9IGJhcldpZHRoO1xuICAgICAgYmFyV2lkdGggPSBNYXRoLm1pbihjb2x1bW5zT25BeGlzLnJlbWFpbmVkV2lkdGgsIGJhcldpZHRoKTtcbiAgICAgIGNvbHVtbnNPbkF4aXMucmVtYWluZWRXaWR0aCAtPSBiYXJXaWR0aDtcbiAgICB9XG5cbiAgICB2YXIgYmFyTWF4V2lkdGggPSBzZXJpZXNJbmZvLmJhck1heFdpZHRoO1xuICAgIGJhck1heFdpZHRoICYmIChzdGFja3Nbc3RhY2tJZF0ubWF4V2lkdGggPSBiYXJNYXhXaWR0aCk7XG4gICAgdmFyIGJhckdhcCA9IHNlcmllc0luZm8uYmFyR2FwO1xuICAgIGJhckdhcCAhPSBudWxsICYmIChjb2x1bW5zT25BeGlzLmdhcCA9IGJhckdhcCk7XG4gICAgdmFyIGJhckNhdGVnb3J5R2FwID0gc2VyaWVzSW5mby5iYXJDYXRlZ29yeUdhcDtcbiAgICBiYXJDYXRlZ29yeUdhcCAhPSBudWxsICYmIChjb2x1bW5zT25BeGlzLmNhdGVnb3J5R2FwID0gYmFyQ2F0ZWdvcnlHYXApO1xuICB9KTtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICB6clV0aWwuZWFjaChjb2x1bW5zTWFwLCBmdW5jdGlvbiAoY29sdW1uc09uQXhpcywgY29vcmRTeXNOYW1lKSB7XG4gICAgcmVzdWx0W2Nvb3JkU3lzTmFtZV0gPSB7fTtcbiAgICB2YXIgc3RhY2tzID0gY29sdW1uc09uQXhpcy5zdGFja3M7XG4gICAgdmFyIGJhbmRXaWR0aCA9IGNvbHVtbnNPbkF4aXMuYmFuZFdpZHRoO1xuICAgIHZhciBjYXRlZ29yeUdhcCA9IHBhcnNlUGVyY2VudChjb2x1bW5zT25BeGlzLmNhdGVnb3J5R2FwLCBiYW5kV2lkdGgpO1xuICAgIHZhciBiYXJHYXBQZXJjZW50ID0gcGFyc2VQZXJjZW50KGNvbHVtbnNPbkF4aXMuZ2FwLCAxKTtcbiAgICB2YXIgcmVtYWluZWRXaWR0aCA9IGNvbHVtbnNPbkF4aXMucmVtYWluZWRXaWR0aDtcbiAgICB2YXIgYXV0b1dpZHRoQ291bnQgPSBjb2x1bW5zT25BeGlzLmF1dG9XaWR0aENvdW50O1xuICAgIHZhciBhdXRvV2lkdGggPSAocmVtYWluZWRXaWR0aCAtIGNhdGVnb3J5R2FwKSAvIChhdXRvV2lkdGhDb3VudCArIChhdXRvV2lkdGhDb3VudCAtIDEpICogYmFyR2FwUGVyY2VudCk7XG4gICAgYXV0b1dpZHRoID0gTWF0aC5tYXgoYXV0b1dpZHRoLCAwKTsgLy8gRmluZCBpZiBhbnkgYXV0byBjYWxjdWxhdGVkIGJhciBleGNlZWRlZCBtYXhCYXJXaWR0aFxuXG4gICAgenJVdGlsLmVhY2goc3RhY2tzLCBmdW5jdGlvbiAoY29sdW1uLCBzdGFjaykge1xuICAgICAgdmFyIG1heFdpZHRoID0gY29sdW1uLm1heFdpZHRoO1xuXG4gICAgICBpZiAobWF4V2lkdGggJiYgbWF4V2lkdGggPCBhdXRvV2lkdGgpIHtcbiAgICAgICAgbWF4V2lkdGggPSBNYXRoLm1pbihtYXhXaWR0aCwgcmVtYWluZWRXaWR0aCk7XG5cbiAgICAgICAgaWYgKGNvbHVtbi53aWR0aCkge1xuICAgICAgICAgIG1heFdpZHRoID0gTWF0aC5taW4obWF4V2lkdGgsIGNvbHVtbi53aWR0aCk7XG4gICAgICAgIH1cblxuICAgICAgICByZW1haW5lZFdpZHRoIC09IG1heFdpZHRoO1xuICAgICAgICBjb2x1bW4ud2lkdGggPSBtYXhXaWR0aDtcbiAgICAgICAgYXV0b1dpZHRoQ291bnQtLTtcbiAgICAgIH1cbiAgICB9KTsgLy8gUmVjYWxjdWxhdGUgd2lkdGggYWdhaW5cblxuICAgIGF1dG9XaWR0aCA9IChyZW1haW5lZFdpZHRoIC0gY2F0ZWdvcnlHYXApIC8gKGF1dG9XaWR0aENvdW50ICsgKGF1dG9XaWR0aENvdW50IC0gMSkgKiBiYXJHYXBQZXJjZW50KTtcbiAgICBhdXRvV2lkdGggPSBNYXRoLm1heChhdXRvV2lkdGgsIDApO1xuICAgIHZhciB3aWR0aFN1bSA9IDA7XG4gICAgdmFyIGxhc3RDb2x1bW47XG4gICAgenJVdGlsLmVhY2goc3RhY2tzLCBmdW5jdGlvbiAoY29sdW1uLCBpZHgpIHtcbiAgICAgIGlmICghY29sdW1uLndpZHRoKSB7XG4gICAgICAgIGNvbHVtbi53aWR0aCA9IGF1dG9XaWR0aDtcbiAgICAgIH1cblxuICAgICAgbGFzdENvbHVtbiA9IGNvbHVtbjtcbiAgICAgIHdpZHRoU3VtICs9IGNvbHVtbi53aWR0aCAqICgxICsgYmFyR2FwUGVyY2VudCk7XG4gICAgfSk7XG5cbiAgICBpZiAobGFzdENvbHVtbikge1xuICAgICAgd2lkdGhTdW0gLT0gbGFzdENvbHVtbi53aWR0aCAqIGJhckdhcFBlcmNlbnQ7XG4gICAgfVxuXG4gICAgdmFyIG9mZnNldCA9IC13aWR0aFN1bSAvIDI7XG4gICAgenJVdGlsLmVhY2goc3RhY2tzLCBmdW5jdGlvbiAoY29sdW1uLCBzdGFja0lkKSB7XG4gICAgICByZXN1bHRbY29vcmRTeXNOYW1lXVtzdGFja0lkXSA9IHJlc3VsdFtjb29yZFN5c05hbWVdW3N0YWNrSWRdIHx8IHtcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgIHdpZHRoOiBjb2x1bW4ud2lkdGhcbiAgICAgIH07XG4gICAgICBvZmZzZXQgKz0gY29sdW1uLndpZHRoICogKDEgKyBiYXJHYXBQZXJjZW50KTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBiYXJXaWR0aEFuZE9mZnNldCBUaGUgcmVzdWx0IG9mIG1ha2VDb2x1bW5MYXlvdXRcbiAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvY29vcmQvQXhpc30gYXhpc1xuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9TZXJpZXN9IFtzZXJpZXNNb2RlbF0gSWYgbm90IHByb3ZpZGVkLCByZXR1cm4gYWxsLlxuICogQHJldHVybiB7T2JqZWN0fSB7c3RhY2tJZDoge29mZnNldCwgd2lkdGh9fSBvciB7b2Zmc2V0LCB3aWR0aH0gaWYgc2VyaWVzTW9kZWwgcHJvdmlkZWQuXG4gKi9cblxuXG5mdW5jdGlvbiByZXRyaWV2ZUNvbHVtbkxheW91dChiYXJXaWR0aEFuZE9mZnNldCwgYXhpcywgc2VyaWVzTW9kZWwpIHtcbiAgaWYgKGJhcldpZHRoQW5kT2Zmc2V0ICYmIGF4aXMpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFyV2lkdGhBbmRPZmZzZXRbZ2V0QXhpc0tleShheGlzKV07XG5cbiAgICBpZiAocmVzdWx0ICE9IG51bGwgJiYgc2VyaWVzTW9kZWwgIT0gbnVsbCkge1xuICAgICAgcmVzdWx0ID0gcmVzdWx0W2dldFNlcmllc1N0YWNrSWQoc2VyaWVzTW9kZWwpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZXJpZXNUeXBlXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL21vZGVsL0dsb2JhbH0gZWNNb2RlbFxuICovXG5cblxuZnVuY3Rpb24gbGF5b3V0KHNlcmllc1R5cGUsIGVjTW9kZWwpIHtcbiAgdmFyIHNlcmllc01vZGVscyA9IHByZXBhcmVMYXlvdXRCYXJTZXJpZXMoc2VyaWVzVHlwZSwgZWNNb2RlbCk7XG4gIHZhciBiYXJXaWR0aEFuZE9mZnNldCA9IG1ha2VDb2x1bW5MYXlvdXQoc2VyaWVzTW9kZWxzKTtcbiAgdmFyIGxhc3RTdGFja0Nvb3JkcyA9IHt9O1xuICB2YXIgbGFzdFN0YWNrQ29vcmRzT3JpZ2luID0ge307XG4gIHpyVXRpbC5lYWNoKHNlcmllc01vZGVscywgZnVuY3Rpb24gKHNlcmllc01vZGVsKSB7XG4gICAgdmFyIGRhdGEgPSBzZXJpZXNNb2RlbC5nZXREYXRhKCk7XG4gICAgdmFyIGNhcnRlc2lhbiA9IHNlcmllc01vZGVsLmNvb3JkaW5hdGVTeXN0ZW07XG4gICAgdmFyIGJhc2VBeGlzID0gY2FydGVzaWFuLmdldEJhc2VBeGlzKCk7XG4gICAgdmFyIHN0YWNrSWQgPSBnZXRTZXJpZXNTdGFja0lkKHNlcmllc01vZGVsKTtcbiAgICB2YXIgY29sdW1uTGF5b3V0SW5mbyA9IGJhcldpZHRoQW5kT2Zmc2V0W2dldEF4aXNLZXkoYmFzZUF4aXMpXVtzdGFja0lkXTtcbiAgICB2YXIgY29sdW1uT2Zmc2V0ID0gY29sdW1uTGF5b3V0SW5mby5vZmZzZXQ7XG4gICAgdmFyIGNvbHVtbldpZHRoID0gY29sdW1uTGF5b3V0SW5mby53aWR0aDtcbiAgICB2YXIgdmFsdWVBeGlzID0gY2FydGVzaWFuLmdldE90aGVyQXhpcyhiYXNlQXhpcyk7XG4gICAgdmFyIGJhck1pbkhlaWdodCA9IHNlcmllc01vZGVsLmdldCgnYmFyTWluSGVpZ2h0JykgfHwgMDtcbiAgICBsYXN0U3RhY2tDb29yZHNbc3RhY2tJZF0gPSBsYXN0U3RhY2tDb29yZHNbc3RhY2tJZF0gfHwgW107XG4gICAgbGFzdFN0YWNrQ29vcmRzT3JpZ2luW3N0YWNrSWRdID0gbGFzdFN0YWNrQ29vcmRzT3JpZ2luW3N0YWNrSWRdIHx8IFtdOyAvLyBGaXggIzQyNDNcblxuICAgIGRhdGEuc2V0TGF5b3V0KHtcbiAgICAgIG9mZnNldDogY29sdW1uT2Zmc2V0LFxuICAgICAgc2l6ZTogY29sdW1uV2lkdGhcbiAgICB9KTtcbiAgICB2YXIgdmFsdWVEaW0gPSBkYXRhLm1hcERpbWVuc2lvbih2YWx1ZUF4aXMuZGltKTtcbiAgICB2YXIgYmFzZURpbSA9IGRhdGEubWFwRGltZW5zaW9uKGJhc2VBeGlzLmRpbSk7XG4gICAgdmFyIHN0YWNrZWQgPSBpc0RpbWVuc2lvblN0YWNrZWQoZGF0YSwgdmFsdWVEaW1cbiAgICAvKiwgYmFzZURpbSovXG4gICAgKTtcbiAgICB2YXIgaXNWYWx1ZUF4aXNIID0gdmFsdWVBeGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgIHZhciB2YWx1ZUF4aXNTdGFydCA9IGdldFZhbHVlQXhpc1N0YXJ0KGJhc2VBeGlzLCB2YWx1ZUF4aXMsIHN0YWNrZWQpO1xuXG4gICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuID0gZGF0YS5jb3VudCgpOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBkYXRhLmdldCh2YWx1ZURpbSwgaWR4KTtcbiAgICAgIHZhciBiYXNlVmFsdWUgPSBkYXRhLmdldChiYXNlRGltLCBpZHgpO1xuXG4gICAgICBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2lnbiA9IHZhbHVlID49IDAgPyAncCcgOiAnbic7XG4gICAgICB2YXIgYmFzZUNvb3JkID0gdmFsdWVBeGlzU3RhcnQ7IC8vIEJlY2F1c2Ugb2YgdGhlIGJhck1pbkhlaWdodCwgd2UgY2FuIG5vdCB1c2UgdGhlIHZhbHVlIGluXG4gICAgICAvLyBzdGFja1Jlc3VsdERpbWVuc2lvbiBkaXJlY3RseS5cblxuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgLy8gT25seSBvcmRpbmFsIGF4aXMgY2FuIGJlIHN0YWNrZWQuXG4gICAgICAgIGlmICghbGFzdFN0YWNrQ29vcmRzW3N0YWNrSWRdW2Jhc2VWYWx1ZV0pIHtcbiAgICAgICAgICBsYXN0U3RhY2tDb29yZHNbc3RhY2tJZF1bYmFzZVZhbHVlXSA9IHtcbiAgICAgICAgICAgIHA6IHZhbHVlQXhpc1N0YXJ0LFxuICAgICAgICAgICAgLy8gUG9zaXRpdmUgc3RhY2tcbiAgICAgICAgICAgIG46IHZhbHVlQXhpc1N0YXJ0IC8vIE5lZ2F0aXZlIHN0YWNrXG5cbiAgICAgICAgICB9O1xuICAgICAgICB9IC8vIFNob3VsZCBhbHNvIGNvbnNpZGVyICM0MjQzXG5cblxuICAgICAgICBiYXNlQ29vcmQgPSBsYXN0U3RhY2tDb29yZHNbc3RhY2tJZF1bYmFzZVZhbHVlXVtzaWduXTtcbiAgICAgIH1cblxuICAgICAgdmFyIHg7XG4gICAgICB2YXIgeTtcbiAgICAgIHZhciB3aWR0aDtcbiAgICAgIHZhciBoZWlnaHQ7XG5cbiAgICAgIGlmIChpc1ZhbHVlQXhpc0gpIHtcbiAgICAgICAgdmFyIGNvb3JkID0gY2FydGVzaWFuLmRhdGFUb1BvaW50KFt2YWx1ZSwgYmFzZVZhbHVlXSk7XG4gICAgICAgIHggPSBiYXNlQ29vcmQ7XG4gICAgICAgIHkgPSBjb29yZFsxXSArIGNvbHVtbk9mZnNldDtcbiAgICAgICAgd2lkdGggPSBjb29yZFswXSAtIHZhbHVlQXhpc1N0YXJ0O1xuICAgICAgICBoZWlnaHQgPSBjb2x1bW5XaWR0aDtcblxuICAgICAgICBpZiAoTWF0aC5hYnMod2lkdGgpIDwgYmFyTWluSGVpZ2h0KSB7XG4gICAgICAgICAgd2lkdGggPSAod2lkdGggPCAwID8gLTEgOiAxKSAqIGJhck1pbkhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YWNrZWQgJiYgKGxhc3RTdGFja0Nvb3Jkc1tzdGFja0lkXVtiYXNlVmFsdWVdW3NpZ25dICs9IHdpZHRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjb29yZCA9IGNhcnRlc2lhbi5kYXRhVG9Qb2ludChbYmFzZVZhbHVlLCB2YWx1ZV0pO1xuICAgICAgICB4ID0gY29vcmRbMF0gKyBjb2x1bW5PZmZzZXQ7XG4gICAgICAgIHkgPSBiYXNlQ29vcmQ7XG4gICAgICAgIHdpZHRoID0gY29sdW1uV2lkdGg7XG4gICAgICAgIGhlaWdodCA9IGNvb3JkWzFdIC0gdmFsdWVBeGlzU3RhcnQ7XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKGhlaWdodCkgPCBiYXJNaW5IZWlnaHQpIHtcbiAgICAgICAgICAvLyBJbmNsdWRlIHplcm8gdG8gaGFzIGEgcG9zaXRpdmUgYmFyXG4gICAgICAgICAgaGVpZ2h0ID0gKGhlaWdodCA8PSAwID8gLTEgOiAxKSAqIGJhck1pbkhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YWNrZWQgJiYgKGxhc3RTdGFja0Nvb3Jkc1tzdGFja0lkXVtiYXNlVmFsdWVdW3NpZ25dICs9IGhlaWdodCk7XG4gICAgICB9XG5cbiAgICAgIGRhdGEuc2V0SXRlbUxheW91dChpZHgsIHtcbiAgICAgICAgeDogeCxcbiAgICAgICAgeTogeSxcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgfSk7XG4gICAgfVxuICB9LCB0aGlzKTtcbn0gLy8gVE9ETzogRG8gbm90IHN1cHBvcnQgc3RhY2sgaW4gbGFyZ2UgbW9kZSB5ZXQuXG5cblxudmFyIGxhcmdlTGF5b3V0ID0ge1xuICBzZXJpZXNUeXBlOiAnYmFyJyxcbiAgcGxhbjogY3JlYXRlUmVuZGVyUGxhbm5lcigpLFxuICByZXNldDogZnVuY3Rpb24gKHNlcmllc01vZGVsKSB7XG4gICAgaWYgKCFpc09uQ2FydGVzaWFuKHNlcmllc01vZGVsKSB8fCAhaXNJbkxhcmdlTW9kZShzZXJpZXNNb2RlbCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHNlcmllc01vZGVsLmdldERhdGEoKTtcbiAgICB2YXIgY2FydGVzaWFuID0gc2VyaWVzTW9kZWwuY29vcmRpbmF0ZVN5c3RlbTtcbiAgICB2YXIgYmFzZUF4aXMgPSBjYXJ0ZXNpYW4uZ2V0QmFzZUF4aXMoKTtcbiAgICB2YXIgdmFsdWVBeGlzID0gY2FydGVzaWFuLmdldE90aGVyQXhpcyhiYXNlQXhpcyk7XG4gICAgdmFyIHZhbHVlRGltID0gZGF0YS5tYXBEaW1lbnNpb24odmFsdWVBeGlzLmRpbSk7XG4gICAgdmFyIGJhc2VEaW0gPSBkYXRhLm1hcERpbWVuc2lvbihiYXNlQXhpcy5kaW0pO1xuICAgIHZhciB2YWx1ZUF4aXNIb3Jpem9udGFsID0gdmFsdWVBeGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgIHZhciB2YWx1ZURpbUlkeCA9IHZhbHVlQXhpc0hvcml6b250YWwgPyAwIDogMTtcbiAgICB2YXIgYmFyV2lkdGggPSByZXRyaWV2ZUNvbHVtbkxheW91dChtYWtlQ29sdW1uTGF5b3V0KFtzZXJpZXNNb2RlbF0pLCBiYXNlQXhpcywgc2VyaWVzTW9kZWwpLndpZHRoO1xuXG4gICAgaWYgKCEoYmFyV2lkdGggPiBMQVJHRV9CQVJfTUlOX1dJRFRIKSkge1xuICAgICAgLy8ganNoaW50IGlnbm9yZTpsaW5lXG4gICAgICBiYXJXaWR0aCA9IExBUkdFX0JBUl9NSU5fV0lEVEg7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHByb2dyZXNzOiBwcm9ncmVzc1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwcm9ncmVzcyhwYXJhbXMsIGRhdGEpIHtcbiAgICAgIHZhciBsYXJnZVBvaW50cyA9IG5ldyBMYXJnZUFycihwYXJhbXMuY291bnQgKiAyKTtcbiAgICAgIHZhciBkYXRhSW5kZXg7XG4gICAgICB2YXIgY29vcmQgPSBbXTtcbiAgICAgIHZhciB2YWx1ZVBhaXIgPSBbXTtcbiAgICAgIHZhciBvZmZzZXQgPSAwO1xuXG4gICAgICB3aGlsZSAoKGRhdGFJbmRleCA9IHBhcmFtcy5uZXh0KCkpICE9IG51bGwpIHtcbiAgICAgICAgdmFsdWVQYWlyW3ZhbHVlRGltSWR4XSA9IGRhdGEuZ2V0KHZhbHVlRGltLCBkYXRhSW5kZXgpO1xuICAgICAgICB2YWx1ZVBhaXJbMSAtIHZhbHVlRGltSWR4XSA9IGRhdGEuZ2V0KGJhc2VEaW0sIGRhdGFJbmRleCk7XG4gICAgICAgIGNvb3JkID0gY2FydGVzaWFuLmRhdGFUb1BvaW50KHZhbHVlUGFpciwgbnVsbCwgY29vcmQpO1xuICAgICAgICBsYXJnZVBvaW50c1tvZmZzZXQrK10gPSBjb29yZFswXTtcbiAgICAgICAgbGFyZ2VQb2ludHNbb2Zmc2V0KytdID0gY29vcmRbMV07XG4gICAgICB9XG5cbiAgICAgIGRhdGEuc2V0TGF5b3V0KHtcbiAgICAgICAgbGFyZ2VQb2ludHM6IGxhcmdlUG9pbnRzLFxuICAgICAgICBiYXJXaWR0aDogYmFyV2lkdGgsXG4gICAgICAgIHZhbHVlQXhpc1N0YXJ0OiBnZXRWYWx1ZUF4aXNTdGFydChiYXNlQXhpcywgdmFsdWVBeGlzLCBmYWxzZSksXG4gICAgICAgIHZhbHVlQXhpc0hvcml6b250YWw6IHZhbHVlQXhpc0hvcml6b250YWxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gaXNPbkNhcnRlc2lhbihzZXJpZXNNb2RlbCkge1xuICByZXR1cm4gc2VyaWVzTW9kZWwuY29vcmRpbmF0ZVN5c3RlbSAmJiBzZXJpZXNNb2RlbC5jb29yZGluYXRlU3lzdGVtLnR5cGUgPT09ICdjYXJ0ZXNpYW4yZCc7XG59XG5cbmZ1bmN0aW9uIGlzSW5MYXJnZU1vZGUoc2VyaWVzTW9kZWwpIHtcbiAgcmV0dXJuIHNlcmllc01vZGVsLnBpcGVsaW5lQ29udGV4dCAmJiBzZXJpZXNNb2RlbC5waXBlbGluZUNvbnRleHQubGFyZ2U7XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlQXhpc1N0YXJ0KGJhc2VBeGlzLCB2YWx1ZUF4aXMsIHN0YWNrZWQpIHtcbiAgcmV0dXJuIHpyVXRpbC5pbmRleE9mKGJhc2VBeGlzLmdldEF4ZXNPblplcm9PZigpLCB2YWx1ZUF4aXMpID49IDAgfHwgc3RhY2tlZCA/IHZhbHVlQXhpcy50b0dsb2JhbENvb3JkKHZhbHVlQXhpcy5kYXRhVG9Db29yZCgwKSkgOiB2YWx1ZUF4aXMuZ2V0R2xvYmFsRXh0ZW50KClbMF07XG59XG5cbmV4cG9ydHMuZ2V0TGF5b3V0T25BeGlzID0gZ2V0TGF5b3V0T25BeGlzO1xuZXhwb3J0cy5wcmVwYXJlTGF5b3V0QmFyU2VyaWVzID0gcHJlcGFyZUxheW91dEJhclNlcmllcztcbmV4cG9ydHMubWFrZUNvbHVtbkxheW91dCA9IG1ha2VDb2x1bW5MYXlvdXQ7XG5leHBvcnRzLnJldHJpZXZlQ29sdW1uTGF5b3V0ID0gcmV0cmlldmVDb2x1bW5MYXlvdXQ7XG5leHBvcnRzLmxheW91dCA9IGxheW91dDtcbmV4cG9ydHMubGFyZ2VMYXlvdXQgPSBsYXJnZUxheW91dDsiLCJ2YXIgenJVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxudmFyIGdyYXBoaWMgPSByZXF1aXJlKFwiLi4vdXRpbC9ncmFwaGljXCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgUEkgPSBNYXRoLlBJO1xuLyoqXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL0V4dGVuc2lvbkFQSX0gYXBpXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHNdXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMudGV4dF1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5jb2xvcl1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy50ZXh0Q29sb3JdXG4gKiBAcmV0dXJuIHttb2R1bGU6enJlbmRlci9FbGVtZW50fVxuICovXG5cbmZ1bmN0aW9uIF9kZWZhdWx0KGFwaSwgb3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgenJVdGlsLmRlZmF1bHRzKG9wdHMsIHtcbiAgICB0ZXh0OiAnbG9hZGluZycsXG4gICAgY29sb3I6ICcjYzIzNTMxJyxcbiAgICB0ZXh0Q29sb3I6ICcjMDAwJyxcbiAgICBtYXNrQ29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCknLFxuICAgIHpsZXZlbDogMFxuICB9KTtcbiAgdmFyIG1hc2sgPSBuZXcgZ3JhcGhpYy5SZWN0KHtcbiAgICBzdHlsZToge1xuICAgICAgZmlsbDogb3B0cy5tYXNrQ29sb3JcbiAgICB9LFxuICAgIHpsZXZlbDogb3B0cy56bGV2ZWwsXG4gICAgejogMTAwMDBcbiAgfSk7XG4gIHZhciBhcmMgPSBuZXcgZ3JhcGhpYy5BcmMoe1xuICAgIHNoYXBlOiB7XG4gICAgICBzdGFydEFuZ2xlOiAtUEkgLyAyLFxuICAgICAgZW5kQW5nbGU6IC1QSSAvIDIgKyAwLjEsXG4gICAgICByOiAxMFxuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIHN0cm9rZTogb3B0cy5jb2xvcixcbiAgICAgIGxpbmVDYXA6ICdyb3VuZCcsXG4gICAgICBsaW5lV2lkdGg6IDVcbiAgICB9LFxuICAgIHpsZXZlbDogb3B0cy56bGV2ZWwsXG4gICAgejogMTAwMDFcbiAgfSk7XG4gIHZhciBsYWJlbFJlY3QgPSBuZXcgZ3JhcGhpYy5SZWN0KHtcbiAgICBzdHlsZToge1xuICAgICAgZmlsbDogJ25vbmUnLFxuICAgICAgdGV4dDogb3B0cy50ZXh0LFxuICAgICAgdGV4dFBvc2l0aW9uOiAncmlnaHQnLFxuICAgICAgdGV4dERpc3RhbmNlOiAxMCxcbiAgICAgIHRleHRGaWxsOiBvcHRzLnRleHRDb2xvclxuICAgIH0sXG4gICAgemxldmVsOiBvcHRzLnpsZXZlbCxcbiAgICB6OiAxMDAwMVxuICB9KTtcbiAgYXJjLmFuaW1hdGVTaGFwZSh0cnVlKS53aGVuKDEwMDAsIHtcbiAgICBlbmRBbmdsZTogUEkgKiAzIC8gMlxuICB9KS5zdGFydCgnY2lyY3VsYXJJbk91dCcpO1xuICBhcmMuYW5pbWF0ZVNoYXBlKHRydWUpLndoZW4oMTAwMCwge1xuICAgIHN0YXJ0QW5nbGU6IFBJICogMyAvIDJcbiAgfSkuZGVsYXkoMzAwKS5zdGFydCgnY2lyY3VsYXJJbk91dCcpO1xuICB2YXIgZ3JvdXAgPSBuZXcgZ3JhcGhpYy5Hcm91cCgpO1xuICBncm91cC5hZGQoYXJjKTtcbiAgZ3JvdXAuYWRkKGxhYmVsUmVjdCk7XG4gIGdyb3VwLmFkZChtYXNrKTsgLy8gSW5qZWN0IHJlc2l6ZVxuXG4gIGdyb3VwLnJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY3ggPSBhcGkuZ2V0V2lkdGgoKSAvIDI7XG4gICAgdmFyIGN5ID0gYXBpLmdldEhlaWdodCgpIC8gMjtcbiAgICBhcmMuc2V0U2hhcGUoe1xuICAgICAgY3g6IGN4LFxuICAgICAgY3k6IGN5XG4gICAgfSk7XG4gICAgdmFyIHIgPSBhcmMuc2hhcGUucjtcbiAgICBsYWJlbFJlY3Quc2V0U2hhcGUoe1xuICAgICAgeDogY3ggLSByLFxuICAgICAgeTogY3kgLSByLFxuICAgICAgd2lkdGg6IHIgKiAyLFxuICAgICAgaGVpZ2h0OiByICogMlxuICAgIH0pO1xuICAgIG1hc2suc2V0U2hhcGUoe1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgICB3aWR0aDogYXBpLmdldFdpZHRoKCksXG4gICAgICBoZWlnaHQ6IGFwaS5nZXRIZWlnaHQoKVxuICAgIH0pO1xuICB9O1xuXG4gIGdyb3VwLnJlc2l6ZSgpO1xuICByZXR1cm4gZ3JvdXA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIHpyVXRpbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3V0aWxcIik7XG5cbnZhciBNb2RlbCA9IHJlcXVpcmUoXCIuL01vZGVsXCIpO1xuXG52YXIgY29tcG9uZW50VXRpbCA9IHJlcXVpcmUoXCIuLi91dGlsL2NvbXBvbmVudFwiKTtcblxudmFyIF9jbGF6eiA9IHJlcXVpcmUoXCIuLi91dGlsL2NsYXp6XCIpO1xuXG52YXIgZW5hYmxlQ2xhc3NNYW5hZ2VtZW50ID0gX2NsYXp6LmVuYWJsZUNsYXNzTWFuYWdlbWVudDtcbnZhciBwYXJzZUNsYXNzVHlwZSA9IF9jbGF6ei5wYXJzZUNsYXNzVHlwZTtcblxudmFyIF9tb2RlbCA9IHJlcXVpcmUoXCIuLi91dGlsL21vZGVsXCIpO1xuXG52YXIgbWFrZUlubmVyID0gX21vZGVsLm1ha2VJbm5lcjtcblxudmFyIGxheW91dCA9IHJlcXVpcmUoXCIuLi91dGlsL2xheW91dFwiKTtcblxudmFyIGJveExheW91dE1peGluID0gcmVxdWlyZShcIi4vbWl4aW4vYm94TGF5b3V0XCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbi8qKlxuICogQ29tcG9uZW50IG1vZGVsXG4gKlxuICogQG1vZHVsZSBlY2hhcnRzL21vZGVsL0NvbXBvbmVudFxuICovXG52YXIgaW5uZXIgPSBtYWtlSW5uZXIoKTtcbi8qKlxuICogQGFsaWFzIG1vZHVsZTplY2hhcnRzL21vZGVsL0NvbXBvbmVudFxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL21vZGVsL01vZGVsfSBwYXJlbnRNb2RlbFxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Nb2RlbH0gZWNNb2RlbFxuICovXG5cbnZhciBDb21wb25lbnRNb2RlbCA9IE1vZGVsLmV4dGVuZCh7XG4gIHR5cGU6ICdjb21wb25lbnQnLFxuXG4gIC8qKlxuICAgKiBAcmVhZE9ubHlcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGlkOiAnJyxcblxuICAvKipcbiAgICogQmVjYXVzZSBzaW1wbGlmaWVkIGNvbmNlcHQgaXMgcHJvYmFibHkgYmV0dGVyLCBzZXJpZXMubmFtZSAob3IgY29tcG9uZW50Lm5hbWUpXG4gICAqIGhhcyBiZWVuIGhhdmluZyB0b28gbWFueSByZXNwb3NpYmlsaXRpZXM6XG4gICAqICgxKSBHZW5lcmF0aW5nIGlkICh3aGljaCByZXF1aXJlcyBuYW1lIGluIG9wdGlvbiBzaG91bGQgbm90IGJlIG1vZGlmaWVkKS5cbiAgICogKDIpIEFzIGFuIGluZGV4IHRvIG1hcHBpbmcgc2VyaWVzIHdoZW4gbWVyZ2luZyBvcHRpb24gb3IgY2FsbGluZyBBUEkgKGEgbmFtZVxuICAgKiBjYW4gcmVmZXIgdG8gbW9yZSB0aGVuIG9uZSBjb21wb25lbnRzLCB3aGljaCBpcyBjb252aW5pZW50IGlzIHNvbWUgY2FzZSkuXG4gICAqICgzKSBEaXNwbGF5LlxuICAgKiBAcmVhZE9ubHlcbiAgICovXG4gIG5hbWU6ICcnLFxuXG4gIC8qKlxuICAgKiBAcmVhZE9ubHlcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIG1haW5UeXBlOiAnJyxcblxuICAvKipcbiAgICogQHJlYWRPbmx5XG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBzdWJUeXBlOiAnJyxcblxuICAvKipcbiAgICogQHJlYWRPbmx5XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBjb21wb25lbnRJbmRleDogMCxcblxuICAvKipcbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgZGVmYXVsdE9wdGlvbjogbnVsbCxcblxuICAvKipcbiAgICogQHR5cGUge21vZHVsZTplY2hhcnRzL21vZGVsL0dsb2JhbH1cbiAgICogQHJlYWRPbmx5XG4gICAqL1xuICBlY01vZGVsOiBudWxsLFxuXG4gIC8qKlxuICAgKiBrZXk6IGNvbXBvbmVudFR5cGVcbiAgICogdmFsdWU6ICBDb21wb25lbnQgbW9kZWwgbGlzdCwgY2FuIG5vdCBiZSBudWxsLlxuICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsIEFycmF5Ljxtb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Nb2RlbD4+fVxuICAgKiBAcmVhZE9ubHlcbiAgICovXG4gIGRlcGVuZGVudE1vZGVsczogW10sXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEByZWFkT25seVxuICAgKi9cbiAgdWlkOiBudWxsLFxuXG4gIC8qKlxuICAgKiBTdXBwb3J0IG1lcmdlIGxheW91dCBwYXJhbXMuXG4gICAqIE9ubHkgc3VwcG9ydCAnYm94JyBub3cgKGxlZnQvcmlnaHQvdG9wL2JvdHRvbS93aWR0aC9oZWlnaHQpLlxuICAgKiBAdHlwZSB7c3RyaW5nfE9iamVjdH0gT2JqZWN0IGNhbiBiZSB7aWdub3JlU2l6ZTogdHJ1ZX1cbiAgICogQHJlYWRPbmx5XG4gICAqL1xuICBsYXlvdXRNb2RlOiBudWxsLFxuICAkY29uc3RydWN0b3I6IGZ1bmN0aW9uIChvcHRpb24sIHBhcmVudE1vZGVsLCBlY01vZGVsLCBleHRyYU9wdCkge1xuICAgIE1vZGVsLmNhbGwodGhpcywgb3B0aW9uLCBwYXJlbnRNb2RlbCwgZWNNb2RlbCwgZXh0cmFPcHQpO1xuICAgIHRoaXMudWlkID0gY29tcG9uZW50VXRpbC5nZXRVSUQoJ2VjX2NwdF9tb2RlbCcpO1xuICB9LFxuICBpbml0OiBmdW5jdGlvbiAob3B0aW9uLCBwYXJlbnRNb2RlbCwgZWNNb2RlbCwgZXh0cmFPcHQpIHtcbiAgICB0aGlzLm1lcmdlRGVmYXVsdEFuZFRoZW1lKG9wdGlvbiwgZWNNb2RlbCk7XG4gIH0sXG4gIG1lcmdlRGVmYXVsdEFuZFRoZW1lOiBmdW5jdGlvbiAob3B0aW9uLCBlY01vZGVsKSB7XG4gICAgdmFyIGxheW91dE1vZGUgPSB0aGlzLmxheW91dE1vZGU7XG4gICAgdmFyIGlucHV0UG9zaXRpb25QYXJhbXMgPSBsYXlvdXRNb2RlID8gbGF5b3V0LmdldExheW91dFBhcmFtcyhvcHRpb24pIDoge307XG4gICAgdmFyIHRoZW1lTW9kZWwgPSBlY01vZGVsLmdldFRoZW1lKCk7XG4gICAgenJVdGlsLm1lcmdlKG9wdGlvbiwgdGhlbWVNb2RlbC5nZXQodGhpcy5tYWluVHlwZSkpO1xuICAgIHpyVXRpbC5tZXJnZShvcHRpb24sIHRoaXMuZ2V0RGVmYXVsdE9wdGlvbigpKTtcblxuICAgIGlmIChsYXlvdXRNb2RlKSB7XG4gICAgICBsYXlvdXQubWVyZ2VMYXlvdXRQYXJhbShvcHRpb24sIGlucHV0UG9zaXRpb25QYXJhbXMsIGxheW91dE1vZGUpO1xuICAgIH1cbiAgfSxcbiAgbWVyZ2VPcHRpb246IGZ1bmN0aW9uIChvcHRpb24sIGV4dHJhT3B0KSB7XG4gICAgenJVdGlsLm1lcmdlKHRoaXMub3B0aW9uLCBvcHRpb24sIHRydWUpO1xuICAgIHZhciBsYXlvdXRNb2RlID0gdGhpcy5sYXlvdXRNb2RlO1xuXG4gICAgaWYgKGxheW91dE1vZGUpIHtcbiAgICAgIGxheW91dC5tZXJnZUxheW91dFBhcmFtKHRoaXMub3B0aW9uLCBvcHRpb24sIGxheW91dE1vZGUpO1xuICAgIH1cbiAgfSxcbiAgLy8gSG9va2VyIGFmdGVyIGluaXQgb3IgbWVyZ2VPcHRpb25cbiAgb3B0aW9uVXBkYXRlZDogZnVuY3Rpb24gKG5ld0NwdE9wdGlvbiwgaXNJbml0KSB7fSxcbiAgZ2V0RGVmYXVsdE9wdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBmaWVsZHMgPSBpbm5lcih0aGlzKTtcblxuICAgIGlmICghZmllbGRzLmRlZmF1bHRPcHRpb24pIHtcbiAgICAgIHZhciBvcHRMaXN0ID0gW107XG4gICAgICB2YXIgQ2xhc3MgPSB0aGlzLmNvbnN0cnVjdG9yO1xuXG4gICAgICB3aGlsZSAoQ2xhc3MpIHtcbiAgICAgICAgdmFyIG9wdCA9IENsYXNzLnByb3RvdHlwZS5kZWZhdWx0T3B0aW9uO1xuICAgICAgICBvcHQgJiYgb3B0TGlzdC5wdXNoKG9wdCk7XG4gICAgICAgIENsYXNzID0gQ2xhc3Muc3VwZXJDbGFzcztcbiAgICAgIH1cblxuICAgICAgdmFyIGRlZmF1bHRPcHRpb24gPSB7fTtcblxuICAgICAgZm9yICh2YXIgaSA9IG9wdExpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgZGVmYXVsdE9wdGlvbiA9IHpyVXRpbC5tZXJnZShkZWZhdWx0T3B0aW9uLCBvcHRMaXN0W2ldLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgZmllbGRzLmRlZmF1bHRPcHRpb24gPSBkZWZhdWx0T3B0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiBmaWVsZHMuZGVmYXVsdE9wdGlvbjtcbiAgfSxcbiAgZ2V0UmVmZXJyaW5nQ29tcG9uZW50czogZnVuY3Rpb24gKG1haW5UeXBlKSB7XG4gICAgcmV0dXJuIHRoaXMuZWNNb2RlbC5xdWVyeUNvbXBvbmVudHMoe1xuICAgICAgbWFpblR5cGU6IG1haW5UeXBlLFxuICAgICAgaW5kZXg6IHRoaXMuZ2V0KG1haW5UeXBlICsgJ0luZGV4JywgdHJ1ZSksXG4gICAgICBpZDogdGhpcy5nZXQobWFpblR5cGUgKyAnSWQnLCB0cnVlKVxuICAgIH0pO1xuICB9XG59KTsgLy8gUmVzZXQgQ29tcG9uZW50TW9kZWwuZXh0ZW5kLCBhZGQgcHJlQ29uc3RydWN0LlxuLy8gY2xhenpVdGlsLmVuYWJsZUNsYXNzRXh0ZW5kKFxuLy8gICAgIENvbXBvbmVudE1vZGVsLFxuLy8gICAgIGZ1bmN0aW9uIChvcHRpb24sIHBhcmVudE1vZGVsLCBlY01vZGVsLCBleHRyYU9wdCkge1xuLy8gICAgICAgICAvLyBTZXQgZGVwZW5kZW50TW9kZWxzLCBjb21wb25lbnRJbmRleCwgbmFtZSwgaWQsIG1haW5UeXBlLCBzdWJUeXBlLlxuLy8gICAgICAgICB6clV0aWwuZXh0ZW5kKHRoaXMsIGV4dHJhT3B0KTtcbi8vICAgICAgICAgdGhpcy51aWQgPSBjb21wb25lbnRVdGlsLmdldFVJRCgnY29tcG9uZW50TW9kZWwnKTtcbi8vICAgICAgICAgLy8gdGhpcy5zZXRSZWFkT25seShbXG4vLyAgICAgICAgIC8vICAgICAndHlwZScsICdpZCcsICd1aWQnLCAnbmFtZScsICdtYWluVHlwZScsICdzdWJUeXBlJyxcbi8vICAgICAgICAgLy8gICAgICdkZXBlbmRlbnRNb2RlbHMnLCAnY29tcG9uZW50SW5kZXgnXG4vLyAgICAgICAgIC8vIF0pO1xuLy8gICAgIH1cbi8vICk7XG4vLyBBZGQgY2FwYWJpbGl0eSBvZiByZWdpc3RlckNsYXNzLCBnZXRDbGFzcywgaGFzQ2xhc3MsIHJlZ2lzdGVyU3ViVHlwZURlZmF1bHRlciBhbmQgc28gb24uXG5cbmVuYWJsZUNsYXNzTWFuYWdlbWVudChDb21wb25lbnRNb2RlbCwge1xuICByZWdpc3RlcldoZW5FeHRlbmQ6IHRydWVcbn0pO1xuY29tcG9uZW50VXRpbC5lbmFibGVTdWJUeXBlRGVmYXVsdGVyKENvbXBvbmVudE1vZGVsKTsgLy8gQWRkIGNhcGFiaWxpdHkgb2YgQ29tcG9uZW50TW9kZWwudG9wb2xvZ2ljYWxUcmF2ZWwuXG5cbmNvbXBvbmVudFV0aWwuZW5hYmxlVG9wb2xvZ2ljYWxUcmF2ZWwoQ29tcG9uZW50TW9kZWwsIGdldERlcGVuZGVuY2llcyk7XG5cbmZ1bmN0aW9uIGdldERlcGVuZGVuY2llcyhjb21wb25lbnRUeXBlKSB7XG4gIHZhciBkZXBzID0gW107XG4gIHpyVXRpbC5lYWNoKENvbXBvbmVudE1vZGVsLmdldENsYXNzZXNCeU1haW5UeXBlKGNvbXBvbmVudFR5cGUpLCBmdW5jdGlvbiAoQ2xhenopIHtcbiAgICBkZXBzID0gZGVwcy5jb25jYXQoQ2xhenoucHJvdG90eXBlLmRlcGVuZGVuY2llcyB8fCBbXSk7XG4gIH0pOyAvLyBFbnN1cmUgbWFpbiB0eXBlLlxuXG4gIGRlcHMgPSB6clV0aWwubWFwKGRlcHMsIGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgcmV0dXJuIHBhcnNlQ2xhc3NUeXBlKHR5cGUpLm1haW47XG4gIH0pOyAvLyBIYWNrIGRhdGFzZXQgZm9yIGNvbnZlbmllbmNlLlxuXG4gIGlmIChjb21wb25lbnRUeXBlICE9PSAnZGF0YXNldCcgJiYgenJVdGlsLmluZGV4T2YoZGVwcywgJ2RhdGFzZXQnKSA8PSAwKSB7XG4gICAgZGVwcy51bnNoaWZ0KCdkYXRhc2V0Jyk7XG4gIH1cblxuICByZXR1cm4gZGVwcztcbn1cblxuenJVdGlsLm1peGluKENvbXBvbmVudE1vZGVsLCBib3hMYXlvdXRNaXhpbik7XG52YXIgX2RlZmF1bHQgPSBDb21wb25lbnRNb2RlbDtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIF9jb25maWcgPSByZXF1aXJlKFwiLi4vY29uZmlnXCIpO1xuXG52YXIgX19ERVZfXyA9IF9jb25maWcuX19ERVZfXztcblxudmFyIF91dGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxudmFyIGVhY2ggPSBfdXRpbC5lYWNoO1xudmFyIGZpbHRlciA9IF91dGlsLmZpbHRlcjtcbnZhciBtYXAgPSBfdXRpbC5tYXA7XG52YXIgaXNBcnJheSA9IF91dGlsLmlzQXJyYXk7XG52YXIgaW5kZXhPZiA9IF91dGlsLmluZGV4T2Y7XG52YXIgaXNPYmplY3QgPSBfdXRpbC5pc09iamVjdDtcbnZhciBpc1N0cmluZyA9IF91dGlsLmlzU3RyaW5nO1xudmFyIGNyZWF0ZUhhc2hNYXAgPSBfdXRpbC5jcmVhdGVIYXNoTWFwO1xudmFyIGFzc2VydCA9IF91dGlsLmFzc2VydDtcbnZhciBjbG9uZSA9IF91dGlsLmNsb25lO1xudmFyIG1lcmdlID0gX3V0aWwubWVyZ2U7XG52YXIgZXh0ZW5kID0gX3V0aWwuZXh0ZW5kO1xudmFyIG1peGluID0gX3V0aWwubWl4aW47XG5cbnZhciBtb2RlbFV0aWwgPSByZXF1aXJlKFwiLi4vdXRpbC9tb2RlbFwiKTtcblxudmFyIE1vZGVsID0gcmVxdWlyZShcIi4vTW9kZWxcIik7XG5cbnZhciBDb21wb25lbnRNb2RlbCA9IHJlcXVpcmUoXCIuL0NvbXBvbmVudFwiKTtcblxudmFyIGdsb2JhbERlZmF1bHQgPSByZXF1aXJlKFwiLi9nbG9iYWxEZWZhdWx0XCIpO1xuXG52YXIgY29sb3JQYWxldHRlTWl4aW4gPSByZXF1aXJlKFwiLi9taXhpbi9jb2xvclBhbGV0dGVcIik7XG5cbnZhciBfc291cmNlSGVscGVyID0gcmVxdWlyZShcIi4uL2RhdGEvaGVscGVyL3NvdXJjZUhlbHBlclwiKTtcblxudmFyIHJlc2V0U291cmNlRGVmYXVsdGVyID0gX3NvdXJjZUhlbHBlci5yZXNldFNvdXJjZURlZmF1bHRlcjtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG4vKipcbiAqIEVDaGFydHMgZ2xvYmFsIG1vZGVsXG4gKlxuICogQG1vZHVsZSB7ZWNoYXJ0cy9tb2RlbC9HbG9iYWx9XG4gKi9cblxuLyoqXG4gKiBDYXV0aW9uOiBJZiB0aGUgbWVjaGFuaXNtIHNob3VsZCBiZSBjaGFuZ2VkIHNvbWUgZGF5LCB0aGVzZSBjYXNlc1xuICogc2hvdWxkIGJlIGNvbnNpZGVyZWQ6XG4gKlxuICogKDEpIEluIGBtZXJnZSBvcHRpb25gIG1vZGUsIGlmIHVzaW5nIHRoZSBzYW1lIG9wdGlvbiB0byBjYWxsIGBzZXRPcHRpb25gXG4gKiBtYW55IHRpbWVzLCB0aGUgcmVzdWx0IHNob3VsZCBiZSB0aGUgc2FtZSAodHJ5IG91ciBiZXN0IHRvIGVuc3VyZSB0aGF0KS5cbiAqICgyKSBJbiBgbWVyZ2Ugb3B0aW9uYCBtb2RlLCBpZiBhIGNvbXBvbmVudCBoYXMgbm8gaWQvbmFtZSBzcGVjaWZpZWQsIGl0XG4gKiB3aWxsIGJlIG1lcmdlZCBieSBpbmRleCwgYW5kIHRoZSByZXN1bHQgc2VxdWVuY2Ugb2YgdGhlIGNvbXBvbmVudHMgaXNcbiAqIGNvbnNpc3RlbnQgdG8gdGhlIG9yaWdpbmFsIHNlcXVlbmNlLlxuICogKDMpIGByZXNldGAgZmVhdHVyZSAoaW4gdG9vbGJveCkuIEZpbmQgZGV0YWlsZWQgaW5mbyBpbiBjb21tZW50cyBhYm91dFxuICogYG1lcmdlT3B0aW9uYCBpbiBtb2R1bGU6ZWNoYXJ0cy9tb2RlbC9PcHRpb25NYW5hZ2VyLlxuICovXG52YXIgT1BUSU9OX0lOTkVSX0tFWSA9ICdcXDBfZWNfaW5uZXInO1xuLyoqXG4gKiBAYWxpYXMgbW9kdWxlOmVjaGFydHMvbW9kZWwvR2xvYmFsXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvblxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Nb2RlbH0gcGFyZW50TW9kZWxcbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGVtZVxuICovXG5cbnZhciBHbG9iYWxNb2RlbCA9IE1vZGVsLmV4dGVuZCh7XG4gIGluaXQ6IGZ1bmN0aW9uIChvcHRpb24sIHBhcmVudE1vZGVsLCB0aGVtZSwgb3B0aW9uTWFuYWdlcikge1xuICAgIHRoZW1lID0gdGhlbWUgfHwge307XG4gICAgdGhpcy5vcHRpb24gPSBudWxsOyAvLyBNYXJrIGFzIG5vdCBpbml0aWFsaXplZC5cblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Nb2RlbH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy5fdGhlbWUgPSBuZXcgTW9kZWwodGhlbWUpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9PcHRpb25NYW5hZ2VyfVxuICAgICAqL1xuXG4gICAgdGhpcy5fb3B0aW9uTWFuYWdlciA9IG9wdGlvbk1hbmFnZXI7XG4gIH0sXG4gIHNldE9wdGlvbjogZnVuY3Rpb24gKG9wdGlvbiwgb3B0aW9uUHJlcHJvY2Vzc29yRnVuY3MpIHtcbiAgICBhc3NlcnQoIShPUFRJT05fSU5ORVJfS0VZIGluIG9wdGlvbiksICdwbGVhc2UgdXNlIGNoYXJ0LmdldE9wdGlvbigpJyk7XG5cbiAgICB0aGlzLl9vcHRpb25NYW5hZ2VyLnNldE9wdGlvbihvcHRpb24sIG9wdGlvblByZXByb2Nlc3NvckZ1bmNzKTtcblxuICAgIHRoaXMucmVzZXRPcHRpb24obnVsbCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIG51bGwvdW5kZWZpbmVkOiByZXNldCBhbGwuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICdyZWNyZWF0ZSc6IGZvcmNlIHJlY3JlYXRlIGFsbC5cbiAgICogICAgICAgICAgICAgICAgICAgICAgJ3RpbWVsaW5lJzogb25seSByZXNldCB0aW1lbGluZSBvcHRpb25cbiAgICogICAgICAgICAgICAgICAgICAgICAgJ21lZGlhJzogb25seSByZXNldCBtZWRpYSBxdWVyeSBvcHRpb25cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvcHRpb24gY2hhbmdlZC5cbiAgICovXG4gIHJlc2V0T3B0aW9uOiBmdW5jdGlvbiAodHlwZSkge1xuICAgIHZhciBvcHRpb25DaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG9wdGlvbk1hbmFnZXIgPSB0aGlzLl9vcHRpb25NYW5hZ2VyO1xuXG4gICAgaWYgKCF0eXBlIHx8IHR5cGUgPT09ICdyZWNyZWF0ZScpIHtcbiAgICAgIHZhciBiYXNlT3B0aW9uID0gb3B0aW9uTWFuYWdlci5tb3VudE9wdGlvbih0eXBlID09PSAncmVjcmVhdGUnKTtcblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbiB8fCB0eXBlID09PSAncmVjcmVhdGUnKSB7XG4gICAgICAgIGluaXRCYXNlLmNhbGwodGhpcywgYmFzZU9wdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlc3RvcmVEYXRhKCk7XG4gICAgICAgIHRoaXMubWVyZ2VPcHRpb24oYmFzZU9wdGlvbik7XG4gICAgICB9XG5cbiAgICAgIG9wdGlvbkNoYW5nZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0eXBlID09PSAndGltZWxpbmUnIHx8IHR5cGUgPT09ICdtZWRpYScpIHtcbiAgICAgIHRoaXMucmVzdG9yZURhdGEoKTtcbiAgICB9XG5cbiAgICBpZiAoIXR5cGUgfHwgdHlwZSA9PT0gJ3JlY3JlYXRlJyB8fCB0eXBlID09PSAndGltZWxpbmUnKSB7XG4gICAgICB2YXIgdGltZWxpbmVPcHRpb24gPSBvcHRpb25NYW5hZ2VyLmdldFRpbWVsaW5lT3B0aW9uKHRoaXMpO1xuICAgICAgdGltZWxpbmVPcHRpb24gJiYgKHRoaXMubWVyZ2VPcHRpb24odGltZWxpbmVPcHRpb24pLCBvcHRpb25DaGFuZ2VkID0gdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKCF0eXBlIHx8IHR5cGUgPT09ICdyZWNyZWF0ZScgfHwgdHlwZSA9PT0gJ21lZGlhJykge1xuICAgICAgdmFyIG1lZGlhT3B0aW9ucyA9IG9wdGlvbk1hbmFnZXIuZ2V0TWVkaWFPcHRpb24odGhpcywgdGhpcy5fYXBpKTtcblxuICAgICAgaWYgKG1lZGlhT3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgZWFjaChtZWRpYU9wdGlvbnMsIGZ1bmN0aW9uIChtZWRpYU9wdGlvbikge1xuICAgICAgICAgIHRoaXMubWVyZ2VPcHRpb24obWVkaWFPcHRpb24sIG9wdGlvbkNoYW5nZWQgPSB0cnVlKTtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9wdGlvbkNoYW5nZWQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIG1lcmdlT3B0aW9uOiBmdW5jdGlvbiAobmV3T3B0aW9uKSB7XG4gICAgdmFyIG9wdGlvbiA9IHRoaXMub3B0aW9uO1xuICAgIHZhciBjb21wb25lbnRzTWFwID0gdGhpcy5fY29tcG9uZW50c01hcDtcbiAgICB2YXIgbmV3Q3B0VHlwZXMgPSBbXTtcbiAgICByZXNldFNvdXJjZURlZmF1bHRlcih0aGlzKTsgLy8gSWYgbm8gY29tcG9uZW50IGNsYXNzLCBtZXJnZSBkaXJlY3RseS5cbiAgICAvLyBGb3IgZXhhbXBsZTogY29sb3IsIGFuaW1haXRvbiBvcHRpb25zLCBldGMuXG5cbiAgICBlYWNoKG5ld09wdGlvbiwgZnVuY3Rpb24gKGNvbXBvbmVudE9wdGlvbiwgbWFpblR5cGUpIHtcbiAgICAgIGlmIChjb21wb25lbnRPcHRpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghQ29tcG9uZW50TW9kZWwuaGFzQ2xhc3MobWFpblR5cGUpKSB7XG4gICAgICAgIC8vIGdsb2JhbFNldHRpbmdUYXNrLmRpcnR5KCk7XG4gICAgICAgIG9wdGlvblttYWluVHlwZV0gPSBvcHRpb25bbWFpblR5cGVdID09IG51bGwgPyBjbG9uZShjb21wb25lbnRPcHRpb24pIDogbWVyZ2Uob3B0aW9uW21haW5UeXBlXSwgY29tcG9uZW50T3B0aW9uLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAobWFpblR5cGUpIHtcbiAgICAgICAgbmV3Q3B0VHlwZXMucHVzaChtYWluVHlwZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgQ29tcG9uZW50TW9kZWwudG9wb2xvZ2ljYWxUcmF2ZWwobmV3Q3B0VHlwZXMsIENvbXBvbmVudE1vZGVsLmdldEFsbENsYXNzTWFpblR5cGVzKCksIHZpc2l0Q29tcG9uZW50LCB0aGlzKTtcblxuICAgIGZ1bmN0aW9uIHZpc2l0Q29tcG9uZW50KG1haW5UeXBlLCBkZXBlbmRlbmNpZXMpIHtcbiAgICAgIHZhciBuZXdDcHRPcHRpb25MaXN0ID0gbW9kZWxVdGlsLm5vcm1hbGl6ZVRvQXJyYXkobmV3T3B0aW9uW21haW5UeXBlXSk7XG4gICAgICB2YXIgbWFwUmVzdWx0ID0gbW9kZWxVdGlsLm1hcHBpbmdUb0V4aXN0cyhjb21wb25lbnRzTWFwLmdldChtYWluVHlwZSksIG5ld0NwdE9wdGlvbkxpc3QpO1xuICAgICAgbW9kZWxVdGlsLm1ha2VJZEFuZE5hbWUobWFwUmVzdWx0KTsgLy8gU2V0IG1haW5UeXBlIGFuZCBjb21wbGV0ZSBzdWJUeXBlLlxuXG4gICAgICBlYWNoKG1hcFJlc3VsdCwgZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHZhciBvcHQgPSBpdGVtLm9wdGlvbjtcblxuICAgICAgICBpZiAoaXNPYmplY3Qob3B0KSkge1xuICAgICAgICAgIGl0ZW0ua2V5SW5mby5tYWluVHlwZSA9IG1haW5UeXBlO1xuICAgICAgICAgIGl0ZW0ua2V5SW5mby5zdWJUeXBlID0gZGV0ZXJtaW5lU3ViVHlwZShtYWluVHlwZSwgb3B0LCBpdGVtLmV4aXN0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB2YXIgZGVwZW5kZW50TW9kZWxzID0gZ2V0Q29tcG9uZW50c0J5VHlwZXMoY29tcG9uZW50c01hcCwgZGVwZW5kZW5jaWVzKTtcbiAgICAgIG9wdGlvblttYWluVHlwZV0gPSBbXTtcbiAgICAgIGNvbXBvbmVudHNNYXAuc2V0KG1haW5UeXBlLCBbXSk7XG4gICAgICBlYWNoKG1hcFJlc3VsdCwgZnVuY3Rpb24gKHJlc3VsdEl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHZhciBjb21wb25lbnRNb2RlbCA9IHJlc3VsdEl0ZW0uZXhpc3Q7XG4gICAgICAgIHZhciBuZXdDcHRPcHRpb24gPSByZXN1bHRJdGVtLm9wdGlvbjtcbiAgICAgICAgYXNzZXJ0KGlzT2JqZWN0KG5ld0NwdE9wdGlvbikgfHwgY29tcG9uZW50TW9kZWwsICdFbXB0eSBjb21wb25lbnQgZGVmaW5pdGlvbicpOyAvLyBDb25zaWRlciB3aGVyZSBpcyBubyBuZXcgb3B0aW9uIGFuZCBzaG91bGQgYmUgbWVyZ2VkIHVzaW5nIHt9LFxuICAgICAgICAvLyBzZWUgcmVtb3ZlRWRnZUFuZEFkZCBpbiB0b3BvbG9naWNhbFRyYXZlbCBhbmRcbiAgICAgICAgLy8gQ29tcG9uZW50TW9kZWwuZ2V0QWxsQ2xhc3NNYWluVHlwZXMuXG5cbiAgICAgICAgaWYgKCFuZXdDcHRPcHRpb24pIHtcbiAgICAgICAgICBjb21wb25lbnRNb2RlbC5tZXJnZU9wdGlvbih7fSwgdGhpcyk7XG4gICAgICAgICAgY29tcG9uZW50TW9kZWwub3B0aW9uVXBkYXRlZCh7fSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBDb21wb25lbnRNb2RlbENsYXNzID0gQ29tcG9uZW50TW9kZWwuZ2V0Q2xhc3MobWFpblR5cGUsIHJlc3VsdEl0ZW0ua2V5SW5mby5zdWJUeXBlLCB0cnVlKTtcblxuICAgICAgICAgIGlmIChjb21wb25lbnRNb2RlbCAmJiBjb21wb25lbnRNb2RlbCBpbnN0YW5jZW9mIENvbXBvbmVudE1vZGVsQ2xhc3MpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudE1vZGVsLm5hbWUgPSByZXN1bHRJdGVtLmtleUluZm8ubmFtZTsgLy8gY29tcG9uZW50TW9kZWwuc2V0dGluZ1Rhc2sgJiYgY29tcG9uZW50TW9kZWwuc2V0dGluZ1Rhc2suZGlydHkoKTtcblxuICAgICAgICAgICAgY29tcG9uZW50TW9kZWwubWVyZ2VPcHRpb24obmV3Q3B0T3B0aW9uLCB0aGlzKTtcbiAgICAgICAgICAgIGNvbXBvbmVudE1vZGVsLm9wdGlvblVwZGF0ZWQobmV3Q3B0T3B0aW9uLCBmYWxzZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFBFTkRJTkcgR2xvYmFsIGFzIHBhcmVudCA/XG4gICAgICAgICAgICB2YXIgZXh0cmFPcHQgPSBleHRlbmQoe1xuICAgICAgICAgICAgICBkZXBlbmRlbnRNb2RlbHM6IGRlcGVuZGVudE1vZGVscyxcbiAgICAgICAgICAgICAgY29tcG9uZW50SW5kZXg6IGluZGV4XG4gICAgICAgICAgICB9LCByZXN1bHRJdGVtLmtleUluZm8pO1xuICAgICAgICAgICAgY29tcG9uZW50TW9kZWwgPSBuZXcgQ29tcG9uZW50TW9kZWxDbGFzcyhuZXdDcHRPcHRpb24sIHRoaXMsIHRoaXMsIGV4dHJhT3B0KTtcbiAgICAgICAgICAgIGV4dGVuZChjb21wb25lbnRNb2RlbCwgZXh0cmFPcHQpO1xuICAgICAgICAgICAgY29tcG9uZW50TW9kZWwuaW5pdChuZXdDcHRPcHRpb24sIHRoaXMsIHRoaXMsIGV4dHJhT3B0KTsgLy8gQ2FsbCBvcHRpb25VcGRhdGVkIGFmdGVyIGluaXQuXG4gICAgICAgICAgICAvLyBuZXdDcHRPcHRpb24gaGFzIGJlZW4gdXNlZCBhcyBjb21wb25lbnRNb2RlbC5vcHRpb25cbiAgICAgICAgICAgIC8vIGFuZCBtYXkgYmUgbWVyZ2VkIHdpdGggdGhlbWUgYW5kIGRlZmF1bHQsIHNvIHBhc3MgbnVsbFxuICAgICAgICAgICAgLy8gdG8gYXZvaWQgY29uZnVzaW9uLlxuXG4gICAgICAgICAgICBjb21wb25lbnRNb2RlbC5vcHRpb25VcGRhdGVkKG51bGwsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbXBvbmVudHNNYXAuZ2V0KG1haW5UeXBlKVtpbmRleF0gPSBjb21wb25lbnRNb2RlbDtcbiAgICAgICAgb3B0aW9uW21haW5UeXBlXVtpbmRleF0gPSBjb21wb25lbnRNb2RlbC5vcHRpb247XG4gICAgICB9LCB0aGlzKTsgLy8gQmFja3VwIHNlcmllcyBmb3IgZmlsdGVyaW5nLlxuXG4gICAgICBpZiAobWFpblR5cGUgPT09ICdzZXJpZXMnKSB7XG4gICAgICAgIGNyZWF0ZVNlcmllc0luZGljZXModGhpcywgY29tcG9uZW50c01hcC5nZXQoJ3NlcmllcycpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9zZXJpZXNJbmRpY2VzTWFwID0gY3JlYXRlSGFzaE1hcCh0aGlzLl9zZXJpZXNJbmRpY2VzID0gdGhpcy5fc2VyaWVzSW5kaWNlcyB8fCBbXSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCBvcHRpb24gZm9yIG91dHB1dCAoY2xvbmVkIG9wdGlvbiBhbmQgaW5uZXIgaW5mbyByZW1vdmVkKVxuICAgKiBAcHVibGljXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIGdldE9wdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcHRpb24gPSBjbG9uZSh0aGlzLm9wdGlvbik7XG4gICAgZWFjaChvcHRpb24sIGZ1bmN0aW9uIChvcHRzLCBtYWluVHlwZSkge1xuICAgICAgaWYgKENvbXBvbmVudE1vZGVsLmhhc0NsYXNzKG1haW5UeXBlKSkge1xuICAgICAgICB2YXIgb3B0cyA9IG1vZGVsVXRpbC5ub3JtYWxpemVUb0FycmF5KG9wdHMpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSBvcHRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIG9wdGlvbnMgd2l0aCBpbm5lciBpZC5cbiAgICAgICAgICBpZiAobW9kZWxVdGlsLmlzSWRJbm5lcihvcHRzW2ldKSkge1xuICAgICAgICAgICAgb3B0cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9uW21haW5UeXBlXSA9IG9wdHM7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZGVsZXRlIG9wdGlvbltPUFRJT05fSU5ORVJfS0VZXTtcbiAgICByZXR1cm4gb3B0aW9uO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Nb2RlbH1cbiAgICovXG4gIGdldFRoZW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RoZW1lO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFpblR5cGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtpZHg9MF1cbiAgICogQHJldHVybiB7bW9kdWxlOmVjaGFydHMvbW9kZWwvQ29tcG9uZW50fVxuICAgKi9cbiAgZ2V0Q29tcG9uZW50OiBmdW5jdGlvbiAobWFpblR5cGUsIGlkeCkge1xuICAgIHZhciBsaXN0ID0gdGhpcy5fY29tcG9uZW50c01hcC5nZXQobWFpblR5cGUpO1xuXG4gICAgaWYgKGxpc3QpIHtcbiAgICAgIHJldHVybiBsaXN0W2lkeCB8fCAwXTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIElmIG5vbmUgb2YgaW5kZXggYW5kIGlkIGFuZCBuYW1lIHVzZWQsIHJldHVybiBhbGwgY29tcG9uZW50cyB3aXRoIG1haW5UeXBlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gY29uZGl0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb25kaXRpb24ubWFpblR5cGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtjb25kaXRpb24uc3ViVHlwZV0gSWYgaWdub3JlLCBvbmx5IHF1ZXJ5IGJ5IG1haW5UeXBlXG4gICAqIEBwYXJhbSB7bnVtYmVyfEFycmF5LjxudW1iZXI+fSBbY29uZGl0aW9uLmluZGV4XSBFaXRoZXIgaW5wdXQgaW5kZXggb3IgaWQgb3IgbmFtZS5cbiAgICogQHBhcmFtIHtzdHJpbmd8QXJyYXkuPHN0cmluZz59IFtjb25kaXRpb24uaWRdIEVpdGhlciBpbnB1dCBpbmRleCBvciBpZCBvciBuYW1lLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xBcnJheS48c3RyaW5nPn0gW2NvbmRpdGlvbi5uYW1lXSBFaXRoZXIgaW5wdXQgaW5kZXggb3IgaWQgb3IgbmFtZS5cbiAgICogQHJldHVybiB7QXJyYXkuPG1vZHVsZTplY2hhcnRzL21vZGVsL0NvbXBvbmVudD59XG4gICAqL1xuICBxdWVyeUNvbXBvbmVudHM6IGZ1bmN0aW9uIChjb25kaXRpb24pIHtcbiAgICB2YXIgbWFpblR5cGUgPSBjb25kaXRpb24ubWFpblR5cGU7XG5cbiAgICBpZiAoIW1haW5UeXBlKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gY29uZGl0aW9uLmluZGV4O1xuICAgIHZhciBpZCA9IGNvbmRpdGlvbi5pZDtcbiAgICB2YXIgbmFtZSA9IGNvbmRpdGlvbi5uYW1lO1xuXG4gICAgdmFyIGNwdHMgPSB0aGlzLl9jb21wb25lbnRzTWFwLmdldChtYWluVHlwZSk7XG5cbiAgICBpZiAoIWNwdHMgfHwgIWNwdHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdDtcblxuICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICBpZiAoIWlzQXJyYXkoaW5kZXgpKSB7XG4gICAgICAgIGluZGV4ID0gW2luZGV4XTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0ID0gZmlsdGVyKG1hcChpbmRleCwgZnVuY3Rpb24gKGlkeCkge1xuICAgICAgICByZXR1cm4gY3B0c1tpZHhdO1xuICAgICAgfSksIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgcmV0dXJuICEhdmFsO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICB2YXIgaXNJZEFycmF5ID0gaXNBcnJheShpZCk7XG4gICAgICByZXN1bHQgPSBmaWx0ZXIoY3B0cywgZnVuY3Rpb24gKGNwdCkge1xuICAgICAgICByZXR1cm4gaXNJZEFycmF5ICYmIGluZGV4T2YoaWQsIGNwdC5pZCkgPj0gMCB8fCAhaXNJZEFycmF5ICYmIGNwdC5pZCA9PT0gaWQ7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgIT0gbnVsbCkge1xuICAgICAgdmFyIGlzTmFtZUFycmF5ID0gaXNBcnJheShuYW1lKTtcbiAgICAgIHJlc3VsdCA9IGZpbHRlcihjcHRzLCBmdW5jdGlvbiAoY3B0KSB7XG4gICAgICAgIHJldHVybiBpc05hbWVBcnJheSAmJiBpbmRleE9mKG5hbWUsIGNwdC5uYW1lKSA+PSAwIHx8ICFpc05hbWVBcnJheSAmJiBjcHQubmFtZSA9PT0gbmFtZTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZXR1cm4gYWxsIGNvbXBvbmVudHMgd2l0aCBtYWluVHlwZVxuICAgICAgcmVzdWx0ID0gY3B0cy5zbGljZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBmaWx0ZXJCeVN1YlR5cGUocmVzdWx0LCBjb25kaXRpb24pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgaW50ZXJmYWNlIGlzIGRpZmZlcmVudCBmcm9tIHF1ZXJ5Q29tcG9uZW50cyxcbiAgICogd2hpY2ggaXMgY29udmVuaWVudCBmb3IgaW5uZXIgdXNhZ2UuXG4gICAqXG4gICAqIEB1c2FnZVxuICAgKiB2YXIgcmVzdWx0ID0gZmluZENvbXBvbmVudHMoXG4gICAqICAgICB7bWFpblR5cGU6ICdkYXRhWm9vbScsIHF1ZXJ5OiB7ZGF0YVpvb21JZDogJ2FiYyd9fVxuICAgKiApO1xuICAgKiB2YXIgcmVzdWx0ID0gZmluZENvbXBvbmVudHMoXG4gICAqICAgICB7bWFpblR5cGU6ICdzZXJpZXMnLCBzdWJUeXBlOiAncGllJywgcXVlcnk6IHtzZXJpZXNOYW1lOiAndWlvJ319XG4gICAqICk7XG4gICAqIHZhciByZXN1bHQgPSBmaW5kQ29tcG9uZW50cyhcbiAgICogICAgIHttYWluVHlwZTogJ3Nlcmllcyd9LFxuICAgKiAgICAgZnVuY3Rpb24gKG1vZGVsLCBpbmRleCkgey4uLn1cbiAgICogKTtcbiAgICogLy8gcmVzdWx0IGxpa2UgW2NvbXBvbmVudDAsIGNvbXBvbm5ldDEsIC4uLl1cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbmRpdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29uZGl0aW9uLm1haW5UeXBlIE1hbmRhdG9yeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtjb25kaXRpb24uc3ViVHlwZV0gT3B0aW9uYWwuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZGl0aW9uLnF1ZXJ5XSBsaWtlIHt4eHhJbmRleCwgeHh4SWQsIHh4eE5hbWV9LFxuICAgKiAgICAgICAgd2hlcmUgeHh4IGlzIG1haW5UeXBlLlxuICAgKiAgICAgICAgSWYgcXVlcnkgYXR0cmlidXRlIGlzIG51bGwvdW5kZWZpbmVkIG9yIGhhcyBubyBpbmRleC9pZC9uYW1lLFxuICAgKiAgICAgICAgZG8gbm90IGZpbHRlcmluZyBieSBxdWVyeSBjb25kaXRpb25zLCB3aGljaCBpcyBjb252ZW5pZW50IGZvclxuICAgKiAgICAgICAgbm8tcGF5bG9hZCBzaXR1YXRpb25zIG9yIHdoZW4gdGFyZ2V0IG9mIGFjdGlvbiBpcyBnbG9iYWwuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb25kaXRpb24uZmlsdGVyXSBwYXJhbWV0ZXI6IGNvbXBvbmVudCwgcmV0dXJuIGJvb2xlYW4uXG4gICAqIEByZXR1cm4ge0FycmF5Ljxtb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Db21wb25lbnQ+fVxuICAgKi9cbiAgZmluZENvbXBvbmVudHM6IGZ1bmN0aW9uIChjb25kaXRpb24pIHtcbiAgICB2YXIgcXVlcnkgPSBjb25kaXRpb24ucXVlcnk7XG4gICAgdmFyIG1haW5UeXBlID0gY29uZGl0aW9uLm1haW5UeXBlO1xuICAgIHZhciBxdWVyeUNvbmQgPSBnZXRRdWVyeUNvbmQocXVlcnkpO1xuICAgIHZhciByZXN1bHQgPSBxdWVyeUNvbmQgPyB0aGlzLnF1ZXJ5Q29tcG9uZW50cyhxdWVyeUNvbmQpIDogdGhpcy5fY29tcG9uZW50c01hcC5nZXQobWFpblR5cGUpO1xuICAgIHJldHVybiBkb0ZpbHRlcihmaWx0ZXJCeVN1YlR5cGUocmVzdWx0LCBjb25kaXRpb24pKTtcblxuICAgIGZ1bmN0aW9uIGdldFF1ZXJ5Q29uZChxKSB7XG4gICAgICB2YXIgaW5kZXhBdHRyID0gbWFpblR5cGUgKyAnSW5kZXgnO1xuICAgICAgdmFyIGlkQXR0ciA9IG1haW5UeXBlICsgJ0lkJztcbiAgICAgIHZhciBuYW1lQXR0ciA9IG1haW5UeXBlICsgJ05hbWUnO1xuICAgICAgcmV0dXJuIHEgJiYgKHFbaW5kZXhBdHRyXSAhPSBudWxsIHx8IHFbaWRBdHRyXSAhPSBudWxsIHx8IHFbbmFtZUF0dHJdICE9IG51bGwpID8ge1xuICAgICAgICBtYWluVHlwZTogbWFpblR5cGUsXG4gICAgICAgIC8vIHN1YlR5cGUgd2lsbCBiZSBmaWx0ZXJlZCBmaW5hbGx5LlxuICAgICAgICBpbmRleDogcVtpbmRleEF0dHJdLFxuICAgICAgICBpZDogcVtpZEF0dHJdLFxuICAgICAgICBuYW1lOiBxW25hbWVBdHRyXVxuICAgICAgfSA6IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZG9GaWx0ZXIocmVzKSB7XG4gICAgICByZXR1cm4gY29uZGl0aW9uLmZpbHRlciA/IGZpbHRlcihyZXMsIGNvbmRpdGlvbi5maWx0ZXIpIDogcmVzO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHVzYWdlXG4gICAqIGVhY2hDb21wb25lbnQoJ2xlZ2VuZCcsIGZ1bmN0aW9uIChsZWdlbmRNb2RlbCwgaW5kZXgpIHtcbiAgICogICAgIC4uLlxuICAgKiB9KTtcbiAgICogZWFjaENvbXBvbmVudChmdW5jdGlvbiAoY29tcG9uZW50VHlwZSwgbW9kZWwsIGluZGV4KSB7XG4gICAqICAgICAvLyBjb21wb25lbnRUeXBlIGRvZXMgbm90IGluY2x1ZGUgc3ViVHlwZVxuICAgKiAgICAgLy8gKGNvbXBvbmVudFR5cGUgaXMgJ3h4eCcgYnV0IG5vdCAneHh4LmFhJylcbiAgICogfSk7XG4gICAqIGVhY2hDb21wb25lbnQoXG4gICAqICAgICB7bWFpblR5cGU6ICdkYXRhWm9vbScsIHF1ZXJ5OiB7ZGF0YVpvb21JZDogJ2FiYyd9fSxcbiAgICogICAgIGZ1bmN0aW9uIChtb2RlbCwgaW5kZXgpIHsuLi59XG4gICAqICk7XG4gICAqIGVhY2hDb21wb25lbnQoXG4gICAqICAgICB7bWFpblR5cGU6ICdzZXJpZXMnLCBzdWJUeXBlOiAncGllJywgcXVlcnk6IHtzZXJpZXNOYW1lOiAndWlvJ319LFxuICAgKiAgICAgZnVuY3Rpb24gKG1vZGVsLCBpbmRleCkgey4uLn1cbiAgICogKTtcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0PX0gbWFpblR5cGUgV2hlbiBtYWluVHlwZSBpcyBvYmplY3QsIHRoZSBkZWZpbml0aW9uXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzIHRoZSBzYW1lIGFzIHRoZSBtZXRob2QgJ2ZpbmRDb21wb25lbnRzJy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2JcbiAgICogQHBhcmFtIHsqfSBjb250ZXh0XG4gICAqL1xuICBlYWNoQ29tcG9uZW50OiBmdW5jdGlvbiAobWFpblR5cGUsIGNiLCBjb250ZXh0KSB7XG4gICAgdmFyIGNvbXBvbmVudHNNYXAgPSB0aGlzLl9jb21wb25lbnRzTWFwO1xuXG4gICAgaWYgKHR5cGVvZiBtYWluVHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29udGV4dCA9IGNiO1xuICAgICAgY2IgPSBtYWluVHlwZTtcbiAgICAgIGNvbXBvbmVudHNNYXAuZWFjaChmdW5jdGlvbiAoY29tcG9uZW50cywgY29tcG9uZW50VHlwZSkge1xuICAgICAgICBlYWNoKGNvbXBvbmVudHMsIGZ1bmN0aW9uIChjb21wb25lbnQsIGluZGV4KSB7XG4gICAgICAgICAgY2IuY2FsbChjb250ZXh0LCBjb21wb25lbnRUeXBlLCBjb21wb25lbnQsIGluZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGlzU3RyaW5nKG1haW5UeXBlKSkge1xuICAgICAgZWFjaChjb21wb25lbnRzTWFwLmdldChtYWluVHlwZSksIGNiLCBjb250ZXh0KTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KG1haW5UeXBlKSkge1xuICAgICAgdmFyIHF1ZXJ5UmVzdWx0ID0gdGhpcy5maW5kQ29tcG9uZW50cyhtYWluVHlwZSk7XG4gICAgICBlYWNoKHF1ZXJ5UmVzdWx0LCBjYiwgY29udGV4dCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcmV0dXJuIHtBcnJheS48bW9kdWxlOmVjaGFydHMvbW9kZWwvU2VyaWVzPn1cbiAgICovXG4gIGdldFNlcmllc0J5TmFtZTogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgc2VyaWVzID0gdGhpcy5fY29tcG9uZW50c01hcC5nZXQoJ3NlcmllcycpO1xuXG4gICAgcmV0dXJuIGZpbHRlcihzZXJpZXMsIGZ1bmN0aW9uIChvbmVTZXJpZXMpIHtcbiAgICAgIHJldHVybiBvbmVTZXJpZXMubmFtZSA9PT0gbmFtZTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNlcmllc0luZGV4XG4gICAqIEByZXR1cm4ge21vZHVsZTplY2hhcnRzL21vZGVsL1Nlcmllc31cbiAgICovXG4gIGdldFNlcmllc0J5SW5kZXg6IGZ1bmN0aW9uIChzZXJpZXNJbmRleCkge1xuICAgIHJldHVybiB0aGlzLl9jb21wb25lbnRzTWFwLmdldCgnc2VyaWVzJylbc2VyaWVzSW5kZXhdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgc2VyaWVzIGxpc3QgYmVmb3JlIGZpbHRlcmVkIGJ5IHR5cGUuXG4gICAqIEZJWE1FOiByZW5hbWUgdG8gZ2V0UmF3U2VyaWVzQnlUeXBlP1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3ViVHlwZVxuICAgKiBAcmV0dXJuIHtBcnJheS48bW9kdWxlOmVjaGFydHMvbW9kZWwvU2VyaWVzPn1cbiAgICovXG4gIGdldFNlcmllc0J5VHlwZTogZnVuY3Rpb24gKHN1YlR5cGUpIHtcbiAgICB2YXIgc2VyaWVzID0gdGhpcy5fY29tcG9uZW50c01hcC5nZXQoJ3NlcmllcycpO1xuXG4gICAgcmV0dXJuIGZpbHRlcihzZXJpZXMsIGZ1bmN0aW9uIChvbmVTZXJpZXMpIHtcbiAgICAgIHJldHVybiBvbmVTZXJpZXMuc3ViVHlwZSA9PT0gc3ViVHlwZTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7QXJyYXkuPG1vZHVsZTplY2hhcnRzL21vZGVsL1Nlcmllcz59XG4gICAqL1xuICBnZXRTZXJpZXM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29tcG9uZW50c01hcC5nZXQoJ3NlcmllcycpLnNsaWNlKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldFNlcmllc0NvdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbXBvbmVudHNNYXAuZ2V0KCdzZXJpZXMnKS5sZW5ndGg7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFmdGVyIGZpbHRlcmluZywgc2VyaWVzIG1heSBiZSBkaWZmZXJlbnRcbiAgICogZnJvbWUgcmF3IHNlcmllcy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2JcbiAgICogQHBhcmFtIHsqfSBjb250ZXh0XG4gICAqL1xuICBlYWNoU2VyaWVzOiBmdW5jdGlvbiAoY2IsIGNvbnRleHQpIHtcbiAgICBhc3NlcnRTZXJpZXNJbml0aWFsaXplZCh0aGlzKTtcbiAgICBlYWNoKHRoaXMuX3Nlcmllc0luZGljZXMsIGZ1bmN0aW9uIChyYXdTZXJpZXNJbmRleCkge1xuICAgICAgdmFyIHNlcmllcyA9IHRoaXMuX2NvbXBvbmVudHNNYXAuZ2V0KCdzZXJpZXMnKVtyYXdTZXJpZXNJbmRleF07XG5cbiAgICAgIGNiLmNhbGwoY29udGV4dCwgc2VyaWVzLCByYXdTZXJpZXNJbmRleCk7XG4gICAgfSwgdGhpcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEl0ZXJhdGUgcmF3IHNlcmllcyBiZWZvcmUgZmlsdGVyZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiXG4gICAqIEBwYXJhbSB7Kn0gY29udGV4dFxuICAgKi9cbiAgZWFjaFJhd1NlcmllczogZnVuY3Rpb24gKGNiLCBjb250ZXh0KSB7XG4gICAgZWFjaCh0aGlzLl9jb21wb25lbnRzTWFwLmdldCgnc2VyaWVzJyksIGNiLCBjb250ZXh0KTtcbiAgfSxcblxuICAvKipcbiAgICogQWZ0ZXIgZmlsdGVyaW5nLCBzZXJpZXMgbWF5IGJlIGRpZmZlcmVudC5cbiAgICogZnJvbWUgcmF3IHNlcmllcy5cbiAgICpcbiAgICogQHBhcm1hIHtzdHJpbmd9IHN1YlR5cGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2JcbiAgICogQHBhcmFtIHsqfSBjb250ZXh0XG4gICAqL1xuICBlYWNoU2VyaWVzQnlUeXBlOiBmdW5jdGlvbiAoc3ViVHlwZSwgY2IsIGNvbnRleHQpIHtcbiAgICBhc3NlcnRTZXJpZXNJbml0aWFsaXplZCh0aGlzKTtcbiAgICBlYWNoKHRoaXMuX3Nlcmllc0luZGljZXMsIGZ1bmN0aW9uIChyYXdTZXJpZXNJbmRleCkge1xuICAgICAgdmFyIHNlcmllcyA9IHRoaXMuX2NvbXBvbmVudHNNYXAuZ2V0KCdzZXJpZXMnKVtyYXdTZXJpZXNJbmRleF07XG5cbiAgICAgIGlmIChzZXJpZXMuc3ViVHlwZSA9PT0gc3ViVHlwZSkge1xuICAgICAgICBjYi5jYWxsKGNvbnRleHQsIHNlcmllcywgcmF3U2VyaWVzSW5kZXgpO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJdGVyYXRlIHJhdyBzZXJpZXMgYmVmb3JlIGZpbHRlcmVkIG9mIGdpdmVuIHR5cGUuXG4gICAqXG4gICAqIEBwYXJtYSB7c3RyaW5nfSBzdWJUeXBlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiXG4gICAqIEBwYXJhbSB7Kn0gY29udGV4dFxuICAgKi9cbiAgZWFjaFJhd1Nlcmllc0J5VHlwZTogZnVuY3Rpb24gKHN1YlR5cGUsIGNiLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGVhY2godGhpcy5nZXRTZXJpZXNCeVR5cGUoc3ViVHlwZSksIGNiLCBjb250ZXh0KTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9TZXJpZXN9IHNlcmllc01vZGVsXG4gICAqL1xuICBpc1Nlcmllc0ZpbHRlcmVkOiBmdW5jdGlvbiAoc2VyaWVzTW9kZWwpIHtcbiAgICBhc3NlcnRTZXJpZXNJbml0aWFsaXplZCh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5fc2VyaWVzSW5kaWNlc01hcC5nZXQoc2VyaWVzTW9kZWwuY29tcG9uZW50SW5kZXgpID09IG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0FycmF5LjxudW1iZXI+fVxuICAgKi9cbiAgZ2V0Q3VycmVudFNlcmllc0luZGljZXM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMuX3Nlcmllc0luZGljZXMgfHwgW10pLnNsaWNlKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiXG4gICAqIEBwYXJhbSB7Kn0gY29udGV4dFxuICAgKi9cbiAgZmlsdGVyU2VyaWVzOiBmdW5jdGlvbiAoY2IsIGNvbnRleHQpIHtcbiAgICBhc3NlcnRTZXJpZXNJbml0aWFsaXplZCh0aGlzKTtcbiAgICB2YXIgZmlsdGVyZWRTZXJpZXMgPSBmaWx0ZXIodGhpcy5fY29tcG9uZW50c01hcC5nZXQoJ3NlcmllcycpLCBjYiwgY29udGV4dCk7XG4gICAgY3JlYXRlU2VyaWVzSW5kaWNlcyh0aGlzLCBmaWx0ZXJlZFNlcmllcyk7XG4gIH0sXG4gIHJlc3RvcmVEYXRhOiBmdW5jdGlvbiAocGF5bG9hZCkge1xuICAgIHZhciBjb21wb25lbnRzTWFwID0gdGhpcy5fY29tcG9uZW50c01hcDtcbiAgICBjcmVhdGVTZXJpZXNJbmRpY2VzKHRoaXMsIGNvbXBvbmVudHNNYXAuZ2V0KCdzZXJpZXMnKSk7XG4gICAgdmFyIGNvbXBvbmVudFR5cGVzID0gW107XG4gICAgY29tcG9uZW50c01hcC5lYWNoKGZ1bmN0aW9uIChjb21wb25lbnRzLCBjb21wb25lbnRUeXBlKSB7XG4gICAgICBjb21wb25lbnRUeXBlcy5wdXNoKGNvbXBvbmVudFR5cGUpO1xuICAgIH0pO1xuICAgIENvbXBvbmVudE1vZGVsLnRvcG9sb2dpY2FsVHJhdmVsKGNvbXBvbmVudFR5cGVzLCBDb21wb25lbnRNb2RlbC5nZXRBbGxDbGFzc01haW5UeXBlcygpLCBmdW5jdGlvbiAoY29tcG9uZW50VHlwZSwgZGVwZW5kZW5jaWVzKSB7XG4gICAgICBlYWNoKGNvbXBvbmVudHNNYXAuZ2V0KGNvbXBvbmVudFR5cGUpLCBmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgICAgIChjb21wb25lbnRUeXBlICE9PSAnc2VyaWVzJyB8fCAhaXNOb3RUYXJnZXRTZXJpZXMoY29tcG9uZW50LCBwYXlsb2FkKSkgJiYgY29tcG9uZW50LnJlc3RvcmVEYXRhKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGlzTm90VGFyZ2V0U2VyaWVzKHNlcmllc01vZGVsLCBwYXlsb2FkKSB7XG4gIGlmIChwYXlsb2FkKSB7XG4gICAgdmFyIGluZGV4ID0gcGF5bG9hZC5zZWlyZXNJbmRleDtcbiAgICB2YXIgaWQgPSBwYXlsb2FkLnNlcmllc0lkO1xuICAgIHZhciBuYW1lID0gcGF5bG9hZC5zZXJpZXNOYW1lO1xuICAgIHJldHVybiBpbmRleCAhPSBudWxsICYmIHNlcmllc01vZGVsLmNvbXBvbmVudEluZGV4ICE9PSBpbmRleCB8fCBpZCAhPSBudWxsICYmIHNlcmllc01vZGVsLmlkICE9PSBpZCB8fCBuYW1lICE9IG51bGwgJiYgc2VyaWVzTW9kZWwubmFtZSAhPT0gbmFtZTtcbiAgfVxufVxuLyoqXG4gKiBAaW5uZXJcbiAqL1xuXG5cbmZ1bmN0aW9uIG1lcmdlVGhlbWUob3B0aW9uLCB0aGVtZSkge1xuICAvLyBQRU5ESU5HXG4gIC8vIE5PVCB1c2UgYGNvbG9yTGF5ZXJgIGluIHRoZW1lIGlmIG9wdGlvbiBoYXMgYGNvbG9yYFxuICB2YXIgbm90TWVyZ2VDb2xvckxheWVyID0gb3B0aW9uLmNvbG9yICYmICFvcHRpb24uY29sb3JMYXllcjtcbiAgZWFjaCh0aGVtZSwgZnVuY3Rpb24gKHRoZW1lSXRlbSwgbmFtZSkge1xuICAgIGlmIChuYW1lID09PSAnY29sb3JMYXllcicgJiYgbm90TWVyZ2VDb2xvckxheWVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyDlpoLmnpzmnIkgY29tcG9uZW50IG1vZGVsIOWImeaKiuWFt+S9k+eahCBtZXJnZSDpgLvovpHkuqTnu5nor6UgbW9kZWwg5aSE55CGXG5cblxuICAgIGlmICghQ29tcG9uZW50TW9kZWwuaGFzQ2xhc3MobmFtZSkpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhlbWVJdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgICBvcHRpb25bbmFtZV0gPSAhb3B0aW9uW25hbWVdID8gY2xvbmUodGhlbWVJdGVtKSA6IG1lcmdlKG9wdGlvbltuYW1lXSwgdGhlbWVJdGVtLCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAob3B0aW9uW25hbWVdID09IG51bGwpIHtcbiAgICAgICAgICBvcHRpb25bbmFtZV0gPSB0aGVtZUl0ZW07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbml0QmFzZShiYXNlT3B0aW9uKSB7XG4gIGJhc2VPcHRpb24gPSBiYXNlT3B0aW9uOyAvLyBVc2luZyBPUFRJT05fSU5ORVJfS0VZIHRvIG1hcmsgdGhhdCB0aGlzIG9wdGlvbiBjYW4gbm90IGJlIHVzZWQgb3V0c2lkZSxcbiAgLy8gaS5lLiBgY2hhcnQuc2V0T3B0aW9uKGNoYXJ0LmdldE1vZGVsKCkub3B0aW9uKTtgIGlzIGZvcmJpZGVuLlxuXG4gIHRoaXMub3B0aW9uID0ge307XG4gIHRoaXMub3B0aW9uW09QVElPTl9JTk5FUl9LRVldID0gMTtcbiAgLyoqXG4gICAqIEluaXQgd2l0aCBzZXJpZXM6IFtdLCBpbiBjYXNlIG9mIGNhbGxpbmcgZmluZFNlcmllcyBtZXRob2RcbiAgICogYmVmb3JlIHNlcmllcyBpbml0aWFsaXplZC5cbiAgICogQHR5cGUge09iamVjdC48c3RyaW5nLCBBcnJheS48bW9kdWxlOmVjaGFydHMvbW9kZWwvTW9kZWw+Pn1cbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgdGhpcy5fY29tcG9uZW50c01hcCA9IGNyZWF0ZUhhc2hNYXAoe1xuICAgIHNlcmllczogW11cbiAgfSk7XG4gIC8qKlxuICAgKiBNYXBwaW5nIGJldHdlZW4gZmlsdGVyZWQgc2VyaWVzIGxpc3QgYW5kIHJhdyBzZXJpZXMgbGlzdC5cbiAgICoga2V5OiBmaWx0ZXJlZCBzZXJpZXMgaW5kaWNlcywgdmFsdWU6IHJhdyBzZXJpZXMgaW5kaWNlcy5cbiAgICogQHR5cGUge0FycmF5LjxudWJtZXI+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICB0aGlzLl9zZXJpZXNJbmRpY2VzO1xuICB0aGlzLl9zZXJpZXNJbmRpY2VzTWFwO1xuICBtZXJnZVRoZW1lKGJhc2VPcHRpb24sIHRoaXMuX3RoZW1lLm9wdGlvbik7IC8vIFRPRE8gTmVlZHMgY2xvbmUgd2hlbiBtZXJnaW5nIHRvIHRoZSB1bmV4aXN0ZWQgcHJvcGVydHlcblxuICBtZXJnZShiYXNlT3B0aW9uLCBnbG9iYWxEZWZhdWx0LCBmYWxzZSk7XG4gIHRoaXMubWVyZ2VPcHRpb24oYmFzZU9wdGlvbik7XG59XG4vKipcbiAqIEBpbm5lclxuICogQHBhcmFtIHtBcnJheS48c3RyaW5nPnxzdHJpbmd9IHR5cGVzIG1vZGVsIHR5cGVzXG4gKiBAcmV0dXJuIHtPYmplY3R9IGtleToge3N0cmluZ30gdHlwZSwgdmFsdWU6IHtBcnJheS48T2JqZWN0Pn0gbW9kZWxzXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRDb21wb25lbnRzQnlUeXBlcyhjb21wb25lbnRzTWFwLCB0eXBlcykge1xuICBpZiAoIWlzQXJyYXkodHlwZXMpKSB7XG4gICAgdHlwZXMgPSB0eXBlcyA/IFt0eXBlc10gOiBbXTtcbiAgfVxuXG4gIHZhciByZXQgPSB7fTtcbiAgZWFjaCh0eXBlcywgZnVuY3Rpb24gKHR5cGUpIHtcbiAgICByZXRbdHlwZV0gPSAoY29tcG9uZW50c01hcC5nZXQodHlwZSkgfHwgW10pLnNsaWNlKCk7XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufVxuLyoqXG4gKiBAaW5uZXJcbiAqL1xuXG5cbmZ1bmN0aW9uIGRldGVybWluZVN1YlR5cGUobWFpblR5cGUsIG5ld0NwdE9wdGlvbiwgZXhpc3RDb21wb25lbnQpIHtcbiAgdmFyIHN1YlR5cGUgPSBuZXdDcHRPcHRpb24udHlwZSA/IG5ld0NwdE9wdGlvbi50eXBlIDogZXhpc3RDb21wb25lbnQgPyBleGlzdENvbXBvbmVudC5zdWJUeXBlIC8vIFVzZSBkZXRlcm1pbmVTdWJUeXBlIG9ubHkgd2hlbiB0aGVyZSBpcyBubyBleGlzdENvbXBvbmVudC5cbiAgOiBDb21wb25lbnRNb2RlbC5kZXRlcm1pbmVTdWJUeXBlKG1haW5UeXBlLCBuZXdDcHRPcHRpb24pOyAvLyB0b29sdGlwLCBtYXJrbGluZSwgbWFya3BvaW50IG1heSBhbHdheXMgaGFzIG5vIHN1YlR5cGVcblxuICByZXR1cm4gc3ViVHlwZTtcbn1cbi8qKlxuICogQGlubmVyXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVTZXJpZXNJbmRpY2VzKGVjTW9kZWwsIHNlcmllc01vZGVscykge1xuICBlY01vZGVsLl9zZXJpZXNJbmRpY2VzTWFwID0gY3JlYXRlSGFzaE1hcChlY01vZGVsLl9zZXJpZXNJbmRpY2VzID0gbWFwKHNlcmllc01vZGVscywgZnVuY3Rpb24gKHNlcmllcykge1xuICAgIHJldHVybiBzZXJpZXMuY29tcG9uZW50SW5kZXg7XG4gIH0pIHx8IFtdKTtcbn1cbi8qKlxuICogQGlubmVyXG4gKi9cblxuXG5mdW5jdGlvbiBmaWx0ZXJCeVN1YlR5cGUoY29tcG9uZW50cywgY29uZGl0aW9uKSB7XG4gIC8vIFVzaW5nIGhhc093blByb3BlcnR5IGZvciByZXN0cmljdC4gQ29uc2lkZXJcbiAgLy8gc3ViVHlwZSBpcyB1bmRlZmluZWQgaW4gdXNlciBwYXlsb2FkLlxuICByZXR1cm4gY29uZGl0aW9uLmhhc093blByb3BlcnR5KCdzdWJUeXBlJykgPyBmaWx0ZXIoY29tcG9uZW50cywgZnVuY3Rpb24gKGNwdCkge1xuICAgIHJldHVybiBjcHQuc3ViVHlwZSA9PT0gY29uZGl0aW9uLnN1YlR5cGU7XG4gIH0pIDogY29tcG9uZW50cztcbn1cbi8qKlxuICogQGlubmVyXG4gKi9cblxuXG5mdW5jdGlvbiBhc3NlcnRTZXJpZXNJbml0aWFsaXplZChlY01vZGVsKSB7fVxuXG5taXhpbihHbG9iYWxNb2RlbCwgY29sb3JQYWxldHRlTWl4aW4pO1xudmFyIF9kZWZhdWx0ID0gR2xvYmFsTW9kZWw7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciB6clV0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgZW52ID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvZW52XCIpO1xuXG52YXIgX21vZGVsID0gcmVxdWlyZShcIi4uL3V0aWwvbW9kZWxcIik7XG5cbnZhciBtYWtlSW5uZXIgPSBfbW9kZWwubWFrZUlubmVyO1xuXG52YXIgX2NsYXp6ID0gcmVxdWlyZShcIi4uL3V0aWwvY2xhenpcIik7XG5cbnZhciBlbmFibGVDbGFzc0V4dGVuZCA9IF9jbGF6ei5lbmFibGVDbGFzc0V4dGVuZDtcbnZhciBlbmFibGVDbGFzc0NoZWNrID0gX2NsYXp6LmVuYWJsZUNsYXNzQ2hlY2s7XG5cbnZhciBsaW5lU3R5bGVNaXhpbiA9IHJlcXVpcmUoXCIuL21peGluL2xpbmVTdHlsZVwiKTtcblxudmFyIGFyZWFTdHlsZU1peGluID0gcmVxdWlyZShcIi4vbWl4aW4vYXJlYVN0eWxlXCIpO1xuXG52YXIgdGV4dFN0eWxlTWl4aW4gPSByZXF1aXJlKFwiLi9taXhpbi90ZXh0U3R5bGVcIik7XG5cbnZhciBpdGVtU3R5bGVNaXhpbiA9IHJlcXVpcmUoXCIuL21peGluL2l0ZW1TdHlsZVwiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG4vKipcbiAqIEBtb2R1bGUgZWNoYXJ0cy9tb2RlbC9Nb2RlbFxuICovXG52YXIgbWl4aW4gPSB6clV0aWwubWl4aW47XG52YXIgaW5uZXIgPSBtYWtlSW5uZXIoKTtcbi8qKlxuICogQGFsaWFzIG1vZHVsZTplY2hhcnRzL21vZGVsL01vZGVsXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25cbiAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvbW9kZWwvTW9kZWx9IFtwYXJlbnRNb2RlbF1cbiAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvbW9kZWwvR2xvYmFsfSBbZWNNb2RlbF1cbiAqL1xuXG5mdW5jdGlvbiBNb2RlbChvcHRpb24sIHBhcmVudE1vZGVsLCBlY01vZGVsKSB7XG4gIC8qKlxuICAgKiBAdHlwZSB7bW9kdWxlOmVjaGFydHMvbW9kZWwvTW9kZWx9XG4gICAqIEByZWFkT25seVxuICAgKi9cbiAgdGhpcy5wYXJlbnRNb2RlbCA9IHBhcmVudE1vZGVsO1xuICAvKipcbiAgICogQHR5cGUge21vZHVsZTplY2hhcnRzL21vZGVsL0dsb2JhbH1cbiAgICogQHJlYWRPbmx5XG4gICAqL1xuXG4gIHRoaXMuZWNNb2RlbCA9IGVjTW9kZWw7XG4gIC8qKlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuXG4gIHRoaXMub3B0aW9uID0gb3B0aW9uOyAvLyBTaW1wbGUgb3B0aW1pemF0aW9uXG4gIC8vIGlmICh0aGlzLmluaXQpIHtcbiAgLy8gICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDw9IDQpIHtcbiAgLy8gICAgICAgICB0aGlzLmluaXQob3B0aW9uLCBwYXJlbnRNb2RlbCwgZWNNb2RlbCwgZXh0cmFPcHQpO1xuICAvLyAgICAgfVxuICAvLyAgICAgZWxzZSB7XG4gIC8vICAgICAgICAgdGhpcy5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIC8vICAgICB9XG4gIC8vIH1cbn1cblxuTW9kZWwucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTW9kZWwsXG5cbiAgLyoqXG4gICAqIE1vZGVsIOeahOWIneWni+WMluWHveaVsFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uXG4gICAqL1xuICBpbml0OiBudWxsLFxuXG4gIC8qKlxuICAgKiDku47mlrDnmoQgT3B0aW9uIG1lcmdlXG4gICAqL1xuICBtZXJnZU9wdGlvbjogZnVuY3Rpb24gKG9wdGlvbikge1xuICAgIHpyVXRpbC5tZXJnZSh0aGlzLm9wdGlvbiwgb3B0aW9uLCB0cnVlKTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd8QXJyYXkuPHN0cmluZz59IHBhdGhcbiAgICogQHBhcmFtIHtib29sZWFufSBbaWdub3JlUGFyZW50PWZhbHNlXVxuICAgKiBAcmV0dXJuIHsqfVxuICAgKi9cbiAgZ2V0OiBmdW5jdGlvbiAocGF0aCwgaWdub3JlUGFyZW50KSB7XG4gICAgaWYgKHBhdGggPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiBkb0dldCh0aGlzLm9wdGlvbiwgdGhpcy5wYXJzZVBhdGgocGF0aCksICFpZ25vcmVQYXJlbnQgJiYgZ2V0UGFyZW50KHRoaXMsIHBhdGgpKTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpZ25vcmVQYXJlbnQ9ZmFsc2VdXG4gICAqIEByZXR1cm4geyp9XG4gICAqL1xuICBnZXRTaGFsbG93OiBmdW5jdGlvbiAoa2V5LCBpZ25vcmVQYXJlbnQpIHtcbiAgICB2YXIgb3B0aW9uID0gdGhpcy5vcHRpb247XG4gICAgdmFyIHZhbCA9IG9wdGlvbiA9PSBudWxsID8gb3B0aW9uIDogb3B0aW9uW2tleV07XG4gICAgdmFyIHBhcmVudE1vZGVsID0gIWlnbm9yZVBhcmVudCAmJiBnZXRQYXJlbnQodGhpcywga2V5KTtcblxuICAgIGlmICh2YWwgPT0gbnVsbCAmJiBwYXJlbnRNb2RlbCkge1xuICAgICAgdmFsID0gcGFyZW50TW9kZWwuZ2V0U2hhbGxvdyhrZXkpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfEFycmF5LjxzdHJpbmc+fSBbcGF0aF1cbiAgICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Nb2RlbH0gW3BhcmVudE1vZGVsXVxuICAgKiBAcmV0dXJuIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Nb2RlbH1cbiAgICovXG4gIGdldE1vZGVsOiBmdW5jdGlvbiAocGF0aCwgcGFyZW50TW9kZWwpIHtcbiAgICB2YXIgb2JqID0gcGF0aCA9PSBudWxsID8gdGhpcy5vcHRpb24gOiBkb0dldCh0aGlzLm9wdGlvbiwgcGF0aCA9IHRoaXMucGFyc2VQYXRoKHBhdGgpKTtcbiAgICB2YXIgdGhpc1BhcmVudE1vZGVsO1xuICAgIHBhcmVudE1vZGVsID0gcGFyZW50TW9kZWwgfHwgKHRoaXNQYXJlbnRNb2RlbCA9IGdldFBhcmVudCh0aGlzLCBwYXRoKSkgJiYgdGhpc1BhcmVudE1vZGVsLmdldE1vZGVsKHBhdGgpO1xuICAgIHJldHVybiBuZXcgTW9kZWwob2JqLCBwYXJlbnRNb2RlbCwgdGhpcy5lY01vZGVsKTtcbiAgfSxcblxuICAvKipcbiAgICogSWYgbW9kZWwgaGFzIG9wdGlvblxuICAgKi9cbiAgaXNFbXB0eTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbiA9PSBudWxsO1xuICB9LFxuICByZXN0b3JlRGF0YTogZnVuY3Rpb24gKCkge30sXG4gIC8vIFBlbmRpbmdcbiAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgQ3RvciA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIG5ldyBDdG9yKHpyVXRpbC5jbG9uZSh0aGlzLm9wdGlvbikpO1xuICB9LFxuICBzZXRSZWFkT25seTogZnVuY3Rpb24gKHByb3BlcnRpZXMpIHsvLyBjbGF6elV0aWwuc2V0UmVhZE9ubHkodGhpcywgcHJvcGVydGllcyk7XG4gIH0sXG4gIC8vIElmIHBhdGggaXMgbnVsbC91bmRlZmluZWQsIHJldHVybiBudWxsL3VuZGVmaW5lZC5cbiAgcGFyc2VQYXRoOiBmdW5jdGlvbiAocGF0aCkge1xuICAgIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHBhdGggPSBwYXRoLnNwbGl0KCcuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGg7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGdldFBhcmVudE1ldGhvZFxuICAgKiAgICAgICAgcGFyYW0ge0FycmF5LjxzdHJpbmc+fHN0cmluZ30gcGF0aFxuICAgKiAgICAgICAgcmV0dXJuIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Nb2RlbH1cbiAgICovXG4gIGN1c3RvbWl6ZUdldFBhcmVudDogZnVuY3Rpb24gKGdldFBhcmVudE1ldGhvZCkge1xuICAgIGlubmVyKHRoaXMpLmdldFBhcmVudCA9IGdldFBhcmVudE1ldGhvZDtcbiAgfSxcbiAgaXNBbmltYXRpb25FbmFibGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFlbnYubm9kZSkge1xuICAgICAgaWYgKHRoaXMub3B0aW9uLmFuaW1hdGlvbiAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMub3B0aW9uLmFuaW1hdGlvbjtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5wYXJlbnRNb2RlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnRNb2RlbC5pc0FuaW1hdGlvbkVuYWJsZWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGRvR2V0KG9iaiwgcGF0aEFyciwgcGFyZW50TW9kZWwpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gSWdub3JlIGVtcHR5XG4gICAgaWYgKCFwYXRoQXJyW2ldKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9IC8vIG9iaiBjb3VsZCBiZSBudW1iZXIvc3RyaW5nLy4uLiAobGlrZSAwKVxuXG5cbiAgICBvYmogPSBvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgPyBvYmpbcGF0aEFycltpXV0gOiBudWxsO1xuXG4gICAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAob2JqID09IG51bGwgJiYgcGFyZW50TW9kZWwpIHtcbiAgICBvYmogPSBwYXJlbnRNb2RlbC5nZXQocGF0aEFycik7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSAvLyBgcGF0aGAgY2FuIGJlIG51bGwvdW5kZWZpbmVkXG5cblxuZnVuY3Rpb24gZ2V0UGFyZW50KG1vZGVsLCBwYXRoKSB7XG4gIHZhciBnZXRQYXJlbnRNZXRob2QgPSBpbm5lcihtb2RlbCkuZ2V0UGFyZW50O1xuICByZXR1cm4gZ2V0UGFyZW50TWV0aG9kID8gZ2V0UGFyZW50TWV0aG9kLmNhbGwobW9kZWwsIHBhdGgpIDogbW9kZWwucGFyZW50TW9kZWw7XG59IC8vIEVuYWJsZSBNb2RlbC5leHRlbmQuXG5cblxuZW5hYmxlQ2xhc3NFeHRlbmQoTW9kZWwpO1xuZW5hYmxlQ2xhc3NDaGVjayhNb2RlbCk7XG5taXhpbihNb2RlbCwgbGluZVN0eWxlTWl4aW4pO1xubWl4aW4oTW9kZWwsIGFyZWFTdHlsZU1peGluKTtcbm1peGluKE1vZGVsLCB0ZXh0U3R5bGVNaXhpbik7XG5taXhpbihNb2RlbCwgaXRlbVN0eWxlTWl4aW4pO1xudmFyIF9kZWZhdWx0ID0gTW9kZWw7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciB6clV0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgbW9kZWxVdGlsID0gcmVxdWlyZShcIi4uL3V0aWwvbW9kZWxcIik7XG5cbnZhciBDb21wb25lbnRNb2RlbCA9IHJlcXVpcmUoXCIuL0NvbXBvbmVudFwiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG4vKipcbiAqIEVDaGFydHMgb3B0aW9uIG1hbmFnZXJcbiAqXG4gKiBAbW9kdWxlIHtlY2hhcnRzL21vZGVsL09wdGlvbk1hbmFnZXJ9XG4gKi9cbnZhciBlYWNoID0genJVdGlsLmVhY2g7XG52YXIgY2xvbmUgPSB6clV0aWwuY2xvbmU7XG52YXIgbWFwID0genJVdGlsLm1hcDtcbnZhciBtZXJnZSA9IHpyVXRpbC5tZXJnZTtcbnZhciBRVUVSWV9SRUcgPSAvXihtaW58bWF4KT8oLispJC87XG4vKipcbiAqIFRFUk0gRVhQTEFOQVRJT05TOlxuICpcbiAqIFtvcHRpb25dOlxuICpcbiAqICAgICBBbiBvYmplY3QgdGhhdCBjb250YWlucyBkZWZpbml0aW9ucyBvZiBjb21wb25lbnRzLiBGb3IgZXhhbXBsZTpcbiAqICAgICB2YXIgb3B0aW9uID0ge1xuICogICAgICAgICB0aXRsZTogey4uLn0sXG4gKiAgICAgICAgIGxlZ2VuZDogey4uLn0sXG4gKiAgICAgICAgIHZpc3VhbE1hcDogey4uLn0sXG4gKiAgICAgICAgIHNlcmllczogW1xuICogICAgICAgICAgICAge2RhdGE6IFsuLi5dfSxcbiAqICAgICAgICAgICAgIHtkYXRhOiBbLi4uXX0sXG4gKiAgICAgICAgICAgICAuLi5cbiAqICAgICAgICAgXVxuICogICAgIH07XG4gKlxuICogW3Jhd09wdGlvbl06XG4gKlxuICogICAgIEFuIG9iamVjdCBpbnB1dCB0byBlY2hhcnRzLnNldE9wdGlvbi4gJ3Jhd09wdGlvbicgbWF5IGJlIGFuXG4gKiAgICAgJ29wdGlvbicsIG9yIG1heSBiZSBhbiBvYmplY3QgY29udGFpbnMgbXVsdGktb3B0aW9ucy4gRm9yIGV4YW1wbGU6XG4gKiAgICAgdmFyIG9wdGlvbiA9IHtcbiAqICAgICAgICAgYmFzZU9wdGlvbjoge1xuICogICAgICAgICAgICAgdGl0bGU6IHsuLi59LFxuICogICAgICAgICAgICAgbGVnZW5kOiB7Li4ufSxcbiAqICAgICAgICAgICAgIHNlcmllczogW1xuICogICAgICAgICAgICAgICAgIHtkYXRhOiBbLi4uXX0sXG4gKiAgICAgICAgICAgICAgICAge2RhdGE6IFsuLi5dfSxcbiAqICAgICAgICAgICAgICAgICAuLi5cbiAqICAgICAgICAgICAgIF1cbiAqICAgICAgICAgfSxcbiAqICAgICAgICAgdGltZWxpbmU6IHsuLi59LFxuICogICAgICAgICBvcHRpb25zOiBbXG4gKiAgICAgICAgICAgICB7dGl0bGU6IHsuLi59LCBzZXJpZXM6IHtkYXRhOiBbLi4uXX19LFxuICogICAgICAgICAgICAge3RpdGxlOiB7Li4ufSwgc2VyaWVzOiB7ZGF0YTogWy4uLl19fSxcbiAqICAgICAgICAgICAgIC4uLlxuICogICAgICAgICBdLFxuICogICAgICAgICBtZWRpYTogW1xuICogICAgICAgICAgICAge1xuICogICAgICAgICAgICAgICAgIHF1ZXJ5OiB7bWF4V2lkdGg6IDMyMH0sXG4gKiAgICAgICAgICAgICAgICAgb3B0aW9uOiB7c2VyaWVzOiB7eDogMjB9LCB2aXN1YWxNYXA6IHtzaG93OiBmYWxzZX19XG4gKiAgICAgICAgICAgICB9LFxuICogICAgICAgICAgICAge1xuICogICAgICAgICAgICAgICAgIHF1ZXJ5OiB7bWluV2lkdGg6IDMyMCwgbWF4V2lkdGg6IDcyMH0sXG4gKiAgICAgICAgICAgICAgICAgb3B0aW9uOiB7c2VyaWVzOiB7eDogNTAwfSwgdmlzdWFsTWFwOiB7c2hvdzogdHJ1ZX19XG4gKiAgICAgICAgICAgICB9LFxuICogICAgICAgICAgICAge1xuICogICAgICAgICAgICAgICAgIG9wdGlvbjoge3Nlcmllczoge3g6IDEyMDB9LCB2aXN1YWxNYXA6IHtzaG93OiB0cnVlfX1cbiAqICAgICAgICAgICAgIH1cbiAqICAgICAgICAgXVxuICogICAgIH07XG4gKlxuICogQGFsaWFzIG1vZHVsZTplY2hhcnRzL21vZGVsL09wdGlvbk1hbmFnZXJcbiAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvRXh0ZW5zaW9uQVBJfSBhcGlcbiAqL1xuXG5mdW5jdGlvbiBPcHRpb25NYW5hZ2VyKGFwaSkge1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHR5cGUge21vZHVsZTplY2hhcnRzL0V4dGVuc2lvbkFQSX1cbiAgICovXG4gIHRoaXMuX2FwaSA9IGFwaTtcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEB0eXBlIHtBcnJheS48bnVtYmVyPn1cbiAgICovXG5cbiAgdGhpcy5fdGltZWxpbmVPcHRpb25zID0gW107XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdHlwZSB7QXJyYXkuPE9iamVjdD59XG4gICAqL1xuXG4gIHRoaXMuX21lZGlhTGlzdCA9IFtdO1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG5cbiAgdGhpcy5fbWVkaWFEZWZhdWx0O1xuICAvKipcbiAgICogLTEsIG1lYW5zIGRlZmF1bHQuXG4gICAqIGVtcHR5IG1lYW5zIG5vIG1lZGlhLlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdHlwZSB7QXJyYXkuPG51bWJlcj59XG4gICAqL1xuXG4gIHRoaXMuX2N1cnJlbnRNZWRpYUluZGljZXMgPSBbXTtcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG4gIHRoaXMuX29wdGlvbkJhY2t1cDtcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG4gIHRoaXMuX25ld0Jhc2VPcHRpb247XG59IC8vIHRpbWVsaW5lLm5vdE1lcmdlIGlzIG5vdCBzdXBwb3J0ZWQgaW4gZWMzLiBGaXJzdGx5IHRoZXJlIGlzIHJlYXJseVxuLy8gY2FzZSB0aGF0IG5vdE1lcmdlIGlzIG5lZWRlZC4gU2Vjb25kbHkgc3VwcG9ydGluZyAnbm90TWVyZ2UnIHJlcXVpcmVzXG4vLyByYXdPcHRpb24gY2xvbmVkIGFuZCBiYWNrdXBlZCB3aGVuIHRpbWVsaW5lIGNoYW5nZWQsIHdoaWNoIGRvZXMgbm9cbi8vIGdvb2QgdG8gcGVyZm9ybWFuY2UuIFdoYXQncyBtb3JlLCB0aGF0IGJvdGggdGltZWxpbmUgYW5kIHNldE9wdGlvblxuLy8gbWV0aG9kIHN1cHBseSAnbm90TWVyZ2UnIGJyaW5ncyBjb21wbGV4IGFuZCBzb21lIHByb2JsZW1zLlxuLy8gQ29uc2lkZXIgdGhpcyBjYXNlOlxuLy8gKHN0ZXAxKSBjaGFydC5zZXRPcHRpb24oe3RpbWVsaW5lOiB7bm90TWVyZ2U6IGZhbHNlfSwgLi4ufSwgZmFsc2UpO1xuLy8gKHN0ZXAyKSBjaGFydC5zZXRPcHRpb24oe3RpbWVsaW5lOiB7bm90TWVyZ2U6IHRydWV9LCAuLi59LCBmYWxzZSk7XG5cblxuT3B0aW9uTWFuYWdlci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBPcHRpb25NYW5hZ2VyLFxuXG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSByYXdPcHRpb24gUmF3IG9wdGlvbi5cbiAgICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9HbG9iYWx9IGVjTW9kZWxcbiAgICogQHBhcmFtIHtBcnJheS48RnVuY3Rpb24+fSBvcHRpb25QcmVwcm9jZXNzb3JGdW5jc1xuICAgKiBAcmV0dXJuIHtPYmplY3R9IEluaXQgb3B0aW9uXG4gICAqL1xuICBzZXRPcHRpb246IGZ1bmN0aW9uIChyYXdPcHRpb24sIG9wdGlvblByZXByb2Nlc3NvckZ1bmNzKSB7XG4gICAgaWYgKHJhd09wdGlvbikge1xuICAgICAgLy8gVGhhdCBzZXQgZGF0IHByaW1pdGl2ZSBpcyBkYW5nZXJvdXMgaWYgdXNlciByZXVzZSB0aGUgZGF0YSB3aGVuIHNldE9wdGlvbiBhZ2Fpbi5cbiAgICAgIHpyVXRpbC5lYWNoKG1vZGVsVXRpbC5ub3JtYWxpemVUb0FycmF5KHJhd09wdGlvbi5zZXJpZXMpLCBmdW5jdGlvbiAoc2VyaWVzKSB7XG4gICAgICAgIHNlcmllcyAmJiBzZXJpZXMuZGF0YSAmJiB6clV0aWwuaXNUeXBlZEFycmF5KHNlcmllcy5kYXRhKSAmJiB6clV0aWwuc2V0QXNQcmltaXRpdmUoc2VyaWVzLmRhdGEpO1xuICAgICAgfSk7XG4gICAgfSAvLyBDYXV0aW9uOiBzb21lIHNlcmllcyBtb2RpZnkgb3B0aW9uIGRhdGEsIGlmIGRvIG5vdCBjbG9uZSxcbiAgICAvLyBpdCBzaG91bGQgZW5zdXJlIHRoYXQgdGhlIHJlcGVhdCBtb2RpZnkgY29ycmVjdGx5XG4gICAgLy8gKGNyZWF0ZSBhIG5ldyBvYmplY3Qgd2hlbiBtb2RpZnkgaXRzZWxmKS5cblxuXG4gICAgcmF3T3B0aW9uID0gY2xvbmUocmF3T3B0aW9uLCB0cnVlKTsgLy8gRklYTUVcbiAgICAvLyDlpoLmnpwgdGltZWxpbmUgb3B0aW9ucyDmiJbogIUgbWVkaWEg5Lit6K6+572u5LqG5p+Q5Liq5bGe5oCn77yM6ICMYmFzZU9wdGlvbuS4reayoeacieiuvue9ru+8jOWImei/m+ihjOitpuWRiuOAglxuXG4gICAgdmFyIG9sZE9wdGlvbkJhY2t1cCA9IHRoaXMuX29wdGlvbkJhY2t1cDtcbiAgICB2YXIgbmV3UGFyc2VkT3B0aW9uID0gcGFyc2VSYXdPcHRpb24uY2FsbCh0aGlzLCByYXdPcHRpb24sIG9wdGlvblByZXByb2Nlc3NvckZ1bmNzLCAhb2xkT3B0aW9uQmFja3VwKTtcbiAgICB0aGlzLl9uZXdCYXNlT3B0aW9uID0gbmV3UGFyc2VkT3B0aW9uLmJhc2VPcHRpb247IC8vIEZvciBzZXRPcHRpb24gYXQgc2Vjb25kIHRpbWUgKHVzaW5nIG1lcmdlIG1vZGUpO1xuXG4gICAgaWYgKG9sZE9wdGlvbkJhY2t1cCkge1xuICAgICAgLy8gT25seSBiYXNlT3B0aW9uIGNhbiBiZSBtZXJnZWQuXG4gICAgICBtZXJnZU9wdGlvbihvbGRPcHRpb25CYWNrdXAuYmFzZU9wdGlvbiwgbmV3UGFyc2VkT3B0aW9uLmJhc2VPcHRpb24pOyAvLyBGb3Igc2ltcGxpY2l0eSwgdGltZWxpbmUgb3B0aW9ucyBhbmQgbWVkaWEgb3B0aW9ucyBkbyBub3Qgc3VwcG9ydCBtZXJnZSxcbiAgICAgIC8vIHRoYXQgaXMsIGlmIHlvdSBgc2V0T3B0aW9uYCB0d2ljZSBhbmQgYm90aCBoYXMgdGltZWxpbmUgb3B0aW9ucywgdGhlIGxhdHRlclxuICAgICAgLy8gdGltZWxpbmUgb3BpdG9ucyB3aWxsIG5vdCBiZSBtZXJnZWQgdG8gdGhlIGZvcm1lcnMsIGJ1dCBqdXN0IHN1YnN0aXR1ZGUgdGhlbS5cblxuICAgICAgaWYgKG5ld1BhcnNlZE9wdGlvbi50aW1lbGluZU9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgIG9sZE9wdGlvbkJhY2t1cC50aW1lbGluZU9wdGlvbnMgPSBuZXdQYXJzZWRPcHRpb24udGltZWxpbmVPcHRpb25zO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV3UGFyc2VkT3B0aW9uLm1lZGlhTGlzdC5sZW5ndGgpIHtcbiAgICAgICAgb2xkT3B0aW9uQmFja3VwLm1lZGlhTGlzdCA9IG5ld1BhcnNlZE9wdGlvbi5tZWRpYUxpc3Q7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXdQYXJzZWRPcHRpb24ubWVkaWFEZWZhdWx0KSB7XG4gICAgICAgIG9sZE9wdGlvbkJhY2t1cC5tZWRpYURlZmF1bHQgPSBuZXdQYXJzZWRPcHRpb24ubWVkaWFEZWZhdWx0O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9vcHRpb25CYWNrdXAgPSBuZXdQYXJzZWRPcHRpb247XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzUmVjcmVhdGVcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgbW91bnRPcHRpb246IGZ1bmN0aW9uIChpc1JlY3JlYXRlKSB7XG4gICAgdmFyIG9wdGlvbkJhY2t1cCA9IHRoaXMuX29wdGlvbkJhY2t1cDsgLy8gVE9ET1xuICAgIC8vIOWmguaenOayoeaciXJlc2V05Yqf6IO95YiZ5LiNY2xvbmXjgIJcblxuICAgIHRoaXMuX3RpbWVsaW5lT3B0aW9ucyA9IG1hcChvcHRpb25CYWNrdXAudGltZWxpbmVPcHRpb25zLCBjbG9uZSk7XG4gICAgdGhpcy5fbWVkaWFMaXN0ID0gbWFwKG9wdGlvbkJhY2t1cC5tZWRpYUxpc3QsIGNsb25lKTtcbiAgICB0aGlzLl9tZWRpYURlZmF1bHQgPSBjbG9uZShvcHRpb25CYWNrdXAubWVkaWFEZWZhdWx0KTtcbiAgICB0aGlzLl9jdXJyZW50TWVkaWFJbmRpY2VzID0gW107XG4gICAgcmV0dXJuIGNsb25lKGlzUmVjcmVhdGUgLy8gdGhpcy5fb3B0aW9uQmFja3VwLmJhc2VPcHRpb24sIHdoaWNoIGlzIGNyZWF0ZWQgYXQgdGhlIGZpcnN0IGBzZXRPcHRpb25gXG4gICAgLy8gY2FsbGVkLCBhbmQgaXMgbWVyZ2VkIGludG8gZXZlcnkgbmV3IG9wdGlvbiBieSBpbm5lciBtZXRob2QgYG1lcmdlT3B0aW9uYFxuICAgIC8vIGVhY2ggdGltZSBgc2V0T3B0aW9uYCBjYWxsZWQsIGNhbiBiZSBvbmx5IHVzZWQgaW4gYGlzUmVjcmVhdGVgLCBiZWNhdXNlXG4gICAgLy8gaXRzIHJlbGlhYmlsaXR5IGlzIHVuZGVyIHN1c3BpY2lvbi4gSW4gb3RoZXIgY2FzZXMgb3B0aW9uIG1lcmdlIGlzXG4gICAgLy8gcGVyZm9ybWVkIGJ5IGBtb2RlbC5tZXJnZU9wdGlvbmAuXG4gICAgPyBvcHRpb25CYWNrdXAuYmFzZU9wdGlvbiA6IHRoaXMuX25ld0Jhc2VPcHRpb24pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL21vZGVsL0dsb2JhbH0gZWNNb2RlbFxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBnZXRUaW1lbGluZU9wdGlvbjogZnVuY3Rpb24gKGVjTW9kZWwpIHtcbiAgICB2YXIgb3B0aW9uO1xuICAgIHZhciB0aW1lbGluZU9wdGlvbnMgPSB0aGlzLl90aW1lbGluZU9wdGlvbnM7XG5cbiAgICBpZiAodGltZWxpbmVPcHRpb25zLmxlbmd0aCkge1xuICAgICAgLy8gZ2V0VGltZWxpbmVPcHRpb24gY2FuIG9ubHkgYmUgY2FsbGVkIGFmdGVyIGVjTW9kZWwgaW5pdGVkLFxuICAgICAgLy8gc28gd2UgY2FuIGdldCBjdXJyZW50SW5kZXggZnJvbSB0aW1lbGluZU1vZGVsLlxuICAgICAgdmFyIHRpbWVsaW5lTW9kZWwgPSBlY01vZGVsLmdldENvbXBvbmVudCgndGltZWxpbmUnKTtcblxuICAgICAgaWYgKHRpbWVsaW5lTW9kZWwpIHtcbiAgICAgICAgb3B0aW9uID0gY2xvbmUodGltZWxpbmVPcHRpb25zW3RpbWVsaW5lTW9kZWwuZ2V0Q3VycmVudEluZGV4KCldLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9uO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL21vZGVsL0dsb2JhbH0gZWNNb2RlbFxuICAgKiBAcmV0dXJuIHtBcnJheS48T2JqZWN0Pn1cbiAgICovXG4gIGdldE1lZGlhT3B0aW9uOiBmdW5jdGlvbiAoZWNNb2RlbCkge1xuICAgIHZhciBlY1dpZHRoID0gdGhpcy5fYXBpLmdldFdpZHRoKCk7XG5cbiAgICB2YXIgZWNIZWlnaHQgPSB0aGlzLl9hcGkuZ2V0SGVpZ2h0KCk7XG5cbiAgICB2YXIgbWVkaWFMaXN0ID0gdGhpcy5fbWVkaWFMaXN0O1xuICAgIHZhciBtZWRpYURlZmF1bHQgPSB0aGlzLl9tZWRpYURlZmF1bHQ7XG4gICAgdmFyIGluZGljZXMgPSBbXTtcbiAgICB2YXIgcmVzdWx0ID0gW107IC8vIE5vIG1lZGlhIGRlZmluZWQuXG5cbiAgICBpZiAoIW1lZGlhTGlzdC5sZW5ndGggJiYgIW1lZGlhRGVmYXVsdCkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IC8vIE11bHRpIG1lZGlhIG1heSBiZSBhcHBsaWVkLCB0aGUgbGF0dGVyIGRlZmluZWQgbWVkaWEgaGFzIGhpZ2hlciBwcmlvcml0eS5cblxuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG1lZGlhTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKGFwcGx5TWVkaWFRdWVyeShtZWRpYUxpc3RbaV0ucXVlcnksIGVjV2lkdGgsIGVjSGVpZ2h0KSkge1xuICAgICAgICBpbmRpY2VzLnB1c2goaSk7XG4gICAgICB9XG4gICAgfSAvLyBGSVhNRVxuICAgIC8vIOaYr+WQpm1lZGlhRGVmYXVsdOW6lOivpeW8uuWItueUqOaIt+iuvue9ru+8jOWQpuWImeWPr+iDveS/ruaUueS4jeiDveWbnuW9kuOAglxuXG5cbiAgICBpZiAoIWluZGljZXMubGVuZ3RoICYmIG1lZGlhRGVmYXVsdCkge1xuICAgICAgaW5kaWNlcyA9IFstMV07XG4gICAgfVxuXG4gICAgaWYgKGluZGljZXMubGVuZ3RoICYmICFpbmRpY2VzRXF1YWxzKGluZGljZXMsIHRoaXMuX2N1cnJlbnRNZWRpYUluZGljZXMpKSB7XG4gICAgICByZXN1bHQgPSBtYXAoaW5kaWNlcywgZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBjbG9uZShpbmRleCA9PT0gLTEgPyBtZWRpYURlZmF1bHQub3B0aW9uIDogbWVkaWFMaXN0W2luZGV4XS5vcHRpb24pO1xuICAgICAgfSk7XG4gICAgfSAvLyBPdGhlcndpc2UgcmV0dXJuIG5vdGhpbmcuXG5cblxuICAgIHRoaXMuX2N1cnJlbnRNZWRpYUluZGljZXMgPSBpbmRpY2VzO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHBhcnNlUmF3T3B0aW9uKHJhd09wdGlvbiwgb3B0aW9uUHJlcHJvY2Vzc29yRnVuY3MsIGlzTmV3KSB7XG4gIHZhciB0aW1lbGluZU9wdGlvbnMgPSBbXTtcbiAgdmFyIG1lZGlhTGlzdCA9IFtdO1xuICB2YXIgbWVkaWFEZWZhdWx0O1xuICB2YXIgYmFzZU9wdGlvbjsgLy8gQ29tcGF0aWJsZSB3aXRoIGVjMi5cblxuICB2YXIgdGltZWxpbmVPcHQgPSByYXdPcHRpb24udGltZWxpbmU7XG5cbiAgaWYgKHJhd09wdGlvbi5iYXNlT3B0aW9uKSB7XG4gICAgYmFzZU9wdGlvbiA9IHJhd09wdGlvbi5iYXNlT3B0aW9uO1xuICB9IC8vIEZvciB0aW1lbGluZVxuXG5cbiAgaWYgKHRpbWVsaW5lT3B0IHx8IHJhd09wdGlvbi5vcHRpb25zKSB7XG4gICAgYmFzZU9wdGlvbiA9IGJhc2VPcHRpb24gfHwge307XG4gICAgdGltZWxpbmVPcHRpb25zID0gKHJhd09wdGlvbi5vcHRpb25zIHx8IFtdKS5zbGljZSgpO1xuICB9IC8vIEZvciBtZWRpYSBxdWVyeVxuXG5cbiAgaWYgKHJhd09wdGlvbi5tZWRpYSkge1xuICAgIGJhc2VPcHRpb24gPSBiYXNlT3B0aW9uIHx8IHt9O1xuICAgIHZhciBtZWRpYSA9IHJhd09wdGlvbi5tZWRpYTtcbiAgICBlYWNoKG1lZGlhLCBmdW5jdGlvbiAoc2luZ2xlTWVkaWEpIHtcbiAgICAgIGlmIChzaW5nbGVNZWRpYSAmJiBzaW5nbGVNZWRpYS5vcHRpb24pIHtcbiAgICAgICAgaWYgKHNpbmdsZU1lZGlhLnF1ZXJ5KSB7XG4gICAgICAgICAgbWVkaWFMaXN0LnB1c2goc2luZ2xlTWVkaWEpO1xuICAgICAgICB9IGVsc2UgaWYgKCFtZWRpYURlZmF1bHQpIHtcbiAgICAgICAgICAvLyBVc2UgdGhlIGZpcnN0IG1lZGlhIGRlZmF1bHQuXG4gICAgICAgICAgbWVkaWFEZWZhdWx0ID0gc2luZ2xlTWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSAvLyBGb3Igbm9ybWFsIG9wdGlvblxuXG5cbiAgaWYgKCFiYXNlT3B0aW9uKSB7XG4gICAgYmFzZU9wdGlvbiA9IHJhd09wdGlvbjtcbiAgfSAvLyBTZXQgdGltZWxpbmVPcHQgdG8gYmFzZU9wdGlvbiBpbiBlYzMsXG4gIC8vIHdoaWNoIGlzIGNvbnZlbmllbnQgZm9yIG1lcmdlIG9wdGlvbi5cblxuXG4gIGlmICghYmFzZU9wdGlvbi50aW1lbGluZSkge1xuICAgIGJhc2VPcHRpb24udGltZWxpbmUgPSB0aW1lbGluZU9wdDtcbiAgfSAvLyBQcmVwcm9jZXNzLlxuXG5cbiAgZWFjaChbYmFzZU9wdGlvbl0uY29uY2F0KHRpbWVsaW5lT3B0aW9ucykuY29uY2F0KHpyVXRpbC5tYXAobWVkaWFMaXN0LCBmdW5jdGlvbiAobWVkaWEpIHtcbiAgICByZXR1cm4gbWVkaWEub3B0aW9uO1xuICB9KSksIGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICBlYWNoKG9wdGlvblByZXByb2Nlc3NvckZ1bmNzLCBmdW5jdGlvbiAocHJlUHJvY2Vzcykge1xuICAgICAgcHJlUHJvY2VzcyhvcHRpb24sIGlzTmV3KTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYmFzZU9wdGlvbjogYmFzZU9wdGlvbixcbiAgICB0aW1lbGluZU9wdGlvbnM6IHRpbWVsaW5lT3B0aW9ucyxcbiAgICBtZWRpYURlZmF1bHQ6IG1lZGlhRGVmYXVsdCxcbiAgICBtZWRpYUxpc3Q6IG1lZGlhTGlzdFxuICB9O1xufVxuLyoqXG4gKiBAc2VlIDxodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLW1lZGlhcXVlcmllcy8jbWVkaWExPlxuICogU3VwcG9ydDogd2lkdGgsIGhlaWdodCwgYXNwZWN0UmF0aW9cbiAqIENhbiB1c2UgbWF4IG9yIG1pbiBhcyBwcmVmaXguXG4gKi9cblxuXG5mdW5jdGlvbiBhcHBseU1lZGlhUXVlcnkocXVlcnksIGVjV2lkdGgsIGVjSGVpZ2h0KSB7XG4gIHZhciByZWFsTWFwID0ge1xuICAgIHdpZHRoOiBlY1dpZHRoLFxuICAgIGhlaWdodDogZWNIZWlnaHQsXG4gICAgYXNwZWN0cmF0aW86IGVjV2lkdGggLyBlY0hlaWdodCAvLyBsb3dzZXIgY2FzZSBmb3IgY29udmVuaWVudGNlLlxuXG4gIH07XG4gIHZhciBhcHBsaWNhdGFibGUgPSB0cnVlO1xuICB6clV0aWwuZWFjaChxdWVyeSwgZnVuY3Rpb24gKHZhbHVlLCBhdHRyKSB7XG4gICAgdmFyIG1hdGNoZWQgPSBhdHRyLm1hdGNoKFFVRVJZX1JFRyk7XG5cbiAgICBpZiAoIW1hdGNoZWQgfHwgIW1hdGNoZWRbMV0gfHwgIW1hdGNoZWRbMl0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb3BlcmF0b3IgPSBtYXRjaGVkWzFdO1xuICAgIHZhciByZWFsQXR0ciA9IG1hdGNoZWRbMl0udG9Mb3dlckNhc2UoKTtcblxuICAgIGlmICghY29tcGFyZShyZWFsTWFwW3JlYWxBdHRyXSwgdmFsdWUsIG9wZXJhdG9yKSkge1xuICAgICAgYXBwbGljYXRhYmxlID0gZmFsc2U7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGFwcGxpY2F0YWJsZTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZShyZWFsLCBleHBlY3QsIG9wZXJhdG9yKSB7XG4gIGlmIChvcGVyYXRvciA9PT0gJ21pbicpIHtcbiAgICByZXR1cm4gcmVhbCA+PSBleHBlY3Q7XG4gIH0gZWxzZSBpZiAob3BlcmF0b3IgPT09ICdtYXgnKSB7XG4gICAgcmV0dXJuIHJlYWwgPD0gZXhwZWN0O1xuICB9IGVsc2Uge1xuICAgIC8vIEVxdWFsc1xuICAgIHJldHVybiByZWFsID09PSBleHBlY3Q7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5kaWNlc0VxdWFscyhpbmRpY2VzMSwgaW5kaWNlczIpIHtcbiAgLy8gaW5kaWNlcyBpcyBhbHdheXMgb3JkZXIgYnkgYXNjIGFuZCBoYXMgb25seSBmaW5pdGUgbnVtYmVyLlxuICByZXR1cm4gaW5kaWNlczEuam9pbignLCcpID09PSBpbmRpY2VzMi5qb2luKCcsJyk7XG59XG4vKipcbiAqIENvbnNpZGVyIGNhc2U6XG4gKiBgY2hhcnQuc2V0T3B0aW9uKG9wdDEpO2BcbiAqIFRoZW4gdXNlciBkbyBzb21lIGludGVyYWN0aW9uIGxpa2UgZGF0YVpvb20sIGRhdGFWaWV3IGNoYW5naW5nLlxuICogYGNoYXJ0LnNldE9wdGlvbihvcHQyKTtgXG4gKiBUaGVuIHVzZXIgcHJlc3MgJ3Jlc2V0IGJ1dHRvbicgaW4gdG9vbGJveC5cbiAqXG4gKiBBZnRlciBkb2luZyB0aGF0IGFsbCBvZiB0aGUgaW50ZXJhY3Rpb24gZWZmZWN0cyBzaG91bGQgYmUgcmVzZXQsIHRoZVxuICogY2hhcnQgc2hvdWxkIGJlIHRoZSBzYW1lIGFzIHRoZSByZXN1bHQgb2YgaW52b2tlXG4gKiBgY2hhcnQuc2V0T3B0aW9uKG9wdDEpOyBjaGFydC5zZXRPcHRpb24ob3B0Mik7YC5cbiAqXG4gKiBBbHRob3VnaCBpdCBpcyBub3QgYWJsZSBlbnN1cmUgdGhhdFxuICogYGNoYXJ0LnNldE9wdGlvbihvcHQxKTsgY2hhcnQuc2V0T3B0aW9uKG9wdDIpO2AgaXMgZXF1aXZhbGVudHMgdG9cbiAqIGBjaGFydC5zZXRPcHRpb24obWVyZ2Uob3B0MSwgb3B0MikpO2AgZXhhY3RseSxcbiAqIHRoaXMgbWlnaHQgYmUgdGhlIG9ubHkgc2ltcGxlIHdheSB0byBpbXBsZW1lbnQgdGhhdCBmZWF0dXJlLlxuICpcbiAqIE1FTU86IFdlJ3ZlIGNvbnNpZGVyZWQgc29tZSBvdGhlciBhcHByb2FjaGVzOlxuICogMS4gRWFjaCBtb2RlbCBoYW5kbGUgaXRzIHNlbGYgcmVzdG9yYXRpb24gYnV0IG5vdCB1bmlmb3JtIHRyZWF0bWVudC5cbiAqICAgICAoVG9vIGNvbXBsZXggaW4gbG9naWMgYW5kIGVycm9yLXByb25lKVxuICogMi4gVXNlIGEgc2hhZG93IGVjTW9kZWwuIChQZXJmb3JtYWNlIGV4cGVuc2l2ZSlcbiAqL1xuXG5cbmZ1bmN0aW9uIG1lcmdlT3B0aW9uKG9sZE9wdGlvbiwgbmV3T3B0aW9uKSB7XG4gIG5ld09wdGlvbiA9IG5ld09wdGlvbiB8fCB7fTtcbiAgZWFjaChuZXdPcHRpb24sIGZ1bmN0aW9uIChuZXdDcHRPcHQsIG1haW5UeXBlKSB7XG4gICAgaWYgKG5ld0NwdE9wdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG9sZENwdE9wdCA9IG9sZE9wdGlvblttYWluVHlwZV07XG5cbiAgICBpZiAoIUNvbXBvbmVudE1vZGVsLmhhc0NsYXNzKG1haW5UeXBlKSkge1xuICAgICAgb2xkT3B0aW9uW21haW5UeXBlXSA9IG1lcmdlKG9sZENwdE9wdCwgbmV3Q3B0T3B0LCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3Q3B0T3B0ID0gbW9kZWxVdGlsLm5vcm1hbGl6ZVRvQXJyYXkobmV3Q3B0T3B0KTtcbiAgICAgIG9sZENwdE9wdCA9IG1vZGVsVXRpbC5ub3JtYWxpemVUb0FycmF5KG9sZENwdE9wdCk7XG4gICAgICB2YXIgbWFwUmVzdWx0ID0gbW9kZWxVdGlsLm1hcHBpbmdUb0V4aXN0cyhvbGRDcHRPcHQsIG5ld0NwdE9wdCk7XG4gICAgICBvbGRPcHRpb25bbWFpblR5cGVdID0gbWFwKG1hcFJlc3VsdCwgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ub3B0aW9uICYmIGl0ZW0uZXhpc3QgPyBtZXJnZShpdGVtLmV4aXN0LCBpdGVtLm9wdGlvbiwgdHJ1ZSkgOiBpdGVtLmV4aXN0IHx8IGl0ZW0ub3B0aW9uO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIF9kZWZhdWx0ID0gT3B0aW9uTWFuYWdlcjtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIF9jb25maWcgPSByZXF1aXJlKFwiLi4vY29uZmlnXCIpO1xuXG52YXIgX19ERVZfXyA9IF9jb25maWcuX19ERVZfXztcblxudmFyIHpyVXRpbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3V0aWxcIik7XG5cbnZhciBlbnYgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS9lbnZcIik7XG5cbnZhciBfZm9ybWF0ID0gcmVxdWlyZShcIi4uL3V0aWwvZm9ybWF0XCIpO1xuXG52YXIgZm9ybWF0VGltZSA9IF9mb3JtYXQuZm9ybWF0VGltZTtcbnZhciBlbmNvZGVIVE1MID0gX2Zvcm1hdC5lbmNvZGVIVE1MO1xudmFyIGFkZENvbW1hcyA9IF9mb3JtYXQuYWRkQ29tbWFzO1xudmFyIGdldFRvb2x0aXBNYXJrZXIgPSBfZm9ybWF0LmdldFRvb2x0aXBNYXJrZXI7XG5cbnZhciBtb2RlbFV0aWwgPSByZXF1aXJlKFwiLi4vdXRpbC9tb2RlbFwiKTtcblxudmFyIENvbXBvbmVudE1vZGVsID0gcmVxdWlyZShcIi4vQ29tcG9uZW50XCIpO1xuXG52YXIgY29sb3JQYWxldHRlTWl4aW4gPSByZXF1aXJlKFwiLi9taXhpbi9jb2xvclBhbGV0dGVcIik7XG5cbnZhciBkYXRhRm9ybWF0TWl4aW4gPSByZXF1aXJlKFwiLi4vbW9kZWwvbWl4aW4vZGF0YUZvcm1hdFwiKTtcblxudmFyIF9sYXlvdXQgPSByZXF1aXJlKFwiLi4vdXRpbC9sYXlvdXRcIik7XG5cbnZhciBnZXRMYXlvdXRQYXJhbXMgPSBfbGF5b3V0LmdldExheW91dFBhcmFtcztcbnZhciBtZXJnZUxheW91dFBhcmFtID0gX2xheW91dC5tZXJnZUxheW91dFBhcmFtO1xuXG52YXIgX3Rhc2sgPSByZXF1aXJlKFwiLi4vc3RyZWFtL3Rhc2tcIik7XG5cbnZhciBjcmVhdGVUYXNrID0gX3Rhc2suY3JlYXRlVGFzaztcblxudmFyIF9zb3VyY2VIZWxwZXIgPSByZXF1aXJlKFwiLi4vZGF0YS9oZWxwZXIvc291cmNlSGVscGVyXCIpO1xuXG52YXIgcHJlcGFyZVNvdXJjZSA9IF9zb3VyY2VIZWxwZXIucHJlcGFyZVNvdXJjZTtcbnZhciBnZXRTb3VyY2UgPSBfc291cmNlSGVscGVyLmdldFNvdXJjZTtcblxudmFyIF9kYXRhUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vZGF0YS9oZWxwZXIvZGF0YVByb3ZpZGVyXCIpO1xuXG52YXIgcmV0cmlldmVSYXdWYWx1ZSA9IF9kYXRhUHJvdmlkZXIucmV0cmlldmVSYXdWYWx1ZTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xudmFyIGlubmVyID0gbW9kZWxVdGlsLm1ha2VJbm5lcigpO1xudmFyIFNlcmllc01vZGVsID0gQ29tcG9uZW50TW9kZWwuZXh0ZW5kKHtcbiAgdHlwZTogJ3Nlcmllcy5fX2Jhc2VfXycsXG5cbiAgLyoqXG4gICAqIEByZWFkT25seVxuICAgKi9cbiAgc2VyaWVzSW5kZXg6IDAsXG4gIC8vIGNvb2RpbmF0ZVN5c3RlbSB3aWxsIGJlIGluamVjdGVkIGluIHRoZSBlY2hhcnRzL0Nvb3JkaW5hdGVTeXN0ZW1cbiAgY29vcmRpbmF0ZVN5c3RlbTogbnVsbCxcblxuICAvKipcbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgZGVmYXVsdE9wdGlvbjogbnVsbCxcblxuICAvKipcbiAgICogRGF0YSBwcm92aWRlZCBmb3IgbGVnZW5kXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICovXG4gIC8vIFBFTkRJTkdcbiAgbGVnZW5kRGF0YVByb3ZpZGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBBY2Nlc3MgcGF0aCBvZiBjb2xvciBmb3IgdmlzdWFsXG4gICAqL1xuICB2aXN1YWxDb2xvckFjY2Vzc1BhdGg6ICdpdGVtU3R5bGUuY29sb3InLFxuXG4gIC8qKlxuICAgKiBTdXBwb3J0IG1lcmdlIGxheW91dCBwYXJhbXMuXG4gICAqIE9ubHkgc3VwcG9ydCAnYm94JyBub3cgKGxlZnQvcmlnaHQvdG9wL2JvdHRvbS93aWR0aC9oZWlnaHQpLlxuICAgKiBAdHlwZSB7c3RyaW5nfE9iamVjdH0gT2JqZWN0IGNhbiBiZSB7aWdub3JlU2l6ZTogdHJ1ZX1cbiAgICogQHJlYWRPbmx5XG4gICAqL1xuICBsYXlvdXRNb2RlOiBudWxsLFxuICBpbml0OiBmdW5jdGlvbiAob3B0aW9uLCBwYXJlbnRNb2RlbCwgZWNNb2RlbCwgZXh0cmFPcHQpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIHRoaXMuc2VyaWVzSW5kZXggPSB0aGlzLmNvbXBvbmVudEluZGV4O1xuICAgIHRoaXMuZGF0YVRhc2sgPSBjcmVhdGVUYXNrKHtcbiAgICAgIGNvdW50OiBkYXRhVGFza0NvdW50LFxuICAgICAgcmVzZXQ6IGRhdGFUYXNrUmVzZXRcbiAgICB9KTtcbiAgICB0aGlzLmRhdGFUYXNrLmNvbnRleHQgPSB7XG4gICAgICBtb2RlbDogdGhpc1xuICAgIH07XG4gICAgdGhpcy5tZXJnZURlZmF1bHRBbmRUaGVtZShvcHRpb24sIGVjTW9kZWwpO1xuICAgIHByZXBhcmVTb3VyY2UodGhpcyk7XG4gICAgdmFyIGRhdGEgPSB0aGlzLmdldEluaXRpYWxEYXRhKG9wdGlvbiwgZWNNb2RlbCk7XG4gICAgd3JhcERhdGEoZGF0YSwgdGhpcyk7XG4gICAgdGhpcy5kYXRhVGFzay5jb250ZXh0LmRhdGEgPSBkYXRhO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge21vZHVsZTplY2hhcnRzL2RhdGEvTGlzdHxtb2R1bGU6ZWNoYXJ0cy9kYXRhL1RyZWV8bW9kdWxlOmVjaGFydHMvZGF0YS9HcmFwaH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGlubmVyKHRoaXMpLmRhdGFCZWZvcmVQcm9jZXNzZWQgPSBkYXRhOyAvLyBJZiB3ZSByZXZlcnNlIHRoZSBvcmRlciAobWFrZSBkYXRhIGZpcnN0bHksIGFuZCB0aGVuIG1ha2VcbiAgICAvLyBkYXRhQmVmb3JlUHJvY2Vzc2VkIGJ5IGNsb25lU2hhbGxvdyksIGNsb25lU2hhbGxvdyB3aWxsXG4gICAgLy8gY2F1c2UgZGF0YS5ncmFwaC5kYXRhICE9PSBkYXRhIHdoZW4gdXNpbmdcbiAgICAvLyBtb2R1bGU6ZWNoYXJ0cy9kYXRhL0dyYXBoIG9yIG1vZHVsZTplY2hhcnRzL2RhdGEvVHJlZS5cbiAgICAvLyBTZWUgbW9kdWxlOmVjaGFydHMvZGF0YS9oZWxwZXIvbGlua0xpc3RcbiAgICAvLyBUaGVvcmV0aWNhbGx5LCBpdCBpcyB1bnJlYXNvbmFibGUgdG8gY2FsbCBgc2VyaWVzTW9kZWwuZ2V0RGF0YSgpYCBpbiB0aGUgbW9kZWxcbiAgICAvLyBpbml0IG9yIG1lcmdlIHN0YWdlLCBiZWNhdXNlIHRoZSBkYXRhIGNhbiBiZSByZXN0b3JlZC4gU28gd2UgZG8gbm90IGByZXN0b3JlRGF0YWBcbiAgICAvLyBhbmQgYHNldERhdGFgIGhlcmUsIHdoaWNoIGZvcmJpZHMgY2FsbGluZyBgc2VyaWVzTW9kZWwuZ2V0RGF0YSgpYCBpbiB0aGlzIHN0YWdlLlxuICAgIC8vIENhbGwgYHNlcmllc01vZGVsLmdldFJhd0RhdGEoKWAgaW5zdGVhZC5cbiAgICAvLyB0aGlzLnJlc3RvcmVEYXRhKCk7XG5cbiAgICBhdXRvU2VyaWVzTmFtZSh0aGlzKTtcbiAgfSxcblxuICAvKipcbiAgICogVXRpbCBmb3IgbWVyZ2UgZGVmYXVsdCBhbmQgdGhlbWUgdG8gb3B0aW9uXG4gICAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uXG4gICAqIEBwYXJhbSAge21vZHVsZTplY2hhcnRzL21vZGVsL0dsb2JhbH0gZWNNb2RlbFxuICAgKi9cbiAgbWVyZ2VEZWZhdWx0QW5kVGhlbWU6IGZ1bmN0aW9uIChvcHRpb24sIGVjTW9kZWwpIHtcbiAgICB2YXIgbGF5b3V0TW9kZSA9IHRoaXMubGF5b3V0TW9kZTtcbiAgICB2YXIgaW5wdXRQb3NpdGlvblBhcmFtcyA9IGxheW91dE1vZGUgPyBnZXRMYXlvdXRQYXJhbXMob3B0aW9uKSA6IHt9OyAvLyBCYWNrd2FyZCBjb21wYXQ6IHVzaW5nIHN1YlR5cGUgb24gdGhlbWUuXG4gICAgLy8gQnV0IGlmIG5hbWUgZHVwbGljYXRlIGJldHdlZW4gc2VyaWVzIHN1YlR5cGVcbiAgICAvLyAoZm9yIGV4YW1wbGU6IHBhcmFsbGVsKSBhZGQgY29tcG9uZW50IG1haW5UeXBlLFxuICAgIC8vIGFkZCBzdWZmaXggJ1NlcmllcycuXG5cbiAgICB2YXIgdGhlbWVTdWJUeXBlID0gdGhpcy5zdWJUeXBlO1xuXG4gICAgaWYgKENvbXBvbmVudE1vZGVsLmhhc0NsYXNzKHRoZW1lU3ViVHlwZSkpIHtcbiAgICAgIHRoZW1lU3ViVHlwZSArPSAnU2VyaWVzJztcbiAgICB9XG5cbiAgICB6clV0aWwubWVyZ2Uob3B0aW9uLCBlY01vZGVsLmdldFRoZW1lKCkuZ2V0KHRoaXMuc3ViVHlwZSkpO1xuICAgIHpyVXRpbC5tZXJnZShvcHRpb24sIHRoaXMuZ2V0RGVmYXVsdE9wdGlvbigpKTsgLy8gRGVmYXVsdCBsYWJlbCBlbXBoYXNpcyBgc2hvd2BcblxuICAgIG1vZGVsVXRpbC5kZWZhdWx0RW1waGFzaXMob3B0aW9uLCAnbGFiZWwnLCBbJ3Nob3cnXSk7XG4gICAgdGhpcy5maWxsRGF0YVRleHRTdHlsZShvcHRpb24uZGF0YSk7XG5cbiAgICBpZiAobGF5b3V0TW9kZSkge1xuICAgICAgbWVyZ2VMYXlvdXRQYXJhbShvcHRpb24sIGlucHV0UG9zaXRpb25QYXJhbXMsIGxheW91dE1vZGUpO1xuICAgIH1cbiAgfSxcbiAgbWVyZ2VPcHRpb246IGZ1bmN0aW9uIChuZXdTZXJpZXNPcHRpb24sIGVjTW9kZWwpIHtcbiAgICAvLyB0aGlzLnNldHRpbmdUYXNrLmRpcnR5KCk7XG4gICAgbmV3U2VyaWVzT3B0aW9uID0genJVdGlsLm1lcmdlKHRoaXMub3B0aW9uLCBuZXdTZXJpZXNPcHRpb24sIHRydWUpO1xuICAgIHRoaXMuZmlsbERhdGFUZXh0U3R5bGUobmV3U2VyaWVzT3B0aW9uLmRhdGEpO1xuICAgIHZhciBsYXlvdXRNb2RlID0gdGhpcy5sYXlvdXRNb2RlO1xuXG4gICAgaWYgKGxheW91dE1vZGUpIHtcbiAgICAgIG1lcmdlTGF5b3V0UGFyYW0odGhpcy5vcHRpb24sIG5ld1Nlcmllc09wdGlvbiwgbGF5b3V0TW9kZSk7XG4gICAgfVxuXG4gICAgcHJlcGFyZVNvdXJjZSh0aGlzKTtcbiAgICB2YXIgZGF0YSA9IHRoaXMuZ2V0SW5pdGlhbERhdGEobmV3U2VyaWVzT3B0aW9uLCBlY01vZGVsKTtcbiAgICB3cmFwRGF0YShkYXRhLCB0aGlzKTtcbiAgICB0aGlzLmRhdGFUYXNrLmRpcnR5KCk7XG4gICAgdGhpcy5kYXRhVGFzay5jb250ZXh0LmRhdGEgPSBkYXRhO1xuICAgIGlubmVyKHRoaXMpLmRhdGFCZWZvcmVQcm9jZXNzZWQgPSBkYXRhO1xuICAgIGF1dG9TZXJpZXNOYW1lKHRoaXMpO1xuICB9LFxuICBmaWxsRGF0YVRleHRTdHlsZTogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAvLyBEZWZhdWx0IGRhdGEgbGFiZWwgZW1waGFzaXMgYHNob3dgXG4gICAgLy8gRklYTUUgVHJlZSBzdHJ1Y3R1cmUgZGF0YSA/XG4gICAgLy8gRklYTUUgUGVyZm9ybWFuY2UgP1xuICAgIGlmIChkYXRhICYmICF6clV0aWwuaXNUeXBlZEFycmF5KGRhdGEpKSB7XG4gICAgICB2YXIgcHJvcHMgPSBbJ3Nob3cnXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChkYXRhW2ldICYmIGRhdGFbaV0ubGFiZWwpIHtcbiAgICAgICAgICBtb2RlbFV0aWwuZGVmYXVsdEVtcGhhc2lzKGRhdGFbaV0sICdsYWJlbCcsIHByb3BzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogSW5pdCBhIGRhdGEgc3RydWN0dXJlIGZyb20gZGF0YSByZWxhdGVkIG9wdGlvbiBpbiBzZXJpZXNcbiAgICogTXVzdCBiZSBvdmVyd3JpdHRlblxuICAgKi9cbiAgZ2V0SW5pdGlhbERhdGE6IGZ1bmN0aW9uICgpIHt9LFxuXG4gIC8qKlxuICAgKiBBcHBlbmQgZGF0YSB0byBsaXN0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHBhcmFtIHtBcnJheXxUeXBlZEFycmF5fSBwYXJhbXMuZGF0YVxuICAgKi9cbiAgYXBwZW5kRGF0YTogZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIC8vIEZJWE1FID8/P1xuICAgIC8vICgxKSBJZiBkYXRhIGZyb20gZGF0YXNldCwgZm9yYmlkZGVuIGFwcGVuZC5cbiAgICAvLyAoMikgc3VwcG9ydCBhcHBlbmQgZGF0YSBvZiBkYXRhc2V0LlxuICAgIHZhciBkYXRhID0gdGhpcy5nZXRSYXdEYXRhKCk7XG4gICAgZGF0YS5hcHBlbmREYXRhKHBhcmFtcy5kYXRhKTtcbiAgfSxcblxuICAvKipcbiAgICogQ29uc2lkZXIgc29tZSBtZXRob2QgbGlrZSBgZmlsdGVyYCwgYG1hcGAgbmVlZCBtYWtlIG5ldyBkYXRhLFxuICAgKiBXZSBzaG91bGQgbWFrZSBzdXJlIHRoYXQgYHNlcmllc01vZGVsLmdldERhdGEoKWAgZ2V0IGNvcnJlY3RcbiAgICogZGF0YSBpbiB0aGUgc3RyZWFtIHByb2NlZHVyZS4gU28gd2UgZmV0Y2ggZGF0YSBmcm9tIHVwc3RyZWFtXG4gICAqIGVhY2ggdGltZSBgdGFzay5wZXJmb3JtYCBjYWxsZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZGF0YVR5cGVdXG4gICAqIEByZXR1cm4ge21vZHVsZTplY2hhcnRzL2RhdGEvTGlzdH1cbiAgICovXG4gIGdldERhdGE6IGZ1bmN0aW9uIChkYXRhVHlwZSkge1xuICAgIHZhciB0YXNrID0gZ2V0Q3VycmVudFRhc2sodGhpcyk7XG5cbiAgICBpZiAodGFzaykge1xuICAgICAgdmFyIGRhdGEgPSB0YXNrLmNvbnRleHQuZGF0YTtcbiAgICAgIHJldHVybiBkYXRhVHlwZSA9PSBudWxsID8gZGF0YSA6IGRhdGEuZ2V0TGlua2VkRGF0YShkYXRhVHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdoZW4gc2VyaWVzIGlzIG5vdCBhbGl2ZSAodGhhdCBtYXkgaGFwcGVuIHdoZW4gY2xpY2sgdG9vbGJveFxuICAgICAgLy8gcmVzdG9yZSBvciBzZXRPcHRpb24gd2l0aCBub3QgbWVyZ2UgbW9kZSksIHNlcmllcyBkYXRhIG1heVxuICAgICAgLy8gYmUgc3RpbGwgbmVlZCB0byBqdWRnZSBhbmltYXRpb24gb3Igc29tZXRoaW5nIHdoZW4gZ3JhcGhpY1xuICAgICAgLy8gZWxlbWVudHMgd2FudCB0byBrbm93IHdoZXRoZXIgZmFkZSBvdXQuXG4gICAgICByZXR1cm4gaW5uZXIodGhpcykuZGF0YTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvZGF0YS9MaXN0fSBkYXRhXG4gICAqL1xuICBzZXREYXRhOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciB0YXNrID0gZ2V0Q3VycmVudFRhc2sodGhpcyk7XG5cbiAgICBpZiAodGFzaykge1xuICAgICAgdmFyIGNvbnRleHQgPSB0YXNrLmNvbnRleHQ7IC8vIENvbnNpZGVyIGNhc2U6IGZpbHRlciwgZGF0YSBzYW1wbGUuXG5cbiAgICAgIGlmIChjb250ZXh0LmRhdGEgIT09IGRhdGEgJiYgdGFzay5tb2RpZnlPdXRwdXRFbmQpIHtcbiAgICAgICAgdGFzay5zZXRPdXRwdXRFbmQoZGF0YS5jb3VudCgpKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5vdXRwdXREYXRhID0gZGF0YTsgLy8gQ2F1dGlvbjogc2V0RGF0YSBzaG91bGQgdXBkYXRlIGNvbnRleHQuZGF0YSxcbiAgICAgIC8vIEJlY2F1c2UgZ2V0RGF0YSBtYXkgYmUgY2FsbGVkIG11bHRpcGx5IGluIGFcbiAgICAgIC8vIHNpbmdsZSBzdGFnZSBhbmQgZXhwZWN0IHRvIGdldCB0aGUgZGF0YSBqdXN0XG4gICAgICAvLyBzZXQuIChGb3IgZXhhbXBsZSwgQXhpc1Byb3h5LCB4IHkgYm90aCBjYWxsXG4gICAgICAvLyBnZXREYXRhIGFuZCBzZXREYXRlIHNlcXVlbnRpYWxseSkuXG4gICAgICAvLyBTbyB0aGUgY29udGV4dC5kYXRhIHNob3VsZCBiZSBmZXRjaGVkIGZyb21cbiAgICAgIC8vIHVwc3RyZWFtIGVhY2ggdGltZSB3aGVuIGEgc3RhZ2Ugc3RhcnRzIHRvIGJlXG4gICAgICAvLyBwZXJmb3JtZWQuXG5cbiAgICAgIGlmICh0YXNrICE9PSB0aGlzLmRhdGFUYXNrKSB7XG4gICAgICAgIGNvbnRleHQuZGF0YSA9IGRhdGE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW5uZXIodGhpcykuZGF0YSA9IGRhdGE7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBzZWUge21vZHVsZTplY2hhcnRzL2RhdGEvaGVscGVyL3NvdXJjZUhlbHBlciNnZXRTb3VyY2V9XG4gICAqIEByZXR1cm4ge21vZHVsZTplY2hhcnRzL2RhdGEvU291cmNlfSBzb3VyY2VcbiAgICovXG4gIGdldFNvdXJjZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRTb3VyY2UodGhpcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCBkYXRhIGJlZm9yZSBwcm9jZXNzZWRcbiAgICogQHJldHVybiB7bW9kdWxlOmVjaGFydHMvZGF0YS9MaXN0fVxuICAgKi9cbiAgZ2V0UmF3RGF0YTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpbm5lcih0aGlzKS5kYXRhQmVmb3JlUHJvY2Vzc2VkO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgYmFzZSBheGlzIGlmIGhhcyBjb29yZGluYXRlIHN5c3RlbSBhbmQgaGFzIGF4aXMuXG4gICAqIEJ5IGRlZmF1bHQgdXNlIGNvb3JkU3lzLmdldEJhc2VBeGlzKCk7XG4gICAqIENhbiBiZSBvdmVycmlkZWQgZm9yIHNvbWUgY2hhcnQuXG4gICAqIEByZXR1cm4ge3R5cGV9IGRlc2NyaXB0aW9uXG4gICAqL1xuICBnZXRCYXNlQXhpczogZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb29yZFN5cyA9IHRoaXMuY29vcmRpbmF0ZVN5c3RlbTtcbiAgICByZXR1cm4gY29vcmRTeXMgJiYgY29vcmRTeXMuZ2V0QmFzZUF4aXMgJiYgY29vcmRTeXMuZ2V0QmFzZUF4aXMoKTtcbiAgfSxcbiAgLy8gRklYTUVcblxuICAvKipcbiAgICogRGVmYXVsdCB0b29sdGlwIGZvcm1hdHRlclxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gZGF0YUluZGV4XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW211bHRpcGxlU2VyaWVzPWZhbHNlXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW2RhdGFUeXBlXVxuICAgKi9cbiAgZm9ybWF0VG9vbHRpcDogZnVuY3Rpb24gKGRhdGFJbmRleCwgbXVsdGlwbGVTZXJpZXMsIGRhdGFUeXBlKSB7XG4gICAgZnVuY3Rpb24gZm9ybWF0QXJyYXlWYWx1ZSh2YWx1ZSkge1xuICAgICAgLy8gPz8/IFRPRE8gcmVmYWN0b3IgdGhlc2UgbG9naWMuXG4gICAgICAvLyBjaGVjazogY2F0ZWdvcnktbm8tZW5jb2RlLWhhcy1heGlzLWRhdGEgaW4gZGF0YXNldC5odG1sXG4gICAgICB2YXIgdmVydGlhbGx5ID0genJVdGlsLnJlZHVjZSh2YWx1ZSwgZnVuY3Rpb24gKHZlcnRpYWxseSwgdmFsLCBpZHgpIHtcbiAgICAgICAgdmFyIGRpbUl0ZW0gPSBkYXRhLmdldERpbWVuc2lvbkluZm8oaWR4KTtcbiAgICAgICAgcmV0dXJuIHZlcnRpYWxseSB8PSBkaW1JdGVtICYmIGRpbUl0ZW0udG9vbHRpcCAhPT0gZmFsc2UgJiYgZGltSXRlbS5kaXNwbGF5TmFtZSAhPSBudWxsO1xuICAgICAgfSwgMCk7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICB0b29sdGlwRGltcy5sZW5ndGggPyB6clV0aWwuZWFjaCh0b29sdGlwRGltcywgZnVuY3Rpb24gKGRpbSkge1xuICAgICAgICBzZXRFYWNoSXRlbShyZXRyaWV2ZVJhd1ZhbHVlKGRhdGEsIGRhdGFJbmRleCwgZGltKSwgZGltKTtcbiAgICAgIH0pIC8vIEJ5IGRlZmF1bHQsIGFsbCBkaW1zIGlzIHVzZWQgb24gdG9vbHRpcC5cbiAgICAgIDogenJVdGlsLmVhY2godmFsdWUsIHNldEVhY2hJdGVtKTtcblxuICAgICAgZnVuY3Rpb24gc2V0RWFjaEl0ZW0odmFsLCBkaW0pIHtcbiAgICAgICAgdmFyIGRpbUluZm8gPSBkYXRhLmdldERpbWVuc2lvbkluZm8oZGltKTsgLy8gSWYgYGRpbUluZm8udG9vbHRpcGAgaXMgbm90IHNldCwgc2hvdyB0b29sdGlwLlxuXG4gICAgICAgIGlmICghZGltSW5mbyB8fCBkaW1JbmZvLm90aGVyRGltcy50b29sdGlwID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaW1UeXBlID0gZGltSW5mby50eXBlO1xuICAgICAgICB2YXIgZGltSGVhZCA9IGdldFRvb2x0aXBNYXJrZXIoe1xuICAgICAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgICAgICB0eXBlOiAnc3ViSXRlbSdcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciB2YWxTdHIgPSAodmVydGlhbGx5ID8gZGltSGVhZCArIGVuY29kZUhUTUwoZGltSW5mby5kaXNwbGF5TmFtZSB8fCAnLScpICsgJzogJyA6ICcnKSArIC8vIEZJWE1FIHNob3VsZCBub3QgZm9ybWF0IHRpbWUgZm9yIHJhdyBkYXRhP1xuICAgICAgICBlbmNvZGVIVE1MKGRpbVR5cGUgPT09ICdvcmRpbmFsJyA/IHZhbCArICcnIDogZGltVHlwZSA9PT0gJ3RpbWUnID8gbXVsdGlwbGVTZXJpZXMgPyAnJyA6IGZvcm1hdFRpbWUoJ3l5eXkvTU0vZGQgaGg6bW06c3MnLCB2YWwpIDogYWRkQ29tbWFzKHZhbCkpO1xuICAgICAgICB2YWxTdHIgJiYgcmVzdWx0LnB1c2godmFsU3RyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICh2ZXJ0aWFsbHkgPyAnPGJyLz4nIDogJycpICsgcmVzdWx0LmpvaW4odmVydGlhbGx5ID8gJzxici8+JyA6ICcsICcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdFNpbmdsZVZhbHVlKHZhbCkge1xuICAgICAgcmV0dXJuIGVuY29kZUhUTUwoYWRkQ29tbWFzKHZhbCkpO1xuICAgIH1cblxuICAgIHZhciBkYXRhID0gdGhpcy5nZXREYXRhKCk7XG4gICAgdmFyIHRvb2x0aXBEaW1zID0gZGF0YS5tYXBEaW1lbnNpb24oJ2RlZmF1bHRlZFRvb2x0aXAnLCB0cnVlKTtcbiAgICB2YXIgdG9vbHRpcERpbUxlbiA9IHRvb2x0aXBEaW1zLmxlbmd0aDtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLmdldFJhd1ZhbHVlKGRhdGFJbmRleCk7XG4gICAgdmFyIGlzVmFsdWVBcnIgPSB6clV0aWwuaXNBcnJheSh2YWx1ZSk7XG4gICAgdmFyIGNvbG9yID0gZGF0YS5nZXRJdGVtVmlzdWFsKGRhdGFJbmRleCwgJ2NvbG9yJyk7XG5cbiAgICBpZiAoenJVdGlsLmlzT2JqZWN0KGNvbG9yKSAmJiBjb2xvci5jb2xvclN0b3BzKSB7XG4gICAgICBjb2xvciA9IChjb2xvci5jb2xvclN0b3BzWzBdIHx8IHt9KS5jb2xvcjtcbiAgICB9XG5cbiAgICBjb2xvciA9IGNvbG9yIHx8ICd0cmFuc3BhcmVudCc7IC8vIENvbXBsaWNhdGVkIHJ1bGUgZm9yIHByZXR0eSB0b29sdGlwLlxuXG4gICAgdmFyIGZvcm1hdHRlZFZhbHVlID0gdG9vbHRpcERpbUxlbiA+IDEgfHwgaXNWYWx1ZUFyciAmJiAhdG9vbHRpcERpbUxlbiA/IGZvcm1hdEFycmF5VmFsdWUodmFsdWUpIDogdG9vbHRpcERpbUxlbiA/IGZvcm1hdFNpbmdsZVZhbHVlKHJldHJpZXZlUmF3VmFsdWUoZGF0YSwgZGF0YUluZGV4LCB0b29sdGlwRGltc1swXSkpIDogZm9ybWF0U2luZ2xlVmFsdWUoaXNWYWx1ZUFyciA/IHZhbHVlWzBdIDogdmFsdWUpO1xuICAgIHZhciBjb2xvckVsID0gZ2V0VG9vbHRpcE1hcmtlcihjb2xvcik7XG4gICAgdmFyIG5hbWUgPSBkYXRhLmdldE5hbWUoZGF0YUluZGV4KTtcbiAgICB2YXIgc2VyaWVzTmFtZSA9IHRoaXMubmFtZTtcblxuICAgIGlmICghbW9kZWxVdGlsLmlzTmFtZVNwZWNpZmllZCh0aGlzKSkge1xuICAgICAgc2VyaWVzTmFtZSA9ICcnO1xuICAgIH1cblxuICAgIHNlcmllc05hbWUgPSBzZXJpZXNOYW1lID8gZW5jb2RlSFRNTChzZXJpZXNOYW1lKSArICghbXVsdGlwbGVTZXJpZXMgPyAnPGJyLz4nIDogJzogJykgOiAnJztcbiAgICByZXR1cm4gIW11bHRpcGxlU2VyaWVzID8gc2VyaWVzTmFtZSArIGNvbG9yRWwgKyAobmFtZSA/IGVuY29kZUhUTUwobmFtZSkgKyAnOiAnICsgZm9ybWF0dGVkVmFsdWUgOiBmb3JtYXR0ZWRWYWx1ZSkgOiBjb2xvckVsICsgc2VyaWVzTmFtZSArIGZvcm1hdHRlZFZhbHVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNBbmltYXRpb25FbmFibGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVudi5ub2RlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGFuaW1hdGlvbkVuYWJsZWQgPSB0aGlzLmdldFNoYWxsb3coJ2FuaW1hdGlvbicpO1xuXG4gICAgaWYgKGFuaW1hdGlvbkVuYWJsZWQpIHtcbiAgICAgIGlmICh0aGlzLmdldERhdGEoKS5jb3VudCgpID4gdGhpcy5nZXRTaGFsbG93KCdhbmltYXRpb25UaHJlc2hvbGQnKSkge1xuICAgICAgICBhbmltYXRpb25FbmFibGVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFuaW1hdGlvbkVuYWJsZWQ7XG4gIH0sXG4gIHJlc3RvcmVEYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kYXRhVGFzay5kaXJ0eSgpO1xuICB9LFxuICBnZXRDb2xvckZyb21QYWxldHRlOiBmdW5jdGlvbiAobmFtZSwgc2NvcGUsIHJlcXVlc3RDb2xvck51bSkge1xuICAgIHZhciBlY01vZGVsID0gdGhpcy5lY01vZGVsOyAvLyBQRU5ESU5HXG5cbiAgICB2YXIgY29sb3IgPSBjb2xvclBhbGV0dGVNaXhpbi5nZXRDb2xvckZyb21QYWxldHRlLmNhbGwodGhpcywgbmFtZSwgc2NvcGUsIHJlcXVlc3RDb2xvck51bSk7XG5cbiAgICBpZiAoIWNvbG9yKSB7XG4gICAgICBjb2xvciA9IGVjTW9kZWwuZ2V0Q29sb3JGcm9tUGFsZXR0ZShuYW1lLCBzY29wZSwgcmVxdWVzdENvbG9yTnVtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29sb3I7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVzZSBgZGF0YS5tYXBEaW1lbnNpb24oY29vcmREaW0sIHRydWUpYCBpbnN0ZWFkLlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgY29vcmREaW1Ub0RhdGFEaW06IGZ1bmN0aW9uIChjb29yZERpbSkge1xuICAgIHJldHVybiB0aGlzLmdldFJhd0RhdGEoKS5tYXBEaW1lbnNpb24oY29vcmREaW0sIHRydWUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgcHJvZ3Jlc3NpdmUgcmVuZGVyaW5nIGNvdW50IGVhY2ggc3RlcFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRQcm9ncmVzc2l2ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldCgncHJvZ3Jlc3NpdmUnKTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IHByb2dyZXNzaXZlIHJlbmRlcmluZyBjb3VudCBlYWNoIHN0ZXBcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0UHJvZ3Jlc3NpdmVUaHJlc2hvbGQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ3Byb2dyZXNzaXZlVGhyZXNob2xkJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCBkYXRhIGluZGljZXMgZm9yIHNob3cgdG9vbHRpcCBjb250ZW50LiBTZWUgdG9vbHRpcC5cbiAgICogQGFic3RyYWN0XG4gICAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz58c3RyaW5nfSBkaW1cbiAgICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gdmFsdWVcbiAgICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9jb29yZC9zaW5nbGUvU2luZ2xlQXhpc30gYmFzZUF4aXNcbiAgICogQHJldHVybiB7T2JqZWN0fSB7ZGF0YUluZGljZXMsIG5lc3Rlc3RWYWx1ZX0uXG4gICAqL1xuICBnZXRBeGlzVG9vbHRpcERhdGE6IG51bGwsXG5cbiAgLyoqXG4gICAqIFNlZSB0b29sdGlwLlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHBhcmFtIHtudW1iZXJ9IGRhdGFJbmRleFxuICAgKiBAcmV0dXJuIHtBcnJheS48bnVtYmVyPn0gUG9pbnQgb2YgdG9vbHRpcC4gbnVsbC91bmRlZmluZWQgY2FuIGJlIHJldHVybmVkLlxuICAgKi9cbiAgZ2V0VG9vbHRpcFBvc2l0aW9uOiBudWxsLFxuXG4gIC8qKlxuICAgKiBAc2VlIHttb2R1bGU6ZWNoYXJ0cy9zdHJlYW0vU2NoZWR1bGVyfVxuICAgKi9cbiAgcGlwZVRhc2s6IG51bGwsXG5cbiAgLyoqXG4gICAqIENvbnZpbmllbnQgZm9yIG92ZXJyaWRlIGluIGV4dGVuZGVkIGNsYXNzLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICovXG4gIHByZXZlbnRJbmNyZW1lbnRhbDogbnVsbCxcblxuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAcmVhZE9ubHlcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHBpcGVsaW5lQ29udGV4dDogbnVsbFxufSk7XG56clV0aWwubWl4aW4oU2VyaWVzTW9kZWwsIGRhdGFGb3JtYXRNaXhpbik7XG56clV0aWwubWl4aW4oU2VyaWVzTW9kZWwsIGNvbG9yUGFsZXR0ZU1peGluKTtcbi8qKlxuICogTVVTVCBiZSBjYWxsZWQgYWZ0ZXIgYHByZXBhcmVTb3VyY2VgIGNhbGxlZFxuICogSGVyZSB3ZSBuZWVkIHRvIG1ha2UgYXV0byBzZXJpZXMsIGVzcGVjaWFsbHkgZm9yIGF1dG8gbGVnZW5kLiBCdXQgd2VcbiAqIGRvIG5vdCBtb2RpZnkgc2VyaWVzLm5hbWUgaW4gb3B0aW9uIHRvIGF2b2lkIHNpZGUgZWZmZWN0cy5cbiAqL1xuXG5mdW5jdGlvbiBhdXRvU2VyaWVzTmFtZShzZXJpZXNNb2RlbCkge1xuICAvLyBVc2VyIHNwZWNpZmllZCBuYW1lIGhhcyBoaWdoZXIgcHJpb3JpdHksIG90aGVyd2lzZSBpdCBtYXkgY2F1c2VcbiAgLy8gc2VyaWVzIGNhbiBub3QgYmUgcXVlcmllZCB1bmV4cGVjdGVkbHkuXG4gIHZhciBuYW1lID0gc2VyaWVzTW9kZWwubmFtZTtcblxuICBpZiAoIW1vZGVsVXRpbC5pc05hbWVTcGVjaWZpZWQoc2VyaWVzTW9kZWwpKSB7XG4gICAgc2VyaWVzTW9kZWwubmFtZSA9IGdldFNlcmllc0F1dG9OYW1lKHNlcmllc01vZGVsKSB8fCBuYW1lO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFNlcmllc0F1dG9OYW1lKHNlcmllc01vZGVsKSB7XG4gIHZhciBkYXRhID0gc2VyaWVzTW9kZWwuZ2V0UmF3RGF0YSgpO1xuICB2YXIgZGF0YURpbXMgPSBkYXRhLm1hcERpbWVuc2lvbignc2VyaWVzTmFtZScsIHRydWUpO1xuICB2YXIgbmFtZUFyciA9IFtdO1xuICB6clV0aWwuZWFjaChkYXRhRGltcywgZnVuY3Rpb24gKGRhdGFEaW0pIHtcbiAgICB2YXIgZGltSW5mbyA9IGRhdGEuZ2V0RGltZW5zaW9uSW5mbyhkYXRhRGltKTtcbiAgICBkaW1JbmZvLmRpc3BsYXlOYW1lICYmIG5hbWVBcnIucHVzaChkaW1JbmZvLmRpc3BsYXlOYW1lKTtcbiAgfSk7XG4gIHJldHVybiBuYW1lQXJyLmpvaW4oJyAnKTtcbn1cblxuZnVuY3Rpb24gZGF0YVRhc2tDb3VudChjb250ZXh0KSB7XG4gIHJldHVybiBjb250ZXh0Lm1vZGVsLmdldFJhd0RhdGEoKS5jb3VudCgpO1xufVxuXG5mdW5jdGlvbiBkYXRhVGFza1Jlc2V0KGNvbnRleHQpIHtcbiAgdmFyIHNlcmllc01vZGVsID0gY29udGV4dC5tb2RlbDtcbiAgc2VyaWVzTW9kZWwuc2V0RGF0YShzZXJpZXNNb2RlbC5nZXRSYXdEYXRhKCkuY2xvbmVTaGFsbG93KCkpO1xuICByZXR1cm4gZGF0YVRhc2tQcm9ncmVzcztcbn1cblxuZnVuY3Rpb24gZGF0YVRhc2tQcm9ncmVzcyhwYXJhbSwgY29udGV4dCkge1xuICAvLyBBdm9pZCByZXBlYWQgY2xvbmVTaGFsbG93IHdoZW4gZGF0YSBqdXN0IGNyZWF0ZWQgaW4gcmVzZXQuXG4gIGlmIChwYXJhbS5lbmQgPiBjb250ZXh0Lm91dHB1dERhdGEuY291bnQoKSkge1xuICAgIGNvbnRleHQubW9kZWwuZ2V0UmF3RGF0YSgpLmNsb25lU2hhbGxvdyhjb250ZXh0Lm91dHB1dERhdGEpO1xuICB9XG59IC8vIFRPRE8gcmVmYWN0b3JcblxuXG5mdW5jdGlvbiB3cmFwRGF0YShkYXRhLCBzZXJpZXNNb2RlbCkge1xuICB6clV0aWwuZWFjaChkYXRhLkNIQU5HQUJMRV9NRVRIT0RTLCBmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xuICAgIGRhdGEud3JhcE1ldGhvZChtZXRob2ROYW1lLCB6clV0aWwuY3Vycnkob25EYXRhU2VsZkNoYW5nZSwgc2VyaWVzTW9kZWwpKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uRGF0YVNlbGZDaGFuZ2Uoc2VyaWVzTW9kZWwpIHtcbiAgdmFyIHRhc2sgPSBnZXRDdXJyZW50VGFzayhzZXJpZXNNb2RlbCk7XG5cbiAgaWYgKHRhc2spIHtcbiAgICAvLyBDb25zaWRlciBjYXNlOiBmaWx0ZXIsIHNlbGVjdFJhbmdlXG4gICAgdGFzay5zZXRPdXRwdXRFbmQodGhpcy5jb3VudCgpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRDdXJyZW50VGFzayhzZXJpZXNNb2RlbCkge1xuICB2YXIgc2NoZWR1bGVyID0gKHNlcmllc01vZGVsLmVjTW9kZWwgfHwge30pLnNjaGVkdWxlcjtcbiAgdmFyIHBpcGVsaW5lID0gc2NoZWR1bGVyICYmIHNjaGVkdWxlci5nZXRQaXBlbGluZShzZXJpZXNNb2RlbC51aWQpO1xuXG4gIGlmIChwaXBlbGluZSkge1xuICAgIC8vIFdoZW4gcGlwbGluZSBmaW5pc2hlZCwgdGhlIGN1cnJyZW50VGFzayBrZWVwIHRoZSBsYXN0XG4gICAgLy8gdGFzayAocmVuZGVyVGFzaykuXG4gICAgdmFyIHRhc2sgPSBwaXBlbGluZS5jdXJyZW50VGFzaztcblxuICAgIGlmICh0YXNrKSB7XG4gICAgICB2YXIgYWdlbnRTdHViTWFwID0gdGFzay5hZ2VudFN0dWJNYXA7XG5cbiAgICAgIGlmIChhZ2VudFN0dWJNYXApIHtcbiAgICAgICAgdGFzayA9IGFnZW50U3R1Yk1hcC5nZXQoc2VyaWVzTW9kZWwudWlkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFzaztcbiAgfVxufVxuXG52YXIgX2RlZmF1bHQgPSBTZXJpZXNNb2RlbDtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwiLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xudmFyIHBsYXRmb3JtID0gJyc7IC8vIE5hdmlnYXRvciBub3QgZXhpc3RzIGluIG5vZGVcblxuaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnKSB7XG4gIHBsYXRmb3JtID0gbmF2aWdhdG9yLnBsYXRmb3JtIHx8ICcnO1xufVxuXG52YXIgX2RlZmF1bHQgPSB7XG4gIC8vIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxuICAvLyBodHRwczovL2RyaWJiYmxlLmNvbS9zaG90cy8xMDY1OTYwLUluZm9ncmFwaGljLVBpZS1jaGFydC12aXN1YWxpemF0aW9uXG4gIC8vIGNvbG9yOiBbJyM1NzkzZjMnLCAnI2QxNGE2MScsICcjZmQ5YzM1JywgJyM2NzViYmEnLCAnI2ZlYzQyYycsICcjZGQ0NDQ0JywgJyNkNGRmNWEnLCAnI2NkNDg3MCddLFxuICAvLyBMaWdodCBjb2xvcnM6XG4gIC8vIGNvbG9yOiBbJyNiY2QzYmInLCAnI2U4OGY3MCcsICcjZWRjMWE1JywgJyM5ZGM1YzgnLCAnI2UxZThjOCcsICcjN2I3YzY4JywgJyNlNWI1YjUnLCAnI2YwYjQ4OScsICcjOTI4ZWE4JywgJyNiZGEyOWEnXSxcbiAgLy8gY29sb3I6IFsnI2NjNTY2NCcsICcjOWJkNmVjJywgJyNlYTk0NmUnLCAnIzhhY2FhYScsICcjZjFlYzY0JywgJyNlZTg2ODYnLCAnI2E0OGRjMScsICcjNWRhNmJjJywgJyNiOWRjYWUnXSxcbiAgLy8gRGFyayBjb2xvcnM6XG4gIGNvbG9yOiBbJyNjMjM1MzEnLCAnIzJmNDU1NCcsICcjNjFhMGE4JywgJyNkNDgyNjUnLCAnIzkxYzdhZScsICcjNzQ5ZjgzJywgJyNjYTg2MjInLCAnI2JkYTI5YScsICcjNmU3MDc0JywgJyM1NDY1NzAnLCAnI2M0Y2NkMyddLFxuICBncmFkaWVudENvbG9yOiBbJyNmNmVmYTYnLCAnI2Q4ODI3MycsICcjYmY0NDRjJ10sXG4gIC8vIElmIHhBeGlzIGFuZCB5QXhpcyBkZWNsYXJlZCwgZ3JpZCBpcyBjcmVhdGVkIGJ5IGRlZmF1bHQuXG4gIC8vIGdyaWQ6IHt9LFxuICB0ZXh0U3R5bGU6IHtcbiAgICAvLyBjb2xvcjogJyMwMDAnLFxuICAgIC8vIGRlY29yYXRpb246ICdub25lJyxcbiAgICAvLyBQRU5ESU5HXG4gICAgZm9udEZhbWlseTogcGxhdGZvcm0ubWF0Y2goL15XaW4vKSA/ICdNaWNyb3NvZnQgWWFIZWknIDogJ3NhbnMtc2VyaWYnLFxuICAgIC8vIGZvbnRGYW1pbHk6ICdBcmlhbCwgVmVyZGFuYSwgc2Fucy1zZXJpZicsXG4gICAgZm9udFNpemU6IDEyLFxuICAgIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gICAgZm9udFdlaWdodDogJ25vcm1hbCdcbiAgfSxcbiAgLy8gaHR0cDovL2Jsb2dzLmFkb2JlLmNvbS93ZWJwbGF0Zm9ybS8yMDE0LzAyLzI0L3VzaW5nLWJsZW5kLW1vZGVzLWluLWh0bWwtY2FudmFzL1xuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL2dsb2JhbENvbXBvc2l0ZU9wZXJhdGlvblxuICAvLyBEZWZhdWx0IGlzIHNvdXJjZS1vdmVyXG4gIGJsZW5kTW9kZTogbnVsbCxcbiAgYW5pbWF0aW9uOiAnYXV0bycsXG4gIGFuaW1hdGlvbkR1cmF0aW9uOiAxMDAwLFxuICBhbmltYXRpb25EdXJhdGlvblVwZGF0ZTogMzAwLFxuICBhbmltYXRpb25FYXNpbmc6ICdleHBvbmVudGlhbE91dCcsXG4gIGFuaW1hdGlvbkVhc2luZ1VwZGF0ZTogJ2N1YmljT3V0JyxcbiAgYW5pbWF0aW9uVGhyZXNob2xkOiAyMDAwLFxuICAvLyBDb25maWd1cmF0aW9uIGZvciBwcm9ncmVzc2l2ZS9pbmNyZW1lbnRhbCByZW5kZXJpbmdcbiAgcHJvZ3Jlc3NpdmVUaHJlc2hvbGQ6IDMwMDAsXG4gIHByb2dyZXNzaXZlOiA0MDAsXG4gIC8vIFRocmVzaG9sZCBvZiBpZiB1c2Ugc2luZ2xlIGhvdmVyIGxheWVyIHRvIG9wdGltaXplLlxuICAvLyBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IGBob3ZlckxheWVyVGhyZXNob2xkYCBpcyBlcXVpdmFsZW50IHRvIG9yIGxlc3MgdGhhblxuICAvLyBgcHJvZ3Jlc3NpdmVUaHJlc2hvbGRgLCBvdGhlcndpc2UgaG92ZXIgd2lsbCBjYXVzZSByZXN0YXJ0IG9mIHByb2dyZXNzaXZlLFxuICAvLyB3aGljaCBpcyB1bmV4cGVjdGVkLlxuICAvLyBzZWUgZXhhbXBsZSA8ZWNoYXJ0cy90ZXN0L2hlYXRtYXAtbGFyZ2UuaHRtbD4uXG4gIGhvdmVyTGF5ZXJUaHJlc2hvbGQ6IDMwMDAsXG4gIC8vIFNlZTogbW9kdWxlOmVjaGFydHMvc2NhbGUvVGltZVxuICB1c2VVVEM6IGZhbHNlXG59O1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgbWFrZVN0eWxlTWFwcGVyID0gcmVxdWlyZShcIi4vbWFrZVN0eWxlTWFwcGVyXCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgZ2V0QXJlYVN0eWxlID0gbWFrZVN0eWxlTWFwcGVyKFtbJ2ZpbGwnLCAnY29sb3InXSwgWydzaGFkb3dCbHVyJ10sIFsnc2hhZG93T2Zmc2V0WCddLCBbJ3NoYWRvd09mZnNldFknXSwgWydvcGFjaXR5J10sIFsnc2hhZG93Q29sb3InXV0pO1xudmFyIF9kZWZhdWx0ID0ge1xuICBnZXRBcmVhU3R5bGU6IGZ1bmN0aW9uIChleGNsdWRlcywgaW5jbHVkZXMpIHtcbiAgICByZXR1cm4gZ2V0QXJlYVN0eWxlKHRoaXMsIGV4Y2x1ZGVzLCBpbmNsdWRlcyk7XG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsIi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbnZhciBfZGVmYXVsdCA9IHtcbiAgZ2V0Qm94TGF5b3V0UGFyYW1zOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IHRoaXMuZ2V0KCdsZWZ0JyksXG4gICAgICB0b3A6IHRoaXMuZ2V0KCd0b3AnKSxcbiAgICAgIHJpZ2h0OiB0aGlzLmdldCgncmlnaHQnKSxcbiAgICAgIGJvdHRvbTogdGhpcy5nZXQoJ2JvdHRvbScpLFxuICAgICAgd2lkdGg6IHRoaXMuZ2V0KCd3aWR0aCcpLFxuICAgICAgaGVpZ2h0OiB0aGlzLmdldCgnaGVpZ2h0JylcbiAgICB9O1xuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgX21vZGVsID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvbW9kZWxcIik7XG5cbnZhciBtYWtlSW5uZXIgPSBfbW9kZWwubWFrZUlubmVyO1xudmFyIG5vcm1hbGl6ZVRvQXJyYXkgPSBfbW9kZWwubm9ybWFsaXplVG9BcnJheTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xudmFyIGlubmVyID0gbWFrZUlubmVyKCk7XG5cbmZ1bmN0aW9uIGdldE5lYXJlc3RDb2xvclBhbGV0dGUoY29sb3JzLCByZXF1ZXN0Q29sb3JOdW0pIHtcbiAgdmFyIHBhbGV0dGVOdW0gPSBjb2xvcnMubGVuZ3RoOyAvLyBUT0RPIGNvbG9ycyBtdXN0IGJlIGluIG9yZGVyXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWxldHRlTnVtOyBpKyspIHtcbiAgICBpZiAoY29sb3JzW2ldLmxlbmd0aCA+IHJlcXVlc3RDb2xvck51bSkge1xuICAgICAgcmV0dXJuIGNvbG9yc1tpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29sb3JzW3BhbGV0dGVOdW0gLSAxXTtcbn1cblxudmFyIF9kZWZhdWx0ID0ge1xuICBjbGVhckNvbG9yUGFsZXR0ZTogZnVuY3Rpb24gKCkge1xuICAgIGlubmVyKHRoaXMpLmNvbG9ySWR4ID0gMDtcbiAgICBpbm5lcih0aGlzKS5jb2xvck5hbWVNYXAgPSB7fTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTVVTVCBOT1QgYmUgbnVsbC91bmRlZmluZWQuIE90aGVyd2lzZSBjYWxsIHRoaXMgZnVuY3Rpb25cbiAgICogICAgICAgICAgICAgICAgIHR3aXNlIHdpdGggdGhlIHNhbWUgcGFyYW1ldGVycyB3aWxsIGdldCBkaWZmZXJlbnQgcmVzdWx0LlxuICAgKiBAcGFyYW0ge09iamVjdH0gW3Njb3BlPXRoaXNdXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdENvbG9yTnVtXVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IGNvbG9yIHN0cmluZy5cbiAgICovXG4gIGdldENvbG9yRnJvbVBhbGV0dGU6IGZ1bmN0aW9uIChuYW1lLCBzY29wZSwgcmVxdWVzdENvbG9yTnVtKSB7XG4gICAgc2NvcGUgPSBzY29wZSB8fCB0aGlzO1xuICAgIHZhciBzY29wZUZpZWxkcyA9IGlubmVyKHNjb3BlKTtcbiAgICB2YXIgY29sb3JJZHggPSBzY29wZUZpZWxkcy5jb2xvcklkeCB8fCAwO1xuICAgIHZhciBjb2xvck5hbWVNYXAgPSBzY29wZUZpZWxkcy5jb2xvck5hbWVNYXAgPSBzY29wZUZpZWxkcy5jb2xvck5hbWVNYXAgfHwge307IC8vIFVzZSBgaGFzT3duUHJvcGVydHlgIHRvIGF2b2lkIGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZS5cblxuICAgIGlmIChjb2xvck5hbWVNYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIHJldHVybiBjb2xvck5hbWVNYXBbbmFtZV07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRDb2xvclBhbGV0dGUgPSBub3JtYWxpemVUb0FycmF5KHRoaXMuZ2V0KCdjb2xvcicsIHRydWUpKTtcbiAgICB2YXIgbGF5ZXJlZENvbG9yUGFsZXR0ZSA9IHRoaXMuZ2V0KCdjb2xvckxheWVyJywgdHJ1ZSk7XG4gICAgdmFyIGNvbG9yUGFsZXR0ZSA9IHJlcXVlc3RDb2xvck51bSA9PSBudWxsIHx8ICFsYXllcmVkQ29sb3JQYWxldHRlID8gZGVmYXVsdENvbG9yUGFsZXR0ZSA6IGdldE5lYXJlc3RDb2xvclBhbGV0dGUobGF5ZXJlZENvbG9yUGFsZXR0ZSwgcmVxdWVzdENvbG9yTnVtKTsgLy8gSW4gY2FzZSBjYW4ndCBmaW5kIGluIGxheWVyZWQgY29sb3IgcGFsZXR0ZS5cblxuICAgIGNvbG9yUGFsZXR0ZSA9IGNvbG9yUGFsZXR0ZSB8fCBkZWZhdWx0Q29sb3JQYWxldHRlO1xuXG4gICAgaWYgKCFjb2xvclBhbGV0dGUgfHwgIWNvbG9yUGFsZXR0ZS5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY29sb3IgPSBjb2xvclBhbGV0dGVbY29sb3JJZHhdO1xuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIGNvbG9yTmFtZU1hcFtuYW1lXSA9IGNvbG9yO1xuICAgIH1cblxuICAgIHNjb3BlRmllbGRzLmNvbG9ySWR4ID0gKGNvbG9ySWR4ICsgMSkgJSBjb2xvclBhbGV0dGUubGVuZ3RoO1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxufTtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIF9kYXRhUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vLi4vZGF0YS9oZWxwZXIvZGF0YVByb3ZpZGVyXCIpO1xuXG52YXIgcmV0cmlldmVSYXdWYWx1ZSA9IF9kYXRhUHJvdmlkZXIucmV0cmlldmVSYXdWYWx1ZTtcblxudmFyIF9mb3JtYXQgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9mb3JtYXRcIik7XG5cbnZhciBnZXRUb29sdGlwTWFya2VyID0gX2Zvcm1hdC5nZXRUb29sdGlwTWFya2VyO1xudmFyIGZvcm1hdFRwbCA9IF9mb3JtYXQuZm9ybWF0VHBsO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgRElNRU5TSU9OX0xBQkVMX1JFRyA9IC9cXHtAKC4rPylcXH0vZzsgLy8gUEVORElORyBBIGxpdHRsZSB1Z2x5XG5cbnZhciBfZGVmYXVsdCA9IHtcbiAgLyoqXG4gICAqIEdldCBwYXJhbXMgZm9yIGZvcm1hdHRlclxuICAgKiBAcGFyYW0ge251bWJlcn0gZGF0YUluZGV4XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZGF0YVR5cGVdXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIGdldERhdGFQYXJhbXM6IGZ1bmN0aW9uIChkYXRhSW5kZXgsIGRhdGFUeXBlKSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLmdldERhdGEoZGF0YVR5cGUpO1xuICAgIHZhciByYXdWYWx1ZSA9IHRoaXMuZ2V0UmF3VmFsdWUoZGF0YUluZGV4LCBkYXRhVHlwZSk7XG4gICAgdmFyIHJhd0RhdGFJbmRleCA9IGRhdGEuZ2V0UmF3SW5kZXgoZGF0YUluZGV4KTtcbiAgICB2YXIgbmFtZSA9IGRhdGEuZ2V0TmFtZShkYXRhSW5kZXgpO1xuICAgIHZhciBpdGVtT3B0ID0gZGF0YS5nZXRSYXdEYXRhSXRlbShkYXRhSW5kZXgpO1xuICAgIHZhciBjb2xvciA9IGRhdGEuZ2V0SXRlbVZpc3VhbChkYXRhSW5kZXgsICdjb2xvcicpO1xuICAgIHJldHVybiB7XG4gICAgICBjb21wb25lbnRUeXBlOiB0aGlzLm1haW5UeXBlLFxuICAgICAgY29tcG9uZW50U3ViVHlwZTogdGhpcy5zdWJUeXBlLFxuICAgICAgc2VyaWVzVHlwZTogdGhpcy5tYWluVHlwZSA9PT0gJ3NlcmllcycgPyB0aGlzLnN1YlR5cGUgOiBudWxsLFxuICAgICAgc2VyaWVzSW5kZXg6IHRoaXMuc2VyaWVzSW5kZXgsXG4gICAgICBzZXJpZXNJZDogdGhpcy5pZCxcbiAgICAgIHNlcmllc05hbWU6IHRoaXMubmFtZSxcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBkYXRhSW5kZXg6IHJhd0RhdGFJbmRleCxcbiAgICAgIGRhdGE6IGl0ZW1PcHQsXG4gICAgICBkYXRhVHlwZTogZGF0YVR5cGUsXG4gICAgICB2YWx1ZTogcmF3VmFsdWUsXG4gICAgICBjb2xvcjogY29sb3IsXG4gICAgICBtYXJrZXI6IGdldFRvb2x0aXBNYXJrZXIoY29sb3IpLFxuICAgICAgLy8gUGFyYW0gbmFtZSBsaXN0IGZvciBtYXBwaW5nIGBhYCwgYGJgLCBgY2AsIGBkYCwgYGVgXG4gICAgICAkdmFyczogWydzZXJpZXNOYW1lJywgJ25hbWUnLCAndmFsdWUnXVxuICAgIH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZvcm1hdCBsYWJlbFxuICAgKiBAcGFyYW0ge251bWJlcn0gZGF0YUluZGV4XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RhdHVzPSdub3JtYWwnXSAnbm9ybWFsJyBvciAnZW1waGFzaXMnXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZGF0YVR5cGVdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbZGltSW5kZXhdXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGFiZWxQcm9wPSdsYWJlbCddXG4gICAqIEByZXR1cm4ge3N0cmluZ30gSWYgbm90IGZvcm1hdHRlciwgcmV0dXJuIG51bGwvdW5kZWZpbmVkXG4gICAqL1xuICBnZXRGb3JtYXR0ZWRMYWJlbDogZnVuY3Rpb24gKGRhdGFJbmRleCwgc3RhdHVzLCBkYXRhVHlwZSwgZGltSW5kZXgsIGxhYmVsUHJvcCkge1xuICAgIHN0YXR1cyA9IHN0YXR1cyB8fCAnbm9ybWFsJztcbiAgICB2YXIgZGF0YSA9IHRoaXMuZ2V0RGF0YShkYXRhVHlwZSk7XG4gICAgdmFyIGl0ZW1Nb2RlbCA9IGRhdGEuZ2V0SXRlbU1vZGVsKGRhdGFJbmRleCk7XG4gICAgdmFyIHBhcmFtcyA9IHRoaXMuZ2V0RGF0YVBhcmFtcyhkYXRhSW5kZXgsIGRhdGFUeXBlKTtcblxuICAgIGlmIChkaW1JbmRleCAhPSBudWxsICYmIHBhcmFtcy52YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBwYXJhbXMudmFsdWUgPSBwYXJhbXMudmFsdWVbZGltSW5kZXhdO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXR0ZXIgPSBpdGVtTW9kZWwuZ2V0KHN0YXR1cyA9PT0gJ25vcm1hbCcgPyBbbGFiZWxQcm9wIHx8ICdsYWJlbCcsICdmb3JtYXR0ZXInXSA6IFtzdGF0dXMsIGxhYmVsUHJvcCB8fCAnbGFiZWwnLCAnZm9ybWF0dGVyJ10pO1xuXG4gICAgaWYgKHR5cGVvZiBmb3JtYXR0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBhcmFtcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgICByZXR1cm4gZm9ybWF0dGVyKHBhcmFtcyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHN0ciA9IGZvcm1hdFRwbChmb3JtYXR0ZXIsIHBhcmFtcyk7IC8vIFN1cHBvcnQgJ2FhYXtAWzNdfWJiYntAcHJvZHVjdH1jY2MnLlxuICAgICAgLy8gRG8gbm90IHN1cHBvcnQgJ30nIGluIGRpbSBuYW1lIHV0aWwgaGF2ZSB0by5cblxuICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKERJTUVOU0lPTl9MQUJFTF9SRUcsIGZ1bmN0aW9uIChvcmlnaW4sIGRpbSkge1xuICAgICAgICB2YXIgbGVuID0gZGltLmxlbmd0aDtcblxuICAgICAgICBpZiAoZGltLmNoYXJBdCgwKSA9PT0gJ1snICYmIGRpbS5jaGFyQXQobGVuIC0gMSkgPT09ICddJykge1xuICAgICAgICAgIGRpbSA9ICtkaW0uc2xpY2UoMSwgbGVuIC0gMSk7IC8vIEFsc286ICdbXScgPT4gMFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldHJpZXZlUmF3VmFsdWUoZGF0YSwgZGF0YUluZGV4LCBkaW0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgcmF3IHZhbHVlIGluIG9wdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gaWR4XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZGF0YVR5cGVdXG4gICAqIEByZXR1cm4ge0FycmF5fG51bWJlcnxzdHJpbmd9XG4gICAqL1xuICBnZXRSYXdWYWx1ZTogZnVuY3Rpb24gKGlkeCwgZGF0YVR5cGUpIHtcbiAgICByZXR1cm4gcmV0cmlldmVSYXdWYWx1ZSh0aGlzLmdldERhdGEoZGF0YVR5cGUpLCBpZHgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTaG91bGQgYmUgaW1wbGVtZW50ZWQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkYXRhSW5kZXhcbiAgICogQHBhcmFtIHtib29sZWFufSBbbXVsdGlwbGVTZXJpZXM9ZmFsc2VdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbZGF0YVR5cGVdXG4gICAqIEByZXR1cm4ge3N0cmluZ30gdG9vbHRpcCBzdHJpbmdcbiAgICovXG4gIGZvcm1hdFRvb2x0aXA6IGZ1bmN0aW9uICgpIHsvLyBFbXB0eSBmdW5jdGlvblxuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgbWFrZVN0eWxlTWFwcGVyID0gcmVxdWlyZShcIi4vbWFrZVN0eWxlTWFwcGVyXCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgZ2V0SXRlbVN0eWxlID0gbWFrZVN0eWxlTWFwcGVyKFtbJ2ZpbGwnLCAnY29sb3InXSwgWydzdHJva2UnLCAnYm9yZGVyQ29sb3InXSwgWydsaW5lV2lkdGgnLCAnYm9yZGVyV2lkdGgnXSwgWydvcGFjaXR5J10sIFsnc2hhZG93Qmx1ciddLCBbJ3NoYWRvd09mZnNldFgnXSwgWydzaGFkb3dPZmZzZXRZJ10sIFsnc2hhZG93Q29sb3InXSwgWyd0ZXh0UG9zaXRpb24nXSwgWyd0ZXh0QWxpZ24nXV0pO1xudmFyIF9kZWZhdWx0ID0ge1xuICBnZXRJdGVtU3R5bGU6IGZ1bmN0aW9uIChleGNsdWRlcywgaW5jbHVkZXMpIHtcbiAgICB2YXIgc3R5bGUgPSBnZXRJdGVtU3R5bGUodGhpcywgZXhjbHVkZXMsIGluY2x1ZGVzKTtcbiAgICB2YXIgbGluZURhc2ggPSB0aGlzLmdldEJvcmRlckxpbmVEYXNoKCk7XG4gICAgbGluZURhc2ggJiYgKHN0eWxlLmxpbmVEYXNoID0gbGluZURhc2gpO1xuICAgIHJldHVybiBzdHlsZTtcbiAgfSxcbiAgZ2V0Qm9yZGVyTGluZURhc2g6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGluZVR5cGUgPSB0aGlzLmdldCgnYm9yZGVyVHlwZScpO1xuICAgIHJldHVybiBsaW5lVHlwZSA9PT0gJ3NvbGlkJyB8fCBsaW5lVHlwZSA9PSBudWxsID8gbnVsbCA6IGxpbmVUeXBlID09PSAnZGFzaGVkJyA/IFs1LCA1XSA6IFsxLCAxXTtcbiAgfVxufTtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIG1ha2VTdHlsZU1hcHBlciA9IHJlcXVpcmUoXCIuL21ha2VTdHlsZU1hcHBlclwiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xudmFyIGdldExpbmVTdHlsZSA9IG1ha2VTdHlsZU1hcHBlcihbWydsaW5lV2lkdGgnLCAnd2lkdGgnXSwgWydzdHJva2UnLCAnY29sb3InXSwgWydvcGFjaXR5J10sIFsnc2hhZG93Qmx1ciddLCBbJ3NoYWRvd09mZnNldFgnXSwgWydzaGFkb3dPZmZzZXRZJ10sIFsnc2hhZG93Q29sb3InXV0pO1xudmFyIF9kZWZhdWx0ID0ge1xuICBnZXRMaW5lU3R5bGU6IGZ1bmN0aW9uIChleGNsdWRlcykge1xuICAgIHZhciBzdHlsZSA9IGdldExpbmVTdHlsZSh0aGlzLCBleGNsdWRlcyk7XG4gICAgdmFyIGxpbmVEYXNoID0gdGhpcy5nZXRMaW5lRGFzaChzdHlsZS5saW5lV2lkdGgpO1xuICAgIGxpbmVEYXNoICYmIChzdHlsZS5saW5lRGFzaCA9IGxpbmVEYXNoKTtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH0sXG4gIGdldExpbmVEYXNoOiBmdW5jdGlvbiAobGluZVdpZHRoKSB7XG4gICAgaWYgKGxpbmVXaWR0aCA9PSBudWxsKSB7XG4gICAgICBsaW5lV2lkdGggPSAxO1xuICAgIH1cblxuICAgIHZhciBsaW5lVHlwZSA9IHRoaXMuZ2V0KCd0eXBlJyk7XG4gICAgdmFyIGRvdFNpemUgPSBNYXRoLm1heChsaW5lV2lkdGgsIDIpO1xuICAgIHZhciBkYXNoU2l6ZSA9IGxpbmVXaWR0aCAqIDQ7XG4gICAgcmV0dXJuIGxpbmVUeXBlID09PSAnc29saWQnIHx8IGxpbmVUeXBlID09IG51bGwgPyBudWxsIDogbGluZVR5cGUgPT09ICdkYXNoZWQnID8gW2Rhc2hTaXplLCBkYXNoU2l6ZV0gOiBbZG90U2l6ZSwgZG90U2l6ZV07XG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciB6clV0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG4vLyBUT0RPIFBhcnNlIHNoYWRvdyBzdHlsZVxuLy8gVE9ETyBPbmx5IHNoYWxsb3cgcGF0aCBzdXBwb3J0XG5mdW5jdGlvbiBfZGVmYXVsdChwcm9wZXJ0aWVzKSB7XG4gIC8vIE5vcm1hbGl6ZVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIXByb3BlcnRpZXNbaV1bMV0pIHtcbiAgICAgIHByb3BlcnRpZXNbaV1bMV0gPSBwcm9wZXJ0aWVzW2ldWzBdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAobW9kZWwsIGV4Y2x1ZGVzLCBpbmNsdWRlcykge1xuICAgIHZhciBzdHlsZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcHJvcE5hbWUgPSBwcm9wZXJ0aWVzW2ldWzFdO1xuXG4gICAgICBpZiAoZXhjbHVkZXMgJiYgenJVdGlsLmluZGV4T2YoZXhjbHVkZXMsIHByb3BOYW1lKSA+PSAwIHx8IGluY2x1ZGVzICYmIHpyVXRpbC5pbmRleE9mKGluY2x1ZGVzLCBwcm9wTmFtZSkgPCAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmFsID0gbW9kZWwuZ2V0U2hhbGxvdyhwcm9wTmFtZSk7XG5cbiAgICAgIGlmICh2YWwgIT0gbnVsbCkge1xuICAgICAgICBzdHlsZVtwcm9wZXJ0aWVzW2ldWzBdXSA9IHZhbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIHRleHRDb250YWluID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvbnRhaW4vdGV4dFwiKTtcblxudmFyIGdyYXBoaWNVdGlsID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvZ3JhcGhpY1wiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xudmFyIFBBVEhfQ09MT1IgPSBbJ3RleHRTdHlsZScsICdjb2xvciddO1xudmFyIF9kZWZhdWx0ID0ge1xuICAvKipcbiAgICogR2V0IGNvbG9yIHByb3BlcnR5IG9yIGdldCBjb2xvciBmcm9tIG9wdGlvbi50ZXh0U3R5bGUuY29sb3JcbiAgICogQHBhcmFtIHtib29sZWFufSBbaXNFbXBoYXNpc11cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0VGV4dENvbG9yOiBmdW5jdGlvbiAoaXNFbXBoYXNpcykge1xuICAgIHZhciBlY01vZGVsID0gdGhpcy5lY01vZGVsO1xuICAgIHJldHVybiB0aGlzLmdldFNoYWxsb3coJ2NvbG9yJykgfHwgKCFpc0VtcGhhc2lzICYmIGVjTW9kZWwgPyBlY01vZGVsLmdldChQQVRIX0NPTE9SKSA6IG51bGwpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGUgZm9udCBzdHJpbmcgZnJvbSBmb250U3R5bGUsIGZvbnRXZWlnaHQsIGZvbnRTaXplLCBmb250RmFtaWx5XG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldEZvbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ3JhcGhpY1V0aWwuZ2V0Rm9udCh7XG4gICAgICBmb250U3R5bGU6IHRoaXMuZ2V0U2hhbGxvdygnZm9udFN0eWxlJyksXG4gICAgICBmb250V2VpZ2h0OiB0aGlzLmdldFNoYWxsb3coJ2ZvbnRXZWlnaHQnKSxcbiAgICAgIGZvbnRTaXplOiB0aGlzLmdldFNoYWxsb3coJ2ZvbnRTaXplJyksXG4gICAgICBmb250RmFtaWx5OiB0aGlzLmdldFNoYWxsb3coJ2ZvbnRGYW1pbHknKVxuICAgIH0sIHRoaXMuZWNNb2RlbCk7XG4gIH0sXG4gIGdldFRleHRSZWN0OiBmdW5jdGlvbiAodGV4dCkge1xuICAgIHJldHVybiB0ZXh0Q29udGFpbi5nZXRCb3VuZGluZ1JlY3QodGV4dCwgdGhpcy5nZXRGb250KCksIHRoaXMuZ2V0U2hhbGxvdygnYWxpZ24nKSwgdGhpcy5nZXRTaGFsbG93KCd2ZXJ0aWNhbEFsaWduJykgfHwgdGhpcy5nZXRTaGFsbG93KCdiYXNlbGluZScpLCB0aGlzLmdldFNoYWxsb3coJ3BhZGRpbmcnKSwgdGhpcy5nZXRTaGFsbG93KCdyaWNoJyksIHRoaXMuZ2V0U2hhbGxvdygndHJ1bmNhdGVUZXh0JykpO1xuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgX2NvbmZpZyA9IHJlcXVpcmUoXCIuLi9jb25maWdcIik7XG5cbnZhciBfX0RFVl9fID0gX2NvbmZpZy5fX0RFVl9fO1xuXG52YXIgX3V0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgY3JlYXRlSGFzaE1hcCA9IF91dGlsLmNyZWF0ZUhhc2hNYXA7XG52YXIgcmV0cmlldmUgPSBfdXRpbC5yZXRyaWV2ZTtcbnZhciBlYWNoID0gX3V0aWwuZWFjaDtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG4vKipcbiAqIEhlbHBlciBmb3IgbW9kZWwgcmVmZXJlbmNlcy5cbiAqIFRoZXJlIGFyZSBtYW55IG1hbm5lcnMgdG8gcmVmZXIgYXhpcy9jb29yZFN5cy5cbiAqL1xuLy8gVE9ET1xuLy8gbWVyZ2UgcmVsZXZhbnQgbG9naWMgdG8gdGhpcyBmaWxlP1xuLy8gY2hlY2s6IFwibW9kZWxIZWxwZXJcIiBvZiB0b29sdGlwIGFuZCBcIkJydXNoVGFyZ2V0TWFuYWdlclwiLlxuXG4vKipcbiAqIEByZXR1cm4ge09iamVjdH0gRm9yIGV4YW1wbGU6XG4gKiB7XG4gKiAgICAgY29vcmRTeXNOYW1lOiAnY2FydGVzaWFuMmQnLFxuICogICAgIGNvb3JkU3lzRGltczogWyd4JywgJ3knLCAuLi5dLFxuICogICAgIGF4aXNNYXA6IEhhc2hNYXAoe1xuICogICAgICAgICB4OiB4QXhpc01vZGVsLFxuICogICAgICAgICB5OiB5QXhpc01vZGVsXG4gKiAgICAgfSksXG4gKiAgICAgY2F0ZWdvcnlBeGlzTWFwOiBIYXNoTWFwKHtcbiAqICAgICAgICAgeDogeEF4aXNNb2RlbCxcbiAqICAgICAgICAgeTogdW5kZWZpbmVkXG4gKiAgICAgfSksXG4gKiAgICAgLy8gSXQgYWxzbyBpbmRpY2F0ZSB0aGF0IHdoZXRoZXIgdGhlcmUgaXMgY2F0ZWdvcnkgYXhpcy5cbiAqICAgICBmaXJzdENhdGVnb3J5RGltSW5kZXg6IDEsXG4gKiAgICAgLy8gVG8gcmVwbGFjZSB1c2VyIHNwZWNpZmllZCBlbmNvZGUuXG4gKiB9XG4gKi9cbmZ1bmN0aW9uIGdldENvb3JkU3lzRGVmaW5lQnlTZXJpZXMoc2VyaWVzTW9kZWwpIHtcbiAgdmFyIGNvb3JkU3lzTmFtZSA9IHNlcmllc01vZGVsLmdldCgnY29vcmRpbmF0ZVN5c3RlbScpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIGNvb3JkU3lzTmFtZTogY29vcmRTeXNOYW1lLFxuICAgIGNvb3JkU3lzRGltczogW10sXG4gICAgYXhpc01hcDogY3JlYXRlSGFzaE1hcCgpLFxuICAgIGNhdGVnb3J5QXhpc01hcDogY3JlYXRlSGFzaE1hcCgpXG4gIH07XG4gIHZhciBmZXRjaCA9IGZldGNoZXJzW2Nvb3JkU3lzTmFtZV07XG5cbiAgaWYgKGZldGNoKSB7XG4gICAgZmV0Y2goc2VyaWVzTW9kZWwsIHJlc3VsdCwgcmVzdWx0LmF4aXNNYXAsIHJlc3VsdC5jYXRlZ29yeUF4aXNNYXApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cblxudmFyIGZldGNoZXJzID0ge1xuICBjYXJ0ZXNpYW4yZDogZnVuY3Rpb24gKHNlcmllc01vZGVsLCByZXN1bHQsIGF4aXNNYXAsIGNhdGVnb3J5QXhpc01hcCkge1xuICAgIHZhciB4QXhpc01vZGVsID0gc2VyaWVzTW9kZWwuZ2V0UmVmZXJyaW5nQ29tcG9uZW50cygneEF4aXMnKVswXTtcbiAgICB2YXIgeUF4aXNNb2RlbCA9IHNlcmllc01vZGVsLmdldFJlZmVycmluZ0NvbXBvbmVudHMoJ3lBeGlzJylbMF07XG4gICAgcmVzdWx0LmNvb3JkU3lzRGltcyA9IFsneCcsICd5J107XG4gICAgYXhpc01hcC5zZXQoJ3gnLCB4QXhpc01vZGVsKTtcbiAgICBheGlzTWFwLnNldCgneScsIHlBeGlzTW9kZWwpO1xuXG4gICAgaWYgKGlzQ2F0ZWdvcnkoeEF4aXNNb2RlbCkpIHtcbiAgICAgIGNhdGVnb3J5QXhpc01hcC5zZXQoJ3gnLCB4QXhpc01vZGVsKTtcbiAgICAgIHJlc3VsdC5maXJzdENhdGVnb3J5RGltSW5kZXggPSAwO1xuICAgIH1cblxuICAgIGlmIChpc0NhdGVnb3J5KHlBeGlzTW9kZWwpKSB7XG4gICAgICBjYXRlZ29yeUF4aXNNYXAuc2V0KCd5JywgeUF4aXNNb2RlbCk7XG4gICAgICByZXN1bHQuZmlyc3RDYXRlZ29yeURpbUluZGV4ID0gMTtcbiAgICB9XG4gIH0sXG4gIHNpbmdsZUF4aXM6IGZ1bmN0aW9uIChzZXJpZXNNb2RlbCwgcmVzdWx0LCBheGlzTWFwLCBjYXRlZ29yeUF4aXNNYXApIHtcbiAgICB2YXIgc2luZ2xlQXhpc01vZGVsID0gc2VyaWVzTW9kZWwuZ2V0UmVmZXJyaW5nQ29tcG9uZW50cygnc2luZ2xlQXhpcycpWzBdO1xuICAgIHJlc3VsdC5jb29yZFN5c0RpbXMgPSBbJ3NpbmdsZSddO1xuICAgIGF4aXNNYXAuc2V0KCdzaW5nbGUnLCBzaW5nbGVBeGlzTW9kZWwpO1xuXG4gICAgaWYgKGlzQ2F0ZWdvcnkoc2luZ2xlQXhpc01vZGVsKSkge1xuICAgICAgY2F0ZWdvcnlBeGlzTWFwLnNldCgnc2luZ2xlJywgc2luZ2xlQXhpc01vZGVsKTtcbiAgICAgIHJlc3VsdC5maXJzdENhdGVnb3J5RGltSW5kZXggPSAwO1xuICAgIH1cbiAgfSxcbiAgcG9sYXI6IGZ1bmN0aW9uIChzZXJpZXNNb2RlbCwgcmVzdWx0LCBheGlzTWFwLCBjYXRlZ29yeUF4aXNNYXApIHtcbiAgICB2YXIgcG9sYXJNb2RlbCA9IHNlcmllc01vZGVsLmdldFJlZmVycmluZ0NvbXBvbmVudHMoJ3BvbGFyJylbMF07XG4gICAgdmFyIHJhZGl1c0F4aXNNb2RlbCA9IHBvbGFyTW9kZWwuZmluZEF4aXNNb2RlbCgncmFkaXVzQXhpcycpO1xuICAgIHZhciBhbmdsZUF4aXNNb2RlbCA9IHBvbGFyTW9kZWwuZmluZEF4aXNNb2RlbCgnYW5nbGVBeGlzJyk7XG4gICAgcmVzdWx0LmNvb3JkU3lzRGltcyA9IFsncmFkaXVzJywgJ2FuZ2xlJ107XG4gICAgYXhpc01hcC5zZXQoJ3JhZGl1cycsIHJhZGl1c0F4aXNNb2RlbCk7XG4gICAgYXhpc01hcC5zZXQoJ2FuZ2xlJywgYW5nbGVBeGlzTW9kZWwpO1xuXG4gICAgaWYgKGlzQ2F0ZWdvcnkocmFkaXVzQXhpc01vZGVsKSkge1xuICAgICAgY2F0ZWdvcnlBeGlzTWFwLnNldCgncmFkaXVzJywgcmFkaXVzQXhpc01vZGVsKTtcbiAgICAgIHJlc3VsdC5maXJzdENhdGVnb3J5RGltSW5kZXggPSAwO1xuICAgIH1cblxuICAgIGlmIChpc0NhdGVnb3J5KGFuZ2xlQXhpc01vZGVsKSkge1xuICAgICAgY2F0ZWdvcnlBeGlzTWFwLnNldCgnYW5nbGUnLCBhbmdsZUF4aXNNb2RlbCk7XG4gICAgICByZXN1bHQuZmlyc3RDYXRlZ29yeURpbUluZGV4ID0gMTtcbiAgICB9XG4gIH0sXG4gIGdlbzogZnVuY3Rpb24gKHNlcmllc01vZGVsLCByZXN1bHQsIGF4aXNNYXAsIGNhdGVnb3J5QXhpc01hcCkge1xuICAgIHJlc3VsdC5jb29yZFN5c0RpbXMgPSBbJ2xuZycsICdsYXQnXTtcbiAgfSxcbiAgcGFyYWxsZWw6IGZ1bmN0aW9uIChzZXJpZXNNb2RlbCwgcmVzdWx0LCBheGlzTWFwLCBjYXRlZ29yeUF4aXNNYXApIHtcbiAgICB2YXIgZWNNb2RlbCA9IHNlcmllc01vZGVsLmVjTW9kZWw7XG4gICAgdmFyIHBhcmFsbGVsTW9kZWwgPSBlY01vZGVsLmdldENvbXBvbmVudCgncGFyYWxsZWwnLCBzZXJpZXNNb2RlbC5nZXQoJ3BhcmFsbGVsSW5kZXgnKSk7XG4gICAgdmFyIGNvb3JkU3lzRGltcyA9IHJlc3VsdC5jb29yZFN5c0RpbXMgPSBwYXJhbGxlbE1vZGVsLmRpbWVuc2lvbnMuc2xpY2UoKTtcbiAgICBlYWNoKHBhcmFsbGVsTW9kZWwucGFyYWxsZWxBeGlzSW5kZXgsIGZ1bmN0aW9uIChheGlzSW5kZXgsIGluZGV4KSB7XG4gICAgICB2YXIgYXhpc01vZGVsID0gZWNNb2RlbC5nZXRDb21wb25lbnQoJ3BhcmFsbGVsQXhpcycsIGF4aXNJbmRleCk7XG4gICAgICB2YXIgYXhpc0RpbSA9IGNvb3JkU3lzRGltc1tpbmRleF07XG4gICAgICBheGlzTWFwLnNldChheGlzRGltLCBheGlzTW9kZWwpO1xuXG4gICAgICBpZiAoaXNDYXRlZ29yeShheGlzTW9kZWwpICYmIHJlc3VsdC5maXJzdENhdGVnb3J5RGltSW5kZXggPT0gbnVsbCkge1xuICAgICAgICBjYXRlZ29yeUF4aXNNYXAuc2V0KGF4aXNEaW0sIGF4aXNNb2RlbCk7XG4gICAgICAgIHJlc3VsdC5maXJzdENhdGVnb3J5RGltSW5kZXggPSBpbmRleDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxuZnVuY3Rpb24gaXNDYXRlZ29yeShheGlzTW9kZWwpIHtcbiAgcmV0dXJuIGF4aXNNb2RlbC5nZXQoJ3R5cGUnKSA9PT0gJ2NhdGVnb3J5Jztcbn1cblxuZXhwb3J0cy5nZXRDb29yZFN5c0RlZmluZUJ5U2VyaWVzID0gZ2V0Q29vcmRTeXNEZWZpbmVCeVNlcmllczsiLCJ2YXIgX3V0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgZWFjaCA9IF91dGlsLmVhY2g7XG52YXIgaXNBcnJheSA9IF91dGlsLmlzQXJyYXk7XG52YXIgaXNPYmplY3QgPSBfdXRpbC5pc09iamVjdDtcblxudmFyIGNvbXBhdFN0eWxlID0gcmVxdWlyZShcIi4vaGVscGVyL2NvbXBhdFN0eWxlXCIpO1xuXG52YXIgX21vZGVsID0gcmVxdWlyZShcIi4uL3V0aWwvbW9kZWxcIik7XG5cbnZhciBub3JtYWxpemVUb0FycmF5ID0gX21vZGVsLm5vcm1hbGl6ZVRvQXJyYXk7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbi8vIENvbXBhdGl0YWJsZSB3aXRoIDIuMFxuZnVuY3Rpb24gZ2V0KG9wdCwgcGF0aCkge1xuICBwYXRoID0gcGF0aC5zcGxpdCgnLCcpO1xuICB2YXIgb2JqID0gb3B0O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIG9iaiA9IG9iaiAmJiBvYmpbcGF0aFtpXV07XG5cbiAgICBpZiAob2JqID09IG51bGwpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIHNldChvcHQsIHBhdGgsIHZhbCwgb3ZlcndyaXRlKSB7XG4gIHBhdGggPSBwYXRoLnNwbGl0KCcsJyk7XG4gIHZhciBvYmogPSBvcHQ7XG4gIHZhciBrZXk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIGtleSA9IHBhdGhbaV07XG5cbiAgICBpZiAob2JqW2tleV0gPT0gbnVsbCkge1xuICAgICAgb2JqW2tleV0gPSB7fTtcbiAgICB9XG5cbiAgICBvYmogPSBvYmpba2V5XTtcbiAgfVxuXG4gIGlmIChvdmVyd3JpdGUgfHwgb2JqW3BhdGhbaV1dID09IG51bGwpIHtcbiAgICBvYmpbcGF0aFtpXV0gPSB2YWw7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcGF0TGF5b3V0UHJvcGVydGllcyhvcHRpb24pIHtcbiAgZWFjaChMQVlPVVRfUFJPUEVSVElFUywgZnVuY3Rpb24gKHByb3ApIHtcbiAgICBpZiAocHJvcFswXSBpbiBvcHRpb24gJiYgIShwcm9wWzFdIGluIG9wdGlvbikpIHtcbiAgICAgIG9wdGlvbltwcm9wWzFdXSA9IG9wdGlvbltwcm9wWzBdXTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgTEFZT1VUX1BST1BFUlRJRVMgPSBbWyd4JywgJ2xlZnQnXSwgWyd5JywgJ3RvcCddLCBbJ3gyJywgJ3JpZ2h0J10sIFsneTInLCAnYm90dG9tJ11dO1xudmFyIENPTVBBVElUQUJMRV9DT01QT05FTlRTID0gWydncmlkJywgJ2dlbycsICdwYXJhbGxlbCcsICdsZWdlbmQnLCAndG9vbGJveCcsICd0aXRsZScsICd2aXN1YWxNYXAnLCAnZGF0YVpvb20nLCAndGltZWxpbmUnXTtcblxuZnVuY3Rpb24gX2RlZmF1bHQob3B0aW9uLCBpc1RoZW1lKSB7XG4gIGNvbXBhdFN0eWxlKG9wdGlvbiwgaXNUaGVtZSk7IC8vIE1ha2Ugc3VyZSBzZXJpZXMgYXJyYXkgZm9yIG1vZGVsIGluaXRpYWxpemF0aW9uLlxuXG4gIG9wdGlvbi5zZXJpZXMgPSBub3JtYWxpemVUb0FycmF5KG9wdGlvbi5zZXJpZXMpO1xuICBlYWNoKG9wdGlvbi5zZXJpZXMsIGZ1bmN0aW9uIChzZXJpZXNPcHQpIHtcbiAgICBpZiAoIWlzT2JqZWN0KHNlcmllc09wdCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc2VyaWVzVHlwZSA9IHNlcmllc09wdC50eXBlO1xuXG4gICAgaWYgKHNlcmllc1R5cGUgPT09ICdwaWUnIHx8IHNlcmllc1R5cGUgPT09ICdnYXVnZScpIHtcbiAgICAgIGlmIChzZXJpZXNPcHQuY2xvY2tXaXNlICE9IG51bGwpIHtcbiAgICAgICAgc2VyaWVzT3B0LmNsb2Nrd2lzZSA9IHNlcmllc09wdC5jbG9ja1dpc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNlcmllc1R5cGUgPT09ICdnYXVnZScpIHtcbiAgICAgIHZhciBwb2ludGVyQ29sb3IgPSBnZXQoc2VyaWVzT3B0LCAncG9pbnRlci5jb2xvcicpO1xuICAgICAgcG9pbnRlckNvbG9yICE9IG51bGwgJiYgc2V0KHNlcmllc09wdCwgJ2l0ZW1TdHlsZS5ub3JtYWwuY29sb3InLCBwb2ludGVyQ29sb3IpO1xuICAgIH1cblxuICAgIGNvbXBhdExheW91dFByb3BlcnRpZXMoc2VyaWVzT3B0KTtcbiAgfSk7IC8vIGRhdGFSYW5nZSBoYXMgY2hhbmdlZCB0byB2aXN1YWxNYXBcblxuICBpZiAob3B0aW9uLmRhdGFSYW5nZSkge1xuICAgIG9wdGlvbi52aXN1YWxNYXAgPSBvcHRpb24uZGF0YVJhbmdlO1xuICB9XG5cbiAgZWFjaChDT01QQVRJVEFCTEVfQ09NUE9ORU5UUywgZnVuY3Rpb24gKGNvbXBvbmVudE5hbWUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IG9wdGlvbltjb21wb25lbnROYW1lXTtcblxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICBpZiAoIWlzQXJyYXkob3B0aW9ucykpIHtcbiAgICAgICAgb3B0aW9ucyA9IFtvcHRpb25zXTtcbiAgICAgIH1cblxuICAgICAgZWFjaChvcHRpb25zLCBmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgIGNvbXBhdExheW91dFByb3BlcnRpZXMob3B0aW9uKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIHpyVXRpbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3V0aWxcIik7XG5cbnZhciBtb2RlbFV0aWwgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9tb2RlbFwiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xudmFyIGVhY2ggPSB6clV0aWwuZWFjaDtcbnZhciBpc09iamVjdCA9IHpyVXRpbC5pc09iamVjdDtcbnZhciBQT1NTSUJMRV9TVFlMRVMgPSBbJ2FyZWFTdHlsZScsICdsaW5lU3R5bGUnLCAnbm9kZVN0eWxlJywgJ2xpbmtTdHlsZScsICdjaG9yZFN0eWxlJywgJ2xhYmVsJywgJ2xhYmVsTGluZSddO1xuXG5mdW5jdGlvbiBjb21wYXRFQzJJdGVtU3R5bGUob3B0KSB7XG4gIHZhciBpdGVtU3R5bGVPcHQgPSBvcHQgJiYgb3B0Lml0ZW1TdHlsZTtcblxuICBpZiAoIWl0ZW1TdHlsZU9wdCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBQT1NTSUJMRV9TVFlMRVMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgc3R5bGVOYW1lID0gUE9TU0lCTEVfU1RZTEVTW2ldO1xuICAgIHZhciBub3JtYWxJdGVtU3R5bGVPcHQgPSBpdGVtU3R5bGVPcHQubm9ybWFsO1xuICAgIHZhciBlbXBoYXNpc0l0ZW1TdHlsZU9wdCA9IGl0ZW1TdHlsZU9wdC5lbXBoYXNpcztcblxuICAgIGlmIChub3JtYWxJdGVtU3R5bGVPcHQgJiYgbm9ybWFsSXRlbVN0eWxlT3B0W3N0eWxlTmFtZV0pIHtcbiAgICAgIG9wdFtzdHlsZU5hbWVdID0gb3B0W3N0eWxlTmFtZV0gfHwge307XG5cbiAgICAgIGlmICghb3B0W3N0eWxlTmFtZV0ubm9ybWFsKSB7XG4gICAgICAgIG9wdFtzdHlsZU5hbWVdLm5vcm1hbCA9IG5vcm1hbEl0ZW1TdHlsZU9wdFtzdHlsZU5hbWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgenJVdGlsLm1lcmdlKG9wdFtzdHlsZU5hbWVdLm5vcm1hbCwgbm9ybWFsSXRlbVN0eWxlT3B0W3N0eWxlTmFtZV0pO1xuICAgICAgfVxuXG4gICAgICBub3JtYWxJdGVtU3R5bGVPcHRbc3R5bGVOYW1lXSA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGVtcGhhc2lzSXRlbVN0eWxlT3B0ICYmIGVtcGhhc2lzSXRlbVN0eWxlT3B0W3N0eWxlTmFtZV0pIHtcbiAgICAgIG9wdFtzdHlsZU5hbWVdID0gb3B0W3N0eWxlTmFtZV0gfHwge307XG5cbiAgICAgIGlmICghb3B0W3N0eWxlTmFtZV0uZW1waGFzaXMpIHtcbiAgICAgICAgb3B0W3N0eWxlTmFtZV0uZW1waGFzaXMgPSBlbXBoYXNpc0l0ZW1TdHlsZU9wdFtzdHlsZU5hbWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgenJVdGlsLm1lcmdlKG9wdFtzdHlsZU5hbWVdLmVtcGhhc2lzLCBlbXBoYXNpc0l0ZW1TdHlsZU9wdFtzdHlsZU5hbWVdKTtcbiAgICAgIH1cblxuICAgICAgZW1waGFzaXNJdGVtU3R5bGVPcHRbc3R5bGVOYW1lXSA9IG51bGw7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnROb3JtYWxFbXBoYXNpcyhvcHQsIG9wdFR5cGUsIHVzZUV4dGVuZCkge1xuICBpZiAob3B0ICYmIG9wdFtvcHRUeXBlXSAmJiAob3B0W29wdFR5cGVdLm5vcm1hbCB8fCBvcHRbb3B0VHlwZV0uZW1waGFzaXMpKSB7XG4gICAgdmFyIG5vcm1hbE9wdCA9IG9wdFtvcHRUeXBlXS5ub3JtYWw7XG4gICAgdmFyIGVtcGhhc2lzT3B0ID0gb3B0W29wdFR5cGVdLmVtcGhhc2lzO1xuXG4gICAgaWYgKG5vcm1hbE9wdCkge1xuICAgICAgLy8gVGltZWxpbmUgY29udHJvbFN0eWxlIGhhcyBvdGhlciBwcm9wZXJ0aWVzIGJlc2lkZXMgbm9ybWFsIGFuZCBlbXBoYXNpc1xuICAgICAgaWYgKHVzZUV4dGVuZCkge1xuICAgICAgICBvcHRbb3B0VHlwZV0ubm9ybWFsID0gb3B0W29wdFR5cGVdLmVtcGhhc2lzID0gbnVsbDtcbiAgICAgICAgenJVdGlsLmRlZmF1bHRzKG9wdFtvcHRUeXBlXSwgbm9ybWFsT3B0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdFtvcHRUeXBlXSA9IG5vcm1hbE9wdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZW1waGFzaXNPcHQpIHtcbiAgICAgIG9wdC5lbXBoYXNpcyA9IG9wdC5lbXBoYXNpcyB8fCB7fTtcbiAgICAgIG9wdC5lbXBoYXNpc1tvcHRUeXBlXSA9IGVtcGhhc2lzT3B0O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVFQzNOb3JtYWxTdGF0dXMob3B0KSB7XG4gIGNvbnZlcnROb3JtYWxFbXBoYXNpcyhvcHQsICdpdGVtU3R5bGUnKTtcbiAgY29udmVydE5vcm1hbEVtcGhhc2lzKG9wdCwgJ2xpbmVTdHlsZScpO1xuICBjb252ZXJ0Tm9ybWFsRW1waGFzaXMob3B0LCAnYXJlYVN0eWxlJyk7XG4gIGNvbnZlcnROb3JtYWxFbXBoYXNpcyhvcHQsICdsYWJlbCcpO1xuICBjb252ZXJ0Tm9ybWFsRW1waGFzaXMob3B0LCAnbGFiZWxMaW5lJyk7IC8vIHRyZWVtYXBcblxuICBjb252ZXJ0Tm9ybWFsRW1waGFzaXMob3B0LCAndXBwZXJMYWJlbCcpOyAvLyBncmFwaFxuXG4gIGNvbnZlcnROb3JtYWxFbXBoYXNpcyhvcHQsICdlZGdlTGFiZWwnKTtcbn1cblxuZnVuY3Rpb24gY29tcGF0VGV4dFN0eWxlKG9wdCwgcHJvcE5hbWUpIHtcbiAgLy8gQ2hlY2sgd2hldGhlciBpcyBub3Qgb2JqZWN0IChzdHJpbmdcXG51bGxcXHVuZGVmaW5lZCAuLi4pXG4gIHZhciBsYWJlbE9wdFNpbmdsZSA9IGlzT2JqZWN0KG9wdCkgJiYgb3B0W3Byb3BOYW1lXTtcbiAgdmFyIHRleHRTdHlsZSA9IGlzT2JqZWN0KGxhYmVsT3B0U2luZ2xlKSAmJiBsYWJlbE9wdFNpbmdsZS50ZXh0U3R5bGU7XG5cbiAgaWYgKHRleHRTdHlsZSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBtb2RlbFV0aWwuVEVYVF9TVFlMRV9PUFRJT05TLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgcHJvcE5hbWUgPSBtb2RlbFV0aWwuVEVYVF9TVFlMRV9PUFRJT05TW2ldO1xuXG4gICAgICBpZiAodGV4dFN0eWxlLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBsYWJlbE9wdFNpbmdsZVtwcm9wTmFtZV0gPSB0ZXh0U3R5bGVbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wYXRFQzNDb21tb25TdHlsZXMob3B0KSB7XG4gIGlmIChvcHQpIHtcbiAgICByZW1vdmVFQzNOb3JtYWxTdGF0dXMob3B0KTtcbiAgICBjb21wYXRUZXh0U3R5bGUob3B0LCAnbGFiZWwnKTtcbiAgICBvcHQuZW1waGFzaXMgJiYgY29tcGF0VGV4dFN0eWxlKG9wdC5lbXBoYXNpcywgJ2xhYmVsJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1NlcmllcyhzZXJpZXNPcHQpIHtcbiAgaWYgKCFpc09iamVjdChzZXJpZXNPcHQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29tcGF0RUMySXRlbVN0eWxlKHNlcmllc09wdCk7XG4gIHJlbW92ZUVDM05vcm1hbFN0YXR1cyhzZXJpZXNPcHQpO1xuICBjb21wYXRUZXh0U3R5bGUoc2VyaWVzT3B0LCAnbGFiZWwnKTsgLy8gdHJlZW1hcFxuXG4gIGNvbXBhdFRleHRTdHlsZShzZXJpZXNPcHQsICd1cHBlckxhYmVsJyk7IC8vIGdyYXBoXG5cbiAgY29tcGF0VGV4dFN0eWxlKHNlcmllc09wdCwgJ2VkZ2VMYWJlbCcpO1xuXG4gIGlmIChzZXJpZXNPcHQuZW1waGFzaXMpIHtcbiAgICBjb21wYXRUZXh0U3R5bGUoc2VyaWVzT3B0LmVtcGhhc2lzLCAnbGFiZWwnKTsgLy8gdHJlZW1hcFxuXG4gICAgY29tcGF0VGV4dFN0eWxlKHNlcmllc09wdC5lbXBoYXNpcywgJ3VwcGVyTGFiZWwnKTsgLy8gZ3JhcGhcblxuICAgIGNvbXBhdFRleHRTdHlsZShzZXJpZXNPcHQuZW1waGFzaXMsICdlZGdlTGFiZWwnKTtcbiAgfVxuXG4gIHZhciBtYXJrUG9pbnQgPSBzZXJpZXNPcHQubWFya1BvaW50O1xuXG4gIGlmIChtYXJrUG9pbnQpIHtcbiAgICBjb21wYXRFQzJJdGVtU3R5bGUobWFya1BvaW50KTtcbiAgICBjb21wYXRFQzNDb21tb25TdHlsZXMobWFya1BvaW50KTtcbiAgfVxuXG4gIHZhciBtYXJrTGluZSA9IHNlcmllc09wdC5tYXJrTGluZTtcblxuICBpZiAobWFya0xpbmUpIHtcbiAgICBjb21wYXRFQzJJdGVtU3R5bGUobWFya0xpbmUpO1xuICAgIGNvbXBhdEVDM0NvbW1vblN0eWxlcyhtYXJrTGluZSk7XG4gIH1cblxuICB2YXIgbWFya0FyZWEgPSBzZXJpZXNPcHQubWFya0FyZWE7XG5cbiAgaWYgKG1hcmtBcmVhKSB7XG4gICAgY29tcGF0RUMzQ29tbW9uU3R5bGVzKG1hcmtBcmVhKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gc2VyaWVzT3B0LmRhdGE7IC8vIEJyZWFrIHdpdGggZWMzOiBpZiBgc2V0T3B0aW9uYCBhZ2FpbiwgdGhlcmUgbWF5IGJlIG5vIGB0eXBlYCBpbiBvcHRpb24sXG4gIC8vIHRoZW4gdGhlIGJhY2t3YXJkIGNvbXBhdCBiYXNlZCBvbiBvcHRpb24gdHlwZSB3aWxsIG5vdCBiZSBwZXJmb3JtZWQuXG5cbiAgaWYgKHNlcmllc09wdC50eXBlID09PSAnZ3JhcGgnKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwgc2VyaWVzT3B0Lm5vZGVzO1xuICAgIHZhciBlZGdlRGF0YSA9IHNlcmllc09wdC5saW5rcyB8fCBzZXJpZXNPcHQuZWRnZXM7XG5cbiAgICBpZiAoZWRnZURhdGEgJiYgIXpyVXRpbC5pc1R5cGVkQXJyYXkoZWRnZURhdGEpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVkZ2VEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbXBhdEVDM0NvbW1vblN0eWxlcyhlZGdlRGF0YVtpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgenJVdGlsLmVhY2goc2VyaWVzT3B0LmNhdGVnb3JpZXMsIGZ1bmN0aW9uIChvcHQpIHtcbiAgICAgIHJlbW92ZUVDM05vcm1hbFN0YXR1cyhvcHQpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKGRhdGEgJiYgIXpyVXRpbC5pc1R5cGVkQXJyYXkoZGF0YSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbXBhdEVDM0NvbW1vblN0eWxlcyhkYXRhW2ldKTtcbiAgICB9XG4gIH0gLy8gbWFyayBwb2ludCBkYXRhXG5cblxuICB2YXIgbWFya1BvaW50ID0gc2VyaWVzT3B0Lm1hcmtQb2ludDtcblxuICBpZiAobWFya1BvaW50ICYmIG1hcmtQb2ludC5kYXRhKSB7XG4gICAgdmFyIG1wRGF0YSA9IG1hcmtQb2ludC5kYXRhO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtcERhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbXBhdEVDM0NvbW1vblN0eWxlcyhtcERhdGFbaV0pO1xuICAgIH1cbiAgfSAvLyBtYXJrIGxpbmUgZGF0YVxuXG5cbiAgdmFyIG1hcmtMaW5lID0gc2VyaWVzT3B0Lm1hcmtMaW5lO1xuXG4gIGlmIChtYXJrTGluZSAmJiBtYXJrTGluZS5kYXRhKSB7XG4gICAgdmFyIG1sRGF0YSA9IG1hcmtMaW5lLmRhdGE7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1sRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHpyVXRpbC5pc0FycmF5KG1sRGF0YVtpXSkpIHtcbiAgICAgICAgY29tcGF0RUMzQ29tbW9uU3R5bGVzKG1sRGF0YVtpXVswXSk7XG4gICAgICAgIGNvbXBhdEVDM0NvbW1vblN0eWxlcyhtbERhdGFbaV1bMV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGF0RUMzQ29tbW9uU3R5bGVzKG1sRGF0YVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9IC8vIFNlcmllc1xuXG5cbiAgaWYgKHNlcmllc09wdC50eXBlID09PSAnZ2F1Z2UnKSB7XG4gICAgY29tcGF0VGV4dFN0eWxlKHNlcmllc09wdCwgJ2F4aXNMYWJlbCcpO1xuICAgIGNvbXBhdFRleHRTdHlsZShzZXJpZXNPcHQsICd0aXRsZScpO1xuICAgIGNvbXBhdFRleHRTdHlsZShzZXJpZXNPcHQsICdkZXRhaWwnKTtcbiAgfSBlbHNlIGlmIChzZXJpZXNPcHQudHlwZSA9PT0gJ3RyZWVtYXAnKSB7XG4gICAgY29udmVydE5vcm1hbEVtcGhhc2lzKHNlcmllc09wdC5icmVhZGNydW1iLCAnaXRlbVN0eWxlJyk7XG4gICAgenJVdGlsLmVhY2goc2VyaWVzT3B0LmxldmVscywgZnVuY3Rpb24gKG9wdCkge1xuICAgICAgcmVtb3ZlRUMzTm9ybWFsU3RhdHVzKG9wdCk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoc2VyaWVzT3B0LnR5cGUgPT09ICd0cmVlJykge1xuICAgIHJlbW92ZUVDM05vcm1hbFN0YXR1cyhzZXJpZXNPcHQubGVhdmVzKTtcbiAgfSAvLyBzdW5idXJzdCBzdGFydHMgZnJvbSBlYzQsIHNvIGl0IGRvZXMgbm90IG5lZWQgdG8gY29tcGF0IGxldmVscy5cblxufVxuXG5mdW5jdGlvbiB0b0FycihvKSB7XG4gIHJldHVybiB6clV0aWwuaXNBcnJheShvKSA/IG8gOiBvID8gW29dIDogW107XG59XG5cbmZ1bmN0aW9uIHRvT2JqKG8pIHtcbiAgcmV0dXJuICh6clV0aWwuaXNBcnJheShvKSA/IG9bMF0gOiBvKSB8fCB7fTtcbn1cblxuZnVuY3Rpb24gX2RlZmF1bHQob3B0aW9uLCBpc1RoZW1lKSB7XG4gIGVhY2godG9BcnIob3B0aW9uLnNlcmllcyksIGZ1bmN0aW9uIChzZXJpZXNPcHQpIHtcbiAgICBpc09iamVjdChzZXJpZXNPcHQpICYmIHByb2Nlc3NTZXJpZXMoc2VyaWVzT3B0KTtcbiAgfSk7XG4gIHZhciBheGVzID0gWyd4QXhpcycsICd5QXhpcycsICdyYWRpdXNBeGlzJywgJ2FuZ2xlQXhpcycsICdzaW5nbGVBeGlzJywgJ3BhcmFsbGVsQXhpcycsICdyYWRhciddO1xuICBpc1RoZW1lICYmIGF4ZXMucHVzaCgndmFsdWVBeGlzJywgJ2NhdGVnb3J5QXhpcycsICdsb2dBeGlzJywgJ3RpbWVBeGlzJyk7XG4gIGVhY2goYXhlcywgZnVuY3Rpb24gKGF4aXNOYW1lKSB7XG4gICAgZWFjaCh0b0FycihvcHRpb25bYXhpc05hbWVdKSwgZnVuY3Rpb24gKGF4aXNPcHQpIHtcbiAgICAgIGlmIChheGlzT3B0KSB7XG4gICAgICAgIGNvbXBhdFRleHRTdHlsZShheGlzT3B0LCAnYXhpc0xhYmVsJyk7XG4gICAgICAgIGNvbXBhdFRleHRTdHlsZShheGlzT3B0LmF4aXNQb2ludGVyLCAnbGFiZWwnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIGVhY2godG9BcnIob3B0aW9uLnBhcmFsbGVsKSwgZnVuY3Rpb24gKHBhcmFsbGVsT3B0KSB7XG4gICAgdmFyIHBhcmFsbGVsQXhpc0RlZmF1bHQgPSBwYXJhbGxlbE9wdCAmJiBwYXJhbGxlbE9wdC5wYXJhbGxlbEF4aXNEZWZhdWx0O1xuICAgIGNvbXBhdFRleHRTdHlsZShwYXJhbGxlbEF4aXNEZWZhdWx0LCAnYXhpc0xhYmVsJyk7XG4gICAgY29tcGF0VGV4dFN0eWxlKHBhcmFsbGVsQXhpc0RlZmF1bHQgJiYgcGFyYWxsZWxBeGlzRGVmYXVsdC5heGlzUG9pbnRlciwgJ2xhYmVsJyk7XG4gIH0pO1xuICBlYWNoKHRvQXJyKG9wdGlvbi5jYWxlbmRhciksIGZ1bmN0aW9uIChjYWxlbmRhck9wdCkge1xuICAgIGNvbnZlcnROb3JtYWxFbXBoYXNpcyhjYWxlbmRhck9wdCwgJ2l0ZW1TdHlsZScpO1xuICAgIGNvbXBhdFRleHRTdHlsZShjYWxlbmRhck9wdCwgJ2RheUxhYmVsJyk7XG4gICAgY29tcGF0VGV4dFN0eWxlKGNhbGVuZGFyT3B0LCAnbW9udGhMYWJlbCcpO1xuICAgIGNvbXBhdFRleHRTdHlsZShjYWxlbmRhck9wdCwgJ3llYXJMYWJlbCcpO1xuICB9KTsgLy8gcmFkYXIubmFtZS50ZXh0U3R5bGVcblxuICBlYWNoKHRvQXJyKG9wdGlvbi5yYWRhciksIGZ1bmN0aW9uIChyYWRhck9wdCkge1xuICAgIGNvbXBhdFRleHRTdHlsZShyYWRhck9wdCwgJ25hbWUnKTtcbiAgfSk7XG4gIGVhY2godG9BcnIob3B0aW9uLmdlbyksIGZ1bmN0aW9uIChnZW9PcHQpIHtcbiAgICBpZiAoaXNPYmplY3QoZ2VvT3B0KSkge1xuICAgICAgY29tcGF0RUMzQ29tbW9uU3R5bGVzKGdlb09wdCk7XG4gICAgICBlYWNoKHRvQXJyKGdlb09wdC5yZWdpb25zKSwgZnVuY3Rpb24gKHJlZ2lvbk9iaikge1xuICAgICAgICBjb21wYXRFQzNDb21tb25TdHlsZXMocmVnaW9uT2JqKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIGVhY2godG9BcnIob3B0aW9uLnRpbWVsaW5lKSwgZnVuY3Rpb24gKHRpbWVsaW5lT3B0KSB7XG4gICAgY29tcGF0RUMzQ29tbW9uU3R5bGVzKHRpbWVsaW5lT3B0KTtcbiAgICBjb252ZXJ0Tm9ybWFsRW1waGFzaXModGltZWxpbmVPcHQsICdsYWJlbCcpO1xuICAgIGNvbnZlcnROb3JtYWxFbXBoYXNpcyh0aW1lbGluZU9wdCwgJ2l0ZW1TdHlsZScpO1xuICAgIGNvbnZlcnROb3JtYWxFbXBoYXNpcyh0aW1lbGluZU9wdCwgJ2NvbnRyb2xTdHlsZScsIHRydWUpO1xuICAgIHZhciBkYXRhID0gdGltZWxpbmVPcHQuZGF0YTtcbiAgICB6clV0aWwuaXNBcnJheShkYXRhKSAmJiB6clV0aWwuZWFjaChkYXRhLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgaWYgKHpyVXRpbC5pc09iamVjdChpdGVtKSkge1xuICAgICAgICBjb252ZXJ0Tm9ybWFsRW1waGFzaXMoaXRlbSwgJ2xhYmVsJyk7XG4gICAgICAgIGNvbnZlcnROb3JtYWxFbXBoYXNpcyhpdGVtLCAnaXRlbVN0eWxlJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICBlYWNoKHRvQXJyKG9wdGlvbi50b29sYm94KSwgZnVuY3Rpb24gKHRvb2xib3hPcHQpIHtcbiAgICBjb252ZXJ0Tm9ybWFsRW1waGFzaXModG9vbGJveE9wdCwgJ2ljb25TdHlsZScpO1xuICAgIGVhY2godG9vbGJveE9wdC5mZWF0dXJlLCBmdW5jdGlvbiAoZmVhdHVyZU9wdCkge1xuICAgICAgY29udmVydE5vcm1hbEVtcGhhc2lzKGZlYXR1cmVPcHQsICdpY29uU3R5bGUnKTtcbiAgICB9KTtcbiAgfSk7XG4gIGNvbXBhdFRleHRTdHlsZSh0b09iaihvcHRpb24uYXhpc1BvaW50ZXIpLCAnbGFiZWwnKTtcbiAgY29tcGF0VGV4dFN0eWxlKHRvT2JqKG9wdGlvbi50b29sdGlwKS5heGlzUG9pbnRlciwgJ2xhYmVsJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwiLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuZnVuY3Rpb24gX2RlZmF1bHQoc2VyaWVzVHlwZSkge1xuICByZXR1cm4ge1xuICAgIHNlcmllc1R5cGU6IHNlcmllc1R5cGUsXG4gICAgcmVzZXQ6IGZ1bmN0aW9uIChzZXJpZXNNb2RlbCwgZWNNb2RlbCkge1xuICAgICAgdmFyIGxlZ2VuZE1vZGVscyA9IGVjTW9kZWwuZmluZENvbXBvbmVudHMoe1xuICAgICAgICBtYWluVHlwZTogJ2xlZ2VuZCdcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIWxlZ2VuZE1vZGVscyB8fCAhbGVnZW5kTW9kZWxzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBkYXRhID0gc2VyaWVzTW9kZWwuZ2V0RGF0YSgpO1xuICAgICAgZGF0YS5maWx0ZXJTZWxmKGZ1bmN0aW9uIChpZHgpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBkYXRhLmdldE5hbWUoaWR4KTsgLy8gSWYgaW4gYW55IGxlZ2VuZCBjb21wb25lbnQgdGhlIHN0YXR1cyBpcyBub3Qgc2VsZWN0ZWQuXG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZWdlbmRNb2RlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoIWxlZ2VuZE1vZGVsc1tpXS5pc1NlbGVjdGVkKG5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIF91dGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxudmFyIGNyZWF0ZUhhc2hNYXAgPSBfdXRpbC5jcmVhdGVIYXNoTWFwO1xudmFyIGVhY2ggPSBfdXRpbC5lYWNoO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG4vLyAoMSkgW0NhdXRpb25dOiB0aGUgbG9naWMgaXMgY29ycmVjdCBiYXNlZCBvbiB0aGUgcHJlbWlzZXM6XG4vLyAgICAgZGF0YSBwcm9jZXNzaW5nIHN0YWdlIGlzIGJsb2NrZWQgaW4gc3RyZWFtLlxuLy8gICAgIFNlZSA8bW9kdWxlOmVjaGFydHMvc3RyZWFtL1NjaGVkdWxlciNwZXJmb3JtRGF0YVByb2Nlc3NvclRhc2tzPlxuLy8gKDIpIE9ubHkgcmVnaXN0ZXIgb25jZSB3aGVuIGltcG9ydCByZXBlYXRseS5cbi8vICAgICBTaG91bGQgYmUgZXhlY3V0ZWQgYmVmb3JlIGFmdGVyIHNlcmllcyBmaWx0ZXJlZCBhbmQgYmVmb3JlIHN0YWNrIGNhbGN1bGF0aW9uLlxuZnVuY3Rpb24gX2RlZmF1bHQoZWNNb2RlbCkge1xuICB2YXIgc3RhY2tJbmZvTWFwID0gY3JlYXRlSGFzaE1hcCgpO1xuICBlY01vZGVsLmVhY2hTZXJpZXMoZnVuY3Rpb24gKHNlcmllc01vZGVsKSB7XG4gICAgdmFyIHN0YWNrID0gc2VyaWVzTW9kZWwuZ2V0KCdzdGFjaycpOyAvLyBDb21wYXRpYmFsOiB3aGVuIGBzdGFja2AgaXMgc2V0IGFzICcnLCBkbyBub3Qgc3RhY2suXG5cbiAgICBpZiAoc3RhY2spIHtcbiAgICAgIHZhciBzdGFja0luZm9MaXN0ID0gc3RhY2tJbmZvTWFwLmdldChzdGFjaykgfHwgc3RhY2tJbmZvTWFwLnNldChzdGFjaywgW10pO1xuICAgICAgdmFyIGRhdGEgPSBzZXJpZXNNb2RlbC5nZXREYXRhKCk7XG4gICAgICB2YXIgc3RhY2tJbmZvID0ge1xuICAgICAgICAvLyBVc2VkIGZvciBjYWxjdWxhdGUgYXhpcyBleHRlbnQgYXV0b21hdGljYWxseS5cbiAgICAgICAgc3RhY2tSZXN1bHREaW1lbnNpb246IGRhdGEuZ2V0Q2FsY3VsYXRpb25JbmZvKCdzdGFja1Jlc3VsdERpbWVuc2lvbicpLFxuICAgICAgICBzdGFja2VkT3ZlckRpbWVuc2lvbjogZGF0YS5nZXRDYWxjdWxhdGlvbkluZm8oJ3N0YWNrZWRPdmVyRGltZW5zaW9uJyksXG4gICAgICAgIHN0YWNrZWREaW1lbnNpb246IGRhdGEuZ2V0Q2FsY3VsYXRpb25JbmZvKCdzdGFja2VkRGltZW5zaW9uJyksXG4gICAgICAgIHN0YWNrZWRCeURpbWVuc2lvbjogZGF0YS5nZXRDYWxjdWxhdGlvbkluZm8oJ3N0YWNrZWRCeURpbWVuc2lvbicpLFxuICAgICAgICBpc1N0YWNrZWRCeUluZGV4OiBkYXRhLmdldENhbGN1bGF0aW9uSW5mbygnaXNTdGFja2VkQnlJbmRleCcpLFxuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBzZXJpZXNNb2RlbDogc2VyaWVzTW9kZWxcbiAgICAgIH07IC8vIElmIHN0YWNrZWQgb24gYXhpcyB0aGF0IGRvIG5vdCBzdXBwb3J0IGRhdGEgc3RhY2suXG5cbiAgICAgIGlmICghc3RhY2tJbmZvLnN0YWNrZWREaW1lbnNpb24gfHwgIShzdGFja0luZm8uaXNTdGFja2VkQnlJbmRleCB8fCBzdGFja0luZm8uc3RhY2tlZEJ5RGltZW5zaW9uKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN0YWNrSW5mb0xpc3QubGVuZ3RoICYmIGRhdGEuc2V0Q2FsY3VsYXRpb25JbmZvKCdzdGFja2VkT25TZXJpZXMnLCBzdGFja0luZm9MaXN0W3N0YWNrSW5mb0xpc3QubGVuZ3RoIC0gMV0uc2VyaWVzTW9kZWwpO1xuICAgICAgc3RhY2tJbmZvTGlzdC5wdXNoKHN0YWNrSW5mbyk7XG4gICAgfVxuICB9KTtcbiAgc3RhY2tJbmZvTWFwLmVhY2goY2FsY3VsYXRlU3RhY2spO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVTdGFjayhzdGFja0luZm9MaXN0KSB7XG4gIGVhY2goc3RhY2tJbmZvTGlzdCwgZnVuY3Rpb24gKHRhcmdldFN0YWNrSW5mbywgaWR4SW5TdGFjaykge1xuICAgIHZhciByZXN1bHRWYWwgPSBbXTtcbiAgICB2YXIgcmVzdWx0TmFOID0gW05hTiwgTmFOXTtcbiAgICB2YXIgZGltcyA9IFt0YXJnZXRTdGFja0luZm8uc3RhY2tSZXN1bHREaW1lbnNpb24sIHRhcmdldFN0YWNrSW5mby5zdGFja2VkT3ZlckRpbWVuc2lvbl07XG4gICAgdmFyIHRhcmdldERhdGEgPSB0YXJnZXRTdGFja0luZm8uZGF0YTtcbiAgICB2YXIgaXNTdGFja2VkQnlJbmRleCA9IHRhcmdldFN0YWNrSW5mby5pc1N0YWNrZWRCeUluZGV4OyAvLyBTaG91bGQgbm90IHdyaXRlIG9uIHJhdyBkYXRhLCBiZWNhdXNlIHN0YWNrIHNlcmllcyBtb2RlbCBsaXN0IGNoYW5nZXNcbiAgICAvLyBkZXBlbmRpbmcgb24gbGVnZW5kIHNlbGVjdGlvbi5cblxuICAgIHZhciBuZXdEYXRhID0gdGFyZ2V0RGF0YS5tYXAoZGltcywgZnVuY3Rpb24gKHYwLCB2MSwgZGF0YUluZGV4KSB7XG4gICAgICB2YXIgc3VtID0gdGFyZ2V0RGF0YS5nZXQodGFyZ2V0U3RhY2tJbmZvLnN0YWNrZWREaW1lbnNpb24sIGRhdGFJbmRleCk7IC8vIENvbnNpZGVyIGBjb25uZWN0TnVsbHNgIG9mIGxpbmUgYXJlYSwgaWYgdmFsdWUgaXMgTmFOLCBzdGFja2VkT3ZlclxuICAgICAgLy8gc2hvdWxkIGFsc28gYmUgTmFOLCB0byBkcmF3IGEgYXBwcm9wcmlhdGUgYmVsdCBhcmVhLlxuXG4gICAgICBpZiAoaXNOYU4oc3VtKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0TmFOO1xuICAgICAgfVxuXG4gICAgICB2YXIgYnlWYWx1ZTtcbiAgICAgIHZhciBzdGFja2VkRGF0YVJhd0luZGV4O1xuXG4gICAgICBpZiAoaXNTdGFja2VkQnlJbmRleCkge1xuICAgICAgICBzdGFja2VkRGF0YVJhd0luZGV4ID0gdGFyZ2V0RGF0YS5nZXRSYXdJbmRleChkYXRhSW5kZXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnlWYWx1ZSA9IHRhcmdldERhdGEuZ2V0KHRhcmdldFN0YWNrSW5mby5zdGFja2VkQnlEaW1lbnNpb24sIGRhdGFJbmRleCk7XG4gICAgICB9IC8vIElmIHN0YWNrT3ZlciBpcyBOYU4sIGNoYXJ0IHZpZXcgd2lsbCByZW5kZXIgcG9pbnQgb24gdmFsdWUgc3RhcnQuXG5cblxuICAgICAgdmFyIHN0YWNrZWRPdmVyID0gTmFOO1xuXG4gICAgICBmb3IgKHZhciBqID0gaWR4SW5TdGFjayAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgIHZhciBzdGFja0luZm8gPSBzdGFja0luZm9MaXN0W2pdOyAvLyBIYXMgYmVlbiBvcHRpbWl6ZWQgYnkgaW52ZXJ0ZWQgaW5kaWNlcyBvbiBgc3RhY2tlZEJ5RGltZW5zaW9uYC5cblxuICAgICAgICBpZiAoIWlzU3RhY2tlZEJ5SW5kZXgpIHtcbiAgICAgICAgICBzdGFja2VkRGF0YVJhd0luZGV4ID0gc3RhY2tJbmZvLmRhdGEucmF3SW5kZXhPZihzdGFja0luZm8uc3RhY2tlZEJ5RGltZW5zaW9uLCBieVZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGFja2VkRGF0YVJhd0luZGV4ID49IDApIHtcbiAgICAgICAgICB2YXIgdmFsID0gc3RhY2tJbmZvLmRhdGEuZ2V0QnlSYXdJbmRleChzdGFja0luZm8uc3RhY2tSZXN1bHREaW1lbnNpb24sIHN0YWNrZWREYXRhUmF3SW5kZXgpOyAvLyBDb25zaWRlcmluZyBwb3NpdGl2ZSBzdGFjaywgbmVnYXRpdmUgc3RhY2sgYW5kIGVtcHR5IGRhdGFcblxuICAgICAgICAgIGlmIChzdW0gPj0gMCAmJiB2YWwgPiAwIHx8IC8vIFBvc2l0aXZlIHN0YWNrXG4gICAgICAgICAgc3VtIDw9IDAgJiYgdmFsIDwgMCAvLyBOZWdhdGl2ZSBzdGFja1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgICBzdW0gKz0gdmFsO1xuICAgICAgICAgICAgICBzdGFja2VkT3ZlciA9IHZhbDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVzdWx0VmFsWzBdID0gc3VtO1xuICAgICAgcmVzdWx0VmFsWzFdID0gc3RhY2tlZE92ZXI7XG4gICAgICByZXR1cm4gcmVzdWx0VmFsO1xuICAgIH0pO1xuICAgIHRhcmdldERhdGEuaG9zdE1vZGVsLnNldERhdGEobmV3RGF0YSk7IC8vIFVwZGF0ZSBmb3IgY29uc2VxdWVudCBjYWxjdWxhdGlvblxuXG4gICAgdGFyZ2V0U3RhY2tJbmZvLmRhdGEgPSBuZXdEYXRhO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgbnVtYmVyVXRpbCA9IHJlcXVpcmUoXCIuLi91dGlsL251bWJlclwiKTtcblxudmFyIGZvcm1hdFV0aWwgPSByZXF1aXJlKFwiLi4vdXRpbC9mb3JtYXRcIik7XG5cbnZhciBTY2FsZSA9IHJlcXVpcmUoXCIuL1NjYWxlXCIpO1xuXG52YXIgaGVscGVyID0gcmVxdWlyZShcIi4vaGVscGVyXCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbi8qKlxuICogSW50ZXJ2YWwgc2NhbGVcbiAqIEBtb2R1bGUgZWNoYXJ0cy9zY2FsZS9JbnRlcnZhbFxuICovXG52YXIgcm91bmROdW1iZXIgPSBudW1iZXJVdGlsLnJvdW5kO1xuLyoqXG4gKiBAYWxpYXMgbW9kdWxlOmVjaGFydHMvY29vcmQvc2NhbGUvSW50ZXJ2YWxcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5cbnZhciBJbnRlcnZhbFNjYWxlID0gU2NhbGUuZXh0ZW5kKHtcbiAgdHlwZTogJ2ludGVydmFsJyxcbiAgX2ludGVydmFsOiAwLFxuICBfaW50ZXJ2YWxQcmVjaXNpb246IDIsXG4gIHNldEV4dGVudDogZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgdGhpc0V4dGVudCA9IHRoaXMuX2V4dGVudDsgLy9zdGFydCxlbmQgbWF5IGJlIGEgTnVtYmVyIGxpa2UgJzI1Jyxzby4uLlxuXG4gICAgaWYgKCFpc05hTihzdGFydCkpIHtcbiAgICAgIHRoaXNFeHRlbnRbMF0gPSBwYXJzZUZsb2F0KHN0YXJ0KTtcbiAgICB9XG5cbiAgICBpZiAoIWlzTmFOKGVuZCkpIHtcbiAgICAgIHRoaXNFeHRlbnRbMV0gPSBwYXJzZUZsb2F0KGVuZCk7XG4gICAgfVxuICB9LFxuICB1bmlvbkV4dGVudDogZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgdmFyIGV4dGVudCA9IHRoaXMuX2V4dGVudDtcbiAgICBvdGhlclswXSA8IGV4dGVudFswXSAmJiAoZXh0ZW50WzBdID0gb3RoZXJbMF0pO1xuICAgIG90aGVyWzFdID4gZXh0ZW50WzFdICYmIChleHRlbnRbMV0gPSBvdGhlclsxXSk7IC8vIHVuaW9uRXh0ZW50IG1heSBjYWxsZWQgYnkgaXQncyBzdWIgY2xhc3Nlc1xuXG4gICAgSW50ZXJ2YWxTY2FsZS5wcm90b3R5cGUuc2V0RXh0ZW50LmNhbGwodGhpcywgZXh0ZW50WzBdLCBleHRlbnRbMV0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgaW50ZXJ2YWxcbiAgICovXG4gIGdldEludGVydmFsOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludGVydmFsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXQgaW50ZXJ2YWxcbiAgICovXG4gIHNldEludGVydmFsOiBmdW5jdGlvbiAoaW50ZXJ2YWwpIHtcbiAgICB0aGlzLl9pbnRlcnZhbCA9IGludGVydmFsOyAvLyBEcm9wcGVkIGF1dG8gY2FsY3VsYXRlZCBuaWNlRXh0ZW50IGFuZCB1c2UgdXNlciBzZXR0ZWQgZXh0ZW50XG4gICAgLy8gV2UgYXNzdW1lIHVzZXIgd2FuJ3QgdG8gc2V0IGJvdGggaW50ZXJ2YWwsIG1pbiwgbWF4IHRvIGdldCBhIGJldHRlciByZXN1bHRcblxuICAgIHRoaXMuX25pY2VFeHRlbnQgPSB0aGlzLl9leHRlbnQuc2xpY2UoKTtcbiAgICB0aGlzLl9pbnRlcnZhbFByZWNpc2lvbiA9IGhlbHBlci5nZXRJbnRlcnZhbFByZWNpc2lvbihpbnRlcnZhbCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0FycmF5LjxudW1iZXI+fVxuICAgKi9cbiAgZ2V0VGlja3M6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaGVscGVyLmludGVydmFsU2NhbGVHZXRUaWNrcyh0aGlzLl9pbnRlcnZhbCwgdGhpcy5fZXh0ZW50LCB0aGlzLl9uaWNlRXh0ZW50LCB0aGlzLl9pbnRlcnZhbFByZWNpc2lvbik7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkYXRhXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0XVxuICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IFtvcHQucHJlY2lzaW9uXSBJZiAnYXV0bycsIHVzZSBuaWNlIHByZXNpc2lvbi5cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0LnBhZF0gcmV0dXJucyAxLjUwIGJ1dCBub3QgMS41IGlmIHByZWNpc2lvbiBpcyAyLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXRMYWJlbDogZnVuY3Rpb24gKGRhdGEsIG9wdCkge1xuICAgIGlmIChkYXRhID09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICB2YXIgcHJlY2lzaW9uID0gb3B0ICYmIG9wdC5wcmVjaXNpb247XG5cbiAgICBpZiAocHJlY2lzaW9uID09IG51bGwpIHtcbiAgICAgIHByZWNpc2lvbiA9IG51bWJlclV0aWwuZ2V0UHJlY2lzaW9uU2FmZShkYXRhKSB8fCAwO1xuICAgIH0gZWxzZSBpZiAocHJlY2lzaW9uID09PSAnYXV0bycpIHtcbiAgICAgIC8vIFNob3VsZCBiZSBtb3JlIHByZWNpc2UgdGhlbiB0aWNrLlxuICAgICAgcHJlY2lzaW9uID0gdGhpcy5faW50ZXJ2YWxQcmVjaXNpb247XG4gICAgfSAvLyAoMSkgSWYgYHByZWNpc2lvbmAgaXMgc2V0LCAxMi4wMDUgc2hvdWxkIGJlIGRpc3BsYXkgYXMgJzEyLjAwNTAwJy5cbiAgICAvLyAoMikgVXNlIHJvdW5kTnVtYmVyICh0b0ZpeGVkKSB0byBhdm9pZCBzY2llbnRpZmljIG5vdGF0aW9uIGxpa2UgJzMuNWUtNycuXG5cblxuICAgIGRhdGEgPSByb3VuZE51bWJlcihkYXRhLCBwcmVjaXNpb24sIHRydWUpO1xuICAgIHJldHVybiBmb3JtYXRVdGlsLmFkZENvbW1hcyhkYXRhKTtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlIGludGVydmFsIGFuZCBleHRlbnQgb2YgaW50ZXJ2YWxzIGZvciBuaWNlIHRpY2tzXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc3BsaXROdW1iZXIgPSA1XSBEZXNpcmVkIG51bWJlciBvZiB0aWNrc1xuICAgKiBAcGFyYW0ge251bWJlcn0gW21pbkludGVydmFsXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW21heEludGVydmFsXVxuICAgKi9cbiAgbmljZVRpY2tzOiBmdW5jdGlvbiAoc3BsaXROdW1iZXIsIG1pbkludGVydmFsLCBtYXhJbnRlcnZhbCkge1xuICAgIHNwbGl0TnVtYmVyID0gc3BsaXROdW1iZXIgfHwgNTtcbiAgICB2YXIgZXh0ZW50ID0gdGhpcy5fZXh0ZW50O1xuICAgIHZhciBzcGFuID0gZXh0ZW50WzFdIC0gZXh0ZW50WzBdO1xuXG4gICAgaWYgKCFpc0Zpbml0ZShzcGFuKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gVXNlciBtYXkgc2V0IGF4aXMgbWluIDAgYW5kIGRhdGEgYXJlIGFsbCBuZWdhdGl2ZVxuICAgIC8vIEZJWE1FIElmIGl0IG5lZWRzIHRvIHJldmVyc2UgP1xuXG5cbiAgICBpZiAoc3BhbiA8IDApIHtcbiAgICAgIHNwYW4gPSAtc3BhbjtcbiAgICAgIGV4dGVudC5yZXZlcnNlKCk7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IGhlbHBlci5pbnRlcnZhbFNjYWxlTmljZVRpY2tzKGV4dGVudCwgc3BsaXROdW1iZXIsIG1pbkludGVydmFsLCBtYXhJbnRlcnZhbCk7XG4gICAgdGhpcy5faW50ZXJ2YWxQcmVjaXNpb24gPSByZXN1bHQuaW50ZXJ2YWxQcmVjaXNpb247XG4gICAgdGhpcy5faW50ZXJ2YWwgPSByZXN1bHQuaW50ZXJ2YWw7XG4gICAgdGhpcy5fbmljZUV4dGVudCA9IHJlc3VsdC5uaWNlVGlja0V4dGVudDtcbiAgfSxcblxuICAvKipcbiAgICogTmljZSBleHRlbnQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHQuc3BsaXROdW1iZXIgPSA1XSBHaXZlbiBhcHByb3ggdGljayBudW1iZXJcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0LmZpeE1pbj1mYWxzZV1cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0LmZpeE1heD1mYWxzZV1cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0Lm1pbkludGVydmFsXVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHQubWF4SW50ZXJ2YWxdXG4gICAqL1xuICBuaWNlRXh0ZW50OiBmdW5jdGlvbiAob3B0KSB7XG4gICAgdmFyIGV4dGVudCA9IHRoaXMuX2V4dGVudDsgLy8gSWYgZXh0ZW50IHN0YXJ0IGFuZCBlbmQgYXJlIHNhbWUsIGV4cGFuZCB0aGVtXG5cbiAgICBpZiAoZXh0ZW50WzBdID09PSBleHRlbnRbMV0pIHtcbiAgICAgIGlmIChleHRlbnRbMF0gIT09IDApIHtcbiAgICAgICAgLy8gRXhwYW5kIGV4dGVudFxuICAgICAgICB2YXIgZXhwYW5kU2l6ZSA9IGV4dGVudFswXTsgLy8gSW4gdGhlIGZvd2xsb3dpbmcgY2FzZVxuICAgICAgICAvLyAgICAgIEF4aXMgaGFzIGJlZW4gZml4ZWQgbWF4IDEwMFxuICAgICAgICAvLyAgICAgIFBsdXMgZGF0YSBhcmUgYWxsIDEwMCBhbmQgYXhpcyBleHRlbnQgYXJlIFsxMDAsIDEwMF0uXG4gICAgICAgIC8vIEV4dGVuZCB0byB0aGUgYm90aCBzaWRlIHdpbGwgY2F1c2UgZXhwYW5kZWQgbWF4IGlzIGxhcmdlciB0aGFuIGZpeGVkIG1heC5cbiAgICAgICAgLy8gU28gb25seSBleHBhbmQgdG8gdGhlIHNtYWxsZXIgc2lkZS5cblxuICAgICAgICBpZiAoIW9wdC5maXhNYXgpIHtcbiAgICAgICAgICBleHRlbnRbMV0gKz0gZXhwYW5kU2l6ZSAvIDI7XG4gICAgICAgICAgZXh0ZW50WzBdIC09IGV4cGFuZFNpemUgLyAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV4dGVudFswXSAtPSBleHBhbmRTaXplIC8gMjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXh0ZW50WzFdID0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc3BhbiA9IGV4dGVudFsxXSAtIGV4dGVudFswXTsgLy8gSWYgdGhlcmUgYXJlIG5vIGRhdGEgYW5kIGV4dGVudCBhcmUgW0luZmluaXR5LCAtSW5maW5pdHldXG5cbiAgICBpZiAoIWlzRmluaXRlKHNwYW4pKSB7XG4gICAgICBleHRlbnRbMF0gPSAwO1xuICAgICAgZXh0ZW50WzFdID0gMTtcbiAgICB9XG5cbiAgICB0aGlzLm5pY2VUaWNrcyhvcHQuc3BsaXROdW1iZXIsIG9wdC5taW5JbnRlcnZhbCwgb3B0Lm1heEludGVydmFsKTsgLy8gdmFyIGV4dGVudCA9IHRoaXMuX2V4dGVudDtcblxuICAgIHZhciBpbnRlcnZhbCA9IHRoaXMuX2ludGVydmFsO1xuXG4gICAgaWYgKCFvcHQuZml4TWluKSB7XG4gICAgICBleHRlbnRbMF0gPSByb3VuZE51bWJlcihNYXRoLmZsb29yKGV4dGVudFswXSAvIGludGVydmFsKSAqIGludGVydmFsKTtcbiAgICB9XG5cbiAgICBpZiAoIW9wdC5maXhNYXgpIHtcbiAgICAgIGV4dGVudFsxXSA9IHJvdW5kTnVtYmVyKE1hdGguY2VpbChleHRlbnRbMV0gLyBpbnRlcnZhbCkgKiBpbnRlcnZhbCk7XG4gICAgfVxuICB9XG59KTtcbi8qKlxuICogQHJldHVybiB7bW9kdWxlOmVjaGFydHMvc2NhbGUvVGltZX1cbiAqL1xuXG5JbnRlcnZhbFNjYWxlLmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBJbnRlcnZhbFNjYWxlKCk7XG59O1xuXG52YXIgX2RlZmF1bHQgPSBJbnRlcnZhbFNjYWxlO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgenJVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxudmFyIFNjYWxlID0gcmVxdWlyZShcIi4vU2NhbGVcIik7XG5cbnZhciBudW1iZXJVdGlsID0gcmVxdWlyZShcIi4uL3V0aWwvbnVtYmVyXCIpO1xuXG52YXIgSW50ZXJ2YWxTY2FsZSA9IHJlcXVpcmUoXCIuL0ludGVydmFsXCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbi8qKlxuICogTG9nIHNjYWxlXG4gKiBAbW9kdWxlIGVjaGFydHMvc2NhbGUvTG9nXG4gKi9cbi8vIFVzZSBzb21lIG1ldGhvZCBvZiBJbnRlcnZhbFNjYWxlXG52YXIgc2NhbGVQcm90byA9IFNjYWxlLnByb3RvdHlwZTtcbnZhciBpbnRlcnZhbFNjYWxlUHJvdG8gPSBJbnRlcnZhbFNjYWxlLnByb3RvdHlwZTtcbnZhciBnZXRQcmVjaXNpb25TYWZlID0gbnVtYmVyVXRpbC5nZXRQcmVjaXNpb25TYWZlO1xudmFyIHJvdW5kaW5nRXJyb3JGaXggPSBudW1iZXJVdGlsLnJvdW5kO1xudmFyIG1hdGhGbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbWF0aENlaWwgPSBNYXRoLmNlaWw7XG52YXIgbWF0aFBvdyA9IE1hdGgucG93O1xudmFyIG1hdGhMb2cgPSBNYXRoLmxvZztcbnZhciBMb2dTY2FsZSA9IFNjYWxlLmV4dGVuZCh7XG4gIHR5cGU6ICdsb2cnLFxuICBiYXNlOiAxMCxcbiAgJGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgU2NhbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLl9vcmlnaW5hbFNjYWxlID0gbmV3IEludGVydmFsU2NhbGUoKTtcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7QXJyYXkuPG51bWJlcj59XG4gICAqL1xuICBnZXRUaWNrczogZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcmlnaW5hbFNjYWxlID0gdGhpcy5fb3JpZ2luYWxTY2FsZTtcbiAgICB2YXIgZXh0ZW50ID0gdGhpcy5fZXh0ZW50O1xuICAgIHZhciBvcmlnaW5hbEV4dGVudCA9IG9yaWdpbmFsU2NhbGUuZ2V0RXh0ZW50KCk7XG4gICAgcmV0dXJuIHpyVXRpbC5tYXAoaW50ZXJ2YWxTY2FsZVByb3RvLmdldFRpY2tzLmNhbGwodGhpcyksIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHZhciBwb3dWYWwgPSBudW1iZXJVdGlsLnJvdW5kKG1hdGhQb3codGhpcy5iYXNlLCB2YWwpKTsgLy8gRml4ICM0MTU4XG5cbiAgICAgIHBvd1ZhbCA9IHZhbCA9PT0gZXh0ZW50WzBdICYmIG9yaWdpbmFsU2NhbGUuX19maXhNaW4gPyBmaXhSb3VuZGluZ0Vycm9yKHBvd1ZhbCwgb3JpZ2luYWxFeHRlbnRbMF0pIDogcG93VmFsO1xuICAgICAgcG93VmFsID0gdmFsID09PSBleHRlbnRbMV0gJiYgb3JpZ2luYWxTY2FsZS5fX2ZpeE1heCA/IGZpeFJvdW5kaW5nRXJyb3IocG93VmFsLCBvcmlnaW5hbEV4dGVudFsxXSkgOiBwb3dWYWw7XG4gICAgICByZXR1cm4gcG93VmFsO1xuICAgIH0sIHRoaXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldExhYmVsOiBpbnRlcnZhbFNjYWxlUHJvdG8uZ2V0TGFiZWwsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSAge251bWJlcn0gdmFsXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHNjYWxlOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgdmFsID0gc2NhbGVQcm90by5zY2FsZS5jYWxsKHRoaXMsIHZhbCk7XG4gICAgcmV0dXJuIG1hdGhQb3codGhpcy5iYXNlLCB2YWwpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICAgKi9cbiAgc2V0RXh0ZW50OiBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgIHZhciBiYXNlID0gdGhpcy5iYXNlO1xuICAgIHN0YXJ0ID0gbWF0aExvZyhzdGFydCkgLyBtYXRoTG9nKGJhc2UpO1xuICAgIGVuZCA9IG1hdGhMb2coZW5kKSAvIG1hdGhMb2coYmFzZSk7XG4gICAgaW50ZXJ2YWxTY2FsZVByb3RvLnNldEV4dGVudC5jYWxsKHRoaXMsIHN0YXJ0LCBlbmQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IGVuZFxuICAgKi9cbiAgZ2V0RXh0ZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJhc2UgPSB0aGlzLmJhc2U7XG4gICAgdmFyIGV4dGVudCA9IHNjYWxlUHJvdG8uZ2V0RXh0ZW50LmNhbGwodGhpcyk7XG4gICAgZXh0ZW50WzBdID0gbWF0aFBvdyhiYXNlLCBleHRlbnRbMF0pO1xuICAgIGV4dGVudFsxXSA9IG1hdGhQb3coYmFzZSwgZXh0ZW50WzFdKTsgLy8gRml4ICM0MTU4XG5cbiAgICB2YXIgb3JpZ2luYWxTY2FsZSA9IHRoaXMuX29yaWdpbmFsU2NhbGU7XG4gICAgdmFyIG9yaWdpbmFsRXh0ZW50ID0gb3JpZ2luYWxTY2FsZS5nZXRFeHRlbnQoKTtcbiAgICBvcmlnaW5hbFNjYWxlLl9fZml4TWluICYmIChleHRlbnRbMF0gPSBmaXhSb3VuZGluZ0Vycm9yKGV4dGVudFswXSwgb3JpZ2luYWxFeHRlbnRbMF0pKTtcbiAgICBvcmlnaW5hbFNjYWxlLl9fZml4TWF4ICYmIChleHRlbnRbMV0gPSBmaXhSb3VuZGluZ0Vycm9yKGV4dGVudFsxXSwgb3JpZ2luYWxFeHRlbnRbMV0pKTtcbiAgICByZXR1cm4gZXh0ZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0gIHtBcnJheS48bnVtYmVyPn0gZXh0ZW50XG4gICAqL1xuICB1bmlvbkV4dGVudDogZnVuY3Rpb24gKGV4dGVudCkge1xuICAgIHRoaXMuX29yaWdpbmFsU2NhbGUudW5pb25FeHRlbnQoZXh0ZW50KTtcblxuICAgIHZhciBiYXNlID0gdGhpcy5iYXNlO1xuICAgIGV4dGVudFswXSA9IG1hdGhMb2coZXh0ZW50WzBdKSAvIG1hdGhMb2coYmFzZSk7XG4gICAgZXh0ZW50WzFdID0gbWF0aExvZyhleHRlbnRbMV0pIC8gbWF0aExvZyhiYXNlKTtcbiAgICBzY2FsZVByb3RvLnVuaW9uRXh0ZW50LmNhbGwodGhpcywgZXh0ZW50KTtcbiAgfSxcblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB1bmlvbkV4dGVudEZyb21EYXRhOiBmdW5jdGlvbiAoZGF0YSwgZGltKSB7XG4gICAgLy8gVE9ET1xuICAgIC8vIGZpbHRlciB2YWx1ZSB0aGF0IDw9IDBcbiAgICB0aGlzLnVuaW9uRXh0ZW50KGRhdGEuZ2V0QXBwcm94aW1hdGVFeHRlbnQoZGltKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBpbnRlcnZhbCBhbmQgZXh0ZW50IG9mIGludGVydmFscyBmb3IgbmljZSB0aWNrc1xuICAgKiBAcGFyYW0gIHtudW1iZXJ9IFthcHByb3hUaWNrTnVtID0gMTBdIEdpdmVuIGFwcHJveCB0aWNrIG51bWJlclxuICAgKi9cbiAgbmljZVRpY2tzOiBmdW5jdGlvbiAoYXBwcm94VGlja051bSkge1xuICAgIGFwcHJveFRpY2tOdW0gPSBhcHByb3hUaWNrTnVtIHx8IDEwO1xuICAgIHZhciBleHRlbnQgPSB0aGlzLl9leHRlbnQ7XG4gICAgdmFyIHNwYW4gPSBleHRlbnRbMV0gLSBleHRlbnRbMF07XG5cbiAgICBpZiAoc3BhbiA9PT0gSW5maW5pdHkgfHwgc3BhbiA8PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGludGVydmFsID0gbnVtYmVyVXRpbC5xdWFudGl0eShzcGFuKTtcbiAgICB2YXIgZXJyID0gYXBwcm94VGlja051bSAvIHNwYW4gKiBpbnRlcnZhbDsgLy8gRmlsdGVyIHRpY2tzIHRvIGdldCBjbG9zZXIgdG8gdGhlIGRlc2lyZWQgY291bnQuXG5cbiAgICBpZiAoZXJyIDw9IDAuNSkge1xuICAgICAgaW50ZXJ2YWwgKj0gMTA7XG4gICAgfSAvLyBJbnRlcnZhbCBzaG91bGQgYmUgaW50ZWdlclxuXG5cbiAgICB3aGlsZSAoIWlzTmFOKGludGVydmFsKSAmJiBNYXRoLmFicyhpbnRlcnZhbCkgPCAxICYmIE1hdGguYWJzKGludGVydmFsKSA+IDApIHtcbiAgICAgIGludGVydmFsICo9IDEwO1xuICAgIH1cblxuICAgIHZhciBuaWNlRXh0ZW50ID0gW251bWJlclV0aWwucm91bmQobWF0aENlaWwoZXh0ZW50WzBdIC8gaW50ZXJ2YWwpICogaW50ZXJ2YWwpLCBudW1iZXJVdGlsLnJvdW5kKG1hdGhGbG9vcihleHRlbnRbMV0gLyBpbnRlcnZhbCkgKiBpbnRlcnZhbCldO1xuICAgIHRoaXMuX2ludGVydmFsID0gaW50ZXJ2YWw7XG4gICAgdGhpcy5fbmljZUV4dGVudCA9IG5pY2VFeHRlbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE5pY2UgZXh0ZW50LlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIG5pY2VFeHRlbnQ6IGZ1bmN0aW9uIChvcHQpIHtcbiAgICBpbnRlcnZhbFNjYWxlUHJvdG8ubmljZUV4dGVudC5jYWxsKHRoaXMsIG9wdCk7XG4gICAgdmFyIG9yaWdpbmFsU2NhbGUgPSB0aGlzLl9vcmlnaW5hbFNjYWxlO1xuICAgIG9yaWdpbmFsU2NhbGUuX19maXhNaW4gPSBvcHQuZml4TWluO1xuICAgIG9yaWdpbmFsU2NhbGUuX19maXhNYXggPSBvcHQuZml4TWF4O1xuICB9XG59KTtcbnpyVXRpbC5lYWNoKFsnY29udGFpbicsICdub3JtYWxpemUnXSwgZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcbiAgTG9nU2NhbGUucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24gKHZhbCkge1xuICAgIHZhbCA9IG1hdGhMb2codmFsKSAvIG1hdGhMb2codGhpcy5iYXNlKTtcbiAgICByZXR1cm4gc2NhbGVQcm90b1ttZXRob2ROYW1lXS5jYWxsKHRoaXMsIHZhbCk7XG4gIH07XG59KTtcblxuTG9nU2NhbGUuY3JlYXRlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IExvZ1NjYWxlKCk7XG59O1xuXG5mdW5jdGlvbiBmaXhSb3VuZGluZ0Vycm9yKHZhbCwgb3JpZ2luYWxWYWwpIHtcbiAgcmV0dXJuIHJvdW5kaW5nRXJyb3JGaXgodmFsLCBnZXRQcmVjaXNpb25TYWZlKG9yaWdpbmFsVmFsKSk7XG59XG5cbnZhciBfZGVmYXVsdCA9IExvZ1NjYWxlO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgenJVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxudmFyIFNjYWxlID0gcmVxdWlyZShcIi4vU2NhbGVcIik7XG5cbnZhciBPcmRpbmFsTWV0YSA9IHJlcXVpcmUoXCIuLi9kYXRhL09yZGluYWxNZXRhXCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbi8qKlxuICogTGluZWFyIGNvbnRpbnVvdXMgc2NhbGVcbiAqIEBtb2R1bGUgZWNoYXJ0cy9jb29yZC9zY2FsZS9PcmRpbmFsXG4gKlxuICogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXZlbF9vZl9tZWFzdXJlbWVudFxuICovXG4vLyBGSVhNRSBvbmx5IG9uZSBkYXRhXG52YXIgc2NhbGVQcm90byA9IFNjYWxlLnByb3RvdHlwZTtcbnZhciBPcmRpbmFsU2NhbGUgPSBTY2FsZS5leHRlbmQoe1xuICB0eXBlOiAnb3JkaW5hbCcsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvZGF0YS9PcmRpYW5sTWV0YXxBcnJheS48c3RyaW5nPn0gb3JkaW5hbE1ldGFcbiAgICovXG4gIGluaXQ6IGZ1bmN0aW9uIChvcmRpbmFsTWV0YSwgZXh0ZW50KSB7XG4gICAgLy8gQ2F1dGlvbjogU2hvdWxkIG5vdCB1c2UgaW5zdGFuY2VvZiwgY29uc2lkZXIgZWMtZXh0ZW5zaW9ucyB1c2luZ1xuICAgIC8vIGltcG9ydCBhcHByb2FjaCB0byBnZXQgT3JkaW5hbE1ldGEgY2xhc3MuXG4gICAgaWYgKCFvcmRpbmFsTWV0YSB8fCB6clV0aWwuaXNBcnJheShvcmRpbmFsTWV0YSkpIHtcbiAgICAgIG9yZGluYWxNZXRhID0gbmV3IE9yZGluYWxNZXRhKHtcbiAgICAgICAgY2F0ZWdvcmllczogb3JkaW5hbE1ldGFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuX29yZGluYWxNZXRhID0gb3JkaW5hbE1ldGE7XG4gICAgdGhpcy5fZXh0ZW50ID0gZXh0ZW50IHx8IFswLCBvcmRpbmFsTWV0YS5jYXRlZ29yaWVzLmxlbmd0aCAtIDFdO1xuICB9LFxuICBwYXJzZTogZnVuY3Rpb24gKHZhbCkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/IHRoaXMuX29yZGluYWxNZXRhLmdldE9yZGluYWwodmFsKSAvLyB2YWwgbWlnaHQgYmUgZmxvYXQuXG4gICAgOiBNYXRoLnJvdW5kKHZhbCk7XG4gIH0sXG4gIGNvbnRhaW46IGZ1bmN0aW9uIChyYW5rKSB7XG4gICAgcmFuayA9IHRoaXMucGFyc2UocmFuayk7XG4gICAgcmV0dXJuIHNjYWxlUHJvdG8uY29udGFpbi5jYWxsKHRoaXMsIHJhbmspICYmIHRoaXMuX29yZGluYWxNZXRhLmNhdGVnb3JpZXNbcmFua10gIT0gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogTm9ybWFsaXplIGdpdmVuIHJhbmsgb3IgbmFtZSB0byBsaW5lYXIgWzAsIDFdXG4gICAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gW3ZhbF1cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgbm9ybWFsaXplOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgcmV0dXJuIHNjYWxlUHJvdG8ubm9ybWFsaXplLmNhbGwodGhpcywgdGhpcy5wYXJzZSh2YWwpKTtcbiAgfSxcbiAgc2NhbGU6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChzY2FsZVByb3RvLnNjYWxlLmNhbGwodGhpcywgdmFsKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgZ2V0VGlja3M6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGlja3MgPSBbXTtcbiAgICB2YXIgZXh0ZW50ID0gdGhpcy5fZXh0ZW50O1xuICAgIHZhciByYW5rID0gZXh0ZW50WzBdO1xuXG4gICAgd2hpbGUgKHJhbmsgPD0gZXh0ZW50WzFdKSB7XG4gICAgICB0aWNrcy5wdXNoKHJhbmspO1xuICAgICAgcmFuaysrO1xuICAgIH1cblxuICAgIHJldHVybiB0aWNrcztcbiAgfSxcblxuICAvKipcbiAgICogR2V0IGl0ZW0gb24gcmFuayBuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldExhYmVsOiBmdW5jdGlvbiAobikge1xuICAgIGlmICghdGhpcy5pc0JsYW5rKCkpIHtcbiAgICAgIC8vIE5vdGUgdGhhdCBpZiBubyBkYXRhLCBvcmRpbmFsTWV0YS5jYXRlZ29yaWVzIGlzIGFuIGVtcHR5IGFycmF5LlxuICAgICAgcmV0dXJuIHRoaXMuX29yZGluYWxNZXRhLmNhdGVnb3JpZXNbbl07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBjb3VudDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9leHRlbnRbMV0gLSB0aGlzLl9leHRlbnRbMF0gKyAxO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHVuaW9uRXh0ZW50RnJvbURhdGE6IGZ1bmN0aW9uIChkYXRhLCBkaW0pIHtcbiAgICB0aGlzLnVuaW9uRXh0ZW50KGRhdGEuZ2V0QXBwcm94aW1hdGVFeHRlbnQoZGltKSk7XG4gIH0sXG4gIGdldE9yZGluYWxNZXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29yZGluYWxNZXRhO1xuICB9LFxuICBuaWNlVGlja3M6IHpyVXRpbC5ub29wLFxuICBuaWNlRXh0ZW50OiB6clV0aWwubm9vcFxufSk7XG4vKipcbiAqIEByZXR1cm4ge21vZHVsZTplY2hhcnRzL3NjYWxlL1RpbWV9XG4gKi9cblxuT3JkaW5hbFNjYWxlLmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBPcmRpbmFsU2NhbGUoKTtcbn07XG5cbnZhciBfZGVmYXVsdCA9IE9yZGluYWxTY2FsZTtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIGNsYXp6VXRpbCA9IHJlcXVpcmUoXCIuLi91dGlsL2NsYXp6XCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbi8qKlxuICogLy8gU2NhbGUgY2xhc3MgbWFuYWdlbWVudFxuICogQG1vZHVsZSBlY2hhcnRzL3NjYWxlL1NjYWxlXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gW3NldHRpbmddXG4gKi9cbmZ1bmN0aW9uIFNjYWxlKHNldHRpbmcpIHtcbiAgdGhpcy5fc2V0dGluZyA9IHNldHRpbmcgfHwge307XG4gIC8qKlxuICAgKiBFeHRlbnRcbiAgICogQHR5cGUge0FycmF5LjxudW1iZXI+fVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuXG4gIHRoaXMuX2V4dGVudCA9IFtJbmZpbml0eSwgLUluZmluaXR5XTtcbiAgLyoqXG4gICAqIFN0ZXAgaXMgY2FsY3VsYXRlZCBpbiBhZGp1c3RFeHRlbnRcbiAgICogQHR5cGUge0FycmF5LjxudW1iZXI+fVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuXG4gIHRoaXMuX2ludGVydmFsID0gMDtcbiAgdGhpcy5pbml0ICYmIHRoaXMuaW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuLyoqXG4gKiBQYXJzZSBpbnB1dCB2YWwgdG8gdmFsaWQgaW5uZXIgbnVtYmVyLlxuICogQHBhcmFtIHsqfSB2YWxcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuXG5cblNjYWxlLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgLy8gTm90aWNlOiBUaGlzIHdvdWxkIGJlIGEgdHJhcCBoZXJlLCBJZiB0aGUgaW1wbGVtZW50YXRpb25cbiAgLy8gb2YgdGhpcyBtZXRob2QgZGVwZW5kcyBvbiBleHRlbnQsIGFuZCB0aGlzIG1ldGhvZCBpcyB1c2VkXG4gIC8vIGJlZm9yZSBleHRlbnQgc2V0IChsaWtlIGluIGRhdGFab29tKSwgaXQgd291bGQgYmUgd3JvbmcuXG4gIC8vIE5ldmVydGhlbGVzcywgcGFyc2UgZG9lcyBub3QgZGVwZW5kIG9uIGV4dGVudCBnZW5lcmFsbHkuXG4gIHJldHVybiB2YWw7XG59O1xuXG5TY2FsZS5wcm90b3R5cGUuZ2V0U2V0dGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiB0aGlzLl9zZXR0aW5nW25hbWVdO1xufTtcblxuU2NhbGUucHJvdG90eXBlLmNvbnRhaW4gPSBmdW5jdGlvbiAodmFsKSB7XG4gIHZhciBleHRlbnQgPSB0aGlzLl9leHRlbnQ7XG4gIHJldHVybiB2YWwgPj0gZXh0ZW50WzBdICYmIHZhbCA8PSBleHRlbnRbMV07XG59O1xuLyoqXG4gKiBOb3JtYWxpemUgdmFsdWUgdG8gbGluZWFyIFswLCAxXSwgcmV0dXJuIDAuNSBpZiBleHRlbnQgc3BhbiBpcyAwXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuXG5TY2FsZS5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24gKHZhbCkge1xuICB2YXIgZXh0ZW50ID0gdGhpcy5fZXh0ZW50O1xuXG4gIGlmIChleHRlbnRbMV0gPT09IGV4dGVudFswXSkge1xuICAgIHJldHVybiAwLjU7XG4gIH1cblxuICByZXR1cm4gKHZhbCAtIGV4dGVudFswXSkgLyAoZXh0ZW50WzFdIC0gZXh0ZW50WzBdKTtcbn07XG4vKipcbiAqIFNjYWxlIG5vcm1hbGl6ZWQgdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWxcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuXG5cblNjYWxlLnByb3RvdHlwZS5zY2FsZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgdmFyIGV4dGVudCA9IHRoaXMuX2V4dGVudDtcbiAgcmV0dXJuIHZhbCAqIChleHRlbnRbMV0gLSBleHRlbnRbMF0pICsgZXh0ZW50WzBdO1xufTtcbi8qKlxuICogU2V0IGV4dGVudCBmcm9tIGRhdGFcbiAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IG90aGVyXG4gKi9cblxuXG5TY2FsZS5wcm90b3R5cGUudW5pb25FeHRlbnQgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgdmFyIGV4dGVudCA9IHRoaXMuX2V4dGVudDtcbiAgb3RoZXJbMF0gPCBleHRlbnRbMF0gJiYgKGV4dGVudFswXSA9IG90aGVyWzBdKTtcbiAgb3RoZXJbMV0gPiBleHRlbnRbMV0gJiYgKGV4dGVudFsxXSA9IG90aGVyWzFdKTsgLy8gbm90IHNldEV4dGVudCBiZWNhdXNlIGluIGxvZyBheGlzIGl0IG1heSB0cmFuc2Zvcm1lZCB0byBwb3dlclxuICAvLyB0aGlzLnNldEV4dGVudChleHRlbnRbMF0sIGV4dGVudFsxXSk7XG59O1xuLyoqXG4gKiBTZXQgZXh0ZW50IGZyb20gZGF0YVxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9kYXRhL0xpc3R9IGRhdGFcbiAqIEBwYXJhbSB7c3RyaW5nfSBkaW1cbiAqL1xuXG5cblNjYWxlLnByb3RvdHlwZS51bmlvbkV4dGVudEZyb21EYXRhID0gZnVuY3Rpb24gKGRhdGEsIGRpbSkge1xuICB0aGlzLnVuaW9uRXh0ZW50KGRhdGEuZ2V0QXBwcm94aW1hdGVFeHRlbnQoZGltKSk7XG59O1xuLyoqXG4gKiBHZXQgZXh0ZW50XG4gKiBAcmV0dXJuIHtBcnJheS48bnVtYmVyPn1cbiAqL1xuXG5cblNjYWxlLnByb3RvdHlwZS5nZXRFeHRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9leHRlbnQuc2xpY2UoKTtcbn07XG4vKipcbiAqIFNldCBleHRlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICovXG5cblxuU2NhbGUucHJvdG90eXBlLnNldEV4dGVudCA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gIHZhciB0aGlzRXh0ZW50ID0gdGhpcy5fZXh0ZW50O1xuXG4gIGlmICghaXNOYU4oc3RhcnQpKSB7XG4gICAgdGhpc0V4dGVudFswXSA9IHN0YXJ0O1xuICB9XG5cbiAgaWYgKCFpc05hTihlbmQpKSB7XG4gICAgdGhpc0V4dGVudFsxXSA9IGVuZDtcbiAgfVxufTtcbi8qKlxuICogV2hlbiBheGlzIGV4dGVudCBkZXBlbmRzIG9uIGRhdGEgYW5kIG5vIGRhdGEgZXhpc3RzLFxuICogYXhpcyB0aWNrcyBzaG91bGQgbm90IGJlIGRyYXduLCB3aGljaCBpcyBuYW1lZCAnYmxhbmsnLlxuICovXG5cblxuU2NhbGUucHJvdG90eXBlLmlzQmxhbmsgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9pc0JsYW5rO1xufSxcbi8qKlxuICogV2hlbiBheGlzIGV4dGVudCBkZXBlbmRzIG9uIGRhdGEgYW5kIG5vIGRhdGEgZXhpc3RzLFxuICogYXhpcyB0aWNrcyBzaG91bGQgbm90IGJlIGRyYXduLCB3aGljaCBpcyBuYW1lZCAnYmxhbmsnLlxuICovXG5TY2FsZS5wcm90b3R5cGUuc2V0QmxhbmsgPSBmdW5jdGlvbiAoaXNCbGFuaykge1xuICB0aGlzLl9pc0JsYW5rID0gaXNCbGFuaztcbn07XG4vKipcbiAqIEBhYnN0cmFjdFxuICogQHBhcmFtIHsqfSB0aWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGxhYmVsIG9mIHRoZSB0aWNrLlxuICovXG5cblNjYWxlLnByb3RvdHlwZS5nZXRMYWJlbCA9IG51bGw7XG5jbGF6elV0aWwuZW5hYmxlQ2xhc3NFeHRlbmQoU2NhbGUpO1xuY2xhenpVdGlsLmVuYWJsZUNsYXNzTWFuYWdlbWVudChTY2FsZSwge1xuICByZWdpc3RlcldoZW5FeHRlbmQ6IHRydWVcbn0pO1xudmFyIF9kZWZhdWx0ID0gU2NhbGU7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciB6clV0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgbnVtYmVyVXRpbCA9IHJlcXVpcmUoXCIuLi91dGlsL251bWJlclwiKTtcblxudmFyIGZvcm1hdFV0aWwgPSByZXF1aXJlKFwiLi4vdXRpbC9mb3JtYXRcIik7XG5cbnZhciBzY2FsZUhlbHBlciA9IHJlcXVpcmUoXCIuL2hlbHBlclwiKTtcblxudmFyIEludGVydmFsU2NhbGUgPSByZXF1aXJlKFwiLi9JbnRlcnZhbFwiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuLy8gW0Fib3V0IFVUQyBhbmQgbG9jYWwgdGltZSB6b25lXTpcbi8vIEluIG1vc3QgY2FzZXMsIGBudW1iZXIucGFyc2VEYXRlYCB3aWxsIHRyZWF0IGlucHV0IGRhdGEgc3RyaW5nIGFzIGxvY2FsIHRpbWVcbi8vIChleGNlcHQgdGltZSB6b25lIGlzIHNwZWNpZmllZCBpbiB0aW1lIHN0cmluZykuIEFuZCBgZm9ybWF0LmZvcm1hdGVUaW1lYCByZXR1cm5zXG4vLyBsb2NhbCB0aW1lIGJ5IGRlZmF1bHQuIG9wdGlvbi51c2VVVEMgaXMgZmFsc2UgYnkgZGVmYXVsdC4gVGhpcyBkZXNpZ24gaGF2ZVxuLy8gY29uY2lkZXJlZCB0aGVzZSBjb21tb24gY2FzZTpcbi8vICgxKSBUaW1lIHRoYXQgaXMgcGVyc2lzdGVudCBpbiBzZXJ2ZXIgaXMgaW4gVVRDLCBidXQgaXQgaXMgbmVlZGVkIHRvIGJlIGRpcGxheWVkXG4vLyBpbiBsb2NhbCB0aW1lIGJ5IGRlZmF1bHQuXG4vLyAoMikgQnkgZGVmYXVsdCwgdGhlIGlucHV0IGRhdGEgc3RyaW5nIChlLmcuLCAnMjAxMS0wMS0wMicpIHNob3VsZCBiZSBkaXNwbGF5ZWRcbi8vIGFzIGl0cyBvcmlnaW5hbCB0aW1lLCB3aXRob3V0IGFueSB0aW1lIGRpZmZlcmVuY2UuXG52YXIgaW50ZXJ2YWxTY2FsZVByb3RvID0gSW50ZXJ2YWxTY2FsZS5wcm90b3R5cGU7XG52YXIgbWF0aENlaWwgPSBNYXRoLmNlaWw7XG52YXIgbWF0aEZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBPTkVfU0VDT05EID0gMTAwMDtcbnZhciBPTkVfTUlOVVRFID0gT05FX1NFQ09ORCAqIDYwO1xudmFyIE9ORV9IT1VSID0gT05FX01JTlVURSAqIDYwO1xudmFyIE9ORV9EQVkgPSBPTkVfSE9VUiAqIDI0OyAvLyBGSVhNRSDlhaznlKjvvJ9cblxudmFyIGJpc2VjdCA9IGZ1bmN0aW9uIChhLCB4LCBsbywgaGkpIHtcbiAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcblxuICAgIGlmIChhW21pZF1bMV0gPCB4KSB7XG4gICAgICBsbyA9IG1pZCArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhpID0gbWlkO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsbztcbn07XG4vKipcbiAqIEBhbGlhcyBtb2R1bGU6ZWNoYXJ0cy9jb29yZC9zY2FsZS9UaW1lXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuXG5cbnZhciBUaW1lU2NhbGUgPSBJbnRlcnZhbFNjYWxlLmV4dGVuZCh7XG4gIHR5cGU6ICd0aW1lJyxcblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRMYWJlbDogZnVuY3Rpb24gKHZhbCkge1xuICAgIHZhciBzdGVwTHZsID0gdGhpcy5fc3RlcEx2bDtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHZhbCk7XG4gICAgcmV0dXJuIGZvcm1hdFV0aWwuZm9ybWF0VGltZShzdGVwTHZsWzBdLCBkYXRlLCB0aGlzLmdldFNldHRpbmcoJ3VzZVVUQycpKTtcbiAgfSxcblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBuaWNlRXh0ZW50OiBmdW5jdGlvbiAob3B0KSB7XG4gICAgdmFyIGV4dGVudCA9IHRoaXMuX2V4dGVudDsgLy8gSWYgZXh0ZW50IHN0YXJ0IGFuZCBlbmQgYXJlIHNhbWUsIGV4cGFuZCB0aGVtXG5cbiAgICBpZiAoZXh0ZW50WzBdID09PSBleHRlbnRbMV0pIHtcbiAgICAgIC8vIEV4cGFuZCBleHRlbnRcbiAgICAgIGV4dGVudFswXSAtPSBPTkVfREFZO1xuICAgICAgZXh0ZW50WzFdICs9IE9ORV9EQVk7XG4gICAgfSAvLyBJZiB0aGVyZSBhcmUgbm8gZGF0YSBhbmQgZXh0ZW50IGFyZSBbSW5maW5pdHksIC1JbmZpbml0eV1cblxuXG4gICAgaWYgKGV4dGVudFsxXSA9PT0gLUluZmluaXR5ICYmIGV4dGVudFswXSA9PT0gSW5maW5pdHkpIHtcbiAgICAgIHZhciBkID0gbmV3IERhdGUoKTtcbiAgICAgIGV4dGVudFsxXSA9ICtuZXcgRGF0ZShkLmdldEZ1bGxZZWFyKCksIGQuZ2V0TW9udGgoKSwgZC5nZXREYXRlKCkpO1xuICAgICAgZXh0ZW50WzBdID0gZXh0ZW50WzFdIC0gT05FX0RBWTtcbiAgICB9XG5cbiAgICB0aGlzLm5pY2VUaWNrcyhvcHQuc3BsaXROdW1iZXIsIG9wdC5taW5JbnRlcnZhbCwgb3B0Lm1heEludGVydmFsKTsgLy8gdmFyIGV4dGVudCA9IHRoaXMuX2V4dGVudDtcblxuICAgIHZhciBpbnRlcnZhbCA9IHRoaXMuX2ludGVydmFsO1xuXG4gICAgaWYgKCFvcHQuZml4TWluKSB7XG4gICAgICBleHRlbnRbMF0gPSBudW1iZXJVdGlsLnJvdW5kKG1hdGhGbG9vcihleHRlbnRbMF0gLyBpbnRlcnZhbCkgKiBpbnRlcnZhbCk7XG4gICAgfVxuXG4gICAgaWYgKCFvcHQuZml4TWF4KSB7XG4gICAgICBleHRlbnRbMV0gPSBudW1iZXJVdGlsLnJvdW5kKG1hdGhDZWlsKGV4dGVudFsxXSAvIGludGVydmFsKSAqIGludGVydmFsKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgbmljZVRpY2tzOiBmdW5jdGlvbiAoYXBwcm94VGlja051bSwgbWluSW50ZXJ2YWwsIG1heEludGVydmFsKSB7XG4gICAgYXBwcm94VGlja051bSA9IGFwcHJveFRpY2tOdW0gfHwgMTA7XG4gICAgdmFyIGV4dGVudCA9IHRoaXMuX2V4dGVudDtcbiAgICB2YXIgc3BhbiA9IGV4dGVudFsxXSAtIGV4dGVudFswXTtcbiAgICB2YXIgYXBwcm94SW50ZXJ2YWwgPSBzcGFuIC8gYXBwcm94VGlja051bTtcblxuICAgIGlmIChtaW5JbnRlcnZhbCAhPSBudWxsICYmIGFwcHJveEludGVydmFsIDwgbWluSW50ZXJ2YWwpIHtcbiAgICAgIGFwcHJveEludGVydmFsID0gbWluSW50ZXJ2YWw7XG4gICAgfVxuXG4gICAgaWYgKG1heEludGVydmFsICE9IG51bGwgJiYgYXBwcm94SW50ZXJ2YWwgPiBtYXhJbnRlcnZhbCkge1xuICAgICAgYXBwcm94SW50ZXJ2YWwgPSBtYXhJbnRlcnZhbDtcbiAgICB9XG5cbiAgICB2YXIgc2NhbGVMZXZlbHNMZW4gPSBzY2FsZUxldmVscy5sZW5ndGg7XG4gICAgdmFyIGlkeCA9IGJpc2VjdChzY2FsZUxldmVscywgYXBwcm94SW50ZXJ2YWwsIDAsIHNjYWxlTGV2ZWxzTGVuKTtcbiAgICB2YXIgbGV2ZWwgPSBzY2FsZUxldmVsc1tNYXRoLm1pbihpZHgsIHNjYWxlTGV2ZWxzTGVuIC0gMSldO1xuICAgIHZhciBpbnRlcnZhbCA9IGxldmVsWzFdOyAvLyBTYW1lIHdpdGggaW50ZXJ2YWwgc2NhbGUgaWYgc3BhbiBpcyBtdWNoIGxhcmdlciB0aGFuIDEgeWVhclxuXG4gICAgaWYgKGxldmVsWzBdID09PSAneWVhcicpIHtcbiAgICAgIHZhciB5ZWFyU3BhbiA9IHNwYW4gLyBpbnRlcnZhbDsgLy8gRnJvbSBcIk5pY2UgTnVtYmVycyBmb3IgR3JhcGggTGFiZWxzXCIgb2YgR3JhcGhpYyBHZW1zXG4gICAgICAvLyB2YXIgbmljZVllYXJTcGFuID0gbnVtYmVyVXRpbC5uaWNlKHllYXJTcGFuLCBmYWxzZSk7XG5cbiAgICAgIHZhciB5ZWFyU3RlcCA9IG51bWJlclV0aWwubmljZSh5ZWFyU3BhbiAvIGFwcHJveFRpY2tOdW0sIHRydWUpO1xuICAgICAgaW50ZXJ2YWwgKj0geWVhclN0ZXA7XG4gICAgfVxuXG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gdGhpcy5nZXRTZXR0aW5nKCd1c2VVVEMnKSA/IDAgOiBuZXcgRGF0ZSgrZXh0ZW50WzBdIHx8ICtleHRlbnRbMV0pLmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MCAqIDEwMDA7XG4gICAgdmFyIG5pY2VFeHRlbnQgPSBbTWF0aC5yb3VuZChtYXRoQ2VpbCgoZXh0ZW50WzBdIC0gdGltZXpvbmVPZmZzZXQpIC8gaW50ZXJ2YWwpICogaW50ZXJ2YWwgKyB0aW1lem9uZU9mZnNldCksIE1hdGgucm91bmQobWF0aEZsb29yKChleHRlbnRbMV0gLSB0aW1lem9uZU9mZnNldCkgLyBpbnRlcnZhbCkgKiBpbnRlcnZhbCArIHRpbWV6b25lT2Zmc2V0KV07XG4gICAgc2NhbGVIZWxwZXIuZml4RXh0ZW50KG5pY2VFeHRlbnQsIGV4dGVudCk7XG4gICAgdGhpcy5fc3RlcEx2bCA9IGxldmVsOyAvLyBJbnRlcnZhbCB3aWxsIGJlIHVzZWQgaW4gZ2V0VGlja3NcblxuICAgIHRoaXMuX2ludGVydmFsID0gaW50ZXJ2YWw7XG4gICAgdGhpcy5fbmljZUV4dGVudCA9IG5pY2VFeHRlbnQ7XG4gIH0sXG4gIHBhcnNlOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgLy8gdmFsIG1pZ2h0IGJlIGZsb2F0LlxuICAgIHJldHVybiArbnVtYmVyVXRpbC5wYXJzZURhdGUodmFsKTtcbiAgfVxufSk7XG56clV0aWwuZWFjaChbJ2NvbnRhaW4nLCAnbm9ybWFsaXplJ10sIGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XG4gIFRpbWVTY2FsZS5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgcmV0dXJuIGludGVydmFsU2NhbGVQcm90b1ttZXRob2ROYW1lXS5jYWxsKHRoaXMsIHRoaXMucGFyc2UodmFsKSk7XG4gIH07XG59KTsgLy8gU3RlcHMgZnJvbSBkM1xuXG52YXIgc2NhbGVMZXZlbHMgPSBbLy8gRm9ybWF0ICAgICAgICAgICAgICBpbnRlcnZhbFxuWydoaDptbTpzcycsIE9ORV9TRUNPTkRdLCAvLyAxc1xuWydoaDptbTpzcycsIE9ORV9TRUNPTkQgKiA1XSwgLy8gNXNcblsnaGg6bW06c3MnLCBPTkVfU0VDT05EICogMTBdLCAvLyAxMHNcblsnaGg6bW06c3MnLCBPTkVfU0VDT05EICogMTVdLCAvLyAxNXNcblsnaGg6bW06c3MnLCBPTkVfU0VDT05EICogMzBdLCAvLyAzMHNcblsnaGg6bW1cXG5NTS1kZCcsIE9ORV9NSU5VVEVdLCAvLyAxbVxuWydoaDptbVxcbk1NLWRkJywgT05FX01JTlVURSAqIDVdLCAvLyA1bVxuWydoaDptbVxcbk1NLWRkJywgT05FX01JTlVURSAqIDEwXSwgLy8gMTBtXG5bJ2hoOm1tXFxuTU0tZGQnLCBPTkVfTUlOVVRFICogMTVdLCAvLyAxNW1cblsnaGg6bW1cXG5NTS1kZCcsIE9ORV9NSU5VVEUgKiAzMF0sIC8vIDMwbVxuWydoaDptbVxcbk1NLWRkJywgT05FX0hPVVJdLCAvLyAxaFxuWydoaDptbVxcbk1NLWRkJywgT05FX0hPVVIgKiAyXSwgLy8gMmhcblsnaGg6bW1cXG5NTS1kZCcsIE9ORV9IT1VSICogNl0sIC8vIDZoXG5bJ2hoOm1tXFxuTU0tZGQnLCBPTkVfSE9VUiAqIDEyXSwgLy8gMTJoXG5bJ01NLWRkXFxueXl5eScsIE9ORV9EQVldLCAvLyAxZFxuWydNTS1kZFxcbnl5eXknLCBPTkVfREFZICogMl0sIC8vIDJkXG5bJ01NLWRkXFxueXl5eScsIE9ORV9EQVkgKiAzXSwgLy8gM2RcblsnTU0tZGRcXG55eXl5JywgT05FX0RBWSAqIDRdLCAvLyA0ZFxuWydNTS1kZFxcbnl5eXknLCBPTkVfREFZICogNV0sIC8vIDVkXG5bJ01NLWRkXFxueXl5eScsIE9ORV9EQVkgKiA2XSwgLy8gNmRcblsnd2VlaycsIE9ORV9EQVkgKiA3XSwgLy8gN2RcblsnTU0tZGRcXG55eXl5JywgT05FX0RBWSAqIDEwXSwgLy8gMTBkXG5bJ3dlZWsnLCBPTkVfREFZICogMTRdLCAvLyAyd1xuWyd3ZWVrJywgT05FX0RBWSAqIDIxXSwgLy8gM3dcblsnbW9udGgnLCBPTkVfREFZICogMzFdLCAvLyAxTVxuWyd3ZWVrJywgT05FX0RBWSAqIDQyXSwgLy8gNndcblsnbW9udGgnLCBPTkVfREFZICogNjJdLCAvLyAyTVxuWyd3ZWVrJywgT05FX0RBWSAqIDQyXSwgLy8gMTB3XG5bJ3F1YXJ0ZXInLCBPTkVfREFZICogMzgwIC8gNF0sIC8vIDNNXG5bJ21vbnRoJywgT05FX0RBWSAqIDMxICogNF0sIC8vIDRNXG5bJ21vbnRoJywgT05FX0RBWSAqIDMxICogNV0sIC8vIDVNXG5bJ2hhbGYteWVhcicsIE9ORV9EQVkgKiAzODAgLyAyXSwgLy8gNk1cblsnbW9udGgnLCBPTkVfREFZICogMzEgKiA4XSwgLy8gOE1cblsnbW9udGgnLCBPTkVfREFZICogMzEgKiAxMF0sIC8vIDEwTVxuWyd5ZWFyJywgT05FX0RBWSAqIDM4MF0gLy8gMVlcbl07XG4vKipcbiAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvbW9kZWwvTW9kZWx9XG4gKiBAcmV0dXJuIHttb2R1bGU6ZWNoYXJ0cy9zY2FsZS9UaW1lfVxuICovXG5cblRpbWVTY2FsZS5jcmVhdGUgPSBmdW5jdGlvbiAobW9kZWwpIHtcbiAgcmV0dXJuIG5ldyBUaW1lU2NhbGUoe1xuICAgIHVzZVVUQzogbW9kZWwuZWNNb2RlbC5nZXQoJ3VzZVVUQycpXG4gIH0pO1xufTtcblxudmFyIF9kZWZhdWx0ID0gVGltZVNjYWxlO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgbnVtYmVyVXRpbCA9IHJlcXVpcmUoXCIuLi91dGlsL251bWJlclwiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG4vKipcbiAqIEZvciB0ZXN0YWJsZS5cbiAqL1xudmFyIHJvdW5kTnVtYmVyID0gbnVtYmVyVXRpbC5yb3VuZDtcbi8qKlxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gZXh0ZW50IEJvdGggZXh0ZW50WzBdIGFuZCBleHRlbnRbMV0gc2hvdWxkIGJlIHZhbGlkIG51bWJlci5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaG91bGQgYmUgZXh0ZW50WzBdIDwgZXh0ZW50WzFdLlxuICogQHBhcmFtIHtudW1iZXJ9IHNwbGl0TnVtYmVyIHNwbGl0TnVtYmVyIHNob3VsZCBiZSA+PSAxLlxuICogQHBhcmFtIHtudW1iZXJ9IFttaW5JbnRlcnZhbF1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4SW50ZXJ2YWxdXG4gKiBAcmV0dXJuIHtPYmplY3R9IHtpbnRlcnZhbCwgaW50ZXJ2YWxQcmVjaXNpb24sIG5pY2VUaWNrRXh0ZW50fVxuICovXG5cbmZ1bmN0aW9uIGludGVydmFsU2NhbGVOaWNlVGlja3MoZXh0ZW50LCBzcGxpdE51bWJlciwgbWluSW50ZXJ2YWwsIG1heEludGVydmFsKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgdmFyIHNwYW4gPSBleHRlbnRbMV0gLSBleHRlbnRbMF07XG4gIHZhciBpbnRlcnZhbCA9IHJlc3VsdC5pbnRlcnZhbCA9IG51bWJlclV0aWwubmljZShzcGFuIC8gc3BsaXROdW1iZXIsIHRydWUpO1xuXG4gIGlmIChtaW5JbnRlcnZhbCAhPSBudWxsICYmIGludGVydmFsIDwgbWluSW50ZXJ2YWwpIHtcbiAgICBpbnRlcnZhbCA9IHJlc3VsdC5pbnRlcnZhbCA9IG1pbkludGVydmFsO1xuICB9XG5cbiAgaWYgKG1heEludGVydmFsICE9IG51bGwgJiYgaW50ZXJ2YWwgPiBtYXhJbnRlcnZhbCkge1xuICAgIGludGVydmFsID0gcmVzdWx0LmludGVydmFsID0gbWF4SW50ZXJ2YWw7XG4gIH0gLy8gVG93IG1vcmUgZGlnaXRhbCBmb3IgdGljay5cblxuXG4gIHZhciBwcmVjaXNpb24gPSByZXN1bHQuaW50ZXJ2YWxQcmVjaXNpb24gPSBnZXRJbnRlcnZhbFByZWNpc2lvbihpbnRlcnZhbCk7IC8vIE5pY2VkIGV4dGVudCBpbnNpZGUgb3JpZ2luYWwgZXh0ZW50XG5cbiAgdmFyIG5pY2VUaWNrRXh0ZW50ID0gcmVzdWx0Lm5pY2VUaWNrRXh0ZW50ID0gW3JvdW5kTnVtYmVyKE1hdGguY2VpbChleHRlbnRbMF0gLyBpbnRlcnZhbCkgKiBpbnRlcnZhbCwgcHJlY2lzaW9uKSwgcm91bmROdW1iZXIoTWF0aC5mbG9vcihleHRlbnRbMV0gLyBpbnRlcnZhbCkgKiBpbnRlcnZhbCwgcHJlY2lzaW9uKV07XG4gIGZpeEV4dGVudChuaWNlVGlja0V4dGVudCwgZXh0ZW50KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGludGVydmFsXG4gKiBAcmV0dXJuIHtudW1iZXJ9IGludGVydmFsIHByZWNpc2lvblxuICovXG5cblxuZnVuY3Rpb24gZ2V0SW50ZXJ2YWxQcmVjaXNpb24oaW50ZXJ2YWwpIHtcbiAgLy8gVG93IG1vcmUgZGlnaXRhbCBmb3IgdGljay5cbiAgcmV0dXJuIG51bWJlclV0aWwuZ2V0UHJlY2lzaW9uU2FmZShpbnRlcnZhbCkgKyAyO1xufVxuXG5mdW5jdGlvbiBjbGFtcChuaWNlVGlja0V4dGVudCwgaWR4LCBleHRlbnQpIHtcbiAgbmljZVRpY2tFeHRlbnRbaWR4XSA9IE1hdGgubWF4KE1hdGgubWluKG5pY2VUaWNrRXh0ZW50W2lkeF0sIGV4dGVudFsxXSksIGV4dGVudFswXSk7XG59IC8vIEluIHNvbWUgY2FzZXMgKGUuZy4sIHNwbGl0TnVtYmVyIGlzIDEpLCBuaWNlVGlja0V4dGVudCBtYXkgYmUgb3V0IG9mIGV4dGVudC5cblxuXG5mdW5jdGlvbiBmaXhFeHRlbnQobmljZVRpY2tFeHRlbnQsIGV4dGVudCkge1xuICAhaXNGaW5pdGUobmljZVRpY2tFeHRlbnRbMF0pICYmIChuaWNlVGlja0V4dGVudFswXSA9IGV4dGVudFswXSk7XG4gICFpc0Zpbml0ZShuaWNlVGlja0V4dGVudFsxXSkgJiYgKG5pY2VUaWNrRXh0ZW50WzFdID0gZXh0ZW50WzFdKTtcbiAgY2xhbXAobmljZVRpY2tFeHRlbnQsIDAsIGV4dGVudCk7XG4gIGNsYW1wKG5pY2VUaWNrRXh0ZW50LCAxLCBleHRlbnQpO1xuXG4gIGlmIChuaWNlVGlja0V4dGVudFswXSA+IG5pY2VUaWNrRXh0ZW50WzFdKSB7XG4gICAgbmljZVRpY2tFeHRlbnRbMF0gPSBuaWNlVGlja0V4dGVudFsxXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnRlcnZhbFNjYWxlR2V0VGlja3MoaW50ZXJ2YWwsIGV4dGVudCwgbmljZVRpY2tFeHRlbnQsIGludGVydmFsUHJlY2lzaW9uKSB7XG4gIHZhciB0aWNrcyA9IFtdOyAvLyBJZiBpbnRlcnZhbCBpcyAwLCByZXR1cm4gW107XG5cbiAgaWYgKCFpbnRlcnZhbCkge1xuICAgIHJldHVybiB0aWNrcztcbiAgfSAvLyBDb25zaWRlciB0aGlzIGNhc2U6IHVzaW5nIGRhdGFab29tIHRvb2xib3gsIHpvb20gYW5kIHpvb20uXG5cblxuICB2YXIgc2FmZUxpbWl0ID0gMTAwMDA7XG5cbiAgaWYgKGV4dGVudFswXSA8IG5pY2VUaWNrRXh0ZW50WzBdKSB7XG4gICAgdGlja3MucHVzaChleHRlbnRbMF0pO1xuICB9XG5cbiAgdmFyIHRpY2sgPSBuaWNlVGlja0V4dGVudFswXTtcblxuICB3aGlsZSAodGljayA8PSBuaWNlVGlja0V4dGVudFsxXSkge1xuICAgIHRpY2tzLnB1c2godGljayk7IC8vIEF2b2lkIHJvdW5kaW5nIGVycm9yXG5cbiAgICB0aWNrID0gcm91bmROdW1iZXIodGljayArIGludGVydmFsLCBpbnRlcnZhbFByZWNpc2lvbik7XG5cbiAgICBpZiAodGljayA9PT0gdGlja3NbdGlja3MubGVuZ3RoIC0gMV0pIHtcbiAgICAgIC8vIENvbnNpZGVyIG91dCBvZiBzYWZlIGZsb2F0IHBvaW50LCBlLmcuLFxuICAgICAgLy8gLTM3MTExMjYuOTkwNzcwNyArIDJlLTEwID09PSAtMzcxMTEyNi45OTA3NzA3XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAodGlja3MubGVuZ3RoID4gc2FmZUxpbWl0KSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9IC8vIENvbnNpZGVyIHRoaXMgY2FzZTogdGhlIGxhc3QgaXRlbSBvZiB0aWNrcyBpcyBzbWFsbGVyXG4gIC8vIHRoYW4gbmljZVRpY2tFeHRlbnRbMV0gYW5kIG5pY2VUaWNrRXh0ZW50WzFdID09PSBleHRlbnRbMV0uXG5cblxuICBpZiAoZXh0ZW50WzFdID4gKHRpY2tzLmxlbmd0aCA/IHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdIDogbmljZVRpY2tFeHRlbnRbMV0pKSB7XG4gICAgdGlja3MucHVzaChleHRlbnRbMV0pO1xuICB9XG5cbiAgcmV0dXJuIHRpY2tzO1xufVxuXG5leHBvcnRzLmludGVydmFsU2NhbGVOaWNlVGlja3MgPSBpbnRlcnZhbFNjYWxlTmljZVRpY2tzO1xuZXhwb3J0cy5nZXRJbnRlcnZhbFByZWNpc2lvbiA9IGdldEludGVydmFsUHJlY2lzaW9uO1xuZXhwb3J0cy5maXhFeHRlbnQgPSBmaXhFeHRlbnQ7XG5leHBvcnRzLmludGVydmFsU2NhbGVHZXRUaWNrcyA9IGludGVydmFsU2NhbGVHZXRUaWNrczsiLCJ2YXIgX3V0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgZWFjaCA9IF91dGlsLmVhY2g7XG52YXIgbWFwID0gX3V0aWwubWFwO1xudmFyIGlzQXJyYXkgPSBfdXRpbC5pc0FycmF5O1xudmFyIGlzRnVuY3Rpb24gPSBfdXRpbC5pc0Z1bmN0aW9uO1xudmFyIGNyZWF0ZUhhc2hNYXAgPSBfdXRpbC5jcmVhdGVIYXNoTWFwO1xudmFyIG5vb3AgPSBfdXRpbC5ub29wO1xuXG52YXIgX3Rhc2sgPSByZXF1aXJlKFwiLi90YXNrXCIpO1xuXG52YXIgY3JlYXRlVGFzayA9IF90YXNrLmNyZWF0ZVRhc2s7XG5cbnZhciBfY29tcG9uZW50ID0gcmVxdWlyZShcIi4uL3V0aWwvY29tcG9uZW50XCIpO1xuXG52YXIgZ2V0VUlEID0gX2NvbXBvbmVudC5nZXRVSUQ7XG5cbnZhciBHbG9iYWxNb2RlbCA9IHJlcXVpcmUoXCIuLi9tb2RlbC9HbG9iYWxcIik7XG5cbnZhciBFeHRlbnNpb25BUEkgPSByZXF1aXJlKFwiLi4vRXh0ZW5zaW9uQVBJXCIpO1xuXG52YXIgX21vZGVsID0gcmVxdWlyZShcIi4uL3V0aWwvbW9kZWxcIik7XG5cbnZhciBub3JtYWxpemVUb0FycmF5ID0gX21vZGVsLm5vcm1hbGl6ZVRvQXJyYXk7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuLyoqXG4gKiBAbW9kdWxlIGVjaGFydHMvc3RyZWFtL1NjaGVkdWxlclxuICovXG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFNjaGVkdWxlcihlY0luc3RhbmNlLCBhcGksIGRhdGFQcm9jZXNzb3JIYW5kbGVycywgdmlzdWFsSGFuZGxlcnMpIHtcbiAgdGhpcy5lY0luc3RhbmNlID0gZWNJbnN0YW5jZTtcbiAgdGhpcy5hcGkgPSBhcGk7XG4gIHRoaXMudW5maW5pc2hlZDsgLy8gRml4IGN1cnJlbnQgcHJvY2Vzc29ycyBpbiBjYXNlIHRoYXQgaW4gc29tZSByZWFyIGNhc2VzIHRoYXRcbiAgLy8gcHJvY2Vzc29ycyBtaWdodCBiZSByZWdpc3RlcmVkIGFmdGVyIGVjaGFydHMgaW5zdGFuY2UgY3JlYXRlZC5cbiAgLy8gUmVnaXN0ZXIgcHJvY2Vzc29ycyBpbmNyZW1lbnRhbGx5IGZvciBhIGVjaGFydHMgaW5zdGFuY2UgaXNcbiAgLy8gbm90IHN1cHBvcnRlZCBieSB0aGlzIHN0cmVhbSBhcmNoaXRlY3R1cmUuXG5cbiAgdmFyIGRhdGFQcm9jZXNzb3JIYW5kbGVycyA9IHRoaXMuX2RhdGFQcm9jZXNzb3JIYW5kbGVycyA9IGRhdGFQcm9jZXNzb3JIYW5kbGVycy5zbGljZSgpO1xuICB2YXIgdmlzdWFsSGFuZGxlcnMgPSB0aGlzLl92aXN1YWxIYW5kbGVycyA9IHZpc3VhbEhhbmRsZXJzLnNsaWNlKCk7XG4gIHRoaXMuX2FsbEhhbmRsZXJzID0gZGF0YVByb2Nlc3NvckhhbmRsZXJzLmNvbmNhdCh2aXN1YWxIYW5kbGVycyk7XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdHlwZSB7XG4gICAqICAgICBbaGFuZGxlclVJRDogc3RyaW5nXToge1xuICAgKiAgICAgICAgIHNlcmllc1Rhc2tNYXA/OiB7XG4gICAqICAgICAgICAgICAgIFtzZXJpZXNVSUQ6IHN0cmluZ106IFRhc2tcbiAgICogICAgICAgICB9LFxuICAgKiAgICAgICAgIG92ZXJhbGxUYXNrPzogVGFza1xuICAgKiAgICAgfVxuICAgKiB9XG4gICAqL1xuXG4gIHRoaXMuX3N0YWdlVGFza01hcCA9IGNyZWF0ZUhhc2hNYXAoKTtcbn1cblxudmFyIHByb3RvID0gU2NoZWR1bGVyLnByb3RvdHlwZTtcbi8qKlxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9HbG9iYWx9IGVjTW9kZWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkXG4gKi9cblxucHJvdG8ucmVzdG9yZURhdGEgPSBmdW5jdGlvbiAoZWNNb2RlbCwgcGF5bG9hZCkge1xuICAvLyBUT0RPOiBPbmx5IHJlc3Ryb2UgbmVlZGVkIHNlcmllcyBhbmQgY29tcG9uZW50cywgYnV0IG5vdCBhbGwgY29tcG9uZW50cy5cbiAgLy8gQ3VycmVudGx5IGByZXN0b3JlRGF0YWAgb2YgYWxsIG9mIHRoZSBzZXJpZXMgYW5kIGNvbXBvbmVudCB3aWxsIGJlIGNhbGxlZC5cbiAgLy8gQnV0IHNvbWUgaW5kZXBlbmRlbnQgY29tcG9uZW50cyBsaWtlIGB0aXRsZWAsIGBsZWdlbmRgLCBgZ3JhcGhpY2AsIGB0b29sYm94YCxcbiAgLy8gYHRvb2x0aXBgLCBgYXhpc1BvaW50ZXJgLCBldGMsIGRvIG5vdCBuZWVkIHNlcmllcyByZWZyZXNoIHdoZW4gYHNldE9wdGlvbmAsXG4gIC8vIGFuZCBzb21lIGNvbXBvbmVudHMgbGlrZSBjb29yZGluYXRlIHN5c3RlbSwgYXhlcywgZGF0YVpvb20sIHZpc3VhbE1hcCBvbmx5XG4gIC8vIG5lZWQgdGhlaXIgdGFyZ2V0IHNlcmllcyByZWZyZXNoLlxuICAvLyAoMSkgSWYgd2UgYXJlIGltcGxlbWVudGluZyB0aGlzIGZlYXR1cmUgc29tZSBkYXksIHdlIHNob3VsZCBjb25zaWRlciB0aGVzZSBjYXNlczpcbiAgLy8gaWYgYSBkYXRhIHByb2Nlc3NvciBkZXBlbmRzIG9uIGEgY29tcG9uZW50IChlLmcuLCBkYXRhWm9vbVByb2Nlc3NvciBkZXBlbmRzXG4gIC8vIG9uIHRoZSBzZXR0aW5ncyBvZiBgZGF0YVpvb21gKSwgaXQgc2hvdWxkIGJlIHJlLXBlcmZvcm1lZCBpZiB0aGUgY29tcG9uZW50XG4gIC8vIGlzIG1vZGlmaWVkIGJ5IGBzZXRPcHRpb25gLlxuICAvLyAoMikgSWYgYSBwcm9jZXNzb3IgZGVwZW5kcyBvbiBzZXZyYWwgc2VyaWVzLCBzcGVpY2lmaWVkIGJ5IGl0cyBgZ2V0VGFyZ2V0U2VyaWVzYCxcbiAgLy8gaXQgc2hvdWxkIGJlIHJlLXBlcmZvcm1lZCB3aGVuIHRoZSByZXN1bHQgYXJyYXkgb2YgYGdldFRhcmdldFNlcmllc2AgY2hhbmdlZC5cbiAgLy8gV2UgdXNlIGBkZXBlbmRlbmNpZXNgIHRvIGNvdmVyIHRoZXNlIGlzc3Vlcy5cbiAgLy8gKDMpIEhvdyB0byB1cGRhdGUgdGFyZ2V0IHNlcmllcyB3aGVuIGNvb3JkaW5hdGUgc3lzdGVtIHJlbGF0ZWQgY29tcG9uZW50cyBtb2RpZmllZC5cbiAgLy8gVE9ETzogc2ltcGx5IHRoZSBkaXJ0eSBtZWNoYW5pc20/IENoZWNrIHdoZXRoZXIgb25seSB0aGUgY2FzZSBoZXJlIGNhbiBzZXQgdGFza3MgZGlydHksXG4gIC8vIGFuZCB0aGlzIGNhc2UgYWxsIG9mIHRoZSB0YXNrcyB3aWxsIGJlIHNldCBhcyBkaXJ0eS5cbiAgZWNNb2RlbC5yZXN0b3JlRGF0YShwYXlsb2FkKTsgLy8gVGhlb3JldGljYWxseSBhbiBvdmVyYWxsIHRhc2sgbm90IG9ubHkgZGVwZW5kcyBvbiBlYWNoIG9mIGl0cyB0YXJnZXQgc2VyaWVzLCBidXQgYWxzb1xuICAvLyBkZXBlbmRzIG9uIGFsbCBvZiB0aGUgc2VyaWVzLlxuICAvLyBUaGUgb3ZlcmFsbCB0YXNrIGlzIG5vdCBpbiBwaXBlbGluZSwgYW5kIGBlY01vZGVsLnJlc3RvcmVEYXRhYCBvbmx5IHNldCBwaXBlbGluZSB0YXNrc1xuICAvLyBkaXJ0eS4gSWYgYGdldFRhcmdldFNlcmllc2Agb2YgYW4gb3ZlcmFsbCB0YXNrIHJldHVybnMgbm90aGluZywgd2Ugc2hvdWxkIGFsc28gZW5zdXJlXG4gIC8vIHRoYXQgdGhlIG92ZXJhbGwgdGFzayBpcyBzZXQgYXMgZGlydHkgYW5kIHRvIGJlIHBlcmZvcm1lZCwgb3RoZXJ3aXNlIGl0IHByb2JhYmx5IGNhdXNlXG4gIC8vIHN0YXRlIGNoYW9zLiBTbyB3ZSBoYXZlIHRvIHNldCBkaXJ0eSBvZiBhbGwgb2YgdGhlIG92ZXJhbGwgdGFza3MgbWFudWFsbHksIG90aGVyd2lzZSBpdFxuICAvLyBwcm9iYWJseSBjYXVzZSBzdGF0ZSBjaGFvcyAoY29uc2lkZXIgYGRhdGFab29tUHJvY2Vzc29yYCkuXG5cbiAgdGhpcy5fc3RhZ2VUYXNrTWFwLmVhY2goZnVuY3Rpb24gKHRhc2tSZWNvcmQpIHtcbiAgICB2YXIgb3ZlcmFsbFRhc2sgPSB0YXNrUmVjb3JkLm92ZXJhbGxUYXNrO1xuICAgIG92ZXJhbGxUYXNrICYmIG92ZXJhbGxUYXNrLmRpcnR5KCk7XG4gIH0pO1xufTsgLy8gSWYgc2VyaWVzTW9kZWwgcHJvdmlkZWQsIGluY3JlbWVudGFsIHRocmVzaG9sZCBpcyBjaGVjayBieSBzZXJpZXMgZGF0YS5cblxuXG5wcm90by5nZXRQZXJmb3JtQXJncyA9IGZ1bmN0aW9uICh0YXNrLCBpc0Jsb2NrKSB7XG4gIC8vIEZvciBvdmVyYWxsIHRhc2tcbiAgaWYgKCF0YXNrLl9fcGlwZWxpbmUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcGlwZWxpbmUgPSB0aGlzLl9waXBlbGluZU1hcC5nZXQodGFzay5fX3BpcGVsaW5lLmlkKTtcblxuICB2YXIgcEN0eCA9IHBpcGVsaW5lLmNvbnRleHQ7XG4gIHZhciBpbmNyZW1lbnRhbCA9ICFpc0Jsb2NrICYmIHBpcGVsaW5lLnByb2dyZXNzaXZlRW5hYmxlZCAmJiAoIXBDdHggfHwgcEN0eC5wcm9ncmVzc2l2ZVJlbmRlcikgJiYgdGFzay5fX2lkeEluUGlwZWxpbmUgPiBwaXBlbGluZS5ibG9ja0luZGV4O1xuICB2YXIgc3RlcCA9IGluY3JlbWVudGFsID8gcGlwZWxpbmUuc3RlcCA6IG51bGw7XG4gIHZhciBtb2REYXRhQ291bnQgPSBwQ3R4ICYmIHBDdHgubW9kRGF0YUNvdW50O1xuICB2YXIgbW9kQnkgPSBtb2REYXRhQ291bnQgIT0gbnVsbCA/IE1hdGguY2VpbChtb2REYXRhQ291bnQgLyBzdGVwKSA6IG51bGw7XG4gIHJldHVybiB7XG4gICAgc3RlcDogc3RlcCxcbiAgICBtb2RCeTogbW9kQnksXG4gICAgbW9kRGF0YUNvdW50OiBtb2REYXRhQ291bnRcbiAgfTtcbn07XG5cbnByb3RvLmdldFBpcGVsaW5lID0gZnVuY3Rpb24gKHBpcGVsaW5lSWQpIHtcbiAgcmV0dXJuIHRoaXMuX3BpcGVsaW5lTWFwLmdldChwaXBlbGluZUlkKTtcbn07XG4vKipcbiAqIEN1cnJlbnQsIHByb2dyZXNzaXZlIHJlbmRlcmluZyBzdGFydHMgZnJvbSB2aXN1YWwgYW5kIGxheW91dC5cbiAqIEFsd2F5cyBkZXRlY3QgcmVuZGVyIG1vZGUgaW4gdGhlIHNhbWUgc3RhZ2UsIGF2b2lkaW5nIHRoYXQgaW5jb3JyZWN0XG4gKiBkZXRlY3Rpb24gY2F1c2VkIGJ5IGRhdGEgZmlsdGVyaW5nLlxuICogQ2F1dGlvbjpcbiAqIGB1cGRhdGVTdHJlYW1Nb2Rlc2AgdXNlIGBzZXJpZXNNb2RlbC5nZXREYXRhKClgLlxuICovXG5cblxucHJvdG8udXBkYXRlU3RyZWFtTW9kZXMgPSBmdW5jdGlvbiAoc2VyaWVzTW9kZWwsIHZpZXcpIHtcbiAgdmFyIHBpcGVsaW5lID0gdGhpcy5fcGlwZWxpbmVNYXAuZ2V0KHNlcmllc01vZGVsLnVpZCk7XG5cbiAgdmFyIGRhdGEgPSBzZXJpZXNNb2RlbC5nZXREYXRhKCk7XG4gIHZhciBkYXRhTGVuID0gZGF0YS5jb3VudCgpOyAvLyBgcHJvZ3Jlc3NpdmVSZW5kZXJgIG1lYW5zIHRoYXQgY2FuIHJlbmRlciBwcm9ncmVzc2l2ZWx5IGluIGVhY2hcbiAgLy8gYW5pbWF0aW9uIGZyYW1lLiBOb3RlIHRoYXQgc29tZSB0eXBlcyBvZiBzZXJpZXMgZG8gbm90IHByb3ZpZGVcbiAgLy8gYHZpZXcuaW5jcmVtZW50YWxQcmVwYXJlUmVuZGVyYCBidXQgc3VwcG9ydCBgY2hhcnQuYXBwZW5kRGF0YWAuIFdlXG4gIC8vIHVzZSB0aGUgdGVybSBgaW5jcmVtZW50YWxgIGJ1dCBub3QgYHByb2dyZXNzaXZlYCB0byBkZXNjcmliZSB0aGVcbiAgLy8gY2FzZSB0aGF0IGBjaGFydC5hcHBlbmREYXRhYC5cblxuICB2YXIgcHJvZ3Jlc3NpdmVSZW5kZXIgPSBwaXBlbGluZS5wcm9ncmVzc2l2ZUVuYWJsZWQgJiYgdmlldy5pbmNyZW1lbnRhbFByZXBhcmVSZW5kZXIgJiYgZGF0YUxlbiA+PSBwaXBlbGluZS50aHJlc2hvbGQ7XG4gIHZhciBsYXJnZSA9IHNlcmllc01vZGVsLmdldCgnbGFyZ2UnKSAmJiBkYXRhTGVuID49IHNlcmllc01vZGVsLmdldCgnbGFyZ2VUaHJlc2hvbGQnKTsgLy8gVE9ETzogbW9kRGF0YUNvdW50IHNob3VsZCBub3QgdXBkYXRlZCBpZiBgYXBwZW5kRGF0YWAsIG90aGVyd2lzZSBjYXVzZSB3aG9sZSByZXBhaW50LlxuICAvLyBzZWUgYHRlc3QvY2FuZGxlc3RpY2stbGFyZ2UzLmh0bWxgXG5cbiAgdmFyIG1vZERhdGFDb3VudCA9IHNlcmllc01vZGVsLmdldCgncHJvZ3Jlc3NpdmVDaHVua01vZGUnKSA9PT0gJ21vZCcgPyBkYXRhTGVuIDogbnVsbDtcbiAgc2VyaWVzTW9kZWwucGlwZWxpbmVDb250ZXh0ID0gcGlwZWxpbmUuY29udGV4dCA9IHtcbiAgICBwcm9ncmVzc2l2ZVJlbmRlcjogcHJvZ3Jlc3NpdmVSZW5kZXIsXG4gICAgbW9kRGF0YUNvdW50OiBtb2REYXRhQ291bnQsXG4gICAgbGFyZ2U6IGxhcmdlXG4gIH07XG59O1xuXG5wcm90by5yZXN0b3JlUGlwZWxpbmVzID0gZnVuY3Rpb24gKGVjTW9kZWwpIHtcbiAgdmFyIHNjaGVkdWxlciA9IHRoaXM7XG4gIHZhciBwaXBlbGluZU1hcCA9IHNjaGVkdWxlci5fcGlwZWxpbmVNYXAgPSBjcmVhdGVIYXNoTWFwKCk7XG4gIGVjTW9kZWwuZWFjaFNlcmllcyhmdW5jdGlvbiAoc2VyaWVzTW9kZWwpIHtcbiAgICB2YXIgcHJvZ3Jlc3NpdmUgPSBzZXJpZXNNb2RlbC5nZXRQcm9ncmVzc2l2ZSgpO1xuICAgIHZhciBwaXBlbGluZUlkID0gc2VyaWVzTW9kZWwudWlkO1xuICAgIHBpcGVsaW5lTWFwLnNldChwaXBlbGluZUlkLCB7XG4gICAgICBpZDogcGlwZWxpbmVJZCxcbiAgICAgIGhlYWQ6IG51bGwsXG4gICAgICB0YWlsOiBudWxsLFxuICAgICAgdGhyZXNob2xkOiBzZXJpZXNNb2RlbC5nZXRQcm9ncmVzc2l2ZVRocmVzaG9sZCgpLFxuICAgICAgcHJvZ3Jlc3NpdmVFbmFibGVkOiBwcm9ncmVzc2l2ZSAmJiAhKHNlcmllc01vZGVsLnByZXZlbnRJbmNyZW1lbnRhbCAmJiBzZXJpZXNNb2RlbC5wcmV2ZW50SW5jcmVtZW50YWwoKSksXG4gICAgICBibG9ja0luZGV4OiAtMSxcbiAgICAgIHN0ZXA6IE1hdGgucm91bmQocHJvZ3Jlc3NpdmUgfHwgNzAwKSxcbiAgICAgIGNvdW50OiAwXG4gICAgfSk7XG4gICAgcGlwZShzY2hlZHVsZXIsIHNlcmllc01vZGVsLCBzZXJpZXNNb2RlbC5kYXRhVGFzayk7XG4gIH0pO1xufTtcblxucHJvdG8ucHJlcGFyZVN0YWdlVGFza3MgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGFnZVRhc2tNYXAgPSB0aGlzLl9zdGFnZVRhc2tNYXA7XG4gIHZhciBlY01vZGVsID0gdGhpcy5lY0luc3RhbmNlLmdldE1vZGVsKCk7XG4gIHZhciBhcGkgPSB0aGlzLmFwaTtcbiAgZWFjaCh0aGlzLl9hbGxIYW5kbGVycywgZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICB2YXIgcmVjb3JkID0gc3RhZ2VUYXNrTWFwLmdldChoYW5kbGVyLnVpZCkgfHwgc3RhZ2VUYXNrTWFwLnNldChoYW5kbGVyLnVpZCwgW10pO1xuICAgIGhhbmRsZXIucmVzZXQgJiYgY3JlYXRlU2VyaWVzU3RhZ2VUYXNrKHRoaXMsIGhhbmRsZXIsIHJlY29yZCwgZWNNb2RlbCwgYXBpKTtcbiAgICBoYW5kbGVyLm92ZXJhbGxSZXNldCAmJiBjcmVhdGVPdmVyYWxsU3RhZ2VUYXNrKHRoaXMsIGhhbmRsZXIsIHJlY29yZCwgZWNNb2RlbCwgYXBpKTtcbiAgfSwgdGhpcyk7XG59O1xuXG5wcm90by5wcmVwYXJlVmlldyA9IGZ1bmN0aW9uICh2aWV3LCBtb2RlbCwgZWNNb2RlbCwgYXBpKSB7XG4gIHZhciByZW5kZXJUYXNrID0gdmlldy5yZW5kZXJUYXNrO1xuICB2YXIgY29udGV4dCA9IHJlbmRlclRhc2suY29udGV4dDtcbiAgY29udGV4dC5tb2RlbCA9IG1vZGVsO1xuICBjb250ZXh0LmVjTW9kZWwgPSBlY01vZGVsO1xuICBjb250ZXh0LmFwaSA9IGFwaTtcbiAgcmVuZGVyVGFzay5fX2Jsb2NrID0gIXZpZXcuaW5jcmVtZW50YWxQcmVwYXJlUmVuZGVyO1xuICBwaXBlKHRoaXMsIG1vZGVsLCByZW5kZXJUYXNrKTtcbn07XG5cbnByb3RvLnBlcmZvcm1EYXRhUHJvY2Vzc29yVGFza3MgPSBmdW5jdGlvbiAoZWNNb2RlbCwgcGF5bG9hZCkge1xuICAvLyBJZiB3ZSBkbyBub3QgdXNlIGBibG9ja2AgaGVyZSwgaXQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgd2hlbiB0byB1cGRhdGUgbW9kZXMuXG4gIHBlcmZvcm1TdGFnZVRhc2tzKHRoaXMsIHRoaXMuX2RhdGFQcm9jZXNzb3JIYW5kbGVycywgZWNNb2RlbCwgcGF5bG9hZCwge1xuICAgIGJsb2NrOiB0cnVlXG4gIH0pO1xufTsgLy8gb3B0XG4vLyBvcHQudmlzdWFsVHlwZTogJ3Zpc3VhbCcgb3IgJ2xheW91dCdcbi8vIG9wdC5zZXREaXJ0eVxuXG5cbnByb3RvLnBlcmZvcm1WaXN1YWxUYXNrcyA9IGZ1bmN0aW9uIChlY01vZGVsLCBwYXlsb2FkLCBvcHQpIHtcbiAgcGVyZm9ybVN0YWdlVGFza3ModGhpcywgdGhpcy5fdmlzdWFsSGFuZGxlcnMsIGVjTW9kZWwsIHBheWxvYWQsIG9wdCk7XG59O1xuXG5mdW5jdGlvbiBwZXJmb3JtU3RhZ2VUYXNrcyhzY2hlZHVsZXIsIHN0YWdlSGFuZGxlcnMsIGVjTW9kZWwsIHBheWxvYWQsIG9wdCkge1xuICBvcHQgPSBvcHQgfHwge307XG4gIHZhciB1bmZpbmlzaGVkO1xuICBlYWNoKHN0YWdlSGFuZGxlcnMsIGZ1bmN0aW9uIChzdGFnZUhhbmRsZXIsIGlkeCkge1xuICAgIGlmIChvcHQudmlzdWFsVHlwZSAmJiBvcHQudmlzdWFsVHlwZSAhPT0gc3RhZ2VIYW5kbGVyLnZpc3VhbFR5cGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc3RhZ2VIYW5kbGVyUmVjb3JkID0gc2NoZWR1bGVyLl9zdGFnZVRhc2tNYXAuZ2V0KHN0YWdlSGFuZGxlci51aWQpO1xuXG4gICAgdmFyIHNlcmllc1Rhc2tNYXAgPSBzdGFnZUhhbmRsZXJSZWNvcmQuc2VyaWVzVGFza01hcDtcbiAgICB2YXIgb3ZlcmFsbFRhc2sgPSBzdGFnZUhhbmRsZXJSZWNvcmQub3ZlcmFsbFRhc2s7XG5cbiAgICBpZiAob3ZlcmFsbFRhc2spIHtcbiAgICAgIHZhciBvdmVyYWxsTmVlZERpcnR5O1xuICAgICAgdmFyIGFnZW50U3R1Yk1hcCA9IG92ZXJhbGxUYXNrLmFnZW50U3R1Yk1hcDtcbiAgICAgIGFnZW50U3R1Yk1hcC5lYWNoKGZ1bmN0aW9uIChzdHViKSB7XG4gICAgICAgIGlmIChuZWVkU2V0RGlydHkob3B0LCBzdHViKSkge1xuICAgICAgICAgIHN0dWIuZGlydHkoKTtcbiAgICAgICAgICBvdmVyYWxsTmVlZERpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBvdmVyYWxsTmVlZERpcnR5ICYmIG92ZXJhbGxUYXNrLmRpcnR5KCk7XG4gICAgICB1cGRhdGVQYXlsb2FkKG92ZXJhbGxUYXNrLCBwYXlsb2FkKTtcbiAgICAgIHZhciBwZXJmb3JtQXJncyA9IHNjaGVkdWxlci5nZXRQZXJmb3JtQXJncyhvdmVyYWxsVGFzaywgb3B0LmJsb2NrKTsgLy8gRXhlY3V0ZSBzdHVicyBmaXJzdGx5LCB3aGljaCBtYXkgc2V0IHRoZSBvdmVyYWxsIHRhc2sgZGlydHksXG4gICAgICAvLyB0aGVuIGV4ZWN1dGUgdGhlIG92ZXJhbGwgdGFzay4gQW5kIHN0dWIgd2lsbCBjYWxsIHNlcmllc01vZGVsLnNldERhdGEsXG4gICAgICAvLyB3aGljaCBlbnN1cmVzIHRoYXQgaW4gdGhlIG92ZXJhbGxUYXNrIHNlcmllc01vZGVsLmdldERhdGEoKSB3aWxsIG5vdFxuICAgICAgLy8gcmV0dXJuIGluY29ycmVjdCBkYXRhLlxuXG4gICAgICBhZ2VudFN0dWJNYXAuZWFjaChmdW5jdGlvbiAoc3R1Yikge1xuICAgICAgICBzdHViLnBlcmZvcm0ocGVyZm9ybUFyZ3MpO1xuICAgICAgfSk7XG4gICAgICB1bmZpbmlzaGVkIHw9IG92ZXJhbGxUYXNrLnBlcmZvcm0ocGVyZm9ybUFyZ3MpO1xuICAgIH0gZWxzZSBpZiAoc2VyaWVzVGFza01hcCkge1xuICAgICAgc2VyaWVzVGFza01hcC5lYWNoKGZ1bmN0aW9uICh0YXNrLCBwaXBlbGluZUlkKSB7XG4gICAgICAgIGlmIChuZWVkU2V0RGlydHkob3B0LCB0YXNrKSkge1xuICAgICAgICAgIHRhc2suZGlydHkoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwZXJmb3JtQXJncyA9IHNjaGVkdWxlci5nZXRQZXJmb3JtQXJncyh0YXNrLCBvcHQuYmxvY2spO1xuICAgICAgICBwZXJmb3JtQXJncy5za2lwID0gIXN0YWdlSGFuZGxlci5wZXJmb3JtUmF3U2VyaWVzICYmIGVjTW9kZWwuaXNTZXJpZXNGaWx0ZXJlZCh0YXNrLmNvbnRleHQubW9kZWwpO1xuICAgICAgICB1cGRhdGVQYXlsb2FkKHRhc2ssIHBheWxvYWQpO1xuICAgICAgICB1bmZpbmlzaGVkIHw9IHRhc2sucGVyZm9ybShwZXJmb3JtQXJncyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIG5lZWRTZXREaXJ0eShvcHQsIHRhc2spIHtcbiAgICByZXR1cm4gb3B0LnNldERpcnR5ICYmICghb3B0LmRpcnR5TWFwIHx8IG9wdC5kaXJ0eU1hcC5nZXQodGFzay5fX3BpcGVsaW5lLmlkKSk7XG4gIH1cblxuICBzY2hlZHVsZXIudW5maW5pc2hlZCB8PSB1bmZpbmlzaGVkO1xufVxuXG5wcm90by5wZXJmb3JtU2VyaWVzVGFza3MgPSBmdW5jdGlvbiAoZWNNb2RlbCkge1xuICB2YXIgdW5maW5pc2hlZDtcbiAgZWNNb2RlbC5lYWNoU2VyaWVzKGZ1bmN0aW9uIChzZXJpZXNNb2RlbCkge1xuICAgIC8vIFByb2dyZXNzIHRvIHRoZSBlbmQgZm9yIGRhdGFJbml0IGFuZCBkYXRhUmVzdG9yZS5cbiAgICB1bmZpbmlzaGVkIHw9IHNlcmllc01vZGVsLmRhdGFUYXNrLnBlcmZvcm0oKTtcbiAgfSk7XG4gIHRoaXMudW5maW5pc2hlZCB8PSB1bmZpbmlzaGVkO1xufTtcblxucHJvdG8ucGxhbiA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVHJhdmVsIHBpcGVsaW5lcywgY2hlY2sgYmxvY2suXG4gIHRoaXMuX3BpcGVsaW5lTWFwLmVhY2goZnVuY3Rpb24gKHBpcGVsaW5lKSB7XG4gICAgdmFyIHRhc2sgPSBwaXBlbGluZS50YWlsO1xuXG4gICAgZG8ge1xuICAgICAgaWYgKHRhc2suX19ibG9jaykge1xuICAgICAgICBwaXBlbGluZS5ibG9ja0luZGV4ID0gdGFzay5fX2lkeEluUGlwZWxpbmU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB0YXNrID0gdGFzay5nZXRVcHN0cmVhbSgpO1xuICAgIH0gd2hpbGUgKHRhc2spO1xuICB9KTtcbn07XG5cbnZhciB1cGRhdGVQYXlsb2FkID0gcHJvdG8udXBkYXRlUGF5bG9hZCA9IGZ1bmN0aW9uICh0YXNrLCBwYXlsb2FkKSB7XG4gIHBheWxvYWQgIT09ICdyZW1haW4nICYmICh0YXNrLmNvbnRleHQucGF5bG9hZCA9IHBheWxvYWQpO1xufTtcblxuZnVuY3Rpb24gY3JlYXRlU2VyaWVzU3RhZ2VUYXNrKHNjaGVkdWxlciwgc3RhZ2VIYW5kbGVyLCBzdGFnZUhhbmRsZXJSZWNvcmQsIGVjTW9kZWwsIGFwaSkge1xuICB2YXIgc2VyaWVzVGFza01hcCA9IHN0YWdlSGFuZGxlclJlY29yZC5zZXJpZXNUYXNrTWFwIHx8IChzdGFnZUhhbmRsZXJSZWNvcmQuc2VyaWVzVGFza01hcCA9IGNyZWF0ZUhhc2hNYXAoKSk7XG4gIHZhciBzZXJpZXNUeXBlID0gc3RhZ2VIYW5kbGVyLnNlcmllc1R5cGU7XG4gIHZhciBnZXRUYXJnZXRTZXJpZXMgPSBzdGFnZUhhbmRsZXIuZ2V0VGFyZ2V0U2VyaWVzOyAvLyBJZiBhIHN0YWdlSGFuZGxlciBzaG91bGQgY292ZXIgYWxsIHNlcmllcywgYGNyZWF0ZU9uQWxsU2VyaWVzYCBzaG91bGQgYmUgZGVjbGFyZWQgbWFuZGF0b3JpbHksXG4gIC8vIHRvIGF2b2lkIHNvbWUgdHlwbyBvciBhYnVzZS4gT3RoZXJ3aXNlIGlmIGFuIGV4dGVuc2lvbiBkbyBub3Qgc3BlY2lmeSBhIGBzZXJpZXNUeXBlYCxcbiAgLy8gaXQgd29ya3MgYnV0IGl0IG1heSBjYXVzZSBvdGhlciBpcnJlbGV2YW50IGNoYXJ0cyBibG9ja2VkLlxuXG4gIGlmIChzdGFnZUhhbmRsZXIuY3JlYXRlT25BbGxTZXJpZXMpIHtcbiAgICBlY01vZGVsLmVhY2hSYXdTZXJpZXMoY3JlYXRlKTtcbiAgfSBlbHNlIGlmIChzZXJpZXNUeXBlKSB7XG4gICAgZWNNb2RlbC5lYWNoUmF3U2VyaWVzQnlUeXBlKHNlcmllc1R5cGUsIGNyZWF0ZSk7XG4gIH0gZWxzZSBpZiAoZ2V0VGFyZ2V0U2VyaWVzKSB7XG4gICAgZ2V0VGFyZ2V0U2VyaWVzKGVjTW9kZWwsIGFwaSkuZWFjaChjcmVhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlKHNlcmllc01vZGVsKSB7XG4gICAgdmFyIHBpcGVsaW5lSWQgPSBzZXJpZXNNb2RlbC51aWQ7IC8vIEluaXQgdGFza3MgZm9yIGVhY2ggc2VyaWVzTW9kZWwgb25seSBvbmNlLlxuICAgIC8vIFJldXNlIG9yaWdpbmFsIHRhc2sgaW5zdGFuY2UuXG5cbiAgICB2YXIgdGFzayA9IHNlcmllc1Rhc2tNYXAuZ2V0KHBpcGVsaW5lSWQpIHx8IHNlcmllc1Rhc2tNYXAuc2V0KHBpcGVsaW5lSWQsIGNyZWF0ZVRhc2soe1xuICAgICAgcGxhbjogc2VyaWVzVGFza1BsYW4sXG4gICAgICByZXNldDogc2VyaWVzVGFza1Jlc2V0LFxuICAgICAgY291bnQ6IHNlcmllc1Rhc2tDb3VudFxuICAgIH0pKTtcbiAgICB0YXNrLmNvbnRleHQgPSB7XG4gICAgICBtb2RlbDogc2VyaWVzTW9kZWwsXG4gICAgICBlY01vZGVsOiBlY01vZGVsLFxuICAgICAgYXBpOiBhcGksXG4gICAgICB1c2VDbGVhclZpc3VhbDogc3RhZ2VIYW5kbGVyLmlzVmlzdWFsICYmICFzdGFnZUhhbmRsZXIuaXNMYXlvdXQsXG4gICAgICBwbGFuOiBzdGFnZUhhbmRsZXIucGxhbixcbiAgICAgIHJlc2V0OiBzdGFnZUhhbmRsZXIucmVzZXQsXG4gICAgICBzY2hlZHVsZXI6IHNjaGVkdWxlclxuICAgIH07XG4gICAgcGlwZShzY2hlZHVsZXIsIHNlcmllc01vZGVsLCB0YXNrKTtcbiAgfSAvLyBDbGVhciB1bnVzZWQgc2VyaWVzIHRhc2tzLlxuXG5cbiAgdmFyIHBpcGVsaW5lTWFwID0gc2NoZWR1bGVyLl9waXBlbGluZU1hcDtcbiAgc2VyaWVzVGFza01hcC5lYWNoKGZ1bmN0aW9uICh0YXNrLCBwaXBlbGluZUlkKSB7XG4gICAgaWYgKCFwaXBlbGluZU1hcC5nZXQocGlwZWxpbmVJZCkpIHtcbiAgICAgIHRhc2suZGlzcG9zZSgpO1xuICAgICAgc2VyaWVzVGFza01hcC5yZW1vdmVLZXkocGlwZWxpbmVJZCk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT3ZlcmFsbFN0YWdlVGFzayhzY2hlZHVsZXIsIHN0YWdlSGFuZGxlciwgc3RhZ2VIYW5kbGVyUmVjb3JkLCBlY01vZGVsLCBhcGkpIHtcbiAgdmFyIG92ZXJhbGxUYXNrID0gc3RhZ2VIYW5kbGVyUmVjb3JkLm92ZXJhbGxUYXNrID0gc3RhZ2VIYW5kbGVyUmVjb3JkLm92ZXJhbGxUYXNrIC8vIEZvciBvdmVyYWxsIHRhc2ssIHRoZSBmdW5jdGlvbiBvbmx5IGJlIGNhbGxlZCBvbiByZXNldCBzdGFnZS5cbiAgfHwgY3JlYXRlVGFzayh7XG4gICAgcmVzZXQ6IG92ZXJhbGxUYXNrUmVzZXRcbiAgfSk7XG4gIG92ZXJhbGxUYXNrLmNvbnRleHQgPSB7XG4gICAgZWNNb2RlbDogZWNNb2RlbCxcbiAgICBhcGk6IGFwaSxcbiAgICBvdmVyYWxsUmVzZXQ6IHN0YWdlSGFuZGxlci5vdmVyYWxsUmVzZXQsXG4gICAgc2NoZWR1bGVyOiBzY2hlZHVsZXJcbiAgfTsgLy8gUmV1c2Ugb3JpZ25hbCBzdHVicy5cblxuICB2YXIgYWdlbnRTdHViTWFwID0gb3ZlcmFsbFRhc2suYWdlbnRTdHViTWFwID0gb3ZlcmFsbFRhc2suYWdlbnRTdHViTWFwIHx8IGNyZWF0ZUhhc2hNYXAoKTtcbiAgdmFyIHNlcmllc1R5cGUgPSBzdGFnZUhhbmRsZXIuc2VyaWVzVHlwZTtcbiAgdmFyIGdldFRhcmdldFNlcmllcyA9IHN0YWdlSGFuZGxlci5nZXRUYXJnZXRTZXJpZXM7XG4gIHZhciBvdmVyYWxsUHJvZ3Jlc3MgPSB0cnVlO1xuICB2YXIgbW9kaWZ5T3V0cHV0RW5kID0gc3RhZ2VIYW5kbGVyLm1vZGlmeU91dHB1dEVuZDsgLy8gQW4gb3ZlcmFsbCB0YXNrIHdpdGggc2VyaWVzVHlwZSBkZXRlY3RlZCBvciBoYXMgYGdldFRhcmdldFNlcmllc2AsIHdlIGFkZFxuICAvLyBzdHViIGluIGVhY2ggcGlwZWxpbmVzLCBpdCB3aWxsIHNldCB0aGUgb3ZlcmFsbCB0YXNrIGRpcnR5IHdoZW4gdGhlIHBpcGVsaW5lXG4gIC8vIHByb2dyZXNzLiBNb3Jlb3ZlciwgdG8gYXZvaWQgY2FsbCB0aGUgb3ZlcmFsbCB0YXNrIGVhY2ggZnJhbWUgKHRvbyBmcmVxdWVudCksXG4gIC8vIHdlIHNldCB0aGUgcGlwZWxpbmUgYmxvY2suXG5cbiAgaWYgKHNlcmllc1R5cGUpIHtcbiAgICBlY01vZGVsLmVhY2hSYXdTZXJpZXNCeVR5cGUoc2VyaWVzVHlwZSwgY3JlYXRlU3R1Yik7XG4gIH0gZWxzZSBpZiAoZ2V0VGFyZ2V0U2VyaWVzKSB7XG4gICAgZ2V0VGFyZ2V0U2VyaWVzKGVjTW9kZWwsIGFwaSkuZWFjaChjcmVhdGVTdHViKTtcbiAgfSAvLyBPdGhlcndpc2UsICh1c3VhbGx5IGl0IGlzIGxlZ2FuY3kgY2FzZSksIHRoZSBvdmVyYWxsIHRhc2sgd2lsbCBvbmx5IGJlXG4gIC8vIGV4ZWN1dGVkIHdoZW4gdXBzdHJlYW0gZGlydHkuIE90aGVyd2lzZSB0aGUgcHJvZ3Jlc3NpdmUgcmVuZGVyaW5nIG9mIGFsbFxuICAvLyBwaXBlbGluZXMgd2lsbCBiZSBkaXNhYmxlZCB1bmV4cGVjdGVkbHkuIEJ1dCBpdCBzdGlsbCBuZWVkcyBzdHVicyB0byByZWNlaXZlXG4gIC8vIGRpcnR5IGluZm8gZnJvbSB1cHN0ZWFtLlxuICBlbHNlIHtcbiAgICAgIG92ZXJhbGxQcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgZWFjaChlY01vZGVsLmdldFNlcmllcygpLCBjcmVhdGVTdHViKTtcbiAgICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU3R1YihzZXJpZXNNb2RlbCkge1xuICAgIHZhciBwaXBlbGluZUlkID0gc2VyaWVzTW9kZWwudWlkO1xuICAgIHZhciBzdHViID0gYWdlbnRTdHViTWFwLmdldChwaXBlbGluZUlkKTtcblxuICAgIGlmICghc3R1Yikge1xuICAgICAgc3R1YiA9IGFnZW50U3R1Yk1hcC5zZXQocGlwZWxpbmVJZCwgY3JlYXRlVGFzayh7XG4gICAgICAgIHJlc2V0OiBzdHViUmVzZXQsXG4gICAgICAgIG9uRGlydHk6IHN0dWJPbkRpcnR5XG4gICAgICB9KSk7IC8vIFdoZW4gdGhlIHJlc3VsdCBvZiBgZ2V0VGFyZ2V0U2VyaWVzYCBjaGFuZ2VkLCB0aGUgb3ZlcmFsbFRhc2tcbiAgICAgIC8vIHNob3VsZCBiZSBzZXQgYXMgZGlydHkgYW5kIHJlLXBlcmZvcm1lZC5cblxuICAgICAgb3ZlcmFsbFRhc2suZGlydHkoKTtcbiAgICB9XG5cbiAgICBzdHViLmNvbnRleHQgPSB7XG4gICAgICBtb2RlbDogc2VyaWVzTW9kZWwsXG4gICAgICBvdmVyYWxsUHJvZ3Jlc3M6IG92ZXJhbGxQcm9ncmVzcyxcbiAgICAgIG1vZGlmeU91dHB1dEVuZDogbW9kaWZ5T3V0cHV0RW5kXG4gICAgfTtcbiAgICBzdHViLmFnZW50ID0gb3ZlcmFsbFRhc2s7XG4gICAgc3R1Yi5fX2Jsb2NrID0gb3ZlcmFsbFByb2dyZXNzO1xuICAgIHBpcGUoc2NoZWR1bGVyLCBzZXJpZXNNb2RlbCwgc3R1Yik7XG4gIH0gLy8gQ2xlYXIgdW51c2VkIHN0dWJzLlxuXG5cbiAgdmFyIHBpcGVsaW5lTWFwID0gc2NoZWR1bGVyLl9waXBlbGluZU1hcDtcbiAgYWdlbnRTdHViTWFwLmVhY2goZnVuY3Rpb24gKHN0dWIsIHBpcGVsaW5lSWQpIHtcbiAgICBpZiAoIXBpcGVsaW5lTWFwLmdldChwaXBlbGluZUlkKSkge1xuICAgICAgc3R1Yi5kaXNwb3NlKCk7IC8vIFdoZW4gdGhlIHJlc3VsdCBvZiBgZ2V0VGFyZ2V0U2VyaWVzYCBjaGFuZ2VkLCB0aGUgb3ZlcmFsbFRhc2tcbiAgICAgIC8vIHNob3VsZCBiZSBzZXQgYXMgZGlydHkgYW5kIHJlLXBlcmZvcm1lZC5cblxuICAgICAgb3ZlcmFsbFRhc2suZGlydHkoKTtcbiAgICAgIGFnZW50U3R1Yk1hcC5yZW1vdmVLZXkocGlwZWxpbmVJZCk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gb3ZlcmFsbFRhc2tSZXNldChjb250ZXh0KSB7XG4gIGNvbnRleHQub3ZlcmFsbFJlc2V0KGNvbnRleHQuZWNNb2RlbCwgY29udGV4dC5hcGksIGNvbnRleHQucGF5bG9hZCk7XG59XG5cbmZ1bmN0aW9uIHN0dWJSZXNldChjb250ZXh0LCB1cHN0cmVhbUNvbnRleHQpIHtcbiAgcmV0dXJuIGNvbnRleHQub3ZlcmFsbFByb2dyZXNzICYmIHN0dWJQcm9ncmVzcztcbn1cblxuZnVuY3Rpb24gc3R1YlByb2dyZXNzKCkge1xuICB0aGlzLmFnZW50LmRpcnR5KCk7XG4gIHRoaXMuZ2V0RG93bnN0cmVhbSgpLmRpcnR5KCk7XG59XG5cbmZ1bmN0aW9uIHN0dWJPbkRpcnR5KCkge1xuICB0aGlzLmFnZW50ICYmIHRoaXMuYWdlbnQuZGlydHkoKTtcbn1cblxuZnVuY3Rpb24gc2VyaWVzVGFza1BsYW4oY29udGV4dCkge1xuICByZXR1cm4gY29udGV4dC5wbGFuICYmIGNvbnRleHQucGxhbihjb250ZXh0Lm1vZGVsLCBjb250ZXh0LmVjTW9kZWwsIGNvbnRleHQuYXBpLCBjb250ZXh0LnBheWxvYWQpO1xufVxuXG5mdW5jdGlvbiBzZXJpZXNUYXNrUmVzZXQoY29udGV4dCkge1xuICBpZiAoY29udGV4dC51c2VDbGVhclZpc3VhbCkge1xuICAgIGNvbnRleHQuZGF0YS5jbGVhckFsbFZpc3VhbCgpO1xuICB9XG5cbiAgdmFyIHJlc2V0RGVmaW5lcyA9IGNvbnRleHQucmVzZXREZWZpbmVzID0gbm9ybWFsaXplVG9BcnJheShjb250ZXh0LnJlc2V0KGNvbnRleHQubW9kZWwsIGNvbnRleHQuZWNNb2RlbCwgY29udGV4dC5hcGksIGNvbnRleHQucGF5bG9hZCkpO1xuICByZXR1cm4gcmVzZXREZWZpbmVzLmxlbmd0aCA+IDEgPyBtYXAocmVzZXREZWZpbmVzLCBmdW5jdGlvbiAodiwgaWR4KSB7XG4gICAgcmV0dXJuIG1ha2VTZXJpZXNUYXNrUHJvZ3Jlc3MoaWR4KTtcbiAgfSkgOiBzaW5nbGVTZXJpZXNUYXNrUHJvZ3Jlc3M7XG59XG5cbnZhciBzaW5nbGVTZXJpZXNUYXNrUHJvZ3Jlc3MgPSBtYWtlU2VyaWVzVGFza1Byb2dyZXNzKDApO1xuXG5mdW5jdGlvbiBtYWtlU2VyaWVzVGFza1Byb2dyZXNzKHJlc2V0RGVmaW5lSWR4KSB7XG4gIHJldHVybiBmdW5jdGlvbiAocGFyYW1zLCBjb250ZXh0KSB7XG4gICAgdmFyIGRhdGEgPSBjb250ZXh0LmRhdGE7XG4gICAgdmFyIHJlc2V0RGVmaW5lID0gY29udGV4dC5yZXNldERlZmluZXNbcmVzZXREZWZpbmVJZHhdO1xuXG4gICAgaWYgKHJlc2V0RGVmaW5lICYmIHJlc2V0RGVmaW5lLmRhdGFFYWNoKSB7XG4gICAgICBmb3IgKHZhciBpID0gcGFyYW1zLnN0YXJ0OyBpIDwgcGFyYW1zLmVuZDsgaSsrKSB7XG4gICAgICAgIHJlc2V0RGVmaW5lLmRhdGFFYWNoKGRhdGEsIGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocmVzZXREZWZpbmUgJiYgcmVzZXREZWZpbmUucHJvZ3Jlc3MpIHtcbiAgICAgIHJlc2V0RGVmaW5lLnByb2dyZXNzKHBhcmFtcywgZGF0YSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBzZXJpZXNUYXNrQ291bnQoY29udGV4dCkge1xuICByZXR1cm4gY29udGV4dC5kYXRhLmNvdW50KCk7XG59XG5cbmZ1bmN0aW9uIHBpcGUoc2NoZWR1bGVyLCBzZXJpZXNNb2RlbCwgdGFzaykge1xuICB2YXIgcGlwZWxpbmVJZCA9IHNlcmllc01vZGVsLnVpZDtcblxuICB2YXIgcGlwZWxpbmUgPSBzY2hlZHVsZXIuX3BpcGVsaW5lTWFwLmdldChwaXBlbGluZUlkKTtcblxuICAhcGlwZWxpbmUuaGVhZCAmJiAocGlwZWxpbmUuaGVhZCA9IHRhc2spO1xuICBwaXBlbGluZS50YWlsICYmIHBpcGVsaW5lLnRhaWwucGlwZSh0YXNrKTtcbiAgcGlwZWxpbmUudGFpbCA9IHRhc2s7XG4gIHRhc2suX19pZHhJblBpcGVsaW5lID0gcGlwZWxpbmUuY291bnQrKztcbiAgdGFzay5fX3BpcGVsaW5lID0gcGlwZWxpbmU7XG59XG5cblNjaGVkdWxlci53cmFwU3RhZ2VIYW5kbGVyID0gZnVuY3Rpb24gKHN0YWdlSGFuZGxlciwgdmlzdWFsVHlwZSkge1xuICBpZiAoaXNGdW5jdGlvbihzdGFnZUhhbmRsZXIpKSB7XG4gICAgc3RhZ2VIYW5kbGVyID0ge1xuICAgICAgb3ZlcmFsbFJlc2V0OiBzdGFnZUhhbmRsZXIsXG4gICAgICBzZXJpZXNUeXBlOiBkZXRlY3RTZXJpc2VUeXBlKHN0YWdlSGFuZGxlcilcbiAgICB9O1xuICB9XG5cbiAgc3RhZ2VIYW5kbGVyLnVpZCA9IGdldFVJRCgnc3RhZ2VIYW5kbGVyJyk7XG4gIHZpc3VhbFR5cGUgJiYgKHN0YWdlSGFuZGxlci52aXN1YWxUeXBlID0gdmlzdWFsVHlwZSk7XG4gIHJldHVybiBzdGFnZUhhbmRsZXI7XG59O1xuLyoqXG4gKiBPbmx5IHNvbWUgbGVnYWN5IHN0YWdlIGhhbmRsZXJzICh1c3VhbGx5IGluIGVjaGFydHMgZXh0ZW5zaW9ucykgYXJlIHB1cmUgZnVuY3Rpb24uXG4gKiBUbyBlbnN1cmUgdGhhdCB0aGV5IGNhbiB3b3JrIG5vcm1hbGx5LCB0aGV5IHNob3VsZCB3b3JrIGluIGJsb2NrIG1vZGUsIHRoYXQgaXMsXG4gKiB0aGV5IHNob3VsZCBub3QgYmUgc3RhcnRlZCB1dGlsIHRoZSBwcmV2aW91cyB0YXNrcyBmaW5pc2hlZC4gU28gdGhleSBjYXVzZSB0aGVcbiAqIHByb2dyZXNzaXZlIHJlbmRlcmluZyBkaXNhYmxlZC4gV2UgdHJ5IHRvIGRldGVjdCB0aGUgc2VyaWVzIHR5cGUsIHRvIG5hcnJvdyBkb3duXG4gKiB0aGUgYmxvY2sgcmFuZ2UgdG8gb25seSB0aGUgc2VyaWVzIHR5cGUgdGhleSBjb25jZXJuLCBidXQgbm90IGFsbCBzZXJpZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBkZXRlY3RTZXJpc2VUeXBlKGxlZ2FjeUZ1bmMpIHtcbiAgc2VyaWVzVHlwZSA9IG51bGw7XG5cbiAgdHJ5IHtcbiAgICAvLyBBc3N1bWUgdGhlcmUgaXMgbm8gYXN5bmMgd2hlbiBjYWxsaW5nIGBlYWNoU2VyaWVzQnlUeXBlYC5cbiAgICBsZWdhY3lGdW5jKGVjTW9kZWxNb2NrLCBhcGlNb2NrKTtcbiAgfSBjYXRjaCAoZSkge31cblxuICByZXR1cm4gc2VyaWVzVHlwZTtcbn1cblxudmFyIGVjTW9kZWxNb2NrID0ge307XG52YXIgYXBpTW9jayA9IHt9O1xudmFyIHNlcmllc1R5cGU7XG5tb2NrTWV0aG9kcyhlY01vZGVsTW9jaywgR2xvYmFsTW9kZWwpO1xubW9ja01ldGhvZHMoYXBpTW9jaywgRXh0ZW5zaW9uQVBJKTtcblxuZWNNb2RlbE1vY2suZWFjaFNlcmllc0J5VHlwZSA9IGVjTW9kZWxNb2NrLmVhY2hSYXdTZXJpZXNCeVR5cGUgPSBmdW5jdGlvbiAodHlwZSkge1xuICBzZXJpZXNUeXBlID0gdHlwZTtcbn07XG5cbmVjTW9kZWxNb2NrLmVhY2hDb21wb25lbnQgPSBmdW5jdGlvbiAoY29uZCkge1xuICBpZiAoY29uZC5tYWluVHlwZSA9PT0gJ3NlcmllcycgJiYgY29uZC5zdWJUeXBlKSB7XG4gICAgc2VyaWVzVHlwZSA9IGNvbmQuc3ViVHlwZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbW9ja01ldGhvZHModGFyZ2V0LCBDbHopIHtcbiAgZm9yICh2YXIgbmFtZSBpbiBDbHoucHJvdG90eXBlKSB7XG4gICAgLy8gRG8gbm90IHVzZSBoYXNPd25Qcm9wZXJ0eVxuICAgIHRhcmdldFtuYW1lXSA9IG5vb3A7XG4gIH1cbn1cblxudmFyIF9kZWZhdWx0ID0gU2NoZWR1bGVyO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgX3V0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgYXNzZXJ0ID0gX3V0aWwuYXNzZXJ0O1xudmFyIGlzQXJyYXkgPSBfdXRpbC5pc0FycmF5O1xuXG52YXIgX2NvbmZpZyA9IHJlcXVpcmUoXCIuLi9jb25maWdcIik7XG5cbnZhciBfX0RFVl9fID0gX2NvbmZpZy5fX0RFVl9fO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmluZVxuICogQHJldHVybiBTZWUgdGhlIHJldHVybiBvZiBgY3JlYXRlVGFza2AuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRhc2soZGVmaW5lKSB7XG4gIHJldHVybiBuZXcgVGFzayhkZWZpbmUpO1xufVxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZpbmVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRlZmluZS5yZXNldCBDdXN0b20gcmVzZXRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtkZWZpbmUucGxhbl0gUmV0dXJucyAncmVzZXQnIGluZGljYXRlIHJlc2V0IGltbWVkaWF0ZWx5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2RlZmluZS5jb3VudF0gY291bnQgaXMgdXNlZCB0byBkZXRlcm1pbiBkYXRhIHRhc2suXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZGVmaW5lLm9uRGlydHldIGNvdW50IGlzIHVzZWQgdG8gZGV0ZXJtaW4gZGF0YSB0YXNrLlxuICovXG5cblxuZnVuY3Rpb24gVGFzayhkZWZpbmUpIHtcbiAgZGVmaW5lID0gZGVmaW5lIHx8IHt9O1xuICB0aGlzLl9yZXNldCA9IGRlZmluZS5yZXNldDtcbiAgdGhpcy5fcGxhbiA9IGRlZmluZS5wbGFuO1xuICB0aGlzLl9jb3VudCA9IGRlZmluZS5jb3VudDtcbiAgdGhpcy5fb25EaXJ0eSA9IGRlZmluZS5vbkRpcnR5O1xuICB0aGlzLl9kaXJ0eSA9IHRydWU7IC8vIENvbnRleHQgbXVzdCBiZSBzcGVjaWZpZWQgaW1wbGljaXRseSwgdG9cbiAgLy8gYXZvaWQgbWlzcyB1cGRhdGUgY29udGV4dCB3aGVuIG1vZGVsIGNoYW5nZWQuXG5cbiAgdGhpcy5jb250ZXh0O1xufVxuXG52YXIgdGFza1Byb3RvID0gVGFzay5wcm90b3R5cGU7XG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBwZXJmb3JtQXJnc1xuICogQHBhcmFtIHtudW1iZXJ9IFtwZXJmb3JtQXJncy5zdGVwXSBTcGVjaWZpZWQgc3RlcC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbcGVyZm9ybUFyZ3Muc2tpcF0gU2tpcCBjdXN0b21lciBwZXJmb3JtIGNhbGwuXG4gKiBAcGFyYW0ge251bWJlcn0gW3BlcmZvcm1BcmdzLm1vZEJ5XSBTYW1wbGluZyB3aW5kb3cgc2l6ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbcGVyZm9ybUFyZ3MubW9kRGF0YUNvdW50XSBTYW1wbGluZyBjb3VudC5cbiAqL1xuXG50YXNrUHJvdG8ucGVyZm9ybSA9IGZ1bmN0aW9uIChwZXJmb3JtQXJncykge1xuICB2YXIgdXBUYXNrID0gdGhpcy5fdXBzdHJlYW07XG4gIHZhciBza2lwID0gcGVyZm9ybUFyZ3MgJiYgcGVyZm9ybUFyZ3Muc2tpcDsgLy8gVE9ETyBzb21lIHJlZmFjdG9yLlxuICAvLyBQdWxsIGRhdGEuIE11c3QgcHVsbCBkYXRhIGVhY2ggdGltZSwgYmVjYXVzZSBjb250ZXh0LmRhdGFcbiAgLy8gbWF5IGJlIHVwZGF0ZWQgYnkgU2VyaWVzLnNldERhdGEuXG5cbiAgaWYgKHRoaXMuX2RpcnR5ICYmIHVwVGFzaykge1xuICAgIHZhciBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuICAgIGNvbnRleHQuZGF0YSA9IGNvbnRleHQub3V0cHV0RGF0YSA9IHVwVGFzay5jb250ZXh0Lm91dHB1dERhdGE7XG4gIH1cblxuICBpZiAodGhpcy5fX3BpcGVsaW5lKSB7XG4gICAgdGhpcy5fX3BpcGVsaW5lLmN1cnJlbnRUYXNrID0gdGhpcztcbiAgfVxuXG4gIHZhciBwbGFuUmVzdWx0O1xuXG4gIGlmICh0aGlzLl9wbGFuICYmICFza2lwKSB7XG4gICAgcGxhblJlc3VsdCA9IHRoaXMuX3BsYW4odGhpcy5jb250ZXh0KTtcbiAgfSAvLyBTdXBwb3J0IHNoYXJkaW5nIGJ5IG1vZCwgd2hpY2ggY2hhbmdlcyB0aGUgcmVuZGVyIHNlcXVlbmNlIGFuZCBtYWtlcyB0aGUgcmVuZGVyZWQgZ3JhcGhpY1xuICAvLyBlbGVtZW50cyB1bmlmb3JtZWQgZGlzdHJpYnV0ZWQgd2hlbiBwcm9ncmVzcywgZXNwZWNpYWxseSB3aGVuIG1vdmluZyBvciB6b29taW5nLlxuXG5cbiAgdmFyIGxhc3RNb2RCeSA9IG5vcm1hbGl6ZU1vZEJ5KHRoaXMuX21vZEJ5KTtcbiAgdmFyIGxhc3RNb2REYXRhQ291bnQgPSB0aGlzLl9tb2REYXRhQ291bnQgfHwgMDtcbiAgdmFyIG1vZEJ5ID0gbm9ybWFsaXplTW9kQnkocGVyZm9ybUFyZ3MgJiYgcGVyZm9ybUFyZ3MubW9kQnkpO1xuICB2YXIgbW9kRGF0YUNvdW50ID0gcGVyZm9ybUFyZ3MgJiYgcGVyZm9ybUFyZ3MubW9kRGF0YUNvdW50IHx8IDA7XG5cbiAgaWYgKGxhc3RNb2RCeSAhPT0gbW9kQnkgfHwgbGFzdE1vZERhdGFDb3VudCAhPT0gbW9kRGF0YUNvdW50KSB7XG4gICAgcGxhblJlc3VsdCA9ICdyZXNldCc7XG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVNb2RCeSh2YWwpIHtcbiAgICAhKHZhbCA+PSAxKSAmJiAodmFsID0gMSk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuXG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIHZhciBmb3JjZUZpcnN0UHJvZ3Jlc3M7XG5cbiAgaWYgKHRoaXMuX2RpcnR5IHx8IHBsYW5SZXN1bHQgPT09ICdyZXNldCcpIHtcbiAgICB0aGlzLl9kaXJ0eSA9IGZhbHNlO1xuICAgIGZvcmNlRmlyc3RQcm9ncmVzcyA9IHJlc2V0KHRoaXMsIHNraXApO1xuICB9XG5cbiAgdGhpcy5fbW9kQnkgPSBtb2RCeTtcbiAgdGhpcy5fbW9kRGF0YUNvdW50ID0gbW9kRGF0YUNvdW50O1xuICB2YXIgc3RlcCA9IHBlcmZvcm1BcmdzICYmIHBlcmZvcm1BcmdzLnN0ZXA7XG5cbiAgaWYgKHVwVGFzaykge1xuICAgIHRoaXMuX2R1ZUVuZCA9IHVwVGFzay5fb3V0cHV0RHVlRW5kO1xuICB9IC8vIERhdGFUYXNrIG9yIG92ZXJhbGxUYXNrXG4gIGVsc2Uge1xuICAgICAgdGhpcy5fZHVlRW5kID0gdGhpcy5fY291bnQgPyB0aGlzLl9jb3VudCh0aGlzLmNvbnRleHQpIDogSW5maW5pdHk7XG4gICAgfSAvLyBOb3RlOiBTdHVicywgdGhhdCBpdHMgaG9zdCBvdmVyYWxsIHRhc2sgbGV0IGl0IGhhcyBwcm9ncmVzcywgaGFzIHByb2dyZXNzLlxuICAvLyBJZiBubyBwcm9ncmVzcywgcGFzcyBpbmRleCBmcm9tIHVwc3RyZWFtIHRvIGRvd25zdHJlYW0gZWFjaCB0aW1lIHBsYW4gY2FsbGVkLlxuXG5cbiAgaWYgKHRoaXMuX3Byb2dyZXNzKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fZHVlSW5kZXg7XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHN0ZXAgIT0gbnVsbCA/IHRoaXMuX2R1ZUluZGV4ICsgc3RlcCA6IEluZmluaXR5LCB0aGlzLl9kdWVFbmQpO1xuXG4gICAgaWYgKCFza2lwICYmIChmb3JjZUZpcnN0UHJvZ3Jlc3MgfHwgc3RhcnQgPCBlbmQpKSB7XG4gICAgICB2YXIgcHJvZ3Jlc3MgPSB0aGlzLl9wcm9ncmVzcztcblxuICAgICAgaWYgKGlzQXJyYXkocHJvZ3Jlc3MpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvZ3Jlc3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBkb1Byb2dyZXNzKHRoaXMsIHByb2dyZXNzW2ldLCBzdGFydCwgZW5kLCBtb2RCeSwgbW9kRGF0YUNvdW50KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9Qcm9ncmVzcyh0aGlzLCBwcm9ncmVzcywgc3RhcnQsIGVuZCwgbW9kQnksIG1vZERhdGFDb3VudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fZHVlSW5kZXggPSBlbmQ7IC8vIElmIG5vIGBvdXRwdXREdWVFbmRgLCBhc3N1bWUgdGhhdCBvdXRwdXQgZGF0YSBhbmRcbiAgICAvLyBpbnB1dCBkYXRhIGlzIHRoZSBzYW1lLCBzbyB1c2UgYGR1ZUluZGV4YCBhcyBgb3V0cHV0RHVlRW5kYC5cblxuICAgIHZhciBvdXRwdXREdWVFbmQgPSB0aGlzLl9zZXR0ZWRPdXRwdXRFbmQgIT0gbnVsbCA/IHRoaXMuX3NldHRlZE91dHB1dEVuZCA6IGVuZDtcbiAgICB0aGlzLl9vdXRwdXREdWVFbmQgPSBvdXRwdXREdWVFbmQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gKDEpIFNvbWUgb3ZlcmFsbCB0YXNrIGhhcyBubyBwcm9ncmVzcy5cbiAgICAvLyAoMikgU3R1YnMsIHRoYXQgaXRzIGhvc3Qgb3ZlcmFsbCB0YXNrIGRvIG5vdCBsZXQgaXQgaGFzIHByb2dyZXNzLCBoYXMgbm8gcHJvZ3Jlc3MuXG4gICAgLy8gVGhpcyBzaG91bGQgYWx3YXlzIGJlIHBlcmZvcm1lZCBzbyBpdCBjYW4gYmUgcGFzc2VkIHRvIGRvd25zdHJlYW0uXG4gICAgdGhpcy5fZHVlSW5kZXggPSB0aGlzLl9vdXRwdXREdWVFbmQgPSB0aGlzLl9zZXR0ZWRPdXRwdXRFbmQgIT0gbnVsbCA/IHRoaXMuX3NldHRlZE91dHB1dEVuZCA6IHRoaXMuX2R1ZUVuZDtcbiAgfVxuXG4gIHJldHVybiB0aGlzLnVuZmluaXNoZWQoKTtcbn07XG5cbnZhciBpdGVyYXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGVuZDtcbiAgdmFyIGN1cnJlbnQ7XG4gIHZhciBtb2RCeTtcbiAgdmFyIG1vZERhdGFDb3VudDtcbiAgdmFyIHdpbkNvdW50O1xuICB2YXIgaXQgPSB7XG4gICAgcmVzZXQ6IGZ1bmN0aW9uIChzLCBlLCBzU3RlcCwgc0NvdW50KSB7XG4gICAgICBjdXJyZW50ID0gcztcbiAgICAgIGVuZCA9IGU7XG4gICAgICBtb2RCeSA9IHNTdGVwO1xuICAgICAgbW9kRGF0YUNvdW50ID0gc0NvdW50O1xuICAgICAgd2luQ291bnQgPSBNYXRoLmNlaWwobW9kRGF0YUNvdW50IC8gbW9kQnkpO1xuICAgICAgaXQubmV4dCA9IG1vZEJ5ID4gMSAmJiBtb2REYXRhQ291bnQgPiAwID8gbW9kTmV4dCA6IHNlcXVlbnRpYWxOZXh0O1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGl0O1xuXG4gIGZ1bmN0aW9uIHNlcXVlbnRpYWxOZXh0KCkge1xuICAgIHJldHVybiBjdXJyZW50IDwgZW5kID8gY3VycmVudCsrIDogbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vZE5leHQoKSB7XG4gICAgdmFyIGRhdGFJbmRleCA9IGN1cnJlbnQgJSB3aW5Db3VudCAqIG1vZEJ5ICsgTWF0aC5jZWlsKGN1cnJlbnQgLyB3aW5Db3VudCk7XG4gICAgdmFyIHJlc3VsdCA9IGN1cnJlbnQgPj0gZW5kID8gbnVsbCA6IGRhdGFJbmRleCA8IG1vZERhdGFDb3VudCA/IGRhdGFJbmRleCAvLyBJZiBtb2REYXRhQ291bnQgaXMgc21hbGxlciB0aGFuIGRhdGEuY291bnQoKSAoY29uc2lkZXIgYGFwcGVuZERhdGFgIGNhc2UpLFxuICAgIC8vIFVzZSBub3JtYWwgbGluZWFyIHJlbmRlcmluZyBtb2RlLlxuICAgIDogY3VycmVudDtcbiAgICBjdXJyZW50Kys7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSgpO1xuXG50YXNrUHJvdG8uZGlydHkgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcbiAgdGhpcy5fb25EaXJ0eSAmJiB0aGlzLl9vbkRpcnR5KHRoaXMuY29udGV4dCk7XG59O1xuXG5mdW5jdGlvbiBkb1Byb2dyZXNzKHRhc2tJbnMsIHByb2dyZXNzLCBzdGFydCwgZW5kLCBtb2RCeSwgbW9kRGF0YUNvdW50KSB7XG4gIGl0ZXJhdG9yLnJlc2V0KHN0YXJ0LCBlbmQsIG1vZEJ5LCBtb2REYXRhQ291bnQpO1xuICB0YXNrSW5zLl9jYWxsaW5nUHJvZ3Jlc3MgPSBwcm9ncmVzcztcblxuICB0YXNrSW5zLl9jYWxsaW5nUHJvZ3Jlc3Moe1xuICAgIHN0YXJ0OiBzdGFydCxcbiAgICBlbmQ6IGVuZCxcbiAgICBjb3VudDogZW5kIC0gc3RhcnQsXG4gICAgbmV4dDogaXRlcmF0b3IubmV4dFxuICB9LCB0YXNrSW5zLmNvbnRleHQpO1xufVxuXG5mdW5jdGlvbiByZXNldCh0YXNrSW5zLCBza2lwKSB7XG4gIHRhc2tJbnMuX2R1ZUluZGV4ID0gdGFza0lucy5fb3V0cHV0RHVlRW5kID0gdGFza0lucy5fZHVlRW5kID0gMDtcbiAgdGFza0lucy5fc2V0dGVkT3V0cHV0RW5kID0gbnVsbDtcbiAgdmFyIHByb2dyZXNzO1xuICB2YXIgZm9yY2VGaXJzdFByb2dyZXNzO1xuXG4gIGlmICghc2tpcCAmJiB0YXNrSW5zLl9yZXNldCkge1xuICAgIHByb2dyZXNzID0gdGFza0lucy5fcmVzZXQodGFza0lucy5jb250ZXh0KTtcblxuICAgIGlmIChwcm9ncmVzcyAmJiBwcm9ncmVzcy5wcm9ncmVzcykge1xuICAgICAgZm9yY2VGaXJzdFByb2dyZXNzID0gcHJvZ3Jlc3MuZm9yY2VGaXJzdFByb2dyZXNzO1xuICAgICAgcHJvZ3Jlc3MgPSBwcm9ncmVzcy5wcm9ncmVzcztcbiAgICB9IC8vIFRvIHNpbXBsaWZ5IG5vIHByb2dyZXNzIGNoZWNraW5nLCBhcnJheSBtdXN0IGhhcyBpdGVtLlxuXG5cbiAgICBpZiAoaXNBcnJheShwcm9ncmVzcykgJiYgIXByb2dyZXNzLmxlbmd0aCkge1xuICAgICAgcHJvZ3Jlc3MgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHRhc2tJbnMuX3Byb2dyZXNzID0gcHJvZ3Jlc3M7XG4gIHRhc2tJbnMuX21vZEJ5ID0gdGFza0lucy5fbW9kRGF0YUNvdW50ID0gbnVsbDtcbiAgdmFyIGRvd25zdHJlYW0gPSB0YXNrSW5zLl9kb3duc3RyZWFtO1xuICBkb3duc3RyZWFtICYmIGRvd25zdHJlYW0uZGlydHkoKTtcbiAgcmV0dXJuIGZvcmNlRmlyc3RQcm9ncmVzcztcbn1cbi8qKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG5cbnRhc2tQcm90by51bmZpbmlzaGVkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fcHJvZ3Jlc3MgJiYgdGhpcy5fZHVlSW5kZXggPCB0aGlzLl9kdWVFbmQ7XG59O1xuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gZG93blRhc2sgVGhlIGRvd25zdHJlYW0gdGFzay5cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIGRvd25zdHJlYW0gdGFzay5cbiAqL1xuXG5cbnRhc2tQcm90by5waXBlID0gZnVuY3Rpb24gKGRvd25UYXNrKSB7XG4gIC8vIElmIGFscmVhZHkgZG93bnN0cmVhbSwgZG8gbm90IGRpcnR5IGRvd25UYXNrLlxuICBpZiAodGhpcy5fZG93bnN0cmVhbSAhPT0gZG93blRhc2sgfHwgdGhpcy5fZGlydHkpIHtcbiAgICB0aGlzLl9kb3duc3RyZWFtID0gZG93blRhc2s7XG4gICAgZG93blRhc2suX3Vwc3RyZWFtID0gdGhpcztcbiAgICBkb3duVGFzay5kaXJ0eSgpO1xuICB9XG59O1xuXG50YXNrUHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX2Rpc3Bvc2VkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5fdXBzdHJlYW0gJiYgKHRoaXMuX3Vwc3RyZWFtLl9kb3duc3RyZWFtID0gbnVsbCk7XG4gIHRoaXMuX2Rvd25zdHJlYW0gJiYgKHRoaXMuX2Rvd25zdHJlYW0uX3Vwc3RyZWFtID0gbnVsbCk7XG4gIHRoaXMuX2RpcnR5ID0gZmFsc2U7XG4gIHRoaXMuX2Rpc3Bvc2VkID0gdHJ1ZTtcbn07XG5cbnRhc2tQcm90by5nZXRVcHN0cmVhbSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3Vwc3RyZWFtO1xufTtcblxudGFza1Byb3RvLmdldERvd25zdHJlYW0gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9kb3duc3RyZWFtO1xufTtcblxudGFza1Byb3RvLnNldE91dHB1dEVuZCA9IGZ1bmN0aW9uIChlbmQpIHtcbiAgLy8gVGhpcyBvbmx5IGhhcHBlbmQgaW4gZGF0YVRhc2ssIGRhdGFab29tLCBtYXAsIGN1cnJlbnRseS5cbiAgLy8gd2hlcmUgZGF0YVpvb20gZG8gbm90IHNldCBlbmQgZWFjaCB0aW1lLCBidXQgb25seSBzZXRcbiAgLy8gd2hlbiByZXNldC4gU28gd2Ugc2hvdWxkIHJlY29yZCB0aGUgc2V0dGVkIGVuZCwgaW4gY2FzZVxuICAvLyB0aGF0IHRoZSBzdHViIG9mIGRhdGFab29tIHBlcmZvcm0gYWdhaW4gYW5kIGVhcnNlIHRoZVxuICAvLyBzZXR0ZWQgZW5kIGJ5IHVwc3RyZWFtLlxuICB0aGlzLl9vdXRwdXREdWVFbmQgPSB0aGlzLl9zZXR0ZWRPdXRwdXRFbmQgPSBlbmQ7XG59OyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRm9yIHN0cmVhbSBkZWJ1ZyAoU2hvdWxkIGJlIGNvbW1lbnRlZCBvdXQgYWZ0ZXIgdXNlZCEpXG4vLyBVc2FnZTogcHJpbnRUYXNrKHRoaXMsICdiZWdpbicpO1xuLy8gVXNhZ2U6IHByaW50VGFzayh0aGlzLCBudWxsLCB7c29tZUV4dHJhUHJvcH0pO1xuLy8gZnVuY3Rpb24gcHJpbnRUYXNrKHRhc2ssIHByZWZpeCwgZXh0cmEpIHtcbi8vICAgICB3aW5kb3cuZWNUYXNrVUlEID09IG51bGwgJiYgKHdpbmRvdy5lY1Rhc2tVSUQgPSAwKTtcbi8vICAgICB0YXNrLnVpZERlYnVnID09IG51bGwgJiYgKHRhc2sudWlkRGVidWcgPSBgdGFza18ke3dpbmRvdy5lY1Rhc2tVSUQrK31gKTtcbi8vICAgICB0YXNrLmFnZW50ICYmIHRhc2suYWdlbnQudWlkRGVidWcgPT0gbnVsbCAmJiAodGFzay5hZ2VudC51aWREZWJ1ZyA9IGB0YXNrXyR7d2luZG93LmVjVGFza1VJRCsrfWApO1xuLy8gICAgIHZhciBwcm9wcyA9IFtdO1xuLy8gICAgIGlmICh0YXNrLl9fcGlwZWxpbmUpIHtcbi8vICAgICAgICAgdmFyIHZhbCA9IGAke3Rhc2suX19pZHhJblBpcGVsaW5lfS8ke3Rhc2suX19waXBlbGluZS50YWlsLl9faWR4SW5QaXBlbGluZX0gJHt0YXNrLmFnZW50ID8gJyhzdHViKScgOiAnJ31gO1xuLy8gICAgICAgICBwcm9wcy5wdXNoKHt0ZXh0OiAnaWR4JywgdmFsdWU6IHZhbH0pO1xuLy8gICAgIH0gZWxzZSB7XG4vLyAgICAgICAgIHZhciBzdHViQ291bnQgPSAwO1xuLy8gICAgICAgICB0YXNrLmFnZW50U3R1Yk1hcC5lYWNoKCgpID0+IHN0dWJDb3VudCsrKTtcbi8vICAgICAgICAgcHJvcHMucHVzaCh7dGV4dDogJ2lkeCcsIHZhbHVlOiBgb3ZlcmFsbCAoc3R1YnM6ICR7c3R1YkNvdW50fSlgfSk7XG4vLyAgICAgfVxuLy8gICAgIHByb3BzLnB1c2goe3RleHQ6ICd1aWQnLCB2YWx1ZTogdGFzay51aWREZWJ1Z30pO1xuLy8gICAgIGlmICh0YXNrLl9fcGlwZWxpbmUpIHtcbi8vICAgICAgICAgcHJvcHMucHVzaCh7dGV4dDogJ3BpZCcsIHZhbHVlOiB0YXNrLl9fcGlwZWxpbmUuaWR9KTtcbi8vICAgICAgICAgdGFzay5hZ2VudCAmJiBwcm9wcy5wdXNoKFxuLy8gICAgICAgICAgICAge3RleHQ6ICdzdHViRm9yJywgdmFsdWU6IHRhc2suYWdlbnQudWlkRGVidWd9XG4vLyAgICAgICAgICk7XG4vLyAgICAgfVxuLy8gICAgIHByb3BzLnB1c2goXG4vLyAgICAgICAgIHt0ZXh0OiAnZGlydHknLCB2YWx1ZTogdGFzay5fZGlydHl9LFxuLy8gICAgICAgICB7dGV4dDogJ2R1ZUluZGV4JywgdmFsdWU6IHRhc2suX2R1ZUluZGV4fSxcbi8vICAgICAgICAge3RleHQ6ICdkdWVFbmQnLCB2YWx1ZTogdGFzay5fZHVlRW5kfSxcbi8vICAgICAgICAge3RleHQ6ICdvdXRwdXREdWVFbmQnLCB2YWx1ZTogdGFzay5fb3V0cHV0RHVlRW5kfVxuLy8gICAgICk7XG4vLyAgICAgaWYgKGV4dHJhKSB7XG4vLyAgICAgICAgIE9iamVjdC5rZXlzKGV4dHJhKS5mb3JFYWNoKGtleSA9PiB7XG4vLyAgICAgICAgICAgICBwcm9wcy5wdXNoKHt0ZXh0OiBrZXksIHZhbHVlOiBleHRyYVtrZXldfSk7XG4vLyAgICAgICAgIH0pO1xuLy8gICAgIH1cbi8vICAgICB2YXIgYXJncyA9IFsnY29sb3I6IGJsdWUnXTtcbi8vICAgICB2YXIgbXNnID0gYCVjWyR7cHJlZml4IHx8ICdUJ31dICVjYCArIHByb3BzLm1hcChpdGVtID0+IChcbi8vICAgICAgICAgYXJncy5wdXNoKCdjb2xvcjogYmxhY2snLCAnY29sb3I6IHJlZCcpLFxuLy8gICAgICAgICBgJHtpdGVtLnRleHR9OiAlYyR7aXRlbS52YWx1ZX1gXG4vLyAgICAgKSkuam9pbignJWMsICcpO1xuLy8gICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIFttc2ddLmNvbmNhdChhcmdzKSk7XG4vLyAgICAgLy8gY29uc29sZS5sb2codGhpcyk7XG4vLyB9XG5cblxuZXhwb3J0cy5jcmVhdGVUYXNrID0gY3JlYXRlVGFzazsiLCIvKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgY29udHJhc3RDb2xvciA9ICcjZWVlJztcblxudmFyIGF4aXNDb21tb24gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgYXhpc0xpbmU6IHtcbiAgICAgIGxpbmVTdHlsZToge1xuICAgICAgICBjb2xvcjogY29udHJhc3RDb2xvclxuICAgICAgfVxuICAgIH0sXG4gICAgYXhpc1RpY2s6IHtcbiAgICAgIGxpbmVTdHlsZToge1xuICAgICAgICBjb2xvcjogY29udHJhc3RDb2xvclxuICAgICAgfVxuICAgIH0sXG4gICAgYXhpc0xhYmVsOiB7XG4gICAgICB0ZXh0U3R5bGU6IHtcbiAgICAgICAgY29sb3I6IGNvbnRyYXN0Q29sb3JcbiAgICAgIH1cbiAgICB9LFxuICAgIHNwbGl0TGluZToge1xuICAgICAgbGluZVN0eWxlOiB7XG4gICAgICAgIHR5cGU6ICdkYXNoZWQnLFxuICAgICAgICBjb2xvcjogJyNhYWEnXG4gICAgICB9XG4gICAgfSxcbiAgICBzcGxpdEFyZWE6IHtcbiAgICAgIGFyZWFTdHlsZToge1xuICAgICAgICBjb2xvcjogY29udHJhc3RDb2xvclxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbnZhciBjb2xvclBhbGV0dGUgPSBbJyNkZDZiNjYnLCAnIzc1OWFhMCcsICcjZTY5ZDg3JywgJyM4ZGMxYTknLCAnI2VhN2U1MycsICcjZWVkZDc4JywgJyM3M2EzNzMnLCAnIzczYjliYycsICcjNzI4OWFiJywgJyM5MWNhOGMnLCAnI2Y0OWY0MiddO1xudmFyIHRoZW1lID0ge1xuICBjb2xvcjogY29sb3JQYWxldHRlLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICcjMzMzJyxcbiAgdG9vbHRpcDoge1xuICAgIGF4aXNQb2ludGVyOiB7XG4gICAgICBsaW5lU3R5bGU6IHtcbiAgICAgICAgY29sb3I6IGNvbnRyYXN0Q29sb3JcbiAgICAgIH0sXG4gICAgICBjcm9zc1N0eWxlOiB7XG4gICAgICAgIGNvbG9yOiBjb250cmFzdENvbG9yXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBsZWdlbmQ6IHtcbiAgICB0ZXh0U3R5bGU6IHtcbiAgICAgIGNvbG9yOiBjb250cmFzdENvbG9yXG4gICAgfVxuICB9LFxuICB0ZXh0U3R5bGU6IHtcbiAgICBjb2xvcjogY29udHJhc3RDb2xvclxuICB9LFxuICB0aXRsZToge1xuICAgIHRleHRTdHlsZToge1xuICAgICAgY29sb3I6IGNvbnRyYXN0Q29sb3JcbiAgICB9XG4gIH0sXG4gIHRvb2xib3g6IHtcbiAgICBpY29uU3R5bGU6IHtcbiAgICAgIG5vcm1hbDoge1xuICAgICAgICBib3JkZXJDb2xvcjogY29udHJhc3RDb2xvclxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZGF0YVpvb206IHtcbiAgICB0ZXh0U3R5bGU6IHtcbiAgICAgIGNvbG9yOiBjb250cmFzdENvbG9yXG4gICAgfVxuICB9LFxuICB2aXN1YWxNYXA6IHtcbiAgICB0ZXh0U3R5bGU6IHtcbiAgICAgIGNvbG9yOiBjb250cmFzdENvbG9yXG4gICAgfVxuICB9LFxuICB0aW1lbGluZToge1xuICAgIGxpbmVTdHlsZToge1xuICAgICAgY29sb3I6IGNvbnRyYXN0Q29sb3JcbiAgICB9LFxuICAgIGl0ZW1TdHlsZToge1xuICAgICAgbm9ybWFsOiB7XG4gICAgICAgIGNvbG9yOiBjb2xvclBhbGV0dGVbMV1cbiAgICAgIH1cbiAgICB9LFxuICAgIGxhYmVsOiB7XG4gICAgICBub3JtYWw6IHtcbiAgICAgICAgdGV4dFN0eWxlOiB7XG4gICAgICAgICAgY29sb3I6IGNvbnRyYXN0Q29sb3JcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY29udHJvbFN0eWxlOiB7XG4gICAgICBub3JtYWw6IHtcbiAgICAgICAgY29sb3I6IGNvbnRyYXN0Q29sb3IsXG4gICAgICAgIGJvcmRlckNvbG9yOiBjb250cmFzdENvbG9yXG4gICAgICB9XG4gICAgfVxuICB9LFxuICB0aW1lQXhpczogYXhpc0NvbW1vbigpLFxuICBsb2dBeGlzOiBheGlzQ29tbW9uKCksXG4gIHZhbHVlQXhpczogYXhpc0NvbW1vbigpLFxuICBjYXRlZ29yeUF4aXM6IGF4aXNDb21tb24oKSxcbiAgbGluZToge1xuICAgIHN5bWJvbDogJ2NpcmNsZSdcbiAgfSxcbiAgZ3JhcGg6IHtcbiAgICBjb2xvcjogY29sb3JQYWxldHRlXG4gIH0sXG4gIGdhdWdlOiB7XG4gICAgdGl0bGU6IHtcbiAgICAgIHRleHRTdHlsZToge1xuICAgICAgICBjb2xvcjogY29udHJhc3RDb2xvclxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgY2FuZGxlc3RpY2s6IHtcbiAgICBpdGVtU3R5bGU6IHtcbiAgICAgIG5vcm1hbDoge1xuICAgICAgICBjb2xvcjogJyNGRDEwNTAnLFxuICAgICAgICBjb2xvcjA6ICcjMENGNDlCJyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjRkQxMDUwJyxcbiAgICAgICAgYm9yZGVyQ29sb3IwOiAnIzBDRjQ5QidcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG50aGVtZS5jYXRlZ29yeUF4aXMuc3BsaXRMaW5lLnNob3cgPSBmYWxzZTtcbnZhciBfZGVmYXVsdCA9IHRoZW1lO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCIvKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgY29sb3JBbGwgPSBbJyMzN0EyREEnLCAnIzMyQzVFOScsICcjNjdFMEUzJywgJyM5RkU2QjgnLCAnI0ZGREI1QycsICcjZmY5ZjdmJywgJyNmYjcyOTMnLCAnI0UwNjJBRScsICcjRTY5MEQxJywgJyNlN2JjZjMnLCAnIzlkOTZmNScsICcjODM3OEVBJywgJyM5NkJGRkYnXTtcbnZhciBfZGVmYXVsdCA9IHtcbiAgY29sb3I6IGNvbG9yQWxsLFxuICBjb2xvckxheWVyOiBbWycjMzdBMkRBJywgJyNmZmQ4NWMnLCAnI2ZkN2I1ZiddLCBbJyMzN0EyREEnLCAnIzY3RTBFMycsICcjRkZEQjVDJywgJyNmZjlmN2YnLCAnI0UwNjJBRScsICcjOWQ5NmY1J10sIFsnIzM3QTJEQScsICcjMzJDNUU5JywgJyM5RkU2QjgnLCAnI0ZGREI1QycsICcjZmY5ZjdmJywgJyNmYjcyOTMnLCAnI2U3YmNmMycsICcjODM3OEVBJywgJyM5NkJGRkYnXSwgY29sb3JBbGxdXG59O1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgX2NvbmZpZyA9IHJlcXVpcmUoXCIuLi9jb25maWdcIik7XG5cbnZhciBfX0RFVl9fID0gX2NvbmZpZy5fX0RFVl9fO1xuXG52YXIgenJVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xudmFyIFRZUEVfREVMSU1JVEVSID0gJy4nO1xudmFyIElTX0NPTlRBSU5FUiA9ICdfX19FQ19fQ09NUE9ORU5UX19DT05UQUlORVJfX18nO1xuLyoqXG4gKiBOb3RpY2UsIHBhcnNlQ2xhc3NUeXBlKCcnKSBzaG91bGQgcmV0dXJucyB7bWFpbjogJycsIHN1YjogJyd9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VDbGFzc1R5cGUoY29tcG9uZW50VHlwZSkge1xuICB2YXIgcmV0ID0ge1xuICAgIG1haW46ICcnLFxuICAgIHN1YjogJydcbiAgfTtcblxuICBpZiAoY29tcG9uZW50VHlwZSkge1xuICAgIGNvbXBvbmVudFR5cGUgPSBjb21wb25lbnRUeXBlLnNwbGl0KFRZUEVfREVMSU1JVEVSKTtcbiAgICByZXQubWFpbiA9IGNvbXBvbmVudFR5cGVbMF0gfHwgJyc7XG4gICAgcmV0LnN1YiA9IGNvbXBvbmVudFR5cGVbMV0gfHwgJyc7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBjaGVja0NsYXNzVHlwZShjb21wb25lbnRUeXBlKSB7XG4gIHpyVXRpbC5hc3NlcnQoL15bYS16QS1aMC05X10rKFsuXVthLXpBLVowLTlfXSspPyQvLnRlc3QoY29tcG9uZW50VHlwZSksICdjb21wb25lbnRUeXBlIFwiJyArIGNvbXBvbmVudFR5cGUgKyAnXCIgaWxsZWdhbCcpO1xufVxuLyoqXG4gKiBAcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBlbmFibGVDbGFzc0V4dGVuZChSb290Q2xhc3MsIG1hbmRhdG9yeU1ldGhvZHMpIHtcbiAgUm9vdENsYXNzLiRjb25zdHJ1Y3RvciA9IFJvb3RDbGFzcztcblxuICBSb290Q2xhc3MuZXh0ZW5kID0gZnVuY3Rpb24gKHByb3RvKSB7XG4gICAgdmFyIHN1cGVyQ2xhc3MgPSB0aGlzO1xuXG4gICAgdmFyIEV4dGVuZGVkQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXByb3RvLiRjb25zdHJ1Y3Rvcikge1xuICAgICAgICBzdXBlckNsYXNzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm90by4kY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgenJVdGlsLmV4dGVuZChFeHRlbmRlZENsYXNzLnByb3RvdHlwZSwgcHJvdG8pO1xuICAgIEV4dGVuZGVkQ2xhc3MuZXh0ZW5kID0gdGhpcy5leHRlbmQ7XG4gICAgRXh0ZW5kZWRDbGFzcy5zdXBlckNhbGwgPSBzdXBlckNhbGw7XG4gICAgRXh0ZW5kZWRDbGFzcy5zdXBlckFwcGx5ID0gc3VwZXJBcHBseTtcbiAgICB6clV0aWwuaW5oZXJpdHMoRXh0ZW5kZWRDbGFzcywgdGhpcyk7XG4gICAgRXh0ZW5kZWRDbGFzcy5zdXBlckNsYXNzID0gc3VwZXJDbGFzcztcbiAgICByZXR1cm4gRXh0ZW5kZWRDbGFzcztcbiAgfTtcbn1cblxudmFyIGNsYXNzQmFzZSA9IDA7XG4vKipcbiAqIENhbiBub3QgdXNlIGluc3RhbmNlb2YsIGNvbnNpZGVyIGRpZmZlcmVudCBzY29wZSBieVxuICogY3Jvc3MgZG9tYWluIG9yIGVzIG1vZHVsZSBpbXBvcnQgaW4gZWMgZXh0ZW5zaW9ucy5cbiAqIE1vdW50IGEgbWV0aG9kIFwiaXNJbnN0YW5jZSgpXCIgdG8gQ2x6LlxuICovXG5cbmZ1bmN0aW9uIGVuYWJsZUNsYXNzQ2hlY2soQ2x6KSB7XG4gIHZhciBjbGFzc0F0dHIgPSBbJ19fXFwwaXNfY2x6JywgY2xhc3NCYXNlKyssIE1hdGgucmFuZG9tKCkudG9GaXhlZCgzKV0uam9pbignXycpO1xuICBDbHoucHJvdG90eXBlW2NsYXNzQXR0cl0gPSB0cnVlO1xuXG4gIENsei5pc0luc3RhbmNlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiAhIShvYmogJiYgb2JqW2NsYXNzQXR0cl0pO1xuICB9O1xufSAvLyBzdXBlckNhbGwgc2hvdWxkIGhhdmUgY2xhc3MgaW5mbywgd2hpY2ggY2FuIG5vdCBiZSBmZXRjaCBmcm9tICd0aGlzJy5cbi8vIENvbnNpZGVyIHRoaXMgY2FzZTpcbi8vIGNsYXNzIEEgaGFzIG1ldGhvZCBmLFxuLy8gY2xhc3MgQiBpbmhlcml0cyBjbGFzcyBBLCBvdmVycmlkZXMgbWV0aG9kIGYsIGYgY2FsbCBzdXBlckFwcGx5KCdmJyksXG4vLyBjbGFzcyBDIGluaGVyaXRzIGNsYXNzIEIsIGRvIG5vdCBvdmVycmlkZXMgbWV0aG9kIGYsXG4vLyB0aGVuIHdoZW4gbWV0aG9kIG9mIGNsYXNzIEMgaXMgY2FsbGVkLCBkZWFkIGxvb3Agb2NjdXJlZC5cblxuXG5mdW5jdGlvbiBzdXBlckNhbGwoY29udGV4dCwgbWV0aG9kTmFtZSkge1xuICB2YXIgYXJncyA9IHpyVXRpbC5zbGljZShhcmd1bWVudHMsIDIpO1xuICByZXR1cm4gdGhpcy5zdXBlckNsYXNzLnByb3RvdHlwZVttZXRob2ROYW1lXS5hcHBseShjb250ZXh0LCBhcmdzKTtcbn1cblxuZnVuY3Rpb24gc3VwZXJBcHBseShjb250ZXh0LCBtZXRob2ROYW1lLCBhcmdzKSB7XG4gIHJldHVybiB0aGlzLnN1cGVyQ2xhc3MucHJvdG90eXBlW21ldGhvZE5hbWVdLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xufVxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gZW50aXR5XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZWdpc3RlcldoZW5FeHRlbmRdXG4gKiBAcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBlbmFibGVDbGFzc01hbmFnZW1lbnQoZW50aXR5LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAvKipcbiAgICogQ29tcG9uZW50IG1vZGVsIGNsYXNzZXNcbiAgICoga2V5OiBjb21wb25lbnRUeXBlLFxuICAgKiB2YWx1ZTpcbiAgICogICAgIGNvbXBvbmVudENsYXNzLCB3aGVuIGNvbXBvbmVudFR5cGUgaXMgJ3h4eCdcbiAgICogICAgIG9yIE9iamVjdC48c3ViS2V5LCBjb21wb25lbnRDbGFzcz4sIHdoZW4gY29tcG9uZW50VHlwZSBpcyAneHh4Lnl5J1xuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cblxuICB2YXIgc3RvcmFnZSA9IHt9O1xuXG4gIGVudGl0eS5yZWdpc3RlckNsYXNzID0gZnVuY3Rpb24gKENsYXp6LCBjb21wb25lbnRUeXBlKSB7XG4gICAgaWYgKGNvbXBvbmVudFR5cGUpIHtcbiAgICAgIGNoZWNrQ2xhc3NUeXBlKGNvbXBvbmVudFR5cGUpO1xuICAgICAgY29tcG9uZW50VHlwZSA9IHBhcnNlQ2xhc3NUeXBlKGNvbXBvbmVudFR5cGUpO1xuXG4gICAgICBpZiAoIWNvbXBvbmVudFR5cGUuc3ViKSB7XG4gICAgICAgIHN0b3JhZ2VbY29tcG9uZW50VHlwZS5tYWluXSA9IENsYXp6O1xuICAgICAgfSBlbHNlIGlmIChjb21wb25lbnRUeXBlLnN1YiAhPT0gSVNfQ09OVEFJTkVSKSB7XG4gICAgICAgIHZhciBjb250YWluZXIgPSBtYWtlQ29udGFpbmVyKGNvbXBvbmVudFR5cGUpO1xuICAgICAgICBjb250YWluZXJbY29tcG9uZW50VHlwZS5zdWJdID0gQ2xheno7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIENsYXp6O1xuICB9O1xuXG4gIGVudGl0eS5nZXRDbGFzcyA9IGZ1bmN0aW9uIChjb21wb25lbnRNYWluVHlwZSwgc3ViVHlwZSwgdGhyb3dXaGVuTm90Rm91bmQpIHtcbiAgICB2YXIgQ2xhenogPSBzdG9yYWdlW2NvbXBvbmVudE1haW5UeXBlXTtcblxuICAgIGlmIChDbGF6eiAmJiBDbGF6eltJU19DT05UQUlORVJdKSB7XG4gICAgICBDbGF6eiA9IHN1YlR5cGUgPyBDbGF6eltzdWJUeXBlXSA6IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRocm93V2hlbk5vdEZvdW5kICYmICFDbGF6eikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCFzdWJUeXBlID8gY29tcG9uZW50TWFpblR5cGUgKyAnLicgKyAndHlwZSBzaG91bGQgYmUgc3BlY2lmaWVkLicgOiAnQ29tcG9uZW50ICcgKyBjb21wb25lbnRNYWluVHlwZSArICcuJyArIChzdWJUeXBlIHx8ICcnKSArICcgbm90IGV4aXN0cy4gTG9hZCBpdCBmaXJzdC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gQ2xheno7XG4gIH07XG5cbiAgZW50aXR5LmdldENsYXNzZXNCeU1haW5UeXBlID0gZnVuY3Rpb24gKGNvbXBvbmVudFR5cGUpIHtcbiAgICBjb21wb25lbnRUeXBlID0gcGFyc2VDbGFzc1R5cGUoY29tcG9uZW50VHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBvYmogPSBzdG9yYWdlW2NvbXBvbmVudFR5cGUubWFpbl07XG5cbiAgICBpZiAob2JqICYmIG9ialtJU19DT05UQUlORVJdKSB7XG4gICAgICB6clV0aWwuZWFjaChvYmosIGZ1bmN0aW9uIChvLCB0eXBlKSB7XG4gICAgICAgIHR5cGUgIT09IElTX0NPTlRBSU5FUiAmJiByZXN1bHQucHVzaChvKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucHVzaChvYmopO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgZW50aXR5Lmhhc0NsYXNzID0gZnVuY3Rpb24gKGNvbXBvbmVudFR5cGUpIHtcbiAgICAvLyBKdXN0IGNvbnNpZGVyIGNvbXBvbmVudFR5cGUubWFpbi5cbiAgICBjb21wb25lbnRUeXBlID0gcGFyc2VDbGFzc1R5cGUoY29tcG9uZW50VHlwZSk7XG4gICAgcmV0dXJuICEhc3RvcmFnZVtjb21wb25lbnRUeXBlLm1haW5dO1xuICB9O1xuICAvKipcbiAgICogQHJldHVybiB7QXJyYXkuPHN0cmluZz59IExpa2UgWydhYScsICdiYiddLCBidXQgY2FuIG5vdCBiZSBbJ2FhLnh4J11cbiAgICovXG5cblxuICBlbnRpdHkuZ2V0QWxsQ2xhc3NNYWluVHlwZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHR5cGVzID0gW107XG4gICAgenJVdGlsLmVhY2goc3RvcmFnZSwgZnVuY3Rpb24gKG9iaiwgdHlwZSkge1xuICAgICAgdHlwZXMucHVzaCh0eXBlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdHlwZXM7XG4gIH07XG4gIC8qKlxuICAgKiBJZiBhIG1haW4gdHlwZSBpcyBjb250YWluZXIgYW5kIGhhcyBzdWIgdHlwZXNcbiAgICogQHBhcmFtICB7c3RyaW5nfSAgbWFpblR5cGVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBlbnRpdHkuaGFzU3ViVHlwZXMgPSBmdW5jdGlvbiAoY29tcG9uZW50VHlwZSkge1xuICAgIGNvbXBvbmVudFR5cGUgPSBwYXJzZUNsYXNzVHlwZShjb21wb25lbnRUeXBlKTtcbiAgICB2YXIgb2JqID0gc3RvcmFnZVtjb21wb25lbnRUeXBlLm1haW5dO1xuICAgIHJldHVybiBvYmogJiYgb2JqW0lTX0NPTlRBSU5FUl07XG4gIH07XG5cbiAgZW50aXR5LnBhcnNlQ2xhc3NUeXBlID0gcGFyc2VDbGFzc1R5cGU7XG5cbiAgZnVuY3Rpb24gbWFrZUNvbnRhaW5lcihjb21wb25lbnRUeXBlKSB7XG4gICAgdmFyIGNvbnRhaW5lciA9IHN0b3JhZ2VbY29tcG9uZW50VHlwZS5tYWluXTtcblxuICAgIGlmICghY29udGFpbmVyIHx8ICFjb250YWluZXJbSVNfQ09OVEFJTkVSXSkge1xuICAgICAgY29udGFpbmVyID0gc3RvcmFnZVtjb21wb25lbnRUeXBlLm1haW5dID0ge307XG4gICAgICBjb250YWluZXJbSVNfQ09OVEFJTkVSXSA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgfVxuXG4gIGlmIChvcHRpb25zLnJlZ2lzdGVyV2hlbkV4dGVuZCkge1xuICAgIHZhciBvcmlnaW5hbEV4dGVuZCA9IGVudGl0eS5leHRlbmQ7XG5cbiAgICBpZiAob3JpZ2luYWxFeHRlbmQpIHtcbiAgICAgIGVudGl0eS5leHRlbmQgPSBmdW5jdGlvbiAocHJvdG8pIHtcbiAgICAgICAgdmFyIEV4dGVuZGVkQ2xhc3MgPSBvcmlnaW5hbEV4dGVuZC5jYWxsKHRoaXMsIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIGVudGl0eS5yZWdpc3RlckNsYXNzKEV4dGVuZGVkQ2xhc3MsIHByb3RvLnR5cGUpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZW50aXR5O1xufVxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheS48c3RyaW5nPn0gcHJvcGVydGllc1xuICovXG5cblxuZnVuY3Rpb24gc2V0UmVhZE9ubHkob2JqLCBwcm9wZXJ0aWVzKSB7Ly8gRklYTUUgSXQgc2VlbXMgYnJva2VuIGluIElFOCBzaW11bGF0aW9uIG9mIElFMTFcbiAgLy8gaWYgKCF6clV0aWwuaXNBcnJheShwcm9wZXJ0aWVzKSkge1xuICAvLyAgICAgcHJvcGVydGllcyA9IHByb3BlcnRpZXMgIT0gbnVsbCA/IFtwcm9wZXJ0aWVzXSA6IFtdO1xuICAvLyB9XG4gIC8vIHpyVXRpbC5lYWNoKHByb3BlcnRpZXMsIGZ1bmN0aW9uIChwcm9wKSB7XG4gIC8vICAgICB2YXIgdmFsdWUgPSBvYmpbcHJvcF07XG4gIC8vICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHlcbiAgLy8gICAgICAgICAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCB7XG4gIC8vICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSwgd3JpdGFibGU6IGZhbHNlXG4gIC8vICAgICAgICAgfSk7XG4gIC8vICAgICB6clV0aWwuaXNBcnJheShvYmpbcHJvcF0pXG4gIC8vICAgICAgICAgJiYgT2JqZWN0LmZyZWV6ZVxuICAvLyAgICAgICAgICYmIE9iamVjdC5mcmVlemUob2JqW3Byb3BdKTtcbiAgLy8gfSk7XG59XG5cbmV4cG9ydHMucGFyc2VDbGFzc1R5cGUgPSBwYXJzZUNsYXNzVHlwZTtcbmV4cG9ydHMuZW5hYmxlQ2xhc3NFeHRlbmQgPSBlbmFibGVDbGFzc0V4dGVuZDtcbmV4cG9ydHMuZW5hYmxlQ2xhc3NDaGVjayA9IGVuYWJsZUNsYXNzQ2hlY2s7XG5leHBvcnRzLmVuYWJsZUNsYXNzTWFuYWdlbWVudCA9IGVuYWJsZUNsYXNzTWFuYWdlbWVudDtcbmV4cG9ydHMuc2V0UmVhZE9ubHkgPSBzZXRSZWFkT25seTsiLCJ2YXIgenJVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxudmFyIF9jbGF6eiA9IHJlcXVpcmUoXCIuL2NsYXp6XCIpO1xuXG52YXIgcGFyc2VDbGFzc1R5cGUgPSBfY2xhenoucGFyc2VDbGFzc1R5cGU7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbnZhciBiYXNlID0gMDtcbi8qKlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBnZXRVSUQodHlwZSkge1xuICAvLyBDb25zaWRlcmluZyB0aGUgY2FzZSBvZiBjcm9zc2luZyBqcyBjb250ZXh0LFxuICAvLyB1c2UgTWF0aC5yYW5kb20gdG8gbWFrZSBpZCBhcyB1bmlxdWUgYXMgcG9zc2libGUuXG4gIHJldHVybiBbdHlwZSB8fCAnJywgYmFzZSsrLCBNYXRoLnJhbmRvbSgpLnRvRml4ZWQoNSldLmpvaW4oJ18nKTtcbn1cbi8qKlxuICogQGlubmVyXG4gKi9cblxuXG5mdW5jdGlvbiBlbmFibGVTdWJUeXBlRGVmYXVsdGVyKGVudGl0eSkge1xuICB2YXIgc3ViVHlwZURlZmF1bHRlcnMgPSB7fTtcblxuICBlbnRpdHkucmVnaXN0ZXJTdWJUeXBlRGVmYXVsdGVyID0gZnVuY3Rpb24gKGNvbXBvbmVudFR5cGUsIGRlZmF1bHRlcikge1xuICAgIGNvbXBvbmVudFR5cGUgPSBwYXJzZUNsYXNzVHlwZShjb21wb25lbnRUeXBlKTtcbiAgICBzdWJUeXBlRGVmYXVsdGVyc1tjb21wb25lbnRUeXBlLm1haW5dID0gZGVmYXVsdGVyO1xuICB9O1xuXG4gIGVudGl0eS5kZXRlcm1pbmVTdWJUeXBlID0gZnVuY3Rpb24gKGNvbXBvbmVudFR5cGUsIG9wdGlvbikge1xuICAgIHZhciB0eXBlID0gb3B0aW9uLnR5cGU7XG5cbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHZhciBjb21wb25lbnRUeXBlTWFpbiA9IHBhcnNlQ2xhc3NUeXBlKGNvbXBvbmVudFR5cGUpLm1haW47XG5cbiAgICAgIGlmIChlbnRpdHkuaGFzU3ViVHlwZXMoY29tcG9uZW50VHlwZSkgJiYgc3ViVHlwZURlZmF1bHRlcnNbY29tcG9uZW50VHlwZU1haW5dKSB7XG4gICAgICAgIHR5cGUgPSBzdWJUeXBlRGVmYXVsdGVyc1tjb21wb25lbnRUeXBlTWFpbl0ob3B0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZTtcbiAgfTtcblxuICByZXR1cm4gZW50aXR5O1xufVxuLyoqXG4gKiBUb3BvbG9naWNhbCB0cmF2ZWwgb24gQWN0aXZpdHkgTmV0d29yayAoQWN0aXZpdHkgT24gVmVydGljZXMpLlxuICogRGVwZW5kZW5jaWVzIGlzIGRlZmluZWQgaW4gTW9kZWwucHJvdG90eXBlLmRlcGVuZGVuY2llcywgbGlrZSBbJ3hBeGlzJywgJ3lBeGlzJ10uXG4gKlxuICogSWYgJ3hBeGlzJyBvciAneUF4aXMnIGlzIGFic2VudCBpbiBjb21wb25lbnRUeXBlTGlzdCwganVzdCBpZ25vcmUgaXQgaW4gdG9wb2xvZ3kuXG4gKlxuICogSWYgdGhlcmUgaXMgY2lyY2xlIGRlcGVuZGVuY2V5LCBFcnJvciB3aWxsIGJlIHRocm93bi5cbiAqXG4gKi9cblxuXG5mdW5jdGlvbiBlbmFibGVUb3BvbG9naWNhbFRyYXZlbChlbnRpdHksIGRlcGVuZGVuY3lHZXR0ZXIpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQHBhcmFtIHtBcnJheS48c3RyaW5nPn0gdGFyZ2V0TmFtZUxpc3QgVGFyZ2V0IENvbXBvbmVudCB0eXBlIGxpc3QuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhbiBiZSBbJ2FhJywgJ2JiJywgJ2FhLnh4J11cbiAgICogQHBhcmFtIHtBcnJheS48c3RyaW5nPn0gZnVsbE5hbWVMaXN0IEJ5IHdoaWNoIHdlIGNhbiBidWlsZCBkZXBlbmRlbmN5IGdyYXBoLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBQYXJhbXM6IGNvbXBvbmVudFR5cGUsIGRlcGVuZGVuY2llcy5cbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHQgU2NvcGUgb2YgY2FsbGJhY2suXG4gICAqL1xuICBlbnRpdHkudG9wb2xvZ2ljYWxUcmF2ZWwgPSBmdW5jdGlvbiAodGFyZ2V0TmFtZUxpc3QsIGZ1bGxOYW1lTGlzdCwgY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICBpZiAoIXRhcmdldE5hbWVMaXN0Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSBtYWtlRGVwbmRlbmN5R3JhcGgoZnVsbE5hbWVMaXN0KTtcbiAgICB2YXIgZ3JhcGggPSByZXN1bHQuZ3JhcGg7XG4gICAgdmFyIHN0YWNrID0gcmVzdWx0Lm5vRW50cnlMaXN0O1xuICAgIHZhciB0YXJnZXROYW1lU2V0ID0ge307XG4gICAgenJVdGlsLmVhY2godGFyZ2V0TmFtZUxpc3QsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB0YXJnZXROYW1lU2V0W25hbWVdID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIHdoaWxlIChzdGFjay5sZW5ndGgpIHtcbiAgICAgIHZhciBjdXJyQ29tcG9uZW50VHlwZSA9IHN0YWNrLnBvcCgpO1xuICAgICAgdmFyIGN1cnJWZXJ0ZXggPSBncmFwaFtjdXJyQ29tcG9uZW50VHlwZV07XG4gICAgICB2YXIgaXNJblRhcmdldE5hbWVTZXQgPSAhIXRhcmdldE5hbWVTZXRbY3VyckNvbXBvbmVudFR5cGVdO1xuXG4gICAgICBpZiAoaXNJblRhcmdldE5hbWVTZXQpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbChjb250ZXh0LCBjdXJyQ29tcG9uZW50VHlwZSwgY3VyclZlcnRleC5vcmlnaW5hbERlcHMuc2xpY2UoKSk7XG4gICAgICAgIGRlbGV0ZSB0YXJnZXROYW1lU2V0W2N1cnJDb21wb25lbnRUeXBlXTtcbiAgICAgIH1cblxuICAgICAgenJVdGlsLmVhY2goY3VyclZlcnRleC5zdWNjZXNzb3IsIGlzSW5UYXJnZXROYW1lU2V0ID8gcmVtb3ZlRWRnZUFuZEFkZCA6IHJlbW92ZUVkZ2UpO1xuICAgIH1cblxuICAgIHpyVXRpbC5lYWNoKHRhcmdldE5hbWVTZXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2lyY2xlIGRlcGVuZGVuY3kgbWF5IGV4aXN0cycpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gcmVtb3ZlRWRnZShzdWNjQ29tcG9uZW50VHlwZSkge1xuICAgICAgZ3JhcGhbc3VjY0NvbXBvbmVudFR5cGVdLmVudHJ5Q291bnQtLTtcblxuICAgICAgaWYgKGdyYXBoW3N1Y2NDb21wb25lbnRUeXBlXS5lbnRyeUNvdW50ID09PSAwKSB7XG4gICAgICAgIHN0YWNrLnB1c2goc3VjY0NvbXBvbmVudFR5cGUpO1xuICAgICAgfVxuICAgIH0gLy8gQ29uc2lkZXIgdGhpcyBjYXNlOiBsZWdlbmQgZGVwZW5kcyBvbiBzZXJpZXMsIGFuZCB3ZSBjYWxsXG4gICAgLy8gY2hhcnQuc2V0T3B0aW9uKHtzZXJpZXM6IFsuLi5dfSksIHdoZXJlIG9ubHkgc2VyaWVzIGlzIGluIG9wdGlvbi5cbiAgICAvLyBJZiB3ZSBkbyBub3QgaGF2ZSAncmVtb3ZlRWRnZUFuZEFkZCcsIGxlZ2VuZE1vZGVsLm1lcmdlT3B0aW9uIHdpbGxcbiAgICAvLyBub3QgYmUgY2FsbGVkLCBidXQgb25seSBzZXJlaXMubWVyZ2VPcHRpb24gaXMgY2FsbGVkLiBUaHVzIGxlZ2VuZFxuICAgIC8vIGhhdmUgbm8gY2hhbmNlIHRvIHVwZGF0ZSBpdHMgbG9jYWwgcmVjb3JkIGFib3V0IHNlcmllcyAobGlrZSB3aGljaFxuICAgIC8vIG5hbWUgb2Ygc2VyaWVzIGlzIGF2YWlsYWJsZSBpbiBsZWdlbmQpLlxuXG5cbiAgICBmdW5jdGlvbiByZW1vdmVFZGdlQW5kQWRkKHN1Y2NDb21wb25lbnRUeXBlKSB7XG4gICAgICB0YXJnZXROYW1lU2V0W3N1Y2NDb21wb25lbnRUeXBlXSA9IHRydWU7XG4gICAgICByZW1vdmVFZGdlKHN1Y2NDb21wb25lbnRUeXBlKTtcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBEZXBuZGVuY3lHcmFwaDoge09iamVjdH1cbiAgICoga2V5OiBjb25wb25lbnRUeXBlLFxuICAgKiB2YWx1ZToge1xuICAgKiAgICAgc3VjY2Vzc29yOiBbY29ucG9uZW50VHlwZXMuLi5dLFxuICAgKiAgICAgb3JpZ2luYWxEZXBzOiBbY29ucG9uZW50VHlwZXMuLi5dLFxuICAgKiAgICAgZW50cnlDb3VudDoge251bWJlcn1cbiAgICogfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG1ha2VEZXBuZGVuY3lHcmFwaChmdWxsTmFtZUxpc3QpIHtcbiAgICB2YXIgZ3JhcGggPSB7fTtcbiAgICB2YXIgbm9FbnRyeUxpc3QgPSBbXTtcbiAgICB6clV0aWwuZWFjaChmdWxsTmFtZUxpc3QsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgdGhpc0l0ZW0gPSBjcmVhdGVEZXBlbmRlbmN5R3JhcGhJdGVtKGdyYXBoLCBuYW1lKTtcbiAgICAgIHZhciBvcmlnaW5hbERlcHMgPSB0aGlzSXRlbS5vcmlnaW5hbERlcHMgPSBkZXBlbmRlbmN5R2V0dGVyKG5hbWUpO1xuICAgICAgdmFyIGF2YWlsYWJsZURlcHMgPSBnZXRBdmFpbGFibGVEZXBlbmRlbmNpZXMob3JpZ2luYWxEZXBzLCBmdWxsTmFtZUxpc3QpO1xuICAgICAgdGhpc0l0ZW0uZW50cnlDb3VudCA9IGF2YWlsYWJsZURlcHMubGVuZ3RoO1xuXG4gICAgICBpZiAodGhpc0l0ZW0uZW50cnlDb3VudCA9PT0gMCkge1xuICAgICAgICBub0VudHJ5TGlzdC5wdXNoKG5hbWUpO1xuICAgICAgfVxuXG4gICAgICB6clV0aWwuZWFjaChhdmFpbGFibGVEZXBzLCBmdW5jdGlvbiAoZGVwZW5kZW50TmFtZSkge1xuICAgICAgICBpZiAoenJVdGlsLmluZGV4T2YodGhpc0l0ZW0ucHJlZGVjZXNzb3IsIGRlcGVuZGVudE5hbWUpIDwgMCkge1xuICAgICAgICAgIHRoaXNJdGVtLnByZWRlY2Vzc29yLnB1c2goZGVwZW5kZW50TmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGhhdEl0ZW0gPSBjcmVhdGVEZXBlbmRlbmN5R3JhcGhJdGVtKGdyYXBoLCBkZXBlbmRlbnROYW1lKTtcblxuICAgICAgICBpZiAoenJVdGlsLmluZGV4T2YodGhhdEl0ZW0uc3VjY2Vzc29yLCBkZXBlbmRlbnROYW1lKSA8IDApIHtcbiAgICAgICAgICB0aGF0SXRlbS5zdWNjZXNzb3IucHVzaChuYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdyYXBoOiBncmFwaCxcbiAgICAgIG5vRW50cnlMaXN0OiBub0VudHJ5TGlzdFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVEZXBlbmRlbmN5R3JhcGhJdGVtKGdyYXBoLCBuYW1lKSB7XG4gICAgaWYgKCFncmFwaFtuYW1lXSkge1xuICAgICAgZ3JhcGhbbmFtZV0gPSB7XG4gICAgICAgIHByZWRlY2Vzc29yOiBbXSxcbiAgICAgICAgc3VjY2Vzc29yOiBbXVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ3JhcGhbbmFtZV07XG4gIH1cblxuICBmdW5jdGlvbiBnZXRBdmFpbGFibGVEZXBlbmRlbmNpZXMob3JpZ2luYWxEZXBzLCBmdWxsTmFtZUxpc3QpIHtcbiAgICB2YXIgYXZhaWxhYmxlRGVwcyA9IFtdO1xuICAgIHpyVXRpbC5lYWNoKG9yaWdpbmFsRGVwcywgZnVuY3Rpb24gKGRlcCkge1xuICAgICAgenJVdGlsLmluZGV4T2YoZnVsbE5hbWVMaXN0LCBkZXApID49IDAgJiYgYXZhaWxhYmxlRGVwcy5wdXNoKGRlcCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGF2YWlsYWJsZURlcHM7XG4gIH1cbn1cblxuZXhwb3J0cy5nZXRVSUQgPSBnZXRVSUQ7XG5leHBvcnRzLmVuYWJsZVN1YlR5cGVEZWZhdWx0ZXIgPSBlbmFibGVTdWJUeXBlRGVmYXVsdGVyO1xuZXhwb3J0cy5lbmFibGVUb3BvbG9naWNhbFRyYXZlbCA9IGVuYWJsZVRvcG9sb2dpY2FsVHJhdmVsOyIsInZhciB6clV0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgdGV4dENvbnRhaW4gPSByZXF1aXJlKFwienJlbmRlci9saWIvY29udGFpbi90ZXh0XCIpO1xuXG52YXIgbnVtYmVyVXRpbCA9IHJlcXVpcmUoXCIuL251bWJlclwiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG4vKipcbiAqIOavj+S4ieS9jem7mOiupOWKoCzmoLzlvI/ljJZcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0geFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBhZGRDb21tYXMoeCkge1xuICBpZiAoaXNOYU4oeCkpIHtcbiAgICByZXR1cm4gJy0nO1xuICB9XG5cbiAgeCA9ICh4ICsgJycpLnNwbGl0KCcuJyk7XG4gIHJldHVybiB4WzBdLnJlcGxhY2UoLyhcXGR7MSwzfSkoPz0oPzpcXGR7M30pKyg/IVxcZCkpL2csICckMSwnKSArICh4Lmxlbmd0aCA+IDEgPyAnLicgKyB4WzFdIDogJycpO1xufVxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFt1cHBlckNhc2VGaXJzdD1mYWxzZV1cbiAqIEByZXR1cm4ge3N0cmluZ30gc3RyXG4gKi9cblxuXG5mdW5jdGlvbiB0b0NhbWVsQ2FzZShzdHIsIHVwcGVyQ2FzZUZpcnN0KSB7XG4gIHN0ciA9IChzdHIgfHwgJycpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvLSguKS9nLCBmdW5jdGlvbiAobWF0Y2gsIGdyb3VwMSkge1xuICAgIHJldHVybiBncm91cDEudG9VcHBlckNhc2UoKTtcbiAgfSk7XG5cbiAgaWYgKHVwcGVyQ2FzZUZpcnN0ICYmIHN0cikge1xuICAgIHN0ciA9IHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbiAgfVxuXG4gIHJldHVybiBzdHI7XG59XG5cbnZhciBub3JtYWxpemVDc3NBcnJheSA9IHpyVXRpbC5ub3JtYWxpemVDc3NBcnJheTtcbnZhciByZXBsYWNlUmVnID0gLyhbJjw+XCInXSkvZztcbnZhciByZXBsYWNlTWFwID0ge1xuICAnJic6ICcmYW1wOycsXG4gICc8JzogJyZsdDsnLFxuICAnPic6ICcmZ3Q7JyxcbiAgJ1wiJzogJyZxdW90OycsXG4gICdcXCcnOiAnJiMzOTsnXG59O1xuXG5mdW5jdGlvbiBlbmNvZGVIVE1MKHNvdXJjZSkge1xuICByZXR1cm4gc291cmNlID09IG51bGwgPyAnJyA6IChzb3VyY2UgKyAnJykucmVwbGFjZShyZXBsYWNlUmVnLCBmdW5jdGlvbiAoc3RyLCBjKSB7XG4gICAgcmV0dXJuIHJlcGxhY2VNYXBbY107XG4gIH0pO1xufVxuXG52YXIgVFBMX1ZBUl9BTElBUyA9IFsnYScsICdiJywgJ2MnLCAnZCcsICdlJywgJ2YnLCAnZyddO1xuXG52YXIgd3JhcFZhciA9IGZ1bmN0aW9uICh2YXJOYW1lLCBzZXJpZXNJZHgpIHtcbiAgcmV0dXJuICd7JyArIHZhck5hbWUgKyAoc2VyaWVzSWR4ID09IG51bGwgPyAnJyA6IHNlcmllc0lkeCkgKyAnfSc7XG59O1xuLyoqXG4gKiBUZW1wbGF0ZSBmb3JtYXR0ZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0cGxcbiAqIEBwYXJhbSB7QXJyYXkuPE9iamVjdD58T2JqZWN0fSBwYXJhbXNMaXN0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtlbmNvZGU9ZmFsc2VdXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblxuXG5mdW5jdGlvbiBmb3JtYXRUcGwodHBsLCBwYXJhbXNMaXN0LCBlbmNvZGUpIHtcbiAgaWYgKCF6clV0aWwuaXNBcnJheShwYXJhbXNMaXN0KSkge1xuICAgIHBhcmFtc0xpc3QgPSBbcGFyYW1zTGlzdF07XG4gIH1cblxuICB2YXIgc2VyaWVzTGVuID0gcGFyYW1zTGlzdC5sZW5ndGg7XG5cbiAgaWYgKCFzZXJpZXNMZW4pIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICB2YXIgJHZhcnMgPSBwYXJhbXNMaXN0WzBdLiR2YXJzIHx8IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgJHZhcnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYWxpYXMgPSBUUExfVkFSX0FMSUFTW2ldO1xuICAgIHRwbCA9IHRwbC5yZXBsYWNlKHdyYXBWYXIoYWxpYXMpLCB3cmFwVmFyKGFsaWFzLCAwKSk7XG4gIH1cblxuICBmb3IgKHZhciBzZXJpZXNJZHggPSAwOyBzZXJpZXNJZHggPCBzZXJpZXNMZW47IHNlcmllc0lkeCsrKSB7XG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCAkdmFycy5sZW5ndGg7IGsrKykge1xuICAgICAgdmFyIHZhbCA9IHBhcmFtc0xpc3Rbc2VyaWVzSWR4XVskdmFyc1trXV07XG4gICAgICB0cGwgPSB0cGwucmVwbGFjZSh3cmFwVmFyKFRQTF9WQVJfQUxJQVNba10sIHNlcmllc0lkeCksIGVuY29kZSA/IGVuY29kZUhUTUwodmFsKSA6IHZhbCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRwbDtcbn1cbi8qKlxuICogc2ltcGxlIFRlbXBsYXRlIGZvcm1hdHRlclxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0cGxcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbVxuICogQHBhcmFtIHtib29sZWFufSBbZW5jb2RlPWZhbHNlXVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5cblxuZnVuY3Rpb24gZm9ybWF0VHBsU2ltcGxlKHRwbCwgcGFyYW0sIGVuY29kZSkge1xuICB6clV0aWwuZWFjaChwYXJhbSwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICB0cGwgPSB0cGwucmVwbGFjZSgneycgKyBrZXkgKyAnfScsIGVuY29kZSA/IGVuY29kZUhUTUwodmFsdWUpIDogdmFsdWUpO1xuICB9KTtcbiAgcmV0dXJuIHRwbDtcbn1cbi8qKlxuICogQHBhcmFtIHtPYmplY3R8c3RyaW5nfSBbb3B0XSBJZiBzdHJpbmcsIG1lYW5zIGNvbG9yLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHQuY29sb3JdXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdC5leHRyYUNzc1RleHRdXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdC50eXBlPSdpdGVtJ10gJ2l0ZW0nIG9yICdzdWJJdGVtJ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5cblxuZnVuY3Rpb24gZ2V0VG9vbHRpcE1hcmtlcihvcHQsIGV4dHJhQ3NzVGV4dCkge1xuICBvcHQgPSB6clV0aWwuaXNTdHJpbmcob3B0KSA/IHtcbiAgICBjb2xvcjogb3B0LFxuICAgIGV4dHJhQ3NzVGV4dDogZXh0cmFDc3NUZXh0XG4gIH0gOiBvcHQgfHwge307XG4gIHZhciBjb2xvciA9IG9wdC5jb2xvcjtcbiAgdmFyIHR5cGUgPSBvcHQudHlwZTtcbiAgdmFyIGV4dHJhQ3NzVGV4dCA9IG9wdC5leHRyYUNzc1RleHQ7XG5cbiAgaWYgKCFjb2xvcikge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJldHVybiB0eXBlID09PSAnc3ViSXRlbScgPyAnPHNwYW4gc3R5bGU9XCJkaXNwbGF5OmlubGluZS1ibG9jazt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7bWFyZ2luLXJpZ2h0OjhweDttYXJnaW4tbGVmdDozcHg7JyArICdib3JkZXItcmFkaXVzOjRweDt3aWR0aDo0cHg7aGVpZ2h0OjRweDtiYWNrZ3JvdW5kLWNvbG9yOicgKyBlbmNvZGVIVE1MKGNvbG9yKSArICc7JyArIChleHRyYUNzc1RleHQgfHwgJycpICsgJ1wiPjwvc3Bhbj4nIDogJzxzcGFuIHN0eWxlPVwiZGlzcGxheTppbmxpbmUtYmxvY2s7bWFyZ2luLXJpZ2h0OjVweDsnICsgJ2JvcmRlci1yYWRpdXM6MTBweDt3aWR0aDoxMHB4O2hlaWdodDoxMHB4O2JhY2tncm91bmQtY29sb3I6JyArIGVuY29kZUhUTUwoY29sb3IpICsgJzsnICsgKGV4dHJhQ3NzVGV4dCB8fCAnJykgKyAnXCI+PC9zcGFuPic7XG59XG5cbmZ1bmN0aW9uIHBhZChzdHIsIGxlbikge1xuICBzdHIgKz0gJyc7XG4gIHJldHVybiAnMDAwMCcuc3Vic3RyKDAsIGxlbiAtIHN0ci5sZW5ndGgpICsgc3RyO1xufVxuLyoqXG4gKiBJU08gRGF0ZSBmb3JtYXRcbiAqIEBwYXJhbSB7c3RyaW5nfSB0cGxcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHBhcmFtIHtib29sZWFufSBbaXNVVEM9ZmFsc2VdIERlZmF1bHQgaW4gbG9jYWwgdGltZS5cbiAqICAgICAgICAgICBzZWUgYG1vZHVsZTplY2hhcnRzL3NjYWxlL1RpbWVgXG4gKiAgICAgICAgICAgYW5kIGBtb2R1bGU6ZWNoYXJ0cy91dGlsL251bWJlciNwYXJzZURhdGVgLlxuICogQGlubmVyXG4gKi9cblxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lKHRwbCwgdmFsdWUsIGlzVVRDKSB7XG4gIGlmICh0cGwgPT09ICd3ZWVrJyB8fCB0cGwgPT09ICdtb250aCcgfHwgdHBsID09PSAncXVhcnRlcicgfHwgdHBsID09PSAnaGFsZi15ZWFyJyB8fCB0cGwgPT09ICd5ZWFyJykge1xuICAgIHRwbCA9ICdNTS1kZFxcbnl5eXknO1xuICB9XG5cbiAgdmFyIGRhdGUgPSBudW1iZXJVdGlsLnBhcnNlRGF0ZSh2YWx1ZSk7XG4gIHZhciB1dGMgPSBpc1VUQyA/ICdVVEMnIDogJyc7XG4gIHZhciB5ID0gZGF0ZVsnZ2V0JyArIHV0YyArICdGdWxsWWVhciddKCk7XG4gIHZhciBNID0gZGF0ZVsnZ2V0JyArIHV0YyArICdNb250aCddKCkgKyAxO1xuICB2YXIgZCA9IGRhdGVbJ2dldCcgKyB1dGMgKyAnRGF0ZSddKCk7XG4gIHZhciBoID0gZGF0ZVsnZ2V0JyArIHV0YyArICdIb3VycyddKCk7XG4gIHZhciBtID0gZGF0ZVsnZ2V0JyArIHV0YyArICdNaW51dGVzJ10oKTtcbiAgdmFyIHMgPSBkYXRlWydnZXQnICsgdXRjICsgJ1NlY29uZHMnXSgpO1xuICB2YXIgUyA9IGRhdGVbJ2dldCcgKyB1dGMgKyAnTWlsbGlzZWNvbmRzJ10oKTtcbiAgdHBsID0gdHBsLnJlcGxhY2UoJ01NJywgcGFkKE0sIDIpKS5yZXBsYWNlKCdNJywgTSkucmVwbGFjZSgneXl5eScsIHkpLnJlcGxhY2UoJ3l5JywgeSAlIDEwMCkucmVwbGFjZSgnZGQnLCBwYWQoZCwgMikpLnJlcGxhY2UoJ2QnLCBkKS5yZXBsYWNlKCdoaCcsIHBhZChoLCAyKSkucmVwbGFjZSgnaCcsIGgpLnJlcGxhY2UoJ21tJywgcGFkKG0sIDIpKS5yZXBsYWNlKCdtJywgbSkucmVwbGFjZSgnc3MnLCBwYWQocywgMikpLnJlcGxhY2UoJ3MnLCBzKS5yZXBsYWNlKCdTU1MnLCBwYWQoUywgMykpO1xuICByZXR1cm4gdHBsO1xufVxuLyoqXG4gKiBDYXBpdGFsIGZpcnN0XG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblxuXG5mdW5jdGlvbiBjYXBpdGFsRmlyc3Qoc3RyKSB7XG4gIHJldHVybiBzdHIgPyBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyKDEpIDogc3RyO1xufVxuXG52YXIgdHJ1bmNhdGVUZXh0ID0gdGV4dENvbnRhaW4udHJ1bmNhdGVUZXh0O1xudmFyIGdldFRleHRSZWN0ID0gdGV4dENvbnRhaW4uZ2V0Qm91bmRpbmdSZWN0O1xuZXhwb3J0cy5hZGRDb21tYXMgPSBhZGRDb21tYXM7XG5leHBvcnRzLnRvQ2FtZWxDYXNlID0gdG9DYW1lbENhc2U7XG5leHBvcnRzLm5vcm1hbGl6ZUNzc0FycmF5ID0gbm9ybWFsaXplQ3NzQXJyYXk7XG5leHBvcnRzLmVuY29kZUhUTUwgPSBlbmNvZGVIVE1MO1xuZXhwb3J0cy5mb3JtYXRUcGwgPSBmb3JtYXRUcGw7XG5leHBvcnRzLmZvcm1hdFRwbFNpbXBsZSA9IGZvcm1hdFRwbFNpbXBsZTtcbmV4cG9ydHMuZ2V0VG9vbHRpcE1hcmtlciA9IGdldFRvb2x0aXBNYXJrZXI7XG5leHBvcnRzLmZvcm1hdFRpbWUgPSBmb3JtYXRUaW1lO1xuZXhwb3J0cy5jYXBpdGFsRmlyc3QgPSBjYXBpdGFsRmlyc3Q7XG5leHBvcnRzLnRydW5jYXRlVGV4dCA9IHRydW5jYXRlVGV4dDtcbmV4cG9ydHMuZ2V0VGV4dFJlY3QgPSBnZXRUZXh0UmVjdDsiLCJ2YXIgenJVdGlsID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdXRpbFwiKTtcblxudmFyIHBhdGhUb29sID0gcmVxdWlyZShcInpyZW5kZXIvbGliL3Rvb2wvcGF0aFwiKTtcblxudmFyIGNvbG9yVG9vbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi90b29sL2NvbG9yXCIpO1xuXG52YXIgbWF0cml4ID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvbWF0cml4XCIpO1xuXG52YXIgdmVjdG9yID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvdmVjdG9yXCIpO1xuXG52YXIgUGF0aCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9ncmFwaGljL1BhdGhcIik7XG5cbnZhciBUcmFuc2Zvcm1hYmxlID0gcmVxdWlyZShcInpyZW5kZXIvbGliL21peGluL1RyYW5zZm9ybWFibGVcIik7XG5cbnZhciBaSW1hZ2UgPSByZXF1aXJlKFwienJlbmRlci9saWIvZ3JhcGhpYy9JbWFnZVwiKTtcblxuZXhwb3J0cy5JbWFnZSA9IFpJbWFnZTtcblxudmFyIEdyb3VwID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvbnRhaW5lci9Hcm91cFwiKTtcblxuZXhwb3J0cy5Hcm91cCA9IEdyb3VwO1xuXG52YXIgVGV4dCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9ncmFwaGljL1RleHRcIik7XG5cbmV4cG9ydHMuVGV4dCA9IFRleHQ7XG5cbnZhciBDaXJjbGUgPSByZXF1aXJlKFwienJlbmRlci9saWIvZ3JhcGhpYy9zaGFwZS9DaXJjbGVcIik7XG5cbmV4cG9ydHMuQ2lyY2xlID0gQ2lyY2xlO1xuXG52YXIgU2VjdG9yID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2dyYXBoaWMvc2hhcGUvU2VjdG9yXCIpO1xuXG5leHBvcnRzLlNlY3RvciA9IFNlY3RvcjtcblxudmFyIFJpbmcgPSByZXF1aXJlKFwienJlbmRlci9saWIvZ3JhcGhpYy9zaGFwZS9SaW5nXCIpO1xuXG5leHBvcnRzLlJpbmcgPSBSaW5nO1xuXG52YXIgUG9seWdvbiA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9ncmFwaGljL3NoYXBlL1BvbHlnb25cIik7XG5cbmV4cG9ydHMuUG9seWdvbiA9IFBvbHlnb247XG5cbnZhciBQb2x5bGluZSA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9ncmFwaGljL3NoYXBlL1BvbHlsaW5lXCIpO1xuXG5leHBvcnRzLlBvbHlsaW5lID0gUG9seWxpbmU7XG5cbnZhciBSZWN0ID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2dyYXBoaWMvc2hhcGUvUmVjdFwiKTtcblxuZXhwb3J0cy5SZWN0ID0gUmVjdDtcblxudmFyIExpbmUgPSByZXF1aXJlKFwienJlbmRlci9saWIvZ3JhcGhpYy9zaGFwZS9MaW5lXCIpO1xuXG5leHBvcnRzLkxpbmUgPSBMaW5lO1xuXG52YXIgQmV6aWVyQ3VydmUgPSByZXF1aXJlKFwienJlbmRlci9saWIvZ3JhcGhpYy9zaGFwZS9CZXppZXJDdXJ2ZVwiKTtcblxuZXhwb3J0cy5CZXppZXJDdXJ2ZSA9IEJlemllckN1cnZlO1xuXG52YXIgQXJjID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2dyYXBoaWMvc2hhcGUvQXJjXCIpO1xuXG5leHBvcnRzLkFyYyA9IEFyYztcblxudmFyIENvbXBvdW5kUGF0aCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9ncmFwaGljL0NvbXBvdW5kUGF0aFwiKTtcblxuZXhwb3J0cy5Db21wb3VuZFBhdGggPSBDb21wb3VuZFBhdGg7XG5cbnZhciBMaW5lYXJHcmFkaWVudCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9ncmFwaGljL0xpbmVhckdyYWRpZW50XCIpO1xuXG5leHBvcnRzLkxpbmVhckdyYWRpZW50ID0gTGluZWFyR3JhZGllbnQ7XG5cbnZhciBSYWRpYWxHcmFkaWVudCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9ncmFwaGljL1JhZGlhbEdyYWRpZW50XCIpO1xuXG5leHBvcnRzLlJhZGlhbEdyYWRpZW50ID0gUmFkaWFsR3JhZGllbnQ7XG5cbnZhciBCb3VuZGluZ1JlY3QgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS9Cb3VuZGluZ1JlY3RcIik7XG5cbmV4cG9ydHMuQm91bmRpbmdSZWN0ID0gQm91bmRpbmdSZWN0O1xuXG52YXIgSW5jcmVtZW50YWxEaXNwbGF5YWJsZSA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9ncmFwaGljL0luY3JlbWVudGFsRGlzcGxheWFibGVcIik7XG5cbmV4cG9ydHMuSW5jcmVtZW50YWxEaXNwbGF5YWJsZSA9IEluY3JlbWVudGFsRGlzcGxheWFibGU7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbnZhciByb3VuZCA9IE1hdGgucm91bmQ7XG52YXIgbWF0aE1heCA9IE1hdGgubWF4O1xudmFyIG1hdGhNaW4gPSBNYXRoLm1pbjtcbnZhciBFTVBUWV9PQkogPSB7fTtcbi8qKlxuICogRXh0ZW5kIHNoYXBlIHdpdGggcGFyYW1ldGVyc1xuICovXG5cbmZ1bmN0aW9uIGV4dGVuZFNoYXBlKG9wdHMpIHtcbiAgcmV0dXJuIFBhdGguZXh0ZW5kKG9wdHMpO1xufVxuLyoqXG4gKiBFeHRlbmQgcGF0aFxuICovXG5cblxuZnVuY3Rpb24gZXh0ZW5kUGF0aChwYXRoRGF0YSwgb3B0cykge1xuICByZXR1cm4gcGF0aFRvb2wuZXh0ZW5kRnJvbVN0cmluZyhwYXRoRGF0YSwgb3B0cyk7XG59XG4vKipcbiAqIENyZWF0ZSBhIHBhdGggZWxlbWVudCBmcm9tIHBhdGggZGF0YSBzdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoRGF0YVxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBwYXJhbSB7bW9kdWxlOnpyZW5kZXIvY29yZS9Cb3VuZGluZ1JlY3R9IHJlY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBbbGF5b3V0PWNvdmVyXSAnY2VudGVyJyBvciAnY292ZXInXG4gKi9cblxuXG5mdW5jdGlvbiBtYWtlUGF0aChwYXRoRGF0YSwgb3B0cywgcmVjdCwgbGF5b3V0KSB7XG4gIHZhciBwYXRoID0gcGF0aFRvb2wuY3JlYXRlRnJvbVN0cmluZyhwYXRoRGF0YSwgb3B0cyk7XG4gIHZhciBib3VuZGluZ1JlY3QgPSBwYXRoLmdldEJvdW5kaW5nUmVjdCgpO1xuXG4gIGlmIChyZWN0KSB7XG4gICAgaWYgKGxheW91dCA9PT0gJ2NlbnRlcicpIHtcbiAgICAgIHJlY3QgPSBjZW50ZXJHcmFwaGljKHJlY3QsIGJvdW5kaW5nUmVjdCk7XG4gICAgfVxuXG4gICAgcmVzaXplUGF0aChwYXRoLCByZWN0KTtcbiAgfVxuXG4gIHJldHVybiBwYXRoO1xufVxuLyoqXG4gKiBDcmVhdGUgYSBpbWFnZSBlbGVtZW50IGZyb20gaW1hZ2UgdXJsXG4gKiBAcGFyYW0ge3N0cmluZ30gaW1hZ2VVcmwgaW1hZ2UgdXJsXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBvcHRpb25zXG4gKiBAcGFyYW0ge21vZHVsZTp6cmVuZGVyL2NvcmUvQm91bmRpbmdSZWN0fSByZWN0IGNvbnN0cmFpbiByZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gW2xheW91dD1jb3Zlcl0gJ2NlbnRlcicgb3IgJ2NvdmVyJ1xuICovXG5cblxuZnVuY3Rpb24gbWFrZUltYWdlKGltYWdlVXJsLCByZWN0LCBsYXlvdXQpIHtcbiAgdmFyIHBhdGggPSBuZXcgWkltYWdlKHtcbiAgICBzdHlsZToge1xuICAgICAgaW1hZ2U6IGltYWdlVXJsLFxuICAgICAgeDogcmVjdC54LFxuICAgICAgeTogcmVjdC55LFxuICAgICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0XG4gICAgfSxcbiAgICBvbmxvYWQ6IGZ1bmN0aW9uIChpbWcpIHtcbiAgICAgIGlmIChsYXlvdXQgPT09ICdjZW50ZXInKSB7XG4gICAgICAgIHZhciBib3VuZGluZ1JlY3QgPSB7XG4gICAgICAgICAgd2lkdGg6IGltZy53aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGltZy5oZWlnaHRcbiAgICAgICAgfTtcbiAgICAgICAgcGF0aC5zZXRTdHlsZShjZW50ZXJHcmFwaGljKHJlY3QsIGJvdW5kaW5nUmVjdCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBwYXRoO1xufVxuLyoqXG4gKiBHZXQgcG9zaXRpb24gb2YgY2VudGVyZWQgZWxlbWVudCBpbiBib3VuZGluZyBib3guXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSByZWN0ICAgICAgICAgZWxlbWVudCBsb2NhbCBib3VuZGluZyBib3hcbiAqIEBwYXJhbSAge09iamVjdH0gYm91bmRpbmdSZWN0IGNvbnN0cmFpbnQgYm91bmRpbmcgYm94XG4gKiBAcmV0dXJuIHtPYmplY3R9IGVsZW1lbnQgcG9zaXRpb24gY29udGFpbmluZyB4LCB5LCB3aWR0aCwgYW5kIGhlaWdodFxuICovXG5cblxuZnVuY3Rpb24gY2VudGVyR3JhcGhpYyhyZWN0LCBib3VuZGluZ1JlY3QpIHtcbiAgLy8gU2V0IHJlY3QgdG8gY2VudGVyLCBrZWVwIHdpZHRoIC8gaGVpZ2h0IHJhdGlvLlxuICB2YXIgYXNwZWN0ID0gYm91bmRpbmdSZWN0LndpZHRoIC8gYm91bmRpbmdSZWN0LmhlaWdodDtcbiAgdmFyIHdpZHRoID0gcmVjdC5oZWlnaHQgKiBhc3BlY3Q7XG4gIHZhciBoZWlnaHQ7XG5cbiAgaWYgKHdpZHRoIDw9IHJlY3Qud2lkdGgpIHtcbiAgICBoZWlnaHQgPSByZWN0LmhlaWdodDtcbiAgfSBlbHNlIHtcbiAgICB3aWR0aCA9IHJlY3Qud2lkdGg7XG4gICAgaGVpZ2h0ID0gd2lkdGggLyBhc3BlY3Q7XG4gIH1cblxuICB2YXIgY3ggPSByZWN0LnggKyByZWN0LndpZHRoIC8gMjtcbiAgdmFyIGN5ID0gcmVjdC55ICsgcmVjdC5oZWlnaHQgLyAyO1xuICByZXR1cm4ge1xuICAgIHg6IGN4IC0gd2lkdGggLyAyLFxuICAgIHk6IGN5IC0gaGVpZ2h0IC8gMixcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcbn1cblxudmFyIG1lcmdlUGF0aCA9IHBhdGhUb29sLm1lcmdlUGF0aDtcbi8qKlxuICogUmVzaXplIGEgcGF0aCB0byBmaXQgdGhlIHJlY3RcbiAqIEBwYXJhbSB7bW9kdWxlOnpyZW5kZXIvZ3JhcGhpYy9QYXRofSBwYXRoXG4gKiBAcGFyYW0ge09iamVjdH0gcmVjdFxuICovXG5cbmZ1bmN0aW9uIHJlc2l6ZVBhdGgocGF0aCwgcmVjdCkge1xuICBpZiAoIXBhdGguYXBwbHlUcmFuc2Zvcm0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcGF0aFJlY3QgPSBwYXRoLmdldEJvdW5kaW5nUmVjdCgpO1xuICB2YXIgbSA9IHBhdGhSZWN0LmNhbGN1bGF0ZVRyYW5zZm9ybShyZWN0KTtcbiAgcGF0aC5hcHBseVRyYW5zZm9ybShtKTtcbn1cbi8qKlxuICogU3ViIHBpeGVsIG9wdGltaXplIGxpbmUgZm9yIGNhbnZhc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbVxuICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbS5zaGFwZV1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbcGFyYW0uc2hhcGUueDFdXG4gKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtLnNoYXBlLnkxXVxuICogQHBhcmFtIHtudW1iZXJ9IFtwYXJhbS5zaGFwZS54Ml1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbcGFyYW0uc2hhcGUueTJdXG4gKiBAcGFyYW0ge09iamVjdH0gW3BhcmFtLnN0eWxlXVxuICogQHBhcmFtIHtudW1iZXJ9IFtwYXJhbS5zdHlsZS5saW5lV2lkdGhdXG4gKiBAcmV0dXJuIHtPYmplY3R9IE1vZGlmaWVkIHBhcmFtXG4gKi9cblxuXG5mdW5jdGlvbiBzdWJQaXhlbE9wdGltaXplTGluZShwYXJhbSkge1xuICB2YXIgc2hhcGUgPSBwYXJhbS5zaGFwZTtcbiAgdmFyIGxpbmVXaWR0aCA9IHBhcmFtLnN0eWxlLmxpbmVXaWR0aDtcblxuICBpZiAocm91bmQoc2hhcGUueDEgKiAyKSA9PT0gcm91bmQoc2hhcGUueDIgKiAyKSkge1xuICAgIHNoYXBlLngxID0gc2hhcGUueDIgPSBzdWJQaXhlbE9wdGltaXplKHNoYXBlLngxLCBsaW5lV2lkdGgsIHRydWUpO1xuICB9XG5cbiAgaWYgKHJvdW5kKHNoYXBlLnkxICogMikgPT09IHJvdW5kKHNoYXBlLnkyICogMikpIHtcbiAgICBzaGFwZS55MSA9IHNoYXBlLnkyID0gc3ViUGl4ZWxPcHRpbWl6ZShzaGFwZS55MSwgbGluZVdpZHRoLCB0cnVlKTtcbiAgfVxuXG4gIHJldHVybiBwYXJhbTtcbn1cbi8qKlxuICogU3ViIHBpeGVsIG9wdGltaXplIHJlY3QgZm9yIGNhbnZhc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbVxuICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbS5zaGFwZV1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbcGFyYW0uc2hhcGUueF1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbcGFyYW0uc2hhcGUueV1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbcGFyYW0uc2hhcGUud2lkdGhdXG4gKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtLnNoYXBlLmhlaWdodF1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW0uc3R5bGVdXG4gKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtLnN0eWxlLmxpbmVXaWR0aF1cbiAqIEByZXR1cm4ge09iamVjdH0gTW9kaWZpZWQgcGFyYW1cbiAqL1xuXG5cbmZ1bmN0aW9uIHN1YlBpeGVsT3B0aW1pemVSZWN0KHBhcmFtKSB7XG4gIHZhciBzaGFwZSA9IHBhcmFtLnNoYXBlO1xuICB2YXIgbGluZVdpZHRoID0gcGFyYW0uc3R5bGUubGluZVdpZHRoO1xuICB2YXIgb3JpZ2luWCA9IHNoYXBlLng7XG4gIHZhciBvcmlnaW5ZID0gc2hhcGUueTtcbiAgdmFyIG9yaWdpbldpZHRoID0gc2hhcGUud2lkdGg7XG4gIHZhciBvcmlnaW5IZWlnaHQgPSBzaGFwZS5oZWlnaHQ7XG4gIHNoYXBlLnggPSBzdWJQaXhlbE9wdGltaXplKHNoYXBlLngsIGxpbmVXaWR0aCwgdHJ1ZSk7XG4gIHNoYXBlLnkgPSBzdWJQaXhlbE9wdGltaXplKHNoYXBlLnksIGxpbmVXaWR0aCwgdHJ1ZSk7XG4gIHNoYXBlLndpZHRoID0gTWF0aC5tYXgoc3ViUGl4ZWxPcHRpbWl6ZShvcmlnaW5YICsgb3JpZ2luV2lkdGgsIGxpbmVXaWR0aCwgZmFsc2UpIC0gc2hhcGUueCwgb3JpZ2luV2lkdGggPT09IDAgPyAwIDogMSk7XG4gIHNoYXBlLmhlaWdodCA9IE1hdGgubWF4KHN1YlBpeGVsT3B0aW1pemUob3JpZ2luWSArIG9yaWdpbkhlaWdodCwgbGluZVdpZHRoLCBmYWxzZSkgLSBzaGFwZS55LCBvcmlnaW5IZWlnaHQgPT09IDAgPyAwIDogMSk7XG4gIHJldHVybiBwYXJhbTtcbn1cbi8qKlxuICogU3ViIHBpeGVsIG9wdGltaXplIGZvciBjYW52YXNcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zaXRpb24gQ29vcmRpbmF0ZSwgc3VjaCBhcyB4LCB5XG4gKiBAcGFyYW0ge251bWJlcn0gbGluZVdpZHRoIFNob3VsZCBiZSBub25uZWdhdGl2ZSBpbnRlZ2VyLlxuICogQHBhcmFtIHtib29sZWFuPX0gcG9zaXRpdmVPck5lZ2F0aXZlIERlZmF1bHQgZmFsc2UgKG5lZ2F0aXZlKS5cbiAqIEByZXR1cm4ge251bWJlcn0gT3B0aW1pemVkIHBvc2l0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gc3ViUGl4ZWxPcHRpbWl6ZShwb3NpdGlvbiwgbGluZVdpZHRoLCBwb3NpdGl2ZU9yTmVnYXRpdmUpIHtcbiAgLy8gQXNzdXJlIHRoYXQgKHBvc2l0aW9uICsgbGluZVdpZHRoIC8gMikgaXMgbmVhciBpbnRlZ2VyIGVkZ2UsXG4gIC8vIG90aGVyd2lzZSBsaW5lIHdpbGwgYmUgZnV6enkgaW4gY2FudmFzLlxuICB2YXIgZG91YmxlZFBvc2l0aW9uID0gcm91bmQocG9zaXRpb24gKiAyKTtcbiAgcmV0dXJuIChkb3VibGVkUG9zaXRpb24gKyByb3VuZChsaW5lV2lkdGgpKSAlIDIgPT09IDAgPyBkb3VibGVkUG9zaXRpb24gLyAyIDogKGRvdWJsZWRQb3NpdGlvbiArIChwb3NpdGl2ZU9yTmVnYXRpdmUgPyAxIDogLTEpKSAvIDI7XG59XG5cbmZ1bmN0aW9uIGhhc0ZpbGxPclN0cm9rZShmaWxsT3JTdHJva2UpIHtcbiAgcmV0dXJuIGZpbGxPclN0cm9rZSAhPSBudWxsICYmIGZpbGxPclN0cm9rZSAhPSAnbm9uZSc7XG59XG5cbmZ1bmN0aW9uIGxpZnRDb2xvcihjb2xvcikge1xuICByZXR1cm4gdHlwZW9mIGNvbG9yID09PSAnc3RyaW5nJyA/IGNvbG9yVG9vbC5saWZ0KGNvbG9yLCAtMC4xKSA6IGNvbG9yO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gY2FjaGVFbGVtZW50U3RsKGVsKSB7XG4gIGlmIChlbC5fX2hvdmVyU3RsRGlydHkpIHtcbiAgICB2YXIgc3Ryb2tlID0gZWwuc3R5bGUuc3Ryb2tlO1xuICAgIHZhciBmaWxsID0gZWwuc3R5bGUuZmlsbDsgLy8gQ3JlYXRlIGhvdmVyU3R5bGUgb24gbW91c2VvdmVyXG5cbiAgICB2YXIgaG92ZXJTdHlsZSA9IGVsLl9faG92ZXJTdGw7XG4gICAgaG92ZXJTdHlsZS5maWxsID0gaG92ZXJTdHlsZS5maWxsIHx8IChoYXNGaWxsT3JTdHJva2UoZmlsbCkgPyBsaWZ0Q29sb3IoZmlsbCkgOiBudWxsKTtcbiAgICBob3ZlclN0eWxlLnN0cm9rZSA9IGhvdmVyU3R5bGUuc3Ryb2tlIHx8IChoYXNGaWxsT3JTdHJva2Uoc3Ryb2tlKSA/IGxpZnRDb2xvcihzdHJva2UpIDogbnVsbCk7XG4gICAgdmFyIG5vcm1hbFN0eWxlID0ge307XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIGhvdmVyU3R5bGUpIHtcbiAgICAgIC8vIFNlZSBjb21tZW50IGluIGBkb1NpbmdsZUVudGVySG92ZXJgLlxuICAgICAgaWYgKGhvdmVyU3R5bGVbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICBub3JtYWxTdHlsZVtuYW1lXSA9IGVsLnN0eWxlW25hbWVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGVsLl9fbm9ybWFsU3RsID0gbm9ybWFsU3R5bGU7XG4gICAgZWwuX19ob3ZlclN0bERpcnR5ID0gZmFsc2U7XG4gIH1cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGRvU2luZ2xlRW50ZXJIb3ZlcihlbCkge1xuICBpZiAoZWwuX19pc0hvdmVyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY2FjaGVFbGVtZW50U3RsKGVsKTtcblxuICBpZiAoZWwudXNlSG92ZXJMYXllcikge1xuICAgIGVsLl9fenIgJiYgZWwuX196ci5hZGRIb3ZlcihlbCwgZWwuX19ob3ZlclN0bCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHN0eWxlID0gZWwuc3R5bGU7XG4gICAgdmFyIGluc2lkZVJvbGxiYWNrT3B0ID0gc3R5bGUuaW5zaWRlUm9sbGJhY2tPcHQ7IC8vIENvbnNpZGVyIGNhc2U6IG9ubHkgYHBvc2l0aW9uOiAndG9wJ2AgaXMgc2V0IG9uIGVtcGhhc2lzLCB0aGVuIHRleHRcbiAgICAvLyBjb2xvciBzaG91bGQgYmUgcmV0dXJuZWQgdG8gYGF1dG9Db2xvcmAsIHJhdGhlciB0aGFuIHJlbWFpbiAnI2ZmZicuXG4gICAgLy8gU28gd2Ugc2hvdWxkIHJvbGxiYWNrIHRoZW4gYXBwbHkgYWdhaW4gYWZ0ZXIgc3R5bGUgbWVyZ2luZy5cblxuICAgIGluc2lkZVJvbGxiYWNrT3B0ICYmIHJvbGxiYWNrSW5zaWRlU3R5bGUoc3R5bGUpOyAvLyBzdHlsZXMgY2FuIGJlOlxuICAgIC8vIHtcbiAgICAvLyAgICBsYWJlbDoge1xuICAgIC8vICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAvLyAgICAgICAgcG9zaXRpb246ICdvdXRzaWRlJyxcbiAgICAvLyAgICAgICAgZm9udFNpemU6IDE4XG4gICAgLy8gICAgfSxcbiAgICAvLyAgICBlbXBoYXNpczoge1xuICAgIC8vICAgICAgICBsYWJlbDoge1xuICAgIC8vICAgICAgICAgICAgc2hvdzogdHJ1ZVxuICAgIC8vICAgICAgICB9XG4gICAgLy8gICAgfVxuICAgIC8vIH0sXG4gICAgLy8gd2hlcmUgcHJvcGVydGllcyBvZiBgZW1waGFzaXNgIG1heSBub3QgYXBwZWFyIGluIGBub3JtYWxgLiBXZSBwcmV2aW91c2x5IHVzZVxuICAgIC8vIG1vZHVsZTplY2hhcnRzL3V0aWwvbW9kZWwjZGVmYXVsdEVtcGhhc2lzIHRvIG1lcmdlIGBub3JtYWxgIHRvIGBlbXBoYXNpc2AuXG4gICAgLy8gQnV0IGNvbnNpZGVyIHJpY2ggdGV4dCBhbmQgc2V0T3B0aW9uIGluIG1lcmdlIG1vZGUsIGl0IGlzIGltcG9zc2libGUgdG8gY292ZXJcbiAgICAvLyBhbGwgcHJvcGVydGllcyBpbiBtZXJnZS4gU28gd2UgdXNlIG1lcmdlIG1vZGUgd2hlbiBzZXR0aW5nIHN0eWxlIGhlcmUsIHdoZXJlXG4gICAgLy8gb25seSBwcm9wZXJ0aWVzIHRoYXQgaXMgbm90IGBudWxsL3VuZGVmaW5lZGAgY2FuIGJlIHNldC4gVGhlIGRpc2FkdmVudGFnZTpcbiAgICAvLyBudWxsL3VuZGVmaW5lZCBjYW4gbm90IGJlIHVzZWQgdG8gcmVtb3ZlIHN0eWxlIGFueSBtb3JlIGluIGBlbXBoYXNpc2AuXG5cbiAgICBzdHlsZS5leHRlbmRGcm9tKGVsLl9faG92ZXJTdGwpOyAvLyBEbyBub3Qgc2F2ZSBgaW5zaWRlUm9sbGJhY2tgLlxuXG4gICAgaWYgKGluc2lkZVJvbGxiYWNrT3B0KSB7XG4gICAgICBhcHBseUluc2lkZVN0eWxlKHN0eWxlLCBzdHlsZS5pbnNpZGVPcmlnaW5hbFRleHRQb3NpdGlvbiwgaW5zaWRlUm9sbGJhY2tPcHQpOyAvLyB0ZXh0RmlsbCBtYXkgYmUgcm9sbGJhY2tlZCB0byBudWxsLlxuXG4gICAgICBpZiAoc3R5bGUudGV4dEZpbGwgPT0gbnVsbCkge1xuICAgICAgICBzdHlsZS50ZXh0RmlsbCA9IGluc2lkZVJvbGxiYWNrT3B0LmF1dG9Db2xvcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBlbC5kaXJ0eShmYWxzZSk7XG4gICAgZWwuejIgKz0gMTtcbiAgfVxuXG4gIGVsLl9faXNIb3ZlciA9IHRydWU7XG59XG4vKipcbiAqIEBpbm5lclxuICovXG5cblxuZnVuY3Rpb24gZG9TaW5nbGVMZWF2ZUhvdmVyKGVsKSB7XG4gIGlmICghZWwuX19pc0hvdmVyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG5vcm1hbFN0bCA9IGVsLl9fbm9ybWFsU3RsO1xuXG4gIGlmIChlbC51c2VIb3ZlckxheWVyKSB7XG4gICAgZWwuX196ciAmJiBlbC5fX3pyLnJlbW92ZUhvdmVyKGVsKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBDb25zaWRlciBudWxsL3VuZGVmaW5lZCB2YWx1ZSwgc2hvdWxkIHVzZVxuICAgIC8vIGBzZXRTdHlsZWAgYnV0IG5vdCBgZXh0ZW5kRnJvbShzdGwsIHRydWUpYC5cbiAgICBub3JtYWxTdGwgJiYgZWwuc2V0U3R5bGUobm9ybWFsU3RsKTtcbiAgICBlbC56MiAtPSAxO1xuICB9XG5cbiAgZWwuX19pc0hvdmVyID0gZmFsc2U7XG59XG4vKipcbiAqIEBpbm5lclxuICovXG5cblxuZnVuY3Rpb24gZG9FbnRlckhvdmVyKGVsKSB7XG4gIGVsLnR5cGUgPT09ICdncm91cCcgPyBlbC50cmF2ZXJzZShmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQudHlwZSAhPT0gJ2dyb3VwJykge1xuICAgICAgZG9TaW5nbGVFbnRlckhvdmVyKGNoaWxkKTtcbiAgICB9XG4gIH0pIDogZG9TaW5nbGVFbnRlckhvdmVyKGVsKTtcbn1cblxuZnVuY3Rpb24gZG9MZWF2ZUhvdmVyKGVsKSB7XG4gIGVsLnR5cGUgPT09ICdncm91cCcgPyBlbC50cmF2ZXJzZShmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQudHlwZSAhPT0gJ2dyb3VwJykge1xuICAgICAgZG9TaW5nbGVMZWF2ZUhvdmVyKGNoaWxkKTtcbiAgICB9XG4gIH0pIDogZG9TaW5nbGVMZWF2ZUhvdmVyKGVsKTtcbn1cbi8qKlxuICogQGlubmVyXG4gKi9cblxuXG5mdW5jdGlvbiBzZXRFbGVtZW50SG92ZXJTdGwoZWwsIGhvdmVyU3RsKSB7XG4gIC8vIElmIGVsZW1lbnQgaGFzIHNlcGNpZmllZCBob3ZlclN0eWxlLCB0aGVuIHVzZSBpdCBpbnN0ZWFkIG9mIGdpdmVuIGhvdmVyU3R5bGVcbiAgLy8gT2Z0ZW4gdXNlZCB3aGVuIGl0ZW0gZ3JvdXAgaGFzIGEgbGFiZWwgZWxlbWVudCBhbmQgaXQncyBob3ZlclN0eWxlIGlzIGRpZmZlcmVudFxuICBlbC5fX2hvdmVyU3RsID0gZWwuaG92ZXJTdHlsZSB8fCBob3ZlclN0bCB8fCB7fTtcbiAgZWwuX19ob3ZlclN0bERpcnR5ID0gdHJ1ZTtcblxuICBpZiAoZWwuX19pc0hvdmVyKSB7XG4gICAgY2FjaGVFbGVtZW50U3RsKGVsKTtcbiAgfVxufVxuLyoqXG4gKiBAaW5uZXJcbiAqL1xuXG5cbmZ1bmN0aW9uIG9uRWxlbWVudE1vdXNlT3ZlcihlKSB7XG4gIGlmICh0aGlzLl9faG92ZXJTaWxlbnRPblRvdWNoICYmIGUuenJCeVRvdWNoKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIE9ubHkgaWYgZWxlbWVudCBpcyBub3QgaW4gZW1waGFzaXMgc3RhdHVzXG5cblxuICAhdGhpcy5fX2lzRW1waGFzaXMgJiYgZG9FbnRlckhvdmVyKHRoaXMpO1xufVxuLyoqXG4gKiBAaW5uZXJcbiAqL1xuXG5cbmZ1bmN0aW9uIG9uRWxlbWVudE1vdXNlT3V0KGUpIHtcbiAgaWYgKHRoaXMuX19ob3ZlclNpbGVudE9uVG91Y2ggJiYgZS56ckJ5VG91Y2gpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gT25seSBpZiBlbGVtZW50IGlzIG5vdCBpbiBlbXBoYXNpcyBzdGF0dXNcblxuXG4gICF0aGlzLl9faXNFbXBoYXNpcyAmJiBkb0xlYXZlSG92ZXIodGhpcyk7XG59XG4vKipcbiAqIEBpbm5lclxuICovXG5cblxuZnVuY3Rpb24gZW50ZXJFbXBoYXNpcygpIHtcbiAgdGhpcy5fX2lzRW1waGFzaXMgPSB0cnVlO1xuICBkb0VudGVySG92ZXIodGhpcyk7XG59XG4vKipcbiAqIEBpbm5lclxuICovXG5cblxuZnVuY3Rpb24gbGVhdmVFbXBoYXNpcygpIHtcbiAgdGhpcy5fX2lzRW1waGFzaXMgPSBmYWxzZTtcbiAgZG9MZWF2ZUhvdmVyKHRoaXMpO1xufVxuLyoqXG4gKiBTZXQgaG92ZXIgc3R5bGUgb2YgZWxlbWVudC5cbiAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgcmVwZWF0bHkgd2l0aG91dCBzaWRlLWVmZmVjdHMuXG4gKiBAcGFyYW0ge21vZHVsZTp6cmVuZGVyL0VsZW1lbnR9IGVsXG4gKiBAcGFyYW0ge09iamVjdH0gW2hvdmVyU3R5bGVdXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdF1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdC5ob3ZlclNpbGVudE9uVG91Y2g9ZmFsc2VdXG4gKiAgICAgICAgSW4gdG91Y2ggZGV2aWNlLCBtb3VzZW92ZXIgZXZlbnQgd2lsbCBiZSB0cmlnZ2VyIG9uIHRvdWNoc3RhcnQgZXZlbnRcbiAqICAgICAgICAoc2VlIG1vZHVsZTp6cmVuZGVyL2RvbS9IYW5kbGVyUHJveHkpLiBCeSB0aGlzIG1lY2hhbmlzbSwgd2UgY2FuXG4gKiAgICAgICAgY29udmluaWVudGx5IHVzZSBob3ZlclN0eWxlIHdoZW4gdGFwIG9uIHRvdWNoIHNjcmVlbiB3aXRob3V0IGFkZGl0aW9uYWxcbiAqICAgICAgICBjb2RlIGZvciBjb21wYXRpYmlsaXR5LlxuICogICAgICAgIEJ1dCBpZiB0aGUgY2hhcnQvY29tcG9uZW50IGhhcyBzZWxlY3QgZmVhdHVyZSwgd2hpY2ggdXN1YWxseSBhbHNvIHVzZVxuICogICAgICAgIGhvdmVyU3R5bGUsIHRoZXJlIG1pZ2h0IGJlIGNvbmZsaWN0IGJldHdlZW4gJ3NlbGVjdC1oaWdobGlnaHQnIGFuZFxuICogICAgICAgICdob3Zlci1oaWdobGlnaHQnIGVzcGVjaWFsbHkgd2hlbiByb2FtIGlzIGVuYWJsZWQgKHNlZSBnZW8gZm9yIGV4YW1wbGUpLlxuICogICAgICAgIEluIHRoaXMgY2FzZSwgaG92ZXJTaWxlbnRPblRvdWNoIHNob3VsZCBiZSB1c2VkIHRvIGRpc2FibGUgaG92ZXItaGlnaGxpZ2h0XG4gKiAgICAgICAgb24gdG91Y2ggZGV2aWNlLlxuICovXG5cblxuZnVuY3Rpb24gc2V0SG92ZXJTdHlsZShlbCwgaG92ZXJTdHlsZSwgb3B0KSB7XG4gIGVsLl9faG92ZXJTaWxlbnRPblRvdWNoID0gb3B0ICYmIG9wdC5ob3ZlclNpbGVudE9uVG91Y2g7XG4gIGVsLnR5cGUgPT09ICdncm91cCcgPyBlbC50cmF2ZXJzZShmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQudHlwZSAhPT0gJ2dyb3VwJykge1xuICAgICAgc2V0RWxlbWVudEhvdmVyU3RsKGNoaWxkLCBob3ZlclN0eWxlKTtcbiAgICB9XG4gIH0pIDogc2V0RWxlbWVudEhvdmVyU3RsKGVsLCBob3ZlclN0eWxlKTsgLy8gRHVwbGljYXRlZCBmdW5jdGlvbiB3aWxsIGJlIGF1dG8taWdub3JlZCwgc2VlIEV2ZW50ZnVsLmpzLlxuXG4gIGVsLm9uKCdtb3VzZW92ZXInLCBvbkVsZW1lbnRNb3VzZU92ZXIpLm9uKCdtb3VzZW91dCcsIG9uRWxlbWVudE1vdXNlT3V0KTsgLy8gRW1waGFzaXMsIG5vcm1hbCBjYW4gYmUgdHJpZ2dlcmVkIG1hbnVhbGx5XG5cbiAgZWwub24oJ2VtcGhhc2lzJywgZW50ZXJFbXBoYXNpcykub24oJ25vcm1hbCcsIGxlYXZlRW1waGFzaXMpO1xufVxuLyoqXG4gKiBAcGFyYW0ge09iamVjdHxtb2R1bGU6enJlbmRlci9ncmFwaGljL1N0eWxlfSBub3JtYWxTdHlsZVxuICogQHBhcmFtIHtPYmplY3R9IGVtcGhhc2lzU3R5bGVcbiAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvbW9kZWwvTW9kZWx9IG5vcm1hbE1vZGVsXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL21vZGVsL01vZGVsfSBlbXBoYXNpc01vZGVsXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0IENoZWNrIGBvcHRgIG9mIGBzZXRUZXh0U3R5bGVDb21tb25gIHRvIGZpbmQgb3RoZXIgcHJvcHMuXG4gKiBAcGFyYW0ge3N0cmluZ3xGdW5jdGlvbn0gW29wdC5kZWZhdWx0VGV4dF1cbiAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvbW9kZWwvTW9kZWx9IFtvcHQubGFiZWxGZXRjaGVyXSBGZXRjaCB0ZXh0IGJ5XG4gKiAgICAgIGBvcHQubGFiZWxGZXRjaGVyLmdldEZvcm1hdHRlZExhYmVsKG9wdC5sYWJlbERhdGFJbmRleCwgJ25vcm1hbCcvJ2VtcGhhc2lzJywgbnVsbCwgb3B0LmxhYmVsRGltSW5kZXgpYFxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Nb2RlbH0gW29wdC5sYWJlbERhdGFJbmRleF0gRmV0Y2ggdGV4dCBieVxuICogICAgICBgb3B0LnRleHRGZXRjaGVyLmdldEZvcm1hdHRlZExhYmVsKG9wdC5sYWJlbERhdGFJbmRleCwgJ25vcm1hbCcvJ2VtcGhhc2lzJywgbnVsbCwgb3B0LmxhYmVsRGltSW5kZXgpYFxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Nb2RlbH0gW29wdC5sYWJlbERpbUluZGV4XSBGZXRjaCB0ZXh0IGJ5XG4gKiAgICAgIGBvcHQudGV4dEZldGNoZXIuZ2V0Rm9ybWF0dGVkTGFiZWwob3B0LmxhYmVsRGF0YUluZGV4LCAnbm9ybWFsJy8nZW1waGFzaXMnLCBudWxsLCBvcHQubGFiZWxEaW1JbmRleClgXG4gKiBAcGFyYW0ge09iamVjdH0gW25vcm1hbFNwZWNpZmllZF1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbZW1waGFzaXNTcGVjaWZpZWRdXG4gKi9cblxuXG5mdW5jdGlvbiBzZXRMYWJlbFN0eWxlKG5vcm1hbFN0eWxlLCBlbXBoYXNpc1N0eWxlLCBub3JtYWxNb2RlbCwgZW1waGFzaXNNb2RlbCwgb3B0LCBub3JtYWxTcGVjaWZpZWQsIGVtcGhhc2lzU3BlY2lmaWVkKSB7XG4gIG9wdCA9IG9wdCB8fCBFTVBUWV9PQko7XG4gIHZhciBsYWJlbEZldGNoZXIgPSBvcHQubGFiZWxGZXRjaGVyO1xuICB2YXIgbGFiZWxEYXRhSW5kZXggPSBvcHQubGFiZWxEYXRhSW5kZXg7XG4gIHZhciBsYWJlbERpbUluZGV4ID0gb3B0LmxhYmVsRGltSW5kZXg7IC8vIFRoaXMgc2NlbmFyaW8sIGBsYWJlbC5ub3JtYWwuc2hvdyA9IHRydWU7IGxhYmVsLmVtcGhhc2lzLnNob3cgPSBmYWxzZWAsXG4gIC8vIGlzIG5vdCBzdXBwb3J0ZWQgdXRpbCBzb21lb25lIHJlcXVlc3RzLlxuXG4gIHZhciBzaG93Tm9ybWFsID0gbm9ybWFsTW9kZWwuZ2V0U2hhbGxvdygnc2hvdycpO1xuICB2YXIgc2hvd0VtcGhhc2lzID0gZW1waGFzaXNNb2RlbC5nZXRTaGFsbG93KCdzaG93Jyk7IC8vIENvbnNpZGVyIHBlcmZvcm1hbmNlLCBvbmx5IGZldGNoIGxhYmVsIHdoZW4gbmVjZXNzYXJ5LlxuICAvLyBJZiBgbm9ybWFsLnNob3dgIGlzIGBmYWxzZWAgYW5kIGBlbXBoYXNpcy5zaG93YCBpcyBgdHJ1ZWAgYW5kIGBlbXBoYXNpcy5mb3JtYXR0ZXJgIGlzIG5vdCBzZXQsXG4gIC8vIGxhYmVsIHNob3VsZCBiZSBkaXNwbGF5ZWQsIHdoZXJlIHRleHQgaXMgZmV0Y2hlZCBieSBgbm9ybWFsLmZvcm1hdHRlcmAgb3IgYG9wdC5kZWZhdWx0VGV4dGAuXG5cbiAgdmFyIGJhc2VUZXh0O1xuXG4gIGlmIChzaG93Tm9ybWFsIHx8IHNob3dFbXBoYXNpcykge1xuICAgIGlmIChsYWJlbEZldGNoZXIpIHtcbiAgICAgIGJhc2VUZXh0ID0gbGFiZWxGZXRjaGVyLmdldEZvcm1hdHRlZExhYmVsKGxhYmVsRGF0YUluZGV4LCAnbm9ybWFsJywgbnVsbCwgbGFiZWxEaW1JbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKGJhc2VUZXh0ID09IG51bGwpIHtcbiAgICAgIGJhc2VUZXh0ID0genJVdGlsLmlzRnVuY3Rpb24ob3B0LmRlZmF1bHRUZXh0KSA/IG9wdC5kZWZhdWx0VGV4dChsYWJlbERhdGFJbmRleCwgb3B0KSA6IG9wdC5kZWZhdWx0VGV4dDtcbiAgICB9XG4gIH1cblxuICB2YXIgbm9ybWFsU3R5bGVUZXh0ID0gc2hvd05vcm1hbCA/IGJhc2VUZXh0IDogbnVsbDtcbiAgdmFyIGVtcGhhc2lzU3R5bGVUZXh0ID0gc2hvd0VtcGhhc2lzID8genJVdGlsLnJldHJpZXZlMihsYWJlbEZldGNoZXIgPyBsYWJlbEZldGNoZXIuZ2V0Rm9ybWF0dGVkTGFiZWwobGFiZWxEYXRhSW5kZXgsICdlbXBoYXNpcycsIG51bGwsIGxhYmVsRGltSW5kZXgpIDogbnVsbCwgYmFzZVRleHQpIDogbnVsbDsgLy8gT3B0aW1pemU6IElmIHN0eWxlLnRleHQgaXMgbnVsbCwgdGV4dCB3aWxsIG5vdCBiZSBkcmF3bi5cblxuICBpZiAobm9ybWFsU3R5bGVUZXh0ICE9IG51bGwgfHwgZW1waGFzaXNTdHlsZVRleHQgIT0gbnVsbCkge1xuICAgIC8vIEFsd2F5cyBzZXQgYHRleHRTdHlsZWAgZXZlbiBpZiBgbm9ybWFsU3R5bGUudGV4dGAgaXMgbnVsbCwgYmVjYXVzZSBkZWZhdWx0XG4gICAgLy8gdmFsdWVzIGhhdmUgdG8gYmUgc2V0IG9uIGBub3JtYWxTdHlsZWAuXG4gICAgLy8gSWYgd2Ugc2V0IGRlZmF1bHQgdmFsdWVzIG9uIGBlbXBoYXNpc1N0eWxlYCwgY29uc2lkZXIgY2FzZTpcbiAgICAvLyBGaXJzdGx5LCBgc2V0T3B0aW9uKC4uLiBsYWJlbDoge25vcm1hbDoge3RleHQ6IG51bGx9LCBlbXBoYXNpczoge3Nob3c6IHRydWV9fSAuLi4pO2BcbiAgICAvLyBTZWNvbmRseSwgYHNldE9wdGlvbiguLi4gbGFiZWw6IHtub3JhbWw6IHtzaG93OiB0cnVlLCB0ZXh0OiAnYWJjJywgY29sb3I6ICdyZWQnfSAuLi4pO2BcbiAgICAvLyBUaGVuIHRoZSAncmVkJyB3aWxsIG5vdCB3b3JrIG9uIGVtcGhhc2lzLlxuICAgIHNldFRleHRTdHlsZShub3JtYWxTdHlsZSwgbm9ybWFsTW9kZWwsIG5vcm1hbFNwZWNpZmllZCwgb3B0KTtcbiAgICBzZXRUZXh0U3R5bGUoZW1waGFzaXNTdHlsZSwgZW1waGFzaXNNb2RlbCwgZW1waGFzaXNTcGVjaWZpZWQsIG9wdCwgdHJ1ZSk7XG4gIH1cblxuICBub3JtYWxTdHlsZS50ZXh0ID0gbm9ybWFsU3R5bGVUZXh0O1xuICBlbXBoYXNpc1N0eWxlLnRleHQgPSBlbXBoYXNpc1N0eWxlVGV4dDtcbn1cbi8qKlxuICogU2V0IGJhc2ljIHRleHRTdHlsZSBwcm9wZXJ0aWVzLlxuICogQHBhcmFtIHtPYmplY3R8bW9kdWxlOnpyZW5kZXIvZ3JhcGhpYy9TdHlsZX0gdGV4dFN0eWxlXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL21vZGVsL01vZGVsfSBtb2RlbFxuICogQHBhcmFtIHtPYmplY3R9IFtzcGVjaWZpZWRUZXh0U3R5bGVdIENhbiBiZSBvdmVycmlkZWQgYnkgc2V0dGluZ3MgaW4gbW9kZWwuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdF0gU2VlIGBvcHRgIG9mIGBzZXRUZXh0U3R5bGVDb21tb25gLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNFbXBoYXNpc11cbiAqL1xuXG5cbmZ1bmN0aW9uIHNldFRleHRTdHlsZSh0ZXh0U3R5bGUsIHRleHRTdHlsZU1vZGVsLCBzcGVjaWZpZWRUZXh0U3R5bGUsIG9wdCwgaXNFbXBoYXNpcykge1xuICBzZXRUZXh0U3R5bGVDb21tb24odGV4dFN0eWxlLCB0ZXh0U3R5bGVNb2RlbCwgb3B0LCBpc0VtcGhhc2lzKTtcbiAgc3BlY2lmaWVkVGV4dFN0eWxlICYmIHpyVXRpbC5leHRlbmQodGV4dFN0eWxlLCBzcGVjaWZpZWRUZXh0U3R5bGUpO1xuICB0ZXh0U3R5bGUuaG9zdCAmJiB0ZXh0U3R5bGUuaG9zdC5kaXJ0eSAmJiB0ZXh0U3R5bGUuaG9zdC5kaXJ0eShmYWxzZSk7XG4gIHJldHVybiB0ZXh0U3R5bGU7XG59XG4vKipcbiAqIFNldCB0ZXh0IG9wdGlvbiBpbiB0aGUgc3R5bGUuXG4gKiBAZGVwcmVjYXRlZFxuICogQHBhcmFtIHtPYmplY3R9IHRleHRTdHlsZVxuICogQHBhcmFtIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9Nb2RlbH0gbGFiZWxNb2RlbFxuICogQHBhcmFtIHtzdHJpbmd8Ym9vbGVhbn0gZGVmYXVsdENvbG9yIERlZmF1bHQgdGV4dCBjb2xvci5cbiAqICAgICAgICBJZiBzZXQgYXMgZmFsc2UsIGl0IHdpbGwgYmUgcHJvY2Vzc2VkIGFzIGEgZW1waGFzaXMgc3R5bGUuXG4gKi9cblxuXG5mdW5jdGlvbiBzZXRUZXh0KHRleHRTdHlsZSwgbGFiZWxNb2RlbCwgZGVmYXVsdENvbG9yKSB7XG4gIHZhciBvcHQgPSB7XG4gICAgaXNSZWN0VGV4dDogdHJ1ZVxuICB9O1xuICB2YXIgaXNFbXBoYXNpcztcblxuICBpZiAoZGVmYXVsdENvbG9yID09PSBmYWxzZSkge1xuICAgIGlzRW1waGFzaXMgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIC8vIFN1cHBvcnQgc2V0dGluZyBjb2xvciBhcyAnYXV0bycgdG8gZ2V0IHZpc3VhbCBjb2xvci5cbiAgICBvcHQuYXV0b0NvbG9yID0gZGVmYXVsdENvbG9yO1xuICB9XG5cbiAgc2V0VGV4dFN0eWxlQ29tbW9uKHRleHRTdHlsZSwgbGFiZWxNb2RlbCwgb3B0LCBpc0VtcGhhc2lzKTtcbiAgdGV4dFN0eWxlLmhvc3QgJiYgdGV4dFN0eWxlLmhvc3QuZGlydHkgJiYgdGV4dFN0eWxlLmhvc3QuZGlydHkoZmFsc2UpO1xufVxuLyoqXG4gKiB7XG4gKiAgICAgIGRpc2FibGVCb3g6IGJvb2xlYW4sIFdoZXRoZXIgZGlhYmxlIGRyYXdpbmcgYm94IG9mIGJsb2NrIChvdXRlciBtb3N0KS5cbiAqICAgICAgaXNSZWN0VGV4dDogYm9vbGVhbixcbiAqICAgICAgYXV0b0NvbG9yOiBzdHJpbmcsIHNwZWNpZnkgYSBjb2xvciB3aGVuIGNvbG9yIGlzICdhdXRvJyxcbiAqICAgICAgICAgICAgICBmb3IgdGV4dEZpbGwsIHRleHRTdHJva2UsIHRleHRCYWNrZ3JvdW5kQ29sb3IsIGFuZCB0ZXh0Qm9yZGVyQ29sb3IuXG4gKiAgICAgICAgICAgICAgSWYgYXV0b0NvbG9yIHNwZWNpZmllZCwgaXQgaXMgdXNlZCBhcyBkZWZhdWx0IHRleHRGaWxsLlxuICogICAgICB1c2VJbnNpZGVTdHlsZTpcbiAqICAgICAgICAgICAgICBgdHJ1ZWA6IFVzZSBpbnNpZGUgc3R5bGUgKHRleHRGaWxsLCB0ZXh0U3Ryb2tlLCB0ZXh0U3Ryb2tlV2lkdGgpXG4gKiAgICAgICAgICAgICAgICAgIGlmIGB0ZXh0RmlsbGAgaXMgbm90IHNwZWNpZmllZC5cbiAqICAgICAgICAgICAgICBgZmFsc2VgOiBEbyBub3QgdXNlIGluc2lkZSBzdHlsZS5cbiAqICAgICAgICAgICAgICBgbnVsbC91bmRlZmluZWRgOiB1c2UgaW5zaWRlIHN0eWxlIGlmIGBpc1JlY3RUZXh0YCBpcyB0cnVlIGFuZFxuICogICAgICAgICAgICAgICAgICBgdGV4dEZpbGxgIGlzIG5vdCBzcGVjaWZpZWQgYW5kIHRleHRQb3NpdGlvbiBjb250YWlucyBgJ2luc2lkZSdgLlxuICogICAgICBmb3JjZVJpY2g6IGJvb2xlYW5cbiAqIH1cbiAqL1xuXG5cbmZ1bmN0aW9uIHNldFRleHRTdHlsZUNvbW1vbih0ZXh0U3R5bGUsIHRleHRTdHlsZU1vZGVsLCBvcHQsIGlzRW1waGFzaXMpIHtcbiAgLy8gQ29uc2lkZXIgdGhlcmUgd2lsbCBiZSBhYm5vcm1hbCB3aGVuIG1lcmdlIGhvdmVyIHN0eWxlIHRvIG5vcm1hbCBzdHlsZSBpZiBnaXZlbiBkZWZhdWx0IHZhbHVlLlxuICBvcHQgPSBvcHQgfHwgRU1QVFlfT0JKO1xuXG4gIGlmIChvcHQuaXNSZWN0VGV4dCkge1xuICAgIHZhciB0ZXh0UG9zaXRpb24gPSB0ZXh0U3R5bGVNb2RlbC5nZXRTaGFsbG93KCdwb3NpdGlvbicpIHx8IChpc0VtcGhhc2lzID8gbnVsbCA6ICdpbnNpZGUnKTsgLy8gJ291dHNpZGUnIGlzIG5vdCBhIHZhbGlkIHpyIHRleHRQb3N0aW9uIHZhbHVlLCBidXQgdXNlZFxuICAgIC8vIGluIGJhciBzZXJpZXMsIGFuZCBtYWdyaWMgdHlwZSBzaG91bGQgYmUgY29uc2lkZXJlZC5cblxuICAgIHRleHRQb3NpdGlvbiA9PT0gJ291dHNpZGUnICYmICh0ZXh0UG9zaXRpb24gPSAndG9wJyk7XG4gICAgdGV4dFN0eWxlLnRleHRQb3NpdGlvbiA9IHRleHRQb3NpdGlvbjtcbiAgICB0ZXh0U3R5bGUudGV4dE9mZnNldCA9IHRleHRTdHlsZU1vZGVsLmdldFNoYWxsb3coJ29mZnNldCcpO1xuICAgIHZhciBsYWJlbFJvdGF0ZSA9IHRleHRTdHlsZU1vZGVsLmdldFNoYWxsb3coJ3JvdGF0ZScpO1xuICAgIGxhYmVsUm90YXRlICE9IG51bGwgJiYgKGxhYmVsUm90YXRlICo9IE1hdGguUEkgLyAxODApO1xuICAgIHRleHRTdHlsZS50ZXh0Um90YXRpb24gPSBsYWJlbFJvdGF0ZTtcbiAgICB0ZXh0U3R5bGUudGV4dERpc3RhbmNlID0genJVdGlsLnJldHJpZXZlMih0ZXh0U3R5bGVNb2RlbC5nZXRTaGFsbG93KCdkaXN0YW5jZScpLCBpc0VtcGhhc2lzID8gbnVsbCA6IDUpO1xuICB9XG5cbiAgdmFyIGVjTW9kZWwgPSB0ZXh0U3R5bGVNb2RlbC5lY01vZGVsO1xuICB2YXIgZ2xvYmFsVGV4dFN0eWxlID0gZWNNb2RlbCAmJiBlY01vZGVsLm9wdGlvbi50ZXh0U3R5bGU7IC8vIENvbnNpZGVyIGNhc2U6XG4gIC8vIHtcbiAgLy8gICAgIGRhdGE6IFt7XG4gIC8vICAgICAgICAgdmFsdWU6IDEyLFxuICAvLyAgICAgICAgIGxhYmVsOiB7XG4gIC8vICAgICAgICAgICAgIHJpY2g6IHtcbiAgLy8gICAgICAgICAgICAgICAgIC8vIG5vICdhJyBoZXJlIGJ1dCB1c2luZyBwYXJlbnQgJ2EnLlxuICAvLyAgICAgICAgICAgICB9XG4gIC8vICAgICAgICAgfVxuICAvLyAgICAgfV0sXG4gIC8vICAgICByaWNoOiB7XG4gIC8vICAgICAgICAgYTogeyAuLi4gfVxuICAvLyAgICAgfVxuICAvLyB9XG5cbiAgdmFyIHJpY2hJdGVtTmFtZXMgPSBnZXRSaWNoSXRlbU5hbWVzKHRleHRTdHlsZU1vZGVsKTtcbiAgdmFyIHJpY2hSZXN1bHQ7XG5cbiAgaWYgKHJpY2hJdGVtTmFtZXMpIHtcbiAgICByaWNoUmVzdWx0ID0ge307XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHJpY2hJdGVtTmFtZXMpIHtcbiAgICAgIGlmIChyaWNoSXRlbU5hbWVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIC8vIENhc2NhZGUgaXMgc3VwcG9ydGVkIGluIHJpY2guXG4gICAgICAgIHZhciByaWNoVGV4dFN0eWxlID0gdGV4dFN0eWxlTW9kZWwuZ2V0TW9kZWwoWydyaWNoJywgbmFtZV0pOyAvLyBJbiByaWNoLCBuZXZlciBgZGlzYWJsZUJveGAuXG5cbiAgICAgICAgc2V0VG9rZW5UZXh0U3R5bGUocmljaFJlc3VsdFtuYW1lXSA9IHt9LCByaWNoVGV4dFN0eWxlLCBnbG9iYWxUZXh0U3R5bGUsIG9wdCwgaXNFbXBoYXNpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGV4dFN0eWxlLnJpY2ggPSByaWNoUmVzdWx0O1xuICBzZXRUb2tlblRleHRTdHlsZSh0ZXh0U3R5bGUsIHRleHRTdHlsZU1vZGVsLCBnbG9iYWxUZXh0U3R5bGUsIG9wdCwgaXNFbXBoYXNpcywgdHJ1ZSk7XG5cbiAgaWYgKG9wdC5mb3JjZVJpY2ggJiYgIW9wdC50ZXh0U3R5bGUpIHtcbiAgICBvcHQudGV4dFN0eWxlID0ge307XG4gIH1cblxuICByZXR1cm4gdGV4dFN0eWxlO1xufSAvLyBDb25zaWRlciBjYXNlOlxuLy8ge1xuLy8gICAgIGRhdGE6IFt7XG4vLyAgICAgICAgIHZhbHVlOiAxMixcbi8vICAgICAgICAgbGFiZWw6IHtcbi8vICAgICAgICAgICAgIHJpY2g6IHtcbi8vICAgICAgICAgICAgICAgICAvLyBubyAnYScgaGVyZSBidXQgdXNpbmcgcGFyZW50ICdhJy5cbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgfVxuLy8gICAgIH1dLFxuLy8gICAgIHJpY2g6IHtcbi8vICAgICAgICAgYTogeyAuLi4gfVxuLy8gICAgIH1cbi8vIH1cblxuXG5mdW5jdGlvbiBnZXRSaWNoSXRlbU5hbWVzKHRleHRTdHlsZU1vZGVsKSB7XG4gIC8vIFVzZSBvYmplY3QgdG8gcmVtb3ZlIGR1cGxpY2F0ZWQgbmFtZXMuXG4gIHZhciByaWNoSXRlbU5hbWVNYXA7XG5cbiAgd2hpbGUgKHRleHRTdHlsZU1vZGVsICYmIHRleHRTdHlsZU1vZGVsICE9PSB0ZXh0U3R5bGVNb2RlbC5lY01vZGVsKSB7XG4gICAgdmFyIHJpY2ggPSAodGV4dFN0eWxlTW9kZWwub3B0aW9uIHx8IEVNUFRZX09CSikucmljaDtcblxuICAgIGlmIChyaWNoKSB7XG4gICAgICByaWNoSXRlbU5hbWVNYXAgPSByaWNoSXRlbU5hbWVNYXAgfHwge307XG5cbiAgICAgIGZvciAodmFyIG5hbWUgaW4gcmljaCkge1xuICAgICAgICBpZiAocmljaC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgIHJpY2hJdGVtTmFtZU1hcFtuYW1lXSA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0ZXh0U3R5bGVNb2RlbCA9IHRleHRTdHlsZU1vZGVsLnBhcmVudE1vZGVsO1xuICB9XG5cbiAgcmV0dXJuIHJpY2hJdGVtTmFtZU1hcDtcbn1cblxuZnVuY3Rpb24gc2V0VG9rZW5UZXh0U3R5bGUodGV4dFN0eWxlLCB0ZXh0U3R5bGVNb2RlbCwgZ2xvYmFsVGV4dFN0eWxlLCBvcHQsIGlzRW1waGFzaXMsIGlzQmxvY2spIHtcbiAgLy8gSW4gbWVyZ2UgbW9kZSwgZGVmYXVsdCB2YWx1ZSBzaG91bGQgbm90IGJlIGdpdmVuLlxuICBnbG9iYWxUZXh0U3R5bGUgPSAhaXNFbXBoYXNpcyAmJiBnbG9iYWxUZXh0U3R5bGUgfHwgRU1QVFlfT0JKO1xuICB0ZXh0U3R5bGUudGV4dEZpbGwgPSBnZXRBdXRvQ29sb3IodGV4dFN0eWxlTW9kZWwuZ2V0U2hhbGxvdygnY29sb3InKSwgb3B0KSB8fCBnbG9iYWxUZXh0U3R5bGUuY29sb3I7XG4gIHRleHRTdHlsZS50ZXh0U3Ryb2tlID0gZ2V0QXV0b0NvbG9yKHRleHRTdHlsZU1vZGVsLmdldFNoYWxsb3coJ3RleHRCb3JkZXJDb2xvcicpLCBvcHQpIHx8IGdsb2JhbFRleHRTdHlsZS50ZXh0Qm9yZGVyQ29sb3I7XG4gIHRleHRTdHlsZS50ZXh0U3Ryb2tlV2lkdGggPSB6clV0aWwucmV0cmlldmUyKHRleHRTdHlsZU1vZGVsLmdldFNoYWxsb3coJ3RleHRCb3JkZXJXaWR0aCcpLCBnbG9iYWxUZXh0U3R5bGUudGV4dEJvcmRlcldpZHRoKTtcblxuICBpZiAoIWlzRW1waGFzaXMpIHtcbiAgICBpZiAoaXNCbG9jaykge1xuICAgICAgLy8gQWx3YXlzIHNldCBgaW5zaWRlUm9sbGJhY2tgLCBmb3IgY2xlYXJpbmcgcHJldmlvdXMuXG4gICAgICB2YXIgb3JpZ2luYWxUZXh0UG9zaXRpb24gPSB0ZXh0U3R5bGUudGV4dFBvc2l0aW9uO1xuICAgICAgdGV4dFN0eWxlLmluc2lkZVJvbGxiYWNrID0gYXBwbHlJbnNpZGVTdHlsZSh0ZXh0U3R5bGUsIG9yaWdpbmFsVGV4dFBvc2l0aW9uLCBvcHQpOyAvLyBTYXZlIG9yaWdpbmFsIHRleHRQb3NpdGlvbiwgYmVjYXVzZSBzdHlsZS50ZXh0UG9zaXRpb24gd2lsbCBiZSByZXBhbGNlZCBieVxuICAgICAgLy8gcmVhbCBsb2NhdGlvbiAobGlrZSBbMTAsIDMwXSkgaW4genJlbmRlci5cblxuICAgICAgdGV4dFN0eWxlLmluc2lkZU9yaWdpbmFsVGV4dFBvc2l0aW9uID0gb3JpZ2luYWxUZXh0UG9zaXRpb247XG4gICAgICB0ZXh0U3R5bGUuaW5zaWRlUm9sbGJhY2tPcHQgPSBvcHQ7XG4gICAgfSAvLyBTZXQgZGVmYXVsdCBmaW5hbGx5LlxuXG5cbiAgICBpZiAodGV4dFN0eWxlLnRleHRGaWxsID09IG51bGwpIHtcbiAgICAgIHRleHRTdHlsZS50ZXh0RmlsbCA9IG9wdC5hdXRvQ29sb3I7XG4gICAgfVxuICB9IC8vIERvIG5vdCB1c2UgYGdldEZvbnRgIGhlcmUsIGJlY2F1c2UgbWVyZ2Ugc2hvdWxkIGJlIHN1cHBvcnRlZCwgd2hlcmVcbiAgLy8gcGFydCBvZiB0aGVzZSBwcm9wZXJ0aWVzIG1heSBiZSBjaGFuZ2VkIGluIGVtcGhhc2lzIHN0eWxlLCBhbmQgdGhlXG4gIC8vIG90aGVycyBzaG91bGQgcmVtYWluIHRoZWlyIG9yaWdpbmFsIHZhbHVlIGdvdCBmcm9tIG5vcm1hbCBzdHlsZS5cblxuXG4gIHRleHRTdHlsZS5mb250U3R5bGUgPSB0ZXh0U3R5bGVNb2RlbC5nZXRTaGFsbG93KCdmb250U3R5bGUnKSB8fCBnbG9iYWxUZXh0U3R5bGUuZm9udFN0eWxlO1xuICB0ZXh0U3R5bGUuZm9udFdlaWdodCA9IHRleHRTdHlsZU1vZGVsLmdldFNoYWxsb3coJ2ZvbnRXZWlnaHQnKSB8fCBnbG9iYWxUZXh0U3R5bGUuZm9udFdlaWdodDtcbiAgdGV4dFN0eWxlLmZvbnRTaXplID0gdGV4dFN0eWxlTW9kZWwuZ2V0U2hhbGxvdygnZm9udFNpemUnKSB8fCBnbG9iYWxUZXh0U3R5bGUuZm9udFNpemU7XG4gIHRleHRTdHlsZS5mb250RmFtaWx5ID0gdGV4dFN0eWxlTW9kZWwuZ2V0U2hhbGxvdygnZm9udEZhbWlseScpIHx8IGdsb2JhbFRleHRTdHlsZS5mb250RmFtaWx5O1xuICB0ZXh0U3R5bGUudGV4dEFsaWduID0gdGV4dFN0eWxlTW9kZWwuZ2V0U2hhbGxvdygnYWxpZ24nKTtcbiAgdGV4dFN0eWxlLnRleHRWZXJ0aWNhbEFsaWduID0gdGV4dFN0eWxlTW9kZWwuZ2V0U2hhbGxvdygndmVydGljYWxBbGlnbicpIHx8IHRleHRTdHlsZU1vZGVsLmdldFNoYWxsb3coJ2Jhc2VsaW5lJyk7XG4gIHRleHRTdHlsZS50ZXh0TGluZUhlaWdodCA9IHRleHRTdHlsZU1vZGVsLmdldFNoYWxsb3coJ2xpbmVIZWlnaHQnKTtcbiAgdGV4dFN0eWxlLnRleHRXaWR0aCA9IHRleHRTdHlsZU1vZGVsLmdldFNoYWxsb3coJ3dpZHRoJyk7XG4gIHRleHRTdHlsZS50ZXh0SGVpZ2h0ID0gdGV4dFN0eWxlTW9kZWwuZ2V0U2hhbGxvdygnaGVpZ2h0Jyk7XG4gIHRleHRTdHlsZS50ZXh0VGFnID0gdGV4dFN0eWxlTW9kZWwuZ2V0U2hhbGxvdygndGFnJyk7XG5cbiAgaWYgKCFpc0Jsb2NrIHx8ICFvcHQuZGlzYWJsZUJveCkge1xuICAgIHRleHRTdHlsZS50ZXh0QmFja2dyb3VuZENvbG9yID0gZ2V0QXV0b0NvbG9yKHRleHRTdHlsZU1vZGVsLmdldFNoYWxsb3coJ2JhY2tncm91bmRDb2xvcicpLCBvcHQpO1xuICAgIHRleHRTdHlsZS50ZXh0UGFkZGluZyA9IHRleHRTdHlsZU1vZGVsLmdldFNoYWxsb3coJ3BhZGRpbmcnKTtcbiAgICB0ZXh0U3R5bGUudGV4dEJvcmRlckNvbG9yID0gZ2V0QXV0b0NvbG9yKHRleHRTdHlsZU1vZGVsLmdldFNoYWxsb3coJ2JvcmRlckNvbG9yJyksIG9wdCk7XG4gICAgdGV4dFN0eWxlLnRleHRCb3JkZXJXaWR0aCA9IHRleHRTdHlsZU1vZGVsLmdldFNoYWxsb3coJ2JvcmRlcldpZHRoJyk7XG4gICAgdGV4dFN0eWxlLnRleHRCb3JkZXJSYWRpdXMgPSB0ZXh0U3R5bGVNb2RlbC5nZXRTaGFsbG93KCdib3JkZXJSYWRpdXMnKTtcbiAgICB0ZXh0U3R5bGUudGV4dEJveFNoYWRvd0NvbG9yID0gdGV4dFN0eWxlTW9kZWwuZ2V0U2hhbGxvdygnc2hhZG93Q29sb3InKTtcbiAgICB0ZXh0U3R5bGUudGV4dEJveFNoYWRvd0JsdXIgPSB0ZXh0U3R5bGVNb2RlbC5nZXRTaGFsbG93KCdzaGFkb3dCbHVyJyk7XG4gICAgdGV4dFN0eWxlLnRleHRCb3hTaGFkb3dPZmZzZXRYID0gdGV4dFN0eWxlTW9kZWwuZ2V0U2hhbGxvdygnc2hhZG93T2Zmc2V0WCcpO1xuICAgIHRleHRTdHlsZS50ZXh0Qm94U2hhZG93T2Zmc2V0WSA9IHRleHRTdHlsZU1vZGVsLmdldFNoYWxsb3coJ3NoYWRvd09mZnNldFknKTtcbiAgfVxuXG4gIHRleHRTdHlsZS50ZXh0U2hhZG93Q29sb3IgPSB0ZXh0U3R5bGVNb2RlbC5nZXRTaGFsbG93KCd0ZXh0U2hhZG93Q29sb3InKSB8fCBnbG9iYWxUZXh0U3R5bGUudGV4dFNoYWRvd0NvbG9yO1xuICB0ZXh0U3R5bGUudGV4dFNoYWRvd0JsdXIgPSB0ZXh0U3R5bGVNb2RlbC5nZXRTaGFsbG93KCd0ZXh0U2hhZG93Qmx1cicpIHx8IGdsb2JhbFRleHRTdHlsZS50ZXh0U2hhZG93Qmx1cjtcbiAgdGV4dFN0eWxlLnRleHRTaGFkb3dPZmZzZXRYID0gdGV4dFN0eWxlTW9kZWwuZ2V0U2hhbGxvdygndGV4dFNoYWRvd09mZnNldFgnKSB8fCBnbG9iYWxUZXh0U3R5bGUudGV4dFNoYWRvd09mZnNldFg7XG4gIHRleHRTdHlsZS50ZXh0U2hhZG93T2Zmc2V0WSA9IHRleHRTdHlsZU1vZGVsLmdldFNoYWxsb3coJ3RleHRTaGFkb3dPZmZzZXRZJykgfHwgZ2xvYmFsVGV4dFN0eWxlLnRleHRTaGFkb3dPZmZzZXRZO1xufVxuXG5mdW5jdGlvbiBnZXRBdXRvQ29sb3IoY29sb3IsIG9wdCkge1xuICByZXR1cm4gY29sb3IgIT09ICdhdXRvJyA/IGNvbG9yIDogb3B0ICYmIG9wdC5hdXRvQ29sb3IgPyBvcHQuYXV0b0NvbG9yIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gYXBwbHlJbnNpZGVTdHlsZSh0ZXh0U3R5bGUsIHRleHRQb3NpdGlvbiwgb3B0KSB7XG4gIHZhciB1c2VJbnNpZGVTdHlsZSA9IG9wdC51c2VJbnNpZGVTdHlsZTtcbiAgdmFyIGluc2lkZVJvbGxiYWNrO1xuXG4gIGlmICh0ZXh0U3R5bGUudGV4dEZpbGwgPT0gbnVsbCAmJiB1c2VJbnNpZGVTdHlsZSAhPT0gZmFsc2UgJiYgKHVzZUluc2lkZVN0eWxlID09PSB0cnVlIHx8IG9wdC5pc1JlY3RUZXh0ICYmIHRleHRQb3NpdGlvbiAvLyB0ZXh0UG9zaXRpb24gY2FuIGJlIFsxMCwgMzBdXG4gICYmIHR5cGVvZiB0ZXh0UG9zaXRpb24gPT09ICdzdHJpbmcnICYmIHRleHRQb3NpdGlvbi5pbmRleE9mKCdpbnNpZGUnKSA+PSAwKSkge1xuICAgIGluc2lkZVJvbGxiYWNrID0ge1xuICAgICAgdGV4dEZpbGw6IG51bGwsXG4gICAgICB0ZXh0U3Ryb2tlOiB0ZXh0U3R5bGUudGV4dFN0cm9rZSxcbiAgICAgIHRleHRTdHJva2VXaWR0aDogdGV4dFN0eWxlLnRleHRTdHJva2VXaWR0aFxuICAgIH07XG4gICAgdGV4dFN0eWxlLnRleHRGaWxsID0gJyNmZmYnOyAvLyBDb25zaWRlciB0ZXh0IHdpdGggI2ZmZiBvdmVyZmxvdyBpdHMgY29udGFpbmVyLlxuXG4gICAgaWYgKHRleHRTdHlsZS50ZXh0U3Ryb2tlID09IG51bGwpIHtcbiAgICAgIHRleHRTdHlsZS50ZXh0U3Ryb2tlID0gb3B0LmF1dG9Db2xvcjtcbiAgICAgIHRleHRTdHlsZS50ZXh0U3Ryb2tlV2lkdGggPT0gbnVsbCAmJiAodGV4dFN0eWxlLnRleHRTdHJva2VXaWR0aCA9IDIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbnNpZGVSb2xsYmFjaztcbn1cblxuZnVuY3Rpb24gcm9sbGJhY2tJbnNpZGVTdHlsZShzdHlsZSkge1xuICB2YXIgaW5zaWRlUm9sbGJhY2sgPSBzdHlsZS5pbnNpZGVSb2xsYmFjaztcblxuICBpZiAoaW5zaWRlUm9sbGJhY2spIHtcbiAgICBzdHlsZS50ZXh0RmlsbCA9IGluc2lkZVJvbGxiYWNrLnRleHRGaWxsO1xuICAgIHN0eWxlLnRleHRTdHJva2UgPSBpbnNpZGVSb2xsYmFjay50ZXh0U3Ryb2tlO1xuICAgIHN0eWxlLnRleHRTdHJva2VXaWR0aCA9IGluc2lkZVJvbGxiYWNrLnRleHRTdHJva2VXaWR0aDtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRGb250KG9wdCwgZWNNb2RlbCkge1xuICAvLyBlY01vZGVsIG9yIGRlZmF1bHQgdGV4dCBzdHlsZSBtb2RlbC5cbiAgdmFyIGdUZXh0U3R5bGVNb2RlbCA9IGVjTW9kZWwgfHwgZWNNb2RlbC5nZXRNb2RlbCgndGV4dFN0eWxlJyk7XG4gIHJldHVybiB6clV0aWwudHJpbShbLy8gRklYTUUgaW4gbm9kZS1jYW52YXMgZm9udFdlaWdodCBpcyBiZWZvcmUgZm9udFN0eWxlXG4gIG9wdC5mb250U3R5bGUgfHwgZ1RleHRTdHlsZU1vZGVsICYmIGdUZXh0U3R5bGVNb2RlbC5nZXRTaGFsbG93KCdmb250U3R5bGUnKSB8fCAnJywgb3B0LmZvbnRXZWlnaHQgfHwgZ1RleHRTdHlsZU1vZGVsICYmIGdUZXh0U3R5bGVNb2RlbC5nZXRTaGFsbG93KCdmb250V2VpZ2h0JykgfHwgJycsIChvcHQuZm9udFNpemUgfHwgZ1RleHRTdHlsZU1vZGVsICYmIGdUZXh0U3R5bGVNb2RlbC5nZXRTaGFsbG93KCdmb250U2l6ZScpIHx8IDEyKSArICdweCcsIG9wdC5mb250RmFtaWx5IHx8IGdUZXh0U3R5bGVNb2RlbCAmJiBnVGV4dFN0eWxlTW9kZWwuZ2V0U2hhbGxvdygnZm9udEZhbWlseScpIHx8ICdzYW5zLXNlcmlmJ10uam9pbignICcpKTtcbn1cblxuZnVuY3Rpb24gYW5pbWF0ZU9yU2V0UHJvcHMoaXNVcGRhdGUsIGVsLCBwcm9wcywgYW5pbWF0YWJsZU1vZGVsLCBkYXRhSW5kZXgsIGNiKSB7XG4gIGlmICh0eXBlb2YgZGF0YUluZGV4ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBkYXRhSW5kZXg7XG4gICAgZGF0YUluZGV4ID0gbnVsbDtcbiAgfSAvLyBEbyBub3QgY2hlY2sgJ2FuaW1hdGlvbicgcHJvcGVydHkgZGlyZWN0bHkgaGVyZS4gQ29uc2lkZXIgdGhpcyBjYXNlOlxuICAvLyBhbmltYXRpb24gbW9kZWwgaXMgYW4gYGl0ZW1Nb2RlbGAsIHdob3NlIGRvZXMgbm90IGhhdmUgYGlzQW5pbWF0aW9uRW5hYmxlZGBcbiAgLy8gYnV0IGl0cyBwYXJlbnQgbW9kZWwgKGBzZXJpZXNNb2RlbGApIGRvZXMuXG5cblxuICB2YXIgYW5pbWF0aW9uRW5hYmxlZCA9IGFuaW1hdGFibGVNb2RlbCAmJiBhbmltYXRhYmxlTW9kZWwuaXNBbmltYXRpb25FbmFibGVkKCk7XG5cbiAgaWYgKGFuaW1hdGlvbkVuYWJsZWQpIHtcbiAgICB2YXIgcG9zdGZpeCA9IGlzVXBkYXRlID8gJ1VwZGF0ZScgOiAnJztcbiAgICB2YXIgZHVyYXRpb24gPSBhbmltYXRhYmxlTW9kZWwuZ2V0U2hhbGxvdygnYW5pbWF0aW9uRHVyYXRpb24nICsgcG9zdGZpeCk7XG4gICAgdmFyIGFuaW1hdGlvbkVhc2luZyA9IGFuaW1hdGFibGVNb2RlbC5nZXRTaGFsbG93KCdhbmltYXRpb25FYXNpbmcnICsgcG9zdGZpeCk7XG4gICAgdmFyIGFuaW1hdGlvbkRlbGF5ID0gYW5pbWF0YWJsZU1vZGVsLmdldFNoYWxsb3coJ2FuaW1hdGlvbkRlbGF5JyArIHBvc3RmaXgpO1xuXG4gICAgaWYgKHR5cGVvZiBhbmltYXRpb25EZWxheSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYW5pbWF0aW9uRGVsYXkgPSBhbmltYXRpb25EZWxheShkYXRhSW5kZXgsIGFuaW1hdGFibGVNb2RlbC5nZXRBbmltYXRpb25EZWxheVBhcmFtcyA/IGFuaW1hdGFibGVNb2RlbC5nZXRBbmltYXRpb25EZWxheVBhcmFtcyhlbCwgZGF0YUluZGV4KSA6IG51bGwpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZHVyYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGR1cmF0aW9uID0gZHVyYXRpb24oZGF0YUluZGV4KTtcbiAgICB9XG5cbiAgICBkdXJhdGlvbiA+IDAgPyBlbC5hbmltYXRlVG8ocHJvcHMsIGR1cmF0aW9uLCBhbmltYXRpb25EZWxheSB8fCAwLCBhbmltYXRpb25FYXNpbmcsIGNiLCAhIWNiKSA6IChlbC5zdG9wQW5pbWF0aW9uKCksIGVsLmF0dHIocHJvcHMpLCBjYiAmJiBjYigpKTtcbiAgfSBlbHNlIHtcbiAgICBlbC5zdG9wQW5pbWF0aW9uKCk7XG4gICAgZWwuYXR0cihwcm9wcyk7XG4gICAgY2IgJiYgY2IoKTtcbiAgfVxufVxuLyoqXG4gKiBVcGRhdGUgZ3JhcGhpYyBlbGVtZW50IHByb3BlcnRpZXMgd2l0aCBvciB3aXRob3V0IGFuaW1hdGlvbiBhY2NvcmRpbmcgdG8gdGhlXG4gKiBjb25maWd1cmF0aW9uIGluIHNlcmllcy5cbiAqXG4gKiBDYXV0aW9uOiB0aGlzIG1ldGhvZCB3aWxsIHN0b3AgcHJldmlvdXMgYW5pbWF0aW9uLlxuICogU28gaWYgZG8gbm90IHVzZSB0aGlzIG1ldGhvZCB0byBvbmUgZWxlbWVudCB0d2ljZSBiZWZvcmVcbiAqIGFuaW1hdGlvbiBzdGFydHMsIHVubGVzcyB5b3Uga25vdyB3aGF0IHlvdSBhcmUgZG9pbmcuXG4gKlxuICogQHBhcmFtIHttb2R1bGU6enJlbmRlci9FbGVtZW50fSBlbFxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL21vZGVsL01vZGVsfSBbYW5pbWF0YWJsZU1vZGVsXVxuICogQHBhcmFtIHtudW1iZXJ9IFtkYXRhSW5kZXhdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2JdXG4gKiBAZXhhbXBsZVxuICogICAgIGdyYXBoaWMudXBkYXRlUHJvcHMoZWwsIHtcbiAqICAgICAgICAgcG9zaXRpb246IFsxMDAsIDEwMF1cbiAqICAgICB9LCBzZXJpZXNNb2RlbCwgZGF0YUluZGV4LCBmdW5jdGlvbiAoKSB7IGNvbnNvbGUubG9nKCdBbmltYXRpb24gZG9uZSEnKTsgfSk7XG4gKiAgICAgLy8gT3JcbiAqICAgICBncmFwaGljLnVwZGF0ZVByb3BzKGVsLCB7XG4gKiAgICAgICAgIHBvc2l0aW9uOiBbMTAwLCAxMDBdXG4gKiAgICAgfSwgc2VyaWVzTW9kZWwsIGZ1bmN0aW9uICgpIHsgY29uc29sZS5sb2coJ0FuaW1hdGlvbiBkb25lIScpOyB9KTtcbiAqL1xuXG5cbmZ1bmN0aW9uIHVwZGF0ZVByb3BzKGVsLCBwcm9wcywgYW5pbWF0YWJsZU1vZGVsLCBkYXRhSW5kZXgsIGNiKSB7XG4gIGFuaW1hdGVPclNldFByb3BzKHRydWUsIGVsLCBwcm9wcywgYW5pbWF0YWJsZU1vZGVsLCBkYXRhSW5kZXgsIGNiKTtcbn1cbi8qKlxuICogSW5pdCBncmFwaGljIGVsZW1lbnQgcHJvcGVydGllcyB3aXRoIG9yIHdpdGhvdXQgYW5pbWF0aW9uIGFjY29yZGluZyB0byB0aGVcbiAqIGNvbmZpZ3VyYXRpb24gaW4gc2VyaWVzLlxuICpcbiAqIENhdXRpb246IHRoaXMgbWV0aG9kIHdpbGwgc3RvcCBwcmV2aW91cyBhbmltYXRpb24uXG4gKiBTbyBpZiBkbyBub3QgdXNlIHRoaXMgbWV0aG9kIHRvIG9uZSBlbGVtZW50IHR3aWNlIGJlZm9yZVxuICogYW5pbWF0aW9uIHN0YXJ0cywgdW5sZXNzIHlvdSBrbm93IHdoYXQgeW91IGFyZSBkb2luZy5cbiAqXG4gKiBAcGFyYW0ge21vZHVsZTp6cmVuZGVyL0VsZW1lbnR9IGVsXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHNcbiAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvbW9kZWwvTW9kZWx9IFthbmltYXRhYmxlTW9kZWxdXG4gKiBAcGFyYW0ge251bWJlcn0gW2RhdGFJbmRleF1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNiXG4gKi9cblxuXG5mdW5jdGlvbiBpbml0UHJvcHMoZWwsIHByb3BzLCBhbmltYXRhYmxlTW9kZWwsIGRhdGFJbmRleCwgY2IpIHtcbiAgYW5pbWF0ZU9yU2V0UHJvcHMoZmFsc2UsIGVsLCBwcm9wcywgYW5pbWF0YWJsZU1vZGVsLCBkYXRhSW5kZXgsIGNiKTtcbn1cbi8qKlxuICogR2V0IHRyYW5zZm9ybSBtYXRyaXggb2YgdGFyZ2V0IChwYXJhbSB0YXJnZXQpLFxuICogaW4gY29vcmRpbmF0ZSBvZiBpdHMgYW5jZXN0b3IgKHBhcmFtIGFuY2VzdG9yKVxuICpcbiAqIEBwYXJhbSB7bW9kdWxlOnpyZW5kZXIvbWl4aW4vVHJhbnNmb3JtYWJsZX0gdGFyZ2V0XG4gKiBAcGFyYW0ge21vZHVsZTp6cmVuZGVyL21peGluL1RyYW5zZm9ybWFibGV9IFthbmNlc3Rvcl1cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFRyYW5zZm9ybSh0YXJnZXQsIGFuY2VzdG9yKSB7XG4gIHZhciBtYXQgPSBtYXRyaXguaWRlbnRpdHkoW10pO1xuXG4gIHdoaWxlICh0YXJnZXQgJiYgdGFyZ2V0ICE9PSBhbmNlc3Rvcikge1xuICAgIG1hdHJpeC5tdWwobWF0LCB0YXJnZXQuZ2V0TG9jYWxUcmFuc2Zvcm0oKSwgbWF0KTtcbiAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIG1hdDtcbn1cbi8qKlxuICogQXBwbHkgdHJhbnNmb3JtIHRvIGFuIHZlcnRleC5cbiAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IHRhcmdldCBbeCwgeV1cbiAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj58VHlwZWRBcnJheS48bnVtYmVyPnxPYmplY3R9IHRyYW5zZm9ybSBDYW4gYmU6XG4gKiAgICAgICsgVHJhbnNmb3JtIG1hdHJpeDogbGlrZSBbMSwgMCwgMCwgMSwgMCwgMF1cbiAqICAgICAgKyB7cG9zaXRpb24sIHJvdGF0aW9uLCBzY2FsZX0sIHRoZSBzYW1lIGFzIGB6cmVuZGVyL1RyYW5zZm9ybWFibGVgLlxuICogQHBhcmFtIHtib29sZWFuPX0gaW52ZXJ0IFdoZXRoZXIgdXNlIGludmVydCBtYXRyaXguXG4gKiBAcmV0dXJuIHtBcnJheS48bnVtYmVyPn0gW3gsIHldXG4gKi9cblxuXG5mdW5jdGlvbiBhcHBseVRyYW5zZm9ybSh0YXJnZXQsIHRyYW5zZm9ybSwgaW52ZXJ0KSB7XG4gIGlmICh0cmFuc2Zvcm0gJiYgIXpyVXRpbC5pc0FycmF5TGlrZSh0cmFuc2Zvcm0pKSB7XG4gICAgdHJhbnNmb3JtID0gVHJhbnNmb3JtYWJsZS5nZXRMb2NhbFRyYW5zZm9ybSh0cmFuc2Zvcm0pO1xuICB9XG5cbiAgaWYgKGludmVydCkge1xuICAgIHRyYW5zZm9ybSA9IG1hdHJpeC5pbnZlcnQoW10sIHRyYW5zZm9ybSk7XG4gIH1cblxuICByZXR1cm4gdmVjdG9yLmFwcGx5VHJhbnNmb3JtKFtdLCB0YXJnZXQsIHRyYW5zZm9ybSk7XG59XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXJlY3Rpb24gJ2xlZnQnICdyaWdodCcgJ3RvcCcgJ2JvdHRvbSdcbiAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IHRyYW5zZm9ybSBUcmFuc2Zvcm0gbWF0cml4OiBsaWtlIFsxLCAwLCAwLCAxLCAwLCAwXVxuICogQHBhcmFtIHtib29sZWFuPX0gaW52ZXJ0IFdoZXRoZXIgdXNlIGludmVydCBtYXRyaXguXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRyYW5zZm9ybWVkIGRpcmVjdGlvbi4gJ2xlZnQnICdyaWdodCcgJ3RvcCcgJ2JvdHRvbSdcbiAqL1xuXG5cbmZ1bmN0aW9uIHRyYW5zZm9ybURpcmVjdGlvbihkaXJlY3Rpb24sIHRyYW5zZm9ybSwgaW52ZXJ0KSB7XG4gIC8vIFBpY2sgYSBiYXNlLCBlbnN1cmUgdGhhdCB0cmFuc2Zvcm0gcmVzdWx0IHdpbGwgbm90IGJlICgwLCAwKS5cbiAgdmFyIGhCYXNlID0gdHJhbnNmb3JtWzRdID09PSAwIHx8IHRyYW5zZm9ybVs1XSA9PT0gMCB8fCB0cmFuc2Zvcm1bMF0gPT09IDAgPyAxIDogTWF0aC5hYnMoMiAqIHRyYW5zZm9ybVs0XSAvIHRyYW5zZm9ybVswXSk7XG4gIHZhciB2QmFzZSA9IHRyYW5zZm9ybVs0XSA9PT0gMCB8fCB0cmFuc2Zvcm1bNV0gPT09IDAgfHwgdHJhbnNmb3JtWzJdID09PSAwID8gMSA6IE1hdGguYWJzKDIgKiB0cmFuc2Zvcm1bNF0gLyB0cmFuc2Zvcm1bMl0pO1xuICB2YXIgdmVydGV4ID0gW2RpcmVjdGlvbiA9PT0gJ2xlZnQnID8gLWhCYXNlIDogZGlyZWN0aW9uID09PSAncmlnaHQnID8gaEJhc2UgOiAwLCBkaXJlY3Rpb24gPT09ICd0b3AnID8gLXZCYXNlIDogZGlyZWN0aW9uID09PSAnYm90dG9tJyA/IHZCYXNlIDogMF07XG4gIHZlcnRleCA9IGFwcGx5VHJhbnNmb3JtKHZlcnRleCwgdHJhbnNmb3JtLCBpbnZlcnQpO1xuICByZXR1cm4gTWF0aC5hYnModmVydGV4WzBdKSA+IE1hdGguYWJzKHZlcnRleFsxXSkgPyB2ZXJ0ZXhbMF0gPiAwID8gJ3JpZ2h0JyA6ICdsZWZ0JyA6IHZlcnRleFsxXSA+IDAgPyAnYm90dG9tJyA6ICd0b3AnO1xufVxuLyoqXG4gKiBBcHBseSBncm91cCB0cmFuc2l0aW9uIGFuaW1hdGlvbiBmcm9tIGcxIHRvIGcyLlxuICogSWYgbm8gYW5pbWF0YWJsZU1vZGVsLCBubyBhbmltYXRpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBncm91cFRyYW5zaXRpb24oZzEsIGcyLCBhbmltYXRhYmxlTW9kZWwsIGNiKSB7XG4gIGlmICghZzEgfHwgIWcyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RWxNYXAoZykge1xuICAgIHZhciBlbE1hcCA9IHt9O1xuICAgIGcudHJhdmVyc2UoZnVuY3Rpb24gKGVsKSB7XG4gICAgICBpZiAoIWVsLmlzR3JvdXAgJiYgZWwuYW5pZCkge1xuICAgICAgICBlbE1hcFtlbC5hbmlkXSA9IGVsO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBlbE1hcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEFuaW1hdGFibGVQcm9wcyhlbCkge1xuICAgIHZhciBvYmogPSB7XG4gICAgICBwb3NpdGlvbjogdmVjdG9yLmNsb25lKGVsLnBvc2l0aW9uKSxcbiAgICAgIHJvdGF0aW9uOiBlbC5yb3RhdGlvblxuICAgIH07XG5cbiAgICBpZiAoZWwuc2hhcGUpIHtcbiAgICAgIG9iai5zaGFwZSA9IHpyVXRpbC5leHRlbmQoe30sIGVsLnNoYXBlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgdmFyIGVsTWFwMSA9IGdldEVsTWFwKGcxKTtcbiAgZzIudHJhdmVyc2UoZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKCFlbC5pc0dyb3VwICYmIGVsLmFuaWQpIHtcbiAgICAgIHZhciBvbGRFbCA9IGVsTWFwMVtlbC5hbmlkXTtcblxuICAgICAgaWYgKG9sZEVsKSB7XG4gICAgICAgIHZhciBuZXdQcm9wID0gZ2V0QW5pbWF0YWJsZVByb3BzKGVsKTtcbiAgICAgICAgZWwuYXR0cihnZXRBbmltYXRhYmxlUHJvcHMob2xkRWwpKTtcbiAgICAgICAgdXBkYXRlUHJvcHMoZWwsIG5ld1Byb3AsIGFuaW1hdGFibGVNb2RlbCwgZWwuZGF0YUluZGV4KTtcbiAgICAgIH0gLy8gZWxzZSB7XG4gICAgICAvLyAgICAgaWYgKGVsLnByZXZpb3VzUHJvcHMpIHtcbiAgICAgIC8vICAgICAgICAgZ3JhcGhpYy51cGRhdGVQcm9wc1xuICAgICAgLy8gICAgIH1cbiAgICAgIC8vIH1cblxuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIEBwYXJhbSB7QXJyYXkuPEFycmF5LjxudW1iZXI+Pn0gcG9pbnRzIExpa2U6IFtbMjMsIDQ0XSwgWzUzLCA2Nl0sIC4uLl1cbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0IHt4LCB5LCB3aWR0aCwgaGVpZ2h0fVxuICogQHJldHVybiB7QXJyYXkuPEFycmF5LjxudW1iZXI+Pn0gQSBuZXcgY2xpcHBlZCBwb2ludHMuXG4gKi9cblxuXG5mdW5jdGlvbiBjbGlwUG9pbnRzQnlSZWN0KHBvaW50cywgcmVjdCkge1xuICByZXR1cm4genJVdGlsLm1hcChwb2ludHMsIGZ1bmN0aW9uIChwb2ludCkge1xuICAgIHZhciB4ID0gcG9pbnRbMF07XG4gICAgeCA9IG1hdGhNYXgoeCwgcmVjdC54KTtcbiAgICB4ID0gbWF0aE1pbih4LCByZWN0LnggKyByZWN0LndpZHRoKTtcbiAgICB2YXIgeSA9IHBvaW50WzFdO1xuICAgIHkgPSBtYXRoTWF4KHksIHJlY3QueSk7XG4gICAgeSA9IG1hdGhNaW4oeSwgcmVjdC55ICsgcmVjdC5oZWlnaHQpO1xuICAgIHJldHVybiBbeCwgeV07XG4gIH0pO1xufVxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0UmVjdCB7eCwgeSwgd2lkdGgsIGhlaWdodH1cbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0IHt4LCB5LCB3aWR0aCwgaGVpZ2h0fVxuICogQHJldHVybiB7T2JqZWN0fSBBIG5ldyBjbGlwcGVkIHJlY3QuIElmIHJlY3Qgc2l6ZSBhcmUgbmVnYXRpdmUsIHJldHVybiB1bmRlZmluZWQuXG4gKi9cblxuXG5mdW5jdGlvbiBjbGlwUmVjdEJ5UmVjdCh0YXJnZXRSZWN0LCByZWN0KSB7XG4gIHZhciB4ID0gbWF0aE1heCh0YXJnZXRSZWN0LngsIHJlY3QueCk7XG4gIHZhciB4MiA9IG1hdGhNaW4odGFyZ2V0UmVjdC54ICsgdGFyZ2V0UmVjdC53aWR0aCwgcmVjdC54ICsgcmVjdC53aWR0aCk7XG4gIHZhciB5ID0gbWF0aE1heCh0YXJnZXRSZWN0LnksIHJlY3QueSk7XG4gIHZhciB5MiA9IG1hdGhNaW4odGFyZ2V0UmVjdC55ICsgdGFyZ2V0UmVjdC5oZWlnaHQsIHJlY3QueSArIHJlY3QuaGVpZ2h0KTtcblxuICBpZiAoeDIgPj0geCAmJiB5MiA+PSB5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHgsXG4gICAgICB5OiB5LFxuICAgICAgd2lkdGg6IHgyIC0geCxcbiAgICAgIGhlaWdodDogeTIgLSB5XG4gICAgfTtcbiAgfVxufVxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWNvblN0ciBTdXBwb3J0ICdpbWFnZTovLycgb3IgJ3BhdGg6Ly8nIG9yIGRpcmVjdCBzdmcgcGF0aC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0XSBQcm9wZXJ0aWVzIG9mIGBtb2R1bGU6enJlbmRlci9FbGVtZW50YCwgZXhjZXB0IGBzdHlsZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlY3RdIHt4LCB5LCB3aWR0aCwgaGVpZ2h0fVxuICogQHJldHVybiB7bW9kdWxlOnpyZW5kZXIvRWxlbWVudH0gSWNvbiBwYXRoIG9yIGltYWdlIGVsZW1lbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVJY29uKGljb25TdHIsIG9wdCwgcmVjdCkge1xuICBvcHQgPSB6clV0aWwuZXh0ZW5kKHtcbiAgICByZWN0SG92ZXI6IHRydWVcbiAgfSwgb3B0KTtcbiAgdmFyIHN0eWxlID0gb3B0LnN0eWxlID0ge1xuICAgIHN0cm9rZU5vU2NhbGU6IHRydWVcbiAgfTtcbiAgcmVjdCA9IHJlY3QgfHwge1xuICAgIHg6IC0xLFxuICAgIHk6IC0xLFxuICAgIHdpZHRoOiAyLFxuICAgIGhlaWdodDogMlxuICB9O1xuXG4gIGlmIChpY29uU3RyKSB7XG4gICAgcmV0dXJuIGljb25TdHIuaW5kZXhPZignaW1hZ2U6Ly8nKSA9PT0gMCA/IChzdHlsZS5pbWFnZSA9IGljb25TdHIuc2xpY2UoOCksIHpyVXRpbC5kZWZhdWx0cyhzdHlsZSwgcmVjdCksIG5ldyBaSW1hZ2Uob3B0KSkgOiBtYWtlUGF0aChpY29uU3RyLnJlcGxhY2UoJ3BhdGg6Ly8nLCAnJyksIG9wdCwgcmVjdCwgJ2NlbnRlcicpO1xuICB9XG59XG5cbmV4cG9ydHMuZXh0ZW5kU2hhcGUgPSBleHRlbmRTaGFwZTtcbmV4cG9ydHMuZXh0ZW5kUGF0aCA9IGV4dGVuZFBhdGg7XG5leHBvcnRzLm1ha2VQYXRoID0gbWFrZVBhdGg7XG5leHBvcnRzLm1ha2VJbWFnZSA9IG1ha2VJbWFnZTtcbmV4cG9ydHMubWVyZ2VQYXRoID0gbWVyZ2VQYXRoO1xuZXhwb3J0cy5yZXNpemVQYXRoID0gcmVzaXplUGF0aDtcbmV4cG9ydHMuc3ViUGl4ZWxPcHRpbWl6ZUxpbmUgPSBzdWJQaXhlbE9wdGltaXplTGluZTtcbmV4cG9ydHMuc3ViUGl4ZWxPcHRpbWl6ZVJlY3QgPSBzdWJQaXhlbE9wdGltaXplUmVjdDtcbmV4cG9ydHMuc3ViUGl4ZWxPcHRpbWl6ZSA9IHN1YlBpeGVsT3B0aW1pemU7XG5leHBvcnRzLnNldEhvdmVyU3R5bGUgPSBzZXRIb3ZlclN0eWxlO1xuZXhwb3J0cy5zZXRMYWJlbFN0eWxlID0gc2V0TGFiZWxTdHlsZTtcbmV4cG9ydHMuc2V0VGV4dFN0eWxlID0gc2V0VGV4dFN0eWxlO1xuZXhwb3J0cy5zZXRUZXh0ID0gc2V0VGV4dDtcbmV4cG9ydHMuZ2V0Rm9udCA9IGdldEZvbnQ7XG5leHBvcnRzLnVwZGF0ZVByb3BzID0gdXBkYXRlUHJvcHM7XG5leHBvcnRzLmluaXRQcm9wcyA9IGluaXRQcm9wcztcbmV4cG9ydHMuZ2V0VHJhbnNmb3JtID0gZ2V0VHJhbnNmb3JtO1xuZXhwb3J0cy5hcHBseVRyYW5zZm9ybSA9IGFwcGx5VHJhbnNmb3JtO1xuZXhwb3J0cy50cmFuc2Zvcm1EaXJlY3Rpb24gPSB0cmFuc2Zvcm1EaXJlY3Rpb247XG5leHBvcnRzLmdyb3VwVHJhbnNpdGlvbiA9IGdyb3VwVHJhbnNpdGlvbjtcbmV4cG9ydHMuY2xpcFBvaW50c0J5UmVjdCA9IGNsaXBQb2ludHNCeVJlY3Q7XG5leHBvcnRzLmNsaXBSZWN0QnlSZWN0ID0gY2xpcFJlY3RCeVJlY3Q7XG5leHBvcnRzLmNyZWF0ZUljb24gPSBjcmVhdGVJY29uOyIsInZhciB6clV0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgQm91bmRpbmdSZWN0ID0gcmVxdWlyZShcInpyZW5kZXIvbGliL2NvcmUvQm91bmRpbmdSZWN0XCIpO1xuXG52YXIgX251bWJlciA9IHJlcXVpcmUoXCIuL251bWJlclwiKTtcblxudmFyIHBhcnNlUGVyY2VudCA9IF9udW1iZXIucGFyc2VQZXJjZW50O1xuXG52YXIgZm9ybWF0VXRpbCA9IHJlcXVpcmUoXCIuL2Zvcm1hdFwiKTtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuLy8gTGF5b3V0IGhlbHBlcnMgZm9yIGVhY2ggY29tcG9uZW50IHBvc2l0aW9uaW5nXG52YXIgZWFjaCA9IHpyVXRpbC5lYWNoO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cblxudmFyIExPQ0FUSU9OX1BBUkFNUyA9IFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJywgJ3dpZHRoJywgJ2hlaWdodCddO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cblxudmFyIEhWX05BTUVTID0gW1snd2lkdGgnLCAnbGVmdCcsICdyaWdodCddLCBbJ2hlaWdodCcsICd0b3AnLCAnYm90dG9tJ11dO1xuXG5mdW5jdGlvbiBib3hMYXlvdXQob3JpZW50LCBncm91cCwgZ2FwLCBtYXhXaWR0aCwgbWF4SGVpZ2h0KSB7XG4gIHZhciB4ID0gMDtcbiAgdmFyIHkgPSAwO1xuXG4gIGlmIChtYXhXaWR0aCA9PSBudWxsKSB7XG4gICAgbWF4V2lkdGggPSBJbmZpbml0eTtcbiAgfVxuXG4gIGlmIChtYXhIZWlnaHQgPT0gbnVsbCkge1xuICAgIG1heEhlaWdodCA9IEluZmluaXR5O1xuICB9XG5cbiAgdmFyIGN1cnJlbnRMaW5lTWF4U2l6ZSA9IDA7XG4gIGdyb3VwLmVhY2hDaGlsZChmdW5jdGlvbiAoY2hpbGQsIGlkeCkge1xuICAgIHZhciBwb3NpdGlvbiA9IGNoaWxkLnBvc2l0aW9uO1xuICAgIHZhciByZWN0ID0gY2hpbGQuZ2V0Qm91bmRpbmdSZWN0KCk7XG4gICAgdmFyIG5leHRDaGlsZCA9IGdyb3VwLmNoaWxkQXQoaWR4ICsgMSk7XG4gICAgdmFyIG5leHRDaGlsZFJlY3QgPSBuZXh0Q2hpbGQgJiYgbmV4dENoaWxkLmdldEJvdW5kaW5nUmVjdCgpO1xuICAgIHZhciBuZXh0WDtcbiAgICB2YXIgbmV4dFk7XG5cbiAgICBpZiAob3JpZW50ID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgIHZhciBtb3ZlWCA9IHJlY3Qud2lkdGggKyAobmV4dENoaWxkUmVjdCA/IC1uZXh0Q2hpbGRSZWN0LnggKyByZWN0LnggOiAwKTtcbiAgICAgIG5leHRYID0geCArIG1vdmVYOyAvLyBXcmFwIHdoZW4gd2lkdGggZXhjZWVkcyBtYXhXaWR0aCBvciBtZWV0IGEgYG5ld2xpbmVgIGdyb3VwXG4gICAgICAvLyBGSVhNRSBjb21wYXJlIGJlZm9yZSBhZGRpbmcgZ2FwP1xuXG4gICAgICBpZiAobmV4dFggPiBtYXhXaWR0aCB8fCBjaGlsZC5uZXdsaW5lKSB7XG4gICAgICAgIHggPSAwO1xuICAgICAgICBuZXh0WCA9IG1vdmVYO1xuICAgICAgICB5ICs9IGN1cnJlbnRMaW5lTWF4U2l6ZSArIGdhcDtcbiAgICAgICAgY3VycmVudExpbmVNYXhTaXplID0gcmVjdC5oZWlnaHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGSVhNRTogY29uc2lkZXIgcmVjdC55IGlzIG5vdCBgMGA/XG4gICAgICAgIGN1cnJlbnRMaW5lTWF4U2l6ZSA9IE1hdGgubWF4KGN1cnJlbnRMaW5lTWF4U2l6ZSwgcmVjdC5oZWlnaHQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbW92ZVkgPSByZWN0LmhlaWdodCArIChuZXh0Q2hpbGRSZWN0ID8gLW5leHRDaGlsZFJlY3QueSArIHJlY3QueSA6IDApO1xuICAgICAgbmV4dFkgPSB5ICsgbW92ZVk7IC8vIFdyYXAgd2hlbiB3aWR0aCBleGNlZWRzIG1heEhlaWdodCBvciBtZWV0IGEgYG5ld2xpbmVgIGdyb3VwXG5cbiAgICAgIGlmIChuZXh0WSA+IG1heEhlaWdodCB8fCBjaGlsZC5uZXdsaW5lKSB7XG4gICAgICAgIHggKz0gY3VycmVudExpbmVNYXhTaXplICsgZ2FwO1xuICAgICAgICB5ID0gMDtcbiAgICAgICAgbmV4dFkgPSBtb3ZlWTtcbiAgICAgICAgY3VycmVudExpbmVNYXhTaXplID0gcmVjdC53aWR0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnRMaW5lTWF4U2l6ZSA9IE1hdGgubWF4KGN1cnJlbnRMaW5lTWF4U2l6ZSwgcmVjdC53aWR0aCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkLm5ld2xpbmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwb3NpdGlvblswXSA9IHg7XG4gICAgcG9zaXRpb25bMV0gPSB5O1xuICAgIG9yaWVudCA9PT0gJ2hvcml6b250YWwnID8geCA9IG5leHRYICsgZ2FwIDogeSA9IG5leHRZICsgZ2FwO1xuICB9KTtcbn1cbi8qKlxuICogVkJveCBvciBIQm94IGxheW91dGluZ1xuICogQHBhcmFtIHtzdHJpbmd9IG9yaWVudFxuICogQHBhcmFtIHttb2R1bGU6enJlbmRlci9jb250YWluZXIvR3JvdXB9IGdyb3VwXG4gKiBAcGFyYW0ge251bWJlcn0gZ2FwXG4gKiBAcGFyYW0ge251bWJlcn0gW3dpZHRoPUluZmluaXR5XVxuICogQHBhcmFtIHtudW1iZXJ9IFtoZWlnaHQ9SW5maW5pdHldXG4gKi9cblxuXG52YXIgYm94ID0gYm94TGF5b3V0O1xuLyoqXG4gKiBWQm94IGxheW91dGluZ1xuICogQHBhcmFtIHttb2R1bGU6enJlbmRlci9jb250YWluZXIvR3JvdXB9IGdyb3VwXG4gKiBAcGFyYW0ge251bWJlcn0gZ2FwXG4gKiBAcGFyYW0ge251bWJlcn0gW3dpZHRoPUluZmluaXR5XVxuICogQHBhcmFtIHtudW1iZXJ9IFtoZWlnaHQ9SW5maW5pdHldXG4gKi9cblxudmFyIHZib3ggPSB6clV0aWwuY3VycnkoYm94TGF5b3V0LCAndmVydGljYWwnKTtcbi8qKlxuICogSEJveCBsYXlvdXRpbmdcbiAqIEBwYXJhbSB7bW9kdWxlOnpyZW5kZXIvY29udGFpbmVyL0dyb3VwfSBncm91cFxuICogQHBhcmFtIHtudW1iZXJ9IGdhcFxuICogQHBhcmFtIHtudW1iZXJ9IFt3aWR0aD1JbmZpbml0eV1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbaGVpZ2h0PUluZmluaXR5XVxuICovXG5cbnZhciBoYm94ID0genJVdGlsLmN1cnJ5KGJveExheW91dCwgJ2hvcml6b250YWwnKTtcbi8qKlxuICogSWYgeCBvciB4MiBpcyBub3Qgc3BlY2lmaWVkIG9yICdjZW50ZXInICdsZWZ0JyAncmlnaHQnLFxuICogdGhlIHdpZHRoIHdvdWxkIGJlIGFzIGxvbmcgYXMgcG9zc2libGUuXG4gKiBJZiB5IG9yIHkyIGlzIG5vdCBzcGVjaWZpZWQgb3IgJ21pZGRsZScgJ3RvcCcgJ2JvdHRvbScsXG4gKiB0aGUgaGVpZ2h0IHdvdWxkIGJlIGFzIGxvbmcgYXMgcG9zc2libGUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBvc2l0aW9uSW5mb1xuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBbcG9zaXRpb25JbmZvLnhdXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IFtwb3NpdGlvbkluZm8ueV1cbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gW3Bvc2l0aW9uSW5mby54Ml1cbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gW3Bvc2l0aW9uSW5mby55Ml1cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250YWluZXJSZWN0IHt3aWR0aCwgaGVpZ2h0fVxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBtYXJnaW5cbiAqIEByZXR1cm4ge09iamVjdH0ge3dpZHRoLCBoZWlnaHR9XG4gKi9cblxuZnVuY3Rpb24gZ2V0QXZhaWxhYmxlU2l6ZShwb3NpdGlvbkluZm8sIGNvbnRhaW5lclJlY3QsIG1hcmdpbikge1xuICB2YXIgY29udGFpbmVyV2lkdGggPSBjb250YWluZXJSZWN0LndpZHRoO1xuICB2YXIgY29udGFpbmVySGVpZ2h0ID0gY29udGFpbmVyUmVjdC5oZWlnaHQ7XG4gIHZhciB4ID0gcGFyc2VQZXJjZW50KHBvc2l0aW9uSW5mby54LCBjb250YWluZXJXaWR0aCk7XG4gIHZhciB5ID0gcGFyc2VQZXJjZW50KHBvc2l0aW9uSW5mby55LCBjb250YWluZXJIZWlnaHQpO1xuICB2YXIgeDIgPSBwYXJzZVBlcmNlbnQocG9zaXRpb25JbmZvLngyLCBjb250YWluZXJXaWR0aCk7XG4gIHZhciB5MiA9IHBhcnNlUGVyY2VudChwb3NpdGlvbkluZm8ueTIsIGNvbnRhaW5lckhlaWdodCk7XG4gIChpc05hTih4KSB8fCBpc05hTihwYXJzZUZsb2F0KHBvc2l0aW9uSW5mby54KSkpICYmICh4ID0gMCk7XG4gIChpc05hTih4MikgfHwgaXNOYU4ocGFyc2VGbG9hdChwb3NpdGlvbkluZm8ueDIpKSkgJiYgKHgyID0gY29udGFpbmVyV2lkdGgpO1xuICAoaXNOYU4oeSkgfHwgaXNOYU4ocGFyc2VGbG9hdChwb3NpdGlvbkluZm8ueSkpKSAmJiAoeSA9IDApO1xuICAoaXNOYU4oeTIpIHx8IGlzTmFOKHBhcnNlRmxvYXQocG9zaXRpb25JbmZvLnkyKSkpICYmICh5MiA9IGNvbnRhaW5lckhlaWdodCk7XG4gIG1hcmdpbiA9IGZvcm1hdFV0aWwubm9ybWFsaXplQ3NzQXJyYXkobWFyZ2luIHx8IDApO1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiBNYXRoLm1heCh4MiAtIHggLSBtYXJnaW5bMV0gLSBtYXJnaW5bM10sIDApLFxuICAgIGhlaWdodDogTWF0aC5tYXgoeTIgLSB5IC0gbWFyZ2luWzBdIC0gbWFyZ2luWzJdLCAwKVxuICB9O1xufVxuLyoqXG4gKiBQYXJzZSBwb3NpdGlvbiBpbmZvLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb3NpdGlvbkluZm9cbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gW3Bvc2l0aW9uSW5mby5sZWZ0XVxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBbcG9zaXRpb25JbmZvLnRvcF1cbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gW3Bvc2l0aW9uSW5mby5yaWdodF1cbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gW3Bvc2l0aW9uSW5mby5ib3R0b21dXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IFtwb3NpdGlvbkluZm8ud2lkdGhdXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IFtwb3NpdGlvbkluZm8uaGVpZ2h0XVxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBbcG9zaXRpb25JbmZvLmFzcGVjdF0gQXNwZWN0IGlzIHdpZHRoIC8gaGVpZ2h0XG4gKiBAcGFyYW0ge09iamVjdH0gY29udGFpbmVyUmVjdFxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBbbWFyZ2luXVxuICpcbiAqIEByZXR1cm4ge21vZHVsZTp6cmVuZGVyL2NvcmUvQm91bmRpbmdSZWN0fVxuICovXG5cblxuZnVuY3Rpb24gZ2V0TGF5b3V0UmVjdChwb3NpdGlvbkluZm8sIGNvbnRhaW5lclJlY3QsIG1hcmdpbikge1xuICBtYXJnaW4gPSBmb3JtYXRVdGlsLm5vcm1hbGl6ZUNzc0FycmF5KG1hcmdpbiB8fCAwKTtcbiAgdmFyIGNvbnRhaW5lcldpZHRoID0gY29udGFpbmVyUmVjdC53aWR0aDtcbiAgdmFyIGNvbnRhaW5lckhlaWdodCA9IGNvbnRhaW5lclJlY3QuaGVpZ2h0O1xuICB2YXIgbGVmdCA9IHBhcnNlUGVyY2VudChwb3NpdGlvbkluZm8ubGVmdCwgY29udGFpbmVyV2lkdGgpO1xuICB2YXIgdG9wID0gcGFyc2VQZXJjZW50KHBvc2l0aW9uSW5mby50b3AsIGNvbnRhaW5lckhlaWdodCk7XG4gIHZhciByaWdodCA9IHBhcnNlUGVyY2VudChwb3NpdGlvbkluZm8ucmlnaHQsIGNvbnRhaW5lcldpZHRoKTtcbiAgdmFyIGJvdHRvbSA9IHBhcnNlUGVyY2VudChwb3NpdGlvbkluZm8uYm90dG9tLCBjb250YWluZXJIZWlnaHQpO1xuICB2YXIgd2lkdGggPSBwYXJzZVBlcmNlbnQocG9zaXRpb25JbmZvLndpZHRoLCBjb250YWluZXJXaWR0aCk7XG4gIHZhciBoZWlnaHQgPSBwYXJzZVBlcmNlbnQocG9zaXRpb25JbmZvLmhlaWdodCwgY29udGFpbmVySGVpZ2h0KTtcbiAgdmFyIHZlcnRpY2FsTWFyZ2luID0gbWFyZ2luWzJdICsgbWFyZ2luWzBdO1xuICB2YXIgaG9yaXpvbnRhbE1hcmdpbiA9IG1hcmdpblsxXSArIG1hcmdpblszXTtcbiAgdmFyIGFzcGVjdCA9IHBvc2l0aW9uSW5mby5hc3BlY3Q7IC8vIElmIHdpZHRoIGlzIG5vdCBzcGVjaWZpZWQsIGNhbGN1bGF0ZSB3aWR0aCBmcm9tIGxlZnQgYW5kIHJpZ2h0XG5cbiAgaWYgKGlzTmFOKHdpZHRoKSkge1xuICAgIHdpZHRoID0gY29udGFpbmVyV2lkdGggLSByaWdodCAtIGhvcml6b250YWxNYXJnaW4gLSBsZWZ0O1xuICB9XG5cbiAgaWYgKGlzTmFOKGhlaWdodCkpIHtcbiAgICBoZWlnaHQgPSBjb250YWluZXJIZWlnaHQgLSBib3R0b20gLSB2ZXJ0aWNhbE1hcmdpbiAtIHRvcDtcbiAgfVxuXG4gIGlmIChhc3BlY3QgIT0gbnVsbCkge1xuICAgIC8vIElmIHdpZHRoIGFuZCBoZWlnaHQgYXJlIG5vdCBnaXZlblxuICAgIC8vIDEuIEdyYXBoIHNob3VsZCBub3QgZXhjZWVkcyB0aGUgY29udGFpbmVyXG4gICAgLy8gMi4gQXNwZWN0IG11c3QgYmUga2VlcGVkXG4gICAgLy8gMy4gR3JhcGggc2hvdWxkIHRha2UgdGhlIHNwYWNlIGFzIG1vcmUgYXMgcG9zc2libGVcbiAgICAvLyBGSVhNRVxuICAgIC8vIE1hcmdpbiBpcyBub3QgY29uc2lkZXJlZCwgYmVjYXVzZSB0aGVyZSBpcyBubyBjYXNlIHRoYXQgYm90aFxuICAgIC8vIHVzaW5nIG1hcmdpbiBhbmQgYXNwZWN0IHNvIGZhci5cbiAgICBpZiAoaXNOYU4od2lkdGgpICYmIGlzTmFOKGhlaWdodCkpIHtcbiAgICAgIGlmIChhc3BlY3QgPiBjb250YWluZXJXaWR0aCAvIGNvbnRhaW5lckhlaWdodCkge1xuICAgICAgICB3aWR0aCA9IGNvbnRhaW5lcldpZHRoICogMC44O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGVpZ2h0ID0gY29udGFpbmVySGVpZ2h0ICogMC44O1xuICAgICAgfVxuICAgIH0gLy8gQ2FsY3VsYXRlIHdpZHRoIG9yIGhlaWdodCB3aXRoIGdpdmVuIGFzcGVjdFxuXG5cbiAgICBpZiAoaXNOYU4od2lkdGgpKSB7XG4gICAgICB3aWR0aCA9IGFzcGVjdCAqIGhlaWdodDtcbiAgICB9XG5cbiAgICBpZiAoaXNOYU4oaGVpZ2h0KSkge1xuICAgICAgaGVpZ2h0ID0gd2lkdGggLyBhc3BlY3Q7XG4gICAgfVxuICB9IC8vIElmIGxlZnQgaXMgbm90IHNwZWNpZmllZCwgY2FsY3VsYXRlIGxlZnQgZnJvbSByaWdodCBhbmQgd2lkdGhcblxuXG4gIGlmIChpc05hTihsZWZ0KSkge1xuICAgIGxlZnQgPSBjb250YWluZXJXaWR0aCAtIHJpZ2h0IC0gd2lkdGggLSBob3Jpem9udGFsTWFyZ2luO1xuICB9XG5cbiAgaWYgKGlzTmFOKHRvcCkpIHtcbiAgICB0b3AgPSBjb250YWluZXJIZWlnaHQgLSBib3R0b20gLSBoZWlnaHQgLSB2ZXJ0aWNhbE1hcmdpbjtcbiAgfSAvLyBBbGlnbiBsZWZ0IGFuZCB0b3BcblxuXG4gIHN3aXRjaCAocG9zaXRpb25JbmZvLmxlZnQgfHwgcG9zaXRpb25JbmZvLnJpZ2h0KSB7XG4gICAgY2FzZSAnY2VudGVyJzpcbiAgICAgIGxlZnQgPSBjb250YWluZXJXaWR0aCAvIDIgLSB3aWR0aCAvIDIgLSBtYXJnaW5bM107XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgIGxlZnQgPSBjb250YWluZXJXaWR0aCAtIHdpZHRoIC0gaG9yaXpvbnRhbE1hcmdpbjtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgc3dpdGNoIChwb3NpdGlvbkluZm8udG9wIHx8IHBvc2l0aW9uSW5mby5ib3R0b20pIHtcbiAgICBjYXNlICdtaWRkbGUnOlxuICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICB0b3AgPSBjb250YWluZXJIZWlnaHQgLyAyIC0gaGVpZ2h0IC8gMiAtIG1hcmdpblswXTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnYm90dG9tJzpcbiAgICAgIHRvcCA9IGNvbnRhaW5lckhlaWdodCAtIGhlaWdodCAtIHZlcnRpY2FsTWFyZ2luO1xuICAgICAgYnJlYWs7XG4gIH0gLy8gSWYgc29tZXRoaW5nIGlzIHdyb25nIGFuZCBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQgYXJlIGNhbGN1bGF0ZWQgYXMgTmFOXG5cblxuICBsZWZ0ID0gbGVmdCB8fCAwO1xuICB0b3AgPSB0b3AgfHwgMDtcblxuICBpZiAoaXNOYU4od2lkdGgpKSB7XG4gICAgLy8gV2lkdGggbWF5IGJlIE5hTiBpZiBvbmx5IG9uZSB2YWx1ZSBpcyBnaXZlbiBleGNlcHQgd2lkdGhcbiAgICB3aWR0aCA9IGNvbnRhaW5lcldpZHRoIC0gaG9yaXpvbnRhbE1hcmdpbiAtIGxlZnQgLSAocmlnaHQgfHwgMCk7XG4gIH1cblxuICBpZiAoaXNOYU4oaGVpZ2h0KSkge1xuICAgIC8vIEhlaWdodCBtYXkgYmUgTmFOIGlmIG9ubHkgb25lIHZhbHVlIGlzIGdpdmVuIGV4Y2VwdCBoZWlnaHRcbiAgICBoZWlnaHQgPSBjb250YWluZXJIZWlnaHQgLSB2ZXJ0aWNhbE1hcmdpbiAtIHRvcCAtIChib3R0b20gfHwgMCk7XG4gIH1cblxuICB2YXIgcmVjdCA9IG5ldyBCb3VuZGluZ1JlY3QobGVmdCArIG1hcmdpblszXSwgdG9wICsgbWFyZ2luWzBdLCB3aWR0aCwgaGVpZ2h0KTtcbiAgcmVjdC5tYXJnaW4gPSBtYXJnaW47XG4gIHJldHVybiByZWN0O1xufVxuLyoqXG4gKiBQb3NpdGlvbiBhIHpyIGVsZW1lbnQgaW4gdmlld3BvcnRcbiAqICBHcm91cCBwb3NpdGlvbiBpcyBzcGVjaWZpZWQgYnkgZWl0aGVyXG4gKiAge2xlZnQsIHRvcH0sIHtyaWdodCwgYm90dG9tfVxuICogIElmIGFsbCBwcm9wZXJ0aWVzIGV4aXN0cywgcmlnaHQgYW5kIGJvdHRvbSB3aWxsIGJlIGlnb25yZWQuXG4gKlxuICogTG9naWM6XG4gKiAgICAgMS4gU2NhbGUgKGFnYWluc3Qgb3JpZ2luIHBvaW50IGluIHBhcmVudCBjb29yZClcbiAqICAgICAyLiBSb3RhdGUgKGFnYWluc3Qgb3JpZ2luIHBvaW50IGluIHBhcmVudCBjb29yZClcbiAqICAgICAzLiBUcmFzbGF0ZSAod2l0aCBlbC5wb3NpdGlvbiBieSB0aGlzIG1ldGhvZClcbiAqIFNvIHRoaXMgbWV0aG9kIG9ubHkgZml4ZXMgdGhlIGxhc3Qgc3RlcCAnVHJhc2xhdGUnLCB3aGljaCBkb2VzIG5vdCBhZmZlY3RcbiAqIHNjYWxpbmcgYW5kIHJvdGF0aW5nLlxuICpcbiAqIElmIGJlIGNhbGxlZCByZXBlYXRseSB3aXRoIHRoZSBzYW1lIGlucHV0IGVsLCB0aGUgc2FtZSByZXN1bHQgd2lsbCBiZSBnb3R0ZW4uXG4gKlxuICogQHBhcmFtIHttb2R1bGU6enJlbmRlci9FbGVtZW50fSBlbCBTaG91bGQgaGF2ZSBgZ2V0Qm91bmRpbmdSZWN0YCBtZXRob2QuXG4gKiBAcGFyYW0ge09iamVjdH0gcG9zaXRpb25JbmZvXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IFtwb3NpdGlvbkluZm8ubGVmdF1cbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gW3Bvc2l0aW9uSW5mby50b3BdXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IFtwb3NpdGlvbkluZm8ucmlnaHRdXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IFtwb3NpdGlvbkluZm8uYm90dG9tXVxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBbcG9zaXRpb25JbmZvLndpZHRoXSBPbmx5IGZvciBvcHQuYm91bmRpbmdNb2RlbDogJ3JhdydcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gW3Bvc2l0aW9uSW5mby5oZWlnaHRdIE9ubHkgZm9yIG9wdC5ib3VuZGluZ01vZGVsOiAncmF3J1xuICogQHBhcmFtIHtPYmplY3R9IGNvbnRhaW5lclJlY3RcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbWFyZ2luXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdF1cbiAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IFtvcHQuaHY9WzEsMV1dIE9ubHkgaG9yaXpvbnRhbCBvciBvbmx5IHZlcnRpY2FsLlxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gW29wdC5ib3VuZGluZ01vZGU9J2FsbCddXG4gKiAgICAgICAgU3BlY2lmeSBob3cgdG8gY2FsY3VsYXRlIGJvdW5kaW5nUmVjdCB3aGVuIGxvY2F0aW5nLlxuICogICAgICAgICdhbGwnOiBQb3NpdGlvbiB0aGUgYm91bmRpbmdSZWN0IHRoYXQgaXMgdHJhbnNmb3JtZWQgYW5kIHVpb25lZFxuICogICAgICAgICAgICAgICBib3RoIGl0c2VsZiBhbmQgaXRzIGRlc2NlbmRhbnRzLlxuICogICAgICAgICAgICAgICBUaGlzIG1vZGUgc2ltcGxpZXMgY29uZmluZSB0aGUgZWxlbWVudHMgaW4gdGhlIGJvdW5kaW5nXG4gKiAgICAgICAgICAgICAgIG9mIHRoZWlyIGNvbnRhaW5lciAoZS5nLiwgdXNpbmcgJ3JpZ2h0OiAwJykuXG4gKiAgICAgICAgJ3Jhdyc6IFBvc2l0aW9uIHRoZSBib3VuZGluZ1JlY3QgdGhhdCBpcyBub3QgdHJhbnNmb3JtZWQgYW5kIG9ubHkgaXRzZWxmLlxuICogICAgICAgICAgICAgICBUaGlzIG1vZGUgaXMgdXNlZnVsIHdoZW4geW91IHdhbnQgYSBlbGVtZW50IGNhbiBvdmVyZmxvdyBpdHNcbiAqICAgICAgICAgICAgICAgY29udGFpbmVyLiAoQ29uc2lkZXIgYSByb3RhdGVkIGNpcmNsZSBuZWVkcyB0byBiZSBsb2NhdGVkIGluIGEgY29ybmVyLilcbiAqICAgICAgICAgICAgICAgSW4gdGhpcyBtb2RlIHBvc2l0aW9uSW5mby53aWR0aC9oZWlnaHQgY2FuIG9ubHkgYmUgbnVtYmVyLlxuICovXG5cblxuZnVuY3Rpb24gcG9zaXRpb25FbGVtZW50KGVsLCBwb3NpdGlvbkluZm8sIGNvbnRhaW5lclJlY3QsIG1hcmdpbiwgb3B0KSB7XG4gIHZhciBoID0gIW9wdCB8fCAhb3B0Lmh2IHx8IG9wdC5odlswXTtcbiAgdmFyIHYgPSAhb3B0IHx8ICFvcHQuaHYgfHwgb3B0Lmh2WzFdO1xuICB2YXIgYm91bmRpbmdNb2RlID0gb3B0ICYmIG9wdC5ib3VuZGluZ01vZGUgfHwgJ2FsbCc7XG5cbiAgaWYgKCFoICYmICF2KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHJlY3Q7XG5cbiAgaWYgKGJvdW5kaW5nTW9kZSA9PT0gJ3JhdycpIHtcbiAgICByZWN0ID0gZWwudHlwZSA9PT0gJ2dyb3VwJyA/IG5ldyBCb3VuZGluZ1JlY3QoMCwgMCwgK3Bvc2l0aW9uSW5mby53aWR0aCB8fCAwLCArcG9zaXRpb25JbmZvLmhlaWdodCB8fCAwKSA6IGVsLmdldEJvdW5kaW5nUmVjdCgpO1xuICB9IGVsc2Uge1xuICAgIHJlY3QgPSBlbC5nZXRCb3VuZGluZ1JlY3QoKTtcblxuICAgIGlmIChlbC5uZWVkTG9jYWxUcmFuc2Zvcm0oKSkge1xuICAgICAgdmFyIHRyYW5zZm9ybSA9IGVsLmdldExvY2FsVHJhbnNmb3JtKCk7IC8vIE5vdGljZTogcmF3IHJlY3QgbWF5IGJlIGlubmVyIG9iamVjdCBvZiBlbCxcbiAgICAgIC8vIHdoaWNoIHNob3VsZCBub3QgYmUgbW9kaWZpZWQuXG5cbiAgICAgIHJlY3QgPSByZWN0LmNsb25lKCk7XG4gICAgICByZWN0LmFwcGx5VHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgfVxuICB9IC8vIFRoZSByZWFsIHdpZHRoIGFuZCBoZWlnaHQgY2FuIG5vdCBiZSBzcGVjaWZpZWQgYnV0IGNhbGN1bGF0ZWQgYnkgdGhlIGdpdmVuIGVsLlxuXG5cbiAgcG9zaXRpb25JbmZvID0gZ2V0TGF5b3V0UmVjdCh6clV0aWwuZGVmYXVsdHMoe1xuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHRcbiAgfSwgcG9zaXRpb25JbmZvKSwgY29udGFpbmVyUmVjdCwgbWFyZ2luKTsgLy8gQmVjYXVzZSAndHJhbmxhdGUnIGlzIHRoZSBsYXN0IHN0ZXAgaW4gdHJhbnNmb3JtXG4gIC8vIChzZWUgenJlbmRlci9jb3JlL1RyYW5zZm9ybWFibGUjZ2V0TG9jYWxUcmFuc2Zvcm0pLFxuICAvLyB3ZSBjYW4ganVzdCBvbmx5IG1vZGlmeSBlbC5wb3NpdGlvbiB0byBnZXQgZmluYWwgcmVzdWx0LlxuXG4gIHZhciBlbFBvcyA9IGVsLnBvc2l0aW9uO1xuICB2YXIgZHggPSBoID8gcG9zaXRpb25JbmZvLnggLSByZWN0LnggOiAwO1xuICB2YXIgZHkgPSB2ID8gcG9zaXRpb25JbmZvLnkgLSByZWN0LnkgOiAwO1xuICBlbC5hdHRyKCdwb3NpdGlvbicsIGJvdW5kaW5nTW9kZSA9PT0gJ3JhdycgPyBbZHgsIGR5XSA6IFtlbFBvc1swXSArIGR4LCBlbFBvc1sxXSArIGR5XSk7XG59XG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb24gQ29udGFpbnMgc29tZSBvZiB0aGUgcHJvcGVydGllcyBpbiBIVl9OQU1FUy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBodklkeCAwOiBob3Jpem9udGFsOyAxOiB2ZXJ0aWNhbC5cbiAqL1xuXG5cbmZ1bmN0aW9uIHNpemVDYWxjdWxhYmxlKG9wdGlvbiwgaHZJZHgpIHtcbiAgcmV0dXJuIG9wdGlvbltIVl9OQU1FU1todklkeF1bMF1dICE9IG51bGwgfHwgb3B0aW9uW0hWX05BTUVTW2h2SWR4XVsxXV0gIT0gbnVsbCAmJiBvcHRpb25bSFZfTkFNRVNbaHZJZHhdWzJdXSAhPSBudWxsO1xufVxuLyoqXG4gKiBDb25zaWRlciBDYXNlOlxuICogV2hlbiBkZWZ1bGF0IG9wdGlvbiBoYXMge2xlZnQ6IDAsIHdpZHRoOiAxMDB9LCBhbmQgd2Ugc2V0IHtyaWdodDogMH1cbiAqIHRocm91Z2ggc2V0T3B0aW9uIG9yIG1lZGlhIHF1ZXJ5LCB1c2luZyBub3JtYWwgenJVdGlsLm1lcmdlIHdpbGwgY2F1c2VcbiAqIHtyaWdodDogMH0gZG9lcyBub3QgdGFrZSBlZmZlY3QuXG4gKlxuICogQGV4YW1wbGVcbiAqIENvbXBvbmVudE1vZGVsLmV4dGVuZCh7XG4gKiAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICogICAgICAgICAuLi5cbiAqICAgICAgICAgdmFyIGlucHV0UG9zaXRpb25QYXJhbXMgPSBsYXlvdXQuZ2V0TGF5b3V0UGFyYW1zKG9wdGlvbik7XG4gKiAgICAgICAgIHRoaXMubWVyZ2VPcHRpb24oaW5wdXRQb3NpdGlvblBhcmFtcyk7XG4gKiAgICAgfSxcbiAqICAgICBtZXJnZU9wdGlvbjogZnVuY3Rpb24gKG5ld09wdGlvbikge1xuICogICAgICAgICBuZXdPcHRpb24gJiYgenJVdGlsLm1lcmdlKHRoaXNPcHRpb24sIG5ld09wdGlvbiwgdHJ1ZSk7XG4gKiAgICAgICAgIGxheW91dC5tZXJnZUxheW91dFBhcmFtKHRoaXNPcHRpb24sIG5ld09wdGlvbik7XG4gKiAgICAgfVxuICogfSk7XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldE9wdGlvblxuICogQHBhcmFtIHtPYmplY3R9IG5ld09wdGlvblxuICogQHBhcmFtIHtPYmplY3R8c3RyaW5nfSBbb3B0XVxuICogQHBhcmFtIHtib29sZWFufEFycmF5Ljxib29sZWFuPn0gW29wdC5pZ25vcmVTaXplPWZhbHNlXSBVc2VkIGZvciB0aGUgY29tcG9uZW50c1xuICogIHRoYXQgd2lkdGggKG9yIGhlaWdodCkgc2hvdWxkIG5vdCBiZSBjYWxjdWxhdGVkIGJ5IGxlZnQgYW5kIHJpZ2h0IChvciB0b3AgYW5kIGJvdHRvbSkuXG4gKi9cblxuXG5mdW5jdGlvbiBtZXJnZUxheW91dFBhcmFtKHRhcmdldE9wdGlvbiwgbmV3T3B0aW9uLCBvcHQpIHtcbiAgIXpyVXRpbC5pc09iamVjdChvcHQpICYmIChvcHQgPSB7fSk7XG4gIHZhciBpZ25vcmVTaXplID0gb3B0Lmlnbm9yZVNpemU7XG4gICF6clV0aWwuaXNBcnJheShpZ25vcmVTaXplKSAmJiAoaWdub3JlU2l6ZSA9IFtpZ25vcmVTaXplLCBpZ25vcmVTaXplXSk7XG4gIHZhciBoUmVzdWx0ID0gbWVyZ2UoSFZfTkFNRVNbMF0sIDApO1xuICB2YXIgdlJlc3VsdCA9IG1lcmdlKEhWX05BTUVTWzFdLCAxKTtcbiAgY29weShIVl9OQU1FU1swXSwgdGFyZ2V0T3B0aW9uLCBoUmVzdWx0KTtcbiAgY29weShIVl9OQU1FU1sxXSwgdGFyZ2V0T3B0aW9uLCB2UmVzdWx0KTtcblxuICBmdW5jdGlvbiBtZXJnZShuYW1lcywgaHZJZHgpIHtcbiAgICB2YXIgbmV3UGFyYW1zID0ge307XG4gICAgdmFyIG5ld1ZhbHVlQ291bnQgPSAwO1xuICAgIHZhciBtZXJnZWQgPSB7fTtcbiAgICB2YXIgbWVyZ2VkVmFsdWVDb3VudCA9IDA7XG4gICAgdmFyIGVub3VnaFBhcmFtTnVtYmVyID0gMjtcbiAgICBlYWNoKG5hbWVzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgbWVyZ2VkW25hbWVdID0gdGFyZ2V0T3B0aW9uW25hbWVdO1xuICAgIH0pO1xuICAgIGVhY2gobmFtZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAvLyBDb25zaWRlciBjYXNlOiBuZXdPcHRpb24ud2lkdGggaXMgbnVsbCwgd2hpY2ggaXNcbiAgICAgIC8vIHNldCBieSB1c2VyIGZvciByZW1vdmluZyB3aWR0aCBzZXR0aW5nLlxuICAgICAgaGFzUHJvcChuZXdPcHRpb24sIG5hbWUpICYmIChuZXdQYXJhbXNbbmFtZV0gPSBtZXJnZWRbbmFtZV0gPSBuZXdPcHRpb25bbmFtZV0pO1xuICAgICAgaGFzVmFsdWUobmV3UGFyYW1zLCBuYW1lKSAmJiBuZXdWYWx1ZUNvdW50Kys7XG4gICAgICBoYXNWYWx1ZShtZXJnZWQsIG5hbWUpICYmIG1lcmdlZFZhbHVlQ291bnQrKztcbiAgICB9KTtcblxuICAgIGlmIChpZ25vcmVTaXplW2h2SWR4XSkge1xuICAgICAgLy8gT25seSBvbmUgb2YgbGVmdC9yaWdodCBpcyBwcmVtaXR0ZWQgdG8gZXhpc3QuXG4gICAgICBpZiAoaGFzVmFsdWUobmV3T3B0aW9uLCBuYW1lc1sxXSkpIHtcbiAgICAgICAgbWVyZ2VkW25hbWVzWzJdXSA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKGhhc1ZhbHVlKG5ld09wdGlvbiwgbmFtZXNbMl0pKSB7XG4gICAgICAgIG1lcmdlZFtuYW1lc1sxXV0gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkO1xuICAgIH0gLy8gQ2FzZTogbmV3T3B0aW9uOiB7d2lkdGg6IC4uLiwgcmlnaHQ6IC4uLn0sXG4gICAgLy8gb3IgdGFyZ2V0T3B0aW9uOiB7cmlnaHQ6IC4uLn0gYW5kIG5ld09wdGlvbjoge3dpZHRoOiAuLi59LFxuICAgIC8vIFRoZXJlIGlzIG5vIGNvbmZsaWN0IHdoZW4gbWVyZ2VkIG9ubHkgaGFzIHBhcmFtcyBjb3VudFxuICAgIC8vIGxpdHRsZSB0aGFuIGVub3VnaFBhcmFtTnVtYmVyLlxuXG5cbiAgICBpZiAobWVyZ2VkVmFsdWVDb3VudCA9PT0gZW5vdWdoUGFyYW1OdW1iZXIgfHwgIW5ld1ZhbHVlQ291bnQpIHtcbiAgICAgIHJldHVybiBtZXJnZWQ7XG4gICAgfSAvLyBDYXNlOiBuZXdPcHRpb246IHt3aWR0aDogLi4uLCByaWdodDogLi4ufSxcbiAgICAvLyBUaGFuIHdlIGNhbiBtYWtlIHN1cmUgdXNlciBvbmx5IHdhbnQgdGhvc2UgdHdvLCBhbmQgaWdub3JlXG4gICAgLy8gYWxsIG9yaWdpbiBwYXJhbXMgaW4gdGFyZ2V0T3B0aW9uLlxuICAgIGVsc2UgaWYgKG5ld1ZhbHVlQ291bnQgPj0gZW5vdWdoUGFyYW1OdW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ld1BhcmFtcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIENob3NlIGFub3RoZXIgcGFyYW0gZnJvbSB0YXJnZXRPcHRpb24gYnkgcHJpb3JpdHkuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgbmFtZSA9IG5hbWVzW2ldO1xuXG4gICAgICAgICAgaWYgKCFoYXNQcm9wKG5ld1BhcmFtcywgbmFtZSkgJiYgaGFzUHJvcCh0YXJnZXRPcHRpb24sIG5hbWUpKSB7XG4gICAgICAgICAgICBuZXdQYXJhbXNbbmFtZV0gPSB0YXJnZXRPcHRpb25bbmFtZV07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3UGFyYW1zO1xuICAgICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFzUHJvcChvYmosIG5hbWUpIHtcbiAgICByZXR1cm4gb2JqLmhhc093blByb3BlcnR5KG5hbWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzVmFsdWUob2JqLCBuYW1lKSB7XG4gICAgcmV0dXJuIG9ialtuYW1lXSAhPSBudWxsICYmIG9ialtuYW1lXSAhPT0gJ2F1dG8nO1xuICB9XG5cbiAgZnVuY3Rpb24gY29weShuYW1lcywgdGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBlYWNoKG5hbWVzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gc291cmNlW25hbWVdO1xuICAgIH0pO1xuICB9XG59XG4vKipcbiAqIFJldHJpZXZlICdsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nLCAnd2lkdGgnLCAnaGVpZ2h0JyBmcm9tIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2VcbiAqIEByZXR1cm4ge09iamVjdH0gUmVzdWx0IGNvbnRhaW5zIHRob3NlIHByb3BzLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0TGF5b3V0UGFyYW1zKHNvdXJjZSkge1xuICByZXR1cm4gY29weUxheW91dFBhcmFtcyh7fSwgc291cmNlKTtcbn1cbi8qKlxuICogUmV0cmlldmUgJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ2JvdHRvbScsICd3aWR0aCcsICdoZWlnaHQnIGZyb20gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZVxuICogQHJldHVybiB7T2JqZWN0fSBSZXN1bHQgY29udGFpbnMgdGhvc2UgcHJvcHMuXG4gKi9cblxuXG5mdW5jdGlvbiBjb3B5TGF5b3V0UGFyYW1zKHRhcmdldCwgc291cmNlKSB7XG4gIHNvdXJjZSAmJiB0YXJnZXQgJiYgZWFjaChMT0NBVElPTl9QQVJBTVMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgc291cmNlLmhhc093blByb3BlcnR5KG5hbWUpICYmICh0YXJnZXRbbmFtZV0gPSBzb3VyY2VbbmFtZV0pO1xuICB9KTtcbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZXhwb3J0cy5MT0NBVElPTl9QQVJBTVMgPSBMT0NBVElPTl9QQVJBTVM7XG5leHBvcnRzLkhWX05BTUVTID0gSFZfTkFNRVM7XG5leHBvcnRzLmJveCA9IGJveDtcbmV4cG9ydHMudmJveCA9IHZib3g7XG5leHBvcnRzLmhib3ggPSBoYm94O1xuZXhwb3J0cy5nZXRBdmFpbGFibGVTaXplID0gZ2V0QXZhaWxhYmxlU2l6ZTtcbmV4cG9ydHMuZ2V0TGF5b3V0UmVjdCA9IGdldExheW91dFJlY3Q7XG5leHBvcnRzLnBvc2l0aW9uRWxlbWVudCA9IHBvc2l0aW9uRWxlbWVudDtcbmV4cG9ydHMuc2l6ZUNhbGN1bGFibGUgPSBzaXplQ2FsY3VsYWJsZTtcbmV4cG9ydHMubWVyZ2VMYXlvdXRQYXJhbSA9IG1lcmdlTGF5b3V0UGFyYW07XG5leHBvcnRzLmdldExheW91dFBhcmFtcyA9IGdldExheW91dFBhcmFtcztcbmV4cG9ydHMuY29weUxheW91dFBhcmFtcyA9IGNvcHlMYXlvdXRQYXJhbXM7IiwidmFyIHpyVXRpbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3V0aWxcIik7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbnZhciBlYWNoID0genJVdGlsLmVhY2g7XG52YXIgaXNPYmplY3QgPSB6clV0aWwuaXNPYmplY3Q7XG52YXIgaXNBcnJheSA9IHpyVXRpbC5pc0FycmF5O1xuLyoqXG4gKiBNYWtlIHRoZSBuYW1lIGRpc3BsYXlhYmxlLiBCdXQgd2Ugc2hvdWxkXG4gKiBtYWtlIHN1cmUgaXQgaXMgbm90IGR1cGxpY2F0ZWQgd2l0aCB1c2VyXG4gKiBzcGVjaWZpZWQgbmFtZSwgc28gdXNlICdcXDAnO1xuICovXG5cbnZhciBEVU1NWV9DT01QT05FTlRfTkFNRV9QUkVGSVggPSAnc2VyaWVzXFwwJztcbi8qKlxuICogSWYgdmFsdWUgaXMgbm90IGFycmF5LCB0aGVuIHRyYW5zbGF0ZSBpdCB0byBhcnJheS5cbiAqIEBwYXJhbSAgeyp9IHZhbHVlXG4gKiBAcmV0dXJuIHtBcnJheX0gW3ZhbHVlXSBvciB2YWx1ZVxuICovXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVRvQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgQXJyYXkgPyB2YWx1ZSA6IHZhbHVlID09IG51bGwgPyBbXSA6IFt2YWx1ZV07XG59XG4vKipcbiAqIFN5bmMgZGVmYXVsdCBvcHRpb24gYmV0d2VlbiBub3JtYWwgYW5kIGVtcGhhc2lzIGxpa2UgYHBvc2l0aW9uYCBhbmQgYHNob3dgXG4gKiBJbiBjYXNlIHNvbWUgb25lIHdpbGwgd3JpdGUgY29kZSBsaWtlXG4gKiAgICAgbGFiZWw6IHtcbiAqICAgICAgICAgIHNob3c6IGZhbHNlLFxuICogICAgICAgICAgcG9zaXRpb246ICdvdXRzaWRlJyxcbiAqICAgICAgICAgIGZvbnRTaXplOiAxOFxuICogICAgIH0sXG4gKiAgICAgZW1waGFzaXM6IHtcbiAqICAgICAgICAgIGxhYmVsOiB7IHNob3c6IHRydWUgfVxuICogICAgIH1cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz59IHN1Yk9wdHNcbiAqL1xuXG5cbmZ1bmN0aW9uIGRlZmF1bHRFbXBoYXNpcyhvcHQsIGtleSwgc3ViT3B0cykge1xuICAvLyBDYXV0aW9uOiBwZXJmb3JtYW5jZSBzZW5zaXRpdmUuXG4gIGlmIChvcHQpIHtcbiAgICBvcHRba2V5XSA9IG9wdFtrZXldIHx8IHt9O1xuICAgIG9wdC5lbXBoYXNpcyA9IG9wdC5lbXBoYXNpcyB8fCB7fTtcbiAgICBvcHQuZW1waGFzaXNba2V5XSA9IG9wdC5lbXBoYXNpc1trZXldIHx8IHt9OyAvLyBEZWZhdWx0IGVtcGhhc2lzIG9wdGlvbiBmcm9tIG5vcm1hbFxuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHN1Yk9wdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBzdWJPcHROYW1lID0gc3ViT3B0c1tpXTtcblxuICAgICAgaWYgKCFvcHQuZW1waGFzaXNba2V5XS5oYXNPd25Qcm9wZXJ0eShzdWJPcHROYW1lKSAmJiBvcHRba2V5XS5oYXNPd25Qcm9wZXJ0eShzdWJPcHROYW1lKSkge1xuICAgICAgICBvcHQuZW1waGFzaXNba2V5XVtzdWJPcHROYW1lXSA9IG9wdFtrZXldW3N1Yk9wdE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgVEVYVF9TVFlMRV9PUFRJT05TID0gWydmb250U3R5bGUnLCAnZm9udFdlaWdodCcsICdmb250U2l6ZScsICdmb250RmFtaWx5JywgJ3JpY2gnLCAndGFnJywgJ2NvbG9yJywgJ3RleHRCb3JkZXJDb2xvcicsICd0ZXh0Qm9yZGVyV2lkdGgnLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ2xpbmVIZWlnaHQnLCAnYWxpZ24nLCAndmVydGljYWxBbGlnbicsICdiYXNlbGluZScsICdzaGFkb3dDb2xvcicsICdzaGFkb3dCbHVyJywgJ3NoYWRvd09mZnNldFgnLCAnc2hhZG93T2Zmc2V0WScsICd0ZXh0U2hhZG93Q29sb3InLCAndGV4dFNoYWRvd0JsdXInLCAndGV4dFNoYWRvd09mZnNldFgnLCAndGV4dFNoYWRvd09mZnNldFknLCAnYmFja2dyb3VuZENvbG9yJywgJ2JvcmRlckNvbG9yJywgJ2JvcmRlcldpZHRoJywgJ2JvcmRlclJhZGl1cycsICdwYWRkaW5nJ107IC8vIG1vZGVsVXRpbC5MQUJFTF9PUFRJT05TID0gbW9kZWxVdGlsLlRFWFRfU1RZTEVfT1BUSU9OUy5jb25jYXQoW1xuLy8gICAgICdwb3NpdGlvbicsICdvZmZzZXQnLCAncm90YXRlJywgJ29yaWdpbicsICdzaG93JywgJ2Rpc3RhbmNlJywgJ2Zvcm1hdHRlcicsXG4vLyAgICAgJ2ZvbnRTdHlsZScsICdmb250V2VpZ2h0JywgJ2ZvbnRTaXplJywgJ2ZvbnRGYW1pbHknLFxuLy8gICAgIC8vIEZJWE1FOiBkZXByZWNhdGVkLCBjaGVjayBhbmQgcmVtb3ZlIGl0LlxuLy8gICAgICd0ZXh0U3R5bGUnXG4vLyBdKTtcblxuLyoqXG4gKiBUaGUgbWV0aG9kIGRvIG5vdCBlbnN1cmUgcGVyZm9ybWFuY2UuXG4gKiBkYXRhIGNvdWxkIGJlIFsxMiwgMjMyMywge3ZhbHVlOiAyMjN9LCBbMTIyMSwgMjNdLCB7dmFsdWU6IFsyLCAyM119XVxuICogVGhpcyBoZWxwZXIgbWV0aG9kIHJldGlldmVzIHZhbHVlIGZyb20gZGF0YS5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnxEYXRlfEFycmF5fE9iamVjdH0gZGF0YUl0ZW1cbiAqIEByZXR1cm4ge251bWJlcnxzdHJpbmd8RGF0ZXxBcnJheS48bnVtYmVyfHN0cmluZ3xEYXRlPn1cbiAqL1xuXG5mdW5jdGlvbiBnZXREYXRhSXRlbVZhbHVlKGRhdGFJdGVtKSB7XG4gIHJldHVybiBpc09iamVjdChkYXRhSXRlbSkgJiYgIWlzQXJyYXkoZGF0YUl0ZW0pICYmICEoZGF0YUl0ZW0gaW5zdGFuY2VvZiBEYXRlKSA/IGRhdGFJdGVtLnZhbHVlIDogZGF0YUl0ZW07XG59XG4vKipcbiAqIGRhdGEgY291bGQgYmUgWzEyLCAyMzIzLCB7dmFsdWU6IDIyM30sIFsxMjIxLCAyM10sIHt2YWx1ZTogWzIsIDIzXX1dXG4gKiBUaGlzIGhlbHBlciBtZXRob2QgZGV0ZXJtaW5lIGlmIGRhdGFJdGVtIGhhcyBleHRyYSBvcHRpb24gYmVzaWRlcyB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfERhdGV8QXJyYXl8T2JqZWN0fSBkYXRhSXRlbVxuICovXG5cblxuZnVuY3Rpb24gaXNEYXRhSXRlbU9wdGlvbihkYXRhSXRlbSkge1xuICByZXR1cm4gaXNPYmplY3QoZGF0YUl0ZW0pICYmICEoZGF0YUl0ZW0gaW5zdGFuY2VvZiBBcnJheSk7IC8vIC8vIG1hcmtMaW5lIGRhdGEgY2FuIGJlIGFycmF5XG4gIC8vICYmICEoZGF0YUl0ZW1bMF0gJiYgaXNPYmplY3QoZGF0YUl0ZW1bMF0pICYmICEoZGF0YUl0ZW1bMF0gaW5zdGFuY2VvZiBBcnJheSkpO1xufVxuLyoqXG4gKiBNYXBwaW5nIHRvIGV4aXN0cyBmb3IgbWVyZ2UuXG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtBcnJheS48T2JqZWN0PnxBcnJheS48bW9kdWxlOmVjaGFydHMvbW9kZWwvQ29tcG9uZW50Pn0gZXhpc3RzXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheS48T2JqZWN0Pn0gbmV3Q3B0T3B0aW9uc1xuICogQHJldHVybiB7QXJyYXkuPE9iamVjdD59IFJlc3VsdCwgbGlrZSBbe2V4aXN0OiAuLi4sIG9wdGlvbjogLi4ufSwge31dLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4IG9mIHdoaWNoIGlzIHRoZSBzYW1lIGFzIGV4aXN0cy5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1hcHBpbmdUb0V4aXN0cyhleGlzdHMsIG5ld0NwdE9wdGlvbnMpIHtcbiAgLy8gTWFwcGluZyBieSB0aGUgb3JkZXIgYnkgb3JpZ2luYWwgb3B0aW9uIChidXQgbm90IG9yZGVyIG9mXG4gIC8vIG5ldyBvcHRpb24pIGluIG1lcmdlIG1vZGUuIEJlY2F1c2Ugd2Ugc2hvdWxkIGVuc3VyZVxuICAvLyBzb21lIHNwZWNpZmllZCBpbmRleCAobGlrZSB4QXhpc0luZGV4KSBpcyBjb25zaXN0ZW50IHdpdGhcbiAgLy8gb3JpZ2luYWwgb3B0aW9uLCB3aGljaCBpcyBlYXN5IHRvIHVuZGVyc3RhbmQsIGVzcGF0aWFsbHkgaW5cbiAgLy8gbWVkaWEgcXVlcnkuIEFuZCBpbiBtb3N0IGNhc2UsIG1lcmdlIG9wdGlvbiBpcyB1c2VkIHRvXG4gIC8vIHVwZGF0ZSBwYXJ0aWFsIG9wdGlvbiBidXQgbm90IGJlIGV4cGVjdGVkIHRvIGNoYW5nZSBvcmRlci5cbiAgbmV3Q3B0T3B0aW9ucyA9IChuZXdDcHRPcHRpb25zIHx8IFtdKS5zbGljZSgpO1xuICB2YXIgcmVzdWx0ID0genJVdGlsLm1hcChleGlzdHMgfHwgW10sIGZ1bmN0aW9uIChvYmosIGluZGV4KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV4aXN0OiBvYmpcbiAgICB9O1xuICB9KTsgLy8gTWFwcGluZyBieSBpZCBvciBuYW1lIGlmIHNwZWNpZmllZC5cblxuICBlYWNoKG5ld0NwdE9wdGlvbnMsIGZ1bmN0aW9uIChjcHRPcHRpb24sIGluZGV4KSB7XG4gICAgaWYgKCFpc09iamVjdChjcHRPcHRpb24pKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBpZCBoYXMgaGlnaGVzdCBwcmlvcml0eS5cblxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghcmVzdWx0W2ldLm9wdGlvbiAvLyBDb25zaWRlciBuYW1lOiB0d28gbWFwIHRvIG9uZS5cbiAgICAgICYmIGNwdE9wdGlvbi5pZCAhPSBudWxsICYmIHJlc3VsdFtpXS5leGlzdC5pZCA9PT0gY3B0T3B0aW9uLmlkICsgJycpIHtcbiAgICAgICAgcmVzdWx0W2ldLm9wdGlvbiA9IGNwdE9wdGlvbjtcbiAgICAgICAgbmV3Q3B0T3B0aW9uc1tpbmRleF0gPSBudWxsO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBleGlzdCA9IHJlc3VsdFtpXS5leGlzdDtcblxuICAgICAgaWYgKCFyZXN1bHRbaV0ub3B0aW9uIC8vIENvbnNpZGVyIG5hbWU6IHR3byBtYXAgdG8gb25lLlxuICAgICAgLy8gQ2FuIG5vdCBtYXRjaCB3aGVuIGJvdGggaWRzIGV4aXN0IGJ1dCBkaWZmZXJlbnQuXG4gICAgICAmJiAoZXhpc3QuaWQgPT0gbnVsbCB8fCBjcHRPcHRpb24uaWQgPT0gbnVsbCkgJiYgY3B0T3B0aW9uLm5hbWUgIT0gbnVsbCAmJiAhaXNJZElubmVyKGNwdE9wdGlvbikgJiYgIWlzSWRJbm5lcihleGlzdCkgJiYgZXhpc3QubmFtZSA9PT0gY3B0T3B0aW9uLm5hbWUgKyAnJykge1xuICAgICAgICByZXN1bHRbaV0ub3B0aW9uID0gY3B0T3B0aW9uO1xuICAgICAgICBuZXdDcHRPcHRpb25zW2luZGV4XSA9IG51bGw7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH0pOyAvLyBPdGhlcndpc2UgbWFwcGluZyBieSBpbmRleC5cblxuICBlYWNoKG5ld0NwdE9wdGlvbnMsIGZ1bmN0aW9uIChjcHRPcHRpb24sIGluZGV4KSB7XG4gICAgaWYgKCFpc09iamVjdChjcHRPcHRpb24pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGkgPSAwO1xuXG4gICAgZm9yICg7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBleGlzdCA9IHJlc3VsdFtpXS5leGlzdDtcblxuICAgICAgaWYgKCFyZXN1bHRbaV0ub3B0aW9uIC8vIEV4aXN0aW5nIG1vZGVsIHRoYXQgYWxyZWFkeSBoYXMgaWQgc2hvdWxkIGJlIGFibGUgdG9cbiAgICAgIC8vIG1hcHBlZCB0byAoYmVjYXVzZSBhZnRlciBtYXBwaW5nIHBlcmZvcm1lZCBtb2RlbCBtYXlcbiAgICAgIC8vIGJlIGFzc2lnbmVkIHdpdGggYSBpZCwgd2hpc2ggc2hvdWxkIG5vdCBhZmZlY3QgbmV4dFxuICAgICAgLy8gbWFwcGluZyksIGV4Y2VwdCB0aG9zZSBoYXMgaW5uZXIgaWQuXG4gICAgICAmJiAhaXNJZElubmVyKGV4aXN0KSAvLyBDYXV0aW9uOlxuICAgICAgLy8gRG8gbm90IG92ZXJ3cml0ZSBpZC4gQnV0IG5hbWUgY2FuIGJlIG92ZXJ3cml0dGVuLFxuICAgICAgLy8gYmVjYXVzZSBheGlzIHVzZSBuYW1lIGFzICdzaG93IGxhYmVsIHRleHQnLlxuICAgICAgLy8gJ2V4aXN0JyBhbHdheXMgaGFzIGlkIGFuZCBuYW1lIGFuZCB3ZSBkb250XG4gICAgICAvLyBuZWVkIHRvIGNoZWNrIGl0LlxuICAgICAgJiYgY3B0T3B0aW9uLmlkID09IG51bGwpIHtcbiAgICAgICAgcmVzdWx0W2ldLm9wdGlvbiA9IGNwdE9wdGlvbjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGkgPj0gcmVzdWx0Lmxlbmd0aCkge1xuICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICBvcHRpb246IGNwdE9wdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogTWFrZSBpZCBhbmQgbmFtZSBmb3IgbWFwcGluZyByZXN1bHQgKHJlc3VsdCBvZiBtYXBwaW5nVG9FeGlzdHMpXG4gKiBpbnRvIGBrZXlJbmZvYCBmaWVsZC5cbiAqXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge0FycmF5LjxPYmplY3Q+fSBSZXN1bHQsIGxpa2UgW3tleGlzdDogLi4uLCBvcHRpb246IC4uLn0sIHt9XSxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICB3aGljaCBvcmRlciBpcyB0aGUgc2FtZSBhcyBleGlzdHMuXG4gKiBAcmV0dXJuIHtBcnJheS48T2JqZWN0Pn0gVGhlIGlucHV0LlxuICovXG5cblxuZnVuY3Rpb24gbWFrZUlkQW5kTmFtZShtYXBSZXN1bHQpIHtcbiAgLy8gV2UgdXNlIHRoaXMgaWQgdG8gaGFzaCBjb21wb25lbnQgbW9kZWxzIGFuZCB2aWV3IGluc3RhbmNlc1xuICAvLyBpbiBlY2hhcnRzLiBpZCBjYW4gYmUgc3BlY2lmaWVkIGJ5IHVzZXIsIG9yIGF1dG8gZ2VuZXJhdGVkLlxuICAvLyBUaGUgaWQgZ2VuZXJhdGlvbiBydWxlIGVuc3VyZXMgbmV3IHZpZXcgaW5zdGFuY2UgYXJlIGFibGVcbiAgLy8gdG8gbWFwcGVkIHRvIG9sZCBpbnN0YW5jZSB3aGVuIHNldE9wdGlvbiBhcmUgY2FsbGVkIGluXG4gIC8vIG5vLW1lcmdlIG1vZGUuIFNvIHdlIGdlbmVyYXRlIG1vZGVsIGlkIGJ5IG5hbWUgYW5kIHBsdXNcbiAgLy8gdHlwZSBpbiB2aWV3IGlkLlxuICAvLyBuYW1lIGNhbiBiZSBkdXBsaWNhdGVkIGFtb25nIGNvbXBvbmVudHMsIHdoaWNoIGlzIGNvbnZlbmllbnRcbiAgLy8gdG8gc3BlY2lmeSBtdWx0aSBjb21wb25lbnRzIChsaWtlIHNlcmllcykgYnkgb25lIG5hbWUuXG4gIC8vIEVuc3VyZSB0aGF0IGVhY2ggaWQgaXMgZGlzdGluY3QuXG4gIHZhciBpZE1hcCA9IHpyVXRpbC5jcmVhdGVIYXNoTWFwKCk7XG4gIGVhY2gobWFwUmVzdWx0LCBmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICB2YXIgZXhpc3RDcHQgPSBpdGVtLmV4aXN0O1xuICAgIGV4aXN0Q3B0ICYmIGlkTWFwLnNldChleGlzdENwdC5pZCwgaXRlbSk7XG4gIH0pO1xuICBlYWNoKG1hcFJlc3VsdCwgZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgdmFyIG9wdCA9IGl0ZW0ub3B0aW9uO1xuICAgIHpyVXRpbC5hc3NlcnQoIW9wdCB8fCBvcHQuaWQgPT0gbnVsbCB8fCAhaWRNYXAuZ2V0KG9wdC5pZCkgfHwgaWRNYXAuZ2V0KG9wdC5pZCkgPT09IGl0ZW0sICdpZCBkdXBsaWNhdGVzOiAnICsgKG9wdCAmJiBvcHQuaWQpKTtcbiAgICBvcHQgJiYgb3B0LmlkICE9IG51bGwgJiYgaWRNYXAuc2V0KG9wdC5pZCwgaXRlbSk7XG4gICAgIWl0ZW0ua2V5SW5mbyAmJiAoaXRlbS5rZXlJbmZvID0ge30pO1xuICB9KTsgLy8gTWFrZSBuYW1lIGFuZCBpZC5cblxuICBlYWNoKG1hcFJlc3VsdCwgZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgdmFyIGV4aXN0Q3B0ID0gaXRlbS5leGlzdDtcbiAgICB2YXIgb3B0ID0gaXRlbS5vcHRpb247XG4gICAgdmFyIGtleUluZm8gPSBpdGVtLmtleUluZm87XG5cbiAgICBpZiAoIWlzT2JqZWN0KG9wdCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIG5hbWUgY2FuIGJlIG92ZXJ3aXR0ZW4uIENvbnNpZGVyIGNhc2U6IGF4aXMubmFtZSA9ICcyMGttJy5cbiAgICAvLyBCdXQgaWQgZ2VuZXJhdGVkIGJ5IG5hbWUgd2lsbCBub3QgYmUgY2hhbmdlZCwgd2hpY2ggYWZmZWN0XG4gICAgLy8gb25seSBpbiB0aGF0IGNhc2U6IHNldE9wdGlvbiB3aXRoICdub3QgbWVyZ2UgbW9kZScgYW5kIHZpZXdcbiAgICAvLyBpbnN0YW5jZSB3aWxsIGJlIHJlY3JlYXRlZCwgd2hpY2ggY2FuIGJlIGFjY2VwdGVkLlxuXG5cbiAgICBrZXlJbmZvLm5hbWUgPSBvcHQubmFtZSAhPSBudWxsID8gb3B0Lm5hbWUgKyAnJyA6IGV4aXN0Q3B0ID8gZXhpc3RDcHQubmFtZSAvLyBBdm9pZCBkaWZmZmVyZW50IHNlcmllcyBoYXMgdGhlIHNhbWUgbmFtZSxcbiAgICAvLyBiZWNhdXNlIG5hbWUgbWF5IGJlIHVzZWQgbGlrZSBpbiBjb2xvciBwYWxsZXQuXG4gICAgOiBEVU1NWV9DT01QT05FTlRfTkFNRV9QUkVGSVggKyBpbmRleDtcblxuICAgIGlmIChleGlzdENwdCkge1xuICAgICAga2V5SW5mby5pZCA9IGV4aXN0Q3B0LmlkO1xuICAgIH0gZWxzZSBpZiAob3B0LmlkICE9IG51bGwpIHtcbiAgICAgIGtleUluZm8uaWQgPSBvcHQuaWQgKyAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ29uc2lkZXIgdGhpcyBzaXR1YXRvaW46XG4gICAgICAvLyAgb3B0aW9uQTogW3tuYW1lOiAnYSd9LCB7bmFtZTogJ2EnfSwgey4ufV1cbiAgICAgIC8vICBvcHRpb25CIFt7Li59LCB7bmFtZTogJ2EnfSwge25hbWU6ICdhJ31dXG4gICAgICAvLyBTZXJpZXMgd2l0aCB0aGUgc2FtZSBuYW1lIGJldHdlZW4gb3B0aW9uQSBhbmQgb3B0aW9uQlxuICAgICAgLy8gc2hvdWxkIGJlIG1hcHBlZC5cbiAgICAgIHZhciBpZE51bSA9IDA7XG5cbiAgICAgIGRvIHtcbiAgICAgICAga2V5SW5mby5pZCA9ICdcXDAnICsga2V5SW5mby5uYW1lICsgJ1xcMCcgKyBpZE51bSsrO1xuICAgICAgfSB3aGlsZSAoaWRNYXAuZ2V0KGtleUluZm8uaWQpKTtcbiAgICB9XG5cbiAgICBpZE1hcC5zZXQoa2V5SW5mby5pZCwgaXRlbSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpc05hbWVTcGVjaWZpZWQoY29tcG9uZW50TW9kZWwpIHtcbiAgdmFyIG5hbWUgPSBjb21wb25lbnRNb2RlbC5uYW1lOyAvLyBJcyBzcGVjaWZpZWQgd2hlbiBgaW5kZXhPZmAgZ2V0IC0xIG9yID4gMC5cblxuICByZXR1cm4gISEobmFtZSAmJiBuYW1lLmluZGV4T2YoRFVNTVlfQ09NUE9ORU5UX05BTUVfUFJFRklYKSk7XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7T2JqZWN0fSBjcHRPcHRpb25cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cblxuXG5mdW5jdGlvbiBpc0lkSW5uZXIoY3B0T3B0aW9uKSB7XG4gIHJldHVybiBpc09iamVjdChjcHRPcHRpb24pICYmIGNwdE9wdGlvbi5pZCAmJiAoY3B0T3B0aW9uLmlkICsgJycpLmluZGV4T2YoJ1xcMF9lY19cXDAnKSA9PT0gMDtcbn1cbi8qKlxuICogQSBoZWxwZXIgZm9yIHJlbW92aW5nIGR1cGxpY2F0ZSBpdGVtcyBiZXR3ZWVuIGJhdGNoQSBhbmQgYmF0Y2hCLFxuICogYW5kIGluIHRoZW1zZWx2ZXMsIGFuZCBjYXRlZ29yaXplIGJ5IHNlcmllcy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxPYmplY3Q+fSBiYXRjaEEgTGlrZTogW3tzZXJpZXNJZDogMiwgZGF0YUluZGV4OiBbMzIsIDQsIDVdfSwgLi4uXVxuICogQHBhcmFtIHtBcnJheS48T2JqZWN0Pn0gYmF0Y2hCIExpa2U6IFt7c2VyaWVzSWQ6IDIsIGRhdGFJbmRleDogWzMyLCA0LCA1XX0sIC4uLl1cbiAqIEByZXR1cm4ge0FycmF5LjxBcnJheS48T2JqZWN0PiwgQXJyYXkuPE9iamVjdD4+fSByZXN1bHQ6IFtyZXN1bHRCYXRjaEEsIHJlc3VsdEJhdGNoQl1cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbXByZXNzQmF0Y2hlcyhiYXRjaEEsIGJhdGNoQikge1xuICB2YXIgbWFwQSA9IHt9O1xuICB2YXIgbWFwQiA9IHt9O1xuICBtYWtlTWFwKGJhdGNoQSB8fCBbXSwgbWFwQSk7XG4gIG1ha2VNYXAoYmF0Y2hCIHx8IFtdLCBtYXBCLCBtYXBBKTtcbiAgcmV0dXJuIFttYXBUb0FycmF5KG1hcEEpLCBtYXBUb0FycmF5KG1hcEIpXTtcblxuICBmdW5jdGlvbiBtYWtlTWFwKHNvdXJjZUJhdGNoLCBtYXAsIG90aGVyTWFwKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNvdXJjZUJhdGNoLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgc2VyaWVzSWQgPSBzb3VyY2VCYXRjaFtpXS5zZXJpZXNJZDtcbiAgICAgIHZhciBkYXRhSW5kaWNlcyA9IG5vcm1hbGl6ZVRvQXJyYXkoc291cmNlQmF0Y2hbaV0uZGF0YUluZGV4KTtcbiAgICAgIHZhciBvdGhlckRhdGFJbmRpY2VzID0gb3RoZXJNYXAgJiYgb3RoZXJNYXBbc2VyaWVzSWRdO1xuXG4gICAgICBmb3IgKHZhciBqID0gMCwgbGVuaiA9IGRhdGFJbmRpY2VzLmxlbmd0aDsgaiA8IGxlbmo7IGorKykge1xuICAgICAgICB2YXIgZGF0YUluZGV4ID0gZGF0YUluZGljZXNbal07XG5cbiAgICAgICAgaWYgKG90aGVyRGF0YUluZGljZXMgJiYgb3RoZXJEYXRhSW5kaWNlc1tkYXRhSW5kZXhdKSB7XG4gICAgICAgICAgb3RoZXJEYXRhSW5kaWNlc1tkYXRhSW5kZXhdID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAobWFwW3Nlcmllc0lkXSB8fCAobWFwW3Nlcmllc0lkXSA9IHt9KSlbZGF0YUluZGV4XSA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtYXBUb0FycmF5KG1hcCwgaXNEYXRhKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSBpbiBtYXApIHtcbiAgICAgIGlmIChtYXAuaGFzT3duUHJvcGVydHkoaSkgJiYgbWFwW2ldICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzRGF0YSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKCtpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgZGF0YUluZGljZXMgPSBtYXBUb0FycmF5KG1hcFtpXSwgdHJ1ZSk7XG4gICAgICAgICAgZGF0YUluZGljZXMubGVuZ3RoICYmIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgIHNlcmllc0lkOiBpLFxuICAgICAgICAgICAgZGF0YUluZGV4OiBkYXRhSW5kaWNlc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuLyoqXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL2RhdGEvTGlzdH0gZGF0YVxuICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWQgQ29udGFpbnMgZGF0YUluZGV4IChtZWFucyByYXdJbmRleCkgLyBkYXRhSW5kZXhJbnNpZGUgLyBuYW1lXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBlYWNoIG9mIHdoaWNoIGNhbiBiZSBBcnJheSBvciBwcmltYXJ5IHR5cGUuXG4gKiBAcmV0dXJuIHtudW1iZXJ8QXJyYXkuPG51bWJlcj59IGRhdGFJbmRleCBJZiBub3QgZm91bmQsIHJldHVybiB1bmRlZmluZWQvbnVsbC5cbiAqL1xuXG5cbmZ1bmN0aW9uIHF1ZXJ5RGF0YUluZGV4KGRhdGEsIHBheWxvYWQpIHtcbiAgaWYgKHBheWxvYWQuZGF0YUluZGV4SW5zaWRlICE9IG51bGwpIHtcbiAgICByZXR1cm4gcGF5bG9hZC5kYXRhSW5kZXhJbnNpZGU7XG4gIH0gZWxzZSBpZiAocGF5bG9hZC5kYXRhSW5kZXggIT0gbnVsbCkge1xuICAgIHJldHVybiB6clV0aWwuaXNBcnJheShwYXlsb2FkLmRhdGFJbmRleCkgPyB6clV0aWwubWFwKHBheWxvYWQuZGF0YUluZGV4LCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBkYXRhLmluZGV4T2ZSYXdJbmRleCh2YWx1ZSk7XG4gICAgfSkgOiBkYXRhLmluZGV4T2ZSYXdJbmRleChwYXlsb2FkLmRhdGFJbmRleCk7XG4gIH0gZWxzZSBpZiAocGF5bG9hZC5uYW1lICE9IG51bGwpIHtcbiAgICByZXR1cm4genJVdGlsLmlzQXJyYXkocGF5bG9hZC5uYW1lKSA/IHpyVXRpbC5tYXAocGF5bG9hZC5uYW1lLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBkYXRhLmluZGV4T2ZOYW1lKHZhbHVlKTtcbiAgICB9KSA6IGRhdGEuaW5kZXhPZk5hbWUocGF5bG9hZC5uYW1lKTtcbiAgfVxufVxuLyoqXG4gKiBFbmFibGUgcHJvcGVydHkgc3RvcmFnZSB0byBhbnkgaG9zdCBvYmplY3QuXG4gKiBOb3RpY2U6IFNlcmlhbGl6YXRpb24gaXMgbm90IHN1cHBvcnRlZC5cbiAqXG4gKiBGb3IgZXhhbXBsZTpcbiAqIHZhciBpbm5lciA9IHpyVWl0bC5tYWtlSW5uZXIoKTtcbiAqXG4gKiBmdW5jdGlvbiBzb21lMShob3N0T2JqKSB7XG4gKiAgICAgIGlubmVyKGhvc3RPYmopLnNvbWVQcm9wZXJ0eSA9IDEyMTI7XG4gKiAgICAgIC4uLlxuICogfVxuICogZnVuY3Rpb24gc29tZTIoKSB7XG4gKiAgICAgIHZhciBmaWVsZHMgPSBpbm5lcih0aGlzKTtcbiAqICAgICAgZmllbGRzLnNvbWVQcm9wZXJ0eTEgPSAxMjEyO1xuICogICAgICBmaWVsZHMuc29tZVByb3BlcnR5MiA9ICd4eCc7XG4gKiAgICAgIC4uLlxuICogfVxuICpcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5cblxuZnVuY3Rpb24gbWFrZUlubmVyKCkge1xuICAvLyBDb25zaWRlciBkaWZmZXJlbnQgc2NvcGUgYnkgZXMgbW9kdWxlIGltcG9ydC5cbiAgdmFyIGtleSA9ICdfX1xcMGVjX2lubmVyXycgKyBpbm5lclVuaXF1ZUluZGV4KysgKyAnXycgKyBNYXRoLnJhbmRvbSgpLnRvRml4ZWQoNSk7XG4gIHJldHVybiBmdW5jdGlvbiAoaG9zdE9iaikge1xuICAgIHJldHVybiBob3N0T2JqW2tleV0gfHwgKGhvc3RPYmpba2V5XSA9IHt9KTtcbiAgfTtcbn1cblxudmFyIGlubmVyVW5pcXVlSW5kZXggPSAwO1xuLyoqXG4gKiBAcGFyYW0ge21vZHVsZTplY2hhcnRzL21vZGVsL0dsb2JhbH0gZWNNb2RlbFxuICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBmaW5kZXJcbiAqICAgICAgICBJZiBzdHJpbmcsIGUuZy4sICdnZW8nLCBtZWFucyB7Z2VvSW5kZXg6IDB9LlxuICogICAgICAgIElmIE9iamVjdCwgY291bGQgY29udGFpbiBzb21lIG9mIHRoZXNlIHByb3BlcnRpZXMgYmVsb3c6XG4gKiAgICAgICAge1xuICogICAgICAgICAgICBzZXJpZXNJbmRleCwgc2VyaWVzSWQsIHNlcmllc05hbWUsXG4gKiAgICAgICAgICAgIGdlb0luZGV4LCBnZW9JZCwgZ2VvTmFtZSxcbiAqICAgICAgICAgICAgYm1hcEluZGV4LCBibWFwSWQsIGJtYXBOYW1lLFxuICogICAgICAgICAgICB4QXhpc0luZGV4LCB4QXhpc0lkLCB4QXhpc05hbWUsXG4gKiAgICAgICAgICAgIHlBeGlzSW5kZXgsIHlBeGlzSWQsIHlBeGlzTmFtZSxcbiAqICAgICAgICAgICAgZ3JpZEluZGV4LCBncmlkSWQsIGdyaWROYW1lLFxuICogICAgICAgICAgICAuLi4gKGNhbiBiZSBleHRlbmRlZClcbiAqICAgICAgICB9XG4gKiAgICAgICAgRWFjaCBwcm9wZXJ0aWVzIGNhbiBiZSBudW1iZXJ8c3RyaW5nfEFycmF5LjxudW1iZXI+fEFycmF5LjxzdHJpbmc+XG4gKiAgICAgICAgRm9yIGV4YW1wbGUsIGEgZmluZGVyIGNvdWxkIGJlXG4gKiAgICAgICAge1xuICogICAgICAgICAgICBzZXJpZXNJbmRleDogMyxcbiAqICAgICAgICAgICAgZ2VvSWQ6IFsnYWEnLCAnY2MnXSxcbiAqICAgICAgICAgICAgZ3JpZE5hbWU6IFsneHgnLCAncnInXVxuICogICAgICAgIH1cbiAqICAgICAgICB4eHhJbmRleCBjYW4gYmUgc2V0IGFzICdhbGwnIChtZWFucyBhbGwgeHh4KSBvciAnbm9uZScgKG1lYW5zIG5vdCBzcGVjaWZ5KVxuICogICAgICAgIElmIG5vdGhpbmcgb3IgbnVsbC91bmRlZmluZWQgc3BlY2lmaWVkLCByZXR1cm4gbm90aGluZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0XVxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHQuZGVmYXVsdE1haW5UeXBlXVxuICogQHBhcmFtIHtBcnJheS48c3RyaW5nPn0gW29wdC5pbmNsdWRlTWFpblR5cGVzXVxuICogQHJldHVybiB7T2JqZWN0fSByZXN1bHQgbGlrZTpcbiAqICAgICAgICB7XG4gKiAgICAgICAgICAgIHNlcmllc01vZGVsczogW3Nlcmllc01vZGVsMSwgc2VyaWVzTW9kZWwyXSxcbiAqICAgICAgICAgICAgc2VyaWVzTW9kZWw6IHNlcmllc01vZGVsMSwgLy8gVGhlIGZpcnN0IG1vZGVsXG4gKiAgICAgICAgICAgIGdlb01vZGVsczogW2dlb01vZGVsMSwgZ2VvTW9kZWwyXSxcbiAqICAgICAgICAgICAgZ2VvTW9kZWw6IGdlb01vZGVsMSwgLy8gVGhlIGZpcnN0IG1vZGVsXG4gKiAgICAgICAgICAgIC4uLlxuICogICAgICAgIH1cbiAqL1xuXG5mdW5jdGlvbiBwYXJzZUZpbmRlcihlY01vZGVsLCBmaW5kZXIsIG9wdCkge1xuICBpZiAoenJVdGlsLmlzU3RyaW5nKGZpbmRlcikpIHtcbiAgICB2YXIgb2JqID0ge307XG4gICAgb2JqW2ZpbmRlciArICdJbmRleCddID0gMDtcbiAgICBmaW5kZXIgPSBvYmo7XG4gIH1cblxuICB2YXIgZGVmYXVsdE1haW5UeXBlID0gb3B0ICYmIG9wdC5kZWZhdWx0TWFpblR5cGU7XG5cbiAgaWYgKGRlZmF1bHRNYWluVHlwZSAmJiAhaGFzKGZpbmRlciwgZGVmYXVsdE1haW5UeXBlICsgJ0luZGV4JykgJiYgIWhhcyhmaW5kZXIsIGRlZmF1bHRNYWluVHlwZSArICdJZCcpICYmICFoYXMoZmluZGVyLCBkZWZhdWx0TWFpblR5cGUgKyAnTmFtZScpKSB7XG4gICAgZmluZGVyW2RlZmF1bHRNYWluVHlwZSArICdJbmRleCddID0gMDtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZWFjaChmaW5kZXIsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgdmFyIHZhbHVlID0gZmluZGVyW2tleV07IC8vIEV4Y2x1ZGUgJ2RhdGFJbmRleCcgYW5kIG90aGVyIGlsbGdhbCBrZXlzLlxuXG4gICAgaWYgKGtleSA9PT0gJ2RhdGFJbmRleCcgfHwga2V5ID09PSAnZGF0YUluZGV4SW5zaWRlJykge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcGFyc2VkS2V5ID0ga2V5Lm1hdGNoKC9eKFxcdyspKEluZGV4fElkfE5hbWUpJC8pIHx8IFtdO1xuICAgIHZhciBtYWluVHlwZSA9IHBhcnNlZEtleVsxXTtcbiAgICB2YXIgcXVlcnlUeXBlID0gKHBhcnNlZEtleVsyXSB8fCAnJykudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmICghbWFpblR5cGUgfHwgIXF1ZXJ5VHlwZSB8fCB2YWx1ZSA9PSBudWxsIHx8IHF1ZXJ5VHlwZSA9PT0gJ2luZGV4JyAmJiB2YWx1ZSA9PT0gJ25vbmUnIHx8IG9wdCAmJiBvcHQuaW5jbHVkZU1haW5UeXBlcyAmJiB6clV0aWwuaW5kZXhPZihvcHQuaW5jbHVkZU1haW5UeXBlcywgbWFpblR5cGUpIDwgMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBxdWVyeVBhcmFtID0ge1xuICAgICAgbWFpblR5cGU6IG1haW5UeXBlXG4gICAgfTtcblxuICAgIGlmIChxdWVyeVR5cGUgIT09ICdpbmRleCcgfHwgdmFsdWUgIT09ICdhbGwnKSB7XG4gICAgICBxdWVyeVBhcmFtW3F1ZXJ5VHlwZV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgbW9kZWxzID0gZWNNb2RlbC5xdWVyeUNvbXBvbmVudHMocXVlcnlQYXJhbSk7XG4gICAgcmVzdWx0W21haW5UeXBlICsgJ01vZGVscyddID0gbW9kZWxzO1xuICAgIHJlc3VsdFttYWluVHlwZSArICdNb2RlbCddID0gbW9kZWxzWzBdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gaGFzKG9iaiwgcHJvcCkge1xuICByZXR1cm4gb2JqICYmIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKTtcbn1cblxuZnVuY3Rpb24gc2V0QXR0cmlidXRlKGRvbSwga2V5LCB2YWx1ZSkge1xuICBkb20uc2V0QXR0cmlidXRlID8gZG9tLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKSA6IGRvbVtrZXldID0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZShkb20sIGtleSkge1xuICByZXR1cm4gZG9tLmdldEF0dHJpYnV0ZSA/IGRvbS5nZXRBdHRyaWJ1dGUoa2V5KSA6IGRvbVtrZXldO1xufVxuXG5leHBvcnRzLm5vcm1hbGl6ZVRvQXJyYXkgPSBub3JtYWxpemVUb0FycmF5O1xuZXhwb3J0cy5kZWZhdWx0RW1waGFzaXMgPSBkZWZhdWx0RW1waGFzaXM7XG5leHBvcnRzLlRFWFRfU1RZTEVfT1BUSU9OUyA9IFRFWFRfU1RZTEVfT1BUSU9OUztcbmV4cG9ydHMuZ2V0RGF0YUl0ZW1WYWx1ZSA9IGdldERhdGFJdGVtVmFsdWU7XG5leHBvcnRzLmlzRGF0YUl0ZW1PcHRpb24gPSBpc0RhdGFJdGVtT3B0aW9uO1xuZXhwb3J0cy5tYXBwaW5nVG9FeGlzdHMgPSBtYXBwaW5nVG9FeGlzdHM7XG5leHBvcnRzLm1ha2VJZEFuZE5hbWUgPSBtYWtlSWRBbmROYW1lO1xuZXhwb3J0cy5pc05hbWVTcGVjaWZpZWQgPSBpc05hbWVTcGVjaWZpZWQ7XG5leHBvcnRzLmlzSWRJbm5lciA9IGlzSWRJbm5lcjtcbmV4cG9ydHMuY29tcHJlc3NCYXRjaGVzID0gY29tcHJlc3NCYXRjaGVzO1xuZXhwb3J0cy5xdWVyeURhdGFJbmRleCA9IHF1ZXJ5RGF0YUluZGV4O1xuZXhwb3J0cy5tYWtlSW5uZXIgPSBtYWtlSW5uZXI7XG5leHBvcnRzLnBhcnNlRmluZGVyID0gcGFyc2VGaW5kZXI7XG5leHBvcnRzLnNldEF0dHJpYnV0ZSA9IHNldEF0dHJpYnV0ZTtcbmV4cG9ydHMuZ2V0QXR0cmlidXRlID0gZ2V0QXR0cmlidXRlOyIsInZhciB6clV0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgUkFESUFOX0VQU0lMT04gPSAxZS00O1xuXG5mdW5jdGlvbiBfdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKy8sICcnKS5yZXBsYWNlKC9cXHMrJC8sICcnKTtcbn1cbi8qKlxuICogTGluZWFyIG1hcHBpbmcgYSB2YWx1ZSBmcm9tIGRvbWFpbiB0byByYW5nZVxuICogQG1lbWJlck9mIG1vZHVsZTplY2hhcnRzL3V0aWwvbnVtYmVyXG4gKiBAcGFyYW0gIHsobnVtYmVyfEFycmF5LjxudW1iZXI+KX0gdmFsXG4gKiBAcGFyYW0gIHtBcnJheS48bnVtYmVyPn0gZG9tYWluIERvbWFpbiBleHRlbnQgZG9tYWluWzBdIGNhbiBiZSBiaWdnZXIgdGhhbiBkb21haW5bMV1cbiAqIEBwYXJhbSAge0FycmF5LjxudW1iZXI+fSByYW5nZSAgUmFuZ2UgZXh0ZW50IHJhbmdlWzBdIGNhbiBiZSBiaWdnZXIgdGhhbiByYW5nZVsxXVxuICogQHBhcmFtICB7Ym9vbGVhbn0gY2xhbXBcbiAqIEByZXR1cm4geyhudW1iZXJ8QXJyYXkuPG51bWJlcj59XG4gKi9cblxuXG5mdW5jdGlvbiBsaW5lYXJNYXAodmFsLCBkb21haW4sIHJhbmdlLCBjbGFtcCkge1xuICB2YXIgc3ViRG9tYWluID0gZG9tYWluWzFdIC0gZG9tYWluWzBdO1xuICB2YXIgc3ViUmFuZ2UgPSByYW5nZVsxXSAtIHJhbmdlWzBdO1xuXG4gIGlmIChzdWJEb21haW4gPT09IDApIHtcbiAgICByZXR1cm4gc3ViUmFuZ2UgPT09IDAgPyByYW5nZVswXSA6IChyYW5nZVswXSArIHJhbmdlWzFdKSAvIDI7XG4gIH0gLy8gQXZvaWQgYWNjdXJhY3kgcHJvYmxlbSBpbiBlZGdlLCBzdWNoIGFzXG4gIC8vIDE0Ni4zOSAtIDYyLjgzID09PSA4My41NTk5OTk5OTk5OTk5OS5cbiAgLy8gU2VlIGVjaGFydHMvdGVzdC91dC9zcGVjL3V0aWwvbnVtYmVyLmpzI2xpbmVhck1hcCNhY2N1cmFjeUVycm9yXG4gIC8vIEl0IGlzIGEgbGl0dGxlIHZlcmJvc2UgZm9yIGVmZmljaWVuY3kgY29uc2lkZXJpbmcgdGhpcyBtZXRob2RcbiAgLy8gaXMgYSBob3RzcG90LlxuXG5cbiAgaWYgKGNsYW1wKSB7XG4gICAgaWYgKHN1YkRvbWFpbiA+IDApIHtcbiAgICAgIGlmICh2YWwgPD0gZG9tYWluWzBdKSB7XG4gICAgICAgIHJldHVybiByYW5nZVswXTtcbiAgICAgIH0gZWxzZSBpZiAodmFsID49IGRvbWFpblsxXSkge1xuICAgICAgICByZXR1cm4gcmFuZ2VbMV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh2YWwgPj0gZG9tYWluWzBdKSB7XG4gICAgICAgIHJldHVybiByYW5nZVswXTtcbiAgICAgIH0gZWxzZSBpZiAodmFsIDw9IGRvbWFpblsxXSkge1xuICAgICAgICByZXR1cm4gcmFuZ2VbMV07XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2YWwgPT09IGRvbWFpblswXSkge1xuICAgICAgcmV0dXJuIHJhbmdlWzBdO1xuICAgIH1cblxuICAgIGlmICh2YWwgPT09IGRvbWFpblsxXSkge1xuICAgICAgcmV0dXJuIHJhbmdlWzFdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAodmFsIC0gZG9tYWluWzBdKSAvIHN1YkRvbWFpbiAqIHN1YlJhbmdlICsgcmFuZ2VbMF07XG59XG4vKipcbiAqIENvbnZlcnQgYSBwZXJjZW50IHN0cmluZyB0byBhYnNvbHV0ZSBudW1iZXIuXG4gKiBSZXR1cm5zIE5hTiBpZiBwZXJjZW50IGlzIG5vdCBhIHZhbGlkIHN0cmluZyBvciBudW1iZXJcbiAqIEBtZW1iZXJPZiBtb2R1bGU6ZWNoYXJ0cy91dGlsL251bWJlclxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBwZXJjZW50XG4gKiBAcGFyYW0ge251bWJlcn0gYWxsXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZVBlcmNlbnQocGVyY2VudCwgYWxsKSB7XG4gIHN3aXRjaCAocGVyY2VudCkge1xuICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgY2FzZSAnbWlkZGxlJzpcbiAgICAgIHBlcmNlbnQgPSAnNTAlJztcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnbGVmdCc6XG4gICAgY2FzZSAndG9wJzpcbiAgICAgIHBlcmNlbnQgPSAnMCUnO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdyaWdodCc6XG4gICAgY2FzZSAnYm90dG9tJzpcbiAgICAgIHBlcmNlbnQgPSAnMTAwJSc7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGlmICh0eXBlb2YgcGVyY2VudCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoX3RyaW0ocGVyY2VudCkubWF0Y2goLyUkLykpIHtcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KHBlcmNlbnQpIC8gMTAwICogYWxsO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZUZsb2F0KHBlcmNlbnQpO1xuICB9XG5cbiAgcmV0dXJuIHBlcmNlbnQgPT0gbnVsbCA/IE5hTiA6ICtwZXJjZW50O1xufVxuLyoqXG4gKiAoMSkgRml4IHJvdW5kaW5nIGVycm9yIG9mIGZsb2F0IG51bWJlcnMuXG4gKiAoMikgU3VwcG9ydCByZXR1cm4gc3RyaW5nIHRvIGF2b2lkIHNjaWVudGlmaWMgbm90YXRpb24gbGlrZSAnMy41ZS03Jy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0geFxuICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb25dXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXR1cm5TdHJdXG4gKiBAcmV0dXJuIHtudW1iZXJ8c3RyaW5nfVxuICovXG5cblxuZnVuY3Rpb24gcm91bmQoeCwgcHJlY2lzaW9uLCByZXR1cm5TdHIpIHtcbiAgaWYgKHByZWNpc2lvbiA9PSBudWxsKSB7XG4gICAgcHJlY2lzaW9uID0gMTA7XG4gIH0gLy8gQXZvaWQgcmFuZ2UgZXJyb3JcblxuXG4gIHByZWNpc2lvbiA9IE1hdGgubWluKE1hdGgubWF4KDAsIHByZWNpc2lvbiksIDIwKTtcbiAgeCA9ICgreCkudG9GaXhlZChwcmVjaXNpb24pO1xuICByZXR1cm4gcmV0dXJuU3RyID8geCA6ICt4O1xufVxuXG5mdW5jdGlvbiBhc2MoYXJyKSB7XG4gIGFyci5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGEgLSBiO1xuICB9KTtcbiAgcmV0dXJuIGFycjtcbn1cbi8qKlxuICogR2V0IHByZWNpc2lvblxuICogQHBhcmFtIHtudW1iZXJ9IHZhbFxuICovXG5cblxuZnVuY3Rpb24gZ2V0UHJlY2lzaW9uKHZhbCkge1xuICB2YWwgPSArdmFsO1xuXG4gIGlmIChpc05hTih2YWwpKSB7XG4gICAgcmV0dXJuIDA7XG4gIH0gLy8gSXQgaXMgbXVjaCBmYXN0ZXIgdGhhbiBtZXRob2RzIGNvbnZlcnRpbmcgbnVtYmVyIHRvIHN0cmluZyBhcyBmb2xsb3dzXG4gIC8vICAgICAgdmFyIHRtcCA9IHZhbC50b1N0cmluZygpO1xuICAvLyAgICAgIHJldHVybiB0bXAubGVuZ3RoIC0gMSAtIHRtcC5pbmRleE9mKCcuJyk7XG4gIC8vIGVzcGVjaWFsbHkgd2hlbiBwcmVjaXNpb24gaXMgbG93XG5cblxuICB2YXIgZSA9IDE7XG4gIHZhciBjb3VudCA9IDA7XG5cbiAgd2hpbGUgKE1hdGgucm91bmQodmFsICogZSkgLyBlICE9PSB2YWwpIHtcbiAgICBlICo9IDEwO1xuICAgIGNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gY291bnQ7XG59XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gdmFsXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuXG5mdW5jdGlvbiBnZXRQcmVjaXNpb25TYWZlKHZhbCkge1xuICB2YXIgc3RyID0gdmFsLnRvU3RyaW5nKCk7IC8vIENvbnNpZGVyIHNjaWVudGlmaWMgbm90YXRpb246ICczLjRlLTEyJyAnMy40ZSsxMidcblxuICB2YXIgZUluZGV4ID0gc3RyLmluZGV4T2YoJ2UnKTtcblxuICBpZiAoZUluZGV4ID4gMCkge1xuICAgIHZhciBwcmVjaXNpb24gPSArc3RyLnNsaWNlKGVJbmRleCArIDEpO1xuICAgIHJldHVybiBwcmVjaXNpb24gPCAwID8gLXByZWNpc2lvbiA6IDA7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGRvdEluZGV4ID0gc3RyLmluZGV4T2YoJy4nKTtcbiAgICByZXR1cm4gZG90SW5kZXggPCAwID8gMCA6IHN0ci5sZW5ndGggLSAxIC0gZG90SW5kZXg7XG4gIH1cbn1cbi8qKlxuICogTWluaW1hbCBkaWNlcm5pYmxlIGRhdGEgcHJlY2lzaW9pbiBhY2NvcmRpbmcgdG8gYSBzaW5nbGUgcGl4ZWwuXG4gKlxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gZGF0YUV4dGVudFxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gcGl4ZWxFeHRlbnRcbiAqIEByZXR1cm4ge251bWJlcn0gcHJlY2lzaW9uXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRQaXhlbFByZWNpc2lvbihkYXRhRXh0ZW50LCBwaXhlbEV4dGVudCkge1xuICB2YXIgbG9nID0gTWF0aC5sb2c7XG4gIHZhciBMTjEwID0gTWF0aC5MTjEwO1xuICB2YXIgZGF0YVF1YW50aXR5ID0gTWF0aC5mbG9vcihsb2coZGF0YUV4dGVudFsxXSAtIGRhdGFFeHRlbnRbMF0pIC8gTE4xMCk7XG4gIHZhciBzaXplUXVhbnRpdHkgPSBNYXRoLnJvdW5kKGxvZyhNYXRoLmFicyhwaXhlbEV4dGVudFsxXSAtIHBpeGVsRXh0ZW50WzBdKSkgLyBMTjEwKTsgLy8gdG9GaXhlZCgpIGRpZ2l0cyBhcmd1bWVudCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMjAuXG5cbiAgdmFyIHByZWNpc2lvbiA9IE1hdGgubWluKE1hdGgubWF4KC1kYXRhUXVhbnRpdHkgKyBzaXplUXVhbnRpdHksIDApLCAyMCk7XG4gIHJldHVybiAhaXNGaW5pdGUocHJlY2lzaW9uKSA/IDIwIDogcHJlY2lzaW9uO1xufVxuLyoqXG4gKiBHZXQgYSBkYXRhIG9mIGdpdmVuIHByZWNpc2lvbiwgYXNzdXJpbmcgdGhlIHN1bSBvZiBwZXJjZW50YWdlc1xuICogaW4gdmFsdWVMaXN0IGlzIDEuXG4gKiBUaGUgbGFyZ2VzdCByZW1haW5lciBtZXRob2QgaXMgdXNlZC5cbiAqIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhcmdlc3RfcmVtYWluZGVyX21ldGhvZFxuICpcbiAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IHZhbHVlTGlzdCBhIGxpc3Qgb2YgYWxsIGRhdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBpZHggaW5kZXggb2YgdGhlIGRhdGEgdG8gYmUgcHJvY2Vzc2VkIGluIHZhbHVlTGlzdFxuICogQHBhcmFtIHtudW1iZXJ9IHByZWNpc2lvbiBpbnRlZ2VyIG51bWJlciBzaG93aW5nIGRpZ2l0cyBvZiBwcmVjaXNpb25cbiAqIEByZXR1cm4ge251bWJlcn0gcGVyY2VudCByYW5naW5nIGZyb20gMCB0byAxMDBcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFBlcmNlbnRXaXRoUHJlY2lzaW9uKHZhbHVlTGlzdCwgaWR4LCBwcmVjaXNpb24pIHtcbiAgaWYgKCF2YWx1ZUxpc3RbaWR4XSkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFyIHN1bSA9IHpyVXRpbC5yZWR1Y2UodmFsdWVMaXN0LCBmdW5jdGlvbiAoYWNjLCB2YWwpIHtcbiAgICByZXR1cm4gYWNjICsgKGlzTmFOKHZhbCkgPyAwIDogdmFsKTtcbiAgfSwgMCk7XG5cbiAgaWYgKHN1bSA9PT0gMCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFyIGRpZ2l0cyA9IE1hdGgucG93KDEwLCBwcmVjaXNpb24pO1xuICB2YXIgdm90ZXNQZXJRdW90YSA9IHpyVXRpbC5tYXAodmFsdWVMaXN0LCBmdW5jdGlvbiAodmFsKSB7XG4gICAgcmV0dXJuIChpc05hTih2YWwpID8gMCA6IHZhbCkgLyBzdW0gKiBkaWdpdHMgKiAxMDA7XG4gIH0pO1xuICB2YXIgdGFyZ2V0U2VhdHMgPSBkaWdpdHMgKiAxMDA7XG4gIHZhciBzZWF0cyA9IHpyVXRpbC5tYXAodm90ZXNQZXJRdW90YSwgZnVuY3Rpb24gKHZvdGVzKSB7XG4gICAgLy8gQXNzaWduIGF1dG9tYXRpYyBzZWF0cy5cbiAgICByZXR1cm4gTWF0aC5mbG9vcih2b3Rlcyk7XG4gIH0pO1xuICB2YXIgY3VycmVudFN1bSA9IHpyVXRpbC5yZWR1Y2Uoc2VhdHMsIGZ1bmN0aW9uIChhY2MsIHZhbCkge1xuICAgIHJldHVybiBhY2MgKyB2YWw7XG4gIH0sIDApO1xuICB2YXIgcmVtYWluZGVyID0genJVdGlsLm1hcCh2b3Rlc1BlclF1b3RhLCBmdW5jdGlvbiAodm90ZXMsIGlkeCkge1xuICAgIHJldHVybiB2b3RlcyAtIHNlYXRzW2lkeF07XG4gIH0pOyAvLyBIYXMgcmVtYWluZGluZyB2b3Rlcy5cblxuICB3aGlsZSAoY3VycmVudFN1bSA8IHRhcmdldFNlYXRzKSB7XG4gICAgLy8gRmluZCBuZXh0IGxhcmdlc3QgcmVtYWluZGVyLlxuICAgIHZhciBtYXggPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG4gICAgdmFyIG1heElkID0gbnVsbDtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByZW1haW5kZXIubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGlmIChyZW1haW5kZXJbaV0gPiBtYXgpIHtcbiAgICAgICAgbWF4ID0gcmVtYWluZGVyW2ldO1xuICAgICAgICBtYXhJZCA9IGk7XG4gICAgICB9XG4gICAgfSAvLyBBZGQgYSB2b3RlIHRvIG1heCByZW1haW5kZXIuXG5cblxuICAgICsrc2VhdHNbbWF4SWRdO1xuICAgIHJlbWFpbmRlclttYXhJZF0gPSAwO1xuICAgICsrY3VycmVudFN1bTtcbiAgfVxuXG4gIHJldHVybiBzZWF0c1tpZHhdIC8gZGlnaXRzO1xufSAvLyBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiwgaWUgZG8gbm90IHN1cHBvcnQuXG5cblxudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuLyoqXG4gKiBUbyAwIC0gMiAqIFBJLCBjb25zaWRlcmluZyBuZWdhdGl2ZSByYWRpYW4uXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkaWFuXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuZnVuY3Rpb24gcmVtUmFkaWFuKHJhZGlhbikge1xuICB2YXIgcGkyID0gTWF0aC5QSSAqIDI7XG4gIHJldHVybiAocmFkaWFuICUgcGkyICsgcGkyKSAlIHBpMjtcbn1cbi8qKlxuICogQHBhcmFtIHt0eXBlfSByYWRpYW5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cblxuXG5mdW5jdGlvbiBpc1JhZGlhbkFyb3VuZFplcm8odmFsKSB7XG4gIHJldHVybiB2YWwgPiAtUkFESUFOX0VQU0lMT04gJiYgdmFsIDwgUkFESUFOX0VQU0lMT047XG59XG5cbnZhciBUSU1FX1JFRyA9IC9eKD86KFxcZHs0fSkoPzpbLVxcL10oXFxkezEsMn0pKD86Wy1cXC9dKFxcZHsxLDJ9KSg/OltUIF0oXFxkezEsMn0pKD86OihcXGRcXGQpKD86OihcXGRcXGQpKD86Wy4sXShcXGQrKSk/KT8pPyhafFtcXCtcXC1dXFxkXFxkOj9cXGRcXGQpPyk/KT8pPyk/JC87IC8vIGpzaGludCBpZ25vcmU6bGluZVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfERhdGV8bnVtYmVyfSB2YWx1ZSBUaGVzZSB2YWx1ZXMgY2FuIGJlIGFjY2VwdGVkOlxuICogICArIEFuIGluc3RhbmNlIG9mIERhdGUsIHJlcHJlc2VudCBhIHRpbWUgaW4gaXRzIG93biB0aW1lIHpvbmUuXG4gKiAgICsgT3Igc3RyaW5nIGluIGEgc3Vic2V0IG9mIElTTyA4NjAxLCBvbmx5IGluY2x1ZGluZzpcbiAqICAgICArIG9ubHkgeWVhciwgbW9udGgsIGRhdGU6ICcyMDEyLTAzJywgJzIwMTItMDMtMDEnLCAnMjAxMi0wMy0wMSAwNScsICcyMDEyLTAzLTAxIDA1OjA2JyxcbiAqICAgICArIHNlcGFyYXRlZCB3aXRoIFQgb3Igc3BhY2U6ICcyMDEyLTAzLTAxVDEyOjIyOjMzLjEyMycsICcyMDEyLTAzLTAxIDEyOjIyOjMzLjEyMycsXG4gKiAgICAgKyB0aW1lIHpvbmU6ICcyMDEyLTAzLTAxVDEyOjIyOjMzWicsICcyMDEyLTAzLTAxVDEyOjIyOjMzKzgwMDAnLCAnMjAxMi0wMy0wMVQxMjoyMjozMy0wNTowMCcsXG4gKiAgICAgYWxsIG9mIHdoaWNoIHdpbGwgYmUgdHJlYXRlZCBhcyBsb2NhbCB0aW1lIGlmIHRpbWUgem9uZSBpcyBub3Qgc3BlY2lmaWVkXG4gKiAgICAgKHNlZSA8aHR0cHM6Ly9tb21lbnRqcy5jb20vPikuXG4gKiAgICsgT3Igb3RoZXIgc3RyaW5nIGZvcm1hdCwgaW5jbHVkaW5nIChhbGwgb2Ygd2hpY2ggd2lsbCBiZSB0cmVhdGVkIGFzIGxvYWNhbCB0aW1lKTpcbiAqICAgICAnMjAxMicsICcyMDEyLTMtMScsICcyMDEyLzMvMScsICcyMDEyLzAzLzAxJyxcbiAqICAgICAnMjAwOS82LzEyIDI6MDAnLCAnMjAwOS82LzEyIDI6MDU6MDgnLCAnMjAwOS82LzEyIDI6MDU6MDguMTIzJ1xuICogICArIGEgdGltZXN0YW1wLCB3aGljaCByZXByZXNlbnQgYSB0aW1lIGluIFVUQy5cbiAqIEByZXR1cm4ge0RhdGV9IGRhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZURhdGUodmFsdWUpIHtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gRGlmZmVyZW50IGJyb3dzZXJzIHBhcnNlIGRhdGUgaW4gZGlmZmVyZW50IHdheSwgc28gd2UgcGFyc2UgaXQgbWFudWFsbHkuXG4gICAgLy8gU29tZSBvdGhlciBpc3N1ZXM6XG4gICAgLy8gbmV3IERhdGUoJzE5NzAtMDEtMDEnKSBpcyBVVEMsXG4gICAgLy8gbmV3IERhdGUoJzE5NzAvMDEvMDEnKSBhbmQgbmV3IERhdGUoJzE5NzAtMS0wMScpIGlzIGxvY2FsLlxuICAgIC8vIFNlZSBpc3N1ZSAjMzYyM1xuICAgIHZhciBtYXRjaCA9IFRJTUVfUkVHLmV4ZWModmFsdWUpO1xuXG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgLy8gcmV0dXJuIEludmFsaWQgRGF0ZS5cbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH0gLy8gVXNlIGxvY2FsIHRpbWUgd2hlbiBubyB0aW1lem9uZSBvZmZzZXQgc3BlY2lmZWQuXG5cblxuICAgIGlmICghbWF0Y2hbOF0pIHtcbiAgICAgIC8vIG1hdGNoW25dIGNhbiBvbmx5IGJlIHN0cmluZyBvciB1bmRlZmluZWQuXG4gICAgICAvLyBCdXQgdGFrZSBjYXJlIG9mICcxMicgKyAxID0+ICcxMjEnLlxuICAgICAgcmV0dXJuIG5ldyBEYXRlKCttYXRjaFsxXSwgKyhtYXRjaFsyXSB8fCAxKSAtIDEsICttYXRjaFszXSB8fCAxLCArbWF0Y2hbNF0gfHwgMCwgKyhtYXRjaFs1XSB8fCAwKSwgK21hdGNoWzZdIHx8IDAsICttYXRjaFs3XSB8fCAwKTtcbiAgICB9IC8vIFRpbWV6b25lb2Zmc2V0IG9mIEphdmFzY3JpcHQgRGF0ZSBoYXMgY29uc2lkZXJlZCBEU1QgKERheWxpZ2h0IFNhdmluZyBUaW1lLFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWRheWxpZ2h0LXNhdmluZy10aW1lLWFkanVzdG1lbnQpLlxuICAgIC8vIEZvciBleGFtcGxlLCBzeXN0ZW0gdGltZXpvbmUgaXMgc2V0IGFzIFwiVGltZSBab25lOiBBbWVyaWNhL1Rvcm9udG9cIixcbiAgICAvLyB0aGVuIHRoZXNlIGNvZGUgd2lsbCBnZXQgZGlmZmVyZW50IHJlc3VsdDpcbiAgICAvLyBgbmV3IERhdGUoMTQ3ODQxMTk5OTk5OSkuZ2V0VGltZXpvbmVPZmZzZXQoKTsgIC8vIGdldCAyNDBgXG4gICAgLy8gYG5ldyBEYXRlKDE0Nzg0MTIwMDAwMDApLmdldFRpbWV6b25lT2Zmc2V0KCk7ICAvLyBnZXQgMzAwYFxuICAgIC8vIFNvIHdlIHNob3VsZCBub3QgdXNlIGBuZXcgRGF0ZWAsIGJ1dCB1c2UgYERhdGUuVVRDYC5cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGhvdXIgPSArbWF0Y2hbNF0gfHwgMDtcblxuICAgICAgICBpZiAobWF0Y2hbOF0udG9VcHBlckNhc2UoKSAhPT0gJ1onKSB7XG4gICAgICAgICAgaG91ciAtPSBtYXRjaFs4XS5zbGljZSgwLCAzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQygrbWF0Y2hbMV0sICsobWF0Y2hbMl0gfHwgMSkgLSAxLCArbWF0Y2hbM10gfHwgMSwgaG91ciwgKyhtYXRjaFs1XSB8fCAwKSwgK21hdGNoWzZdIHx8IDAsICttYXRjaFs3XSB8fCAwKSk7XG4gICAgICB9XG4gIH0gZWxzZSBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBEYXRlKE1hdGgucm91bmQodmFsdWUpKTtcbn1cbi8qKlxuICogUXVhbnRpdHkgb2YgYSBudW1iZXIuIGUuZy4gMC4xLCAxLCAxMCwgMTAwXG4gKlxuICogQHBhcmFtICB7bnVtYmVyfSB2YWxcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuXG5cbmZ1bmN0aW9uIHF1YW50aXR5KHZhbCkge1xuICByZXR1cm4gTWF0aC5wb3coMTAsIHF1YW50aXR5RXhwb25lbnQodmFsKSk7XG59XG5cbmZ1bmN0aW9uIHF1YW50aXR5RXhwb25lbnQodmFsKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgubG9nKHZhbCkgLyBNYXRoLkxOMTApO1xufVxuLyoqXG4gKiBmaW5kIGEg4oCcbmljZeKAnSBudW1iZXIgYXBwcm94aW1hdGVseSBlcXVhbCB0byB4LiBSb3VuZCB0aGUgbnVtYmVyIGlmIHJvdW5kID0gdHJ1ZSxcbiAqIHRha2UgY2VpbGluZyBpZiByb3VuZCA9IGZhbHNlLiBUaGUgcHJpbWFyeSBvYnNlcnZhdGlvbiBpcyB0aGF0IHRoZSDigJxuaWNlc3TigJ1cbiAqIG51bWJlcnMgaW4gZGVjaW1hbCBhcmUgMSwgMiwgYW5kIDUsIGFuZCBhbGwgcG93ZXItb2YtdGVuIG11bHRpcGxlcyBvZiB0aGVzZSBudW1iZXJzLlxuICpcbiAqIFNlZSBcIk5pY2UgTnVtYmVycyBmb3IgR3JhcGggTGFiZWxzXCIgb2YgR3JhcGhpYyBHZW1zLlxuICpcbiAqIEBwYXJhbSAge251bWJlcn0gdmFsIE5vbi1uZWdhdGl2ZSB2YWx1ZS5cbiAqIEBwYXJhbSAge2Jvb2xlYW59IHJvdW5kXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuXG5mdW5jdGlvbiBuaWNlKHZhbCwgcm91bmQpIHtcbiAgdmFyIGV4cG9uZW50ID0gcXVhbnRpdHlFeHBvbmVudCh2YWwpO1xuICB2YXIgZXhwMTAgPSBNYXRoLnBvdygxMCwgZXhwb25lbnQpO1xuICB2YXIgZiA9IHZhbCAvIGV4cDEwOyAvLyAxIDw9IGYgPCAxMFxuXG4gIHZhciBuZjtcblxuICBpZiAocm91bmQpIHtcbiAgICBpZiAoZiA8IDEuNSkge1xuICAgICAgbmYgPSAxO1xuICAgIH0gZWxzZSBpZiAoZiA8IDIuNSkge1xuICAgICAgbmYgPSAyO1xuICAgIH0gZWxzZSBpZiAoZiA8IDQpIHtcbiAgICAgIG5mID0gMztcbiAgICB9IGVsc2UgaWYgKGYgPCA3KSB7XG4gICAgICBuZiA9IDU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5mID0gMTA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChmIDwgMSkge1xuICAgICAgbmYgPSAxO1xuICAgIH0gZWxzZSBpZiAoZiA8IDIpIHtcbiAgICAgIG5mID0gMjtcbiAgICB9IGVsc2UgaWYgKGYgPCAzKSB7XG4gICAgICBuZiA9IDM7XG4gICAgfSBlbHNlIGlmIChmIDwgNSkge1xuICAgICAgbmYgPSA1O1xuICAgIH0gZWxzZSB7XG4gICAgICBuZiA9IDEwO1xuICAgIH1cbiAgfVxuXG4gIHZhbCA9IG5mICogZXhwMTA7IC8vIEZpeCAzICogMC4xID09PSAwLjMwMDAwMDAwMDAwMDAwMDA0IGlzc3VlIChzZWUgSUVFRSA3NTQpLlxuICAvLyAyMCBpcyB0aGUgdXBwcGVyIGJvdW5kIG9mIHRvRml4ZWQuXG5cbiAgcmV0dXJuIGV4cG9uZW50ID49IC0yMCA/ICt2YWwudG9GaXhlZChleHBvbmVudCA8IDAgPyAtZXhwb25lbnQgOiAwKSA6IHZhbDtcbn1cbi8qKlxuICogT3JkZXIgaW50ZXJ2YWxzIGFzYywgYW5kIHNwbGl0IHRoZW0gd2hlbiBvdmVybGFwLlxuICogZXhwZWN0KG51bWJlclV0aWwucmVmb3JtSW50ZXJ2YWxzKFtcbiAqICAgICB7aW50ZXJ2YWw6IFsxOCwgNjJdLCBjbG9zZTogWzEsIDFdfSxcbiAqICAgICB7aW50ZXJ2YWw6IFstSW5maW5pdHksIC03MF0sIGNsb3NlOiBbMCwgMF19LFxuICogICAgIHtpbnRlcnZhbDogWy03MCwgLTI2XSwgY2xvc2U6IFsxLCAxXX0sXG4gKiAgICAge2ludGVydmFsOiBbLTI2LCAxOF0sIGNsb3NlOiBbMSwgMV19LFxuICogICAgIHtpbnRlcnZhbDogWzYyLCAxNTBdLCBjbG9zZTogWzEsIDFdfSxcbiAqICAgICB7aW50ZXJ2YWw6IFsxMDYsIDE1MF0sIGNsb3NlOiBbMSwgMV19LFxuICogICAgIHtpbnRlcnZhbDogWzE1MCwgSW5maW5pdHldLCBjbG9zZTogWzAsIDBdfVxuICogXSkpLnRvRXF1YWwoW1xuICogICAgIHtpbnRlcnZhbDogWy1JbmZpbml0eSwgLTcwXSwgY2xvc2U6IFswLCAwXX0sXG4gKiAgICAge2ludGVydmFsOiBbLTcwLCAtMjZdLCBjbG9zZTogWzEsIDFdfSxcbiAqICAgICB7aW50ZXJ2YWw6IFstMjYsIDE4XSwgY2xvc2U6IFswLCAxXX0sXG4gKiAgICAge2ludGVydmFsOiBbMTgsIDYyXSwgY2xvc2U6IFswLCAxXX0sXG4gKiAgICAge2ludGVydmFsOiBbNjIsIDE1MF0sIGNsb3NlOiBbMCwgMV19LFxuICogICAgIHtpbnRlcnZhbDogWzE1MCwgSW5maW5pdHldLCBjbG9zZTogWzAsIDBdfVxuICogXSk7XG4gKiBAcGFyYW0ge0FycmF5LjxPYmplY3Q+fSBsaXN0LCB3aGVyZSBgY2xvc2VgIG1lYW4gb3BlbiBvciBjbG9zZVxuICogICAgICAgIG9mIHRoZSBpbnRlcnZhbCwgYW5kIEluZmluaXR5IGNhbiBiZSB1c2VkLlxuICogQHJldHVybiB7QXJyYXkuPE9iamVjdD59IFRoZSBvcmlnaW4gbGlzdCwgd2hpY2ggaGFzIGJlZW4gcmVmb3JtZWQuXG4gKi9cblxuXG5mdW5jdGlvbiByZWZvcm1JbnRlcnZhbHMobGlzdCkge1xuICBsaXN0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gbGl0dGxlVGhhbihhLCBiLCAwKSA/IC0xIDogMTtcbiAgfSk7XG4gIHZhciBjdXJyID0gLUluZmluaXR5O1xuICB2YXIgY3VyckNsb3NlID0gMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOykge1xuICAgIHZhciBpbnRlcnZhbCA9IGxpc3RbaV0uaW50ZXJ2YWw7XG4gICAgdmFyIGNsb3NlID0gbGlzdFtpXS5jbG9zZTtcblxuICAgIGZvciAodmFyIGxnID0gMDsgbGcgPCAyOyBsZysrKSB7XG4gICAgICBpZiAoaW50ZXJ2YWxbbGddIDw9IGN1cnIpIHtcbiAgICAgICAgaW50ZXJ2YWxbbGddID0gY3VycjtcbiAgICAgICAgY2xvc2VbbGddID0gIWxnID8gMSAtIGN1cnJDbG9zZSA6IDE7XG4gICAgICB9XG5cbiAgICAgIGN1cnIgPSBpbnRlcnZhbFtsZ107XG4gICAgICBjdXJyQ2xvc2UgPSBjbG9zZVtsZ107XG4gICAgfVxuXG4gICAgaWYgKGludGVydmFsWzBdID09PSBpbnRlcnZhbFsxXSAmJiBjbG9zZVswXSAqIGNsb3NlWzFdICE9PSAxKSB7XG4gICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaSsrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsaXN0O1xuXG4gIGZ1bmN0aW9uIGxpdHRsZVRoYW4oYSwgYiwgbGcpIHtcbiAgICByZXR1cm4gYS5pbnRlcnZhbFtsZ10gPCBiLmludGVydmFsW2xnXSB8fCBhLmludGVydmFsW2xnXSA9PT0gYi5pbnRlcnZhbFtsZ10gJiYgKGEuY2xvc2VbbGddIC0gYi5jbG9zZVtsZ10gPT09ICghbGcgPyAxIDogLTEpIHx8ICFsZyAmJiBsaXR0bGVUaGFuKGEsIGIsIDEpKTtcbiAgfVxufVxuLyoqXG4gKiBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAobnVsbHx0cnVlfGZhbHNlfFwiXCIpXG4gKiAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG4gKiBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cbiAqXG4gKiBAcGFyYW0geyp9IHZcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cblxuXG5mdW5jdGlvbiBpc051bWVyaWModikge1xuICByZXR1cm4gdiAtIHBhcnNlRmxvYXQodikgPj0gMDtcbn1cblxuZXhwb3J0cy5saW5lYXJNYXAgPSBsaW5lYXJNYXA7XG5leHBvcnRzLnBhcnNlUGVyY2VudCA9IHBhcnNlUGVyY2VudDtcbmV4cG9ydHMucm91bmQgPSByb3VuZDtcbmV4cG9ydHMuYXNjID0gYXNjO1xuZXhwb3J0cy5nZXRQcmVjaXNpb24gPSBnZXRQcmVjaXNpb247XG5leHBvcnRzLmdldFByZWNpc2lvblNhZmUgPSBnZXRQcmVjaXNpb25TYWZlO1xuZXhwb3J0cy5nZXRQaXhlbFByZWNpc2lvbiA9IGdldFBpeGVsUHJlY2lzaW9uO1xuZXhwb3J0cy5nZXRQZXJjZW50V2l0aFByZWNpc2lvbiA9IGdldFBlcmNlbnRXaXRoUHJlY2lzaW9uO1xuZXhwb3J0cy5NQVhfU0FGRV9JTlRFR0VSID0gTUFYX1NBRkVfSU5URUdFUjtcbmV4cG9ydHMucmVtUmFkaWFuID0gcmVtUmFkaWFuO1xuZXhwb3J0cy5pc1JhZGlhbkFyb3VuZFplcm8gPSBpc1JhZGlhbkFyb3VuZFplcm87XG5leHBvcnRzLnBhcnNlRGF0ZSA9IHBhcnNlRGF0ZTtcbmV4cG9ydHMucXVhbnRpdHkgPSBxdWFudGl0eTtcbmV4cG9ydHMubmljZSA9IG5pY2U7XG5leHBvcnRzLnJlZm9ybUludGVydmFscyA9IHJlZm9ybUludGVydmFscztcbmV4cG9ydHMuaXNOdW1lcmljID0gaXNOdW1lcmljOyIsInZhciB6clV0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgZ3JhcGhpYyA9IHJlcXVpcmUoXCIuL2dyYXBoaWNcIik7XG5cbnZhciBCb3VuZGluZ1JlY3QgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS9Cb3VuZGluZ1JlY3RcIik7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbi8vIFN5bWJvbCBmYWN0b3J5XG5cbi8qKlxuICogVHJpYW5nbGUgc2hhcGVcbiAqIEBpbm5lclxuICovXG52YXIgVHJpYW5nbGUgPSBncmFwaGljLmV4dGVuZFNoYXBlKHtcbiAgdHlwZTogJ3RyaWFuZ2xlJyxcbiAgc2hhcGU6IHtcbiAgICBjeDogMCxcbiAgICBjeTogMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDBcbiAgfSxcbiAgYnVpbGRQYXRoOiBmdW5jdGlvbiAocGF0aCwgc2hhcGUpIHtcbiAgICB2YXIgY3ggPSBzaGFwZS5jeDtcbiAgICB2YXIgY3kgPSBzaGFwZS5jeTtcbiAgICB2YXIgd2lkdGggPSBzaGFwZS53aWR0aCAvIDI7XG4gICAgdmFyIGhlaWdodCA9IHNoYXBlLmhlaWdodCAvIDI7XG4gICAgcGF0aC5tb3ZlVG8oY3gsIGN5IC0gaGVpZ2h0KTtcbiAgICBwYXRoLmxpbmVUbyhjeCArIHdpZHRoLCBjeSArIGhlaWdodCk7XG4gICAgcGF0aC5saW5lVG8oY3ggLSB3aWR0aCwgY3kgKyBoZWlnaHQpO1xuICAgIHBhdGguY2xvc2VQYXRoKCk7XG4gIH1cbn0pO1xuLyoqXG4gKiBEaWFtb25kIHNoYXBlXG4gKiBAaW5uZXJcbiAqL1xuXG52YXIgRGlhbW9uZCA9IGdyYXBoaWMuZXh0ZW5kU2hhcGUoe1xuICB0eXBlOiAnZGlhbW9uZCcsXG4gIHNoYXBlOiB7XG4gICAgY3g6IDAsXG4gICAgY3k6IDAsXG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwXG4gIH0sXG4gIGJ1aWxkUGF0aDogZnVuY3Rpb24gKHBhdGgsIHNoYXBlKSB7XG4gICAgdmFyIGN4ID0gc2hhcGUuY3g7XG4gICAgdmFyIGN5ID0gc2hhcGUuY3k7XG4gICAgdmFyIHdpZHRoID0gc2hhcGUud2lkdGggLyAyO1xuICAgIHZhciBoZWlnaHQgPSBzaGFwZS5oZWlnaHQgLyAyO1xuICAgIHBhdGgubW92ZVRvKGN4LCBjeSAtIGhlaWdodCk7XG4gICAgcGF0aC5saW5lVG8oY3ggKyB3aWR0aCwgY3kpO1xuICAgIHBhdGgubGluZVRvKGN4LCBjeSArIGhlaWdodCk7XG4gICAgcGF0aC5saW5lVG8oY3ggLSB3aWR0aCwgY3kpO1xuICAgIHBhdGguY2xvc2VQYXRoKCk7XG4gIH1cbn0pO1xuLyoqXG4gKiBQaW4gc2hhcGVcbiAqIEBpbm5lclxuICovXG5cbnZhciBQaW4gPSBncmFwaGljLmV4dGVuZFNoYXBlKHtcbiAgdHlwZTogJ3BpbicsXG4gIHNoYXBlOiB7XG4gICAgLy8geCwgeSBvbiB0aGUgY3VzcFxuICAgIHg6IDAsXG4gICAgeTogMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDBcbiAgfSxcbiAgYnVpbGRQYXRoOiBmdW5jdGlvbiAocGF0aCwgc2hhcGUpIHtcbiAgICB2YXIgeCA9IHNoYXBlLng7XG4gICAgdmFyIHkgPSBzaGFwZS55O1xuICAgIHZhciB3ID0gc2hhcGUud2lkdGggLyA1ICogMzsgLy8gSGVpZ2h0IG11c3QgYmUgbGFyZ2VyIHRoYW4gd2lkdGhcblxuICAgIHZhciBoID0gTWF0aC5tYXgodywgc2hhcGUuaGVpZ2h0KTtcbiAgICB2YXIgciA9IHcgLyAyOyAvLyBEaXN0IG9uIHkgd2l0aCB0YW5nZW50IHBvaW50IGFuZCBjaXJjbGUgY2VudGVyXG5cbiAgICB2YXIgZHkgPSByICogciAvIChoIC0gcik7XG4gICAgdmFyIGN5ID0geSAtIGggKyByICsgZHk7XG4gICAgdmFyIGFuZ2xlID0gTWF0aC5hc2luKGR5IC8gcik7IC8vIERpc3Qgb24geCB3aXRoIHRhbmdlbnQgcG9pbnQgYW5kIGNpcmNsZSBjZW50ZXJcblxuICAgIHZhciBkeCA9IE1hdGguY29zKGFuZ2xlKSAqIHI7XG4gICAgdmFyIHRhblggPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgdmFyIHRhblkgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgdmFyIGNwTGVuID0gciAqIDAuNjtcbiAgICB2YXIgY3BMZW4yID0gciAqIDAuNztcbiAgICBwYXRoLm1vdmVUbyh4IC0gZHgsIGN5ICsgZHkpO1xuICAgIHBhdGguYXJjKHgsIGN5LCByLCBNYXRoLlBJIC0gYW5nbGUsIE1hdGguUEkgKiAyICsgYW5nbGUpO1xuICAgIHBhdGguYmV6aWVyQ3VydmVUbyh4ICsgZHggLSB0YW5YICogY3BMZW4sIGN5ICsgZHkgKyB0YW5ZICogY3BMZW4sIHgsIHkgLSBjcExlbjIsIHgsIHkpO1xuICAgIHBhdGguYmV6aWVyQ3VydmVUbyh4LCB5IC0gY3BMZW4yLCB4IC0gZHggKyB0YW5YICogY3BMZW4sIGN5ICsgZHkgKyB0YW5ZICogY3BMZW4sIHggLSBkeCwgY3kgKyBkeSk7XG4gICAgcGF0aC5jbG9zZVBhdGgoKTtcbiAgfVxufSk7XG4vKipcbiAqIEFycm93IHNoYXBlXG4gKiBAaW5uZXJcbiAqL1xuXG52YXIgQXJyb3cgPSBncmFwaGljLmV4dGVuZFNoYXBlKHtcbiAgdHlwZTogJ2Fycm93JyxcbiAgc2hhcGU6IHtcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwXG4gIH0sXG4gIGJ1aWxkUGF0aDogZnVuY3Rpb24gKGN0eCwgc2hhcGUpIHtcbiAgICB2YXIgaGVpZ2h0ID0gc2hhcGUuaGVpZ2h0O1xuICAgIHZhciB3aWR0aCA9IHNoYXBlLndpZHRoO1xuICAgIHZhciB4ID0gc2hhcGUueDtcbiAgICB2YXIgeSA9IHNoYXBlLnk7XG4gICAgdmFyIGR4ID0gd2lkdGggLyAzICogMjtcbiAgICBjdHgubW92ZVRvKHgsIHkpO1xuICAgIGN0eC5saW5lVG8oeCArIGR4LCB5ICsgaGVpZ2h0KTtcbiAgICBjdHgubGluZVRvKHgsIHkgKyBoZWlnaHQgLyA0ICogMyk7XG4gICAgY3R4LmxpbmVUbyh4IC0gZHgsIHkgKyBoZWlnaHQpO1xuICAgIGN0eC5saW5lVG8oeCwgeSk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICB9XG59KTtcbi8qKlxuICogTWFwIG9mIHBhdGggY29udHJ1Y3RvcnNcbiAqIEB0eXBlIHtPYmplY3QuPHN0cmluZywgbW9kdWxlOnpyZW5kZXIvZ3JhcGhpYy9QYXRoPn1cbiAqL1xuXG52YXIgc3ltYm9sQ3RvcnMgPSB7XG4gIGxpbmU6IGdyYXBoaWMuTGluZSxcbiAgcmVjdDogZ3JhcGhpYy5SZWN0LFxuICByb3VuZFJlY3Q6IGdyYXBoaWMuUmVjdCxcbiAgc3F1YXJlOiBncmFwaGljLlJlY3QsXG4gIGNpcmNsZTogZ3JhcGhpYy5DaXJjbGUsXG4gIGRpYW1vbmQ6IERpYW1vbmQsXG4gIHBpbjogUGluLFxuICBhcnJvdzogQXJyb3csXG4gIHRyaWFuZ2xlOiBUcmlhbmdsZVxufTtcbnZhciBzeW1ib2xTaGFwZU1ha2VycyA9IHtcbiAgbGluZTogZnVuY3Rpb24gKHgsIHksIHcsIGgsIHNoYXBlKSB7XG4gICAgLy8gRklYTUVcbiAgICBzaGFwZS54MSA9IHg7XG4gICAgc2hhcGUueTEgPSB5ICsgaCAvIDI7XG4gICAgc2hhcGUueDIgPSB4ICsgdztcbiAgICBzaGFwZS55MiA9IHkgKyBoIC8gMjtcbiAgfSxcbiAgcmVjdDogZnVuY3Rpb24gKHgsIHksIHcsIGgsIHNoYXBlKSB7XG4gICAgc2hhcGUueCA9IHg7XG4gICAgc2hhcGUueSA9IHk7XG4gICAgc2hhcGUud2lkdGggPSB3O1xuICAgIHNoYXBlLmhlaWdodCA9IGg7XG4gIH0sXG4gIHJvdW5kUmVjdDogZnVuY3Rpb24gKHgsIHksIHcsIGgsIHNoYXBlKSB7XG4gICAgc2hhcGUueCA9IHg7XG4gICAgc2hhcGUueSA9IHk7XG4gICAgc2hhcGUud2lkdGggPSB3O1xuICAgIHNoYXBlLmhlaWdodCA9IGg7XG4gICAgc2hhcGUuciA9IE1hdGgubWluKHcsIGgpIC8gNDtcbiAgfSxcbiAgc3F1YXJlOiBmdW5jdGlvbiAoeCwgeSwgdywgaCwgc2hhcGUpIHtcbiAgICB2YXIgc2l6ZSA9IE1hdGgubWluKHcsIGgpO1xuICAgIHNoYXBlLnggPSB4O1xuICAgIHNoYXBlLnkgPSB5O1xuICAgIHNoYXBlLndpZHRoID0gc2l6ZTtcbiAgICBzaGFwZS5oZWlnaHQgPSBzaXplO1xuICB9LFxuICBjaXJjbGU6IGZ1bmN0aW9uICh4LCB5LCB3LCBoLCBzaGFwZSkge1xuICAgIC8vIFB1dCBjaXJjbGUgaW4gdGhlIGNlbnRlciBvZiBzcXVhcmVcbiAgICBzaGFwZS5jeCA9IHggKyB3IC8gMjtcbiAgICBzaGFwZS5jeSA9IHkgKyBoIC8gMjtcbiAgICBzaGFwZS5yID0gTWF0aC5taW4odywgaCkgLyAyO1xuICB9LFxuICBkaWFtb25kOiBmdW5jdGlvbiAoeCwgeSwgdywgaCwgc2hhcGUpIHtcbiAgICBzaGFwZS5jeCA9IHggKyB3IC8gMjtcbiAgICBzaGFwZS5jeSA9IHkgKyBoIC8gMjtcbiAgICBzaGFwZS53aWR0aCA9IHc7XG4gICAgc2hhcGUuaGVpZ2h0ID0gaDtcbiAgfSxcbiAgcGluOiBmdW5jdGlvbiAoeCwgeSwgdywgaCwgc2hhcGUpIHtcbiAgICBzaGFwZS54ID0geCArIHcgLyAyO1xuICAgIHNoYXBlLnkgPSB5ICsgaCAvIDI7XG4gICAgc2hhcGUud2lkdGggPSB3O1xuICAgIHNoYXBlLmhlaWdodCA9IGg7XG4gIH0sXG4gIGFycm93OiBmdW5jdGlvbiAoeCwgeSwgdywgaCwgc2hhcGUpIHtcbiAgICBzaGFwZS54ID0geCArIHcgLyAyO1xuICAgIHNoYXBlLnkgPSB5ICsgaCAvIDI7XG4gICAgc2hhcGUud2lkdGggPSB3O1xuICAgIHNoYXBlLmhlaWdodCA9IGg7XG4gIH0sXG4gIHRyaWFuZ2xlOiBmdW5jdGlvbiAoeCwgeSwgdywgaCwgc2hhcGUpIHtcbiAgICBzaGFwZS5jeCA9IHggKyB3IC8gMjtcbiAgICBzaGFwZS5jeSA9IHkgKyBoIC8gMjtcbiAgICBzaGFwZS53aWR0aCA9IHc7XG4gICAgc2hhcGUuaGVpZ2h0ID0gaDtcbiAgfVxufTtcbnZhciBzeW1ib2xCdWlsZFByb3hpZXMgPSB7fTtcbnpyVXRpbC5lYWNoKHN5bWJvbEN0b3JzLCBmdW5jdGlvbiAoQ3RvciwgbmFtZSkge1xuICBzeW1ib2xCdWlsZFByb3hpZXNbbmFtZV0gPSBuZXcgQ3RvcigpO1xufSk7XG52YXIgU3ltYm9sQ2x6ID0gZ3JhcGhpYy5leHRlbmRTaGFwZSh7XG4gIHR5cGU6ICdzeW1ib2wnLFxuICBzaGFwZToge1xuICAgIHN5bWJvbFR5cGU6ICcnLFxuICAgIHg6IDAsXG4gICAgeTogMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDBcbiAgfSxcbiAgYmVmb3JlQnJ1c2g6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3R5bGUgPSB0aGlzLnN0eWxlO1xuICAgIHZhciBzaGFwZSA9IHRoaXMuc2hhcGU7IC8vIEZJWE1FXG5cbiAgICBpZiAoc2hhcGUuc3ltYm9sVHlwZSA9PT0gJ3BpbicgJiYgc3R5bGUudGV4dFBvc2l0aW9uID09PSAnaW5zaWRlJykge1xuICAgICAgc3R5bGUudGV4dFBvc2l0aW9uID0gWyc1MCUnLCAnNDAlJ107XG4gICAgICBzdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgIHN0eWxlLnRleHRWZXJ0aWNhbEFsaWduID0gJ21pZGRsZSc7XG4gICAgfVxuICB9LFxuICBidWlsZFBhdGg6IGZ1bmN0aW9uIChjdHgsIHNoYXBlLCBpbkJ1bmRsZSkge1xuICAgIHZhciBzeW1ib2xUeXBlID0gc2hhcGUuc3ltYm9sVHlwZTtcbiAgICB2YXIgcHJveHlTeW1ib2wgPSBzeW1ib2xCdWlsZFByb3hpZXNbc3ltYm9sVHlwZV07XG5cbiAgICBpZiAoc2hhcGUuc3ltYm9sVHlwZSAhPT0gJ25vbmUnKSB7XG4gICAgICBpZiAoIXByb3h5U3ltYm9sKSB7XG4gICAgICAgIC8vIERlZmF1bHQgcmVjdFxuICAgICAgICBzeW1ib2xUeXBlID0gJ3JlY3QnO1xuICAgICAgICBwcm94eVN5bWJvbCA9IHN5bWJvbEJ1aWxkUHJveGllc1tzeW1ib2xUeXBlXTtcbiAgICAgIH1cblxuICAgICAgc3ltYm9sU2hhcGVNYWtlcnNbc3ltYm9sVHlwZV0oc2hhcGUueCwgc2hhcGUueSwgc2hhcGUud2lkdGgsIHNoYXBlLmhlaWdodCwgcHJveHlTeW1ib2wuc2hhcGUpO1xuICAgICAgcHJveHlTeW1ib2wuYnVpbGRQYXRoKGN0eCwgcHJveHlTeW1ib2wuc2hhcGUsIGluQnVuZGxlKTtcbiAgICB9XG4gIH1cbn0pOyAvLyBQcm92aWRlIHNldENvbG9yIGhlbHBlciBtZXRob2QgdG8gYXZvaWQgZGV0ZXJtaW5lIGlmIHNldCB0aGUgZmlsbCBvciBzdHJva2Ugb3V0c2lkZVxuXG5mdW5jdGlvbiBzeW1ib2xQYXRoU2V0Q29sb3IoY29sb3IsIGlubmVyQ29sb3IpIHtcbiAgaWYgKHRoaXMudHlwZSAhPT0gJ2ltYWdlJykge1xuICAgIHZhciBzeW1ib2xTdHlsZSA9IHRoaXMuc3R5bGU7XG4gICAgdmFyIHN5bWJvbFNoYXBlID0gdGhpcy5zaGFwZTtcblxuICAgIGlmIChzeW1ib2xTaGFwZSAmJiBzeW1ib2xTaGFwZS5zeW1ib2xUeXBlID09PSAnbGluZScpIHtcbiAgICAgIHN5bWJvbFN0eWxlLnN0cm9rZSA9IGNvbG9yO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fX2lzRW1wdHlCcnVzaCkge1xuICAgICAgc3ltYm9sU3R5bGUuc3Ryb2tlID0gY29sb3I7XG4gICAgICBzeW1ib2xTdHlsZS5maWxsID0gaW5uZXJDb2xvciB8fCAnI2ZmZic7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZJWE1FIOWIpOaWreWbvuW9oum7mOiupOaYr+Whq+WFhei/mOaYr+aPj+i+ue+8jOS9v+eUqCBvbmx5U3Ryb2tlID9cbiAgICAgIHN5bWJvbFN0eWxlLmZpbGwgJiYgKHN5bWJvbFN0eWxlLmZpbGwgPSBjb2xvcik7XG4gICAgICBzeW1ib2xTdHlsZS5zdHJva2UgJiYgKHN5bWJvbFN0eWxlLnN0cm9rZSA9IGNvbG9yKTtcbiAgICB9XG5cbiAgICB0aGlzLmRpcnR5KGZhbHNlKTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGUgYSBzeW1ib2wgZWxlbWVudCB3aXRoIGdpdmVuIHN5bWJvbCBjb25maWd1cmF0aW9uOiBzaGFwZSwgeCwgeSwgd2lkdGgsIGhlaWdodCwgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBzeW1ib2xUeXBlXG4gKiBAcGFyYW0ge251bWJlcn0geFxuICogQHBhcmFtIHtudW1iZXJ9IHlcbiAqIEBwYXJhbSB7bnVtYmVyfSB3XG4gKiBAcGFyYW0ge251bWJlcn0gaFxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtrZWVwQXNwZWN0PWZhbHNlXSB3aGV0aGVyIHRvIGtlZXAgdGhlIHJhdGlvIG9mIHcvaCxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBwYXRoIGFuZCBpbWFnZSBvbmx5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlU3ltYm9sKHN5bWJvbFR5cGUsIHgsIHksIHcsIGgsIGNvbG9yLCBrZWVwQXNwZWN0KSB7XG4gIC8vIFRPRE8gU3VwcG9ydCBpbWFnZSBvYmplY3QsIER5bmFtaWNJbWFnZS5cbiAgdmFyIGlzRW1wdHkgPSBzeW1ib2xUeXBlLmluZGV4T2YoJ2VtcHR5JykgPT09IDA7XG5cbiAgaWYgKGlzRW1wdHkpIHtcbiAgICBzeW1ib2xUeXBlID0gc3ltYm9sVHlwZS5zdWJzdHIoNSwgMSkudG9Mb3dlckNhc2UoKSArIHN5bWJvbFR5cGUuc3Vic3RyKDYpO1xuICB9XG5cbiAgdmFyIHN5bWJvbFBhdGg7XG5cbiAgaWYgKHN5bWJvbFR5cGUuaW5kZXhPZignaW1hZ2U6Ly8nKSA9PT0gMCkge1xuICAgIHN5bWJvbFBhdGggPSBncmFwaGljLm1ha2VJbWFnZShzeW1ib2xUeXBlLnNsaWNlKDgpLCBuZXcgQm91bmRpbmdSZWN0KHgsIHksIHcsIGgpLCBrZWVwQXNwZWN0ID8gJ2NlbnRlcicgOiAnY292ZXInKTtcbiAgfSBlbHNlIGlmIChzeW1ib2xUeXBlLmluZGV4T2YoJ3BhdGg6Ly8nKSA9PT0gMCkge1xuICAgIHN5bWJvbFBhdGggPSBncmFwaGljLm1ha2VQYXRoKHN5bWJvbFR5cGUuc2xpY2UoNyksIHt9LCBuZXcgQm91bmRpbmdSZWN0KHgsIHksIHcsIGgpLCBrZWVwQXNwZWN0ID8gJ2NlbnRlcicgOiAnY292ZXInKTtcbiAgfSBlbHNlIHtcbiAgICBzeW1ib2xQYXRoID0gbmV3IFN5bWJvbENseih7XG4gICAgICBzaGFwZToge1xuICAgICAgICBzeW1ib2xUeXBlOiBzeW1ib2xUeXBlLFxuICAgICAgICB4OiB4LFxuICAgICAgICB5OiB5LFxuICAgICAgICB3aWR0aDogdyxcbiAgICAgICAgaGVpZ2h0OiBoXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzeW1ib2xQYXRoLl9faXNFbXB0eUJydXNoID0gaXNFbXB0eTtcbiAgc3ltYm9sUGF0aC5zZXRDb2xvciA9IHN5bWJvbFBhdGhTZXRDb2xvcjtcbiAgc3ltYm9sUGF0aC5zZXRDb2xvcihjb2xvcik7XG4gIHJldHVybiBzeW1ib2xQYXRoO1xufVxuXG5leHBvcnRzLmNyZWF0ZVN5bWJvbCA9IGNyZWF0ZVN5bWJvbDsiLCIvKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgT1JJR0lOX01FVEhPRCA9ICdcXDBfX3Rocm90dGxlT3JpZ2luTWV0aG9kJztcbnZhciBSQVRFID0gJ1xcMF9fdGhyb3R0bGVSYXRlJztcbnZhciBUSFJPVFRMRV9UWVBFID0gJ1xcMF9fdGhyb3R0bGVUeXBlJztcbi8qKlxuICogQHB1YmxpY1xuICogQHBhcmFtIHsoRnVuY3Rpb24pfSBmblxuICogQHBhcmFtIHtudW1iZXJ9IFtkZWxheT0wXSBVbml0OiBtcy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2RlYm91bmNlPWZhbHNlXVxuICogICAgICAgIHRydWU6IElmIGNhbGwgaW50ZXJ2YWwgbGVzcyB0aGFuIGBkZWxheWAsIG9ubHkgdGhlIGxhc3QgY2FsbCB3b3Jrcy5cbiAqICAgICAgICBmYWxzZTogSWYgY2FsbCBpbnRlcnZhbCBsZXNzIHRoYW4gYGRlbGF5LCBjYWxsIHdvcmtzIG9uIGZpeGVkIHJhdGUuXG4gKiBAcmV0dXJuIHsoRnVuY3Rpb24pfSB0aHJvdHRsZWQgZm4uXG4gKi9cblxuZnVuY3Rpb24gdGhyb3R0bGUoZm4sIGRlbGF5LCBkZWJvdW5jZSkge1xuICB2YXIgY3VyckNhbGw7XG4gIHZhciBsYXN0Q2FsbCA9IDA7XG4gIHZhciBsYXN0RXhlYyA9IDA7XG4gIHZhciB0aW1lciA9IG51bGw7XG4gIHZhciBkaWZmO1xuICB2YXIgc2NvcGU7XG4gIHZhciBhcmdzO1xuICB2YXIgZGVib3VuY2VOZXh0Q2FsbDtcbiAgZGVsYXkgPSBkZWxheSB8fCAwO1xuXG4gIGZ1bmN0aW9uIGV4ZWMoKSB7XG4gICAgbGFzdEV4ZWMgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB0aW1lciA9IG51bGw7XG4gICAgZm4uYXBwbHkoc2NvcGUsIGFyZ3MgfHwgW10pO1xuICB9XG5cbiAgdmFyIGNiID0gZnVuY3Rpb24gKCkge1xuICAgIGN1cnJDYWxsID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgc2NvcGUgPSB0aGlzO1xuICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdmFyIHRoaXNEZWxheSA9IGRlYm91bmNlTmV4dENhbGwgfHwgZGVsYXk7XG4gICAgdmFyIHRoaXNEZWJvdW5jZSA9IGRlYm91bmNlTmV4dENhbGwgfHwgZGVib3VuY2U7XG4gICAgZGVib3VuY2VOZXh0Q2FsbCA9IG51bGw7XG4gICAgZGlmZiA9IGN1cnJDYWxsIC0gKHRoaXNEZWJvdW5jZSA/IGxhc3RDYWxsIDogbGFzdEV4ZWMpIC0gdGhpc0RlbGF5O1xuICAgIGNsZWFyVGltZW91dCh0aW1lcik7IC8vIEhlcmUgd2Ugc2hvdWxkIG1ha2Ugc3VyZSB0aGF0OiB0aGUgYGV4ZWNgIFNIT1VMRCBOT1QgYmUgY2FsbGVkIGxhdGVyXG4gICAgLy8gdGhhbiBhIG5ldyBjYWxsIG9mIGBjYmAsIHRoYXQgaXMsIHByZXNlcnZpbmcgdGhlIGNvbW1hbmQgb3JkZXIuIENvbnNpZGVyXG4gICAgLy8gY2FsY3VsYXRpbmcgXCJzY2FsZSByYXRlXCIgd2hlbiByb2FtaW5nIGFzIGFuIGV4YW1wbGUuIFdoZW4gYSBjYWxsIG9mIGBjYmBcbiAgICAvLyBoYXBwZW5zLCBlaXRoZXIgdGhlIGBleGVjYCBpcyBjYWxsZWQgZGllcmVjdGx5LCBvciB0aGUgY2FsbCBpcyBkZWxheWVkLlxuICAgIC8vIEJ1dCB0aGUgZGVsYXllZCBjYWxsIHNob3VsZCBuZXZlciBiZSBsYXRlciB0aGFuIG5leHQgY2FsbCBvZiBgY2JgLiBVbmRlclxuICAgIC8vIHRoaXMgYXNzdXJhbmNlLCB3ZSBjYW4gc2ltcGx5IHVwZGF0ZSB2aWV3IHN0YXRlIGVhY2ggdGltZSBgZGlzcGF0Y2hBY3Rpb25gXG4gICAgLy8gdHJpZ2dlcmVkIGJ5IHVzZXIgcm9hbWluZywgYnV0IG5vdCBuZWVkIHRvIGFkZCBleHRyYSBjb2RlIHRvIGF2b2lkIHRoZVxuICAgIC8vIHN0YXRlIGJlaW5nIFwicm9sbGVkLWJhY2tcIi5cblxuICAgIGlmICh0aGlzRGVib3VuY2UpIHtcbiAgICAgIHRpbWVyID0gc2V0VGltZW91dChleGVjLCB0aGlzRGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZGlmZiA+PSAwKSB7XG4gICAgICAgIGV4ZWMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpbWVyID0gc2V0VGltZW91dChleGVjLCAtZGlmZik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdENhbGwgPSBjdXJyQ2FsbDtcbiAgfTtcbiAgLyoqXG4gICAqIENsZWFyIHRocm90dGxlLlxuICAgKiBAcHVibGljXG4gICAqL1xuXG5cbiAgY2IuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgdGltZXIgPSBudWxsO1xuICAgIH1cbiAgfTtcbiAgLyoqXG4gICAqIEVuYWJsZSBkZWJvdW5jZSBvbmNlLlxuICAgKi9cblxuXG4gIGNiLmRlYm91bmNlTmV4dENhbGwgPSBmdW5jdGlvbiAoZGVib3VuY2VEZWxheSkge1xuICAgIGRlYm91bmNlTmV4dENhbGwgPSBkZWJvdW5jZURlbGF5O1xuICB9O1xuXG4gIHJldHVybiBjYjtcbn1cbi8qKlxuICogQ3JlYXRlIHRocm90dGxlIG1ldGhvZCBvciB1cGRhdGUgdGhyb3R0bGUgcmF0ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogQ29tcG9uZW50Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICogICAgIC4uLlxuICogICAgIHRocm90dGxlLmNyZWF0ZU9yVXBkYXRlKFxuICogICAgICAgICB0aGlzLFxuICogICAgICAgICAnX2Rpc3BhdGNoQWN0aW9uJyxcbiAqICAgICAgICAgdGhpcy5tb2RlbC5nZXQoJ3Rocm90dGxlJyksXG4gKiAgICAgICAgICdmaXhSYXRlJ1xuICogICAgICk7XG4gKiB9O1xuICogQ29tcG9uZW50Vmlldy5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICogICAgIHRocm90dGxlLmNsZWFyKHRoaXMsICdfZGlzcGF0Y2hBY3Rpb24nKTtcbiAqIH07XG4gKiBDb21wb25lbnRWaWV3LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICogICAgIHRocm90dGxlLmNsZWFyKHRoaXMsICdfZGlzcGF0Y2hBY3Rpb24nKTtcbiAqIH07XG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtzdHJpbmd9IGZuQXR0clxuICogQHBhcmFtIHtudW1iZXJ9IFtyYXRlXVxuICogQHBhcmFtIHtzdHJpbmd9IFt0aHJvdHRsZVR5cGU9J2ZpeFJhdGUnXSAnZml4UmF0ZScgb3IgJ2RlYm91bmNlJ1xuICogQHJldHVybiB7RnVuY3Rpb259IHRocm90dGxlZCBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZU9yVXBkYXRlKG9iaiwgZm5BdHRyLCByYXRlLCB0aHJvdHRsZVR5cGUpIHtcbiAgdmFyIGZuID0gb2JqW2ZuQXR0cl07XG5cbiAgaWYgKCFmbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBvcmlnaW5GbiA9IGZuW09SSUdJTl9NRVRIT0RdIHx8IGZuO1xuICB2YXIgbGFzdFRocm90dGxlVHlwZSA9IGZuW1RIUk9UVExFX1RZUEVdO1xuICB2YXIgbGFzdFJhdGUgPSBmbltSQVRFXTtcblxuICBpZiAobGFzdFJhdGUgIT09IHJhdGUgfHwgbGFzdFRocm90dGxlVHlwZSAhPT0gdGhyb3R0bGVUeXBlKSB7XG4gICAgaWYgKHJhdGUgPT0gbnVsbCB8fCAhdGhyb3R0bGVUeXBlKSB7XG4gICAgICByZXR1cm4gb2JqW2ZuQXR0cl0gPSBvcmlnaW5GbjtcbiAgICB9XG5cbiAgICBmbiA9IG9ialtmbkF0dHJdID0gdGhyb3R0bGUob3JpZ2luRm4sIHJhdGUsIHRocm90dGxlVHlwZSA9PT0gJ2RlYm91bmNlJyk7XG4gICAgZm5bT1JJR0lOX01FVEhPRF0gPSBvcmlnaW5GbjtcbiAgICBmbltUSFJPVFRMRV9UWVBFXSA9IHRocm90dGxlVHlwZTtcbiAgICBmbltSQVRFXSA9IHJhdGU7XG4gIH1cblxuICByZXR1cm4gZm47XG59XG4vKipcbiAqIENsZWFyIHRocm90dGxlLiBFeGFtcGxlIHNlZSB0aHJvdHRsZS5jcmVhdGVPclVwZGF0ZS5cbiAqXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm5BdHRyXG4gKi9cblxuXG5mdW5jdGlvbiBjbGVhcihvYmosIGZuQXR0cikge1xuICB2YXIgZm4gPSBvYmpbZm5BdHRyXTtcblxuICBpZiAoZm4gJiYgZm5bT1JJR0lOX01FVEhPRF0pIHtcbiAgICBvYmpbZm5BdHRyXSA9IGZuW09SSUdJTl9NRVRIT0RdO1xuICB9XG59XG5cbmV4cG9ydHMudGhyb3R0bGUgPSB0aHJvdHRsZTtcbmV4cG9ydHMuY3JlYXRlT3JVcGRhdGUgPSBjcmVhdGVPclVwZGF0ZTtcbmV4cG9ydHMuY2xlYXIgPSBjbGVhcjsiLCJ2YXIgX3V0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgZWFjaCA9IF91dGlsLmVhY2g7XG5cbnZhciBHcm91cCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb250YWluZXIvR3JvdXBcIik7XG5cbnZhciBjb21wb25lbnRVdGlsID0gcmVxdWlyZShcIi4uL3V0aWwvY29tcG9uZW50XCIpO1xuXG52YXIgY2xhenpVdGlsID0gcmVxdWlyZShcIi4uL3V0aWwvY2xhenpcIik7XG5cbnZhciBtb2RlbFV0aWwgPSByZXF1aXJlKFwiLi4vdXRpbC9tb2RlbFwiKTtcblxudmFyIF90YXNrID0gcmVxdWlyZShcIi4uL3N0cmVhbS90YXNrXCIpO1xuXG52YXIgY3JlYXRlVGFzayA9IF90YXNrLmNyZWF0ZVRhc2s7XG5cbnZhciBjcmVhdGVSZW5kZXJQbGFubmVyID0gcmVxdWlyZShcIi4uL2NoYXJ0L2hlbHBlci9jcmVhdGVSZW5kZXJQbGFubmVyXCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgaW5uZXIgPSBtb2RlbFV0aWwubWFrZUlubmVyKCk7XG52YXIgcmVuZGVyUGxhbm5lciA9IGNyZWF0ZVJlbmRlclBsYW5uZXIoKTtcblxuZnVuY3Rpb24gQ2hhcnQoKSB7XG4gIC8qKlxuICAgKiBAdHlwZSB7bW9kdWxlOnpyZW5kZXIvY29udGFpbmVyL0dyb3VwfVxuICAgKiBAcmVhZE9ubHlcbiAgICovXG4gIHRoaXMuZ3JvdXAgPSBuZXcgR3JvdXAoKTtcbiAgLyoqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEByZWFkT25seVxuICAgKi9cblxuICB0aGlzLnVpZCA9IGNvbXBvbmVudFV0aWwuZ2V0VUlEKCd2aWV3Q2hhcnQnKTtcbiAgdGhpcy5yZW5kZXJUYXNrID0gY3JlYXRlVGFzayh7XG4gICAgcGxhbjogcmVuZGVyVGFza1BsYW4sXG4gICAgcmVzZXQ6IHJlbmRlclRhc2tSZXNldFxuICB9KTtcbiAgdGhpcy5yZW5kZXJUYXNrLmNvbnRleHQgPSB7XG4gICAgdmlldzogdGhpc1xuICB9O1xufVxuXG5DaGFydC5wcm90b3R5cGUgPSB7XG4gIHR5cGU6ICdjaGFydCcsXG5cbiAgLyoqXG4gICAqIEluaXQgdGhlIGNoYXJ0LlxuICAgKiBAcGFyYW0gIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9HbG9iYWx9IGVjTW9kZWxcbiAgICogQHBhcmFtICB7bW9kdWxlOmVjaGFydHMvRXh0ZW5zaW9uQVBJfSBhcGlcbiAgICovXG4gIGluaXQ6IGZ1bmN0aW9uIChlY01vZGVsLCBhcGkpIHt9LFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIGNoYXJ0LlxuICAgKiBAcGFyYW0gIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9TZXJpZXN9IHNlcmllc01vZGVsXG4gICAqIEBwYXJhbSAge21vZHVsZTplY2hhcnRzL21vZGVsL0dsb2JhbH0gZWNNb2RlbFxuICAgKiBAcGFyYW0gIHttb2R1bGU6ZWNoYXJ0cy9FeHRlbnNpb25BUEl9IGFwaVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IHBheWxvYWRcbiAgICovXG4gIHJlbmRlcjogZnVuY3Rpb24gKHNlcmllc01vZGVsLCBlY01vZGVsLCBhcGksIHBheWxvYWQpIHt9LFxuXG4gIC8qKlxuICAgKiBIaWdobGlnaHQgc2VyaWVzIG9yIHNwZWNpZmllZCBkYXRhIGl0ZW0uXG4gICAqIEBwYXJhbSAge21vZHVsZTplY2hhcnRzL21vZGVsL1Nlcmllc30gc2VyaWVzTW9kZWxcbiAgICogQHBhcmFtICB7bW9kdWxlOmVjaGFydHMvbW9kZWwvR2xvYmFsfSBlY01vZGVsXG4gICAqIEBwYXJhbSAge21vZHVsZTplY2hhcnRzL0V4dGVuc2lvbkFQSX0gYXBpXG4gICAqIEBwYXJhbSAge09iamVjdH0gcGF5bG9hZFxuICAgKi9cbiAgaGlnaGxpZ2h0OiBmdW5jdGlvbiAoc2VyaWVzTW9kZWwsIGVjTW9kZWwsIGFwaSwgcGF5bG9hZCkge1xuICAgIHRvZ2dsZUhpZ2hsaWdodChzZXJpZXNNb2RlbC5nZXREYXRhKCksIHBheWxvYWQsICdlbXBoYXNpcycpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEb3ducGxheSBzZXJpZXMgb3Igc3BlY2lmaWVkIGRhdGEgaXRlbS5cbiAgICogQHBhcmFtICB7bW9kdWxlOmVjaGFydHMvbW9kZWwvU2VyaWVzfSBzZXJpZXNNb2RlbFxuICAgKiBAcGFyYW0gIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9HbG9iYWx9IGVjTW9kZWxcbiAgICogQHBhcmFtICB7bW9kdWxlOmVjaGFydHMvRXh0ZW5zaW9uQVBJfSBhcGlcbiAgICogQHBhcmFtICB7T2JqZWN0fSBwYXlsb2FkXG4gICAqL1xuICBkb3ducGxheTogZnVuY3Rpb24gKHNlcmllc01vZGVsLCBlY01vZGVsLCBhcGksIHBheWxvYWQpIHtcbiAgICB0b2dnbGVIaWdobGlnaHQoc2VyaWVzTW9kZWwuZ2V0RGF0YSgpLCBwYXlsb2FkLCAnbm9ybWFsJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbW92ZSBzZWxmLlxuICAgKiBAcGFyYW0gIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9HbG9iYWx9IGVjTW9kZWxcbiAgICogQHBhcmFtICB7bW9kdWxlOmVjaGFydHMvRXh0ZW5zaW9uQVBJfSBhcGlcbiAgICovXG4gIHJlbW92ZTogZnVuY3Rpb24gKGVjTW9kZWwsIGFwaSkge1xuICAgIHRoaXMuZ3JvdXAucmVtb3ZlQWxsKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERpc3Bvc2Ugc2VsZi5cbiAgICogQHBhcmFtICB7bW9kdWxlOmVjaGFydHMvbW9kZWwvR2xvYmFsfSBlY01vZGVsXG4gICAqIEBwYXJhbSAge21vZHVsZTplY2hhcnRzL0V4dGVuc2lvbkFQSX0gYXBpXG4gICAqL1xuICBkaXNwb3NlOiBmdW5jdGlvbiAoKSB7fSxcblxuICAvKipcbiAgICogUmVuZGVyaW5nIHByZXBhcmF0aW9uIGluIHByb2dyZXNzaXZlIG1vZGUuXG4gICAqIEBwYXJhbSAge21vZHVsZTplY2hhcnRzL21vZGVsL1Nlcmllc30gc2VyaWVzTW9kZWxcbiAgICogQHBhcmFtICB7bW9kdWxlOmVjaGFydHMvbW9kZWwvR2xvYmFsfSBlY01vZGVsXG4gICAqIEBwYXJhbSAge21vZHVsZTplY2hhcnRzL0V4dGVuc2lvbkFQSX0gYXBpXG4gICAqIEBwYXJhbSAge09iamVjdH0gcGF5bG9hZFxuICAgKi9cbiAgaW5jcmVtZW50YWxQcmVwYXJlUmVuZGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgaW4gcHJvZ3Jlc3NpdmUgbW9kZS5cbiAgICogQHBhcmFtICB7bW9kdWxlOmVjaGFydHMvbW9kZWwvU2VyaWVzfSBzZXJpZXNNb2RlbFxuICAgKiBAcGFyYW0gIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9HbG9iYWx9IGVjTW9kZWxcbiAgICogQHBhcmFtICB7bW9kdWxlOmVjaGFydHMvRXh0ZW5zaW9uQVBJfSBhcGlcbiAgICogQHBhcmFtICB7T2JqZWN0fSBwYXlsb2FkXG4gICAqL1xuICBpbmNyZW1lbnRhbFJlbmRlcjogbnVsbCxcblxuICAvKipcbiAgICogVXBkYXRlIHRyYW5zZm9ybSBkaXJlY3RseS5cbiAgICogQHBhcmFtICB7bW9kdWxlOmVjaGFydHMvbW9kZWwvU2VyaWVzfSBzZXJpZXNNb2RlbFxuICAgKiBAcGFyYW0gIHttb2R1bGU6ZWNoYXJ0cy9tb2RlbC9HbG9iYWx9IGVjTW9kZWxcbiAgICogQHBhcmFtICB7bW9kdWxlOmVjaGFydHMvRXh0ZW5zaW9uQVBJfSBhcGlcbiAgICogQHBhcmFtICB7T2JqZWN0fSBwYXlsb2FkXG4gICAqIEByZXR1cm4ge09iamVjdH0ge3VwZGF0ZTogdHJ1ZX1cbiAgICovXG4gIHVwZGF0ZVRyYW5zZm9ybTogbnVsbFxuICAvKipcbiAgICogVGhlIHZpZXcgY29udGFpbnMgdGhlIGdpdmVuIHBvaW50LlxuICAgKiBAaW50ZXJmYWNlXG4gICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IHBvaW50XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICAvLyBjb250YWluUG9pbnQ6IGZ1bmN0aW9uICgpIHt9XG5cbn07XG52YXIgY2hhcnRQcm90byA9IENoYXJ0LnByb3RvdHlwZTtcblxuY2hhcnRQcm90by51cGRhdGVWaWV3ID0gY2hhcnRQcm90by51cGRhdGVMYXlvdXQgPSBjaGFydFByb3RvLnVwZGF0ZVZpc3VhbCA9IGZ1bmN0aW9uIChzZXJpZXNNb2RlbCwgZWNNb2RlbCwgYXBpLCBwYXlsb2FkKSB7XG4gIHRoaXMucmVuZGVyKHNlcmllc01vZGVsLCBlY01vZGVsLCBhcGksIHBheWxvYWQpO1xufTtcbi8qKlxuICogU2V0IHN0YXRlIG9mIHNpbmdsZSBlbGVtZW50XG4gKiBAcGFyYW0gIHttb2R1bGU6enJlbmRlci9FbGVtZW50fSBlbFxuICogQHBhcmFtICB7c3RyaW5nfSBzdGF0ZVxuICovXG5cblxuZnVuY3Rpb24gZWxTZXRTdGF0ZShlbCwgc3RhdGUpIHtcbiAgaWYgKGVsKSB7XG4gICAgZWwudHJpZ2dlcihzdGF0ZSk7XG5cbiAgICBpZiAoZWwudHlwZSA9PT0gJ2dyb3VwJykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbC5jaGlsZENvdW50KCk7IGkrKykge1xuICAgICAgICBlbFNldFN0YXRlKGVsLmNoaWxkQXQoaSksIHN0YXRlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbi8qKlxuICogQHBhcmFtICB7bW9kdWxlOmVjaGFydHMvZGF0YS9MaXN0fSBkYXRhXG4gKiBAcGFyYW0gIHtPYmplY3R9IHBheWxvYWRcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RhdGUgJ25vcm1hbCd8J2VtcGhhc2lzJ1xuICovXG5cblxuZnVuY3Rpb24gdG9nZ2xlSGlnaGxpZ2h0KGRhdGEsIHBheWxvYWQsIHN0YXRlKSB7XG4gIHZhciBkYXRhSW5kZXggPSBtb2RlbFV0aWwucXVlcnlEYXRhSW5kZXgoZGF0YSwgcGF5bG9hZCk7XG5cbiAgaWYgKGRhdGFJbmRleCAhPSBudWxsKSB7XG4gICAgZWFjaChtb2RlbFV0aWwubm9ybWFsaXplVG9BcnJheShkYXRhSW5kZXgpLCBmdW5jdGlvbiAoZGF0YUlkeCkge1xuICAgICAgZWxTZXRTdGF0ZShkYXRhLmdldEl0ZW1HcmFwaGljRWwoZGF0YUlkeCksIHN0YXRlKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhLmVhY2hJdGVtR3JhcGhpY0VsKGZ1bmN0aW9uIChlbCkge1xuICAgICAgZWxTZXRTdGF0ZShlbCwgc3RhdGUpO1xuICAgIH0pO1xuICB9XG59IC8vIEVuYWJsZSBDaGFydC5leHRlbmQuXG5cblxuY2xhenpVdGlsLmVuYWJsZUNsYXNzRXh0ZW5kKENoYXJ0LCBbJ2Rpc3Bvc2UnXSk7IC8vIEFkZCBjYXBhYmlsaXR5IG9mIHJlZ2lzdGVyQ2xhc3MsIGdldENsYXNzLCBoYXNDbGFzcywgcmVnaXN0ZXJTdWJUeXBlRGVmYXVsdGVyIGFuZCBzbyBvbi5cblxuY2xhenpVdGlsLmVuYWJsZUNsYXNzTWFuYWdlbWVudChDaGFydCwge1xuICByZWdpc3RlcldoZW5FeHRlbmQ6IHRydWVcbn0pO1xuXG5DaGFydC5tYXJrVXBkYXRlTWV0aG9kID0gZnVuY3Rpb24gKHBheWxvYWQsIG1ldGhvZE5hbWUpIHtcbiAgaW5uZXIocGF5bG9hZCkudXBkYXRlTWV0aG9kID0gbWV0aG9kTmFtZTtcbn07XG5cbmZ1bmN0aW9uIHJlbmRlclRhc2tQbGFuKGNvbnRleHQpIHtcbiAgcmV0dXJuIHJlbmRlclBsYW5uZXIoY29udGV4dC5tb2RlbCk7XG59XG5cbmZ1bmN0aW9uIHJlbmRlclRhc2tSZXNldChjb250ZXh0KSB7XG4gIHZhciBzZXJpZXNNb2RlbCA9IGNvbnRleHQubW9kZWw7XG4gIHZhciBlY01vZGVsID0gY29udGV4dC5lY01vZGVsO1xuICB2YXIgYXBpID0gY29udGV4dC5hcGk7XG4gIHZhciBwYXlsb2FkID0gY29udGV4dC5wYXlsb2FkOyAvLyA/Pz8hIHJlbW92ZSB1cGRhdGVWaWV3IHVwZGF0ZVZpc3VhbFxuXG4gIHZhciBwcm9ncmVzc2l2ZVJlbmRlciA9IHNlcmllc01vZGVsLnBpcGVsaW5lQ29udGV4dC5wcm9ncmVzc2l2ZVJlbmRlcjtcbiAgdmFyIHZpZXcgPSBjb250ZXh0LnZpZXc7XG4gIHZhciB1cGRhdGVNZXRob2QgPSBwYXlsb2FkICYmIGlubmVyKHBheWxvYWQpLnVwZGF0ZU1ldGhvZDtcbiAgdmFyIG1ldGhvZE5hbWUgPSBwcm9ncmVzc2l2ZVJlbmRlciA/ICdpbmNyZW1lbnRhbFByZXBhcmVSZW5kZXInIDogdXBkYXRlTWV0aG9kICYmIHZpZXdbdXBkYXRlTWV0aG9kXSA/IHVwZGF0ZU1ldGhvZCAvLyBgYXBwZW5kRGF0YWAgaXMgYWxzbyBzdXBwb3J0ZWQgd2hlbiBkYXRhIGFtb3VudFxuICAvLyBpcyBsZXNzIHRoYW4gcHJvZ3Jlc3NpdmUgdGhyZXNob2xkLlxuICA6ICdyZW5kZXInO1xuXG4gIGlmIChtZXRob2ROYW1lICE9PSAncmVuZGVyJykge1xuICAgIHZpZXdbbWV0aG9kTmFtZV0oc2VyaWVzTW9kZWwsIGVjTW9kZWwsIGFwaSwgcGF5bG9hZCk7XG4gIH1cblxuICByZXR1cm4gcHJvZ3Jlc3NNZXRob2RNYXBbbWV0aG9kTmFtZV07XG59XG5cbnZhciBwcm9ncmVzc01ldGhvZE1hcCA9IHtcbiAgaW5jcmVtZW50YWxQcmVwYXJlUmVuZGVyOiB7XG4gICAgcHJvZ3Jlc3M6IGZ1bmN0aW9uIChwYXJhbXMsIGNvbnRleHQpIHtcbiAgICAgIGNvbnRleHQudmlldy5pbmNyZW1lbnRhbFJlbmRlcihwYXJhbXMsIGNvbnRleHQubW9kZWwsIGNvbnRleHQuZWNNb2RlbCwgY29udGV4dC5hcGksIGNvbnRleHQucGF5bG9hZCk7XG4gICAgfVxuICB9LFxuICByZW5kZXI6IHtcbiAgICAvLyBQdXQgdmlldy5yZW5kZXIgaW4gYHByb2dyZXNzYCB0byBzdXBwb3J0IGFwcGVuZERhdGEuIEJ1dCBpbiB0aGlzIGNhc2VcbiAgICAvLyB2aWV3LnJlbmRlciBzaG91bGQgbm90IGJlIGNhbGxlZCBpbiByZXNldCwgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgY2FsbGVkXG4gICAgLy8gdHdpc2UuIFVzZSBgZm9yY2VGaXJzdFByb2dyZXNzYCB0byBtYWtlIHN1cmUgdGhhdCB2aWV3LnJlbmRlciBpcyBjYWxsZWRcbiAgICAvLyBpbiBhbnkgY2FzZXMuXG4gICAgZm9yY2VGaXJzdFByb2dyZXNzOiB0cnVlLFxuICAgIHByb2dyZXNzOiBmdW5jdGlvbiAocGFyYW1zLCBjb250ZXh0KSB7XG4gICAgICBjb250ZXh0LnZpZXcucmVuZGVyKGNvbnRleHQubW9kZWwsIGNvbnRleHQuZWNNb2RlbCwgY29udGV4dC5hcGksIGNvbnRleHQucGF5bG9hZCk7XG4gICAgfVxuICB9XG59O1xudmFyIF9kZWZhdWx0ID0gQ2hhcnQ7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBHcm91cCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb250YWluZXIvR3JvdXBcIik7XG5cbnZhciBjb21wb25lbnRVdGlsID0gcmVxdWlyZShcIi4uL3V0aWwvY29tcG9uZW50XCIpO1xuXG52YXIgY2xhenpVdGlsID0gcmVxdWlyZShcIi4uL3V0aWwvY2xhenpcIik7XG5cbi8qXG4qIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4qIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4qIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbiogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4qIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4qIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4qIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4qIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbnZhciBDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBAdHlwZSB7bW9kdWxlOnpyZW5kZXIvY29udGFpbmVyL0dyb3VwfVxuICAgKiBAcmVhZE9ubHlcbiAgICovXG4gIHRoaXMuZ3JvdXAgPSBuZXcgR3JvdXAoKTtcbiAgLyoqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEByZWFkT25seVxuICAgKi9cblxuICB0aGlzLnVpZCA9IGNvbXBvbmVudFV0aWwuZ2V0VUlEKCd2aWV3Q29tcG9uZW50Jyk7XG59O1xuXG5Db21wb25lbnQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogQ29tcG9uZW50LFxuICBpbml0OiBmdW5jdGlvbiAoZWNNb2RlbCwgYXBpKSB7fSxcbiAgcmVuZGVyOiBmdW5jdGlvbiAoY29tcG9uZW50TW9kZWwsIGVjTW9kZWwsIGFwaSwgcGF5bG9hZCkge30sXG4gIGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHt9XG59O1xudmFyIGNvbXBvbmVudFByb3RvID0gQ29tcG9uZW50LnByb3RvdHlwZTtcblxuY29tcG9uZW50UHJvdG8udXBkYXRlVmlldyA9IGNvbXBvbmVudFByb3RvLnVwZGF0ZUxheW91dCA9IGNvbXBvbmVudFByb3RvLnVwZGF0ZVZpc3VhbCA9IGZ1bmN0aW9uIChzZXJpZXNNb2RlbCwgZWNNb2RlbCwgYXBpLCBwYXlsb2FkKSB7Ly8gRG8gbm90aGluZztcbn07IC8vIEVuYWJsZSBDb21wb25lbnQuZXh0ZW5kLlxuXG5cbmNsYXp6VXRpbC5lbmFibGVDbGFzc0V4dGVuZChDb21wb25lbnQpOyAvLyBFbmFibGUgY2FwYWJpbGl0eSBvZiByZWdpc3RlckNsYXNzLCBnZXRDbGFzcywgaGFzQ2xhc3MsIHJlZ2lzdGVyU3ViVHlwZURlZmF1bHRlciBhbmQgc28gb24uXG5cbmNsYXp6VXRpbC5lbmFibGVDbGFzc01hbmFnZW1lbnQoQ29tcG9uZW50LCB7XG4gIHJlZ2lzdGVyV2hlbkV4dGVuZDogdHJ1ZVxufSk7XG52YXIgX2RlZmF1bHQgPSBDb21wb25lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciB6clV0aWwgPSByZXF1aXJlKFwienJlbmRlci9saWIvY29yZS91dGlsXCIpO1xuXG52YXIgbGFuZyA9IHJlcXVpcmUoXCIuLi9sYW5nXCIpO1xuXG52YXIgX2RhdGFQcm92aWRlciA9IHJlcXVpcmUoXCIuLi9kYXRhL2hlbHBlci9kYXRhUHJvdmlkZXJcIik7XG5cbnZhciByZXRyaWV2ZVJhd1ZhbHVlID0gX2RhdGFQcm92aWRlci5yZXRyaWV2ZVJhd1ZhbHVlO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5mdW5jdGlvbiBfZGVmYXVsdChkb20sIGVjTW9kZWwpIHtcbiAgdmFyIGFyaWFNb2RlbCA9IGVjTW9kZWwuZ2V0TW9kZWwoJ2FyaWEnKTtcblxuICBpZiAoIWFyaWFNb2RlbC5nZXQoJ3Nob3cnKSkge1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmIChhcmlhTW9kZWwuZ2V0KCdkZXNjcmlwdGlvbicpKSB7XG4gICAgZG9tLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIGFyaWFNb2RlbC5nZXQoJ2Rlc2NyaXB0aW9uJykpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzZXJpZXNDbnQgPSAwO1xuICBlY01vZGVsLmVhY2hTZXJpZXMoZnVuY3Rpb24gKHNlcmllc01vZGVsLCBpZHgpIHtcbiAgICArK3Nlcmllc0NudDtcbiAgfSwgdGhpcyk7XG4gIHZhciBtYXhEYXRhQ250ID0gYXJpYU1vZGVsLmdldCgnZGF0YS5tYXhDb3VudCcpIHx8IDEwO1xuICB2YXIgbWF4U2VyaWVzQ250ID0gYXJpYU1vZGVsLmdldCgnc2VyaWVzLm1heENvdW50JykgfHwgMTA7XG4gIHZhciBkaXNwbGF5U2VyaWVzQ250ID0gTWF0aC5taW4oc2VyaWVzQ250LCBtYXhTZXJpZXNDbnQpO1xuICB2YXIgYXJpYUxhYmVsO1xuXG4gIGlmIChzZXJpZXNDbnQgPCAxKSB7XG4gICAgLy8gTm8gc2VyaWVzLCBubyBhcmlhIGxhYmVsXG4gICAgcmV0dXJuO1xuICB9IGVsc2Uge1xuICAgIHZhciB0aXRsZSA9IGdldFRpdGxlKCk7XG5cbiAgICBpZiAodGl0bGUpIHtcbiAgICAgIGFyaWFMYWJlbCA9IHJlcGxhY2UoZ2V0Q29uZmlnKCdnZW5lcmFsLndpdGhUaXRsZScpLCB7XG4gICAgICAgIHRpdGxlOiB0aXRsZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFyaWFMYWJlbCA9IGdldENvbmZpZygnZ2VuZXJhbC53aXRob3V0VGl0bGUnKTtcbiAgICB9XG5cbiAgICB2YXIgc2VyaWVzTGFiZWxzID0gW107XG4gICAgdmFyIHByZWZpeCA9IHNlcmllc0NudCA+IDEgPyAnc2VyaWVzLm11bHRpcGxlLnByZWZpeCcgOiAnc2VyaWVzLnNpbmdsZS5wcmVmaXgnO1xuICAgIGFyaWFMYWJlbCArPSByZXBsYWNlKGdldENvbmZpZyhwcmVmaXgpLCB7XG4gICAgICBzZXJpZXNDb3VudDogc2VyaWVzQ250XG4gICAgfSk7XG4gICAgZWNNb2RlbC5lYWNoU2VyaWVzKGZ1bmN0aW9uIChzZXJpZXNNb2RlbCwgaWR4KSB7XG4gICAgICBpZiAoaWR4IDwgZGlzcGxheVNlcmllc0NudCkge1xuICAgICAgICB2YXIgc2VyaWVzTGFiZWw7XG4gICAgICAgIHZhciBzZXJpZXNOYW1lID0gc2VyaWVzTW9kZWwuZ2V0KCduYW1lJyk7XG4gICAgICAgIHZhciBzZXJpZXNUcGwgPSAnc2VyaWVzLicgKyAoc2VyaWVzQ250ID4gMSA/ICdtdWx0aXBsZScgOiAnc2luZ2xlJykgKyAnLic7XG4gICAgICAgIHNlcmllc0xhYmVsID0gZ2V0Q29uZmlnKHNlcmllc05hbWUgPyBzZXJpZXNUcGwgKyAnd2l0aE5hbWUnIDogc2VyaWVzVHBsICsgJ3dpdGhvdXROYW1lJyk7XG4gICAgICAgIHNlcmllc0xhYmVsID0gcmVwbGFjZShzZXJpZXNMYWJlbCwge1xuICAgICAgICAgIHNlcmllc0lkOiBzZXJpZXNNb2RlbC5zZXJpZXNJbmRleCxcbiAgICAgICAgICBzZXJpZXNOYW1lOiBzZXJpZXNNb2RlbC5nZXQoJ25hbWUnKSxcbiAgICAgICAgICBzZXJpZXNUeXBlOiBnZXRTZXJpZXNUeXBlTmFtZShzZXJpZXNNb2RlbC5zdWJUeXBlKVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGRhdGEgPSBzZXJpZXNNb2RlbC5nZXREYXRhKCk7XG4gICAgICAgIHdpbmRvdy5kYXRhID0gZGF0YTtcblxuICAgICAgICBpZiAoZGF0YS5jb3VudCgpID4gbWF4RGF0YUNudCkge1xuICAgICAgICAgIC8vIFNob3cgcGFydCBvZiBkYXRhXG4gICAgICAgICAgc2VyaWVzTGFiZWwgKz0gcmVwbGFjZShnZXRDb25maWcoJ2RhdGEucGFydGlhbERhdGEnKSwge1xuICAgICAgICAgICAgZGlzcGxheUNudDogbWF4RGF0YUNudFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlcmllc0xhYmVsICs9IGdldENvbmZpZygnZGF0YS5hbGxEYXRhJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGF0YUxhYmVscyA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5jb3VudCgpOyBpKyspIHtcbiAgICAgICAgICBpZiAoaSA8IG1heERhdGFDbnQpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gZGF0YS5nZXROYW1lKGkpO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gcmV0cmlldmVSYXdWYWx1ZShkYXRhLCBpKTtcbiAgICAgICAgICAgIGRhdGFMYWJlbHMucHVzaChyZXBsYWNlKG5hbWUgPyBnZXRDb25maWcoJ2RhdGEud2l0aE5hbWUnKSA6IGdldENvbmZpZygnZGF0YS53aXRob3V0TmFtZScpLCB7XG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNlcmllc0xhYmVsICs9IGRhdGFMYWJlbHMuam9pbihnZXRDb25maWcoJ2RhdGEuc2VwYXJhdG9yLm1pZGRsZScpKSArIGdldENvbmZpZygnZGF0YS5zZXBhcmF0b3IuZW5kJyk7XG4gICAgICAgIHNlcmllc0xhYmVscy5wdXNoKHNlcmllc0xhYmVsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBhcmlhTGFiZWwgKz0gc2VyaWVzTGFiZWxzLmpvaW4oZ2V0Q29uZmlnKCdzZXJpZXMubXVsdGlwbGUuc2VwYXJhdG9yLm1pZGRsZScpKSArIGdldENvbmZpZygnc2VyaWVzLm11bHRpcGxlLnNlcGFyYXRvci5lbmQnKTtcbiAgICBkb20uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgYXJpYUxhYmVsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2Uoc3RyLCBrZXlWYWx1ZXMpIHtcbiAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IHN0cjtcbiAgICB6clV0aWwuZWFjaChrZXlWYWx1ZXMsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZShuZXcgUmVnRXhwKCdcXFxce1xcXFxzKicgKyBrZXkgKyAnXFxcXHMqXFxcXH0nLCAnZycpLCB2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENvbmZpZyhwYXRoKSB7XG4gICAgdmFyIHVzZXJDb25maWcgPSBhcmlhTW9kZWwuZ2V0KHBhdGgpO1xuXG4gICAgaWYgKHVzZXJDb25maWcgPT0gbnVsbCkge1xuICAgICAgdmFyIHBhdGhBcnIgPSBwYXRoLnNwbGl0KCcuJyk7XG4gICAgICB2YXIgcmVzdWx0ID0gbGFuZy5hcmlhO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhBcnIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0W3BhdGhBcnJbaV1dO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdXNlckNvbmZpZztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUaXRsZSgpIHtcbiAgICB2YXIgdGl0bGUgPSBlY01vZGVsLmdldE1vZGVsKCd0aXRsZScpLm9wdGlvbjtcblxuICAgIGlmICh0aXRsZSAmJiB0aXRsZS5sZW5ndGgpIHtcbiAgICAgIHRpdGxlID0gdGl0bGVbMF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRpdGxlICYmIHRpdGxlLnRleHQ7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTZXJpZXNUeXBlTmFtZSh0eXBlKSB7XG4gICAgcmV0dXJuIGxhbmcuc2VyaWVzLnR5cGVOYW1lc1t0eXBlXSB8fCAn6Ieq5a6a5LmJ5Zu+JztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBfdXRpbCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9jb3JlL3V0aWxcIik7XG5cbnZhciBjcmVhdGVIYXNoTWFwID0gX3V0aWwuY3JlYXRlSGFzaE1hcDtcblxuLypcbiogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4qIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4qIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiogdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuLy8gUGljayBjb2xvciBmcm9tIHBhbGV0dGUgZm9yIGVhY2ggZGF0YSBpdGVtLlxuLy8gQXBwbGljYWJsZSBmb3IgY2hhcnRzIHRoYXQgcmVxdWlyZSBhcHBseWluZyBjb2xvciBwYWxldHRlXG4vLyBpbiBkYXRhIGxldmVsIChsaWtlIHBpZSwgZnVubmVsLCBjaG9yZCkuXG5mdW5jdGlvbiBfZGVmYXVsdChzZXJpZXNUeXBlKSB7XG4gIHJldHVybiB7XG4gICAgZ2V0VGFyZ2V0U2VyaWVzOiBmdW5jdGlvbiAoZWNNb2RlbCkge1xuICAgICAgLy8gUGllIGFuZCBmdW5uZWwgbWF5IHVzZSBkaWZlcnJlbnQgc2NvcGVcbiAgICAgIHZhciBwYWxldHRlU2NvcGUgPSB7fTtcbiAgICAgIHZhciBzZWlyZXNNb2RlbE1hcCA9IGNyZWF0ZUhhc2hNYXAoKTtcbiAgICAgIGVjTW9kZWwuZWFjaFNlcmllc0J5VHlwZShzZXJpZXNUeXBlLCBmdW5jdGlvbiAoc2VyaWVzTW9kZWwpIHtcbiAgICAgICAgc2VyaWVzTW9kZWwuX19wYWxldHRlU2NvcGUgPSBwYWxldHRlU2NvcGU7XG4gICAgICAgIHNlaXJlc01vZGVsTWFwLnNldChzZXJpZXNNb2RlbC51aWQsIHNlcmllc01vZGVsKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNlaXJlc01vZGVsTWFwO1xuICAgIH0sXG4gICAgcmVzZXQ6IGZ1bmN0aW9uIChzZXJpZXNNb2RlbCwgZWNNb2RlbCkge1xuICAgICAgdmFyIGRhdGFBbGwgPSBzZXJpZXNNb2RlbC5nZXRSYXdEYXRhKCk7XG4gICAgICB2YXIgaWR4TWFwID0ge307XG4gICAgICB2YXIgZGF0YSA9IHNlcmllc01vZGVsLmdldERhdGEoKTtcbiAgICAgIGRhdGEuZWFjaChmdW5jdGlvbiAoaWR4KSB7XG4gICAgICAgIHZhciByYXdJZHggPSBkYXRhLmdldFJhd0luZGV4KGlkeCk7XG4gICAgICAgIGlkeE1hcFtyYXdJZHhdID0gaWR4O1xuICAgICAgfSk7XG4gICAgICBkYXRhQWxsLmVhY2goZnVuY3Rpb24gKHJhd0lkeCkge1xuICAgICAgICB2YXIgZmlsdGVyZWRJZHggPSBpZHhNYXBbcmF3SWR4XTsgLy8gSWYgc2VyaWVzLml0ZW1TdHlsZS5ub3JtYWwuY29sb3IgaXMgYSBmdW5jdGlvbi4gaXRlbVZpc3VhbCBtYXkgYmUgZW5jb2RlZFxuXG4gICAgICAgIHZhciBzaW5nbGVEYXRhQ29sb3IgPSBmaWx0ZXJlZElkeCAhPSBudWxsICYmIGRhdGEuZ2V0SXRlbVZpc3VhbChmaWx0ZXJlZElkeCwgJ2NvbG9yJywgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKCFzaW5nbGVEYXRhQ29sb3IpIHtcbiAgICAgICAgICAvLyBGSVhNRSBQZXJmb3JtYW5jZVxuICAgICAgICAgIHZhciBpdGVtTW9kZWwgPSBkYXRhQWxsLmdldEl0ZW1Nb2RlbChyYXdJZHgpO1xuICAgICAgICAgIHZhciBjb2xvciA9IGl0ZW1Nb2RlbC5nZXQoJ2l0ZW1TdHlsZS5jb2xvcicpIHx8IHNlcmllc01vZGVsLmdldENvbG9yRnJvbVBhbGV0dGUoZGF0YUFsbC5nZXROYW1lKHJhd0lkeCkgfHwgcmF3SWR4ICsgJycsIHNlcmllc01vZGVsLl9fcGFsZXR0ZVNjb3BlLCBkYXRhQWxsLmNvdW50KCkpOyAvLyBMZWdlbmQgbWF5IHVzZSB0aGUgdmlzdWFsIGluZm8gaW4gZGF0YSBiZWZvcmUgcHJvY2Vzc2VkXG5cbiAgICAgICAgICBkYXRhQWxsLnNldEl0ZW1WaXN1YWwocmF3SWR4LCAnY29sb3InLCBjb2xvcik7IC8vIERhdGEgaXMgbm90IGZpbHRlcmVkXG5cbiAgICAgICAgICBpZiAoZmlsdGVyZWRJZHggIT0gbnVsbCkge1xuICAgICAgICAgICAgZGF0YS5zZXRJdGVtVmlzdWFsKGZpbHRlcmVkSWR4LCAnY29sb3InLCBjb2xvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFNldCBkYXRhIGFsbCBjb2xvciBmb3IgbGVnZW5kXG4gICAgICAgICAgZGF0YUFsbC5zZXRJdGVtVmlzdWFsKHJhd0lkeCwgJ2NvbG9yJywgc2luZ2xlRGF0YUNvbG9yKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBHcmFkaWVudCA9IHJlcXVpcmUoXCJ6cmVuZGVyL2xpYi9ncmFwaGljL0dyYWRpZW50XCIpO1xuXG4vKlxuKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4qIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4qIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4qIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuKiB1bmRlciB0aGUgTGljZW5zZS5cbiovXG52YXIgX2RlZmF1bHQgPSB7XG4gIGNyZWF0ZU9uQWxsU2VyaWVzOiB0cnVlLFxuICBwZXJmb3JtUmF3U2VyaWVzOiB0cnVlLFxuICByZXNldDogZnVuY3Rpb24gKHNlcmllc01vZGVsLCBlY01vZGVsKSB7XG4gICAgdmFyIGRhdGEgPSBzZXJpZXNNb2RlbC5nZXREYXRhKCk7XG4gICAgdmFyIGNvbG9yQWNjZXNzUGF0aCA9IChzZXJpZXNNb2RlbC52aXN1YWxDb2xvckFjY2Vzc1BhdGggfHwgJ2l0ZW1TdHlsZS5jb2xvcicpLnNwbGl0KCcuJyk7XG4gICAgdmFyIGNvbG9yID0gc2VyaWVzTW9kZWwuZ2V0KGNvbG9yQWNjZXNzUGF0aCkgLy8gU2V0IGluIGl0ZW1TdHlsZVxuICAgIHx8IHNlcmllc01vZGVsLmdldENvbG9yRnJvbVBhbGV0dGUoIC8vIFRPRE8gc2VyaWVzIGNvdW50IGNoYW5nZWQuXG4gICAgc2VyaWVzTW9kZWwubmFtZSwgbnVsbCwgZWNNb2RlbC5nZXRTZXJpZXNDb3VudCgpKTsgLy8gRGVmYXVsdCBjb2xvclxuICAgIC8vIEZJWE1FIFNldCBjb2xvciBmdW5jdGlvbiBvciB1c2UgdGhlIHBsYXR0ZSBjb2xvclxuXG4gICAgZGF0YS5zZXRWaXN1YWwoJ2NvbG9yJywgY29sb3IpOyAvLyBPbmx5IHZpc2libGUgc2VyaWVzIGhhcyBlYWNoIGRhdGEgYmUgdmlzdWFsIGVuY29kZWRcblxuICAgIGlmICghZWNNb2RlbC5pc1Nlcmllc0ZpbHRlcmVkKHNlcmllc01vZGVsKSkge1xuICAgICAgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ2Z1bmN0aW9uJyAmJiAhKGNvbG9yIGluc3RhbmNlb2YgR3JhZGllbnQpKSB7XG4gICAgICAgIGRhdGEuZWFjaChmdW5jdGlvbiAoaWR4KSB7XG4gICAgICAgICAgZGF0YS5zZXRJdGVtVmlzdWFsKGlkeCwgJ2NvbG9yJywgY29sb3Ioc2VyaWVzTW9kZWwuZ2V0RGF0YVBhcmFtcyhpZHgpKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBpdGVtU3R5bGUgaW4gZWFjaCBkYXRhIGl0ZW1cblxuXG4gICAgICB2YXIgZGF0YUVhY2ggPSBmdW5jdGlvbiAoZGF0YSwgaWR4KSB7XG4gICAgICAgIHZhciBpdGVtTW9kZWwgPSBkYXRhLmdldEl0ZW1Nb2RlbChpZHgpO1xuICAgICAgICB2YXIgY29sb3IgPSBpdGVtTW9kZWwuZ2V0KGNvbG9yQWNjZXNzUGF0aCwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKGNvbG9yICE9IG51bGwpIHtcbiAgICAgICAgICBkYXRhLnNldEl0ZW1WaXN1YWwoaWR4LCAnY29sb3InLCBjb2xvcik7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRhdGFFYWNoOiBkYXRhLmhhc0l0ZW1PcHRpb24gPyBkYXRhRWFjaCA6IG51bGxcbiAgICAgIH07XG4gICAgfVxuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCIvKiEgalF1ZXJ5IHYzLjMuMSB8IChjKSBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgfCBqcXVlcnkub3JnL2xpY2Vuc2UgKi9cbiFmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO1wib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lLmRvY3VtZW50P3QoZSwhMCk6ZnVuY3Rpb24oZSl7aWYoIWUuZG9jdW1lbnQpdGhyb3cgbmV3IEVycm9yKFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiKTtyZXR1cm4gdChlKX06dChlKX0oXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dGhpcyxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPVtdLHI9ZS5kb2N1bWVudCxpPU9iamVjdC5nZXRQcm90b3R5cGVPZixvPW4uc2xpY2UsYT1uLmNvbmNhdCxzPW4ucHVzaCx1PW4uaW5kZXhPZixsPXt9LGM9bC50b1N0cmluZyxmPWwuaGFzT3duUHJvcGVydHkscD1mLnRvU3RyaW5nLGQ9cC5jYWxsKE9iamVjdCksaD17fSxnPWZ1bmN0aW9uIGUodCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmXCJudW1iZXJcIiE9dHlwZW9mIHQubm9kZVR5cGV9LHk9ZnVuY3Rpb24gZSh0KXtyZXR1cm4gbnVsbCE9dCYmdD09PXQud2luZG93fSx2PXt0eXBlOiEwLHNyYzohMCxub01vZHVsZTohMH07ZnVuY3Rpb24gbShlLHQsbil7dmFyIGksbz0odD10fHxyKS5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO2lmKG8udGV4dD1lLG4pZm9yKGkgaW4gdiluW2ldJiYob1tpXT1uW2ldKTt0LmhlYWQuYXBwZW5kQ2hpbGQobykucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKX1mdW5jdGlvbiB4KGUpe3JldHVybiBudWxsPT1lP2UrXCJcIjpcIm9iamVjdFwiPT10eXBlb2YgZXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZT9sW2MuY2FsbChlKV18fFwib2JqZWN0XCI6dHlwZW9mIGV9dmFyIGI9XCIzLjMuMVwiLHc9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IHcuZm4uaW5pdChlLHQpfSxUPS9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZzt3LmZuPXcucHJvdG90eXBlPXtqcXVlcnk6XCIzLjMuMVwiLGNvbnN0cnVjdG9yOncsbGVuZ3RoOjAsdG9BcnJheTpmdW5jdGlvbigpe3JldHVybiBvLmNhbGwodGhpcyl9LGdldDpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT9vLmNhbGwodGhpcyk6ZTwwP3RoaXNbZSt0aGlzLmxlbmd0aF06dGhpc1tlXX0scHVzaFN0YWNrOmZ1bmN0aW9uKGUpe3ZhciB0PXcubWVyZ2UodGhpcy5jb25zdHJ1Y3RvcigpLGUpO3JldHVybiB0LnByZXZPYmplY3Q9dGhpcyx0fSxlYWNoOmZ1bmN0aW9uKGUpe3JldHVybiB3LmVhY2godGhpcyxlKX0sbWFwOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnB1c2hTdGFjayh3Lm1hcCh0aGlzLGZ1bmN0aW9uKHQsbil7cmV0dXJuIGUuY2FsbCh0LG4sdCl9KSl9LHNsaWNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKG8uYXBwbHkodGhpcyxhcmd1bWVudHMpKX0sZmlyc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcSgwKX0sbGFzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVxKC0xKX0sZXE6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5sZW5ndGgsbj0rZSsoZTwwP3Q6MCk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKG4+PTAmJm48dD9bdGhpc1tuXV06W10pfSxlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcmV2T2JqZWN0fHx0aGlzLmNvbnN0cnVjdG9yKCl9LHB1c2g6cyxzb3J0Om4uc29ydCxzcGxpY2U6bi5zcGxpY2V9LHcuZXh0ZW5kPXcuZm4uZXh0ZW5kPWZ1bmN0aW9uKCl7dmFyIGUsdCxuLHIsaSxvLGE9YXJndW1lbnRzWzBdfHx7fSxzPTEsdT1hcmd1bWVudHMubGVuZ3RoLGw9ITE7Zm9yKFwiYm9vbGVhblwiPT10eXBlb2YgYSYmKGw9YSxhPWFyZ3VtZW50c1tzXXx8e30scysrKSxcIm9iamVjdFwiPT10eXBlb2YgYXx8ZyhhKXx8KGE9e30pLHM9PT11JiYoYT10aGlzLHMtLSk7czx1O3MrKylpZihudWxsIT0oZT1hcmd1bWVudHNbc10pKWZvcih0IGluIGUpbj1hW3RdLGEhPT0ocj1lW3RdKSYmKGwmJnImJih3LmlzUGxhaW5PYmplY3Qocil8fChpPUFycmF5LmlzQXJyYXkocikpKT8oaT8oaT0hMSxvPW4mJkFycmF5LmlzQXJyYXkobik/bjpbXSk6bz1uJiZ3LmlzUGxhaW5PYmplY3Qobik/bjp7fSxhW3RdPXcuZXh0ZW5kKGwsbyxyKSk6dm9pZCAwIT09ciYmKGFbdF09cikpO3JldHVybiBhfSx3LmV4dGVuZCh7ZXhwYW5kbzpcImpRdWVyeVwiKyhcIjMuMy4xXCIrTWF0aC5yYW5kb20oKSkucmVwbGFjZSgvXFxEL2csXCJcIiksaXNSZWFkeTohMCxlcnJvcjpmdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoZSl9LG5vb3A6ZnVuY3Rpb24oKXt9LGlzUGxhaW5PYmplY3Q6ZnVuY3Rpb24oZSl7dmFyIHQsbjtyZXR1cm4hKCFlfHxcIltvYmplY3QgT2JqZWN0XVwiIT09Yy5jYWxsKGUpKSYmKCEodD1pKGUpKXx8XCJmdW5jdGlvblwiPT10eXBlb2Yobj1mLmNhbGwodCxcImNvbnN0cnVjdG9yXCIpJiZ0LmNvbnN0cnVjdG9yKSYmcC5jYWxsKG4pPT09ZCl9LGlzRW1wdHlPYmplY3Q6ZnVuY3Rpb24oZSl7dmFyIHQ7Zm9yKHQgaW4gZSlyZXR1cm4hMTtyZXR1cm4hMH0sZ2xvYmFsRXZhbDpmdW5jdGlvbihlKXttKGUpfSxlYWNoOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj0wO2lmKEMoZSkpe2ZvcihuPWUubGVuZ3RoO3I8bjtyKyspaWYoITE9PT10LmNhbGwoZVtyXSxyLGVbcl0pKWJyZWFrfWVsc2UgZm9yKHIgaW4gZSlpZighMT09PXQuY2FsbChlW3JdLHIsZVtyXSkpYnJlYWs7cmV0dXJuIGV9LHRyaW06ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWU/XCJcIjooZStcIlwiKS5yZXBsYWNlKFQsXCJcIil9LG1ha2VBcnJheTpmdW5jdGlvbihlLHQpe3ZhciBuPXR8fFtdO3JldHVybiBudWxsIT1lJiYoQyhPYmplY3QoZSkpP3cubWVyZ2UobixcInN0cmluZ1wiPT10eXBlb2YgZT9bZV06ZSk6cy5jYWxsKG4sZSkpLG59LGluQXJyYXk6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBudWxsPT10Py0xOnUuY2FsbCh0LGUsbil9LG1lcmdlOmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPSt0Lmxlbmd0aCxyPTAsaT1lLmxlbmd0aDtyPG47cisrKWVbaSsrXT10W3JdO3JldHVybiBlLmxlbmd0aD1pLGV9LGdyZXA6ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcixpPVtdLG89MCxhPWUubGVuZ3RoLHM9IW47bzxhO28rKykocj0hdChlW29dLG8pKSE9PXMmJmkucHVzaChlW29dKTtyZXR1cm4gaX0sbWFwOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG89MCxzPVtdO2lmKEMoZSkpZm9yKHI9ZS5sZW5ndGg7bzxyO28rKyludWxsIT0oaT10KGVbb10sbyxuKSkmJnMucHVzaChpKTtlbHNlIGZvcihvIGluIGUpbnVsbCE9KGk9dChlW29dLG8sbikpJiZzLnB1c2goaSk7cmV0dXJuIGEuYXBwbHkoW10scyl9LGd1aWQ6MSxzdXBwb3J0Omh9KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJih3LmZuW1N5bWJvbC5pdGVyYXRvcl09bltTeW1ib2wuaXRlcmF0b3JdKSx3LmVhY2goXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihlLHQpe2xbXCJbb2JqZWN0IFwiK3QrXCJdXCJdPXQudG9Mb3dlckNhc2UoKX0pO2Z1bmN0aW9uIEMoZSl7dmFyIHQ9ISFlJiZcImxlbmd0aFwiaW4gZSYmZS5sZW5ndGgsbj14KGUpO3JldHVybiFnKGUpJiYheShlKSYmKFwiYXJyYXlcIj09PW58fDA9PT10fHxcIm51bWJlclwiPT10eXBlb2YgdCYmdD4wJiZ0LTEgaW4gZSl9dmFyIEU9ZnVuY3Rpb24oZSl7dmFyIHQsbixyLGksbyxhLHMsdSxsLGMsZixwLGQsaCxnLHksdixtLHgsYj1cInNpenpsZVwiKzEqbmV3IERhdGUsdz1lLmRvY3VtZW50LFQ9MCxDPTAsRT1hZSgpLGs9YWUoKSxTPWFlKCksRD1mdW5jdGlvbihlLHQpe3JldHVybiBlPT09dCYmKGY9ITApLDB9LE49e30uaGFzT3duUHJvcGVydHksQT1bXSxqPUEucG9wLHE9QS5wdXNoLEw9QS5wdXNoLEg9QS5zbGljZSxPPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTAscj1lLmxlbmd0aDtuPHI7bisrKWlmKGVbbl09PT10KXJldHVybiBuO3JldHVybi0xfSxQPVwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixNPVwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixSPVwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixJPVwiXFxcXFtcIitNK1wiKihcIitSK1wiKSg/OlwiK00rXCIqKFsqXiR8IX5dPz0pXCIrTStcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiK1IrXCIpKXwpXCIrTStcIipcXFxcXVwiLFc9XCI6KFwiK1IrXCIpKD86XFxcXCgoKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8KCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiK0krXCIpKil8LiopXFxcXCl8KVwiLCQ9bmV3IFJlZ0V4cChNK1wiK1wiLFwiZ1wiKSxCPW5ldyBSZWdFeHAoXCJeXCIrTStcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIrTStcIiskXCIsXCJnXCIpLEY9bmV3IFJlZ0V4cChcIl5cIitNK1wiKixcIitNK1wiKlwiKSxfPW5ldyBSZWdFeHAoXCJeXCIrTStcIiooWz4rfl18XCIrTStcIilcIitNK1wiKlwiKSx6PW5ldyBSZWdFeHAoXCI9XCIrTStcIiooW15cXFxcXSdcXFwiXSo/KVwiK00rXCIqXFxcXF1cIixcImdcIiksWD1uZXcgUmVnRXhwKFcpLFU9bmV3IFJlZ0V4cChcIl5cIitSK1wiJFwiKSxWPXtJRDpuZXcgUmVnRXhwKFwiXiMoXCIrUitcIilcIiksQ0xBU1M6bmV3IFJlZ0V4cChcIl5cXFxcLihcIitSK1wiKVwiKSxUQUc6bmV3IFJlZ0V4cChcIl4oXCIrUitcInxbKl0pXCIpLEFUVFI6bmV3IFJlZ0V4cChcIl5cIitJKSxQU0VVRE86bmV3IFJlZ0V4cChcIl5cIitXKSxDSElMRDpuZXcgUmVnRXhwKFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIitNK1wiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIrTStcIiooPzooWystXXwpXCIrTStcIiooXFxcXGQrKXwpKVwiK00rXCIqXFxcXCl8KVwiLFwiaVwiKSxib29sOm5ldyBSZWdFeHAoXCJeKD86XCIrUCtcIikkXCIsXCJpXCIpLG5lZWRzQ29udGV4dDpuZXcgUmVnRXhwKFwiXlwiK00rXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiK00rXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiK00rXCIqXFxcXCl8KSg/PVteLV18JClcIixcImlcIil9LEc9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxZPS9eaFxcZCQvaSxRPS9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sSj0vXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxLPS9bK35dLyxaPW5ldyBSZWdFeHAoXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIitNK1wiP3woXCIrTStcIil8LilcIixcImlnXCIpLGVlPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1cIjB4XCIrdC02NTUzNjtyZXR1cm4gciE9PXJ8fG4/dDpyPDA/U3RyaW5nLmZyb21DaGFyQ29kZShyKzY1NTM2KTpTdHJpbmcuZnJvbUNoYXJDb2RlKHI+PjEwfDU1Mjk2LDEwMjMmcnw1NjMyMCl9LHRlPS8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLG5lPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ/XCJcXDBcIj09PWU/XCJcXHVmZmZkXCI6ZS5zbGljZSgwLC0xKStcIlxcXFxcIitlLmNoYXJDb2RlQXQoZS5sZW5ndGgtMSkudG9TdHJpbmcoMTYpK1wiIFwiOlwiXFxcXFwiK2V9LHJlPWZ1bmN0aW9uKCl7cCgpfSxpZT1tZShmdW5jdGlvbihlKXtyZXR1cm4hMD09PWUuZGlzYWJsZWQmJihcImZvcm1cImluIGV8fFwibGFiZWxcImluIGUpfSx7ZGlyOlwicGFyZW50Tm9kZVwiLG5leHQ6XCJsZWdlbmRcIn0pO3RyeXtMLmFwcGx5KEE9SC5jYWxsKHcuY2hpbGROb2Rlcyksdy5jaGlsZE5vZGVzKSxBW3cuY2hpbGROb2Rlcy5sZW5ndGhdLm5vZGVUeXBlfWNhdGNoKGUpe0w9e2FwcGx5OkEubGVuZ3RoP2Z1bmN0aW9uKGUsdCl7cS5hcHBseShlLEguY2FsbCh0KSl9OmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5sZW5ndGgscj0wO3doaWxlKGVbbisrXT10W3IrK10pO2UubGVuZ3RoPW4tMX19fWZ1bmN0aW9uIG9lKGUsdCxyLGkpe3ZhciBvLHMsbCxjLGYsaCx2LG09dCYmdC5vd25lckRvY3VtZW50LFQ9dD90Lm5vZGVUeXBlOjk7aWYocj1yfHxbXSxcInN0cmluZ1wiIT10eXBlb2YgZXx8IWV8fDEhPT1UJiY5IT09VCYmMTEhPT1UKXJldHVybiByO2lmKCFpJiYoKHQ/dC5vd25lckRvY3VtZW50fHx0OncpIT09ZCYmcCh0KSx0PXR8fGQsZykpe2lmKDExIT09VCYmKGY9Si5leGVjKGUpKSlpZihvPWZbMV0pe2lmKDk9PT1UKXtpZighKGw9dC5nZXRFbGVtZW50QnlJZChvKSkpcmV0dXJuIHI7aWYobC5pZD09PW8pcmV0dXJuIHIucHVzaChsKSxyfWVsc2UgaWYobSYmKGw9bS5nZXRFbGVtZW50QnlJZChvKSkmJngodCxsKSYmbC5pZD09PW8pcmV0dXJuIHIucHVzaChsKSxyfWVsc2V7aWYoZlsyXSlyZXR1cm4gTC5hcHBseShyLHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSkpLHI7aWYoKG89ZlszXSkmJm4uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKXJldHVybiBMLmFwcGx5KHIsdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKG8pKSxyfWlmKG4ucXNhJiYhU1tlK1wiIFwiXSYmKCF5fHwheS50ZXN0KGUpKSl7aWYoMSE9PVQpbT10LHY9ZTtlbHNlIGlmKFwib2JqZWN0XCIhPT10Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpeyhjPXQuZ2V0QXR0cmlidXRlKFwiaWRcIikpP2M9Yy5yZXBsYWNlKHRlLG5lKTp0LnNldEF0dHJpYnV0ZShcImlkXCIsYz1iKSxzPShoPWEoZSkpLmxlbmd0aDt3aGlsZShzLS0paFtzXT1cIiNcIitjK1wiIFwiK3ZlKGhbc10pO3Y9aC5qb2luKFwiLFwiKSxtPUsudGVzdChlKSYmZ2UodC5wYXJlbnROb2RlKXx8dH1pZih2KXRyeXtyZXR1cm4gTC5hcHBseShyLG0ucXVlcnlTZWxlY3RvckFsbCh2KSkscn1jYXRjaChlKXt9ZmluYWxseXtjPT09YiYmdC5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKX19fXJldHVybiB1KGUucmVwbGFjZShCLFwiJDFcIiksdCxyLGkpfWZ1bmN0aW9uIGFlKCl7dmFyIGU9W107ZnVuY3Rpb24gdChuLGkpe3JldHVybiBlLnB1c2gobitcIiBcIik+ci5jYWNoZUxlbmd0aCYmZGVsZXRlIHRbZS5zaGlmdCgpXSx0W24rXCIgXCJdPWl9cmV0dXJuIHR9ZnVuY3Rpb24gc2UoZSl7cmV0dXJuIGVbYl09ITAsZX1mdW5jdGlvbiB1ZShlKXt2YXIgdD1kLmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTt0cnl7cmV0dXJuISFlKHQpfWNhdGNoKGUpe3JldHVybiExfWZpbmFsbHl7dC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCksdD1udWxsfX1mdW5jdGlvbiBsZShlLHQpe3ZhciBuPWUuc3BsaXQoXCJ8XCIpLGk9bi5sZW5ndGg7d2hpbGUoaS0tKXIuYXR0ckhhbmRsZVtuW2ldXT10fWZ1bmN0aW9uIGNlKGUsdCl7dmFyIG49dCYmZSxyPW4mJjE9PT1lLm5vZGVUeXBlJiYxPT09dC5ub2RlVHlwZSYmZS5zb3VyY2VJbmRleC10LnNvdXJjZUluZGV4O2lmKHIpcmV0dXJuIHI7aWYobil3aGlsZShuPW4ubmV4dFNpYmxpbmcpaWYobj09PXQpcmV0dXJuLTE7cmV0dXJuIGU/MTotMX1mdW5jdGlvbiBmZShlKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuXCJpbnB1dFwiPT09dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpJiZ0LnR5cGU9PT1lfX1mdW5jdGlvbiBwZShlKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIG49dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybihcImlucHV0XCI9PT1ufHxcImJ1dHRvblwiPT09bikmJnQudHlwZT09PWV9fWZ1bmN0aW9uIGRlKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm5cImZvcm1cImluIHQ/dC5wYXJlbnROb2RlJiYhMT09PXQuZGlzYWJsZWQ/XCJsYWJlbFwiaW4gdD9cImxhYmVsXCJpbiB0LnBhcmVudE5vZGU/dC5wYXJlbnROb2RlLmRpc2FibGVkPT09ZTp0LmRpc2FibGVkPT09ZTp0LmlzRGlzYWJsZWQ9PT1lfHx0LmlzRGlzYWJsZWQhPT0hZSYmaWUodCk9PT1lOnQuZGlzYWJsZWQ9PT1lOlwibGFiZWxcImluIHQmJnQuZGlzYWJsZWQ9PT1lfX1mdW5jdGlvbiBoZShlKXtyZXR1cm4gc2UoZnVuY3Rpb24odCl7cmV0dXJuIHQ9K3Qsc2UoZnVuY3Rpb24obixyKXt2YXIgaSxvPWUoW10sbi5sZW5ndGgsdCksYT1vLmxlbmd0aDt3aGlsZShhLS0pbltpPW9bYV1dJiYobltpXT0hKHJbaV09bltpXSkpfSl9KX1mdW5jdGlvbiBnZShlKXtyZXR1cm4gZSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUmJmV9bj1vZS5zdXBwb3J0PXt9LG89b2UuaXNYTUw9ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmKGUub3duZXJEb2N1bWVudHx8ZSkuZG9jdW1lbnRFbGVtZW50O3JldHVybiEhdCYmXCJIVE1MXCIhPT10Lm5vZGVOYW1lfSxwPW9lLnNldERvY3VtZW50PWZ1bmN0aW9uKGUpe3ZhciB0LGksYT1lP2Uub3duZXJEb2N1bWVudHx8ZTp3O3JldHVybiBhIT09ZCYmOT09PWEubm9kZVR5cGUmJmEuZG9jdW1lbnRFbGVtZW50PyhkPWEsaD1kLmRvY3VtZW50RWxlbWVudCxnPSFvKGQpLHchPT1kJiYoaT1kLmRlZmF1bHRWaWV3KSYmaS50b3AhPT1pJiYoaS5hZGRFdmVudExpc3RlbmVyP2kuYWRkRXZlbnRMaXN0ZW5lcihcInVubG9hZFwiLHJlLCExKTppLmF0dGFjaEV2ZW50JiZpLmF0dGFjaEV2ZW50KFwib251bmxvYWRcIixyZSkpLG4uYXR0cmlidXRlcz11ZShmdW5jdGlvbihlKXtyZXR1cm4gZS5jbGFzc05hbWU9XCJpXCIsIWUuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpfSksbi5nZXRFbGVtZW50c0J5VGFnTmFtZT11ZShmdW5jdGlvbihlKXtyZXR1cm4gZS5hcHBlbmRDaGlsZChkLmNyZWF0ZUNvbW1lbnQoXCJcIikpLCFlLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGh9KSxuLmdldEVsZW1lbnRzQnlDbGFzc05hbWU9US50ZXN0KGQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSksbi5nZXRCeUlkPXVlKGZ1bmN0aW9uKGUpe3JldHVybiBoLmFwcGVuZENoaWxkKGUpLmlkPWIsIWQuZ2V0RWxlbWVudHNCeU5hbWV8fCFkLmdldEVsZW1lbnRzQnlOYW1lKGIpLmxlbmd0aH0pLG4uZ2V0QnlJZD8oci5maWx0ZXIuSUQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXBsYWNlKFosZWUpO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZS5nZXRBdHRyaWJ1dGUoXCJpZFwiKT09PXR9fSxyLmZpbmQuSUQ9ZnVuY3Rpb24oZSx0KXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgdC5nZXRFbGVtZW50QnlJZCYmZyl7dmFyIG49dC5nZXRFbGVtZW50QnlJZChlKTtyZXR1cm4gbj9bbl06W119fSk6KHIuZmlsdGVyLklEPWZ1bmN0aW9uKGUpe3ZhciB0PWUucmVwbGFjZShaLGVlKTtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIG49XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUuZ2V0QXR0cmlidXRlTm9kZSYmZS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7cmV0dXJuIG4mJm4udmFsdWU9PT10fX0sci5maW5kLklEPWZ1bmN0aW9uKGUsdCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHQuZ2V0RWxlbWVudEJ5SWQmJmcpe3ZhciBuLHIsaSxvPXQuZ2V0RWxlbWVudEJ5SWQoZSk7aWYobyl7aWYoKG49by5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIikpJiZuLnZhbHVlPT09ZSlyZXR1cm5bb107aT10LmdldEVsZW1lbnRzQnlOYW1lKGUpLHI9MDt3aGlsZShvPWlbcisrXSlpZigobj1vLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKSkmJm4udmFsdWU9PT1lKXJldHVybltvXX1yZXR1cm5bXX19KSxyLmZpbmQuVEFHPW4uZ2V0RWxlbWVudHNCeVRhZ05hbWU/ZnVuY3Rpb24oZSx0KXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgdC5nZXRFbGVtZW50c0J5VGFnTmFtZT90LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpOm4ucXNhP3QucXVlcnlTZWxlY3RvckFsbChlKTp2b2lkIDB9OmZ1bmN0aW9uKGUsdCl7dmFyIG4scj1bXSxpPTAsbz10LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpO2lmKFwiKlwiPT09ZSl7d2hpbGUobj1vW2krK10pMT09PW4ubm9kZVR5cGUmJnIucHVzaChuKTtyZXR1cm4gcn1yZXR1cm4gb30sci5maW5kLkNMQVNTPW4uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmZnVuY3Rpb24oZSx0KXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lJiZnKXJldHVybiB0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoZSl9LHY9W10seT1bXSwobi5xc2E9US50ZXN0KGQucXVlcnlTZWxlY3RvckFsbCkpJiYodWUoZnVuY3Rpb24oZSl7aC5hcHBlbmRDaGlsZChlKS5pbm5lckhUTUw9XCI8YSBpZD0nXCIrYitcIic+PC9hPjxzZWxlY3QgaWQ9J1wiK2IrXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+PG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIixlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGgmJnkucHVzaChcIlsqXiRdPVwiK00rXCIqKD86Jyd8XFxcIlxcXCIpXCIpLGUucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RofHx5LnB1c2goXCJcXFxcW1wiK00rXCIqKD86dmFsdWV8XCIrUCtcIilcIiksZS5xdWVyeVNlbGVjdG9yQWxsKFwiW2lkfj1cIitiK1wiLV1cIikubGVuZ3RofHx5LnB1c2goXCJ+PVwiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGh8fHkucHVzaChcIjpjaGVja2VkXCIpLGUucXVlcnlTZWxlY3RvckFsbChcImEjXCIrYitcIisqXCIpLmxlbmd0aHx8eS5wdXNoKFwiLiMuK1srfl1cIil9KSx1ZShmdW5jdGlvbihlKXtlLmlubmVySFRNTD1cIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+PHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO3ZhciB0PWQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO3Quc2V0QXR0cmlidXRlKFwidHlwZVwiLFwiaGlkZGVuXCIpLGUuYXBwZW5kQ2hpbGQodCkuc2V0QXR0cmlidXRlKFwibmFtZVwiLFwiRFwiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGgmJnkucHVzaChcIm5hbWVcIitNK1wiKlsqXiR8IX5dPz1cIiksMiE9PWUucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCYmeS5wdXNoKFwiOmVuYWJsZWRcIixcIjpkaXNhYmxlZFwiKSxoLmFwcGVuZENoaWxkKGUpLmRpc2FibGVkPSEwLDIhPT1lLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoJiZ5LnB1c2goXCI6ZW5hYmxlZFwiLFwiOmRpc2FibGVkXCIpLGUucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIikseS5wdXNoKFwiLC4qOlwiKX0pKSwobi5tYXRjaGVzU2VsZWN0b3I9US50ZXN0KG09aC5tYXRjaGVzfHxoLndlYmtpdE1hdGNoZXNTZWxlY3Rvcnx8aC5tb3pNYXRjaGVzU2VsZWN0b3J8fGgub01hdGNoZXNTZWxlY3Rvcnx8aC5tc01hdGNoZXNTZWxlY3RvcikpJiZ1ZShmdW5jdGlvbihlKXtuLmRpc2Nvbm5lY3RlZE1hdGNoPW0uY2FsbChlLFwiKlwiKSxtLmNhbGwoZSxcIltzIT0nJ106eFwiKSx2LnB1c2goXCIhPVwiLFcpfSkseT15Lmxlbmd0aCYmbmV3IFJlZ0V4cCh5LmpvaW4oXCJ8XCIpKSx2PXYubGVuZ3RoJiZuZXcgUmVnRXhwKHYuam9pbihcInxcIikpLHQ9US50ZXN0KGguY29tcGFyZURvY3VtZW50UG9zaXRpb24pLHg9dHx8US50ZXN0KGguY29udGFpbnMpP2Z1bmN0aW9uKGUsdCl7dmFyIG49OT09PWUubm9kZVR5cGU/ZS5kb2N1bWVudEVsZW1lbnQ6ZSxyPXQmJnQucGFyZW50Tm9kZTtyZXR1cm4gZT09PXJ8fCEoIXJ8fDEhPT1yLm5vZGVUeXBlfHwhKG4uY29udGFpbnM/bi5jb250YWlucyhyKTplLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uJiYxNiZlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHIpKSl9OmZ1bmN0aW9uKGUsdCl7aWYodCl3aGlsZSh0PXQucGFyZW50Tm9kZSlpZih0PT09ZSlyZXR1cm4hMDtyZXR1cm4hMX0sRD10P2Z1bmN0aW9uKGUsdCl7aWYoZT09PXQpcmV0dXJuIGY9ITAsMDt2YXIgcj0hZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbi0hdC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtyZXR1cm4gcnx8KDEmKHI9KGUub3duZXJEb2N1bWVudHx8ZSk9PT0odC5vd25lckRvY3VtZW50fHx0KT9lLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHQpOjEpfHwhbi5zb3J0RGV0YWNoZWQmJnQuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZSk9PT1yP2U9PT1kfHxlLm93bmVyRG9jdW1lbnQ9PT13JiZ4KHcsZSk/LTE6dD09PWR8fHQub3duZXJEb2N1bWVudD09PXcmJngodyx0KT8xOmM/TyhjLGUpLU8oYyx0KTowOjQmcj8tMToxKX06ZnVuY3Rpb24oZSx0KXtpZihlPT09dClyZXR1cm4gZj0hMCwwO3ZhciBuLHI9MCxpPWUucGFyZW50Tm9kZSxvPXQucGFyZW50Tm9kZSxhPVtlXSxzPVt0XTtpZighaXx8IW8pcmV0dXJuIGU9PT1kPy0xOnQ9PT1kPzE6aT8tMTpvPzE6Yz9PKGMsZSktTyhjLHQpOjA7aWYoaT09PW8pcmV0dXJuIGNlKGUsdCk7bj1lO3doaWxlKG49bi5wYXJlbnROb2RlKWEudW5zaGlmdChuKTtuPXQ7d2hpbGUobj1uLnBhcmVudE5vZGUpcy51bnNoaWZ0KG4pO3doaWxlKGFbcl09PT1zW3JdKXIrKztyZXR1cm4gcj9jZShhW3JdLHNbcl0pOmFbcl09PT13Py0xOnNbcl09PT13PzE6MH0sZCk6ZH0sb2UubWF0Y2hlcz1mdW5jdGlvbihlLHQpe3JldHVybiBvZShlLG51bGwsbnVsbCx0KX0sb2UubWF0Y2hlc1NlbGVjdG9yPWZ1bmN0aW9uKGUsdCl7aWYoKGUub3duZXJEb2N1bWVudHx8ZSkhPT1kJiZwKGUpLHQ9dC5yZXBsYWNlKHosXCI9JyQxJ11cIiksbi5tYXRjaGVzU2VsZWN0b3ImJmcmJiFTW3QrXCIgXCJdJiYoIXZ8fCF2LnRlc3QodCkpJiYoIXl8fCF5LnRlc3QodCkpKXRyeXt2YXIgcj1tLmNhbGwoZSx0KTtpZihyfHxuLmRpc2Nvbm5lY3RlZE1hdGNofHxlLmRvY3VtZW50JiYxMSE9PWUuZG9jdW1lbnQubm9kZVR5cGUpcmV0dXJuIHJ9Y2F0Y2goZSl7fXJldHVybiBvZSh0LGQsbnVsbCxbZV0pLmxlbmd0aD4wfSxvZS5jb250YWlucz1mdW5jdGlvbihlLHQpe3JldHVybihlLm93bmVyRG9jdW1lbnR8fGUpIT09ZCYmcChlKSx4KGUsdCl9LG9lLmF0dHI9ZnVuY3Rpb24oZSx0KXsoZS5vd25lckRvY3VtZW50fHxlKSE9PWQmJnAoZSk7dmFyIGk9ci5hdHRySGFuZGxlW3QudG9Mb3dlckNhc2UoKV0sbz1pJiZOLmNhbGwoci5hdHRySGFuZGxlLHQudG9Mb3dlckNhc2UoKSk/aShlLHQsIWcpOnZvaWQgMDtyZXR1cm4gdm9pZCAwIT09bz9vOm4uYXR0cmlidXRlc3x8IWc/ZS5nZXRBdHRyaWJ1dGUodCk6KG89ZS5nZXRBdHRyaWJ1dGVOb2RlKHQpKSYmby5zcGVjaWZpZWQ/by52YWx1ZTpudWxsfSxvZS5lc2NhcGU9ZnVuY3Rpb24oZSl7cmV0dXJuKGUrXCJcIikucmVwbGFjZSh0ZSxuZSl9LG9lLmVycm9yPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiK2UpfSxvZS51bmlxdWVTb3J0PWZ1bmN0aW9uKGUpe3ZhciB0LHI9W10saT0wLG89MDtpZihmPSFuLmRldGVjdER1cGxpY2F0ZXMsYz0hbi5zb3J0U3RhYmxlJiZlLnNsaWNlKDApLGUuc29ydChEKSxmKXt3aGlsZSh0PWVbbysrXSl0PT09ZVtvXSYmKGk9ci5wdXNoKG8pKTt3aGlsZShpLS0pZS5zcGxpY2UocltpXSwxKX1yZXR1cm4gYz1udWxsLGV9LGk9b2UuZ2V0VGV4dD1mdW5jdGlvbihlKXt2YXIgdCxuPVwiXCIscj0wLG89ZS5ub2RlVHlwZTtpZihvKXtpZigxPT09b3x8OT09PW98fDExPT09byl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUudGV4dENvbnRlbnQpcmV0dXJuIGUudGV4dENvbnRlbnQ7Zm9yKGU9ZS5maXJzdENoaWxkO2U7ZT1lLm5leHRTaWJsaW5nKW4rPWkoZSl9ZWxzZSBpZigzPT09b3x8ND09PW8pcmV0dXJuIGUubm9kZVZhbHVlfWVsc2Ugd2hpbGUodD1lW3IrK10pbis9aSh0KTtyZXR1cm4gbn0sKHI9b2Uuc2VsZWN0b3JzPXtjYWNoZUxlbmd0aDo1MCxjcmVhdGVQc2V1ZG86c2UsbWF0Y2g6VixhdHRySGFuZGxlOnt9LGZpbmQ6e30scmVsYXRpdmU6e1wiPlwiOntkaXI6XCJwYXJlbnROb2RlXCIsZmlyc3Q6ITB9LFwiIFwiOntkaXI6XCJwYXJlbnROb2RlXCJ9LFwiK1wiOntkaXI6XCJwcmV2aW91c1NpYmxpbmdcIixmaXJzdDohMH0sXCJ+XCI6e2RpcjpcInByZXZpb3VzU2libGluZ1wifX0scHJlRmlsdGVyOntBVFRSOmZ1bmN0aW9uKGUpe3JldHVybiBlWzFdPWVbMV0ucmVwbGFjZShaLGVlKSxlWzNdPShlWzNdfHxlWzRdfHxlWzVdfHxcIlwiKS5yZXBsYWNlKFosZWUpLFwifj1cIj09PWVbMl0mJihlWzNdPVwiIFwiK2VbM10rXCIgXCIpLGUuc2xpY2UoMCw0KX0sQ0hJTEQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGVbMV09ZVsxXS50b0xvd2VyQ2FzZSgpLFwibnRoXCI9PT1lWzFdLnNsaWNlKDAsMyk/KGVbM118fG9lLmVycm9yKGVbMF0pLGVbNF09KyhlWzRdP2VbNV0rKGVbNl18fDEpOjIqKFwiZXZlblwiPT09ZVszXXx8XCJvZGRcIj09PWVbM10pKSxlWzVdPSsoZVs3XStlWzhdfHxcIm9kZFwiPT09ZVszXSkpOmVbM10mJm9lLmVycm9yKGVbMF0pLGV9LFBTRVVETzpmdW5jdGlvbihlKXt2YXIgdCxuPSFlWzZdJiZlWzJdO3JldHVybiBWLkNISUxELnRlc3QoZVswXSk/bnVsbDooZVszXT9lWzJdPWVbNF18fGVbNV18fFwiXCI6biYmWC50ZXN0KG4pJiYodD1hKG4sITApKSYmKHQ9bi5pbmRleE9mKFwiKVwiLG4ubGVuZ3RoLXQpLW4ubGVuZ3RoKSYmKGVbMF09ZVswXS5zbGljZSgwLHQpLGVbMl09bi5zbGljZSgwLHQpKSxlLnNsaWNlKDAsMykpfX0sZmlsdGVyOntUQUc6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXBsYWNlKFosZWUpLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCIqXCI9PT1lP2Z1bmN0aW9uKCl7cmV0dXJuITB9OmZ1bmN0aW9uKGUpe3JldHVybiBlLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT10fX0sQ0xBU1M6ZnVuY3Rpb24oZSl7dmFyIHQ9RVtlK1wiIFwiXTtyZXR1cm4gdHx8KHQ9bmV3IFJlZ0V4cChcIihefFwiK00rXCIpXCIrZStcIihcIitNK1wifCQpXCIpKSYmRShlLGZ1bmN0aW9uKGUpe3JldHVybiB0LnRlc3QoXCJzdHJpbmdcIj09dHlwZW9mIGUuY2xhc3NOYW1lJiZlLmNsYXNzTmFtZXx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUuZ2V0QXR0cmlidXRlJiZlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwiKX0pfSxBVFRSOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZnVuY3Rpb24ocil7dmFyIGk9b2UuYXR0cihyLGUpO3JldHVybiBudWxsPT1pP1wiIT1cIj09PXQ6IXR8fChpKz1cIlwiLFwiPVwiPT09dD9pPT09bjpcIiE9XCI9PT10P2khPT1uOlwiXj1cIj09PXQ/biYmMD09PWkuaW5kZXhPZihuKTpcIio9XCI9PT10P24mJmkuaW5kZXhPZihuKT4tMTpcIiQ9XCI9PT10P24mJmkuc2xpY2UoLW4ubGVuZ3RoKT09PW46XCJ+PVwiPT09dD8oXCIgXCIraS5yZXBsYWNlKCQsXCIgXCIpK1wiIFwiKS5pbmRleE9mKG4pPi0xOlwifD1cIj09PXQmJihpPT09bnx8aS5zbGljZSgwLG4ubGVuZ3RoKzEpPT09bitcIi1cIikpfX0sQ0hJTEQ6ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbz1cIm50aFwiIT09ZS5zbGljZSgwLDMpLGE9XCJsYXN0XCIhPT1lLnNsaWNlKC00KSxzPVwib2YtdHlwZVwiPT09dDtyZXR1cm4gMT09PXImJjA9PT1pP2Z1bmN0aW9uKGUpe3JldHVybiEhZS5wYXJlbnROb2RlfTpmdW5jdGlvbih0LG4sdSl7dmFyIGwsYyxmLHAsZCxoLGc9byE9PWE/XCJuZXh0U2libGluZ1wiOlwicHJldmlvdXNTaWJsaW5nXCIseT10LnBhcmVudE5vZGUsdj1zJiZ0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksbT0hdSYmIXMseD0hMTtpZih5KXtpZihvKXt3aGlsZShnKXtwPXQ7d2hpbGUocD1wW2ddKWlmKHM/cC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09djoxPT09cC5ub2RlVHlwZSlyZXR1cm4hMTtoPWc9XCJvbmx5XCI9PT1lJiYhaCYmXCJuZXh0U2libGluZ1wifXJldHVybiEwfWlmKGg9W2E/eS5maXJzdENoaWxkOnkubGFzdENoaWxkXSxhJiZtKXt4PShkPShsPShjPShmPShwPXkpW2JdfHwocFtiXT17fSkpW3AudW5pcXVlSURdfHwoZltwLnVuaXF1ZUlEXT17fSkpW2VdfHxbXSlbMF09PT1UJiZsWzFdKSYmbFsyXSxwPWQmJnkuY2hpbGROb2Rlc1tkXTt3aGlsZShwPSsrZCYmcCYmcFtnXXx8KHg9ZD0wKXx8aC5wb3AoKSlpZigxPT09cC5ub2RlVHlwZSYmKyt4JiZwPT09dCl7Y1tlXT1bVCxkLHhdO2JyZWFrfX1lbHNlIGlmKG0mJih4PWQ9KGw9KGM9KGY9KHA9dClbYl18fChwW2JdPXt9KSlbcC51bmlxdWVJRF18fChmW3AudW5pcXVlSURdPXt9KSlbZV18fFtdKVswXT09PVQmJmxbMV0pLCExPT09eCl3aGlsZShwPSsrZCYmcCYmcFtnXXx8KHg9ZD0wKXx8aC5wb3AoKSlpZigocz9wLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT12OjE9PT1wLm5vZGVUeXBlKSYmKyt4JiYobSYmKChjPShmPXBbYl18fChwW2JdPXt9KSlbcC51bmlxdWVJRF18fChmW3AudW5pcXVlSURdPXt9KSlbZV09W1QseF0pLHA9PT10KSlicmVhaztyZXR1cm4oeC09aSk9PT1yfHx4JXI9PTAmJngvcj49MH19fSxQU0VVRE86ZnVuY3Rpb24oZSx0KXt2YXIgbixpPXIucHNldWRvc1tlXXx8ci5zZXRGaWx0ZXJzW2UudG9Mb3dlckNhc2UoKV18fG9lLmVycm9yKFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIitlKTtyZXR1cm4gaVtiXT9pKHQpOmkubGVuZ3RoPjE/KG49W2UsZSxcIlwiLHRdLHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eShlLnRvTG93ZXJDYXNlKCkpP3NlKGZ1bmN0aW9uKGUsbil7dmFyIHIsbz1pKGUsdCksYT1vLmxlbmd0aDt3aGlsZShhLS0pZVtyPU8oZSxvW2FdKV09IShuW3JdPW9bYV0pfSk6ZnVuY3Rpb24oZSl7cmV0dXJuIGkoZSwwLG4pfSk6aX19LHBzZXVkb3M6e25vdDpzZShmdW5jdGlvbihlKXt2YXIgdD1bXSxuPVtdLHI9cyhlLnJlcGxhY2UoQixcIiQxXCIpKTtyZXR1cm4gcltiXT9zZShmdW5jdGlvbihlLHQsbixpKXt2YXIgbyxhPXIoZSxudWxsLGksW10pLHM9ZS5sZW5ndGg7d2hpbGUocy0tKShvPWFbc10pJiYoZVtzXT0hKHRbc109bykpfSk6ZnVuY3Rpb24oZSxpLG8pe3JldHVybiB0WzBdPWUscih0LG51bGwsbyxuKSx0WzBdPW51bGwsIW4ucG9wKCl9fSksaGFzOnNlKGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gb2UoZSx0KS5sZW5ndGg+MH19KSxjb250YWluczpzZShmdW5jdGlvbihlKXtyZXR1cm4gZT1lLnJlcGxhY2UoWixlZSksZnVuY3Rpb24odCl7cmV0dXJuKHQudGV4dENvbnRlbnR8fHQuaW5uZXJUZXh0fHxpKHQpKS5pbmRleE9mKGUpPi0xfX0pLGxhbmc6c2UoZnVuY3Rpb24oZSl7cmV0dXJuIFUudGVzdChlfHxcIlwiKXx8b2UuZXJyb3IoXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIitlKSxlPWUucmVwbGFjZShaLGVlKS50b0xvd2VyQ2FzZSgpLGZ1bmN0aW9uKHQpe3ZhciBuO2Rve2lmKG49Zz90Lmxhbmc6dC5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKXx8dC5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKXJldHVybihuPW4udG9Mb3dlckNhc2UoKSk9PT1lfHwwPT09bi5pbmRleE9mKGUrXCItXCIpfXdoaWxlKCh0PXQucGFyZW50Tm9kZSkmJjE9PT10Lm5vZGVUeXBlKTtyZXR1cm4hMX19KSx0YXJnZXQ6ZnVuY3Rpb24odCl7dmFyIG49ZS5sb2NhdGlvbiYmZS5sb2NhdGlvbi5oYXNoO3JldHVybiBuJiZuLnNsaWNlKDEpPT09dC5pZH0scm9vdDpmdW5jdGlvbihlKXtyZXR1cm4gZT09PWh9LGZvY3VzOmZ1bmN0aW9uKGUpe3JldHVybiBlPT09ZC5hY3RpdmVFbGVtZW50JiYoIWQuaGFzRm9jdXN8fGQuaGFzRm9jdXMoKSkmJiEhKGUudHlwZXx8ZS5ocmVmfHx+ZS50YWJJbmRleCl9LGVuYWJsZWQ6ZGUoITEpLGRpc2FibGVkOmRlKCEwKSxjaGVja2VkOmZ1bmN0aW9uKGUpe3ZhciB0PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT10JiYhIWUuY2hlY2tlZHx8XCJvcHRpb25cIj09PXQmJiEhZS5zZWxlY3RlZH0sc2VsZWN0ZWQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucGFyZW50Tm9kZSYmZS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsITA9PT1lLnNlbGVjdGVkfSxlbXB0eTpmdW5jdGlvbihlKXtmb3IoZT1lLmZpcnN0Q2hpbGQ7ZTtlPWUubmV4dFNpYmxpbmcpaWYoZS5ub2RlVHlwZTw2KXJldHVybiExO3JldHVybiEwfSxwYXJlbnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIXIucHNldWRvcy5lbXB0eShlKX0saGVhZGVyOmZ1bmN0aW9uKGUpe3JldHVybiBZLnRlc3QoZS5ub2RlTmFtZSl9LGlucHV0OmZ1bmN0aW9uKGUpe3JldHVybiBHLnRlc3QoZS5ub2RlTmFtZSl9LGJ1dHRvbjpmdW5jdGlvbihlKXt2YXIgdD1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09dCYmXCJidXR0b25cIj09PWUudHlwZXx8XCJidXR0b25cIj09PXR9LHRleHQ6ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuXCJpbnB1dFwiPT09ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpJiZcInRleHRcIj09PWUudHlwZSYmKG51bGw9PSh0PWUuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSl8fFwidGV4dFwiPT09dC50b0xvd2VyQ2FzZSgpKX0sZmlyc3Q6aGUoZnVuY3Rpb24oKXtyZXR1cm5bMF19KSxsYXN0OmhlKGZ1bmN0aW9uKGUsdCl7cmV0dXJuW3QtMV19KSxlcTpoZShmdW5jdGlvbihlLHQsbil7cmV0dXJuW248MD9uK3Q6bl19KSxldmVuOmhlKGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTA7bjx0O24rPTIpZS5wdXNoKG4pO3JldHVybiBlfSksb2RkOmhlKGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTE7bjx0O24rPTIpZS5wdXNoKG4pO3JldHVybiBlfSksbHQ6aGUoZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcj1uPDA/bit0Om47LS1yPj0wOyllLnB1c2gocik7cmV0dXJuIGV9KSxndDpoZShmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPW48MD9uK3Q6bjsrK3I8dDspZS5wdXNoKHIpO3JldHVybiBlfSl9fSkucHNldWRvcy5udGg9ci5wc2V1ZG9zLmVxO2Zvcih0IGlue3JhZGlvOiEwLGNoZWNrYm94OiEwLGZpbGU6ITAscGFzc3dvcmQ6ITAsaW1hZ2U6ITB9KXIucHNldWRvc1t0XT1mZSh0KTtmb3IodCBpbntzdWJtaXQ6ITAscmVzZXQ6ITB9KXIucHNldWRvc1t0XT1wZSh0KTtmdW5jdGlvbiB5ZSgpe315ZS5wcm90b3R5cGU9ci5maWx0ZXJzPXIucHNldWRvcyxyLnNldEZpbHRlcnM9bmV3IHllLGE9b2UudG9rZW5pemU9ZnVuY3Rpb24oZSx0KXt2YXIgbixpLG8sYSxzLHUsbCxjPWtbZStcIiBcIl07aWYoYylyZXR1cm4gdD8wOmMuc2xpY2UoMCk7cz1lLHU9W10sbD1yLnByZUZpbHRlcjt3aGlsZShzKXtuJiYhKGk9Ri5leGVjKHMpKXx8KGkmJihzPXMuc2xpY2UoaVswXS5sZW5ndGgpfHxzKSx1LnB1c2gobz1bXSkpLG49ITEsKGk9Xy5leGVjKHMpKSYmKG49aS5zaGlmdCgpLG8ucHVzaCh7dmFsdWU6bix0eXBlOmlbMF0ucmVwbGFjZShCLFwiIFwiKX0pLHM9cy5zbGljZShuLmxlbmd0aCkpO2ZvcihhIGluIHIuZmlsdGVyKSEoaT1WW2FdLmV4ZWMocykpfHxsW2FdJiYhKGk9bFthXShpKSl8fChuPWkuc2hpZnQoKSxvLnB1c2goe3ZhbHVlOm4sdHlwZTphLG1hdGNoZXM6aX0pLHM9cy5zbGljZShuLmxlbmd0aCkpO2lmKCFuKWJyZWFrfXJldHVybiB0P3MubGVuZ3RoOnM/b2UuZXJyb3IoZSk6ayhlLHUpLnNsaWNlKDApfTtmdW5jdGlvbiB2ZShlKXtmb3IodmFyIHQ9MCxuPWUubGVuZ3RoLHI9XCJcIjt0PG47dCsrKXIrPWVbdF0udmFsdWU7cmV0dXJuIHJ9ZnVuY3Rpb24gbWUoZSx0LG4pe3ZhciByPXQuZGlyLGk9dC5uZXh0LG89aXx8cixhPW4mJlwicGFyZW50Tm9kZVwiPT09byxzPUMrKztyZXR1cm4gdC5maXJzdD9mdW5jdGlvbih0LG4saSl7d2hpbGUodD10W3JdKWlmKDE9PT10Lm5vZGVUeXBlfHxhKXJldHVybiBlKHQsbixpKTtyZXR1cm4hMX06ZnVuY3Rpb24odCxuLHUpe3ZhciBsLGMsZixwPVtULHNdO2lmKHUpe3doaWxlKHQ9dFtyXSlpZigoMT09PXQubm9kZVR5cGV8fGEpJiZlKHQsbix1KSlyZXR1cm4hMH1lbHNlIHdoaWxlKHQ9dFtyXSlpZigxPT09dC5ub2RlVHlwZXx8YSlpZihmPXRbYl18fCh0W2JdPXt9KSxjPWZbdC51bmlxdWVJRF18fChmW3QudW5pcXVlSURdPXt9KSxpJiZpPT09dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXQ9dFtyXXx8dDtlbHNle2lmKChsPWNbb10pJiZsWzBdPT09VCYmbFsxXT09PXMpcmV0dXJuIHBbMl09bFsyXTtpZihjW29dPXAscFsyXT1lKHQsbix1KSlyZXR1cm4hMH1yZXR1cm4hMX19ZnVuY3Rpb24geGUoZSl7cmV0dXJuIGUubGVuZ3RoPjE/ZnVuY3Rpb24odCxuLHIpe3ZhciBpPWUubGVuZ3RoO3doaWxlKGktLSlpZighZVtpXSh0LG4scikpcmV0dXJuITE7cmV0dXJuITB9OmVbMF19ZnVuY3Rpb24gYmUoZSx0LG4pe2Zvcih2YXIgcj0wLGk9dC5sZW5ndGg7cjxpO3IrKylvZShlLHRbcl0sbik7cmV0dXJuIG59ZnVuY3Rpb24gd2UoZSx0LG4scixpKXtmb3IodmFyIG8sYT1bXSxzPTAsdT1lLmxlbmd0aCxsPW51bGwhPXQ7czx1O3MrKykobz1lW3NdKSYmKG4mJiFuKG8scixpKXx8KGEucHVzaChvKSxsJiZ0LnB1c2gocykpKTtyZXR1cm4gYX1mdW5jdGlvbiBUZShlLHQsbixyLGksbyl7cmV0dXJuIHImJiFyW2JdJiYocj1UZShyKSksaSYmIWlbYl0mJihpPVRlKGksbykpLHNlKGZ1bmN0aW9uKG8sYSxzLHUpe3ZhciBsLGMsZixwPVtdLGQ9W10saD1hLmxlbmd0aCxnPW98fGJlKHR8fFwiKlwiLHMubm9kZVR5cGU/W3NdOnMsW10pLHk9IWV8fCFvJiZ0P2c6d2UoZyxwLGUscyx1KSx2PW4/aXx8KG8/ZTpofHxyKT9bXTphOnk7aWYobiYmbih5LHYscyx1KSxyKXtsPXdlKHYsZCkscihsLFtdLHMsdSksYz1sLmxlbmd0aDt3aGlsZShjLS0pKGY9bFtjXSkmJih2W2RbY11dPSEoeVtkW2NdXT1mKSl9aWYobyl7aWYoaXx8ZSl7aWYoaSl7bD1bXSxjPXYubGVuZ3RoO3doaWxlKGMtLSkoZj12W2NdKSYmbC5wdXNoKHlbY109Zik7aShudWxsLHY9W10sbCx1KX1jPXYubGVuZ3RoO3doaWxlKGMtLSkoZj12W2NdKSYmKGw9aT9PKG8sZik6cFtjXSk+LTEmJihvW2xdPSEoYVtsXT1mKSl9fWVsc2Ugdj13ZSh2PT09YT92LnNwbGljZShoLHYubGVuZ3RoKTp2KSxpP2kobnVsbCxhLHYsdSk6TC5hcHBseShhLHYpfSl9ZnVuY3Rpb24gQ2UoZSl7Zm9yKHZhciB0LG4saSxvPWUubGVuZ3RoLGE9ci5yZWxhdGl2ZVtlWzBdLnR5cGVdLHM9YXx8ci5yZWxhdGl2ZVtcIiBcIl0sdT1hPzE6MCxjPW1lKGZ1bmN0aW9uKGUpe3JldHVybiBlPT09dH0scywhMCksZj1tZShmdW5jdGlvbihlKXtyZXR1cm4gTyh0LGUpPi0xfSxzLCEwKSxwPVtmdW5jdGlvbihlLG4scil7dmFyIGk9IWEmJihyfHxuIT09bCl8fCgodD1uKS5ub2RlVHlwZT9jKGUsbixyKTpmKGUsbixyKSk7cmV0dXJuIHQ9bnVsbCxpfV07dTxvO3UrKylpZihuPXIucmVsYXRpdmVbZVt1XS50eXBlXSlwPVttZSh4ZShwKSxuKV07ZWxzZXtpZigobj1yLmZpbHRlcltlW3VdLnR5cGVdLmFwcGx5KG51bGwsZVt1XS5tYXRjaGVzKSlbYl0pe2ZvcihpPSsrdTtpPG87aSsrKWlmKHIucmVsYXRpdmVbZVtpXS50eXBlXSlicmVhaztyZXR1cm4gVGUodT4xJiZ4ZShwKSx1PjEmJnZlKGUuc2xpY2UoMCx1LTEpLmNvbmNhdCh7dmFsdWU6XCIgXCI9PT1lW3UtMl0udHlwZT9cIipcIjpcIlwifSkpLnJlcGxhY2UoQixcIiQxXCIpLG4sdTxpJiZDZShlLnNsaWNlKHUsaSkpLGk8byYmQ2UoZT1lLnNsaWNlKGkpKSxpPG8mJnZlKGUpKX1wLnB1c2gobil9cmV0dXJuIHhlKHApfWZ1bmN0aW9uIEVlKGUsdCl7dmFyIG49dC5sZW5ndGg+MCxpPWUubGVuZ3RoPjAsbz1mdW5jdGlvbihvLGEscyx1LGMpe3ZhciBmLGgseSx2PTAsbT1cIjBcIix4PW8mJltdLGI9W10sdz1sLEM9b3x8aSYmci5maW5kLlRBRyhcIipcIixjKSxFPVQrPW51bGw9PXc/MTpNYXRoLnJhbmRvbSgpfHwuMSxrPUMubGVuZ3RoO2ZvcihjJiYobD1hPT09ZHx8YXx8Yyk7bSE9PWsmJm51bGwhPShmPUNbbV0pO20rKyl7aWYoaSYmZil7aD0wLGF8fGYub3duZXJEb2N1bWVudD09PWR8fChwKGYpLHM9IWcpO3doaWxlKHk9ZVtoKytdKWlmKHkoZixhfHxkLHMpKXt1LnB1c2goZik7YnJlYWt9YyYmKFQ9RSl9biYmKChmPSF5JiZmKSYmdi0tLG8mJngucHVzaChmKSl9aWYodis9bSxuJiZtIT09dil7aD0wO3doaWxlKHk9dFtoKytdKXkoeCxiLGEscyk7aWYobyl7aWYodj4wKXdoaWxlKG0tLSl4W21dfHxiW21dfHwoYlttXT1qLmNhbGwodSkpO2I9d2UoYil9TC5hcHBseSh1LGIpLGMmJiFvJiZiLmxlbmd0aD4wJiZ2K3QubGVuZ3RoPjEmJm9lLnVuaXF1ZVNvcnQodSl9cmV0dXJuIGMmJihUPUUsbD13KSx4fTtyZXR1cm4gbj9zZShvKTpvfXJldHVybiBzPW9lLmNvbXBpbGU9ZnVuY3Rpb24oZSx0KXt2YXIgbixyPVtdLGk9W10sbz1TW2UrXCIgXCJdO2lmKCFvKXt0fHwodD1hKGUpKSxuPXQubGVuZ3RoO3doaWxlKG4tLSkobz1DZSh0W25dKSlbYl0/ci5wdXNoKG8pOmkucHVzaChvKTsobz1TKGUsRWUoaSxyKSkpLnNlbGVjdG9yPWV9cmV0dXJuIG99LHU9b2Uuc2VsZWN0PWZ1bmN0aW9uKGUsdCxuLGkpe3ZhciBvLHUsbCxjLGYscD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZlLGQ9IWkmJmEoZT1wLnNlbGVjdG9yfHxlKTtpZihuPW58fFtdLDE9PT1kLmxlbmd0aCl7aWYoKHU9ZFswXT1kWzBdLnNsaWNlKDApKS5sZW5ndGg+MiYmXCJJRFwiPT09KGw9dVswXSkudHlwZSYmOT09PXQubm9kZVR5cGUmJmcmJnIucmVsYXRpdmVbdVsxXS50eXBlXSl7aWYoISh0PShyLmZpbmQuSUQobC5tYXRjaGVzWzBdLnJlcGxhY2UoWixlZSksdCl8fFtdKVswXSkpcmV0dXJuIG47cCYmKHQ9dC5wYXJlbnROb2RlKSxlPWUuc2xpY2UodS5zaGlmdCgpLnZhbHVlLmxlbmd0aCl9bz1WLm5lZWRzQ29udGV4dC50ZXN0KGUpPzA6dS5sZW5ndGg7d2hpbGUoby0tKXtpZihsPXVbb10sci5yZWxhdGl2ZVtjPWwudHlwZV0pYnJlYWs7aWYoKGY9ci5maW5kW2NdKSYmKGk9ZihsLm1hdGNoZXNbMF0ucmVwbGFjZShaLGVlKSxLLnRlc3QodVswXS50eXBlKSYmZ2UodC5wYXJlbnROb2RlKXx8dCkpKXtpZih1LnNwbGljZShvLDEpLCEoZT1pLmxlbmd0aCYmdmUodSkpKXJldHVybiBMLmFwcGx5KG4saSksbjticmVha319fXJldHVybihwfHxzKGUsZCkpKGksdCwhZyxuLCF0fHxLLnRlc3QoZSkmJmdlKHQucGFyZW50Tm9kZSl8fHQpLG59LG4uc29ydFN0YWJsZT1iLnNwbGl0KFwiXCIpLnNvcnQoRCkuam9pbihcIlwiKT09PWIsbi5kZXRlY3REdXBsaWNhdGVzPSEhZixwKCksbi5zb3J0RGV0YWNoZWQ9dWUoZnVuY3Rpb24oZSl7cmV0dXJuIDEmZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihkLmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSl9KSx1ZShmdW5jdGlvbihlKXtyZXR1cm4gZS5pbm5lckhUTUw9XCI8YSBocmVmPScjJz48L2E+XCIsXCIjXCI9PT1lLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKX0pfHxsZShcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIixmdW5jdGlvbihlLHQsbil7aWYoIW4pcmV0dXJuIGUuZ2V0QXR0cmlidXRlKHQsXCJ0eXBlXCI9PT10LnRvTG93ZXJDYXNlKCk/MToyKX0pLG4uYXR0cmlidXRlcyYmdWUoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaW5uZXJIVE1MPVwiPGlucHV0Lz5cIixlLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiKSxcIlwiPT09ZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpfSl8fGxlKFwidmFsdWVcIixmdW5jdGlvbihlLHQsbil7aWYoIW4mJlwiaW5wdXRcIj09PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSlyZXR1cm4gZS5kZWZhdWx0VmFsdWV9KSx1ZShmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZS5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKX0pfHxsZShQLGZ1bmN0aW9uKGUsdCxuKXt2YXIgcjtpZighbilyZXR1cm4hMD09PWVbdF0/dC50b0xvd2VyQ2FzZSgpOihyPWUuZ2V0QXR0cmlidXRlTm9kZSh0KSkmJnIuc3BlY2lmaWVkP3IudmFsdWU6bnVsbH0pLG9lfShlKTt3LmZpbmQ9RSx3LmV4cHI9RS5zZWxlY3RvcnMsdy5leHByW1wiOlwiXT13LmV4cHIucHNldWRvcyx3LnVuaXF1ZVNvcnQ9dy51bmlxdWU9RS51bmlxdWVTb3J0LHcudGV4dD1FLmdldFRleHQsdy5pc1hNTERvYz1FLmlzWE1MLHcuY29udGFpbnM9RS5jb250YWlucyx3LmVzY2FwZVNlbGVjdG9yPUUuZXNjYXBlO3ZhciBrPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1bXSxpPXZvaWQgMCE9PW47d2hpbGUoKGU9ZVt0XSkmJjkhPT1lLm5vZGVUeXBlKWlmKDE9PT1lLm5vZGVUeXBlKXtpZihpJiZ3KGUpLmlzKG4pKWJyZWFrO3IucHVzaChlKX1yZXR1cm4gcn0sUz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj1bXTtlO2U9ZS5uZXh0U2libGluZykxPT09ZS5ub2RlVHlwZSYmZSE9PXQmJm4ucHVzaChlKTtyZXR1cm4gbn0sRD13LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O2Z1bmN0aW9uIE4oZSx0KXtyZXR1cm4gZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09dC50b0xvd2VyQ2FzZSgpfXZhciBBPS9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pO2Z1bmN0aW9uIGooZSx0LG4pe3JldHVybiBnKHQpP3cuZ3JlcChlLGZ1bmN0aW9uKGUscil7cmV0dXJuISF0LmNhbGwoZSxyLGUpIT09bn0pOnQubm9kZVR5cGU/dy5ncmVwKGUsZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT10IT09bn0pOlwic3RyaW5nXCIhPXR5cGVvZiB0P3cuZ3JlcChlLGZ1bmN0aW9uKGUpe3JldHVybiB1LmNhbGwodCxlKT4tMSE9PW59KTp3LmZpbHRlcih0LGUsbil9dy5maWx0ZXI9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRbMF07cmV0dXJuIG4mJihlPVwiOm5vdChcIitlK1wiKVwiKSwxPT09dC5sZW5ndGgmJjE9PT1yLm5vZGVUeXBlP3cuZmluZC5tYXRjaGVzU2VsZWN0b3IocixlKT9bcl06W106dy5maW5kLm1hdGNoZXMoZSx3LmdyZXAodCxmdW5jdGlvbihlKXtyZXR1cm4gMT09PWUubm9kZVR5cGV9KSl9LHcuZm4uZXh0ZW5kKHtmaW5kOmZ1bmN0aW9uKGUpe3ZhciB0LG4scj10aGlzLmxlbmd0aCxpPXRoaXM7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuIHRoaXMucHVzaFN0YWNrKHcoZSkuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKHQ9MDt0PHI7dCsrKWlmKHcuY29udGFpbnMoaVt0XSx0aGlzKSlyZXR1cm4hMH0pKTtmb3Iobj10aGlzLnB1c2hTdGFjayhbXSksdD0wO3Q8cjt0Kyspdy5maW5kKGUsaVt0XSxuKTtyZXR1cm4gcj4xP3cudW5pcXVlU29ydChuKTpufSxmaWx0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGoodGhpcyxlfHxbXSwhMSkpfSxub3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGoodGhpcyxlfHxbXSwhMCkpfSxpczpmdW5jdGlvbihlKXtyZXR1cm4hIWoodGhpcyxcInN0cmluZ1wiPT10eXBlb2YgZSYmRC50ZXN0KGUpP3coZSk6ZXx8W10sITEpLmxlbmd0aH19KTt2YXIgcSxMPS9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvOyh3LmZuLmluaXQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciBpLG87aWYoIWUpcmV0dXJuIHRoaXM7aWYobj1ufHxxLFwic3RyaW5nXCI9PXR5cGVvZiBlKXtpZighKGk9XCI8XCI9PT1lWzBdJiZcIj5cIj09PWVbZS5sZW5ndGgtMV0mJmUubGVuZ3RoPj0zP1tudWxsLGUsbnVsbF06TC5leGVjKGUpKXx8IWlbMV0mJnQpcmV0dXJuIXR8fHQuanF1ZXJ5Pyh0fHxuKS5maW5kKGUpOnRoaXMuY29uc3RydWN0b3IodCkuZmluZChlKTtpZihpWzFdKXtpZih0PXQgaW5zdGFuY2VvZiB3P3RbMF06dCx3Lm1lcmdlKHRoaXMsdy5wYXJzZUhUTUwoaVsxXSx0JiZ0Lm5vZGVUeXBlP3Qub3duZXJEb2N1bWVudHx8dDpyLCEwKSksQS50ZXN0KGlbMV0pJiZ3LmlzUGxhaW5PYmplY3QodCkpZm9yKGkgaW4gdClnKHRoaXNbaV0pP3RoaXNbaV0odFtpXSk6dGhpcy5hdHRyKGksdFtpXSk7cmV0dXJuIHRoaXN9cmV0dXJuKG89ci5nZXRFbGVtZW50QnlJZChpWzJdKSkmJih0aGlzWzBdPW8sdGhpcy5sZW5ndGg9MSksdGhpc31yZXR1cm4gZS5ub2RlVHlwZT8odGhpc1swXT1lLHRoaXMubGVuZ3RoPTEsdGhpcyk6ZyhlKT92b2lkIDAhPT1uLnJlYWR5P24ucmVhZHkoZSk6ZSh3KTp3Lm1ha2VBcnJheShlLHRoaXMpfSkucHJvdG90eXBlPXcuZm4scT13KHIpO3ZhciBIPS9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLE89e2NoaWxkcmVuOiEwLGNvbnRlbnRzOiEwLG5leHQ6ITAscHJldjohMH07dy5mbi5leHRlbmQoe2hhczpmdW5jdGlvbihlKXt2YXIgdD13KGUsdGhpcyksbj10Lmxlbmd0aDtyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKXtmb3IodmFyIGU9MDtlPG47ZSsrKWlmKHcuY29udGFpbnModGhpcyx0W2VdKSlyZXR1cm4hMH0pfSxjbG9zZXN0OmZ1bmN0aW9uKGUsdCl7dmFyIG4scj0wLGk9dGhpcy5sZW5ndGgsbz1bXSxhPVwic3RyaW5nXCIhPXR5cGVvZiBlJiZ3KGUpO2lmKCFELnRlc3QoZSkpZm9yKDtyPGk7cisrKWZvcihuPXRoaXNbcl07biYmbiE9PXQ7bj1uLnBhcmVudE5vZGUpaWYobi5ub2RlVHlwZTwxMSYmKGE/YS5pbmRleChuKT4tMToxPT09bi5ub2RlVHlwZSYmdy5maW5kLm1hdGNoZXNTZWxlY3RvcihuLGUpKSl7by5wdXNoKG4pO2JyZWFrfXJldHVybiB0aGlzLnB1c2hTdGFjayhvLmxlbmd0aD4xP3cudW5pcXVlU29ydChvKTpvKX0saW5kZXg6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/XCJzdHJpbmdcIj09dHlwZW9mIGU/dS5jYWxsKHcoZSksdGhpc1swXSk6dS5jYWxsKHRoaXMsZS5qcXVlcnk/ZVswXTplKTp0aGlzWzBdJiZ0aGlzWzBdLnBhcmVudE5vZGU/dGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGg6LTF9LGFkZDpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLnB1c2hTdGFjayh3LnVuaXF1ZVNvcnQody5tZXJnZSh0aGlzLmdldCgpLHcoZSx0KSkpKX0sYWRkQmFjazpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5hZGQobnVsbD09ZT90aGlzLnByZXZPYmplY3Q6dGhpcy5wcmV2T2JqZWN0LmZpbHRlcihlKSl9fSk7ZnVuY3Rpb24gUChlLHQpe3doaWxlKChlPWVbdF0pJiYxIT09ZS5ub2RlVHlwZSk7cmV0dXJuIGV9dy5lYWNoKHtwYXJlbnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXJlbnROb2RlO3JldHVybiB0JiYxMSE9PXQubm9kZVR5cGU/dDpudWxsfSxwYXJlbnRzOmZ1bmN0aW9uKGUpe3JldHVybiBrKGUsXCJwYXJlbnROb2RlXCIpfSxwYXJlbnRzVW50aWw6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBrKGUsXCJwYXJlbnROb2RlXCIsbil9LG5leHQ6ZnVuY3Rpb24oZSl7cmV0dXJuIFAoZSxcIm5leHRTaWJsaW5nXCIpfSxwcmV2OmZ1bmN0aW9uKGUpe3JldHVybiBQKGUsXCJwcmV2aW91c1NpYmxpbmdcIil9LG5leHRBbGw6ZnVuY3Rpb24oZSl7cmV0dXJuIGsoZSxcIm5leHRTaWJsaW5nXCIpfSxwcmV2QWxsOmZ1bmN0aW9uKGUpe3JldHVybiBrKGUsXCJwcmV2aW91c1NpYmxpbmdcIil9LG5leHRVbnRpbDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIGsoZSxcIm5leHRTaWJsaW5nXCIsbil9LHByZXZVbnRpbDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIGsoZSxcInByZXZpb3VzU2libGluZ1wiLG4pfSxzaWJsaW5nczpmdW5jdGlvbihlKXtyZXR1cm4gUygoZS5wYXJlbnROb2RlfHx7fSkuZmlyc3RDaGlsZCxlKX0sY2hpbGRyZW46ZnVuY3Rpb24oZSl7cmV0dXJuIFMoZS5maXJzdENoaWxkKX0sY29udGVudHM6ZnVuY3Rpb24oZSl7cmV0dXJuIE4oZSxcImlmcmFtZVwiKT9lLmNvbnRlbnREb2N1bWVudDooTihlLFwidGVtcGxhdGVcIikmJihlPWUuY29udGVudHx8ZSksdy5tZXJnZShbXSxlLmNoaWxkTm9kZXMpKX19LGZ1bmN0aW9uKGUsdCl7dy5mbltlXT1mdW5jdGlvbihuLHIpe3ZhciBpPXcubWFwKHRoaXMsdCxuKTtyZXR1cm5cIlVudGlsXCIhPT1lLnNsaWNlKC01KSYmKHI9biksciYmXCJzdHJpbmdcIj09dHlwZW9mIHImJihpPXcuZmlsdGVyKHIsaSkpLHRoaXMubGVuZ3RoPjEmJihPW2VdfHx3LnVuaXF1ZVNvcnQoaSksSC50ZXN0KGUpJiZpLnJldmVyc2UoKSksdGhpcy5wdXNoU3RhY2soaSl9fSk7dmFyIE09L1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nO2Z1bmN0aW9uIFIoZSl7dmFyIHQ9e307cmV0dXJuIHcuZWFjaChlLm1hdGNoKE0pfHxbXSxmdW5jdGlvbihlLG4pe3Rbbl09ITB9KSx0fXcuQ2FsbGJhY2tzPWZ1bmN0aW9uKGUpe2U9XCJzdHJpbmdcIj09dHlwZW9mIGU/UihlKTp3LmV4dGVuZCh7fSxlKTt2YXIgdCxuLHIsaSxvPVtdLGE9W10scz0tMSx1PWZ1bmN0aW9uKCl7Zm9yKGk9aXx8ZS5vbmNlLHI9dD0hMDthLmxlbmd0aDtzPS0xKXtuPWEuc2hpZnQoKTt3aGlsZSgrK3M8by5sZW5ndGgpITE9PT1vW3NdLmFwcGx5KG5bMF0sblsxXSkmJmUuc3RvcE9uRmFsc2UmJihzPW8ubGVuZ3RoLG49ITEpfWUubWVtb3J5fHwobj0hMSksdD0hMSxpJiYobz1uP1tdOlwiXCIpfSxsPXthZGQ6ZnVuY3Rpb24oKXtyZXR1cm4gbyYmKG4mJiF0JiYocz1vLmxlbmd0aC0xLGEucHVzaChuKSksZnVuY3Rpb24gdChuKXt3LmVhY2gobixmdW5jdGlvbihuLHIpe2cocik/ZS51bmlxdWUmJmwuaGFzKHIpfHxvLnB1c2gocik6ciYmci5sZW5ndGgmJlwic3RyaW5nXCIhPT14KHIpJiZ0KHIpfSl9KGFyZ3VtZW50cyksbiYmIXQmJnUoKSksdGhpc30scmVtb3ZlOmZ1bmN0aW9uKCl7cmV0dXJuIHcuZWFjaChhcmd1bWVudHMsZnVuY3Rpb24oZSx0KXt2YXIgbjt3aGlsZSgobj13LmluQXJyYXkodCxvLG4pKT4tMSlvLnNwbGljZShuLDEpLG48PXMmJnMtLX0pLHRoaXN9LGhhczpmdW5jdGlvbihlKXtyZXR1cm4gZT93LmluQXJyYXkoZSxvKT4tMTpvLmxlbmd0aD4wfSxlbXB0eTpmdW5jdGlvbigpe3JldHVybiBvJiYobz1bXSksdGhpc30sZGlzYWJsZTpmdW5jdGlvbigpe3JldHVybiBpPWE9W10sbz1uPVwiXCIsdGhpc30sZGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hb30sbG9jazpmdW5jdGlvbigpe3JldHVybiBpPWE9W10sbnx8dHx8KG89bj1cIlwiKSx0aGlzfSxsb2NrZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIWl9LGZpcmVXaXRoOmZ1bmN0aW9uKGUsbil7cmV0dXJuIGl8fChuPVtlLChuPW58fFtdKS5zbGljZT9uLnNsaWNlKCk6bl0sYS5wdXNoKG4pLHR8fHUoKSksdGhpc30sZmlyZTpmdW5jdGlvbigpe3JldHVybiBsLmZpcmVXaXRoKHRoaXMsYXJndW1lbnRzKSx0aGlzfSxmaXJlZDpmdW5jdGlvbigpe3JldHVybiEhcn19O3JldHVybiBsfTtmdW5jdGlvbiBJKGUpe3JldHVybiBlfWZ1bmN0aW9uIFcoZSl7dGhyb3cgZX1mdW5jdGlvbiAkKGUsdCxuLHIpe3ZhciBpO3RyeXtlJiZnKGk9ZS5wcm9taXNlKT9pLmNhbGwoZSkuZG9uZSh0KS5mYWlsKG4pOmUmJmcoaT1lLnRoZW4pP2kuY2FsbChlLHQsbik6dC5hcHBseSh2b2lkIDAsW2VdLnNsaWNlKHIpKX1jYXRjaChlKXtuLmFwcGx5KHZvaWQgMCxbZV0pfX13LmV4dGVuZCh7RGVmZXJyZWQ6ZnVuY3Rpb24odCl7dmFyIG49W1tcIm5vdGlmeVwiLFwicHJvZ3Jlc3NcIix3LkNhbGxiYWNrcyhcIm1lbW9yeVwiKSx3LkNhbGxiYWNrcyhcIm1lbW9yeVwiKSwyXSxbXCJyZXNvbHZlXCIsXCJkb25lXCIsdy5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSx3LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLDAsXCJyZXNvbHZlZFwiXSxbXCJyZWplY3RcIixcImZhaWxcIix3LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLHcuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksMSxcInJlamVjdGVkXCJdXSxyPVwicGVuZGluZ1wiLGk9e3N0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHJ9LGFsd2F5czpmdW5jdGlvbigpe3JldHVybiBvLmRvbmUoYXJndW1lbnRzKS5mYWlsKGFyZ3VtZW50cyksdGhpc30sXCJjYXRjaFwiOmZ1bmN0aW9uKGUpe3JldHVybiBpLnRoZW4obnVsbCxlKX0scGlwZTpmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cztyZXR1cm4gdy5EZWZlcnJlZChmdW5jdGlvbih0KXt3LmVhY2gobixmdW5jdGlvbihuLHIpe3ZhciBpPWcoZVtyWzRdXSkmJmVbcls0XV07b1tyWzFdXShmdW5jdGlvbigpe3ZhciBlPWkmJmkuYXBwbHkodGhpcyxhcmd1bWVudHMpO2UmJmcoZS5wcm9taXNlKT9lLnByb21pc2UoKS5wcm9ncmVzcyh0Lm5vdGlmeSkuZG9uZSh0LnJlc29sdmUpLmZhaWwodC5yZWplY3QpOnRbclswXStcIldpdGhcIl0odGhpcyxpP1tlXTphcmd1bWVudHMpfSl9KSxlPW51bGx9KS5wcm9taXNlKCl9LHRoZW46ZnVuY3Rpb24odCxyLGkpe3ZhciBvPTA7ZnVuY3Rpb24gYSh0LG4scixpKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgcz10aGlzLHU9YXJndW1lbnRzLGw9ZnVuY3Rpb24oKXt2YXIgZSxsO2lmKCEodDxvKSl7aWYoKGU9ci5hcHBseShzLHUpKT09PW4ucHJvbWlzZSgpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIik7bD1lJiYoXCJvYmplY3RcIj09dHlwZW9mIGV8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpJiZlLnRoZW4sZyhsKT9pP2wuY2FsbChlLGEobyxuLEksaSksYShvLG4sVyxpKSk6KG8rKyxsLmNhbGwoZSxhKG8sbixJLGkpLGEobyxuLFcsaSksYShvLG4sSSxuLm5vdGlmeVdpdGgpKSk6KHIhPT1JJiYocz12b2lkIDAsdT1bZV0pLChpfHxuLnJlc29sdmVXaXRoKShzLHUpKX19LGM9aT9sOmZ1bmN0aW9uKCl7dHJ5e2woKX1jYXRjaChlKXt3LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2smJncuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayhlLGMuc3RhY2tUcmFjZSksdCsxPj1vJiYociE9PVcmJihzPXZvaWQgMCx1PVtlXSksbi5yZWplY3RXaXRoKHMsdSkpfX07dD9jKCk6KHcuRGVmZXJyZWQuZ2V0U3RhY2tIb29rJiYoYy5zdGFja1RyYWNlPXcuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCkpLGUuc2V0VGltZW91dChjKSl9fXJldHVybiB3LkRlZmVycmVkKGZ1bmN0aW9uKGUpe25bMF1bM10uYWRkKGEoMCxlLGcoaSk/aTpJLGUubm90aWZ5V2l0aCkpLG5bMV1bM10uYWRkKGEoMCxlLGcodCk/dDpJKSksblsyXVszXS5hZGQoYSgwLGUsZyhyKT9yOlcpKX0pLnByb21pc2UoKX0scHJvbWlzZTpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZT93LmV4dGVuZChlLGkpOml9fSxvPXt9O3JldHVybiB3LmVhY2gobixmdW5jdGlvbihlLHQpe3ZhciBhPXRbMl0scz10WzVdO2lbdFsxXV09YS5hZGQscyYmYS5hZGQoZnVuY3Rpb24oKXtyPXN9LG5bMy1lXVsyXS5kaXNhYmxlLG5bMy1lXVszXS5kaXNhYmxlLG5bMF1bMl0ubG9jayxuWzBdWzNdLmxvY2spLGEuYWRkKHRbM10uZmlyZSksb1t0WzBdXT1mdW5jdGlvbigpe3JldHVybiBvW3RbMF0rXCJXaXRoXCJdKHRoaXM9PT1vP3ZvaWQgMDp0aGlzLGFyZ3VtZW50cyksdGhpc30sb1t0WzBdK1wiV2l0aFwiXT1hLmZpcmVXaXRofSksaS5wcm9taXNlKG8pLHQmJnQuY2FsbChvLG8pLG99LHdoZW46ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPXQscj1BcnJheShuKSxpPW8uY2FsbChhcmd1bWVudHMpLGE9dy5EZWZlcnJlZCgpLHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKG4pe3JbZV09dGhpcyxpW2VdPWFyZ3VtZW50cy5sZW5ndGg+MT9vLmNhbGwoYXJndW1lbnRzKTpuLC0tdHx8YS5yZXNvbHZlV2l0aChyLGkpfX07aWYodDw9MSYmKCQoZSxhLmRvbmUocyhuKSkucmVzb2x2ZSxhLnJlamVjdCwhdCksXCJwZW5kaW5nXCI9PT1hLnN0YXRlKCl8fGcoaVtuXSYmaVtuXS50aGVuKSkpcmV0dXJuIGEudGhlbigpO3doaWxlKG4tLSkkKGlbbl0scyhuKSxhLnJlamVjdCk7cmV0dXJuIGEucHJvbWlzZSgpfX0pO3ZhciBCPS9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO3cuRGVmZXJyZWQuZXhjZXB0aW9uSG9vaz1mdW5jdGlvbih0LG4pe2UuY29uc29sZSYmZS5jb25zb2xlLndhcm4mJnQmJkIudGVzdCh0Lm5hbWUpJiZlLmNvbnNvbGUud2FybihcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiK3QubWVzc2FnZSx0LnN0YWNrLG4pfSx3LnJlYWR5RXhjZXB0aW9uPWZ1bmN0aW9uKHQpe2Uuc2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IHR9KX07dmFyIEY9dy5EZWZlcnJlZCgpO3cuZm4ucmVhZHk9ZnVuY3Rpb24oZSl7cmV0dXJuIEYudGhlbihlKVtcImNhdGNoXCJdKGZ1bmN0aW9uKGUpe3cucmVhZHlFeGNlcHRpb24oZSl9KSx0aGlzfSx3LmV4dGVuZCh7aXNSZWFkeTohMSxyZWFkeVdhaXQ6MSxyZWFkeTpmdW5jdGlvbihlKXsoITA9PT1lPy0tdy5yZWFkeVdhaXQ6dy5pc1JlYWR5KXx8KHcuaXNSZWFkeT0hMCwhMCE9PWUmJi0tdy5yZWFkeVdhaXQ+MHx8Ri5yZXNvbHZlV2l0aChyLFt3XSkpfX0pLHcucmVhZHkudGhlbj1GLnRoZW47ZnVuY3Rpb24gXygpe3IucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixfKSxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsXyksdy5yZWFkeSgpfVwiY29tcGxldGVcIj09PXIucmVhZHlTdGF0ZXx8XCJsb2FkaW5nXCIhPT1yLnJlYWR5U3RhdGUmJiFyLmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbD9lLnNldFRpbWVvdXQody5yZWFkeSk6KHIuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixfKSxlLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsXykpO3ZhciB6PWZ1bmN0aW9uKGUsdCxuLHIsaSxvLGEpe3ZhciBzPTAsdT1lLmxlbmd0aCxsPW51bGw9PW47aWYoXCJvYmplY3RcIj09PXgobikpe2k9ITA7Zm9yKHMgaW4gbil6KGUsdCxzLG5bc10sITAsbyxhKX1lbHNlIGlmKHZvaWQgMCE9PXImJihpPSEwLGcocil8fChhPSEwKSxsJiYoYT8odC5jYWxsKGUsciksdD1udWxsKToobD10LHQ9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBsLmNhbGwodyhlKSxuKX0pKSx0KSlmb3IoO3M8dTtzKyspdChlW3NdLG4sYT9yOnIuY2FsbChlW3NdLHMsdChlW3NdLG4pKSk7cmV0dXJuIGk/ZTpsP3QuY2FsbChlKTp1P3QoZVswXSxuKTpvfSxYPS9eLW1zLS8sVT0vLShbYS16XSkvZztmdW5jdGlvbiBWKGUsdCl7cmV0dXJuIHQudG9VcHBlckNhc2UoKX1mdW5jdGlvbiBHKGUpe3JldHVybiBlLnJlcGxhY2UoWCxcIm1zLVwiKS5yZXBsYWNlKFUsVil9dmFyIFk9ZnVuY3Rpb24oZSl7cmV0dXJuIDE9PT1lLm5vZGVUeXBlfHw5PT09ZS5ub2RlVHlwZXx8IStlLm5vZGVUeXBlfTtmdW5jdGlvbiBRKCl7dGhpcy5leHBhbmRvPXcuZXhwYW5kbytRLnVpZCsrfVEudWlkPTEsUS5wcm90b3R5cGU9e2NhY2hlOmZ1bmN0aW9uKGUpe3ZhciB0PWVbdGhpcy5leHBhbmRvXTtyZXR1cm4gdHx8KHQ9e30sWShlKSYmKGUubm9kZVR5cGU/ZVt0aGlzLmV4cGFuZG9dPXQ6T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdGhpcy5leHBhbmRvLHt2YWx1ZTp0LGNvbmZpZ3VyYWJsZTohMH0pKSksdH0sc2V0OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpPXRoaXMuY2FjaGUoZSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpaVtHKHQpXT1uO2Vsc2UgZm9yKHIgaW4gdClpW0cocildPXRbcl07cmV0dXJuIGl9LGdldDpmdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT10P3RoaXMuY2FjaGUoZSk6ZVt0aGlzLmV4cGFuZG9dJiZlW3RoaXMuZXhwYW5kb11bRyh0KV19LGFjY2VzczpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHZvaWQgMD09PXR8fHQmJlwic3RyaW5nXCI9PXR5cGVvZiB0JiZ2b2lkIDA9PT1uP3RoaXMuZ2V0KGUsdCk6KHRoaXMuc2V0KGUsdCxuKSx2b2lkIDAhPT1uP246dCl9LHJlbW92ZTpmdW5jdGlvbihlLHQpe3ZhciBuLHI9ZVt0aGlzLmV4cGFuZG9dO2lmKHZvaWQgMCE9PXIpe2lmKHZvaWQgMCE9PXQpe249KHQ9QXJyYXkuaXNBcnJheSh0KT90Lm1hcChHKToodD1HKHQpKWluIHI/W3RdOnQubWF0Y2goTSl8fFtdKS5sZW5ndGg7d2hpbGUobi0tKWRlbGV0ZSByW3Rbbl1dfSh2b2lkIDA9PT10fHx3LmlzRW1wdHlPYmplY3QocikpJiYoZS5ub2RlVHlwZT9lW3RoaXMuZXhwYW5kb109dm9pZCAwOmRlbGV0ZSBlW3RoaXMuZXhwYW5kb10pfX0saGFzRGF0YTpmdW5jdGlvbihlKXt2YXIgdD1lW3RoaXMuZXhwYW5kb107cmV0dXJuIHZvaWQgMCE9PXQmJiF3LmlzRW1wdHlPYmplY3QodCl9fTt2YXIgSj1uZXcgUSxLPW5ldyBRLFo9L14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLGVlPS9bQS1aXS9nO2Z1bmN0aW9uIHRlKGUpe3JldHVyblwidHJ1ZVwiPT09ZXx8XCJmYWxzZVwiIT09ZSYmKFwibnVsbFwiPT09ZT9udWxsOmU9PT0rZStcIlwiPytlOloudGVzdChlKT9KU09OLnBhcnNlKGUpOmUpfWZ1bmN0aW9uIG5lKGUsdCxuKXt2YXIgcjtpZih2b2lkIDA9PT1uJiYxPT09ZS5ub2RlVHlwZSlpZihyPVwiZGF0YS1cIit0LnJlcGxhY2UoZWUsXCItJCZcIikudG9Mb3dlckNhc2UoKSxcInN0cmluZ1wiPT10eXBlb2Yobj1lLmdldEF0dHJpYnV0ZShyKSkpe3RyeXtuPXRlKG4pfWNhdGNoKGUpe31LLnNldChlLHQsbil9ZWxzZSBuPXZvaWQgMDtyZXR1cm4gbn13LmV4dGVuZCh7aGFzRGF0YTpmdW5jdGlvbihlKXtyZXR1cm4gSy5oYXNEYXRhKGUpfHxKLmhhc0RhdGEoZSl9LGRhdGE6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBLLmFjY2VzcyhlLHQsbil9LHJlbW92ZURhdGE6ZnVuY3Rpb24oZSx0KXtLLnJlbW92ZShlLHQpfSxfZGF0YTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIEouYWNjZXNzKGUsdCxuKX0sX3JlbW92ZURhdGE6ZnVuY3Rpb24oZSx0KXtKLnJlbW92ZShlLHQpfX0pLHcuZm4uZXh0ZW5kKHtkYXRhOmZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG89dGhpc1swXSxhPW8mJm8uYXR0cmlidXRlcztpZih2b2lkIDA9PT1lKXtpZih0aGlzLmxlbmd0aCYmKGk9Sy5nZXQobyksMT09PW8ubm9kZVR5cGUmJiFKLmdldChvLFwiaGFzRGF0YUF0dHJzXCIpKSl7bj1hLmxlbmd0aDt3aGlsZShuLS0pYVtuXSYmMD09PShyPWFbbl0ubmFtZSkuaW5kZXhPZihcImRhdGEtXCIpJiYocj1HKHIuc2xpY2UoNSkpLG5lKG8scixpW3JdKSk7Si5zZXQobyxcImhhc0RhdGFBdHRyc1wiLCEwKX1yZXR1cm4gaX1yZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZT90aGlzLmVhY2goZnVuY3Rpb24oKXtLLnNldCh0aGlzLGUpfSk6eih0aGlzLGZ1bmN0aW9uKHQpe3ZhciBuO2lmKG8mJnZvaWQgMD09PXQpe2lmKHZvaWQgMCE9PShuPUsuZ2V0KG8sZSkpKXJldHVybiBuO2lmKHZvaWQgMCE9PShuPW5lKG8sZSkpKXJldHVybiBufWVsc2UgdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Sy5zZXQodGhpcyxlLHQpfSl9LG51bGwsdCxhcmd1bWVudHMubGVuZ3RoPjEsbnVsbCwhMCl9LHJlbW92ZURhdGE6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe0sucmVtb3ZlKHRoaXMsZSl9KX19KSx3LmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByO2lmKGUpcmV0dXJuIHQ9KHR8fFwiZnhcIikrXCJxdWV1ZVwiLHI9Si5nZXQoZSx0KSxuJiYoIXJ8fEFycmF5LmlzQXJyYXkobik/cj1KLmFjY2VzcyhlLHQsdy5tYWtlQXJyYXkobikpOnIucHVzaChuKSkscnx8W119LGRlcXVldWU6ZnVuY3Rpb24oZSx0KXt0PXR8fFwiZnhcIjt2YXIgbj13LnF1ZXVlKGUsdCkscj1uLmxlbmd0aCxpPW4uc2hpZnQoKSxvPXcuX3F1ZXVlSG9va3MoZSx0KSxhPWZ1bmN0aW9uKCl7dy5kZXF1ZXVlKGUsdCl9O1wiaW5wcm9ncmVzc1wiPT09aSYmKGk9bi5zaGlmdCgpLHItLSksaSYmKFwiZnhcIj09PXQmJm4udW5zaGlmdChcImlucHJvZ3Jlc3NcIiksZGVsZXRlIG8uc3RvcCxpLmNhbGwoZSxhLG8pKSwhciYmbyYmby5lbXB0eS5maXJlKCl9LF9xdWV1ZUhvb2tzOmZ1bmN0aW9uKGUsdCl7dmFyIG49dCtcInF1ZXVlSG9va3NcIjtyZXR1cm4gSi5nZXQoZSxuKXx8Si5hY2Nlc3MoZSxuLHtlbXB0eTp3LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLmFkZChmdW5jdGlvbigpe0oucmVtb3ZlKGUsW3QrXCJxdWV1ZVwiLG5dKX0pfSl9fSksdy5mbi5leHRlbmQoe3F1ZXVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49MjtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgZSYmKHQ9ZSxlPVwiZnhcIixuLS0pLGFyZ3VtZW50cy5sZW5ndGg8bj93LnF1ZXVlKHRoaXNbMF0sZSk6dm9pZCAwPT09dD90aGlzOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBuPXcucXVldWUodGhpcyxlLHQpO3cuX3F1ZXVlSG9va3ModGhpcyxlKSxcImZ4XCI9PT1lJiZcImlucHJvZ3Jlc3NcIiE9PW5bMF0mJncuZGVxdWV1ZSh0aGlzLGUpfSl9LGRlcXVldWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3cuZGVxdWV1ZSh0aGlzLGUpfSl9LGNsZWFyUXVldWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucXVldWUoZXx8XCJmeFwiLFtdKX0scHJvbWlzZTpmdW5jdGlvbihlLHQpe3ZhciBuLHI9MSxpPXcuRGVmZXJyZWQoKSxvPXRoaXMsYT10aGlzLmxlbmd0aCxzPWZ1bmN0aW9uKCl7LS1yfHxpLnJlc29sdmVXaXRoKG8sW29dKX07XCJzdHJpbmdcIiE9dHlwZW9mIGUmJih0PWUsZT12b2lkIDApLGU9ZXx8XCJmeFwiO3doaWxlKGEtLSkobj1KLmdldChvW2FdLGUrXCJxdWV1ZUhvb2tzXCIpKSYmbi5lbXB0eSYmKHIrKyxuLmVtcHR5LmFkZChzKSk7cmV0dXJuIHMoKSxpLnByb21pc2UodCl9fSk7dmFyIHJlPS9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvLnNvdXJjZSxpZT1uZXcgUmVnRXhwKFwiXig/OihbKy1dKT18KShcIityZStcIikoW2EteiVdKikkXCIsXCJpXCIpLG9lPVtcIlRvcFwiLFwiUmlnaHRcIixcIkJvdHRvbVwiLFwiTGVmdFwiXSxhZT1mdW5jdGlvbihlLHQpe3JldHVyblwibm9uZVwiPT09KGU9dHx8ZSkuc3R5bGUuZGlzcGxheXx8XCJcIj09PWUuc3R5bGUuZGlzcGxheSYmdy5jb250YWlucyhlLm93bmVyRG9jdW1lbnQsZSkmJlwibm9uZVwiPT09dy5jc3MoZSxcImRpc3BsYXlcIil9LHNlPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpLG8sYT17fTtmb3IobyBpbiB0KWFbb109ZS5zdHlsZVtvXSxlLnN0eWxlW29dPXRbb107aT1uLmFwcGx5KGUscnx8W10pO2ZvcihvIGluIHQpZS5zdHlsZVtvXT1hW29dO3JldHVybiBpfTtmdW5jdGlvbiB1ZShlLHQsbixyKXt2YXIgaSxvLGE9MjAscz1yP2Z1bmN0aW9uKCl7cmV0dXJuIHIuY3VyKCl9OmZ1bmN0aW9uKCl7cmV0dXJuIHcuY3NzKGUsdCxcIlwiKX0sdT1zKCksbD1uJiZuWzNdfHwody5jc3NOdW1iZXJbdF0/XCJcIjpcInB4XCIpLGM9KHcuY3NzTnVtYmVyW3RdfHxcInB4XCIhPT1sJiYrdSkmJmllLmV4ZWMody5jc3MoZSx0KSk7aWYoYyYmY1szXSE9PWwpe3UvPTIsbD1sfHxjWzNdLGM9K3V8fDE7d2hpbGUoYS0tKXcuc3R5bGUoZSx0LGMrbCksKDEtbykqKDEtKG89cygpL3V8fC41KSk8PTAmJihhPTApLGMvPW87Yyo9Mix3LnN0eWxlKGUsdCxjK2wpLG49bnx8W119cmV0dXJuIG4mJihjPStjfHwrdXx8MCxpPW5bMV0/YysoblsxXSsxKSpuWzJdOituWzJdLHImJihyLnVuaXQ9bCxyLnN0YXJ0PWMsci5lbmQ9aSkpLGl9dmFyIGxlPXt9O2Z1bmN0aW9uIGNlKGUpe3ZhciB0LG49ZS5vd25lckRvY3VtZW50LHI9ZS5ub2RlTmFtZSxpPWxlW3JdO3JldHVybiBpfHwodD1uLmJvZHkuYXBwZW5kQ2hpbGQobi5jcmVhdGVFbGVtZW50KHIpKSxpPXcuY3NzKHQsXCJkaXNwbGF5XCIpLHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0KSxcIm5vbmVcIj09PWkmJihpPVwiYmxvY2tcIiksbGVbcl09aSxpKX1mdW5jdGlvbiBmZShlLHQpe2Zvcih2YXIgbixyLGk9W10sbz0wLGE9ZS5sZW5ndGg7bzxhO28rKykocj1lW29dKS5zdHlsZSYmKG49ci5zdHlsZS5kaXNwbGF5LHQ/KFwibm9uZVwiPT09biYmKGlbb109Si5nZXQocixcImRpc3BsYXlcIil8fG51bGwsaVtvXXx8KHIuc3R5bGUuZGlzcGxheT1cIlwiKSksXCJcIj09PXIuc3R5bGUuZGlzcGxheSYmYWUocikmJihpW29dPWNlKHIpKSk6XCJub25lXCIhPT1uJiYoaVtvXT1cIm5vbmVcIixKLnNldChyLFwiZGlzcGxheVwiLG4pKSk7Zm9yKG89MDtvPGE7bysrKW51bGwhPWlbb10mJihlW29dLnN0eWxlLmRpc3BsYXk9aVtvXSk7cmV0dXJuIGV9dy5mbi5leHRlbmQoe3Nob3c6ZnVuY3Rpb24oKXtyZXR1cm4gZmUodGhpcywhMCl9LGhpZGU6ZnVuY3Rpb24oKXtyZXR1cm4gZmUodGhpcyl9LHRvZ2dsZTpmdW5jdGlvbihlKXtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGU/ZT90aGlzLnNob3coKTp0aGlzLmhpZGUoKTp0aGlzLmVhY2goZnVuY3Rpb24oKXthZSh0aGlzKT93KHRoaXMpLnNob3coKTp3KHRoaXMpLmhpZGUoKX0pfX0pO3ZhciBwZT0vXig/OmNoZWNrYm94fHJhZGlvKSQvaSxkZT0vPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2ksaGU9L14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSxnZT17b3B0aW9uOlsxLFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLFwiPC9zZWxlY3Q+XCJdLHRoZWFkOlsxLFwiPHRhYmxlPlwiLFwiPC90YWJsZT5cIl0sY29sOlsyLFwiPHRhYmxlPjxjb2xncm91cD5cIixcIjwvY29sZ3JvdXA+PC90YWJsZT5cIl0sdHI6WzIsXCI8dGFibGU+PHRib2R5PlwiLFwiPC90Ym9keT48L3RhYmxlPlwiXSx0ZDpbMyxcIjx0YWJsZT48dGJvZHk+PHRyPlwiLFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCJdLF9kZWZhdWx0OlswLFwiXCIsXCJcIl19O2dlLm9wdGdyb3VwPWdlLm9wdGlvbixnZS50Ym9keT1nZS50Zm9vdD1nZS5jb2xncm91cD1nZS5jYXB0aW9uPWdlLnRoZWFkLGdlLnRoPWdlLnRkO2Z1bmN0aW9uIHllKGUsdCl7dmFyIG47cmV0dXJuIG49XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUuZ2V0RWxlbWVudHNCeVRhZ05hbWU/ZS5nZXRFbGVtZW50c0J5VGFnTmFtZSh0fHxcIipcIik6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUucXVlcnlTZWxlY3RvckFsbD9lLnF1ZXJ5U2VsZWN0b3JBbGwodHx8XCIqXCIpOltdLHZvaWQgMD09PXR8fHQmJk4oZSx0KT93Lm1lcmdlKFtlXSxuKTpufWZ1bmN0aW9uIHZlKGUsdCl7Zm9yKHZhciBuPTAscj1lLmxlbmd0aDtuPHI7bisrKUouc2V0KGVbbl0sXCJnbG9iYWxFdmFsXCIsIXR8fEouZ2V0KHRbbl0sXCJnbG9iYWxFdmFsXCIpKX12YXIgbWU9Lzx8JiM/XFx3KzsvO2Z1bmN0aW9uIHhlKGUsdCxuLHIsaSl7Zm9yKHZhciBvLGEscyx1LGwsYyxmPXQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLHA9W10sZD0wLGg9ZS5sZW5ndGg7ZDxoO2QrKylpZigobz1lW2RdKXx8MD09PW8paWYoXCJvYmplY3RcIj09PXgobykpdy5tZXJnZShwLG8ubm9kZVR5cGU/W29dOm8pO2Vsc2UgaWYobWUudGVzdChvKSl7YT1hfHxmLmFwcGVuZENoaWxkKHQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkscz0oZGUuZXhlYyhvKXx8W1wiXCIsXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCksdT1nZVtzXXx8Z2UuX2RlZmF1bHQsYS5pbm5lckhUTUw9dVsxXSt3Lmh0bWxQcmVmaWx0ZXIobykrdVsyXSxjPXVbMF07d2hpbGUoYy0tKWE9YS5sYXN0Q2hpbGQ7dy5tZXJnZShwLGEuY2hpbGROb2RlcyksKGE9Zi5maXJzdENoaWxkKS50ZXh0Q29udGVudD1cIlwifWVsc2UgcC5wdXNoKHQuY3JlYXRlVGV4dE5vZGUobykpO2YudGV4dENvbnRlbnQ9XCJcIixkPTA7d2hpbGUobz1wW2QrK10paWYociYmdy5pbkFycmF5KG8scik+LTEpaSYmaS5wdXNoKG8pO2Vsc2UgaWYobD13LmNvbnRhaW5zKG8ub3duZXJEb2N1bWVudCxvKSxhPXllKGYuYXBwZW5kQ2hpbGQobyksXCJzY3JpcHRcIiksbCYmdmUoYSksbil7Yz0wO3doaWxlKG89YVtjKytdKWhlLnRlc3Qoby50eXBlfHxcIlwiKSYmbi5wdXNoKG8pfXJldHVybiBmfSFmdW5jdGlvbigpe3ZhciBlPXIuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLmFwcGVuZENoaWxkKHIuY3JlYXRlRWxlbWVudChcImRpdlwiKSksdD1yLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTt0LnNldEF0dHJpYnV0ZShcInR5cGVcIixcInJhZGlvXCIpLHQuc2V0QXR0cmlidXRlKFwiY2hlY2tlZFwiLFwiY2hlY2tlZFwiKSx0LnNldEF0dHJpYnV0ZShcIm5hbWVcIixcInRcIiksZS5hcHBlbmRDaGlsZCh0KSxoLmNoZWNrQ2xvbmU9ZS5jbG9uZU5vZGUoITApLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmNoZWNrZWQsZS5pbm5lckhUTUw9XCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCIsaC5ub0Nsb25lQ2hlY2tlZD0hIWUuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlfSgpO3ZhciBiZT1yLmRvY3VtZW50RWxlbWVudCx3ZT0vXmtleS8sVGU9L14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLENlPS9eKFteLl0qKSg/OlxcLiguKyl8KS87ZnVuY3Rpb24gRWUoKXtyZXR1cm4hMH1mdW5jdGlvbiBrZSgpe3JldHVybiExfWZ1bmN0aW9uIFNlKCl7dHJ5e3JldHVybiByLmFjdGl2ZUVsZW1lbnR9Y2F0Y2goZSl7fX1mdW5jdGlvbiBEZShlLHQsbixyLGksbyl7dmFyIGEscztpZihcIm9iamVjdFwiPT10eXBlb2YgdCl7XCJzdHJpbmdcIiE9dHlwZW9mIG4mJihyPXJ8fG4sbj12b2lkIDApO2ZvcihzIGluIHQpRGUoZSxzLG4scix0W3NdLG8pO3JldHVybiBlfWlmKG51bGw9PXImJm51bGw9PWk/KGk9bixyPW49dm9pZCAwKTpudWxsPT1pJiYoXCJzdHJpbmdcIj09dHlwZW9mIG4/KGk9cixyPXZvaWQgMCk6KGk9cixyPW4sbj12b2lkIDApKSwhMT09PWkpaT1rZTtlbHNlIGlmKCFpKXJldHVybiBlO3JldHVybiAxPT09byYmKGE9aSwoaT1mdW5jdGlvbihlKXtyZXR1cm4gdygpLm9mZihlKSxhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pLmd1aWQ9YS5ndWlkfHwoYS5ndWlkPXcuZ3VpZCsrKSksZS5lYWNoKGZ1bmN0aW9uKCl7dy5ldmVudC5hZGQodGhpcyx0LGkscixuKX0pfXcuZXZlbnQ9e2dsb2JhbDp7fSxhZGQ6ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbyxhLHMsdSxsLGMsZixwLGQsaCxnLHk9Si5nZXQoZSk7aWYoeSl7bi5oYW5kbGVyJiYobj0obz1uKS5oYW5kbGVyLGk9by5zZWxlY3RvciksaSYmdy5maW5kLm1hdGNoZXNTZWxlY3RvcihiZSxpKSxuLmd1aWR8fChuLmd1aWQ9dy5ndWlkKyspLCh1PXkuZXZlbnRzKXx8KHU9eS5ldmVudHM9e30pLChhPXkuaGFuZGxlKXx8KGE9eS5oYW5kbGU9ZnVuY3Rpb24odCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHcmJncuZXZlbnQudHJpZ2dlcmVkIT09dC50eXBlP3cuZXZlbnQuZGlzcGF0Y2guYXBwbHkoZSxhcmd1bWVudHMpOnZvaWQgMH0pLGw9KHQ9KHR8fFwiXCIpLm1hdGNoKE0pfHxbXCJcIl0pLmxlbmd0aDt3aGlsZShsLS0pZD1nPShzPUNlLmV4ZWModFtsXSl8fFtdKVsxXSxoPShzWzJdfHxcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpLGQmJihmPXcuZXZlbnQuc3BlY2lhbFtkXXx8e30sZD0oaT9mLmRlbGVnYXRlVHlwZTpmLmJpbmRUeXBlKXx8ZCxmPXcuZXZlbnQuc3BlY2lhbFtkXXx8e30sYz13LmV4dGVuZCh7dHlwZTpkLG9yaWdUeXBlOmcsZGF0YTpyLGhhbmRsZXI6bixndWlkOm4uZ3VpZCxzZWxlY3RvcjppLG5lZWRzQ29udGV4dDppJiZ3LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoaSksbmFtZXNwYWNlOmguam9pbihcIi5cIil9LG8pLChwPXVbZF0pfHwoKHA9dVtkXT1bXSkuZGVsZWdhdGVDb3VudD0wLGYuc2V0dXAmJiExIT09Zi5zZXR1cC5jYWxsKGUscixoLGEpfHxlLmFkZEV2ZW50TGlzdGVuZXImJmUuYWRkRXZlbnRMaXN0ZW5lcihkLGEpKSxmLmFkZCYmKGYuYWRkLmNhbGwoZSxjKSxjLmhhbmRsZXIuZ3VpZHx8KGMuaGFuZGxlci5ndWlkPW4uZ3VpZCkpLGk/cC5zcGxpY2UocC5kZWxlZ2F0ZUNvdW50KyssMCxjKTpwLnB1c2goYyksdy5ldmVudC5nbG9iYWxbZF09ITApfX0scmVtb3ZlOmZ1bmN0aW9uKGUsdCxuLHIsaSl7dmFyIG8sYSxzLHUsbCxjLGYscCxkLGgsZyx5PUouaGFzRGF0YShlKSYmSi5nZXQoZSk7aWYoeSYmKHU9eS5ldmVudHMpKXtsPSh0PSh0fHxcIlwiKS5tYXRjaChNKXx8W1wiXCJdKS5sZW5ndGg7d2hpbGUobC0tKWlmKHM9Q2UuZXhlYyh0W2xdKXx8W10sZD1nPXNbMV0saD0oc1syXXx8XCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKSxkKXtmPXcuZXZlbnQuc3BlY2lhbFtkXXx8e30scD11W2Q9KHI/Zi5kZWxlZ2F0ZVR5cGU6Zi5iaW5kVHlwZSl8fGRdfHxbXSxzPXNbMl0mJm5ldyBSZWdFeHAoXCIoXnxcXFxcLilcIitoLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKStcIihcXFxcLnwkKVwiKSxhPW89cC5sZW5ndGg7d2hpbGUoby0tKWM9cFtvXSwhaSYmZyE9PWMub3JpZ1R5cGV8fG4mJm4uZ3VpZCE9PWMuZ3VpZHx8cyYmIXMudGVzdChjLm5hbWVzcGFjZSl8fHImJnIhPT1jLnNlbGVjdG9yJiYoXCIqKlwiIT09cnx8IWMuc2VsZWN0b3IpfHwocC5zcGxpY2UobywxKSxjLnNlbGVjdG9yJiZwLmRlbGVnYXRlQ291bnQtLSxmLnJlbW92ZSYmZi5yZW1vdmUuY2FsbChlLGMpKTthJiYhcC5sZW5ndGgmJihmLnRlYXJkb3duJiYhMSE9PWYudGVhcmRvd24uY2FsbChlLGgseS5oYW5kbGUpfHx3LnJlbW92ZUV2ZW50KGUsZCx5LmhhbmRsZSksZGVsZXRlIHVbZF0pfWVsc2UgZm9yKGQgaW4gdSl3LmV2ZW50LnJlbW92ZShlLGQrdFtsXSxuLHIsITApO3cuaXNFbXB0eU9iamVjdCh1KSYmSi5yZW1vdmUoZSxcImhhbmRsZSBldmVudHNcIil9fSxkaXNwYXRjaDpmdW5jdGlvbihlKXt2YXIgdD13LmV2ZW50LmZpeChlKSxuLHIsaSxvLGEscyx1PW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKSxsPShKLmdldCh0aGlzLFwiZXZlbnRzXCIpfHx7fSlbdC50eXBlXXx8W10sYz13LmV2ZW50LnNwZWNpYWxbdC50eXBlXXx8e307Zm9yKHVbMF09dCxuPTE7bjxhcmd1bWVudHMubGVuZ3RoO24rKyl1W25dPWFyZ3VtZW50c1tuXTtpZih0LmRlbGVnYXRlVGFyZ2V0PXRoaXMsIWMucHJlRGlzcGF0Y2h8fCExIT09Yy5wcmVEaXNwYXRjaC5jYWxsKHRoaXMsdCkpe3M9dy5ldmVudC5oYW5kbGVycy5jYWxsKHRoaXMsdCxsKSxuPTA7d2hpbGUoKG89c1tuKytdKSYmIXQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSl7dC5jdXJyZW50VGFyZ2V0PW8uZWxlbSxyPTA7d2hpbGUoKGE9by5oYW5kbGVyc1tyKytdKSYmIXQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSl0LnJuYW1lc3BhY2UmJiF0LnJuYW1lc3BhY2UudGVzdChhLm5hbWVzcGFjZSl8fCh0LmhhbmRsZU9iaj1hLHQuZGF0YT1hLmRhdGEsdm9pZCAwIT09KGk9KCh3LmV2ZW50LnNwZWNpYWxbYS5vcmlnVHlwZV18fHt9KS5oYW5kbGV8fGEuaGFuZGxlcikuYXBwbHkoby5lbGVtLHUpKSYmITE9PT0odC5yZXN1bHQ9aSkmJih0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSkpfXJldHVybiBjLnBvc3REaXNwYXRjaCYmYy5wb3N0RGlzcGF0Y2guY2FsbCh0aGlzLHQpLHQucmVzdWx0fX0saGFuZGxlcnM6ZnVuY3Rpb24oZSx0KXt2YXIgbixyLGksbyxhLHM9W10sdT10LmRlbGVnYXRlQ291bnQsbD1lLnRhcmdldDtpZih1JiZsLm5vZGVUeXBlJiYhKFwiY2xpY2tcIj09PWUudHlwZSYmZS5idXR0b24+PTEpKWZvcig7bCE9PXRoaXM7bD1sLnBhcmVudE5vZGV8fHRoaXMpaWYoMT09PWwubm9kZVR5cGUmJihcImNsaWNrXCIhPT1lLnR5cGV8fCEwIT09bC5kaXNhYmxlZCkpe2ZvcihvPVtdLGE9e30sbj0wO248dTtuKyspdm9pZCAwPT09YVtpPShyPXRbbl0pLnNlbGVjdG9yK1wiIFwiXSYmKGFbaV09ci5uZWVkc0NvbnRleHQ/dyhpLHRoaXMpLmluZGV4KGwpPi0xOncuZmluZChpLHRoaXMsbnVsbCxbbF0pLmxlbmd0aCksYVtpXSYmby5wdXNoKHIpO28ubGVuZ3RoJiZzLnB1c2goe2VsZW06bCxoYW5kbGVyczpvfSl9cmV0dXJuIGw9dGhpcyx1PHQubGVuZ3RoJiZzLnB1c2goe2VsZW06bCxoYW5kbGVyczp0LnNsaWNlKHUpfSksc30sYWRkUHJvcDpmdW5jdGlvbihlLHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh3LkV2ZW50LnByb3RvdHlwZSxlLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6Zyh0KT9mdW5jdGlvbigpe2lmKHRoaXMub3JpZ2luYWxFdmVudClyZXR1cm4gdCh0aGlzLm9yaWdpbmFsRXZlbnQpfTpmdW5jdGlvbigpe2lmKHRoaXMub3JpZ2luYWxFdmVudClyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50W2VdfSxzZXQ6ZnVuY3Rpb24odCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsZSx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6dH0pfX0pfSxmaXg6ZnVuY3Rpb24oZSl7cmV0dXJuIGVbdy5leHBhbmRvXT9lOm5ldyB3LkV2ZW50KGUpfSxzcGVjaWFsOntsb2FkOntub0J1YmJsZTohMH0sZm9jdXM6e3RyaWdnZXI6ZnVuY3Rpb24oKXtpZih0aGlzIT09U2UoKSYmdGhpcy5mb2N1cylyZXR1cm4gdGhpcy5mb2N1cygpLCExfSxkZWxlZ2F0ZVR5cGU6XCJmb2N1c2luXCJ9LGJsdXI6e3RyaWdnZXI6ZnVuY3Rpb24oKXtpZih0aGlzPT09U2UoKSYmdGhpcy5ibHVyKXJldHVybiB0aGlzLmJsdXIoKSwhMX0sZGVsZWdhdGVUeXBlOlwiZm9jdXNvdXRcIn0sY2xpY2s6e3RyaWdnZXI6ZnVuY3Rpb24oKXtpZihcImNoZWNrYm94XCI9PT10aGlzLnR5cGUmJnRoaXMuY2xpY2smJk4odGhpcyxcImlucHV0XCIpKXJldHVybiB0aGlzLmNsaWNrKCksITF9LF9kZWZhdWx0OmZ1bmN0aW9uKGUpe3JldHVybiBOKGUudGFyZ2V0LFwiYVwiKX19LGJlZm9yZXVubG9hZDp7cG9zdERpc3BhdGNoOmZ1bmN0aW9uKGUpe3ZvaWQgMCE9PWUucmVzdWx0JiZlLm9yaWdpbmFsRXZlbnQmJihlLm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWU9ZS5yZXN1bHQpfX19fSx3LnJlbW92ZUV2ZW50PWZ1bmN0aW9uKGUsdCxuKXtlLnJlbW92ZUV2ZW50TGlzdGVuZXImJmUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LG4pfSx3LkV2ZW50PWZ1bmN0aW9uKGUsdCl7aWYoISh0aGlzIGluc3RhbmNlb2Ygdy5FdmVudCkpcmV0dXJuIG5ldyB3LkV2ZW50KGUsdCk7ZSYmZS50eXBlPyh0aGlzLm9yaWdpbmFsRXZlbnQ9ZSx0aGlzLnR5cGU9ZS50eXBlLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWUuZGVmYXVsdFByZXZlbnRlZHx8dm9pZCAwPT09ZS5kZWZhdWx0UHJldmVudGVkJiYhMT09PWUucmV0dXJuVmFsdWU/RWU6a2UsdGhpcy50YXJnZXQ9ZS50YXJnZXQmJjM9PT1lLnRhcmdldC5ub2RlVHlwZT9lLnRhcmdldC5wYXJlbnROb2RlOmUudGFyZ2V0LHRoaXMuY3VycmVudFRhcmdldD1lLmN1cnJlbnRUYXJnZXQsdGhpcy5yZWxhdGVkVGFyZ2V0PWUucmVsYXRlZFRhcmdldCk6dGhpcy50eXBlPWUsdCYmdy5leHRlbmQodGhpcyx0KSx0aGlzLnRpbWVTdGFtcD1lJiZlLnRpbWVTdGFtcHx8RGF0ZS5ub3coKSx0aGlzW3cuZXhwYW5kb109ITB9LHcuRXZlbnQucHJvdG90eXBlPXtjb25zdHJ1Y3Rvcjp3LkV2ZW50LGlzRGVmYXVsdFByZXZlbnRlZDprZSxpc1Byb3BhZ2F0aW9uU3RvcHBlZDprZSxpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDprZSxpc1NpbXVsYXRlZDohMSxwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1FZSxlJiYhdGhpcy5pc1NpbXVsYXRlZCYmZS5wcmV2ZW50RGVmYXVsdCgpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1FZSxlJiYhdGhpcy5pc1NpbXVsYXRlZCYmZS5zdG9wUHJvcGFnYXRpb24oKX0sc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9RWUsZSYmIXRoaXMuaXNTaW11bGF0ZWQmJmUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksdGhpcy5zdG9wUHJvcGFnYXRpb24oKX19LHcuZWFjaCh7YWx0S2V5OiEwLGJ1YmJsZXM6ITAsY2FuY2VsYWJsZTohMCxjaGFuZ2VkVG91Y2hlczohMCxjdHJsS2V5OiEwLGRldGFpbDohMCxldmVudFBoYXNlOiEwLG1ldGFLZXk6ITAscGFnZVg6ITAscGFnZVk6ITAsc2hpZnRLZXk6ITAsdmlldzohMCxcImNoYXJcIjohMCxjaGFyQ29kZTohMCxrZXk6ITAsa2V5Q29kZTohMCxidXR0b246ITAsYnV0dG9uczohMCxjbGllbnRYOiEwLGNsaWVudFk6ITAsb2Zmc2V0WDohMCxvZmZzZXRZOiEwLHBvaW50ZXJJZDohMCxwb2ludGVyVHlwZTohMCxzY3JlZW5YOiEwLHNjcmVlblk6ITAsdGFyZ2V0VG91Y2hlczohMCx0b0VsZW1lbnQ6ITAsdG91Y2hlczohMCx3aGljaDpmdW5jdGlvbihlKXt2YXIgdD1lLmJ1dHRvbjtyZXR1cm4gbnVsbD09ZS53aGljaCYmd2UudGVzdChlLnR5cGUpP251bGwhPWUuY2hhckNvZGU/ZS5jaGFyQ29kZTplLmtleUNvZGU6IWUud2hpY2gmJnZvaWQgMCE9PXQmJlRlLnRlc3QoZS50eXBlKT8xJnQ/MToyJnQ/Mzo0JnQ/MjowOmUud2hpY2h9fSx3LmV2ZW50LmFkZFByb3ApLHcuZWFjaCh7bW91c2VlbnRlcjpcIm1vdXNlb3ZlclwiLG1vdXNlbGVhdmU6XCJtb3VzZW91dFwiLHBvaW50ZXJlbnRlcjpcInBvaW50ZXJvdmVyXCIscG9pbnRlcmxlYXZlOlwicG9pbnRlcm91dFwifSxmdW5jdGlvbihlLHQpe3cuZXZlbnQuc3BlY2lhbFtlXT17ZGVsZWdhdGVUeXBlOnQsYmluZFR5cGU6dCxoYW5kbGU6ZnVuY3Rpb24oZSl7dmFyIG4scj10aGlzLGk9ZS5yZWxhdGVkVGFyZ2V0LG89ZS5oYW5kbGVPYmo7cmV0dXJuIGkmJihpPT09cnx8dy5jb250YWlucyhyLGkpKXx8KGUudHlwZT1vLm9yaWdUeXBlLG49by5oYW5kbGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxlLnR5cGU9dCksbn19fSksdy5mbi5leHRlbmQoe29uOmZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBEZSh0aGlzLGUsdCxuLHIpfSxvbmU6ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIERlKHRoaXMsZSx0LG4sciwxKX0sb2ZmOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpO2lmKGUmJmUucHJldmVudERlZmF1bHQmJmUuaGFuZGxlT2JqKXJldHVybiByPWUuaGFuZGxlT2JqLHcoZS5kZWxlZ2F0ZVRhcmdldCkub2ZmKHIubmFtZXNwYWNlP3Iub3JpZ1R5cGUrXCIuXCIrci5uYW1lc3BhY2U6ci5vcmlnVHlwZSxyLnNlbGVjdG9yLHIuaGFuZGxlciksdGhpcztpZihcIm9iamVjdFwiPT10eXBlb2YgZSl7Zm9yKGkgaW4gZSl0aGlzLm9mZihpLHQsZVtpXSk7cmV0dXJuIHRoaXN9cmV0dXJuITEhPT10JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0fHwobj10LHQ9dm9pZCAwKSwhMT09PW4mJihuPWtlKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt3LmV2ZW50LnJlbW92ZSh0aGlzLGUsbix0KX0pfX0pO3ZhciBOZT0vPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxBZT0vPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxqZT0vY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLHFlPS9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztmdW5jdGlvbiBMZShlLHQpe3JldHVybiBOKGUsXCJ0YWJsZVwiKSYmTigxMSE9PXQubm9kZVR5cGU/dDp0LmZpcnN0Q2hpbGQsXCJ0clwiKT93KGUpLmNoaWxkcmVuKFwidGJvZHlcIilbMF18fGU6ZX1mdW5jdGlvbiBIZShlKXtyZXR1cm4gZS50eXBlPShudWxsIT09ZS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKStcIi9cIitlLnR5cGUsZX1mdW5jdGlvbiBPZShlKXtyZXR1cm5cInRydWUvXCI9PT0oZS50eXBlfHxcIlwiKS5zbGljZSgwLDUpP2UudHlwZT1lLnR5cGUuc2xpY2UoNSk6ZS5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpLGV9ZnVuY3Rpb24gUGUoZSx0KXt2YXIgbixyLGksbyxhLHMsdSxsO2lmKDE9PT10Lm5vZGVUeXBlKXtpZihKLmhhc0RhdGEoZSkmJihvPUouYWNjZXNzKGUpLGE9Si5zZXQodCxvKSxsPW8uZXZlbnRzKSl7ZGVsZXRlIGEuaGFuZGxlLGEuZXZlbnRzPXt9O2ZvcihpIGluIGwpZm9yKG49MCxyPWxbaV0ubGVuZ3RoO248cjtuKyspdy5ldmVudC5hZGQodCxpLGxbaV1bbl0pfUsuaGFzRGF0YShlKSYmKHM9Sy5hY2Nlc3MoZSksdT13LmV4dGVuZCh7fSxzKSxLLnNldCh0LHUpKX19ZnVuY3Rpb24gTWUoZSx0KXt2YXIgbj10Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJpbnB1dFwiPT09biYmcGUudGVzdChlLnR5cGUpP3QuY2hlY2tlZD1lLmNoZWNrZWQ6XCJpbnB1dFwiIT09biYmXCJ0ZXh0YXJlYVwiIT09bnx8KHQuZGVmYXVsdFZhbHVlPWUuZGVmYXVsdFZhbHVlKX1mdW5jdGlvbiBSZShlLHQsbixyKXt0PWEuYXBwbHkoW10sdCk7dmFyIGksbyxzLHUsbCxjLGY9MCxwPWUubGVuZ3RoLGQ9cC0xLHk9dFswXSx2PWcoeSk7aWYodnx8cD4xJiZcInN0cmluZ1wiPT10eXBlb2YgeSYmIWguY2hlY2tDbG9uZSYmamUudGVzdCh5KSlyZXR1cm4gZS5lYWNoKGZ1bmN0aW9uKGkpe3ZhciBvPWUuZXEoaSk7diYmKHRbMF09eS5jYWxsKHRoaXMsaSxvLmh0bWwoKSkpLFJlKG8sdCxuLHIpfSk7aWYocCYmKGk9eGUodCxlWzBdLm93bmVyRG9jdW1lbnQsITEsZSxyKSxvPWkuZmlyc3RDaGlsZCwxPT09aS5jaGlsZE5vZGVzLmxlbmd0aCYmKGk9byksb3x8cikpe2Zvcih1PShzPXcubWFwKHllKGksXCJzY3JpcHRcIiksSGUpKS5sZW5ndGg7ZjxwO2YrKylsPWksZiE9PWQmJihsPXcuY2xvbmUobCwhMCwhMCksdSYmdy5tZXJnZShzLHllKGwsXCJzY3JpcHRcIikpKSxuLmNhbGwoZVtmXSxsLGYpO2lmKHUpZm9yKGM9c1tzLmxlbmd0aC0xXS5vd25lckRvY3VtZW50LHcubWFwKHMsT2UpLGY9MDtmPHU7ZisrKWw9c1tmXSxoZS50ZXN0KGwudHlwZXx8XCJcIikmJiFKLmFjY2VzcyhsLFwiZ2xvYmFsRXZhbFwiKSYmdy5jb250YWlucyhjLGwpJiYobC5zcmMmJlwibW9kdWxlXCIhPT0obC50eXBlfHxcIlwiKS50b0xvd2VyQ2FzZSgpP3cuX2V2YWxVcmwmJncuX2V2YWxVcmwobC5zcmMpOm0obC50ZXh0Q29udGVudC5yZXBsYWNlKHFlLFwiXCIpLGMsbCkpfXJldHVybiBlfWZ1bmN0aW9uIEllKGUsdCxuKXtmb3IodmFyIHIsaT10P3cuZmlsdGVyKHQsZSk6ZSxvPTA7bnVsbCE9KHI9aVtvXSk7bysrKW58fDEhPT1yLm5vZGVUeXBlfHx3LmNsZWFuRGF0YSh5ZShyKSksci5wYXJlbnROb2RlJiYobiYmdy5jb250YWlucyhyLm93bmVyRG9jdW1lbnQscikmJnZlKHllKHIsXCJzY3JpcHRcIikpLHIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyKSk7cmV0dXJuIGV9dy5leHRlbmQoe2h0bWxQcmVmaWx0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZShOZSxcIjwkMT48LyQyPlwiKX0sY2xvbmU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHM9ZS5jbG9uZU5vZGUoITApLHU9dy5jb250YWlucyhlLm93bmVyRG9jdW1lbnQsZSk7aWYoIShoLm5vQ2xvbmVDaGVja2VkfHwxIT09ZS5ub2RlVHlwZSYmMTEhPT1lLm5vZGVUeXBlfHx3LmlzWE1MRG9jKGUpKSlmb3IoYT15ZShzKSxyPTAsaT0obz15ZShlKSkubGVuZ3RoO3I8aTtyKyspTWUob1tyXSxhW3JdKTtpZih0KWlmKG4pZm9yKG89b3x8eWUoZSksYT1hfHx5ZShzKSxyPTAsaT1vLmxlbmd0aDtyPGk7cisrKVBlKG9bcl0sYVtyXSk7ZWxzZSBQZShlLHMpO3JldHVybihhPXllKHMsXCJzY3JpcHRcIikpLmxlbmd0aD4wJiZ2ZShhLCF1JiZ5ZShlLFwic2NyaXB0XCIpKSxzfSxjbGVhbkRhdGE6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG4scixpPXcuZXZlbnQuc3BlY2lhbCxvPTA7dm9pZCAwIT09KG49ZVtvXSk7bysrKWlmKFkobikpe2lmKHQ9bltKLmV4cGFuZG9dKXtpZih0LmV2ZW50cylmb3IociBpbiB0LmV2ZW50cylpW3JdP3cuZXZlbnQucmVtb3ZlKG4scik6dy5yZW1vdmVFdmVudChuLHIsdC5oYW5kbGUpO25bSi5leHBhbmRvXT12b2lkIDB9bltLLmV4cGFuZG9dJiYobltLLmV4cGFuZG9dPXZvaWQgMCl9fX0pLHcuZm4uZXh0ZW5kKHtkZXRhY2g6ZnVuY3Rpb24oZSl7cmV0dXJuIEllKHRoaXMsZSwhMCl9LHJlbW92ZTpmdW5jdGlvbihlKXtyZXR1cm4gSWUodGhpcyxlKX0sdGV4dDpmdW5jdGlvbihlKXtyZXR1cm4geih0aGlzLGZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lP3cudGV4dCh0aGlzKTp0aGlzLmVtcHR5KCkuZWFjaChmdW5jdGlvbigpezEhPT10aGlzLm5vZGVUeXBlJiYxMSE9PXRoaXMubm9kZVR5cGUmJjkhPT10aGlzLm5vZGVUeXBlfHwodGhpcy50ZXh0Q29udGVudD1lKX0pfSxudWxsLGUsYXJndW1lbnRzLmxlbmd0aCl9LGFwcGVuZDpmdW5jdGlvbigpe3JldHVybiBSZSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihlKXsxIT09dGhpcy5ub2RlVHlwZSYmMTEhPT10aGlzLm5vZGVUeXBlJiY5IT09dGhpcy5ub2RlVHlwZXx8TGUodGhpcyxlKS5hcHBlbmRDaGlsZChlKX0pfSxwcmVwZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIFJlKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe2lmKDE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGV8fDk9PT10aGlzLm5vZGVUeXBlKXt2YXIgdD1MZSh0aGlzLGUpO3QuaW5zZXJ0QmVmb3JlKGUsdC5maXJzdENoaWxkKX19KX0sYmVmb3JlOmZ1bmN0aW9uKCl7cmV0dXJuIFJlKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLHRoaXMpfSl9LGFmdGVyOmZ1bmN0aW9uKCl7cmV0dXJuIFJlKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLHRoaXMubmV4dFNpYmxpbmcpfSl9LGVtcHR5OmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9MDtudWxsIT0oZT10aGlzW3RdKTt0KyspMT09PWUubm9kZVR5cGUmJih3LmNsZWFuRGF0YSh5ZShlLCExKSksZS50ZXh0Q29udGVudD1cIlwiKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT1udWxsIT1lJiZlLHQ9bnVsbD09dD9lOnQsdGhpcy5tYXAoZnVuY3Rpb24oKXtyZXR1cm4gdy5jbG9uZSh0aGlzLGUsdCl9KX0saHRtbDpmdW5jdGlvbihlKXtyZXR1cm4geih0aGlzLGZ1bmN0aW9uKGUpe3ZhciB0PXRoaXNbMF18fHt9LG49MCxyPXRoaXMubGVuZ3RoO2lmKHZvaWQgMD09PWUmJjE9PT10Lm5vZGVUeXBlKXJldHVybiB0LmlubmVySFRNTDtpZihcInN0cmluZ1wiPT10eXBlb2YgZSYmIUFlLnRlc3QoZSkmJiFnZVsoZGUuZXhlYyhlKXx8W1wiXCIsXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCldKXtlPXcuaHRtbFByZWZpbHRlcihlKTt0cnl7Zm9yKDtuPHI7bisrKTE9PT0odD10aGlzW25dfHx7fSkubm9kZVR5cGUmJih3LmNsZWFuRGF0YSh5ZSh0LCExKSksdC5pbm5lckhUTUw9ZSk7dD0wfWNhdGNoKGUpe319dCYmdGhpcy5lbXB0eSgpLmFwcGVuZChlKX0sbnVsbCxlLGFyZ3VtZW50cy5sZW5ndGgpfSxyZXBsYWNlV2l0aDpmdW5jdGlvbigpe3ZhciBlPVtdO3JldHVybiBSZSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbih0KXt2YXIgbj10aGlzLnBhcmVudE5vZGU7dy5pbkFycmF5KHRoaXMsZSk8MCYmKHcuY2xlYW5EYXRhKHllKHRoaXMpKSxuJiZuLnJlcGxhY2VDaGlsZCh0LHRoaXMpKX0sZSl9fSksdy5lYWNoKHthcHBlbmRUbzpcImFwcGVuZFwiLHByZXBlbmRUbzpcInByZXBlbmRcIixpbnNlcnRCZWZvcmU6XCJiZWZvcmVcIixpbnNlcnRBZnRlcjpcImFmdGVyXCIscmVwbGFjZUFsbDpcInJlcGxhY2VXaXRoXCJ9LGZ1bmN0aW9uKGUsdCl7dy5mbltlXT1mdW5jdGlvbihlKXtmb3IodmFyIG4scj1bXSxpPXcoZSksbz1pLmxlbmd0aC0xLGE9MDthPD1vO2ErKyluPWE9PT1vP3RoaXM6dGhpcy5jbG9uZSghMCksdyhpW2FdKVt0XShuKSxzLmFwcGx5KHIsbi5nZXQoKSk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKHIpfX0pO3ZhciBXZT1uZXcgUmVnRXhwKFwiXihcIityZStcIikoPyFweClbYS16JV0rJFwiLFwiaVwiKSwkZT1mdW5jdGlvbih0KXt2YXIgbj10Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7cmV0dXJuIG4mJm4ub3BlbmVyfHwobj1lKSxuLmdldENvbXB1dGVkU3R5bGUodCl9LEJlPW5ldyBSZWdFeHAob2Uuam9pbihcInxcIiksXCJpXCIpOyFmdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXtpZihjKXtsLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7bWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCIsYy5zdHlsZS5jc3NUZXh0PVwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO21hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7d2lkdGg6NjAlO3RvcDoxJVwiLGJlLmFwcGVuZENoaWxkKGwpLmFwcGVuZENoaWxkKGMpO3ZhciB0PWUuZ2V0Q29tcHV0ZWRTdHlsZShjKTtpPVwiMSVcIiE9PXQudG9wLHU9MTI9PT1uKHQubWFyZ2luTGVmdCksYy5zdHlsZS5yaWdodD1cIjYwJVwiLHM9MzY9PT1uKHQucmlnaHQpLG89MzY9PT1uKHQud2lkdGgpLGMuc3R5bGUucG9zaXRpb249XCJhYnNvbHV0ZVwiLGE9MzY9PT1jLm9mZnNldFdpZHRofHxcImFic29sdXRlXCIsYmUucmVtb3ZlQ2hpbGQobCksYz1udWxsfX1mdW5jdGlvbiBuKGUpe3JldHVybiBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoZSkpfXZhciBpLG8sYSxzLHUsbD1yLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYz1yLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Yy5zdHlsZSYmKGMuc3R5bGUuYmFja2dyb3VuZENsaXA9XCJjb250ZW50LWJveFwiLGMuY2xvbmVOb2RlKCEwKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcD1cIlwiLGguY2xlYXJDbG9uZVN0eWxlPVwiY29udGVudC1ib3hcIj09PWMuc3R5bGUuYmFja2dyb3VuZENsaXAsdy5leHRlbmQoaCx7Ym94U2l6aW5nUmVsaWFibGU6ZnVuY3Rpb24oKXtyZXR1cm4gdCgpLG99LHBpeGVsQm94U3R5bGVzOmZ1bmN0aW9uKCl7cmV0dXJuIHQoKSxzfSxwaXhlbFBvc2l0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHQoKSxpfSxyZWxpYWJsZU1hcmdpbkxlZnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdCgpLHV9LHNjcm9sbGJveFNpemU6ZnVuY3Rpb24oKXtyZXR1cm4gdCgpLGF9fSkpfSgpO2Z1bmN0aW9uIEZlKGUsdCxuKXt2YXIgcixpLG8sYSxzPWUuc3R5bGU7cmV0dXJuKG49bnx8JGUoZSkpJiYoXCJcIiE9PShhPW4uZ2V0UHJvcGVydHlWYWx1ZSh0KXx8blt0XSl8fHcuY29udGFpbnMoZS5vd25lckRvY3VtZW50LGUpfHwoYT13LnN0eWxlKGUsdCkpLCFoLnBpeGVsQm94U3R5bGVzKCkmJldlLnRlc3QoYSkmJkJlLnRlc3QodCkmJihyPXMud2lkdGgsaT1zLm1pbldpZHRoLG89cy5tYXhXaWR0aCxzLm1pbldpZHRoPXMubWF4V2lkdGg9cy53aWR0aD1hLGE9bi53aWR0aCxzLndpZHRoPXIscy5taW5XaWR0aD1pLHMubWF4V2lkdGg9bykpLHZvaWQgMCE9PWE/YStcIlwiOmF9ZnVuY3Rpb24gX2UoZSx0KXtyZXR1cm57Z2V0OmZ1bmN0aW9uKCl7aWYoIWUoKSlyZXR1cm4odGhpcy5nZXQ9dCkuYXBwbHkodGhpcyxhcmd1bWVudHMpO2RlbGV0ZSB0aGlzLmdldH19fXZhciB6ZT0vXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sWGU9L14tLS8sVWU9e3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix2aXNpYmlsaXR5OlwiaGlkZGVuXCIsZGlzcGxheTpcImJsb2NrXCJ9LFZlPXtsZXR0ZXJTcGFjaW5nOlwiMFwiLGZvbnRXZWlnaHQ6XCI0MDBcIn0sR2U9W1wiV2Via2l0XCIsXCJNb3pcIixcIm1zXCJdLFllPXIuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZTtmdW5jdGlvbiBRZShlKXtpZihlIGluIFllKXJldHVybiBlO3ZhciB0PWVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpLG49R2UubGVuZ3RoO3doaWxlKG4tLSlpZigoZT1HZVtuXSt0KWluIFllKXJldHVybiBlfWZ1bmN0aW9uIEplKGUpe3ZhciB0PXcuY3NzUHJvcHNbZV07cmV0dXJuIHR8fCh0PXcuY3NzUHJvcHNbZV09UWUoZSl8fGUpLHR9ZnVuY3Rpb24gS2UoZSx0LG4pe3ZhciByPWllLmV4ZWModCk7cmV0dXJuIHI/TWF0aC5tYXgoMCxyWzJdLShufHwwKSkrKHJbM118fFwicHhcIik6dH1mdW5jdGlvbiBaZShlLHQsbixyLGksbyl7dmFyIGE9XCJ3aWR0aFwiPT09dD8xOjAscz0wLHU9MDtpZihuPT09KHI/XCJib3JkZXJcIjpcImNvbnRlbnRcIikpcmV0dXJuIDA7Zm9yKDthPDQ7YSs9MilcIm1hcmdpblwiPT09biYmKHUrPXcuY3NzKGUsbitvZVthXSwhMCxpKSkscj8oXCJjb250ZW50XCI9PT1uJiYodS09dy5jc3MoZSxcInBhZGRpbmdcIitvZVthXSwhMCxpKSksXCJtYXJnaW5cIiE9PW4mJih1LT13LmNzcyhlLFwiYm9yZGVyXCIrb2VbYV0rXCJXaWR0aFwiLCEwLGkpKSk6KHUrPXcuY3NzKGUsXCJwYWRkaW5nXCIrb2VbYV0sITAsaSksXCJwYWRkaW5nXCIhPT1uP3UrPXcuY3NzKGUsXCJib3JkZXJcIitvZVthXStcIldpZHRoXCIsITAsaSk6cys9dy5jc3MoZSxcImJvcmRlclwiK29lW2FdK1wiV2lkdGhcIiwhMCxpKSk7cmV0dXJuIXImJm8+PTAmJih1Kz1NYXRoLm1heCgwLE1hdGguY2VpbChlW1wib2Zmc2V0XCIrdFswXS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSldLW8tdS1zLS41KSkpLHV9ZnVuY3Rpb24gZXQoZSx0LG4pe3ZhciByPSRlKGUpLGk9RmUoZSx0LHIpLG89XCJib3JkZXItYm94XCI9PT13LmNzcyhlLFwiYm94U2l6aW5nXCIsITEsciksYT1vO2lmKFdlLnRlc3QoaSkpe2lmKCFuKXJldHVybiBpO2k9XCJhdXRvXCJ9cmV0dXJuIGE9YSYmKGguYm94U2l6aW5nUmVsaWFibGUoKXx8aT09PWUuc3R5bGVbdF0pLChcImF1dG9cIj09PWl8fCFwYXJzZUZsb2F0KGkpJiZcImlubGluZVwiPT09dy5jc3MoZSxcImRpc3BsYXlcIiwhMSxyKSkmJihpPWVbXCJvZmZzZXRcIit0WzBdLnRvVXBwZXJDYXNlKCkrdC5zbGljZSgxKV0sYT0hMCksKGk9cGFyc2VGbG9hdChpKXx8MCkrWmUoZSx0LG58fChvP1wiYm9yZGVyXCI6XCJjb250ZW50XCIpLGEscixpKStcInB4XCJ9dy5leHRlbmQoe2Nzc0hvb2tzOntvcGFjaXR5OntnZXQ6ZnVuY3Rpb24oZSx0KXtpZih0KXt2YXIgbj1GZShlLFwib3BhY2l0eVwiKTtyZXR1cm5cIlwiPT09bj9cIjFcIjpufX19fSxjc3NOdW1iZXI6e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGNvbHVtbkNvdW50OiEwLGZpbGxPcGFjaXR5OiEwLGZsZXhHcm93OiEwLGZsZXhTaHJpbms6ITAsZm9udFdlaWdodDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITB9LGNzc1Byb3BzOnt9LHN0eWxlOmZ1bmN0aW9uKGUsdCxuLHIpe2lmKGUmJjMhPT1lLm5vZGVUeXBlJiY4IT09ZS5ub2RlVHlwZSYmZS5zdHlsZSl7dmFyIGksbyxhLHM9Ryh0KSx1PVhlLnRlc3QodCksbD1lLnN0eWxlO2lmKHV8fCh0PUplKHMpKSxhPXcuY3NzSG9va3NbdF18fHcuY3NzSG9va3Nbc10sdm9pZCAwPT09bilyZXR1cm4gYSYmXCJnZXRcImluIGEmJnZvaWQgMCE9PShpPWEuZ2V0KGUsITEscikpP2k6bFt0XTtcInN0cmluZ1wiPT0obz10eXBlb2YgbikmJihpPWllLmV4ZWMobikpJiZpWzFdJiYobj11ZShlLHQsaSksbz1cIm51bWJlclwiKSxudWxsIT1uJiZuPT09biYmKFwibnVtYmVyXCI9PT1vJiYobis9aSYmaVszXXx8KHcuY3NzTnVtYmVyW3NdP1wiXCI6XCJweFwiKSksaC5jbGVhckNsb25lU3R5bGV8fFwiXCIhPT1ufHwwIT09dC5pbmRleE9mKFwiYmFja2dyb3VuZFwiKXx8KGxbdF09XCJpbmhlcml0XCIpLGEmJlwic2V0XCJpbiBhJiZ2b2lkIDA9PT0obj1hLnNldChlLG4scikpfHwodT9sLnNldFByb3BlcnR5KHQsbik6bFt0XT1uKSl9fSxjc3M6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHM9Ryh0KTtyZXR1cm4gWGUudGVzdCh0KXx8KHQ9SmUocykpLChhPXcuY3NzSG9va3NbdF18fHcuY3NzSG9va3Nbc10pJiZcImdldFwiaW4gYSYmKGk9YS5nZXQoZSwhMCxuKSksdm9pZCAwPT09aSYmKGk9RmUoZSx0LHIpKSxcIm5vcm1hbFwiPT09aSYmdCBpbiBWZSYmKGk9VmVbdF0pLFwiXCI9PT1ufHxuPyhvPXBhcnNlRmxvYXQoaSksITA9PT1ufHxpc0Zpbml0ZShvKT9vfHwwOmkpOml9fSksdy5lYWNoKFtcImhlaWdodFwiLFwid2lkdGhcIl0sZnVuY3Rpb24oZSx0KXt3LmNzc0hvb2tzW3RdPXtnZXQ6ZnVuY3Rpb24oZSxuLHIpe2lmKG4pcmV0dXJuIXplLnRlc3Qody5jc3MoZSxcImRpc3BsYXlcIikpfHxlLmdldENsaWVudFJlY3RzKCkubGVuZ3RoJiZlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoP2V0KGUsdCxyKTpzZShlLFVlLGZ1bmN0aW9uKCl7cmV0dXJuIGV0KGUsdCxyKX0pfSxzZXQ6ZnVuY3Rpb24oZSxuLHIpe3ZhciBpLG89JGUoZSksYT1cImJvcmRlci1ib3hcIj09PXcuY3NzKGUsXCJib3hTaXppbmdcIiwhMSxvKSxzPXImJlplKGUsdCxyLGEsbyk7cmV0dXJuIGEmJmguc2Nyb2xsYm94U2l6ZSgpPT09by5wb3NpdGlvbiYmKHMtPU1hdGguY2VpbChlW1wib2Zmc2V0XCIrdFswXS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSldLXBhcnNlRmxvYXQob1t0XSktWmUoZSx0LFwiYm9yZGVyXCIsITEsbyktLjUpKSxzJiYoaT1pZS5leGVjKG4pKSYmXCJweFwiIT09KGlbM118fFwicHhcIikmJihlLnN0eWxlW3RdPW4sbj13LmNzcyhlLHQpKSxLZShlLG4scyl9fX0pLHcuY3NzSG9va3MubWFyZ2luTGVmdD1fZShoLnJlbGlhYmxlTWFyZ2luTGVmdCxmdW5jdGlvbihlLHQpe2lmKHQpcmV0dXJuKHBhcnNlRmxvYXQoRmUoZSxcIm1hcmdpbkxlZnRcIikpfHxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQtc2UoZSx7bWFyZ2luTGVmdDowfSxmdW5jdGlvbigpe3JldHVybiBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnR9KSkrXCJweFwifSksdy5lYWNoKHttYXJnaW46XCJcIixwYWRkaW5nOlwiXCIsYm9yZGVyOlwiV2lkdGhcIn0sZnVuY3Rpb24oZSx0KXt3LmNzc0hvb2tzW2UrdF09e2V4cGFuZDpmdW5jdGlvbihuKXtmb3IodmFyIHI9MCxpPXt9LG89XCJzdHJpbmdcIj09dHlwZW9mIG4/bi5zcGxpdChcIiBcIik6W25dO3I8NDtyKyspaVtlK29lW3JdK3RdPW9bcl18fG9bci0yXXx8b1swXTtyZXR1cm4gaX19LFwibWFyZ2luXCIhPT1lJiYody5jc3NIb29rc1tlK3RdLnNldD1LZSl9KSx3LmZuLmV4dGVuZCh7Y3NzOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHoodGhpcyxmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPXt9LGE9MDtpZihBcnJheS5pc0FycmF5KHQpKXtmb3Iocj0kZShlKSxpPXQubGVuZ3RoO2E8aTthKyspb1t0W2FdXT13LmNzcyhlLHRbYV0sITEscik7cmV0dXJuIG99cmV0dXJuIHZvaWQgMCE9PW4/dy5zdHlsZShlLHQsbik6dy5jc3MoZSx0KX0sZSx0LGFyZ3VtZW50cy5sZW5ndGg+MSl9fSk7ZnVuY3Rpb24gdHQoZSx0LG4scixpKXtyZXR1cm4gbmV3IHR0LnByb3RvdHlwZS5pbml0KGUsdCxuLHIsaSl9dy5Ud2Vlbj10dCx0dC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOnR0LGluaXQ6ZnVuY3Rpb24oZSx0LG4scixpLG8pe3RoaXMuZWxlbT1lLHRoaXMucHJvcD1uLHRoaXMuZWFzaW5nPWl8fHcuZWFzaW5nLl9kZWZhdWx0LHRoaXMub3B0aW9ucz10LHRoaXMuc3RhcnQ9dGhpcy5ub3c9dGhpcy5jdXIoKSx0aGlzLmVuZD1yLHRoaXMudW5pdD1vfHwody5jc3NOdW1iZXJbbl0/XCJcIjpcInB4XCIpfSxjdXI6ZnVuY3Rpb24oKXt2YXIgZT10dC5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gZSYmZS5nZXQ/ZS5nZXQodGhpcyk6dHQucHJvcEhvb2tzLl9kZWZhdWx0LmdldCh0aGlzKX0scnVuOmZ1bmN0aW9uKGUpe3ZhciB0LG49dHQucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIHRoaXMub3B0aW9ucy5kdXJhdGlvbj90aGlzLnBvcz10PXcuZWFzaW5nW3RoaXMuZWFzaW5nXShlLHRoaXMub3B0aW9ucy5kdXJhdGlvbiplLDAsMSx0aGlzLm9wdGlvbnMuZHVyYXRpb24pOnRoaXMucG9zPXQ9ZSx0aGlzLm5vdz0odGhpcy5lbmQtdGhpcy5zdGFydCkqdCt0aGlzLnN0YXJ0LHRoaXMub3B0aW9ucy5zdGVwJiZ0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKHRoaXMuZWxlbSx0aGlzLm5vdyx0aGlzKSxuJiZuLnNldD9uLnNldCh0aGlzKTp0dC5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KHRoaXMpLHRoaXN9fSx0dC5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGU9dHQucHJvdG90eXBlLHR0LnByb3BIb29rcz17X2RlZmF1bHQ6e2dldDpmdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gMSE9PWUuZWxlbS5ub2RlVHlwZXx8bnVsbCE9ZS5lbGVtW2UucHJvcF0mJm51bGw9PWUuZWxlbS5zdHlsZVtlLnByb3BdP2UuZWxlbVtlLnByb3BdOih0PXcuY3NzKGUuZWxlbSxlLnByb3AsXCJcIikpJiZcImF1dG9cIiE9PXQ/dDowfSxzZXQ6ZnVuY3Rpb24oZSl7dy5meC5zdGVwW2UucHJvcF0/dy5meC5zdGVwW2UucHJvcF0oZSk6MSE9PWUuZWxlbS5ub2RlVHlwZXx8bnVsbD09ZS5lbGVtLnN0eWxlW3cuY3NzUHJvcHNbZS5wcm9wXV0mJiF3LmNzc0hvb2tzW2UucHJvcF0/ZS5lbGVtW2UucHJvcF09ZS5ub3c6dy5zdHlsZShlLmVsZW0sZS5wcm9wLGUubm93K2UudW5pdCl9fX0sdHQucHJvcEhvb2tzLnNjcm9sbFRvcD10dC5wcm9wSG9va3Muc2Nyb2xsTGVmdD17c2V0OmZ1bmN0aW9uKGUpe2UuZWxlbS5ub2RlVHlwZSYmZS5lbGVtLnBhcmVudE5vZGUmJihlLmVsZW1bZS5wcm9wXT1lLm5vdyl9fSx3LmVhc2luZz17bGluZWFyOmZ1bmN0aW9uKGUpe3JldHVybiBlfSxzd2luZzpmdW5jdGlvbihlKXtyZXR1cm4uNS1NYXRoLmNvcyhlKk1hdGguUEkpLzJ9LF9kZWZhdWx0Olwic3dpbmdcIn0sdy5meD10dC5wcm90b3R5cGUuaW5pdCx3LmZ4LnN0ZXA9e307dmFyIG50LHJ0LGl0PS9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxvdD0vcXVldWVIb29rcyQvO2Z1bmN0aW9uIGF0KCl7cnQmJighMT09PXIuaGlkZGVuJiZlLnJlcXVlc3RBbmltYXRpb25GcmFtZT9lLnJlcXVlc3RBbmltYXRpb25GcmFtZShhdCk6ZS5zZXRUaW1lb3V0KGF0LHcuZnguaW50ZXJ2YWwpLHcuZngudGljaygpKX1mdW5jdGlvbiBzdCgpe3JldHVybiBlLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtudD12b2lkIDB9KSxudD1EYXRlLm5vdygpfWZ1bmN0aW9uIHV0KGUsdCl7dmFyIG4scj0wLGk9e2hlaWdodDplfTtmb3IodD10PzE6MDtyPDQ7cis9Mi10KWlbXCJtYXJnaW5cIisobj1vZVtyXSldPWlbXCJwYWRkaW5nXCIrbl09ZTtyZXR1cm4gdCYmKGkub3BhY2l0eT1pLndpZHRoPWUpLGl9ZnVuY3Rpb24gbHQoZSx0LG4pe2Zvcih2YXIgcixpPShwdC50d2VlbmVyc1t0XXx8W10pLmNvbmNhdChwdC50d2VlbmVyc1tcIipcIl0pLG89MCxhPWkubGVuZ3RoO288YTtvKyspaWYocj1pW29dLmNhbGwobix0LGUpKXJldHVybiByfWZ1bmN0aW9uIGN0KGUsdCxuKXt2YXIgcixpLG8sYSxzLHUsbCxjLGY9XCJ3aWR0aFwiaW4gdHx8XCJoZWlnaHRcImluIHQscD10aGlzLGQ9e30saD1lLnN0eWxlLGc9ZS5ub2RlVHlwZSYmYWUoZSkseT1KLmdldChlLFwiZnhzaG93XCIpO24ucXVldWV8fChudWxsPT0oYT13Ll9xdWV1ZUhvb2tzKGUsXCJmeFwiKSkudW5xdWV1ZWQmJihhLnVucXVldWVkPTAscz1hLmVtcHR5LmZpcmUsYS5lbXB0eS5maXJlPWZ1bmN0aW9uKCl7YS51bnF1ZXVlZHx8cygpfSksYS51bnF1ZXVlZCsrLHAuYWx3YXlzKGZ1bmN0aW9uKCl7cC5hbHdheXMoZnVuY3Rpb24oKXthLnVucXVldWVkLS0sdy5xdWV1ZShlLFwiZnhcIikubGVuZ3RofHxhLmVtcHR5LmZpcmUoKX0pfSkpO2ZvcihyIGluIHQpaWYoaT10W3JdLGl0LnRlc3QoaSkpe2lmKGRlbGV0ZSB0W3JdLG89b3x8XCJ0b2dnbGVcIj09PWksaT09PShnP1wiaGlkZVwiOlwic2hvd1wiKSl7aWYoXCJzaG93XCIhPT1pfHwheXx8dm9pZCAwPT09eVtyXSljb250aW51ZTtnPSEwfWRbcl09eSYmeVtyXXx8dy5zdHlsZShlLHIpfWlmKCh1PSF3LmlzRW1wdHlPYmplY3QodCkpfHwhdy5pc0VtcHR5T2JqZWN0KGQpKXtmJiYxPT09ZS5ub2RlVHlwZSYmKG4ub3ZlcmZsb3c9W2gub3ZlcmZsb3csaC5vdmVyZmxvd1gsaC5vdmVyZmxvd1ldLG51bGw9PShsPXkmJnkuZGlzcGxheSkmJihsPUouZ2V0KGUsXCJkaXNwbGF5XCIpKSxcIm5vbmVcIj09PShjPXcuY3NzKGUsXCJkaXNwbGF5XCIpKSYmKGw/Yz1sOihmZShbZV0sITApLGw9ZS5zdHlsZS5kaXNwbGF5fHxsLGM9dy5jc3MoZSxcImRpc3BsYXlcIiksZmUoW2VdKSkpLChcImlubGluZVwiPT09Y3x8XCJpbmxpbmUtYmxvY2tcIj09PWMmJm51bGwhPWwpJiZcIm5vbmVcIj09PXcuY3NzKGUsXCJmbG9hdFwiKSYmKHV8fChwLmRvbmUoZnVuY3Rpb24oKXtoLmRpc3BsYXk9bH0pLG51bGw9PWwmJihjPWguZGlzcGxheSxsPVwibm9uZVwiPT09Yz9cIlwiOmMpKSxoLmRpc3BsYXk9XCJpbmxpbmUtYmxvY2tcIikpLG4ub3ZlcmZsb3cmJihoLm92ZXJmbG93PVwiaGlkZGVuXCIscC5hbHdheXMoZnVuY3Rpb24oKXtoLm92ZXJmbG93PW4ub3ZlcmZsb3dbMF0saC5vdmVyZmxvd1g9bi5vdmVyZmxvd1sxXSxoLm92ZXJmbG93WT1uLm92ZXJmbG93WzJdfSkpLHU9ITE7Zm9yKHIgaW4gZCl1fHwoeT9cImhpZGRlblwiaW4geSYmKGc9eS5oaWRkZW4pOnk9Si5hY2Nlc3MoZSxcImZ4c2hvd1wiLHtkaXNwbGF5Omx9KSxvJiYoeS5oaWRkZW49IWcpLGcmJmZlKFtlXSwhMCkscC5kb25lKGZ1bmN0aW9uKCl7Z3x8ZmUoW2VdKSxKLnJlbW92ZShlLFwiZnhzaG93XCIpO2ZvcihyIGluIGQpdy5zdHlsZShlLHIsZFtyXSl9KSksdT1sdChnP3lbcl06MCxyLHApLHIgaW4geXx8KHlbcl09dS5zdGFydCxnJiYodS5lbmQ9dS5zdGFydCx1LnN0YXJ0PTApKX19ZnVuY3Rpb24gZnQoZSx0KXt2YXIgbixyLGksbyxhO2ZvcihuIGluIGUpaWYocj1HKG4pLGk9dFtyXSxvPWVbbl0sQXJyYXkuaXNBcnJheShvKSYmKGk9b1sxXSxvPWVbbl09b1swXSksbiE9PXImJihlW3JdPW8sZGVsZXRlIGVbbl0pLChhPXcuY3NzSG9va3Nbcl0pJiZcImV4cGFuZFwiaW4gYSl7bz1hLmV4cGFuZChvKSxkZWxldGUgZVtyXTtmb3IobiBpbiBvKW4gaW4gZXx8KGVbbl09b1tuXSx0W25dPWkpfWVsc2UgdFtyXT1pfWZ1bmN0aW9uIHB0KGUsdCxuKXt2YXIgcixpLG89MCxhPXB0LnByZWZpbHRlcnMubGVuZ3RoLHM9dy5EZWZlcnJlZCgpLmFsd2F5cyhmdW5jdGlvbigpe2RlbGV0ZSB1LmVsZW19KSx1PWZ1bmN0aW9uKCl7aWYoaSlyZXR1cm4hMTtmb3IodmFyIHQ9bnR8fHN0KCksbj1NYXRoLm1heCgwLGwuc3RhcnRUaW1lK2wuZHVyYXRpb24tdCkscj0xLShuL2wuZHVyYXRpb258fDApLG89MCxhPWwudHdlZW5zLmxlbmd0aDtvPGE7bysrKWwudHdlZW5zW29dLnJ1bihyKTtyZXR1cm4gcy5ub3RpZnlXaXRoKGUsW2wscixuXSkscjwxJiZhP246KGF8fHMubm90aWZ5V2l0aChlLFtsLDEsMF0pLHMucmVzb2x2ZVdpdGgoZSxbbF0pLCExKX0sbD1zLnByb21pc2Uoe2VsZW06ZSxwcm9wczp3LmV4dGVuZCh7fSx0KSxvcHRzOncuZXh0ZW5kKCEwLHtzcGVjaWFsRWFzaW5nOnt9LGVhc2luZzp3LmVhc2luZy5fZGVmYXVsdH0sbiksb3JpZ2luYWxQcm9wZXJ0aWVzOnQsb3JpZ2luYWxPcHRpb25zOm4sc3RhcnRUaW1lOm50fHxzdCgpLGR1cmF0aW9uOm4uZHVyYXRpb24sdHdlZW5zOltdLGNyZWF0ZVR3ZWVuOmZ1bmN0aW9uKHQsbil7dmFyIHI9dy5Ud2VlbihlLGwub3B0cyx0LG4sbC5vcHRzLnNwZWNpYWxFYXNpbmdbdF18fGwub3B0cy5lYXNpbmcpO3JldHVybiBsLnR3ZWVucy5wdXNoKHIpLHJ9LHN0b3A6ZnVuY3Rpb24odCl7dmFyIG49MCxyPXQ/bC50d2VlbnMubGVuZ3RoOjA7aWYoaSlyZXR1cm4gdGhpcztmb3IoaT0hMDtuPHI7bisrKWwudHdlZW5zW25dLnJ1bigxKTtyZXR1cm4gdD8ocy5ub3RpZnlXaXRoKGUsW2wsMSwwXSkscy5yZXNvbHZlV2l0aChlLFtsLHRdKSk6cy5yZWplY3RXaXRoKGUsW2wsdF0pLHRoaXN9fSksYz1sLnByb3BzO2ZvcihmdChjLGwub3B0cy5zcGVjaWFsRWFzaW5nKTtvPGE7bysrKWlmKHI9cHQucHJlZmlsdGVyc1tvXS5jYWxsKGwsZSxjLGwub3B0cykpcmV0dXJuIGcoci5zdG9wKSYmKHcuX3F1ZXVlSG9va3MobC5lbGVtLGwub3B0cy5xdWV1ZSkuc3RvcD1yLnN0b3AuYmluZChyKSkscjtyZXR1cm4gdy5tYXAoYyxsdCxsKSxnKGwub3B0cy5zdGFydCkmJmwub3B0cy5zdGFydC5jYWxsKGUsbCksbC5wcm9ncmVzcyhsLm9wdHMucHJvZ3Jlc3MpLmRvbmUobC5vcHRzLmRvbmUsbC5vcHRzLmNvbXBsZXRlKS5mYWlsKGwub3B0cy5mYWlsKS5hbHdheXMobC5vcHRzLmFsd2F5cyksdy5meC50aW1lcih3LmV4dGVuZCh1LHtlbGVtOmUsYW5pbTpsLHF1ZXVlOmwub3B0cy5xdWV1ZX0pKSxsfXcuQW5pbWF0aW9uPXcuZXh0ZW5kKHB0LHt0d2VlbmVyczp7XCIqXCI6W2Z1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5jcmVhdGVUd2VlbihlLHQpO3JldHVybiB1ZShuLmVsZW0sZSxpZS5leGVjKHQpLG4pLG59XX0sdHdlZW5lcjpmdW5jdGlvbihlLHQpe2coZSk/KHQ9ZSxlPVtcIipcIl0pOmU9ZS5tYXRjaChNKTtmb3IodmFyIG4scj0wLGk9ZS5sZW5ndGg7cjxpO3IrKyluPWVbcl0scHQudHdlZW5lcnNbbl09cHQudHdlZW5lcnNbbl18fFtdLHB0LnR3ZWVuZXJzW25dLnVuc2hpZnQodCl9LHByZWZpbHRlcnM6W2N0XSxwcmVmaWx0ZXI6ZnVuY3Rpb24oZSx0KXt0P3B0LnByZWZpbHRlcnMudW5zaGlmdChlKTpwdC5wcmVmaWx0ZXJzLnB1c2goZSl9fSksdy5zcGVlZD1mdW5jdGlvbihlLHQsbil7dmFyIHI9ZSYmXCJvYmplY3RcIj09dHlwZW9mIGU/dy5leHRlbmQoe30sZSk6e2NvbXBsZXRlOm58fCFuJiZ0fHxnKGUpJiZlLGR1cmF0aW9uOmUsZWFzaW5nOm4mJnR8fHQmJiFnKHQpJiZ0fTtyZXR1cm4gdy5meC5vZmY/ci5kdXJhdGlvbj0wOlwibnVtYmVyXCIhPXR5cGVvZiByLmR1cmF0aW9uJiYoci5kdXJhdGlvbiBpbiB3LmZ4LnNwZWVkcz9yLmR1cmF0aW9uPXcuZnguc3BlZWRzW3IuZHVyYXRpb25dOnIuZHVyYXRpb249dy5meC5zcGVlZHMuX2RlZmF1bHQpLG51bGwhPXIucXVldWUmJiEwIT09ci5xdWV1ZXx8KHIucXVldWU9XCJmeFwiKSxyLm9sZD1yLmNvbXBsZXRlLHIuY29tcGxldGU9ZnVuY3Rpb24oKXtnKHIub2xkKSYmci5vbGQuY2FsbCh0aGlzKSxyLnF1ZXVlJiZ3LmRlcXVldWUodGhpcyxyLnF1ZXVlKX0scn0sdy5mbi5leHRlbmQoe2ZhZGVUbzpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy5maWx0ZXIoYWUpLmNzcyhcIm9wYWNpdHlcIiwwKS5zaG93KCkuZW5kKCkuYW5pbWF0ZSh7b3BhY2l0eTp0fSxlLG4scil9LGFuaW1hdGU6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGk9dy5pc0VtcHR5T2JqZWN0KGUpLG89dy5zcGVlZCh0LG4sciksYT1mdW5jdGlvbigpe3ZhciB0PXB0KHRoaXMsdy5leHRlbmQoe30sZSksbyk7KGl8fEouZ2V0KHRoaXMsXCJmaW5pc2hcIikpJiZ0LnN0b3AoITApfTtyZXR1cm4gYS5maW5pc2g9YSxpfHwhMT09PW8ucXVldWU/dGhpcy5lYWNoKGEpOnRoaXMucXVldWUoby5xdWV1ZSxhKX0sc3RvcDpmdW5jdGlvbihlLHQsbil7dmFyIHI9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zdG9wO2RlbGV0ZSBlLnN0b3AsdChuKX07cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGUmJihuPXQsdD1lLGU9dm9pZCAwKSx0JiYhMSE9PWUmJnRoaXMucXVldWUoZXx8XCJmeFwiLFtdKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD0hMCxpPW51bGwhPWUmJmUrXCJxdWV1ZUhvb2tzXCIsbz13LnRpbWVycyxhPUouZ2V0KHRoaXMpO2lmKGkpYVtpXSYmYVtpXS5zdG9wJiZyKGFbaV0pO2Vsc2UgZm9yKGkgaW4gYSlhW2ldJiZhW2ldLnN0b3AmJm90LnRlc3QoaSkmJnIoYVtpXSk7Zm9yKGk9by5sZW5ndGg7aS0tOylvW2ldLmVsZW0hPT10aGlzfHxudWxsIT1lJiZvW2ldLnF1ZXVlIT09ZXx8KG9baV0uYW5pbS5zdG9wKG4pLHQ9ITEsby5zcGxpY2UoaSwxKSk7IXQmJm58fHcuZGVxdWV1ZSh0aGlzLGUpfSl9LGZpbmlzaDpmdW5jdGlvbihlKXtyZXR1cm4hMSE9PWUmJihlPWV8fFwiZnhcIiksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQsbj1KLmdldCh0aGlzKSxyPW5bZStcInF1ZXVlXCJdLGk9bltlK1wicXVldWVIb29rc1wiXSxvPXcudGltZXJzLGE9cj9yLmxlbmd0aDowO2ZvcihuLmZpbmlzaD0hMCx3LnF1ZXVlKHRoaXMsZSxbXSksaSYmaS5zdG9wJiZpLnN0b3AuY2FsbCh0aGlzLCEwKSx0PW8ubGVuZ3RoO3QtLTspb1t0XS5lbGVtPT09dGhpcyYmb1t0XS5xdWV1ZT09PWUmJihvW3RdLmFuaW0uc3RvcCghMCksby5zcGxpY2UodCwxKSk7Zm9yKHQ9MDt0PGE7dCsrKXJbdF0mJnJbdF0uZmluaXNoJiZyW3RdLmZpbmlzaC5jYWxsKHRoaXMpO2RlbGV0ZSBuLmZpbmlzaH0pfX0pLHcuZWFjaChbXCJ0b2dnbGVcIixcInNob3dcIixcImhpZGVcIl0sZnVuY3Rpb24oZSx0KXt2YXIgbj13LmZuW3RdO3cuZm5bdF09ZnVuY3Rpb24oZSxyLGkpe3JldHVybiBudWxsPT1lfHxcImJvb2xlYW5cIj09dHlwZW9mIGU/bi5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dGhpcy5hbmltYXRlKHV0KHQsITApLGUscixpKX19KSx3LmVhY2goe3NsaWRlRG93bjp1dChcInNob3dcIiksc2xpZGVVcDp1dChcImhpZGVcIiksc2xpZGVUb2dnbGU6dXQoXCJ0b2dnbGVcIiksZmFkZUluOntvcGFjaXR5Olwic2hvd1wifSxmYWRlT3V0OntvcGFjaXR5OlwiaGlkZVwifSxmYWRlVG9nZ2xlOntvcGFjaXR5OlwidG9nZ2xlXCJ9fSxmdW5jdGlvbihlLHQpe3cuZm5bZV09ZnVuY3Rpb24oZSxuLHIpe3JldHVybiB0aGlzLmFuaW1hdGUodCxlLG4scil9fSksdy50aW1lcnM9W10sdy5meC50aWNrPWZ1bmN0aW9uKCl7dmFyIGUsdD0wLG49dy50aW1lcnM7Zm9yKG50PURhdGUubm93KCk7dDxuLmxlbmd0aDt0KyspKGU9blt0XSkoKXx8blt0XSE9PWV8fG4uc3BsaWNlKHQtLSwxKTtuLmxlbmd0aHx8dy5meC5zdG9wKCksbnQ9dm9pZCAwfSx3LmZ4LnRpbWVyPWZ1bmN0aW9uKGUpe3cudGltZXJzLnB1c2goZSksdy5meC5zdGFydCgpfSx3LmZ4LmludGVydmFsPTEzLHcuZnguc3RhcnQ9ZnVuY3Rpb24oKXtydHx8KHJ0PSEwLGF0KCkpfSx3LmZ4LnN0b3A9ZnVuY3Rpb24oKXtydD1udWxsfSx3LmZ4LnNwZWVkcz17c2xvdzo2MDAsZmFzdDoyMDAsX2RlZmF1bHQ6NDAwfSx3LmZuLmRlbGF5PWZ1bmN0aW9uKHQsbil7cmV0dXJuIHQ9dy5meD93LmZ4LnNwZWVkc1t0XXx8dDp0LG49bnx8XCJmeFwiLHRoaXMucXVldWUobixmdW5jdGlvbihuLHIpe3ZhciBpPWUuc2V0VGltZW91dChuLHQpO3Iuc3RvcD1mdW5jdGlvbigpe2UuY2xlYXJUaW1lb3V0KGkpfX0pfSxmdW5jdGlvbigpe3ZhciBlPXIuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLHQ9ci5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpLmFwcGVuZENoaWxkKHIuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKSk7ZS50eXBlPVwiY2hlY2tib3hcIixoLmNoZWNrT249XCJcIiE9PWUudmFsdWUsaC5vcHRTZWxlY3RlZD10LnNlbGVjdGVkLChlPXIuY3JlYXRlRWxlbWVudChcImlucHV0XCIpKS52YWx1ZT1cInRcIixlLnR5cGU9XCJyYWRpb1wiLGgucmFkaW9WYWx1ZT1cInRcIj09PWUudmFsdWV9KCk7dmFyIGR0LGh0PXcuZXhwci5hdHRySGFuZGxlO3cuZm4uZXh0ZW5kKHthdHRyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHoodGhpcyx3LmF0dHIsZSx0LGFyZ3VtZW50cy5sZW5ndGg+MSl9LHJlbW92ZUF0dHI6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3cucmVtb3ZlQXR0cih0aGlzLGUpfSl9fSksdy5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz1lLm5vZGVUeXBlO2lmKDMhPT1vJiY4IT09byYmMiE9PW8pcmV0dXJuXCJ1bmRlZmluZWRcIj09dHlwZW9mIGUuZ2V0QXR0cmlidXRlP3cucHJvcChlLHQsbik6KDE9PT1vJiZ3LmlzWE1MRG9jKGUpfHwoaT13LmF0dHJIb29rc1t0LnRvTG93ZXJDYXNlKCldfHwody5leHByLm1hdGNoLmJvb2wudGVzdCh0KT9kdDp2b2lkIDApKSx2b2lkIDAhPT1uP251bGw9PT1uP3ZvaWQgdy5yZW1vdmVBdHRyKGUsdCk6aSYmXCJzZXRcImluIGkmJnZvaWQgMCE9PShyPWkuc2V0KGUsbix0KSk/cjooZS5zZXRBdHRyaWJ1dGUodCxuK1wiXCIpLG4pOmkmJlwiZ2V0XCJpbiBpJiZudWxsIT09KHI9aS5nZXQoZSx0KSk/cjpudWxsPT0ocj13LmZpbmQuYXR0cihlLHQpKT92b2lkIDA6cil9LGF0dHJIb29rczp7dHlwZTp7c2V0OmZ1bmN0aW9uKGUsdCl7aWYoIWgucmFkaW9WYWx1ZSYmXCJyYWRpb1wiPT09dCYmTihlLFwiaW5wdXRcIikpe3ZhciBuPWUudmFsdWU7cmV0dXJuIGUuc2V0QXR0cmlidXRlKFwidHlwZVwiLHQpLG4mJihlLnZhbHVlPW4pLHR9fX19LHJlbW92ZUF0dHI6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPTAsaT10JiZ0Lm1hdGNoKE0pO2lmKGkmJjE9PT1lLm5vZGVUeXBlKXdoaWxlKG49aVtyKytdKWUucmVtb3ZlQXR0cmlidXRlKG4pfX0pLGR0PXtzZXQ6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiExPT09dD93LnJlbW92ZUF0dHIoZSxuKTplLnNldEF0dHJpYnV0ZShuLG4pLG59fSx3LmVhY2gody5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKC9cXHcrL2cpLGZ1bmN0aW9uKGUsdCl7dmFyIG49aHRbdF18fHcuZmluZC5hdHRyO2h0W3RdPWZ1bmN0aW9uKGUsdCxyKXt2YXIgaSxvLGE9dC50b0xvd2VyQ2FzZSgpO3JldHVybiByfHwobz1odFthXSxodFthXT1pLGk9bnVsbCE9bihlLHQscik/YTpudWxsLGh0W2FdPW8pLGl9fSk7dmFyIGd0PS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2kseXQ9L14oPzphfGFyZWEpJC9pO3cuZm4uZXh0ZW5kKHtwcm9wOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHoodGhpcyx3LnByb3AsZSx0LGFyZ3VtZW50cy5sZW5ndGg+MSl9LHJlbW92ZVByb3A6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2RlbGV0ZSB0aGlzW3cucHJvcEZpeFtlXXx8ZV19KX19KSx3LmV4dGVuZCh7cHJvcDpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPWUubm9kZVR5cGU7aWYoMyE9PW8mJjghPT1vJiYyIT09bylyZXR1cm4gMT09PW8mJncuaXNYTUxEb2MoZSl8fCh0PXcucHJvcEZpeFt0XXx8dCxpPXcucHJvcEhvb2tzW3RdKSx2b2lkIDAhPT1uP2kmJlwic2V0XCJpbiBpJiZ2b2lkIDAhPT0ocj1pLnNldChlLG4sdCkpP3I6ZVt0XT1uOmkmJlwiZ2V0XCJpbiBpJiZudWxsIT09KHI9aS5nZXQoZSx0KSk/cjplW3RdfSxwcm9wSG9va3M6e3RhYkluZGV4OntnZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dy5maW5kLmF0dHIoZSxcInRhYmluZGV4XCIpO3JldHVybiB0P3BhcnNlSW50KHQsMTApOmd0LnRlc3QoZS5ub2RlTmFtZSl8fHl0LnRlc3QoZS5ub2RlTmFtZSkmJmUuaHJlZj8wOi0xfX19LHByb3BGaXg6e1wiZm9yXCI6XCJodG1sRm9yXCIsXCJjbGFzc1wiOlwiY2xhc3NOYW1lXCJ9fSksaC5vcHRTZWxlY3RlZHx8KHcucHJvcEhvb2tzLnNlbGVjdGVkPXtnZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXJlbnROb2RlO3JldHVybiB0JiZ0LnBhcmVudE5vZGUmJnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4LG51bGx9LHNldDpmdW5jdGlvbihlKXt2YXIgdD1lLnBhcmVudE5vZGU7dCYmKHQuc2VsZWN0ZWRJbmRleCx0LnBhcmVudE5vZGUmJnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4KX19KSx3LmVhY2goW1widGFiSW5kZXhcIixcInJlYWRPbmx5XCIsXCJtYXhMZW5ndGhcIixcImNlbGxTcGFjaW5nXCIsXCJjZWxsUGFkZGluZ1wiLFwicm93U3BhblwiLFwiY29sU3BhblwiLFwidXNlTWFwXCIsXCJmcmFtZUJvcmRlclwiLFwiY29udGVudEVkaXRhYmxlXCJdLGZ1bmN0aW9uKCl7dy5wcm9wRml4W3RoaXMudG9Mb3dlckNhc2UoKV09dGhpc30pO2Z1bmN0aW9uIHZ0KGUpe3JldHVybihlLm1hdGNoKE0pfHxbXSkuam9pbihcIiBcIil9ZnVuY3Rpb24gbXQoZSl7cmV0dXJuIGUuZ2V0QXR0cmlidXRlJiZlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwifWZ1bmN0aW9uIHh0KGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpP2U6XCJzdHJpbmdcIj09dHlwZW9mIGU/ZS5tYXRjaChNKXx8W106W119dy5mbi5leHRlbmQoe2FkZENsYXNzOmZ1bmN0aW9uKGUpe3ZhciB0LG4scixpLG8sYSxzLHU9MDtpZihnKGUpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24odCl7dyh0aGlzKS5hZGRDbGFzcyhlLmNhbGwodGhpcyx0LG10KHRoaXMpKSl9KTtpZigodD14dChlKSkubGVuZ3RoKXdoaWxlKG49dGhpc1t1KytdKWlmKGk9bXQobikscj0xPT09bi5ub2RlVHlwZSYmXCIgXCIrdnQoaSkrXCIgXCIpe2E9MDt3aGlsZShvPXRbYSsrXSlyLmluZGV4T2YoXCIgXCIrbytcIiBcIik8MCYmKHIrPW8rXCIgXCIpO2khPT0ocz12dChyKSkmJm4uc2V0QXR0cmlidXRlKFwiY2xhc3NcIixzKX1yZXR1cm4gdGhpc30scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24oZSl7dmFyIHQsbixyLGksbyxhLHMsdT0wO2lmKGcoZSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbih0KXt3KHRoaXMpLnJlbW92ZUNsYXNzKGUuY2FsbCh0aGlzLHQsbXQodGhpcykpKX0pO2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLmF0dHIoXCJjbGFzc1wiLFwiXCIpO2lmKCh0PXh0KGUpKS5sZW5ndGgpd2hpbGUobj10aGlzW3UrK10paWYoaT1tdChuKSxyPTE9PT1uLm5vZGVUeXBlJiZcIiBcIit2dChpKStcIiBcIil7YT0wO3doaWxlKG89dFthKytdKXdoaWxlKHIuaW5kZXhPZihcIiBcIitvK1wiIFwiKT4tMSlyPXIucmVwbGFjZShcIiBcIitvK1wiIFwiLFwiIFwiKTtpIT09KHM9dnQocikpJiZuLnNldEF0dHJpYnV0ZShcImNsYXNzXCIscyl9cmV0dXJuIHRoaXN9LHRvZ2dsZUNsYXNzOmZ1bmN0aW9uKGUsdCl7dmFyIG49dHlwZW9mIGUscj1cInN0cmluZ1wiPT09bnx8QXJyYXkuaXNBcnJheShlKTtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIHQmJnI/dD90aGlzLmFkZENsYXNzKGUpOnRoaXMucmVtb3ZlQ2xhc3MoZSk6ZyhlKT90aGlzLmVhY2goZnVuY3Rpb24obil7dyh0aGlzKS50b2dnbGVDbGFzcyhlLmNhbGwodGhpcyxuLG10KHRoaXMpLHQpLHQpfSk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQsaSxvLGE7aWYocil7aT0wLG89dyh0aGlzKSxhPXh0KGUpO3doaWxlKHQ9YVtpKytdKW8uaGFzQ2xhc3ModCk/by5yZW1vdmVDbGFzcyh0KTpvLmFkZENsYXNzKHQpfWVsc2Ugdm9pZCAwIT09ZSYmXCJib29sZWFuXCIhPT1ufHwoKHQ9bXQodGhpcykpJiZKLnNldCh0aGlzLFwiX19jbGFzc05hbWVfX1wiLHQpLHRoaXMuc2V0QXR0cmlidXRlJiZ0aGlzLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsdHx8ITE9PT1lP1wiXCI6Si5nZXQodGhpcyxcIl9fY2xhc3NOYW1lX19cIil8fFwiXCIpKX0pfSxoYXNDbGFzczpmdW5jdGlvbihlKXt2YXIgdCxuLHI9MDt0PVwiIFwiK2UrXCIgXCI7d2hpbGUobj10aGlzW3IrK10paWYoMT09PW4ubm9kZVR5cGUmJihcIiBcIit2dChtdChuKSkrXCIgXCIpLmluZGV4T2YodCk+LTEpcmV0dXJuITA7cmV0dXJuITF9fSk7dmFyIGJ0PS9cXHIvZzt3LmZuLmV4dGVuZCh7dmFsOmZ1bmN0aW9uKGUpe3ZhciB0LG4scixpPXRoaXNbMF07e2lmKGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHI9ZyhlKSx0aGlzLmVhY2goZnVuY3Rpb24obil7dmFyIGk7MT09PXRoaXMubm9kZVR5cGUmJihudWxsPT0oaT1yP2UuY2FsbCh0aGlzLG4sdyh0aGlzKS52YWwoKSk6ZSk/aT1cIlwiOlwibnVtYmVyXCI9PXR5cGVvZiBpP2krPVwiXCI6QXJyYXkuaXNBcnJheShpKSYmKGk9dy5tYXAoaSxmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT9cIlwiOmUrXCJcIn0pKSwodD13LnZhbEhvb2tzW3RoaXMudHlwZV18fHcudmFsSG9va3NbdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSkmJlwic2V0XCJpbiB0JiZ2b2lkIDAhPT10LnNldCh0aGlzLGksXCJ2YWx1ZVwiKXx8KHRoaXMudmFsdWU9aSkpfSk7aWYoaSlyZXR1cm4odD13LnZhbEhvb2tzW2kudHlwZV18fHcudmFsSG9va3NbaS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSkmJlwiZ2V0XCJpbiB0JiZ2b2lkIDAhPT0obj10LmdldChpLFwidmFsdWVcIikpP246XCJzdHJpbmdcIj09dHlwZW9mKG49aS52YWx1ZSk/bi5yZXBsYWNlKGJ0LFwiXCIpOm51bGw9PW4/XCJcIjpufX19KSx3LmV4dGVuZCh7dmFsSG9va3M6e29wdGlvbjp7Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0PXcuZmluZC5hdHRyKGUsXCJ2YWx1ZVwiKTtyZXR1cm4gbnVsbCE9dD90OnZ0KHcudGV4dChlKSl9fSxzZWxlY3Q6e2dldDpmdW5jdGlvbihlKXt2YXIgdCxuLHIsaT1lLm9wdGlvbnMsbz1lLnNlbGVjdGVkSW5kZXgsYT1cInNlbGVjdC1vbmVcIj09PWUudHlwZSxzPWE/bnVsbDpbXSx1PWE/bysxOmkubGVuZ3RoO2ZvcihyPW88MD91OmE/bzowO3I8dTtyKyspaWYoKChuPWlbcl0pLnNlbGVjdGVkfHxyPT09bykmJiFuLmRpc2FibGVkJiYoIW4ucGFyZW50Tm9kZS5kaXNhYmxlZHx8IU4obi5wYXJlbnROb2RlLFwib3B0Z3JvdXBcIikpKXtpZih0PXcobikudmFsKCksYSlyZXR1cm4gdDtzLnB1c2godCl9cmV0dXJuIHN9LHNldDpmdW5jdGlvbihlLHQpe3ZhciBuLHIsaT1lLm9wdGlvbnMsbz13Lm1ha2VBcnJheSh0KSxhPWkubGVuZ3RoO3doaWxlKGEtLSkoKHI9aVthXSkuc2VsZWN0ZWQ9dy5pbkFycmF5KHcudmFsSG9va3Mub3B0aW9uLmdldChyKSxvKT4tMSkmJihuPSEwKTtyZXR1cm4gbnx8KGUuc2VsZWN0ZWRJbmRleD0tMSksb319fX0pLHcuZWFjaChbXCJyYWRpb1wiLFwiY2hlY2tib3hcIl0sZnVuY3Rpb24oKXt3LnZhbEhvb2tzW3RoaXNdPXtzZXQ6ZnVuY3Rpb24oZSx0KXtpZihBcnJheS5pc0FycmF5KHQpKXJldHVybiBlLmNoZWNrZWQ9dy5pbkFycmF5KHcoZSkudmFsKCksdCk+LTF9fSxoLmNoZWNrT258fCh3LnZhbEhvb2tzW3RoaXNdLmdldD1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09PWUuZ2V0QXR0cmlidXRlKFwidmFsdWVcIik/XCJvblwiOmUudmFsdWV9KX0pLGguZm9jdXNpbj1cIm9uZm9jdXNpblwiaW4gZTt2YXIgd3Q9L14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFR0PWZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCl9O3cuZXh0ZW5kKHcuZXZlbnQse3RyaWdnZXI6ZnVuY3Rpb24odCxuLGksbyl7dmFyIGEscyx1LGwsYyxwLGQsaCx2PVtpfHxyXSxtPWYuY2FsbCh0LFwidHlwZVwiKT90LnR5cGU6dCx4PWYuY2FsbCh0LFwibmFtZXNwYWNlXCIpP3QubmFtZXNwYWNlLnNwbGl0KFwiLlwiKTpbXTtpZihzPWg9dT1pPWl8fHIsMyE9PWkubm9kZVR5cGUmJjghPT1pLm5vZGVUeXBlJiYhd3QudGVzdChtK3cuZXZlbnQudHJpZ2dlcmVkKSYmKG0uaW5kZXhPZihcIi5cIik+LTEmJihtPSh4PW0uc3BsaXQoXCIuXCIpKS5zaGlmdCgpLHguc29ydCgpKSxjPW0uaW5kZXhPZihcIjpcIik8MCYmXCJvblwiK20sdD10W3cuZXhwYW5kb10/dDpuZXcgdy5FdmVudChtLFwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0KSx0LmlzVHJpZ2dlcj1vPzI6Myx0Lm5hbWVzcGFjZT14LmpvaW4oXCIuXCIpLHQucm5hbWVzcGFjZT10Lm5hbWVzcGFjZT9uZXcgUmVnRXhwKFwiKF58XFxcXC4pXCIreC5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikrXCIoXFxcXC58JClcIik6bnVsbCx0LnJlc3VsdD12b2lkIDAsdC50YXJnZXR8fCh0LnRhcmdldD1pKSxuPW51bGw9PW4/W3RdOncubWFrZUFycmF5KG4sW3RdKSxkPXcuZXZlbnQuc3BlY2lhbFttXXx8e30sb3x8IWQudHJpZ2dlcnx8ITEhPT1kLnRyaWdnZXIuYXBwbHkoaSxuKSkpe2lmKCFvJiYhZC5ub0J1YmJsZSYmIXkoaSkpe2ZvcihsPWQuZGVsZWdhdGVUeXBlfHxtLHd0LnRlc3QobCttKXx8KHM9cy5wYXJlbnROb2RlKTtzO3M9cy5wYXJlbnROb2RlKXYucHVzaChzKSx1PXM7dT09PShpLm93bmVyRG9jdW1lbnR8fHIpJiZ2LnB1c2godS5kZWZhdWx0Vmlld3x8dS5wYXJlbnRXaW5kb3d8fGUpfWE9MDt3aGlsZSgocz12W2ErK10pJiYhdC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWg9cyx0LnR5cGU9YT4xP2w6ZC5iaW5kVHlwZXx8bSwocD0oSi5nZXQocyxcImV2ZW50c1wiKXx8e30pW3QudHlwZV0mJkouZ2V0KHMsXCJoYW5kbGVcIikpJiZwLmFwcGx5KHMsbiksKHA9YyYmc1tjXSkmJnAuYXBwbHkmJlkocykmJih0LnJlc3VsdD1wLmFwcGx5KHMsbiksITE9PT10LnJlc3VsdCYmdC5wcmV2ZW50RGVmYXVsdCgpKTtyZXR1cm4gdC50eXBlPW0sb3x8dC5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8ZC5fZGVmYXVsdCYmITEhPT1kLl9kZWZhdWx0LmFwcGx5KHYucG9wKCksbil8fCFZKGkpfHxjJiZnKGlbbV0pJiYheShpKSYmKCh1PWlbY10pJiYoaVtjXT1udWxsKSx3LmV2ZW50LnRyaWdnZXJlZD1tLHQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSYmaC5hZGRFdmVudExpc3RlbmVyKG0sVHQpLGlbbV0oKSx0LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkmJmgucmVtb3ZlRXZlbnRMaXN0ZW5lcihtLFR0KSx3LmV2ZW50LnRyaWdnZXJlZD12b2lkIDAsdSYmKGlbY109dSkpLHQucmVzdWx0fX0sc2ltdWxhdGU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXcuZXh0ZW5kKG5ldyB3LkV2ZW50LG4se3R5cGU6ZSxpc1NpbXVsYXRlZDohMH0pO3cuZXZlbnQudHJpZ2dlcihyLG51bGwsdCl9fSksdy5mbi5leHRlbmQoe3RyaWdnZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dy5ldmVudC50cmlnZ2VyKGUsdCx0aGlzKX0pfSx0cmlnZ2VySGFuZGxlcjpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXNbMF07aWYobilyZXR1cm4gdy5ldmVudC50cmlnZ2VyKGUsdCxuLCEwKX19KSxoLmZvY3VzaW58fHcuZWFjaCh7Zm9jdXM6XCJmb2N1c2luXCIsYmx1cjpcImZvY3Vzb3V0XCJ9LGZ1bmN0aW9uKGUsdCl7dmFyIG49ZnVuY3Rpb24oZSl7dy5ldmVudC5zaW11bGF0ZSh0LGUudGFyZ2V0LHcuZXZlbnQuZml4KGUpKX07dy5ldmVudC5zcGVjaWFsW3RdPXtzZXR1cDpmdW5jdGlvbigpe3ZhciByPXRoaXMub3duZXJEb2N1bWVudHx8dGhpcyxpPUouYWNjZXNzKHIsdCk7aXx8ci5hZGRFdmVudExpc3RlbmVyKGUsbiwhMCksSi5hY2Nlc3Mocix0LChpfHwwKSsxKX0sdGVhcmRvd246ZnVuY3Rpb24oKXt2YXIgcj10aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsaT1KLmFjY2VzcyhyLHQpLTE7aT9KLmFjY2VzcyhyLHQsaSk6KHIucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLG4sITApLEoucmVtb3ZlKHIsdCkpfX19KTt2YXIgQ3Q9ZS5sb2NhdGlvbixFdD1EYXRlLm5vdygpLGt0PS9cXD8vO3cucGFyc2VYTUw9ZnVuY3Rpb24odCl7dmFyIG47aWYoIXR8fFwic3RyaW5nXCIhPXR5cGVvZiB0KXJldHVybiBudWxsO3RyeXtuPShuZXcgZS5ET01QYXJzZXIpLnBhcnNlRnJvbVN0cmluZyh0LFwidGV4dC94bWxcIil9Y2F0Y2goZSl7bj12b2lkIDB9cmV0dXJuIG4mJiFuLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwicGFyc2VyZXJyb3JcIikubGVuZ3RofHx3LmVycm9yKFwiSW52YWxpZCBYTUw6IFwiK3QpLG59O3ZhciBTdD0vXFxbXFxdJC8sRHQ9L1xccj9cXG4vZyxOdD0vXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksQXQ9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO2Z1bmN0aW9uIGp0KGUsdCxuLHIpe3ZhciBpO2lmKEFycmF5LmlzQXJyYXkodCkpdy5lYWNoKHQsZnVuY3Rpb24odCxpKXtufHxTdC50ZXN0KGUpP3IoZSxpKTpqdChlK1wiW1wiKyhcIm9iamVjdFwiPT10eXBlb2YgaSYmbnVsbCE9aT90OlwiXCIpK1wiXVwiLGksbixyKX0pO2Vsc2UgaWYobnx8XCJvYmplY3RcIiE9PXgodCkpcihlLHQpO2Vsc2UgZm9yKGkgaW4gdClqdChlK1wiW1wiK2krXCJdXCIsdFtpXSxuLHIpfXcucGFyYW09ZnVuY3Rpb24oZSx0KXt2YXIgbixyPVtdLGk9ZnVuY3Rpb24oZSx0KXt2YXIgbj1nKHQpP3QoKTp0O3Jbci5sZW5ndGhdPWVuY29kZVVSSUNvbXBvbmVudChlKStcIj1cIitlbmNvZGVVUklDb21wb25lbnQobnVsbD09bj9cIlwiOm4pfTtpZihBcnJheS5pc0FycmF5KGUpfHxlLmpxdWVyeSYmIXcuaXNQbGFpbk9iamVjdChlKSl3LmVhY2goZSxmdW5jdGlvbigpe2kodGhpcy5uYW1lLHRoaXMudmFsdWUpfSk7ZWxzZSBmb3IobiBpbiBlKWp0KG4sZVtuXSx0LGkpO3JldHVybiByLmpvaW4oXCImXCIpfSx3LmZuLmV4dGVuZCh7c2VyaWFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHcucGFyYW0odGhpcy5zZXJpYWxpemVBcnJheSgpKX0sc2VyaWFsaXplQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgZT13LnByb3AodGhpcyxcImVsZW1lbnRzXCIpO3JldHVybiBlP3cubWFrZUFycmF5KGUpOnRoaXN9KS5maWx0ZXIoZnVuY3Rpb24oKXt2YXIgZT10aGlzLnR5cGU7cmV0dXJuIHRoaXMubmFtZSYmIXcodGhpcykuaXMoXCI6ZGlzYWJsZWRcIikmJkF0LnRlc3QodGhpcy5ub2RlTmFtZSkmJiFOdC50ZXN0KGUpJiYodGhpcy5jaGVja2VkfHwhcGUudGVzdChlKSl9KS5tYXAoZnVuY3Rpb24oZSx0KXt2YXIgbj13KHRoaXMpLnZhbCgpO3JldHVybiBudWxsPT1uP251bGw6QXJyYXkuaXNBcnJheShuKT93Lm1hcChuLGZ1bmN0aW9uKGUpe3JldHVybntuYW1lOnQubmFtZSx2YWx1ZTplLnJlcGxhY2UoRHQsXCJcXHJcXG5cIil9fSk6e25hbWU6dC5uYW1lLHZhbHVlOm4ucmVwbGFjZShEdCxcIlxcclxcblwiKX19KS5nZXQoKX19KTt2YXIgcXQ9LyUyMC9nLEx0PS8jLiokLyxIdD0vKFs/Jl0pXz1bXiZdKi8sT3Q9L14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9nbSxQdD0vXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxNdD0vXig/OkdFVHxIRUFEKSQvLFJ0PS9eXFwvXFwvLyxJdD17fSxXdD17fSwkdD1cIiovXCIuY29uY2F0KFwiKlwiKSxCdD1yLmNyZWF0ZUVsZW1lbnQoXCJhXCIpO0J0LmhyZWY9Q3QuaHJlZjtmdW5jdGlvbiBGdChlKXtyZXR1cm4gZnVuY3Rpb24odCxuKXtcInN0cmluZ1wiIT10eXBlb2YgdCYmKG49dCx0PVwiKlwiKTt2YXIgcixpPTAsbz10LnRvTG93ZXJDYXNlKCkubWF0Y2goTSl8fFtdO2lmKGcobikpd2hpbGUocj1vW2krK10pXCIrXCI9PT1yWzBdPyhyPXIuc2xpY2UoMSl8fFwiKlwiLChlW3JdPWVbcl18fFtdKS51bnNoaWZ0KG4pKTooZVtyXT1lW3JdfHxbXSkucHVzaChuKX19ZnVuY3Rpb24gX3QoZSx0LG4scil7dmFyIGk9e30sbz1lPT09V3Q7ZnVuY3Rpb24gYShzKXt2YXIgdTtyZXR1cm4gaVtzXT0hMCx3LmVhY2goZVtzXXx8W10sZnVuY3Rpb24oZSxzKXt2YXIgbD1zKHQsbixyKTtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgbHx8b3x8aVtsXT9vPyEodT1sKTp2b2lkIDA6KHQuZGF0YVR5cGVzLnVuc2hpZnQobCksYShsKSwhMSl9KSx1fXJldHVybiBhKHQuZGF0YVR5cGVzWzBdKXx8IWlbXCIqXCJdJiZhKFwiKlwiKX1mdW5jdGlvbiB6dChlLHQpe3ZhciBuLHIsaT13LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9uc3x8e307Zm9yKG4gaW4gdCl2b2lkIDAhPT10W25dJiYoKGlbbl0/ZTpyfHwocj17fSkpW25dPXRbbl0pO3JldHVybiByJiZ3LmV4dGVuZCghMCxlLHIpLGV9ZnVuY3Rpb24gWHQoZSx0LG4pe3ZhciByLGksbyxhLHM9ZS5jb250ZW50cyx1PWUuZGF0YVR5cGVzO3doaWxlKFwiKlwiPT09dVswXSl1LnNoaWZ0KCksdm9pZCAwPT09ciYmKHI9ZS5taW1lVHlwZXx8dC5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKSk7aWYocilmb3IoaSBpbiBzKWlmKHNbaV0mJnNbaV0udGVzdChyKSl7dS51bnNoaWZ0KGkpO2JyZWFrfWlmKHVbMF1pbiBuKW89dVswXTtlbHNle2ZvcihpIGluIG4pe2lmKCF1WzBdfHxlLmNvbnZlcnRlcnNbaStcIiBcIit1WzBdXSl7bz1pO2JyZWFrfWF8fChhPWkpfW89b3x8YX1pZihvKXJldHVybiBvIT09dVswXSYmdS51bnNoaWZ0KG8pLG5bb119ZnVuY3Rpb24gVXQoZSx0LG4scil7dmFyIGksbyxhLHMsdSxsPXt9LGM9ZS5kYXRhVHlwZXMuc2xpY2UoKTtpZihjWzFdKWZvcihhIGluIGUuY29udmVydGVycylsW2EudG9Mb3dlckNhc2UoKV09ZS5jb252ZXJ0ZXJzW2FdO289Yy5zaGlmdCgpO3doaWxlKG8paWYoZS5yZXNwb25zZUZpZWxkc1tvXSYmKG5bZS5yZXNwb25zZUZpZWxkc1tvXV09dCksIXUmJnImJmUuZGF0YUZpbHRlciYmKHQ9ZS5kYXRhRmlsdGVyKHQsZS5kYXRhVHlwZSkpLHU9byxvPWMuc2hpZnQoKSlpZihcIipcIj09PW8pbz11O2Vsc2UgaWYoXCIqXCIhPT11JiZ1IT09byl7aWYoIShhPWxbdStcIiBcIitvXXx8bFtcIiogXCIrb10pKWZvcihpIGluIGwpaWYoKHM9aS5zcGxpdChcIiBcIikpWzFdPT09byYmKGE9bFt1K1wiIFwiK3NbMF1dfHxsW1wiKiBcIitzWzBdXSkpeyEwPT09YT9hPWxbaV06ITAhPT1sW2ldJiYobz1zWzBdLGMudW5zaGlmdChzWzFdKSk7YnJlYWt9aWYoITAhPT1hKWlmKGEmJmVbXCJ0aHJvd3NcIl0pdD1hKHQpO2Vsc2UgdHJ5e3Q9YSh0KX1jYXRjaChlKXtyZXR1cm57c3RhdGU6XCJwYXJzZXJlcnJvclwiLGVycm9yOmE/ZTpcIk5vIGNvbnZlcnNpb24gZnJvbSBcIit1K1wiIHRvIFwiK299fX1yZXR1cm57c3RhdGU6XCJzdWNjZXNzXCIsZGF0YTp0fX13LmV4dGVuZCh7YWN0aXZlOjAsbGFzdE1vZGlmaWVkOnt9LGV0YWc6e30sYWpheFNldHRpbmdzOnt1cmw6Q3QuaHJlZix0eXBlOlwiR0VUXCIsaXNMb2NhbDpQdC50ZXN0KEN0LnByb3RvY29sKSxnbG9iYWw6ITAscHJvY2Vzc0RhdGE6ITAsYXN5bmM6ITAsY29udGVudFR5cGU6XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixhY2NlcHRzOntcIipcIjokdCx0ZXh0OlwidGV4dC9wbGFpblwiLGh0bWw6XCJ0ZXh0L2h0bWxcIix4bWw6XCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsanNvbjpcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwifSxjb250ZW50czp7eG1sOi9cXGJ4bWxcXGIvLGh0bWw6L1xcYmh0bWwvLGpzb246L1xcYmpzb25cXGIvfSxyZXNwb25zZUZpZWxkczp7eG1sOlwicmVzcG9uc2VYTUxcIix0ZXh0OlwicmVzcG9uc2VUZXh0XCIsanNvbjpcInJlc3BvbnNlSlNPTlwifSxjb252ZXJ0ZXJzOntcIiogdGV4dFwiOlN0cmluZyxcInRleHQgaHRtbFwiOiEwLFwidGV4dCBqc29uXCI6SlNPTi5wYXJzZSxcInRleHQgeG1sXCI6dy5wYXJzZVhNTH0sZmxhdE9wdGlvbnM6e3VybDohMCxjb250ZXh0OiEwfX0sYWpheFNldHVwOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ/enQoenQoZSx3LmFqYXhTZXR0aW5ncyksdCk6enQody5hamF4U2V0dGluZ3MsZSl9LGFqYXhQcmVmaWx0ZXI6RnQoSXQpLGFqYXhUcmFuc3BvcnQ6RnQoV3QpLGFqYXg6ZnVuY3Rpb24odCxuKXtcIm9iamVjdFwiPT10eXBlb2YgdCYmKG49dCx0PXZvaWQgMCksbj1ufHx7fTt2YXIgaSxvLGEscyx1LGwsYyxmLHAsZCxoPXcuYWpheFNldHVwKHt9LG4pLGc9aC5jb250ZXh0fHxoLHk9aC5jb250ZXh0JiYoZy5ub2RlVHlwZXx8Zy5qcXVlcnkpP3coZyk6dy5ldmVudCx2PXcuRGVmZXJyZWQoKSxtPXcuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikseD1oLnN0YXR1c0NvZGV8fHt9LGI9e30sVD17fSxDPVwiY2FuY2VsZWRcIixFPXtyZWFkeVN0YXRlOjAsZ2V0UmVzcG9uc2VIZWFkZXI6ZnVuY3Rpb24oZSl7dmFyIHQ7aWYoYyl7aWYoIXMpe3M9e307d2hpbGUodD1PdC5leGVjKGEpKXNbdFsxXS50b0xvd2VyQ2FzZSgpXT10WzJdfXQ9c1tlLnRvTG93ZXJDYXNlKCldfXJldHVybiBudWxsPT10P251bGw6dH0sZ2V0QWxsUmVzcG9uc2VIZWFkZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIGM/YTpudWxsfSxzZXRSZXF1ZXN0SGVhZGVyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG51bGw9PWMmJihlPVRbZS50b0xvd2VyQ2FzZSgpXT1UW2UudG9Mb3dlckNhc2UoKV18fGUsYltlXT10KSx0aGlzfSxvdmVycmlkZU1pbWVUeXBlOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1jJiYoaC5taW1lVHlwZT1lKSx0aGlzfSxzdGF0dXNDb2RlOmZ1bmN0aW9uKGUpe3ZhciB0O2lmKGUpaWYoYylFLmFsd2F5cyhlW0Uuc3RhdHVzXSk7ZWxzZSBmb3IodCBpbiBlKXhbdF09W3hbdF0sZVt0XV07cmV0dXJuIHRoaXN9LGFib3J0OmZ1bmN0aW9uKGUpe3ZhciB0PWV8fEM7cmV0dXJuIGkmJmkuYWJvcnQodCksaygwLHQpLHRoaXN9fTtpZih2LnByb21pc2UoRSksaC51cmw9KCh0fHxoLnVybHx8Q3QuaHJlZikrXCJcIikucmVwbGFjZShSdCxDdC5wcm90b2NvbCtcIi8vXCIpLGgudHlwZT1uLm1ldGhvZHx8bi50eXBlfHxoLm1ldGhvZHx8aC50eXBlLGguZGF0YVR5cGVzPShoLmRhdGFUeXBlfHxcIipcIikudG9Mb3dlckNhc2UoKS5tYXRjaChNKXx8W1wiXCJdLG51bGw9PWguY3Jvc3NEb21haW4pe2w9ci5jcmVhdGVFbGVtZW50KFwiYVwiKTt0cnl7bC5ocmVmPWgudXJsLGwuaHJlZj1sLmhyZWYsaC5jcm9zc0RvbWFpbj1CdC5wcm90b2NvbCtcIi8vXCIrQnQuaG9zdCE9bC5wcm90b2NvbCtcIi8vXCIrbC5ob3N0fWNhdGNoKGUpe2guY3Jvc3NEb21haW49ITB9fWlmKGguZGF0YSYmaC5wcm9jZXNzRGF0YSYmXCJzdHJpbmdcIiE9dHlwZW9mIGguZGF0YSYmKGguZGF0YT13LnBhcmFtKGguZGF0YSxoLnRyYWRpdGlvbmFsKSksX3QoSXQsaCxuLEUpLGMpcmV0dXJuIEU7KGY9dy5ldmVudCYmaC5nbG9iYWwpJiYwPT13LmFjdGl2ZSsrJiZ3LmV2ZW50LnRyaWdnZXIoXCJhamF4U3RhcnRcIiksaC50eXBlPWgudHlwZS50b1VwcGVyQ2FzZSgpLGguaGFzQ29udGVudD0hTXQudGVzdChoLnR5cGUpLG89aC51cmwucmVwbGFjZShMdCxcIlwiKSxoLmhhc0NvbnRlbnQ/aC5kYXRhJiZoLnByb2Nlc3NEYXRhJiYwPT09KGguY29udGVudFR5cGV8fFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikmJihoLmRhdGE9aC5kYXRhLnJlcGxhY2UocXQsXCIrXCIpKTooZD1oLnVybC5zbGljZShvLmxlbmd0aCksaC5kYXRhJiYoaC5wcm9jZXNzRGF0YXx8XCJzdHJpbmdcIj09dHlwZW9mIGguZGF0YSkmJihvKz0oa3QudGVzdChvKT9cIiZcIjpcIj9cIikraC5kYXRhLGRlbGV0ZSBoLmRhdGEpLCExPT09aC5jYWNoZSYmKG89by5yZXBsYWNlKEh0LFwiJDFcIiksZD0oa3QudGVzdChvKT9cIiZcIjpcIj9cIikrXCJfPVwiK0V0KysrZCksaC51cmw9bytkKSxoLmlmTW9kaWZpZWQmJih3Lmxhc3RNb2RpZmllZFtvXSYmRS5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTW9kaWZpZWQtU2luY2VcIix3Lmxhc3RNb2RpZmllZFtvXSksdy5ldGFnW29dJiZFLnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Ob25lLU1hdGNoXCIsdy5ldGFnW29dKSksKGguZGF0YSYmaC5oYXNDb250ZW50JiYhMSE9PWguY29udGVudFR5cGV8fG4uY29udGVudFR5cGUpJiZFLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIixoLmNvbnRlbnRUeXBlKSxFLnNldFJlcXVlc3RIZWFkZXIoXCJBY2NlcHRcIixoLmRhdGFUeXBlc1swXSYmaC5hY2NlcHRzW2guZGF0YVR5cGVzWzBdXT9oLmFjY2VwdHNbaC5kYXRhVHlwZXNbMF1dKyhcIipcIiE9PWguZGF0YVR5cGVzWzBdP1wiLCBcIiskdCtcIjsgcT0wLjAxXCI6XCJcIik6aC5hY2NlcHRzW1wiKlwiXSk7Zm9yKHAgaW4gaC5oZWFkZXJzKUUuc2V0UmVxdWVzdEhlYWRlcihwLGguaGVhZGVyc1twXSk7aWYoaC5iZWZvcmVTZW5kJiYoITE9PT1oLmJlZm9yZVNlbmQuY2FsbChnLEUsaCl8fGMpKXJldHVybiBFLmFib3J0KCk7aWYoQz1cImFib3J0XCIsbS5hZGQoaC5jb21wbGV0ZSksRS5kb25lKGguc3VjY2VzcyksRS5mYWlsKGguZXJyb3IpLGk9X3QoV3QsaCxuLEUpKXtpZihFLnJlYWR5U3RhdGU9MSxmJiZ5LnRyaWdnZXIoXCJhamF4U2VuZFwiLFtFLGhdKSxjKXJldHVybiBFO2guYXN5bmMmJmgudGltZW91dD4wJiYodT1lLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtFLmFib3J0KFwidGltZW91dFwiKX0saC50aW1lb3V0KSk7dHJ5e2M9ITEsaS5zZW5kKGIsayl9Y2F0Y2goZSl7aWYoYyl0aHJvdyBlO2soLTEsZSl9fWVsc2UgaygtMSxcIk5vIFRyYW5zcG9ydFwiKTtmdW5jdGlvbiBrKHQsbixyLHMpe3ZhciBsLHAsZCxiLFQsQz1uO2N8fChjPSEwLHUmJmUuY2xlYXJUaW1lb3V0KHUpLGk9dm9pZCAwLGE9c3x8XCJcIixFLnJlYWR5U3RhdGU9dD4wPzQ6MCxsPXQ+PTIwMCYmdDwzMDB8fDMwND09PXQsciYmKGI9WHQoaCxFLHIpKSxiPVV0KGgsYixFLGwpLGw/KGguaWZNb2RpZmllZCYmKChUPUUuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpKSYmKHcubGFzdE1vZGlmaWVkW29dPVQpLChUPUUuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpKSYmKHcuZXRhZ1tvXT1UKSksMjA0PT09dHx8XCJIRUFEXCI9PT1oLnR5cGU/Qz1cIm5vY29udGVudFwiOjMwND09PXQ/Qz1cIm5vdG1vZGlmaWVkXCI6KEM9Yi5zdGF0ZSxwPWIuZGF0YSxsPSEoZD1iLmVycm9yKSkpOihkPUMsIXQmJkN8fChDPVwiZXJyb3JcIix0PDAmJih0PTApKSksRS5zdGF0dXM9dCxFLnN0YXR1c1RleHQ9KG58fEMpK1wiXCIsbD92LnJlc29sdmVXaXRoKGcsW3AsQyxFXSk6di5yZWplY3RXaXRoKGcsW0UsQyxkXSksRS5zdGF0dXNDb2RlKHgpLHg9dm9pZCAwLGYmJnkudHJpZ2dlcihsP1wiYWpheFN1Y2Nlc3NcIjpcImFqYXhFcnJvclwiLFtFLGgsbD9wOmRdKSxtLmZpcmVXaXRoKGcsW0UsQ10pLGYmJih5LnRyaWdnZXIoXCJhamF4Q29tcGxldGVcIixbRSxoXSksLS13LmFjdGl2ZXx8dy5ldmVudC50cmlnZ2VyKFwiYWpheFN0b3BcIikpKX1yZXR1cm4gRX0sZ2V0SlNPTjpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHcuZ2V0KGUsdCxuLFwianNvblwiKX0sZ2V0U2NyaXB0OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHcuZ2V0KGUsdm9pZCAwLHQsXCJzY3JpcHRcIil9fSksdy5lYWNoKFtcImdldFwiLFwicG9zdFwiXSxmdW5jdGlvbihlLHQpe3dbdF09ZnVuY3Rpb24oZSxuLHIsaSl7cmV0dXJuIGcobikmJihpPWl8fHIscj1uLG49dm9pZCAwKSx3LmFqYXgody5leHRlbmQoe3VybDplLHR5cGU6dCxkYXRhVHlwZTppLGRhdGE6bixzdWNjZXNzOnJ9LHcuaXNQbGFpbk9iamVjdChlKSYmZSkpfX0pLHcuX2V2YWxVcmw9ZnVuY3Rpb24oZSl7cmV0dXJuIHcuYWpheCh7dXJsOmUsdHlwZTpcIkdFVFwiLGRhdGFUeXBlOlwic2NyaXB0XCIsY2FjaGU6ITAsYXN5bmM6ITEsZ2xvYmFsOiExLFwidGhyb3dzXCI6ITB9KX0sdy5mbi5leHRlbmQoe3dyYXBBbGw6ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIHRoaXNbMF0mJihnKGUpJiYoZT1lLmNhbGwodGhpc1swXSkpLHQ9dyhlLHRoaXNbMF0ub3duZXJEb2N1bWVudCkuZXEoMCkuY2xvbmUoITApLHRoaXNbMF0ucGFyZW50Tm9kZSYmdC5pbnNlcnRCZWZvcmUodGhpc1swXSksdC5tYXAoZnVuY3Rpb24oKXt2YXIgZT10aGlzO3doaWxlKGUuZmlyc3RFbGVtZW50Q2hpbGQpZT1lLmZpcnN0RWxlbWVudENoaWxkO3JldHVybiBlfSkuYXBwZW5kKHRoaXMpKSx0aGlzfSx3cmFwSW5uZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGcoZSk/dGhpcy5lYWNoKGZ1bmN0aW9uKHQpe3codGhpcykud3JhcElubmVyKGUuY2FsbCh0aGlzLHQpKX0pOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PXcodGhpcyksbj10LmNvbnRlbnRzKCk7bi5sZW5ndGg/bi53cmFwQWxsKGUpOnQuYXBwZW5kKGUpfSl9LHdyYXA6ZnVuY3Rpb24oZSl7dmFyIHQ9ZyhlKTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKG4pe3codGhpcykud3JhcEFsbCh0P2UuY2FsbCh0aGlzLG4pOmUpfSl9LHVud3JhcDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5wYXJlbnQoZSkubm90KFwiYm9keVwiKS5lYWNoKGZ1bmN0aW9uKCl7dyh0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpfSksdGhpc319KSx3LmV4cHIucHNldWRvcy5oaWRkZW49ZnVuY3Rpb24oZSl7cmV0dXJuIXcuZXhwci5wc2V1ZG9zLnZpc2libGUoZSl9LHcuZXhwci5wc2V1ZG9zLnZpc2libGU9ZnVuY3Rpb24oZSl7cmV0dXJuISEoZS5vZmZzZXRXaWR0aHx8ZS5vZmZzZXRIZWlnaHR8fGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpfSx3LmFqYXhTZXR0aW5ncy54aHI9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIG5ldyBlLlhNTEh0dHBSZXF1ZXN0fWNhdGNoKGUpe319O3ZhciBWdD17MDoyMDAsMTIyMzoyMDR9LEd0PXcuYWpheFNldHRpbmdzLnhocigpO2guY29ycz0hIUd0JiZcIndpdGhDcmVkZW50aWFsc1wiaW4gR3QsaC5hamF4PUd0PSEhR3Qsdy5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKHQpe3ZhciBuLHI7aWYoaC5jb3JzfHxHdCYmIXQuY3Jvc3NEb21haW4pcmV0dXJue3NlbmQ6ZnVuY3Rpb24oaSxvKXt2YXIgYSxzPXQueGhyKCk7aWYocy5vcGVuKHQudHlwZSx0LnVybCx0LmFzeW5jLHQudXNlcm5hbWUsdC5wYXNzd29yZCksdC54aHJGaWVsZHMpZm9yKGEgaW4gdC54aHJGaWVsZHMpc1thXT10LnhockZpZWxkc1thXTt0Lm1pbWVUeXBlJiZzLm92ZXJyaWRlTWltZVR5cGUmJnMub3ZlcnJpZGVNaW1lVHlwZSh0Lm1pbWVUeXBlKSx0LmNyb3NzRG9tYWlufHxpW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXXx8KGlbXCJYLVJlcXVlc3RlZC1XaXRoXCJdPVwiWE1MSHR0cFJlcXVlc3RcIik7Zm9yKGEgaW4gaSlzLnNldFJlcXVlc3RIZWFkZXIoYSxpW2FdKTtuPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe24mJihuPXI9cy5vbmxvYWQ9cy5vbmVycm9yPXMub25hYm9ydD1zLm9udGltZW91dD1zLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLFwiYWJvcnRcIj09PWU/cy5hYm9ydCgpOlwiZXJyb3JcIj09PWU/XCJudW1iZXJcIiE9dHlwZW9mIHMuc3RhdHVzP28oMCxcImVycm9yXCIpOm8ocy5zdGF0dXMscy5zdGF0dXNUZXh0KTpvKFZ0W3Muc3RhdHVzXXx8cy5zdGF0dXMscy5zdGF0dXNUZXh0LFwidGV4dFwiIT09KHMucmVzcG9uc2VUeXBlfHxcInRleHRcIil8fFwic3RyaW5nXCIhPXR5cGVvZiBzLnJlc3BvbnNlVGV4dD97YmluYXJ5OnMucmVzcG9uc2V9Ont0ZXh0OnMucmVzcG9uc2VUZXh0fSxzLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSl9fSxzLm9ubG9hZD1uKCkscj1zLm9uZXJyb3I9cy5vbnRpbWVvdXQ9bihcImVycm9yXCIpLHZvaWQgMCE9PXMub25hYm9ydD9zLm9uYWJvcnQ9cjpzLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpezQ9PT1zLnJlYWR5U3RhdGUmJmUuc2V0VGltZW91dChmdW5jdGlvbigpe24mJnIoKX0pfSxuPW4oXCJhYm9ydFwiKTt0cnl7cy5zZW5kKHQuaGFzQ29udGVudCYmdC5kYXRhfHxudWxsKX1jYXRjaChlKXtpZihuKXRocm93IGV9fSxhYm9ydDpmdW5jdGlvbigpe24mJm4oKX19fSksdy5hamF4UHJlZmlsdGVyKGZ1bmN0aW9uKGUpe2UuY3Jvc3NEb21haW4mJihlLmNvbnRlbnRzLnNjcmlwdD0hMSl9KSx3LmFqYXhTZXR1cCh7YWNjZXB0czp7c2NyaXB0OlwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIn0sY29udGVudHM6e3NjcmlwdDovXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi99LGNvbnZlcnRlcnM6e1widGV4dCBzY3JpcHRcIjpmdW5jdGlvbihlKXtyZXR1cm4gdy5nbG9iYWxFdmFsKGUpLGV9fX0pLHcuYWpheFByZWZpbHRlcihcInNjcmlwdFwiLGZ1bmN0aW9uKGUpe3ZvaWQgMD09PWUuY2FjaGUmJihlLmNhY2hlPSExKSxlLmNyb3NzRG9tYWluJiYoZS50eXBlPVwiR0VUXCIpfSksdy5hamF4VHJhbnNwb3J0KFwic2NyaXB0XCIsZnVuY3Rpb24oZSl7aWYoZS5jcm9zc0RvbWFpbil7dmFyIHQsbjtyZXR1cm57c2VuZDpmdW5jdGlvbihpLG8pe3Q9dyhcIjxzY3JpcHQ+XCIpLnByb3Aoe2NoYXJzZXQ6ZS5zY3JpcHRDaGFyc2V0LHNyYzplLnVybH0pLm9uKFwibG9hZCBlcnJvclwiLG49ZnVuY3Rpb24oZSl7dC5yZW1vdmUoKSxuPW51bGwsZSYmbyhcImVycm9yXCI9PT1lLnR5cGU/NDA0OjIwMCxlLnR5cGUpfSksci5oZWFkLmFwcGVuZENoaWxkKHRbMF0pfSxhYm9ydDpmdW5jdGlvbigpe24mJm4oKX19fX0pO3ZhciBZdD1bXSxRdD0vKD0pXFw/KD89JnwkKXxcXD9cXD8vO3cuYWpheFNldHVwKHtqc29ucDpcImNhbGxiYWNrXCIsanNvbnBDYWxsYmFjazpmdW5jdGlvbigpe3ZhciBlPVl0LnBvcCgpfHx3LmV4cGFuZG8rXCJfXCIrRXQrKztyZXR1cm4gdGhpc1tlXT0hMCxlfX0pLHcuYWpheFByZWZpbHRlcihcImpzb24ganNvbnBcIixmdW5jdGlvbih0LG4scil7dmFyIGksbyxhLHM9ITEhPT10Lmpzb25wJiYoUXQudGVzdCh0LnVybCk/XCJ1cmxcIjpcInN0cmluZ1wiPT10eXBlb2YgdC5kYXRhJiYwPT09KHQuY29udGVudFR5cGV8fFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikmJlF0LnRlc3QodC5kYXRhKSYmXCJkYXRhXCIpO2lmKHN8fFwianNvbnBcIj09PXQuZGF0YVR5cGVzWzBdKXJldHVybiBpPXQuanNvbnBDYWxsYmFjaz1nKHQuanNvbnBDYWxsYmFjayk/dC5qc29ucENhbGxiYWNrKCk6dC5qc29ucENhbGxiYWNrLHM/dFtzXT10W3NdLnJlcGxhY2UoUXQsXCIkMVwiK2kpOiExIT09dC5qc29ucCYmKHQudXJsKz0oa3QudGVzdCh0LnVybCk/XCImXCI6XCI/XCIpK3QuanNvbnArXCI9XCIraSksdC5jb252ZXJ0ZXJzW1wic2NyaXB0IGpzb25cIl09ZnVuY3Rpb24oKXtyZXR1cm4gYXx8dy5lcnJvcihpK1wiIHdhcyBub3QgY2FsbGVkXCIpLGFbMF19LHQuZGF0YVR5cGVzWzBdPVwianNvblwiLG89ZVtpXSxlW2ldPWZ1bmN0aW9uKCl7YT1hcmd1bWVudHN9LHIuYWx3YXlzKGZ1bmN0aW9uKCl7dm9pZCAwPT09bz93KGUpLnJlbW92ZVByb3AoaSk6ZVtpXT1vLHRbaV0mJih0Lmpzb25wQ2FsbGJhY2s9bi5qc29ucENhbGxiYWNrLFl0LnB1c2goaSkpLGEmJmcobykmJm8oYVswXSksYT1vPXZvaWQgMH0pLFwic2NyaXB0XCJ9KSxoLmNyZWF0ZUhUTUxEb2N1bWVudD1mdW5jdGlvbigpe3ZhciBlPXIuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpLmJvZHk7cmV0dXJuIGUuaW5uZXJIVE1MPVwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIiwyPT09ZS5jaGlsZE5vZGVzLmxlbmd0aH0oKSx3LnBhcnNlSFRNTD1mdW5jdGlvbihlLHQsbil7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuW107XCJib29sZWFuXCI9PXR5cGVvZiB0JiYobj10LHQ9ITEpO3ZhciBpLG8sYTtyZXR1cm4gdHx8KGguY3JlYXRlSFRNTERvY3VtZW50PygoaT0odD1yLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKSkuY3JlYXRlRWxlbWVudChcImJhc2VcIikpLmhyZWY9ci5sb2NhdGlvbi5ocmVmLHQuaGVhZC5hcHBlbmRDaGlsZChpKSk6dD1yKSxvPUEuZXhlYyhlKSxhPSFuJiZbXSxvP1t0LmNyZWF0ZUVsZW1lbnQob1sxXSldOihvPXhlKFtlXSx0LGEpLGEmJmEubGVuZ3RoJiZ3KGEpLnJlbW92ZSgpLHcubWVyZ2UoW10sby5jaGlsZE5vZGVzKSl9LHcuZm4ubG9hZD1mdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGE9dGhpcyxzPWUuaW5kZXhPZihcIiBcIik7cmV0dXJuIHM+LTEmJihyPXZ0KGUuc2xpY2UocykpLGU9ZS5zbGljZSgwLHMpKSxnKHQpPyhuPXQsdD12b2lkIDApOnQmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiYoaT1cIlBPU1RcIiksYS5sZW5ndGg+MCYmdy5hamF4KHt1cmw6ZSx0eXBlOml8fFwiR0VUXCIsZGF0YVR5cGU6XCJodG1sXCIsZGF0YTp0fSkuZG9uZShmdW5jdGlvbihlKXtvPWFyZ3VtZW50cyxhLmh0bWwocj93KFwiPGRpdj5cIikuYXBwZW5kKHcucGFyc2VIVE1MKGUpKS5maW5kKHIpOmUpfSkuYWx3YXlzKG4mJmZ1bmN0aW9uKGUsdCl7YS5lYWNoKGZ1bmN0aW9uKCl7bi5hcHBseSh0aGlzLG98fFtlLnJlc3BvbnNlVGV4dCx0LGVdKX0pfSksdGhpc30sdy5lYWNoKFtcImFqYXhTdGFydFwiLFwiYWpheFN0b3BcIixcImFqYXhDb21wbGV0ZVwiLFwiYWpheEVycm9yXCIsXCJhamF4U3VjY2Vzc1wiLFwiYWpheFNlbmRcIl0sZnVuY3Rpb24oZSx0KXt3LmZuW3RdPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLm9uKHQsZSl9fSksdy5leHByLnBzZXVkb3MuYW5pbWF0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHcuZ3JlcCh3LnRpbWVycyxmdW5jdGlvbih0KXtyZXR1cm4gZT09PXQuZWxlbX0pLmxlbmd0aH0sdy5vZmZzZXQ9e3NldE9mZnNldDpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGEscyx1LGwsYz13LmNzcyhlLFwicG9zaXRpb25cIiksZj13KGUpLHA9e307XCJzdGF0aWNcIj09PWMmJihlLnN0eWxlLnBvc2l0aW9uPVwicmVsYXRpdmVcIikscz1mLm9mZnNldCgpLG89dy5jc3MoZSxcInRvcFwiKSx1PXcuY3NzKGUsXCJsZWZ0XCIpLChsPShcImFic29sdXRlXCI9PT1jfHxcImZpeGVkXCI9PT1jKSYmKG8rdSkuaW5kZXhPZihcImF1dG9cIik+LTEpPyhhPShyPWYucG9zaXRpb24oKSkudG9wLGk9ci5sZWZ0KTooYT1wYXJzZUZsb2F0KG8pfHwwLGk9cGFyc2VGbG9hdCh1KXx8MCksZyh0KSYmKHQ9dC5jYWxsKGUsbix3LmV4dGVuZCh7fSxzKSkpLG51bGwhPXQudG9wJiYocC50b3A9dC50b3Atcy50b3ArYSksbnVsbCE9dC5sZWZ0JiYocC5sZWZ0PXQubGVmdC1zLmxlZnQraSksXCJ1c2luZ1wiaW4gdD90LnVzaW5nLmNhbGwoZSxwKTpmLmNzcyhwKX19LHcuZm4uZXh0ZW5kKHtvZmZzZXQ6ZnVuY3Rpb24oZSl7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdm9pZCAwPT09ZT90aGlzOnRoaXMuZWFjaChmdW5jdGlvbih0KXt3Lm9mZnNldC5zZXRPZmZzZXQodGhpcyxlLHQpfSk7dmFyIHQsbixyPXRoaXNbMF07aWYocilyZXR1cm4gci5nZXRDbGllbnRSZWN0cygpLmxlbmd0aD8odD1yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG49ci5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LHt0b3A6dC50b3Arbi5wYWdlWU9mZnNldCxsZWZ0OnQubGVmdCtuLnBhZ2VYT2Zmc2V0fSk6e3RvcDowLGxlZnQ6MH19LHBvc2l0aW9uOmZ1bmN0aW9uKCl7aWYodGhpc1swXSl7dmFyIGUsdCxuLHI9dGhpc1swXSxpPXt0b3A6MCxsZWZ0OjB9O2lmKFwiZml4ZWRcIj09PXcuY3NzKHIsXCJwb3NpdGlvblwiKSl0PXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7ZWxzZXt0PXRoaXMub2Zmc2V0KCksbj1yLm93bmVyRG9jdW1lbnQsZT1yLm9mZnNldFBhcmVudHx8bi5kb2N1bWVudEVsZW1lbnQ7d2hpbGUoZSYmKGU9PT1uLmJvZHl8fGU9PT1uLmRvY3VtZW50RWxlbWVudCkmJlwic3RhdGljXCI9PT13LmNzcyhlLFwicG9zaXRpb25cIikpZT1lLnBhcmVudE5vZGU7ZSYmZSE9PXImJjE9PT1lLm5vZGVUeXBlJiYoKGk9dyhlKS5vZmZzZXQoKSkudG9wKz13LmNzcyhlLFwiYm9yZGVyVG9wV2lkdGhcIiwhMCksaS5sZWZ0Kz13LmNzcyhlLFwiYm9yZGVyTGVmdFdpZHRoXCIsITApKX1yZXR1cm57dG9wOnQudG9wLWkudG9wLXcuY3NzKHIsXCJtYXJnaW5Ub3BcIiwhMCksbGVmdDp0LmxlZnQtaS5sZWZ0LXcuY3NzKHIsXCJtYXJnaW5MZWZ0XCIsITApfX19LG9mZnNldFBhcmVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbigpe3ZhciBlPXRoaXMub2Zmc2V0UGFyZW50O3doaWxlKGUmJlwic3RhdGljXCI9PT13LmNzcyhlLFwicG9zaXRpb25cIikpZT1lLm9mZnNldFBhcmVudDtyZXR1cm4gZXx8YmV9KX19KSx3LmVhY2goe3Njcm9sbExlZnQ6XCJwYWdlWE9mZnNldFwiLHNjcm9sbFRvcDpcInBhZ2VZT2Zmc2V0XCJ9LGZ1bmN0aW9uKGUsdCl7dmFyIG49XCJwYWdlWU9mZnNldFwiPT09dDt3LmZuW2VdPWZ1bmN0aW9uKHIpe3JldHVybiB6KHRoaXMsZnVuY3Rpb24oZSxyLGkpe3ZhciBvO2lmKHkoZSk/bz1lOjk9PT1lLm5vZGVUeXBlJiYobz1lLmRlZmF1bHRWaWV3KSx2b2lkIDA9PT1pKXJldHVybiBvP29bdF06ZVtyXTtvP28uc2Nyb2xsVG8obj9vLnBhZ2VYT2Zmc2V0Omksbj9pOm8ucGFnZVlPZmZzZXQpOmVbcl09aX0sZSxyLGFyZ3VtZW50cy5sZW5ndGgpfX0pLHcuZWFjaChbXCJ0b3BcIixcImxlZnRcIl0sZnVuY3Rpb24oZSx0KXt3LmNzc0hvb2tzW3RdPV9lKGgucGl4ZWxQb3NpdGlvbixmdW5jdGlvbihlLG4pe2lmKG4pcmV0dXJuIG49RmUoZSx0KSxXZS50ZXN0KG4pP3coZSkucG9zaXRpb24oKVt0XStcInB4XCI6bn0pfSksdy5lYWNoKHtIZWlnaHQ6XCJoZWlnaHRcIixXaWR0aDpcIndpZHRoXCJ9LGZ1bmN0aW9uKGUsdCl7dy5lYWNoKHtwYWRkaW5nOlwiaW5uZXJcIitlLGNvbnRlbnQ6dCxcIlwiOlwib3V0ZXJcIitlfSxmdW5jdGlvbihuLHIpe3cuZm5bcl09ZnVuY3Rpb24oaSxvKXt2YXIgYT1hcmd1bWVudHMubGVuZ3RoJiYobnx8XCJib29sZWFuXCIhPXR5cGVvZiBpKSxzPW58fCghMD09PWl8fCEwPT09bz9cIm1hcmdpblwiOlwiYm9yZGVyXCIpO3JldHVybiB6KHRoaXMsZnVuY3Rpb24odCxuLGkpe3ZhciBvO3JldHVybiB5KHQpPzA9PT1yLmluZGV4T2YoXCJvdXRlclwiKT90W1wiaW5uZXJcIitlXTp0LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFtcImNsaWVudFwiK2VdOjk9PT10Lm5vZGVUeXBlPyhvPXQuZG9jdW1lbnRFbGVtZW50LE1hdGgubWF4KHQuYm9keVtcInNjcm9sbFwiK2VdLG9bXCJzY3JvbGxcIitlXSx0LmJvZHlbXCJvZmZzZXRcIitlXSxvW1wib2Zmc2V0XCIrZV0sb1tcImNsaWVudFwiK2VdKSk6dm9pZCAwPT09aT93LmNzcyh0LG4scyk6dy5zdHlsZSh0LG4saSxzKX0sdCxhP2k6dm9pZCAwLGEpfX0pfSksdy5lYWNoKFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihlLHQpe3cuZm5bdF09ZnVuY3Rpb24oZSxuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD4wP3RoaXMub24odCxudWxsLGUsbik6dGhpcy50cmlnZ2VyKHQpfX0pLHcuZm4uZXh0ZW5kKHtob3ZlcjpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm1vdXNlZW50ZXIoZSkubW91c2VsZWF2ZSh0fHxlKX19KSx3LmZuLmV4dGVuZCh7YmluZDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHRoaXMub24oZSxudWxsLHQsbil9LHVuYmluZDpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm9mZihlLG51bGwsdCl9LGRlbGVnYXRlOmZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiB0aGlzLm9uKHQsZSxuLHIpfSx1bmRlbGVnYXRlOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gMT09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5vZmYoZSxcIioqXCIpOnRoaXMub2ZmKHQsZXx8XCIqKlwiLG4pfX0pLHcucHJveHk9ZnVuY3Rpb24oZSx0KXt2YXIgbixyLGk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQmJihuPWVbdF0sdD1lLGU9biksZyhlKSlyZXR1cm4gcj1vLmNhbGwoYXJndW1lbnRzLDIpLGk9ZnVuY3Rpb24oKXtyZXR1cm4gZS5hcHBseSh0fHx0aGlzLHIuY29uY2F0KG8uY2FsbChhcmd1bWVudHMpKSl9LGkuZ3VpZD1lLmd1aWQ9ZS5ndWlkfHx3Lmd1aWQrKyxpfSx3LmhvbGRSZWFkeT1mdW5jdGlvbihlKXtlP3cucmVhZHlXYWl0Kys6dy5yZWFkeSghMCl9LHcuaXNBcnJheT1BcnJheS5pc0FycmF5LHcucGFyc2VKU09OPUpTT04ucGFyc2Usdy5ub2RlTmFtZT1OLHcuaXNGdW5jdGlvbj1nLHcuaXNXaW5kb3c9eSx3LmNhbWVsQ2FzZT1HLHcudHlwZT14LHcubm93PURhdGUubm93LHcuaXNOdW1lcmljPWZ1bmN0aW9uKGUpe3ZhciB0PXcudHlwZShlKTtyZXR1cm4oXCJudW1iZXJcIj09PXR8fFwic3RyaW5nXCI9PT10KSYmIWlzTmFOKGUtcGFyc2VGbG9hdChlKSl9LFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZCYmZGVmaW5lKFwianF1ZXJ5XCIsW10sZnVuY3Rpb24oKXtyZXR1cm4gd30pO3ZhciBKdD1lLmpRdWVyeSxLdD1lLiQ7cmV0dXJuIHcubm9Db25mbGljdD1mdW5jdGlvbih0KXtyZXR1cm4gZS4kPT09dyYmKGUuJD1LdCksdCYmZS5qUXVlcnk9PT13JiYoZS5qUXVlcnk9SnQpLHd9LHR8fChlLmpRdWVyeT1lLiQ9dyksd30pO1xuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50byArIFwiIFwiICsgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsIi8qIGdsb2JhbHMgX193ZWJwYWNrX2FtZF9vcHRpb25zX18gKi9cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwidmFyIGd1aWQgPSByZXF1aXJlKFwiLi9jb3JlL2d1aWRcIik7XG5cbnZhciBFdmVudGZ1bCA9IHJlcXVpcmUoXCIuL21peGluL0V2ZW50ZnVsXCIpO1xuXG52YXIgVHJhbnNmb3JtYWJsZSA9IHJlcXVpcmUoXCIuL21peGluL1RyYW5zZm9ybWFibGVcIik7XG5cbnZhciBBbmltYXRhYmxlID0gcmVxdWlyZShcIi4vbWl4aW4vQW5pbWF0YWJsZVwiKTtcblxudmFyIHpyVXRpbCA9IHJlcXVpcmUoXCIuL2NvcmUvdXRpbFwiKTtcblxuLyoqXG4gKiBAYWxpYXMgbW9kdWxlOnpyZW5kZXIvRWxlbWVudFxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyB7bW9kdWxlOnpyZW5kZXIvbWl4aW4vQW5pbWF0YWJsZX1cbiAqIEBleHRlbmRzIHttb2R1bGU6enJlbmRlci9taXhpbi9UcmFuc2Zvcm1hYmxlfVxuICogQGV4dGVuZHMge21vZHVsZTp6cmVuZGVyL21peGluL0V2ZW50ZnVsfVxuICovXG52YXIgRWxlbWVudCA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIC8vIGpzaGludCBpZ25vcmU6bGluZVxuICBUcmFuc2Zvcm1hYmxlLmNhbGwodGhpcywgb3B0cyk7XG4gIEV2ZW50ZnVsLmNhbGwodGhpcywgb3B0cyk7XG4gIEFuaW1hdGFibGUuY2FsbCh0aGlzLCBvcHRzKTtcbiAgLyoqXG4gICAqIOeUu+W4g+WFg+e0oElEXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuXG4gIHRoaXMuaWQgPSBvcHRzLmlkIHx8IGd1aWQoKTtcbn07XG5cbkVsZW1lbnQucHJvdG90eXBlID0ge1xuICAvKipcbiAgICog5YWD57Sg57G75Z6LXG4gICAqIEVsZW1lbnQgdHlwZVxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdHlwZTogJ2VsZW1lbnQnLFxuXG4gIC8qKlxuICAgKiDlhYPntKDlkI3lrZdcbiAgICogRWxlbWVudCBuYW1lXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBuYW1lOiAnJyxcblxuICAvKipcbiAgICogWlJlbmRlciDlrp7kvovlr7nosaHvvIzkvJrlnKggZWxlbWVudCDmt7vliqDliLAgenJlbmRlciDlrp7kvovkuK3lkI7oh6rliqjotYvlgLxcbiAgICogWlJlbmRlciBpbnN0YW5jZSB3aWxsIGJlIGFzc2lnbmVkIHdoZW4gZWxlbWVudCBpcyBhc3NvY2lhdGVkIHdpdGggenJlbmRlclxuICAgKiBAbmFtZSBtb2R1bGU6L3pyZW5kZXIvRWxlbWVudCNfX3pyXG4gICAqIEB0eXBlIHttb2R1bGU6enJlbmRlci9aUmVuZGVyfVxuICAgKi9cbiAgX196cjogbnVsbCxcblxuICAvKipcbiAgICog5Zu+5b2i5piv5ZCm5b+955Wl77yM5Li6dHJ1ZeaXtuW/veeVpeWbvuW9oueahOe7mOWItuS7peWPiuS6i+S7tuinpuWPkVxuICAgKiBJZiBpZ25vcmUgZHJhd2luZyBhbmQgZXZlbnRzIG9mIHRoZSBlbGVtZW50IG9iamVjdFxuICAgKiBAbmFtZSBtb2R1bGU6L3pyZW5kZXIvRWxlbWVudCNpZ25vcmVcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpZ25vcmU6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiDnlKjkuo7oo4HliarnmoTot6/lvoQoc2hhcGUp77yM5omA5pyJIEdyb3VwIOWGheeahOi3r+W+hOWcqOe7mOWItuaXtumDveS8muiiq+i/meS4qui3r+W+hOijgeWJqlxuICAgKiDor6Xot6/lvoTkvJrnu6fmib/ooqvoo4Hlh4/lr7nosaHnmoTlj5jmjaJcbiAgICogQHR5cGUge21vZHVsZTp6cmVuZGVyL2dyYXBoaWMvUGF0aH1cbiAgICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yZGNvbnRleHQvI2NsaXBwaW5nLXJlZ2lvblxuICAgKiBAcmVhZE9ubHlcbiAgICovXG4gIGNsaXBQYXRoOiBudWxsLFxuXG4gIC8qKlxuICAgKiDmmK/lkKbmmK8gR3JvdXBcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBpc0dyb3VwOiBmYWxzZSxcblxuICAvKipcbiAgICogRHJpZnQgZWxlbWVudFxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IGR4IGR4IG9uIHRoZSBnbG9iYWwgc3BhY2VcbiAgICogQHBhcmFtICB7bnVtYmVyfSBkeSBkeSBvbiB0aGUgZ2xvYmFsIHNwYWNlXG4gICAqL1xuICBkcmlmdDogZnVuY3Rpb24gKGR4LCBkeSkge1xuICAgIHN3aXRjaCAodGhpcy5kcmFnZ2FibGUpIHtcbiAgICAgIGNhc2UgJ2hvcml6b250YWwnOlxuICAgICAgICBkeSA9IDA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICd2ZXJ0aWNhbCc6XG4gICAgICAgIGR4ID0gMDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgdmFyIG0gPSB0aGlzLnRyYW5zZm9ybTtcblxuICAgIGlmICghbSkge1xuICAgICAgbSA9IHRoaXMudHJhbnNmb3JtID0gWzEsIDAsIDAsIDEsIDAsIDBdO1xuICAgIH1cblxuICAgIG1bNF0gKz0gZHg7XG4gICAgbVs1XSArPSBkeTtcbiAgICB0aGlzLmRlY29tcG9zZVRyYW5zZm9ybSgpO1xuICAgIHRoaXMuZGlydHkoZmFsc2UpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBIb29rIGJlZm9yZSB1cGRhdGVcbiAgICovXG4gIGJlZm9yZVVwZGF0ZTogZnVuY3Rpb24gKCkge30sXG5cbiAgLyoqXG4gICAqIEhvb2sgYWZ0ZXIgdXBkYXRlXG4gICAqL1xuICBhZnRlclVwZGF0ZTogZnVuY3Rpb24gKCkge30sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBlYWNoIGZyYW1lXG4gICAqL1xuICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnVwZGF0ZVRyYW5zZm9ybSgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2JcbiAgICogQHBhcmFtICB7fSAgIGNvbnRleHRcbiAgICovXG4gIHRyYXZlcnNlOiBmdW5jdGlvbiAoY2IsIGNvbnRleHQpIHt9LFxuXG4gIC8qKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBhdHRyS1Y6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSA9PT0gJ3Bvc2l0aW9uJyB8fCBrZXkgPT09ICdzY2FsZScgfHwga2V5ID09PSAnb3JpZ2luJykge1xuICAgICAgLy8gQ29weSB0aGUgYXJyYXlcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpc1trZXldO1xuXG4gICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgdGFyZ2V0ID0gdGhpc1trZXldID0gW107XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXRbMF0gPSB2YWx1ZVswXTtcbiAgICAgICAgdGFyZ2V0WzFdID0gdmFsdWVbMV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogSGlkZSB0aGUgZWxlbWVudFxuICAgKi9cbiAgaGlkZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaWdub3JlID0gdHJ1ZTtcbiAgICB0aGlzLl9fenIgJiYgdGhpcy5fX3pyLnJlZnJlc2goKTtcbiAgfSxcblxuICAvKipcbiAgICogU2hvdyB0aGUgZWxlbWVudFxuICAgKi9cbiAgc2hvdzogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaWdub3JlID0gZmFsc2U7XG4gICAgdGhpcy5fX3pyICYmIHRoaXMuX196ci5yZWZyZXNoKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0ga2V5XG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICovXG4gIGF0dHI6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmF0dHJLVihrZXksIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHpyVXRpbC5pc09iamVjdChrZXkpKSB7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIGtleSkge1xuICAgICAgICBpZiAoa2V5Lmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgdGhpcy5hdHRyS1YobmFtZSwga2V5W25hbWVdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZGlydHkoZmFsc2UpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge21vZHVsZTp6cmVuZGVyL2dyYXBoaWMvUGF0aH0gY2xpcFBhdGhcbiAgICovXG4gIHNldENsaXBQYXRoOiBmdW5jdGlvbiAoY2xpcFBhdGgpIHtcbiAgICB2YXIgenIgPSB0aGlzLl9fenI7XG5cbiAgICBpZiAoenIpIHtcbiAgICAgIGNsaXBQYXRoLmFkZFNlbGZUb1pyKHpyKTtcbiAgICB9IC8vIFJlbW92ZSBwcmV2aW91cyBjbGlwIHBhdGhcblxuXG4gICAgaWYgKHRoaXMuY2xpcFBhdGggJiYgdGhpcy5jbGlwUGF0aCAhPT0gY2xpcFBhdGgpIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2xpcFBhdGgoKTtcbiAgICB9XG5cbiAgICB0aGlzLmNsaXBQYXRoID0gY2xpcFBhdGg7XG4gICAgY2xpcFBhdGguX196ciA9IHpyO1xuICAgIGNsaXBQYXRoLl9fY2xpcFRhcmdldCA9IHRoaXM7XG4gICAgdGhpcy5kaXJ0eShmYWxzZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqL1xuICByZW1vdmVDbGlwUGF0aDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBjbGlwUGF0aCA9IHRoaXMuY2xpcFBhdGg7XG5cbiAgICBpZiAoY2xpcFBhdGgpIHtcbiAgICAgIGlmIChjbGlwUGF0aC5fX3pyKSB7XG4gICAgICAgIGNsaXBQYXRoLnJlbW92ZVNlbGZGcm9tWnIoY2xpcFBhdGguX196cik7XG4gICAgICB9XG5cbiAgICAgIGNsaXBQYXRoLl9fenIgPSBudWxsO1xuICAgICAgY2xpcFBhdGguX19jbGlwVGFyZ2V0ID0gbnVsbDtcbiAgICAgIHRoaXMuY2xpcFBhdGggPSBudWxsO1xuICAgICAgdGhpcy5kaXJ0eShmYWxzZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBBZGQgc2VsZiBmcm9tIHpyZW5kZXIgaW5zdGFuY2UuXG4gICAqIE5vdCByZWN1cnNpdmVseSBiZWNhdXNlIGl0IHdpbGwgYmUgaW52b2tlZCB3aGVuIGVsZW1lbnQgYWRkZWQgdG8gc3RvcmFnZS5cbiAgICogQHBhcmFtIHttb2R1bGU6enJlbmRlci9aUmVuZGVyfSB6clxuICAgKi9cbiAgYWRkU2VsZlRvWnI6IGZ1bmN0aW9uICh6cikge1xuICAgIHRoaXMuX196ciA9IHpyOyAvLyDmt7vliqDliqjnlLtcblxuICAgIHZhciBhbmltYXRvcnMgPSB0aGlzLmFuaW1hdG9ycztcblxuICAgIGlmIChhbmltYXRvcnMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYW5pbWF0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHpyLmFuaW1hdGlvbi5hZGRBbmltYXRvcihhbmltYXRvcnNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmNsaXBQYXRoKSB7XG4gICAgICB0aGlzLmNsaXBQYXRoLmFkZFNlbGZUb1pyKHpyKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbW92ZSBzZWxmIGZyb20genJlbmRlciBpbnN0YW5jZS5cbiAgICogTm90IHJlY3Vyc2l2ZWx5IGJlY2F1c2UgaXQgd2lsbCBiZSBpbnZva2VkIHdoZW4gZWxlbWVudCBhZGRlZCB0byBzdG9yYWdlLlxuICAgKiBAcGFyYW0ge21vZHVsZTp6cmVuZGVyL1pSZW5kZXJ9IHpyXG4gICAqL1xuICByZW1vdmVTZWxmRnJvbVpyOiBmdW5jdGlvbiAoenIpIHtcbiAgICB0aGlzLl9fenIgPSBudWxsOyAvLyDnp7vpmaTliqjnlLtcblxuICAgIHZhciBhbmltYXRvcnMgPSB0aGlzLmFuaW1hdG9ycztcblxuICAgIGlmIChhbmltYXRvcnMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYW5pbWF0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHpyLmFuaW1hdGlvbi5yZW1vdmVBbmltYXRvcihhbmltYXRvcnNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmNsaXBQYXRoKSB7XG4gICAgICB0aGlzLmNsaXBQYXRoLnJlbW92ZVNlbGZGcm9tWnIoenIpO1xuICAgIH1cbiAgfVxufTtcbnpyVXRpbC5taXhpbihFbGVtZW50LCBBbmltYXRhYmxlKTtcbnpyVXRpbC5taXhpbihFbGVtZW50LCBUcmFuc2Zvcm1hYmxlKTtcbnpyVXRpbC5taXhpbihFbGVtZW50LCBFdmVudGZ1bCk7XG52YXIgX2RlZmF1bHQgPSBFbGVtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgdXRpbCA9IHJlcXVpcmUoXCIuL2NvcmUvdXRpbFwiKTtcblxudmFyIHZlYzIgPSByZXF1aXJlKFwiLi9jb3JlL3ZlY3RvclwiKTtcblxudmFyIERyYWdnYWJsZSA9IHJlcXVpcmUoXCIuL21peGluL0RyYWdnYWJsZVwiKTtcblxudmFyIEV2ZW50ZnVsID0gcmVxdWlyZShcIi4vbWl4aW4vRXZlbnRmdWxcIik7XG5cbnZhciBTSUxFTlQgPSAnc2lsZW50JztcblxuZnVuY3Rpb24gbWFrZUV2ZW50UGFja2V0KGV2ZVR5cGUsIHRhcmdldEluZm8sIGV2ZW50KSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogZXZlVHlwZSxcbiAgICBldmVudDogZXZlbnQsXG4gICAgLy8gdGFyZ2V0IGNhbiBvbmx5IGJlIGFuIGVsZW1lbnQgdGhhdCBpcyBub3Qgc2lsZW50LlxuICAgIHRhcmdldDogdGFyZ2V0SW5mby50YXJnZXQsXG4gICAgLy8gdG9wVGFyZ2V0IGNhbiBiZSBhIHNpbGVudCBlbGVtZW50LlxuICAgIHRvcFRhcmdldDogdGFyZ2V0SW5mby50b3BUYXJnZXQsXG4gICAgY2FuY2VsQnViYmxlOiBmYWxzZSxcbiAgICBvZmZzZXRYOiBldmVudC56clgsXG4gICAgb2Zmc2V0WTogZXZlbnQuenJZLFxuICAgIGdlc3R1cmVFdmVudDogZXZlbnQuZ2VzdHVyZUV2ZW50LFxuICAgIHBpbmNoWDogZXZlbnQucGluY2hYLFxuICAgIHBpbmNoWTogZXZlbnQucGluY2hZLFxuICAgIHBpbmNoU2NhbGU6IGV2ZW50LnBpbmNoU2NhbGUsXG4gICAgd2hlZWxEZWx0YTogZXZlbnQuenJEZWx0YSxcbiAgICB6ckJ5VG91Y2g6IGV2ZW50LnpyQnlUb3VjaCxcbiAgICB3aGljaDogZXZlbnQud2hpY2hcbiAgfTtcbn1cblxuZnVuY3Rpb24gRW1wdHlQcm94eSgpIHt9XG5cbkVtcHR5UHJveHkucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7fTtcblxudmFyIGhhbmRsZXJOYW1lcyA9IFsnY2xpY2snLCAnZGJsY2xpY2snLCAnbW91c2V3aGVlbCcsICdtb3VzZW91dCcsICdtb3VzZXVwJywgJ21vdXNlZG93bicsICdtb3VzZW1vdmUnLCAnY29udGV4dG1lbnUnXTtcbi8qKlxuICogQGFsaWFzIG1vZHVsZTp6cmVuZGVyL0hhbmRsZXJcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgbW9kdWxlOnpyZW5kZXIvbWl4aW4vRXZlbnRmdWxcbiAqIEBwYXJhbSB7bW9kdWxlOnpyZW5kZXIvU3RvcmFnZX0gc3RvcmFnZSBTdG9yYWdlIGluc3RhbmNlLlxuICogQHBhcmFtIHttb2R1bGU6enJlbmRlci9QYWludGVyfSBwYWludGVyIFBhaW50ZXIgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge21vZHVsZTp6cmVuZGVyL2RvbS9IYW5kbGVyUHJveHl9IHByb3h5IEhhbmRsZXJQcm94eSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBhaW50ZXJSb290IHBhaW50ZXIucm9vdCAobm90IHBhaW50ZXIuZ2V0Vmlld3BvcnRSb290KCkpLlxuICovXG5cbnZhciBIYW5kbGVyID0gZnVuY3Rpb24gKHN0b3JhZ2UsIHBhaW50ZXIsIHByb3h5LCBwYWludGVyUm9vdCkge1xuICBFdmVudGZ1bC5jYWxsKHRoaXMpO1xuICB0aGlzLnN0b3JhZ2UgPSBzdG9yYWdlO1xuICB0aGlzLnBhaW50ZXIgPSBwYWludGVyO1xuICB0aGlzLnBhaW50ZXJSb290ID0gcGFpbnRlclJvb3Q7XG4gIHByb3h5ID0gcHJveHkgfHwgbmV3IEVtcHR5UHJveHkoKTtcbiAgLyoqXG4gICAqIFByb3h5IG9mIGV2ZW50LiBjYW4gYmUgRG9tLCBXZWJHTFN1cmZhY2UsIGV0Yy5cbiAgICovXG5cbiAgdGhpcy5wcm94eSA9IG51bGw7XG4gIC8qKlxuICAgKiB7dGFyZ2V0LCB0b3BUYXJnZXQsIHgsIHl9XG4gICAqIEBwcml2YXRlXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuXG4gIHRoaXMuX2hvdmVyZWQgPSB7fTtcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEB0eXBlIHtEYXRlfVxuICAgKi9cblxuICB0aGlzLl9sYXN0VG91Y2hNb21lbnQ7XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cblxuICB0aGlzLl9sYXN0WDtcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG4gIHRoaXMuX2xhc3RZO1xuICBEcmFnZ2FibGUuY2FsbCh0aGlzKTtcbiAgdGhpcy5zZXRIYW5kbGVyUHJveHkocHJveHkpO1xufTtcblxuSGFuZGxlci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBIYW5kbGVyLFxuICBzZXRIYW5kbGVyUHJveHk6IGZ1bmN0aW9uIChwcm94eSkge1xuICAgIGlmICh0aGlzLnByb3h5KSB7XG4gICAgICB0aGlzLnByb3h5LmRpc3Bvc2UoKTtcbiAgICB9XG5cbiAgICBpZiAocHJveHkpIHtcbiAgICAgIHV0aWwuZWFjaChoYW5kbGVyTmFtZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHByb3h5Lm9uICYmIHByb3h5Lm9uKG5hbWUsIHRoaXNbbmFtZV0sIHRoaXMpO1xuICAgICAgfSwgdGhpcyk7IC8vIEF0dGFjaCBoYW5kbGVyXG5cbiAgICAgIHByb3h5LmhhbmRsZXIgPSB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMucHJveHkgPSBwcm94eTtcbiAgfSxcbiAgbW91c2Vtb3ZlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgeCA9IGV2ZW50LnpyWDtcbiAgICB2YXIgeSA9IGV2ZW50LnpyWTtcbiAgICB2YXIgbGFzdEhvdmVyZWQgPSB0aGlzLl9ob3ZlcmVkO1xuICAgIHZhciBsYXN0SG92ZXJlZFRhcmdldCA9IGxhc3RIb3ZlcmVkLnRhcmdldDsgLy8gSWYgbGFzdEhvdmVyZWRUYXJnZXQgaXMgcmVtb3ZlZCBmcm9tIHpyIChkZXRlY3RlZCBieSAnX196cicpIGJ5IHNvbWUgQVBJIGNhbGxcbiAgICAvLyAobGlrZSAnc2V0T3B0aW9uJyBvciAnZGlzcGF0Y2hBY3Rpb24nKSBpbiBldmVudCBoYW5kbGVycywgd2Ugc2hvdWxkIGZpbmRcbiAgICAvLyBsYXN0SG92ZXJlZCBhZ2FpbiBoZXJlLiBPdGhlcndpc2UgJ21vdXNlb3V0JyBjYW4gbm90IGJlIHRyaWdnZXJlZCBub3JtYWxseS5cbiAgICAvLyBTZWUgIzYxOTguXG5cbiAgICBpZiAobGFzdEhvdmVyZWRUYXJnZXQgJiYgIWxhc3RIb3ZlcmVkVGFyZ2V0Ll9fenIpIHtcbiAgICAgIGxhc3RIb3ZlcmVkID0gdGhpcy5maW5kSG92ZXIobGFzdEhvdmVyZWQueCwgbGFzdEhvdmVyZWQueSk7XG4gICAgICBsYXN0SG92ZXJlZFRhcmdldCA9IGxhc3RIb3ZlcmVkLnRhcmdldDtcbiAgICB9XG5cbiAgICB2YXIgaG92ZXJlZCA9IHRoaXMuX2hvdmVyZWQgPSB0aGlzLmZpbmRIb3Zlcih4LCB5KTtcbiAgICB2YXIgaG92ZXJlZFRhcmdldCA9IGhvdmVyZWQudGFyZ2V0O1xuICAgIHZhciBwcm94eSA9IHRoaXMucHJveHk7XG4gICAgcHJveHkuc2V0Q3Vyc29yICYmIHByb3h5LnNldEN1cnNvcihob3ZlcmVkVGFyZ2V0ID8gaG92ZXJlZFRhcmdldC5jdXJzb3IgOiAnZGVmYXVsdCcpOyAvLyBNb3VzZSBvdXQgb24gcHJldmlvdXMgaG92ZXJlZCBlbGVtZW50XG5cbiAgICBpZiAobGFzdEhvdmVyZWRUYXJnZXQgJiYgaG92ZXJlZFRhcmdldCAhPT0gbGFzdEhvdmVyZWRUYXJnZXQpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hUb0VsZW1lbnQobGFzdEhvdmVyZWQsICdtb3VzZW91dCcsIGV2ZW50KTtcbiAgICB9IC8vIE1vdXNlIG1vdmluZyBvbiBvbmUgZWxlbWVudFxuXG5cbiAgICB0aGlzLmRpc3BhdGNoVG9FbGVtZW50KGhvdmVyZWQsICdtb3VzZW1vdmUnLCBldmVudCk7IC8vIE1vdXNlIG92ZXIgb24gYSBuZXcgZWxlbWVudFxuXG4gICAgaWYgKGhvdmVyZWRUYXJnZXQgJiYgaG92ZXJlZFRhcmdldCAhPT0gbGFzdEhvdmVyZWRUYXJnZXQpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hUb0VsZW1lbnQoaG92ZXJlZCwgJ21vdXNlb3ZlcicsIGV2ZW50KTtcbiAgICB9XG4gIH0sXG4gIG1vdXNlb3V0OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB0aGlzLmRpc3BhdGNoVG9FbGVtZW50KHRoaXMuX2hvdmVyZWQsICdtb3VzZW91dCcsIGV2ZW50KTsgLy8gVGhlcmUgbWlnaHQgYmUgc29tZSBkb21zIGNyZWF0ZWQgYnkgdXBwZXIgbGF5ZXIgYXBwbGljYXRpb25cbiAgICAvLyBhdCB0aGUgc2FtZSBsZXZlbCBvZiBwYWludGVyLmdldFZpZXdwb3J0Um9vdCgpIChlLmcuLCB0b29sdGlwXG4gICAgLy8gZG9tIGNyZWF0ZWQgYnkgZWNoYXJ0cyksIHdoZXJlICdnbG9iYWxvdXQnIGV2ZW50IHNob3VsZCBub3RcbiAgICAvLyBiZSB0cmlnZ2VyZWQgd2hlbiBtb3VzZSBlbnRlcnMgdGhlc2UgZG9tcy4gKEJ1dCAnbW91c2VvdXQnXG4gICAgLy8gc2hvdWxkIGJlIHRyaWdnZXJlZCBhdCB0aGUgb3JpZ2luYWwgaG92ZXJlZCBlbGVtZW50IGFzIHVzdWFsKS5cblxuICAgIHZhciBlbGVtZW50ID0gZXZlbnQudG9FbGVtZW50IHx8IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgdmFyIGlubmVyRG9tO1xuXG4gICAgZG8ge1xuICAgICAgZWxlbWVudCA9IGVsZW1lbnQgJiYgZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIH0gd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSAhPSA5ICYmICEoaW5uZXJEb20gPSBlbGVtZW50ID09PSB0aGlzLnBhaW50ZXJSb290KSk7XG5cbiAgICAhaW5uZXJEb20gJiYgdGhpcy50cmlnZ2VyKCdnbG9iYWxvdXQnLCB7XG4gICAgICBldmVudDogZXZlbnRcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogUmVzaXplXG4gICAqL1xuICByZXNpemU6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHRoaXMuX2hvdmVyZWQgPSB7fTtcbiAgfSxcblxuICAvKipcbiAgICogRGlzcGF0Y2ggZXZlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICAgKiBAcGFyYW0ge2V2ZW50PX0gZXZlbnRBcmdzXG4gICAqL1xuICBkaXNwYXRjaDogZnVuY3Rpb24gKGV2ZW50TmFtZSwgZXZlbnRBcmdzKSB7XG4gICAgdmFyIGhhbmRsZXIgPSB0aGlzW2V2ZW50TmFtZV07XG4gICAgaGFuZGxlciAmJiBoYW5kbGVyLmNhbGwodGhpcywgZXZlbnRBcmdzKTtcbiAgfSxcblxuICAvKipcbiAgICogRGlzcG9zZVxuICAgKi9cbiAgZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucHJveHkuZGlzcG9zZSgpO1xuICAgIHRoaXMuc3RvcmFnZSA9IHRoaXMucHJveHkgPSB0aGlzLnBhaW50ZXIgPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiDorr7nva7pu5jorqTnmoRjdXJzb3Igc3R5bGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtjdXJzb3JTdHlsZT0nZGVmYXVsdCddIOS+i+WmgiBjcm9zc2hhaXJcbiAgICovXG4gIHNldEN1cnNvclN0eWxlOiBmdW5jdGlvbiAoY3Vyc29yU3R5bGUpIHtcbiAgICB2YXIgcHJveHkgPSB0aGlzLnByb3h5O1xuICAgIHByb3h5LnNldEN1cnNvciAmJiBwcm94eS5zZXRDdXJzb3IoY3Vyc29yU3R5bGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiDkuovku7bliIblj5Hku6PnkIZcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldEluZm8ge3RhcmdldCwgdG9wVGFyZ2V0fSDnm67moIflm77lvaLlhYPntKBcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSDkuovku7blkI3np7BcbiAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IOS6i+S7tuWvueixoVxuICAgKi9cbiAgZGlzcGF0Y2hUb0VsZW1lbnQ6IGZ1bmN0aW9uICh0YXJnZXRJbmZvLCBldmVudE5hbWUsIGV2ZW50KSB7XG4gICAgdGFyZ2V0SW5mbyA9IHRhcmdldEluZm8gfHwge307XG4gICAgdmFyIGVsID0gdGFyZ2V0SW5mby50YXJnZXQ7XG5cbiAgICBpZiAoZWwgJiYgZWwuc2lsZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGV2ZW50SGFuZGxlciA9ICdvbicgKyBldmVudE5hbWU7XG4gICAgdmFyIGV2ZW50UGFja2V0ID0gbWFrZUV2ZW50UGFja2V0KGV2ZW50TmFtZSwgdGFyZ2V0SW5mbywgZXZlbnQpO1xuXG4gICAgd2hpbGUgKGVsKSB7XG4gICAgICBlbFtldmVudEhhbmRsZXJdICYmIChldmVudFBhY2tldC5jYW5jZWxCdWJibGUgPSBlbFtldmVudEhhbmRsZXJdLmNhbGwoZWwsIGV2ZW50UGFja2V0KSk7XG4gICAgICBlbC50cmlnZ2VyKGV2ZW50TmFtZSwgZXZlbnRQYWNrZXQpO1xuICAgICAgZWwgPSBlbC5wYXJlbnQ7XG5cbiAgICAgIGlmIChldmVudFBhY2tldC5jYW5jZWxCdWJibGUpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFldmVudFBhY2tldC5jYW5jZWxCdWJibGUpIHtcbiAgICAgIC8vIOWGkuazoeWIsOmhtue6pyB6cmVuZGVyIOWvueixoVxuICAgICAgdGhpcy50cmlnZ2VyKGV2ZW50TmFtZSwgZXZlbnRQYWNrZXQpOyAvLyDliIblj5Hkuovku7bliLDnlKjmiLfoh6rlrprkuYnlsYJcbiAgICAgIC8vIOeUqOaIt+acieWPr+iDveWcqOWFqOWxgCBjbGljayDkuovku7bkuK0gZGlzcG9zZe+8jOaJgOS7pemcgOimgeWIpOaWreS4iyBwYWludGVyIOaYr+WQpuWtmOWcqFxuXG4gICAgICB0aGlzLnBhaW50ZXIgJiYgdGhpcy5wYWludGVyLmVhY2hPdGhlckxheWVyKGZ1bmN0aW9uIChsYXllcikge1xuICAgICAgICBpZiAodHlwZW9mIGxheWVyW2V2ZW50SGFuZGxlcl0gPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGxheWVyW2V2ZW50SGFuZGxlcl0uY2FsbChsYXllciwgZXZlbnRQYWNrZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxheWVyLnRyaWdnZXIpIHtcbiAgICAgICAgICBsYXllci50cmlnZ2VyKGV2ZW50TmFtZSwgZXZlbnRQYWNrZXQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bW9kdWxlOnpyZW5kZXIvZ3JhcGhpYy9EaXNwbGF5YWJsZX0gZXhjbHVkZVxuICAgKiBAcmV0dXJuIHttb2RlbDp6cmVuZGVyL0VsZW1lbnR9XG4gICAqIEBtZXRob2RcbiAgICovXG4gIGZpbmRIb3ZlcjogZnVuY3Rpb24gKHgsIHksIGV4Y2x1ZGUpIHtcbiAgICB2YXIgbGlzdCA9IHRoaXMuc3RvcmFnZS5nZXREaXNwbGF5TGlzdCgpO1xuICAgIHZhciBvdXQgPSB7XG4gICAgICB4OiB4LFxuICAgICAgeTogeVxuICAgIH07XG5cbiAgICBmb3IgKHZhciBpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGhvdmVyQ2hlY2tSZXN1bHQ7XG5cbiAgICAgIGlmIChsaXN0W2ldICE9PSBleGNsdWRlIC8vIGdldERpc3BsYXlMaXN0IG1heSBpbmNsdWRlIGlnbm9yZWQgaXRlbSBpbiBWTUwgbW9kZVxuICAgICAgJiYgIWxpc3RbaV0uaWdub3JlICYmIChob3ZlckNoZWNrUmVzdWx0ID0gaXNIb3ZlcihsaXN0W2ldLCB4LCB5KSkpIHtcbiAgICAgICAgIW91dC50b3BUYXJnZXQgJiYgKG91dC50b3BUYXJnZXQgPSBsaXN0W2ldKTtcblxuICAgICAgICBpZiAoaG92ZXJDaGVja1Jlc3VsdCAhPT0gU0lMRU5UKSB7XG4gICAgICAgICAgb3V0LnRhcmdldCA9IGxpc3RbaV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xuICB9XG59OyAvLyBDb21tb24gaGFuZGxlcnNcblxudXRpbC5lYWNoKFsnY2xpY2snLCAnbW91c2Vkb3duJywgJ21vdXNldXAnLCAnbW91c2V3aGVlbCcsICdkYmxjbGljaycsICdjb250ZXh0bWVudSddLCBmdW5jdGlvbiAobmFtZSkge1xuICBIYW5kbGVyLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIEZpbmQgaG92ZXIgYWdhaW4gdG8gYXZvaWQgY2xpY2sgZXZlbnQgaXMgZGlzcGF0Y2hlZCBtYW51YWxseS4gT3IgY2xpY2sgaXMgdHJpZ2dlcmVkIHdpdGhvdXQgbW91c2VvdmVyXG4gICAgdmFyIGhvdmVyZWQgPSB0aGlzLmZpbmRIb3ZlcihldmVudC56clgsIGV2ZW50LnpyWSk7XG4gICAgdmFyIGhvdmVyZWRUYXJnZXQgPSBob3ZlcmVkLnRhcmdldDtcblxuICAgIGlmIChuYW1lID09PSAnbW91c2Vkb3duJykge1xuICAgICAgdGhpcy5fZG93bkVsID0gaG92ZXJlZFRhcmdldDtcbiAgICAgIHRoaXMuX2Rvd25Qb2ludCA9IFtldmVudC56clgsIGV2ZW50LnpyWV07IC8vIEluIGNhc2UgY2xpY2sgdHJpZ2dlcmVkIGJlZm9yZSBtb3VzZXVwXG5cbiAgICAgIHRoaXMuX3VwRWwgPSBob3ZlcmVkVGFyZ2V0O1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ21vdXNldXAnKSB7XG4gICAgICB0aGlzLl91cEVsID0gaG92ZXJlZFRhcmdldDtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdjbGljaycpIHtcbiAgICAgIGlmICh0aGlzLl9kb3duRWwgIT09IHRoaXMuX3VwRWwgLy8gT3JpZ2luYWwgY2xpY2sgZXZlbnQgaXMgdHJpZ2dlcmVkIG9uIHRoZSB3aG9sZSBjYW52YXMgZWxlbWVudCxcbiAgICAgIC8vIGluY2x1ZGluZyB0aGUgY2FzZSB0aGF0IGBtb3VzZWRvd25gIC0gYG1vdXNlbW92ZWAgLSBgbW91c2V1cGAsXG4gICAgICAvLyB3aGljaCBzaG91bGQgYmUgZmlsdGVyZWQsIG90aGVyd2lzZSBpdCB3aWxsIGJyaW5nIHRyb3VibGUgdG9cbiAgICAgIC8vIHBhbiBhbmQgem9vbS5cbiAgICAgIHx8ICF0aGlzLl9kb3duUG9pbnQgLy8gQXJiaXRyYXJ5IHZhbHVlXG4gICAgICB8fCB2ZWMyLmRpc3QodGhpcy5fZG93blBvaW50LCBbZXZlbnQuenJYLCBldmVudC56clldKSA+IDQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9kb3duUG9pbnQgPSBudWxsO1xuICAgIH1cblxuICAgIHRoaXMuZGlzcGF0Y2hUb0VsZW1lbnQoaG92ZXJlZCwgbmFtZSwgZXZlbnQpO1xuICB9O1xufSk7XG5cbmZ1bmN0aW9uIGlzSG92ZXIoZGlzcGxheWFibGUsIHgsIHkpIHtcbiAgaWYgKGRpc3BsYXlhYmxlW2Rpc3BsYXlhYmxlLnJlY3RIb3ZlciA/ICdyZWN0Q29udGFpbicgOiAnY29udGFpbiddKHgsIHkpKSB7XG4gICAgdmFyIGVsID0gZGlzcGxheWFibGU7XG4gICAgdmFyIGlzU2lsZW50O1xuXG4gICAgd2hpbGUgKGVsKSB7XG4gICAgICAvLyBJZiBjbGlwcGVkIGJ5IGFuY2VzdG9yLlxuICAgICAgLy8gRklYTUU6IElmIGNsaXBQYXRoIGhhcyBuZWl0aGVyIHN0cm9rZSBub3IgZmlsbCxcbiAgICAgIC8vIGVsLmNsaXBQYXRoLmNvbnRhaW4oeCwgeSkgd2lsbCBhbHdheXMgcmV0dXJuIGZhbHNlLlxuICAgICAgaWYgKGVsLmNsaXBQYXRoICYmICFlbC5jbGlwUGF0aC5jb250YWluKHgsIHkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsLnNpbGVudCkge1xuICAgICAgICBpc1NpbGVudCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGVsID0gZWwucGFyZW50O1xuICAgIH1cblxuICAgIHJldHVybiBpc1NpbGVudCA/IFNJTEVOVCA6IHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbnV0aWwubWl4aW4oSGFuZGxlciwgRXZlbnRmdWwpO1xudXRpbC5taXhpbihIYW5kbGVyLCBEcmFnZ2FibGUpO1xudmFyIF9kZWZhdWx0ID0gSGFuZGxlcjtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIHV0aWwgPSByZXF1aXJlKFwiLi9jb3JlL3V0aWxcIik7XG5cbnZhciBfY29uZmlnID0gcmVxdWlyZShcIi4vY29uZmlnXCIpO1xuXG52YXIgZGV2aWNlUGl4ZWxSYXRpbyA9IF9jb25maWcuZGV2aWNlUGl4ZWxSYXRpbztcblxudmFyIFN0eWxlID0gcmVxdWlyZShcIi4vZ3JhcGhpYy9TdHlsZVwiKTtcblxudmFyIFBhdHRlcm4gPSByZXF1aXJlKFwiLi9ncmFwaGljL1BhdHRlcm5cIik7XG5cbi8qKlxuICogQG1vZHVsZSB6cmVuZGVyL0xheWVyXG4gKiBAYXV0aG9yIHBpc3NhbmcoaHR0cHM6Ly93d3cuZ2l0aHViLmNvbS9waXNzYW5nKVxuICovXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiDliJvlu7pkb21cbiAqXG4gKiBAaW5uZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBkb20gaWQg5b6F55SoXG4gKiBAcGFyYW0ge1BhaW50ZXJ9IHBhaW50ZXIgcGFpbnRlciBpbnN0YW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IG51bWJlclxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlRG9tKGlkLCBwYWludGVyLCBkcHIpIHtcbiAgdmFyIG5ld0RvbSA9IHV0aWwuY3JlYXRlQ2FudmFzKCk7XG4gIHZhciB3aWR0aCA9IHBhaW50ZXIuZ2V0V2lkdGgoKTtcbiAgdmFyIGhlaWdodCA9IHBhaW50ZXIuZ2V0SGVpZ2h0KCk7XG4gIHZhciBuZXdEb21TdHlsZSA9IG5ld0RvbS5zdHlsZTtcblxuICBpZiAobmV3RG9tU3R5bGUpIHtcbiAgICAvLyBJbiBub2RlIG9yIHNvbWUgb3RoZXIgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcbiAgICBuZXdEb21TdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgbmV3RG9tU3R5bGUubGVmdCA9IDA7XG4gICAgbmV3RG9tU3R5bGUudG9wID0gMDtcbiAgICBuZXdEb21TdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4JztcbiAgICBuZXdEb21TdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuICAgIG5ld0RvbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtenItZG9tLWlkJywgaWQpO1xuICB9XG5cbiAgbmV3RG9tLndpZHRoID0gd2lkdGggKiBkcHI7XG4gIG5ld0RvbS5oZWlnaHQgPSBoZWlnaHQgKiBkcHI7XG4gIHJldHVybiBuZXdEb207XG59XG4vKipcbiAqIEBhbGlhcyBtb2R1bGU6enJlbmRlci9MYXllclxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBtb2R1bGU6enJlbmRlci9taXhpbi9UcmFuc2Zvcm1hYmxlXG4gKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAqIEBwYXJhbSB7bW9kdWxlOnpyZW5kZXIvUGFpbnRlcn0gcGFpbnRlclxuICogQHBhcmFtIHtudW1iZXJ9IFtkcHJdXG4gKi9cblxuXG52YXIgTGF5ZXIgPSBmdW5jdGlvbiAoaWQsIHBhaW50ZXIsIGRwcikge1xuICB2YXIgZG9tO1xuICBkcHIgPSBkcHIgfHwgZGV2aWNlUGl4ZWxSYXRpbztcblxuICBpZiAodHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xuICAgIGRvbSA9IGNyZWF0ZURvbShpZCwgcGFpbnRlciwgZHByKTtcbiAgfSAvLyBOb3QgdXNpbmcgaXNEb20gYmVjYXVzZSBpbiBub2RlIGl0IHdpbGwgcmV0dXJuIGZhbHNlXG4gIGVsc2UgaWYgKHV0aWwuaXNPYmplY3QoaWQpKSB7XG4gICAgICBkb20gPSBpZDtcbiAgICAgIGlkID0gZG9tLmlkO1xuICAgIH1cblxuICB0aGlzLmlkID0gaWQ7XG4gIHRoaXMuZG9tID0gZG9tO1xuICB2YXIgZG9tU3R5bGUgPSBkb20uc3R5bGU7XG5cbiAgaWYgKGRvbVN0eWxlKSB7XG4gICAgLy8gTm90IGluIG5vZGVcbiAgICBkb20ub25zZWxlY3RzdGFydCA9IHJldHVybkZhbHNlOyAvLyDpgb/lhY3pobXpnaLpgInkuK3nmoTlsLTlsKxcblxuICAgIGRvbVN0eWxlWyctd2Via2l0LXVzZXItc2VsZWN0J10gPSAnbm9uZSc7XG4gICAgZG9tU3R5bGVbJ3VzZXItc2VsZWN0J10gPSAnbm9uZSc7XG4gICAgZG9tU3R5bGVbJy13ZWJraXQtdG91Y2gtY2FsbG91dCddID0gJ25vbmUnO1xuICAgIGRvbVN0eWxlWyctd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3InXSA9ICdyZ2JhKDAsMCwwLDApJztcbiAgICBkb21TdHlsZVsncGFkZGluZyddID0gMDtcbiAgICBkb21TdHlsZVsnbWFyZ2luJ10gPSAwO1xuICAgIGRvbVN0eWxlWydib3JkZXItd2lkdGgnXSA9IDA7XG4gIH1cblxuICB0aGlzLmRvbUJhY2sgPSBudWxsO1xuICB0aGlzLmN0eEJhY2sgPSBudWxsO1xuICB0aGlzLnBhaW50ZXIgPSBwYWludGVyO1xuICB0aGlzLmNvbmZpZyA9IG51bGw7IC8vIENvbmZpZ3NcblxuICAvKipcbiAgICog5q+P5qyh5riF56m655S75biD55qE6aKc6ImyXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG5cbiAgdGhpcy5jbGVhckNvbG9yID0gMDtcbiAgLyoqXG4gICAqIOaYr+WQpuW8gOWQr+WKqOaAgeaooeezilxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG5cbiAgdGhpcy5tb3Rpb25CbHVyID0gZmFsc2U7XG4gIC8qKlxuICAgKiDlnKjlvIDlkK/liqjmgIHmqKHns4rnmoTml7blgJnkvb/nlKjvvIzkuI7kuIrkuIDluKfmt7flkIjnmoRhbHBoYeWAvO+8jOWAvOi2iuWkp+Wwvui/uei2iuaYjuaYvlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwLjdcbiAgICovXG5cbiAgdGhpcy5sYXN0RnJhbWVBbHBoYSA9IDAuNztcbiAgLyoqXG4gICAqIExheWVyIGRwclxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cblxuICB0aGlzLmRwciA9IGRwcjtcbn07XG5cbkxheWVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IExheWVyLFxuICBfX2RpcnR5OiB0cnVlLFxuICBfX3VzZWQ6IGZhbHNlLFxuICBfX2RyYXdJbmRleDogMCxcbiAgX19zdGFydEluZGV4OiAwLFxuICBfX2VuZEluZGV4OiAwLFxuICBpbmNyZW1lbnRhbDogZmFsc2UsXG4gIGdldEVsZW1lbnRDb3VudDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9fZW5kSW5kZXggLSB0aGlzLl9fc3RhcnRJbmRleDtcbiAgfSxcbiAgaW5pdENvbnRleHQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmN0eCA9IHRoaXMuZG9tLmdldENvbnRleHQoJzJkJyk7XG4gICAgdGhpcy5jdHguZHByID0gdGhpcy5kcHI7XG4gIH0sXG4gIGNyZWF0ZUJhY2tCdWZmZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZHByID0gdGhpcy5kcHI7XG4gICAgdGhpcy5kb21CYWNrID0gY3JlYXRlRG9tKCdiYWNrLScgKyB0aGlzLmlkLCB0aGlzLnBhaW50ZXIsIGRwcik7XG4gICAgdGhpcy5jdHhCYWNrID0gdGhpcy5kb21CYWNrLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICBpZiAoZHByICE9IDEpIHtcbiAgICAgIHRoaXMuY3R4QmFjay5zY2FsZShkcHIsIGRwcik7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSAge251bWJlcn0gaGVpZ2h0XG4gICAqL1xuICByZXNpemU6IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgdmFyIGRwciA9IHRoaXMuZHByO1xuICAgIHZhciBkb20gPSB0aGlzLmRvbTtcbiAgICB2YXIgZG9tU3R5bGUgPSBkb20uc3R5bGU7XG4gICAgdmFyIGRvbUJhY2sgPSB0aGlzLmRvbUJhY2s7XG5cbiAgICBpZiAoZG9tU3R5bGUpIHtcbiAgICAgIGRvbVN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuICAgICAgZG9tU3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcbiAgICB9XG5cbiAgICBkb20ud2lkdGggPSB3aWR0aCAqIGRwcjtcbiAgICBkb20uaGVpZ2h0ID0gaGVpZ2h0ICogZHByO1xuXG4gICAgaWYgKGRvbUJhY2spIHtcbiAgICAgIGRvbUJhY2sud2lkdGggPSB3aWR0aCAqIGRwcjtcbiAgICAgIGRvbUJhY2suaGVpZ2h0ID0gaGVpZ2h0ICogZHByO1xuXG4gICAgICBpZiAoZHByICE9IDEpIHtcbiAgICAgICAgdGhpcy5jdHhCYWNrLnNjYWxlKGRwciwgZHByKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIOa4heepuuivpeWxgueUu+W4g1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjbGVhckFsbF09ZmFsc2UgQ2xlYXIgYWxsIHdpdGggb3V0IG1vdGlvbiBibHVyXG4gICAqIEBwYXJhbSB7Q29sb3J9IFtjbGVhckNvbG9yXVxuICAgKi9cbiAgY2xlYXI6IGZ1bmN0aW9uIChjbGVhckFsbCwgY2xlYXJDb2xvcikge1xuICAgIHZhciBkb20gPSB0aGlzLmRvbTtcbiAgICB2YXIgY3R4ID0gdGhpcy5jdHg7XG4gICAgdmFyIHdpZHRoID0gZG9tLndpZHRoO1xuICAgIHZhciBoZWlnaHQgPSBkb20uaGVpZ2h0O1xuICAgIHZhciBjbGVhckNvbG9yID0gY2xlYXJDb2xvciB8fCB0aGlzLmNsZWFyQ29sb3I7XG4gICAgdmFyIGhhdmVNb3Rpb25CTHVyID0gdGhpcy5tb3Rpb25CbHVyICYmICFjbGVhckFsbDtcbiAgICB2YXIgbGFzdEZyYW1lQWxwaGEgPSB0aGlzLmxhc3RGcmFtZUFscGhhO1xuICAgIHZhciBkcHIgPSB0aGlzLmRwcjtcblxuICAgIGlmIChoYXZlTW90aW9uQkx1cikge1xuICAgICAgaWYgKCF0aGlzLmRvbUJhY2spIHtcbiAgICAgICAgdGhpcy5jcmVhdGVCYWNrQnVmZmVyKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY3R4QmFjay5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnY29weSc7XG4gICAgICB0aGlzLmN0eEJhY2suZHJhd0ltYWdlKGRvbSwgMCwgMCwgd2lkdGggLyBkcHIsIGhlaWdodCAvIGRwcik7XG4gICAgfVxuXG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcblxuICAgIGlmIChjbGVhckNvbG9yICYmIGNsZWFyQ29sb3IgIT09ICd0cmFuc3BhcmVudCcpIHtcbiAgICAgIHZhciBjbGVhckNvbG9yR3JhZGllbnRPclBhdHRlcm47IC8vIEdyYWRpZW50XG5cbiAgICAgIGlmIChjbGVhckNvbG9yLmNvbG9yU3RvcHMpIHtcbiAgICAgICAgLy8gQ2FjaGUgY2FudmFzIGdyYWRpZW50XG4gICAgICAgIGNsZWFyQ29sb3JHcmFkaWVudE9yUGF0dGVybiA9IGNsZWFyQ29sb3IuX19jYW52YXNHcmFkaWVudCB8fCBTdHlsZS5nZXRHcmFkaWVudChjdHgsIGNsZWFyQ29sb3IsIHtcbiAgICAgICAgICB4OiAwLFxuICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICAgIH0pO1xuICAgICAgICBjbGVhckNvbG9yLl9fY2FudmFzR3JhZGllbnQgPSBjbGVhckNvbG9yR3JhZGllbnRPclBhdHRlcm47XG4gICAgICB9IC8vIFBhdHRlcm5cbiAgICAgIGVsc2UgaWYgKGNsZWFyQ29sb3IuaW1hZ2UpIHtcbiAgICAgICAgICBjbGVhckNvbG9yR3JhZGllbnRPclBhdHRlcm4gPSBQYXR0ZXJuLnByb3RvdHlwZS5nZXRDYW52YXNQYXR0ZXJuLmNhbGwoY2xlYXJDb2xvciwgY3R4KTtcbiAgICAgICAgfVxuXG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IGNsZWFyQ29sb3JHcmFkaWVudE9yUGF0dGVybiB8fCBjbGVhckNvbG9yO1xuICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG5cbiAgICBpZiAoaGF2ZU1vdGlvbkJMdXIpIHtcbiAgICAgIHZhciBkb21CYWNrID0gdGhpcy5kb21CYWNrO1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IGxhc3RGcmFtZUFscGhhO1xuICAgICAgY3R4LmRyYXdJbWFnZShkb21CYWNrLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICB9XG59O1xudmFyIF9kZWZhdWx0ID0gTGF5ZXI7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBfY29uZmlnID0gcmVxdWlyZShcIi4vY29uZmlnXCIpO1xuXG52YXIgZGV2aWNlUGl4ZWxSYXRpbyA9IF9jb25maWcuZGV2aWNlUGl4ZWxSYXRpbztcblxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi9jb3JlL3V0aWxcIik7XG5cbnZhciBsb2cgPSByZXF1aXJlKFwiLi9jb3JlL2xvZ1wiKTtcblxudmFyIEJvdW5kaW5nUmVjdCA9IHJlcXVpcmUoXCIuL2NvcmUvQm91bmRpbmdSZWN0XCIpO1xuXG52YXIgdGltc29ydCA9IHJlcXVpcmUoXCIuL2NvcmUvdGltc29ydFwiKTtcblxudmFyIExheWVyID0gcmVxdWlyZShcIi4vTGF5ZXJcIik7XG5cbnZhciByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSByZXF1aXJlKFwiLi9hbmltYXRpb24vcmVxdWVzdEFuaW1hdGlvbkZyYW1lXCIpO1xuXG52YXIgSW1hZ2UgPSByZXF1aXJlKFwiLi9ncmFwaGljL0ltYWdlXCIpO1xuXG52YXIgZW52ID0gcmVxdWlyZShcIi4vY29yZS9lbnZcIik7XG5cbnZhciBIT1ZFUl9MQVlFUl9aTEVWRUwgPSAxZTU7XG52YXIgQ0FOVkFTX1pMRVZFTCA9IDMxNDE1OTtcbnZhciBFTF9BRlRFUl9JTkNSRU1FTlRBTF9JTkMgPSAwLjAxO1xudmFyIElOQ1JFTUVOVEFMX0lOQyA9IDAuMDAxO1xuXG5mdW5jdGlvbiBwYXJzZUludDEwKHZhbCkge1xuICByZXR1cm4gcGFyc2VJbnQodmFsLCAxMCk7XG59XG5cbmZ1bmN0aW9uIGlzTGF5ZXJWYWxpZChsYXllcikge1xuICBpZiAoIWxheWVyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGxheWVyLl9fYnVpbHRpbl9fKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIGxheWVyLnJlc2l6ZSAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgbGF5ZXIucmVmcmVzaCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG52YXIgdG1wUmVjdCA9IG5ldyBCb3VuZGluZ1JlY3QoMCwgMCwgMCwgMCk7XG52YXIgdmlld1JlY3QgPSBuZXcgQm91bmRpbmdSZWN0KDAsIDAsIDAsIDApO1xuXG5mdW5jdGlvbiBpc0Rpc3BsYXlhYmxlQ3VsbGVkKGVsLCB3aWR0aCwgaGVpZ2h0KSB7XG4gIHRtcFJlY3QuY29weShlbC5nZXRCb3VuZGluZ1JlY3QoKSk7XG5cbiAgaWYgKGVsLnRyYW5zZm9ybSkge1xuICAgIHRtcFJlY3QuYXBwbHlUcmFuc2Zvcm0oZWwudHJhbnNmb3JtKTtcbiAgfVxuXG4gIHZpZXdSZWN0LndpZHRoID0gd2lkdGg7XG4gIHZpZXdSZWN0LmhlaWdodCA9IGhlaWdodDtcbiAgcmV0dXJuICF0bXBSZWN0LmludGVyc2VjdCh2aWV3UmVjdCk7XG59XG5cbmZ1bmN0aW9uIGlzQ2xpcFBhdGhDaGFuZ2VkKGNsaXBQYXRocywgcHJldkNsaXBQYXRocykge1xuICBpZiAoY2xpcFBhdGhzID09IHByZXZDbGlwUGF0aHMpIHtcbiAgICAvLyBDYW4gYm90aCBiZSBudWxsIG9yIHVuZGVmaW5lZFxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghY2xpcFBhdGhzIHx8ICFwcmV2Q2xpcFBhdGhzIHx8IGNsaXBQYXRocy5sZW5ndGggIT09IHByZXZDbGlwUGF0aHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNsaXBQYXRocy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChjbGlwUGF0aHNbaV0gIT09IHByZXZDbGlwUGF0aHNbaV0pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkb0NsaXAoY2xpcFBhdGhzLCBjdHgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbGlwUGF0aHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY2xpcFBhdGggPSBjbGlwUGF0aHNbaV07XG4gICAgY2xpcFBhdGguc2V0VHJhbnNmb3JtKGN0eCk7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGNsaXBQYXRoLmJ1aWxkUGF0aChjdHgsIGNsaXBQYXRoLnNoYXBlKTtcbiAgICBjdHguY2xpcCgpOyAvLyBUcmFuc2Zvcm0gYmFja1xuXG4gICAgY2xpcFBhdGgucmVzdG9yZVRyYW5zZm9ybShjdHgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJvb3Qod2lkdGgsIGhlaWdodCkge1xuICB2YXIgZG9tUm9vdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOyAvLyBkb21Sb290Lm9uc2VsZWN0c3RhcnQgPSByZXR1cm5GYWxzZTsgLy8g6YG/5YWN6aG16Z2i6YCJ5Lit55qE5bC05bCsXG5cbiAgZG9tUm9vdC5zdHlsZS5jc3NUZXh0ID0gWydwb3NpdGlvbjpyZWxhdGl2ZScsICdvdmVyZmxvdzpoaWRkZW4nLCAnd2lkdGg6JyArIHdpZHRoICsgJ3B4JywgJ2hlaWdodDonICsgaGVpZ2h0ICsgJ3B4JywgJ3BhZGRpbmc6MCcsICdtYXJnaW46MCcsICdib3JkZXItd2lkdGg6MCddLmpvaW4oJzsnKSArICc7JztcbiAgcmV0dXJuIGRvbVJvb3Q7XG59XG4vKipcbiAqIEBhbGlhcyBtb2R1bGU6enJlbmRlci9QYWludGVyXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJvb3Qg57uY5Zu+5a655ZmoXG4gKiBAcGFyYW0ge21vZHVsZTp6cmVuZGVyL1N0b3JhZ2V9IHN0b3JhZ2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKi9cblxuXG52YXIgUGFpbnRlciA9IGZ1bmN0aW9uIChyb290LCBzdG9yYWdlLCBvcHRzKSB7XG4gIHRoaXMudHlwZSA9ICdjYW52YXMnOyAvLyBJbiBub2RlIGVudmlyb25tZW50IHVzaW5nIG5vZGUtY2FudmFzXG5cbiAgdmFyIHNpbmdsZUNhbnZhcyA9ICFyb290Lm5vZGVOYW1lIC8vIEluIG5vZGUgP1xuICB8fCByb290Lm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdDQU5WQVMnO1xuICB0aGlzLl9vcHRzID0gb3B0cyA9IHV0aWwuZXh0ZW5kKHt9LCBvcHRzIHx8IHt9KTtcbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG4gIHRoaXMuZHByID0gb3B0cy5kZXZpY2VQaXhlbFJhdGlvIHx8IGRldmljZVBpeGVsUmF0aW87XG4gIC8qKlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgdGhpcy5fc2luZ2xlQ2FudmFzID0gc2luZ2xlQ2FudmFzO1xuICAvKipcbiAgICog57uY5Zu+5a655ZmoXG4gICAqIEB0eXBlIHtIVE1MRWxlbWVudH1cbiAgICovXG5cbiAgdGhpcy5yb290ID0gcm9vdDtcbiAgdmFyIHJvb3RTdHlsZSA9IHJvb3Quc3R5bGU7XG5cbiAgaWYgKHJvb3RTdHlsZSkge1xuICAgIHJvb3RTdHlsZVsnLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yJ10gPSAndHJhbnNwYXJlbnQnO1xuICAgIHJvb3RTdHlsZVsnLXdlYmtpdC11c2VyLXNlbGVjdCddID0gcm9vdFN0eWxlWyd1c2VyLXNlbGVjdCddID0gcm9vdFN0eWxlWyctd2Via2l0LXRvdWNoLWNhbGxvdXQnXSA9ICdub25lJztcbiAgICByb290LmlubmVySFRNTCA9ICcnO1xuICB9XG4gIC8qKlxuICAgKiBAdHlwZSB7bW9kdWxlOnpyZW5kZXIvU3RvcmFnZX1cbiAgICovXG5cblxuICB0aGlzLnN0b3JhZ2UgPSBzdG9yYWdlO1xuICAvKipcbiAgICogQHR5cGUge0FycmF5LjxudW1iZXI+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICB2YXIgemxldmVsTGlzdCA9IHRoaXMuX3psZXZlbExpc3QgPSBbXTtcbiAgLyoqXG4gICAqIEB0eXBlIHtPYmplY3QuPHN0cmluZywgbW9kdWxlOnpyZW5kZXIvTGF5ZXI+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICB2YXIgbGF5ZXJzID0gdGhpcy5fbGF5ZXJzID0ge307XG4gIC8qKlxuICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsIE9iamVjdD59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIHRoaXMuX2xheWVyQ29uZmlnID0ge307XG4gIC8qKlxuICAgKiB6cmVuZGVyIHdpbGwgZG8gY29tcG9zaXRpbmcgd2hlbiByb290IGlzIGEgY2FudmFzIGFuZCBoYXZlIG11bHRpcGxlIHpsZXZlbHMuXG4gICAqL1xuXG4gIHRoaXMuX25lZWRzTWFudWFsbHlDb21wb3NpdGluZyA9IGZhbHNlO1xuXG4gIGlmICghc2luZ2xlQ2FudmFzKSB7XG4gICAgdGhpcy5fd2lkdGggPSB0aGlzLl9nZXRTaXplKDApO1xuICAgIHRoaXMuX2hlaWdodCA9IHRoaXMuX2dldFNpemUoMSk7XG4gICAgdmFyIGRvbVJvb3QgPSB0aGlzLl9kb21Sb290ID0gY3JlYXRlUm9vdCh0aGlzLl93aWR0aCwgdGhpcy5faGVpZ2h0KTtcbiAgICByb290LmFwcGVuZENoaWxkKGRvbVJvb3QpO1xuICB9IGVsc2Uge1xuICAgIHZhciB3aWR0aCA9IHJvb3Qud2lkdGg7XG4gICAgdmFyIGhlaWdodCA9IHJvb3QuaGVpZ2h0O1xuXG4gICAgaWYgKG9wdHMud2lkdGggIT0gbnVsbCkge1xuICAgICAgd2lkdGggPSBvcHRzLndpZHRoO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmhlaWdodCAhPSBudWxsKSB7XG4gICAgICBoZWlnaHQgPSBvcHRzLmhlaWdodDtcbiAgICB9XG5cbiAgICB0aGlzLmRwciA9IG9wdHMuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxOyAvLyBVc2UgY2FudmFzIHdpZHRoIGFuZCBoZWlnaHQgZGlyZWN0bHlcblxuICAgIHJvb3Qud2lkdGggPSB3aWR0aCAqIHRoaXMuZHByO1xuICAgIHJvb3QuaGVpZ2h0ID0gaGVpZ2h0ICogdGhpcy5kcHI7XG4gICAgdGhpcy5fd2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7IC8vIENyZWF0ZSBsYXllciBpZiBvbmx5IG9uZSBnaXZlbiBjYW52YXNcbiAgICAvLyBEZXZpY2UgY2FuIGJlIHNwZWNpZmllZCB0byBjcmVhdGUgYSBoaWdoIGRwaSBpbWFnZS5cblxuICAgIHZhciBtYWluTGF5ZXIgPSBuZXcgTGF5ZXIocm9vdCwgdGhpcywgdGhpcy5kcHIpO1xuICAgIG1haW5MYXllci5fX2J1aWx0aW5fXyA9IHRydWU7XG4gICAgbWFpbkxheWVyLmluaXRDb250ZXh0KCk7IC8vIEZJWE1FIFVzZSBjYW52YXMgd2lkdGggYW5kIGhlaWdodFxuICAgIC8vIG1haW5MYXllci5yZXNpemUod2lkdGgsIGhlaWdodCk7XG5cbiAgICBsYXllcnNbQ0FOVkFTX1pMRVZFTF0gPSBtYWluTGF5ZXI7XG4gICAgbWFpbkxheWVyLnpsZXZlbCA9IENBTlZBU19aTEVWRUw7IC8vIE5vdCB1c2UgY29tbW9uIHpsZXZlbC5cblxuICAgIHpsZXZlbExpc3QucHVzaChDQU5WQVNfWkxFVkVMKTtcbiAgICB0aGlzLl9kb21Sb290ID0gcm9vdDtcbiAgfVxuICAvKipcbiAgICogQHR5cGUge21vZHVsZTp6cmVuZGVyL0xheWVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuXG4gIHRoaXMuX2hvdmVybGF5ZXIgPSBudWxsO1xuICB0aGlzLl9ob3ZlckVsZW1lbnRzID0gW107XG59O1xuXG5QYWludGVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFBhaW50ZXIsXG4gIGdldFR5cGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ2NhbnZhcyc7XG4gIH0sXG5cbiAgLyoqXG4gICAqIElmIHBhaW50ZXIgdXNlIGEgc2luZ2xlIGNhbnZhc1xuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNTaW5nbGVDYW52YXM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2luZ2xlQ2FudmFzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtIVE1MRGl2RWxlbWVudH1cbiAgICovXG4gIGdldFZpZXdwb3J0Um9vdDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9kb21Sb290O1xuICB9LFxuICBnZXRWaWV3cG9ydFJvb3RPZmZzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmlld3BvcnRSb290ID0gdGhpcy5nZXRWaWV3cG9ydFJvb3QoKTtcblxuICAgIGlmICh2aWV3cG9ydFJvb3QpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9mZnNldExlZnQ6IHZpZXdwb3J0Um9vdC5vZmZzZXRMZWZ0IHx8IDAsXG4gICAgICAgIG9mZnNldFRvcDogdmlld3BvcnRSb290Lm9mZnNldFRvcCB8fCAwXG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICog5Yi35pawXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BhaW50QWxsPWZhbHNlXSDlvLrliLbnu5jliLbmiYDmnIlkaXNwbGF5YWJsZVxuICAgKi9cbiAgcmVmcmVzaDogZnVuY3Rpb24gKHBhaW50QWxsKSB7XG4gICAgdmFyIGxpc3QgPSB0aGlzLnN0b3JhZ2UuZ2V0RGlzcGxheUxpc3QodHJ1ZSk7XG4gICAgdmFyIHpsZXZlbExpc3QgPSB0aGlzLl96bGV2ZWxMaXN0O1xuICAgIHRoaXMuX3JlZHJhd0lkID0gTWF0aC5yYW5kb20oKTtcblxuICAgIHRoaXMuX3BhaW50TGlzdChsaXN0LCBwYWludEFsbCwgdGhpcy5fcmVkcmF3SWQpOyAvLyBQYWludCBjdXN0dW0gbGF5ZXJzXG5cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgemxldmVsTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHogPSB6bGV2ZWxMaXN0W2ldO1xuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJzW3pdO1xuXG4gICAgICBpZiAoIWxheWVyLl9fYnVpbHRpbl9fICYmIGxheWVyLnJlZnJlc2gpIHtcbiAgICAgICAgdmFyIGNsZWFyQ29sb3IgPSBpID09PSAwID8gdGhpcy5fYmFja2dyb3VuZENvbG9yIDogbnVsbDtcbiAgICAgICAgbGF5ZXIucmVmcmVzaChjbGVhckNvbG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnJlZnJlc2hIb3ZlcigpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBhZGRIb3ZlcjogZnVuY3Rpb24gKGVsLCBob3ZlclN0eWxlKSB7XG4gICAgaWYgKGVsLl9faG92ZXJNaXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZWxNaXJyb3IgPSBuZXcgZWwuY29uc3RydWN0b3Ioe1xuICAgICAgc3R5bGU6IGVsLnN0eWxlLFxuICAgICAgc2hhcGU6IGVsLnNoYXBlXG4gICAgfSk7XG4gICAgZWxNaXJyb3IuX19mcm9tID0gZWw7XG4gICAgZWwuX19ob3Zlck1pciA9IGVsTWlycm9yO1xuICAgIGVsTWlycm9yLnNldFN0eWxlKGhvdmVyU3R5bGUpO1xuXG4gICAgdGhpcy5faG92ZXJFbGVtZW50cy5wdXNoKGVsTWlycm9yKTtcbiAgfSxcbiAgcmVtb3ZlSG92ZXI6IGZ1bmN0aW9uIChlbCkge1xuICAgIHZhciBlbE1pcnJvciA9IGVsLl9faG92ZXJNaXI7XG4gICAgdmFyIGhvdmVyRWxlbWVudHMgPSB0aGlzLl9ob3ZlckVsZW1lbnRzO1xuICAgIHZhciBpZHggPSB1dGlsLmluZGV4T2YoaG92ZXJFbGVtZW50cywgZWxNaXJyb3IpO1xuXG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICBob3ZlckVsZW1lbnRzLnNwbGljZShpZHgsIDEpO1xuICAgIH1cblxuICAgIGVsLl9faG92ZXJNaXIgPSBudWxsO1xuICB9LFxuICBjbGVhckhvdmVyOiBmdW5jdGlvbiAoZWwpIHtcbiAgICB2YXIgaG92ZXJFbGVtZW50cyA9IHRoaXMuX2hvdmVyRWxlbWVudHM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvdmVyRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBmcm9tID0gaG92ZXJFbGVtZW50c1tpXS5fX2Zyb207XG5cbiAgICAgIGlmIChmcm9tKSB7XG4gICAgICAgIGZyb20uX19ob3Zlck1pciA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaG92ZXJFbGVtZW50cy5sZW5ndGggPSAwO1xuICB9LFxuICByZWZyZXNoSG92ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaG92ZXJFbGVtZW50cyA9IHRoaXMuX2hvdmVyRWxlbWVudHM7XG4gICAgdmFyIGxlbiA9IGhvdmVyRWxlbWVudHMubGVuZ3RoO1xuICAgIHZhciBob3ZlckxheWVyID0gdGhpcy5faG92ZXJsYXllcjtcbiAgICBob3ZlckxheWVyICYmIGhvdmVyTGF5ZXIuY2xlYXIoKTtcblxuICAgIGlmICghbGVuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGltc29ydChob3ZlckVsZW1lbnRzLCB0aGlzLnN0b3JhZ2UuZGlzcGxheWFibGVTb3J0RnVuYyk7IC8vIFVzZSBhIGV4dHJlYW0gbGFyZ2UgemxldmVsXG4gICAgLy8gRklYTUU/XG5cbiAgICBpZiAoIWhvdmVyTGF5ZXIpIHtcbiAgICAgIGhvdmVyTGF5ZXIgPSB0aGlzLl9ob3ZlcmxheWVyID0gdGhpcy5nZXRMYXllcihIT1ZFUl9MQVlFUl9aTEVWRUwpO1xuICAgIH1cblxuICAgIHZhciBzY29wZSA9IHt9O1xuICAgIGhvdmVyTGF5ZXIuY3R4LnNhdmUoKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOykge1xuICAgICAgdmFyIGVsID0gaG92ZXJFbGVtZW50c1tpXTtcbiAgICAgIHZhciBvcmlnaW5hbEVsID0gZWwuX19mcm9tOyAvLyBPcmlnaW5hbCBlbCBpcyByZW1vdmVkXG4gICAgICAvLyBQRU5ESU5HXG5cbiAgICAgIGlmICghKG9yaWdpbmFsRWwgJiYgb3JpZ2luYWxFbC5fX3pyKSkge1xuICAgICAgICBob3ZlckVsZW1lbnRzLnNwbGljZShpLCAxKTtcbiAgICAgICAgb3JpZ2luYWxFbC5fX2hvdmVyTWlyID0gbnVsbDtcbiAgICAgICAgbGVuLS07XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpKys7IC8vIFVzZSB0cmFuc2Zvcm1cbiAgICAgIC8vIEZJWE1FIHN0eWxlIGFuZCBzaGFwZSA/XG5cbiAgICAgIGlmICghb3JpZ2luYWxFbC5pbnZpc2libGUpIHtcbiAgICAgICAgZWwudHJhbnNmb3JtID0gb3JpZ2luYWxFbC50cmFuc2Zvcm07XG4gICAgICAgIGVsLmludlRyYW5zZm9ybSA9IG9yaWdpbmFsRWwuaW52VHJhbnNmb3JtO1xuICAgICAgICBlbC5fX2NsaXBQYXRocyA9IG9yaWdpbmFsRWwuX19jbGlwUGF0aHM7IC8vIGVsLlxuXG4gICAgICAgIHRoaXMuX2RvUGFpbnRFbChlbCwgaG92ZXJMYXllciwgdHJ1ZSwgc2NvcGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhvdmVyTGF5ZXIuY3R4LnJlc3RvcmUoKTtcbiAgfSxcbiAgZ2V0SG92ZXJMYXllcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldExheWVyKEhPVkVSX0xBWUVSX1pMRVZFTCk7XG4gIH0sXG4gIF9wYWludExpc3Q6IGZ1bmN0aW9uIChsaXN0LCBwYWludEFsbCwgcmVkcmF3SWQpIHtcbiAgICBpZiAodGhpcy5fcmVkcmF3SWQgIT09IHJlZHJhd0lkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcGFpbnRBbGwgPSBwYWludEFsbCB8fCBmYWxzZTtcblxuICAgIHRoaXMuX3VwZGF0ZUxheWVyU3RhdHVzKGxpc3QpO1xuXG4gICAgdmFyIGZpbmlzaGVkID0gdGhpcy5fZG9QYWludExpc3QobGlzdCwgcGFpbnRBbGwpO1xuXG4gICAgaWYgKHRoaXMuX25lZWRzTWFudWFsbHlDb21wb3NpdGluZykge1xuICAgICAgdGhpcy5fY29tcG9zaXRlTWFudWFsbHkoKTtcbiAgICB9XG5cbiAgICBpZiAoIWZpbmlzaGVkKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLl9wYWludExpc3QobGlzdCwgcGFpbnRBbGwsIHJlZHJhd0lkKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgX2NvbXBvc2l0ZU1hbnVhbGx5OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN0eCA9IHRoaXMuZ2V0TGF5ZXIoQ0FOVkFTX1pMRVZFTCkuY3R4O1xuICAgIHZhciB3aWR0aCA9IHRoaXMuX2RvbVJvb3Qud2lkdGg7XG4gICAgdmFyIGhlaWdodCA9IHRoaXMuX2RvbVJvb3QuaGVpZ2h0O1xuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7IC8vIFBFTkRJTkcsIElmIG9ubHkgYnVpbHRpbiBsYXllcj9cblxuICAgIHRoaXMuZWFjaEJ1aWx0aW5MYXllcihmdW5jdGlvbiAobGF5ZXIpIHtcbiAgICAgIGlmIChsYXllci52aXJ0dWFsKSB7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UobGF5ZXIuZG9tLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgX2RvUGFpbnRMaXN0OiBmdW5jdGlvbiAobGlzdCwgcGFpbnRBbGwpIHtcbiAgICB2YXIgbGF5ZXJMaXN0ID0gW107XG5cbiAgICBmb3IgKHZhciB6aSA9IDA7IHppIDwgdGhpcy5femxldmVsTGlzdC5sZW5ndGg7IHppKyspIHtcbiAgICAgIHZhciB6bGV2ZWwgPSB0aGlzLl96bGV2ZWxMaXN0W3ppXTtcbiAgICAgIHZhciBsYXllciA9IHRoaXMuX2xheWVyc1t6bGV2ZWxdO1xuXG4gICAgICBpZiAobGF5ZXIuX19idWlsdGluX18gJiYgbGF5ZXIgIT09IHRoaXMuX2hvdmVybGF5ZXIgJiYgKGxheWVyLl9fZGlydHkgfHwgcGFpbnRBbGwpKSB7XG4gICAgICAgIGxheWVyTGlzdC5wdXNoKGxheWVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZmluaXNoZWQgPSB0cnVlO1xuXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBsYXllckxpc3QubGVuZ3RoOyBrKyspIHtcbiAgICAgIHZhciBsYXllciA9IGxheWVyTGlzdFtrXTtcbiAgICAgIHZhciBjdHggPSBsYXllci5jdHg7XG4gICAgICB2YXIgc2NvcGUgPSB7fTtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICB2YXIgc3RhcnQgPSBwYWludEFsbCA/IGxheWVyLl9fc3RhcnRJbmRleCA6IGxheWVyLl9fZHJhd0luZGV4O1xuICAgICAgdmFyIHVzZVRpbWVyID0gIXBhaW50QWxsICYmIGxheWVyLmluY3JlbWVudGFsICYmIERhdGUubm93O1xuICAgICAgdmFyIHN0YXJ0VGltZSA9IHVzZVRpbWVyICYmIERhdGUubm93KCk7XG4gICAgICB2YXIgY2xlYXJDb2xvciA9IGxheWVyLnpsZXZlbCA9PT0gdGhpcy5femxldmVsTGlzdFswXSA/IHRoaXMuX2JhY2tncm91bmRDb2xvciA6IG51bGw7IC8vIEFsbCBlbGVtZW50cyBpbiB0aGlzIGxheWVyIGFyZSBjbGVhcmVkLlxuXG4gICAgICBpZiAobGF5ZXIuX19zdGFydEluZGV4ID09PSBsYXllci5fX2VuZEluZGV4KSB7XG4gICAgICAgIGxheWVyLmNsZWFyKGZhbHNlLCBjbGVhckNvbG9yKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnQgPT09IGxheWVyLl9fc3RhcnRJbmRleCkge1xuICAgICAgICB2YXIgZmlyc3RFbCA9IGxpc3Rbc3RhcnRdO1xuXG4gICAgICAgIGlmICghZmlyc3RFbC5pbmNyZW1lbnRhbCB8fCAhZmlyc3RFbC5ub3RDbGVhciB8fCBwYWludEFsbCkge1xuICAgICAgICAgIGxheWVyLmNsZWFyKGZhbHNlLCBjbGVhckNvbG9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3RhcnQgPT09IC0xKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZvciBzb21lIHVua25vd24gcmVhc29uLiBkcmF3SW5kZXggaXMgLTEnKTtcbiAgICAgICAgc3RhcnQgPSBsYXllci5fX3N0YXJ0SW5kZXg7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxheWVyLl9fZW5kSW5kZXg7IGkrKykge1xuICAgICAgICB2YXIgZWwgPSBsaXN0W2ldO1xuXG4gICAgICAgIHRoaXMuX2RvUGFpbnRFbChlbCwgbGF5ZXIsIHBhaW50QWxsLCBzY29wZSk7XG5cbiAgICAgICAgZWwuX19kaXJ0eSA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh1c2VUaW1lcikge1xuICAgICAgICAgIC8vIERhdGUubm93IGNhbiBiZSBleGVjdXRlZCBpbiAxMywwMjUsMzA1IG9wcy9zZWNvbmQuXG4gICAgICAgICAgdmFyIGRUaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTsgLy8gR2l2ZSAxNSBtaWxsaXNlY29uZCB0byBkcmF3LlxuICAgICAgICAgIC8vIFRoZSByZXN0IGVsZW1lbnRzIHdpbGwgYmUgZHJhd24gaW4gdGhlIG5leHQgZnJhbWUuXG5cbiAgICAgICAgICBpZiAoZFRpbWUgPiAxNSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxheWVyLl9fZHJhd0luZGV4ID0gaTtcblxuICAgICAgaWYgKGxheWVyLl9fZHJhd0luZGV4IDwgbGF5ZXIuX19lbmRJbmRleCkge1xuICAgICAgICBmaW5pc2hlZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2NvcGUucHJldkVsQ2xpcFBhdGhzKSB7XG4gICAgICAgIC8vIE5lZWRzIHJlc3RvcmUgdGhlIHN0YXRlLiBJZiBsYXN0IGRyYXduIGVsZW1lbnQgaXMgaW4gdGhlIGNsaXBwaW5nIGFyZWEuXG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICB9XG5cbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuXG4gICAgaWYgKGVudi53eGEpIHtcbiAgICAgIC8vIEZsdXNoIGZvciB3ZWl4aW4gYXBwbGljYXRpb25cbiAgICAgIHV0aWwuZWFjaCh0aGlzLl9sYXllcnMsIGZ1bmN0aW9uIChsYXllcikge1xuICAgICAgICBpZiAobGF5ZXIgJiYgbGF5ZXIuY3R4ICYmIGxheWVyLmN0eC5kcmF3KSB7XG4gICAgICAgICAgbGF5ZXIuY3R4LmRyYXcoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbmlzaGVkO1xuICB9LFxuICBfZG9QYWludEVsOiBmdW5jdGlvbiAoZWwsIGN1cnJlbnRMYXllciwgZm9yY2VQYWludCwgc2NvcGUpIHtcbiAgICB2YXIgY3R4ID0gY3VycmVudExheWVyLmN0eDtcbiAgICB2YXIgbSA9IGVsLnRyYW5zZm9ybTtcblxuICAgIGlmICgoY3VycmVudExheWVyLl9fZGlydHkgfHwgZm9yY2VQYWludCkgJiYgLy8gSWdub3JlIGludmlzaWJsZSBlbGVtZW50XG4gICAgIWVsLmludmlzaWJsZSAvLyBJZ25vcmUgdHJhbnNwYXJlbnQgZWxlbWVudFxuICAgICYmIGVsLnN0eWxlLm9wYWNpdHkgIT09IDAgLy8gSWdub3JlIHNjYWxlIDAgZWxlbWVudCwgaW4gc29tZSBlbnZpcm9ubWVudCBsaWtlIG5vZGUtY2FudmFzXG4gICAgLy8gRHJhdyBhIHNjYWxlIDAgZWxlbWVudCBjYW4gY2F1c2UgYWxsIGZvbGxvd2luZyBkcmF3IHdyb25nXG4gICAgLy8gQW5kIHNldFRyYW5zZm9ybSB3aXRoIHNjYWxlIDAgd2lsbCBjYXVzZSBzZXQgYmFjayB0cmFuc2Zvcm0gZmFpbGVkLlxuICAgICYmICEobSAmJiAhbVswXSAmJiAhbVszXSkgLy8gSWdub3JlIGN1bGxlZCBlbGVtZW50XG4gICAgJiYgIShlbC5jdWxsaW5nICYmIGlzRGlzcGxheWFibGVDdWxsZWQoZWwsIHRoaXMuX3dpZHRoLCB0aGlzLl9oZWlnaHQpKSkge1xuICAgICAgdmFyIGNsaXBQYXRocyA9IGVsLl9fY2xpcFBhdGhzOyAvLyBPcHRpbWl6ZSB3aGVuIGNsaXBwaW5nIG9uIGdyb3VwIHdpdGggc2V2ZXJhbCBlbGVtZW50c1xuXG4gICAgICBpZiAoIXNjb3BlLnByZXZFbENsaXBQYXRocyB8fCBpc0NsaXBQYXRoQ2hhbmdlZChjbGlwUGF0aHMsIHNjb3BlLnByZXZFbENsaXBQYXRocykpIHtcbiAgICAgICAgLy8gSWYgaGFzIHByZXZpb3VzIGNsaXBwaW5nIHN0YXRlLCByZXN0b3JlIGZyb20gaXRcbiAgICAgICAgaWYgKHNjb3BlLnByZXZFbENsaXBQYXRocykge1xuICAgICAgICAgIGN1cnJlbnRMYXllci5jdHgucmVzdG9yZSgpO1xuICAgICAgICAgIHNjb3BlLnByZXZFbENsaXBQYXRocyA9IG51bGw7IC8vIFJlc2V0IHByZXZFbCBzaW5jZSBjb250ZXh0IGhhcyBiZWVuIHJlc3RvcmVkXG5cbiAgICAgICAgICBzY29wZS5wcmV2RWwgPSBudWxsO1xuICAgICAgICB9IC8vIE5ldyBjbGlwcGluZyBzdGF0ZVxuXG5cbiAgICAgICAgaWYgKGNsaXBQYXRocykge1xuICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgZG9DbGlwKGNsaXBQYXRocywgY3R4KTtcbiAgICAgICAgICBzY29wZS5wcmV2RWxDbGlwUGF0aHMgPSBjbGlwUGF0aHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZWwuYmVmb3JlQnJ1c2ggJiYgZWwuYmVmb3JlQnJ1c2goY3R4KTtcbiAgICAgIGVsLmJydXNoKGN0eCwgc2NvcGUucHJldkVsIHx8IG51bGwpO1xuICAgICAgc2NvcGUucHJldkVsID0gZWw7XG4gICAgICBlbC5hZnRlckJydXNoICYmIGVsLmFmdGVyQnJ1c2goY3R4KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIOiOt+WPliB6bGV2ZWwg5omA5Zyo5bGC77yM5aaC5p6c5LiN5a2Y5Zyo5YiZ5Lya5Yib5bu65LiA5Liq5paw55qE5bGCXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB6bGV2ZWxcbiAgICogQHBhcmFtIHtib29sZWFufSB2aXJ0dWFsIFZpcnR1YWwgbGF5ZXIgd2lsbCBub3QgYmUgaW5zZXJ0ZWQgaW50byBkb20uXG4gICAqIEByZXR1cm4ge21vZHVsZTp6cmVuZGVyL0xheWVyfVxuICAgKi9cbiAgZ2V0TGF5ZXI6IGZ1bmN0aW9uICh6bGV2ZWwsIHZpcnR1YWwpIHtcbiAgICBpZiAodGhpcy5fc2luZ2xlQ2FudmFzICYmICF0aGlzLl9uZWVkc01hbnVhbGx5Q29tcG9zaXRpbmcpIHtcbiAgICAgIHpsZXZlbCA9IENBTlZBU19aTEVWRUw7XG4gICAgfVxuXG4gICAgdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJzW3psZXZlbF07XG5cbiAgICBpZiAoIWxheWVyKSB7XG4gICAgICAvLyBDcmVhdGUgYSBuZXcgbGF5ZXJcbiAgICAgIGxheWVyID0gbmV3IExheWVyKCd6cl8nICsgemxldmVsLCB0aGlzLCB0aGlzLmRwcik7XG4gICAgICBsYXllci56bGV2ZWwgPSB6bGV2ZWw7XG4gICAgICBsYXllci5fX2J1aWx0aW5fXyA9IHRydWU7XG5cbiAgICAgIGlmICh0aGlzLl9sYXllckNvbmZpZ1t6bGV2ZWxdKSB7XG4gICAgICAgIHV0aWwubWVyZ2UobGF5ZXIsIHRoaXMuX2xheWVyQ29uZmlnW3psZXZlbF0sIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodmlydHVhbCkge1xuICAgICAgICBsYXllci52aXJ0dWFsID0gdmlydHVhbDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbnNlcnRMYXllcih6bGV2ZWwsIGxheWVyKTsgLy8gQ29udGV4dCBpcyBjcmVhdGVkIGFmdGVyIGRvbSBpbnNlcnRlZCB0byBkb2N1bWVudFxuICAgICAgLy8gT3IgZXhjYW52YXMgd2lsbCBnZXQgMHB4IGNsaWVudFdpZHRoIGFuZCBjbGllbnRIZWlnaHRcblxuICAgICAgbGF5ZXIuaW5pdENvbnRleHQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGF5ZXI7XG4gIH0sXG4gIGluc2VydExheWVyOiBmdW5jdGlvbiAoemxldmVsLCBsYXllcikge1xuICAgIHZhciBsYXllcnNNYXAgPSB0aGlzLl9sYXllcnM7XG4gICAgdmFyIHpsZXZlbExpc3QgPSB0aGlzLl96bGV2ZWxMaXN0O1xuICAgIHZhciBsZW4gPSB6bGV2ZWxMaXN0Lmxlbmd0aDtcbiAgICB2YXIgcHJldkxheWVyID0gbnVsbDtcbiAgICB2YXIgaSA9IC0xO1xuICAgIHZhciBkb21Sb290ID0gdGhpcy5fZG9tUm9vdDtcblxuICAgIGlmIChsYXllcnNNYXBbemxldmVsXSkge1xuICAgICAgbG9nKCdaTGV2ZWwgJyArIHpsZXZlbCArICcgaGFzIGJlZW4gdXNlZCBhbHJlYWR5Jyk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBDaGVjayBpZiBpcyBhIHZhbGlkIGxheWVyXG5cblxuICAgIGlmICghaXNMYXllclZhbGlkKGxheWVyKSkge1xuICAgICAgbG9nKCdMYXllciBvZiB6bGV2ZWwgJyArIHpsZXZlbCArICcgaXMgbm90IHZhbGlkJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGxlbiA+IDAgJiYgemxldmVsID4gemxldmVsTGlzdFswXSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbiAtIDE7IGkrKykge1xuICAgICAgICBpZiAoemxldmVsTGlzdFtpXSA8IHpsZXZlbCAmJiB6bGV2ZWxMaXN0W2kgKyAxXSA+IHpsZXZlbCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHByZXZMYXllciA9IGxheWVyc01hcFt6bGV2ZWxMaXN0W2ldXTtcbiAgICB9XG5cbiAgICB6bGV2ZWxMaXN0LnNwbGljZShpICsgMSwgMCwgemxldmVsKTtcbiAgICBsYXllcnNNYXBbemxldmVsXSA9IGxheWVyOyAvLyBWaXR1YWwgbGF5ZXIgd2lsbCBub3QgZGlyZWN0bHkgc2hvdyBvbiB0aGUgc2NyZWVuLlxuICAgIC8vIChJdCBjYW4gYmUgYSBXZWJHTCBsYXllciBhbmQgYXNzaWduZWQgdG8gYSBaSW1hZ2UgZWxlbWVudClcbiAgICAvLyBCdXQgaXQgc3RpbGwgdW5kZXIgbWFuYWdlbWVudCBvZiB6cmVuZGVyLlxuXG4gICAgaWYgKCFsYXllci52aXJ0dWFsKSB7XG4gICAgICBpZiAocHJldkxheWVyKSB7XG4gICAgICAgIHZhciBwcmV2RG9tID0gcHJldkxheWVyLmRvbTtcblxuICAgICAgICBpZiAocHJldkRvbS5uZXh0U2libGluZykge1xuICAgICAgICAgIGRvbVJvb3QuaW5zZXJ0QmVmb3JlKGxheWVyLmRvbSwgcHJldkRvbS5uZXh0U2libGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZG9tUm9vdC5hcHBlbmRDaGlsZChsYXllci5kb20pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZG9tUm9vdC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgZG9tUm9vdC5pbnNlcnRCZWZvcmUobGF5ZXIuZG9tLCBkb21Sb290LmZpcnN0Q2hpbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRvbVJvb3QuYXBwZW5kQ2hpbGQobGF5ZXIuZG9tKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgLy8gSXRlcmF0ZSBlYWNoIGxheWVyXG4gIGVhY2hMYXllcjogZnVuY3Rpb24gKGNiLCBjb250ZXh0KSB7XG4gICAgdmFyIHpsZXZlbExpc3QgPSB0aGlzLl96bGV2ZWxMaXN0O1xuICAgIHZhciB6O1xuICAgIHZhciBpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHpsZXZlbExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHogPSB6bGV2ZWxMaXN0W2ldO1xuICAgICAgY2IuY2FsbChjb250ZXh0LCB0aGlzLl9sYXllcnNbel0sIHopO1xuICAgIH1cbiAgfSxcbiAgLy8gSXRlcmF0ZSBlYWNoIGJ1aWxkaW4gbGF5ZXJcbiAgZWFjaEJ1aWx0aW5MYXllcjogZnVuY3Rpb24gKGNiLCBjb250ZXh0KSB7XG4gICAgdmFyIHpsZXZlbExpc3QgPSB0aGlzLl96bGV2ZWxMaXN0O1xuICAgIHZhciBsYXllcjtcbiAgICB2YXIgejtcbiAgICB2YXIgaTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB6bGV2ZWxMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB6ID0gemxldmVsTGlzdFtpXTtcbiAgICAgIGxheWVyID0gdGhpcy5fbGF5ZXJzW3pdO1xuXG4gICAgICBpZiAobGF5ZXIuX19idWlsdGluX18pIHtcbiAgICAgICAgY2IuY2FsbChjb250ZXh0LCBsYXllciwgeik7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICAvLyBJdGVyYXRlIGVhY2ggb3RoZXIgbGF5ZXIgZXhjZXB0IGJ1aWxkaW4gbGF5ZXJcbiAgZWFjaE90aGVyTGF5ZXI6IGZ1bmN0aW9uIChjYiwgY29udGV4dCkge1xuICAgIHZhciB6bGV2ZWxMaXN0ID0gdGhpcy5femxldmVsTGlzdDtcbiAgICB2YXIgbGF5ZXI7XG4gICAgdmFyIHo7XG4gICAgdmFyIGk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgemxldmVsTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgeiA9IHpsZXZlbExpc3RbaV07XG4gICAgICBsYXllciA9IHRoaXMuX2xheWVyc1t6XTtcblxuICAgICAgaWYgKCFsYXllci5fX2J1aWx0aW5fXykge1xuICAgICAgICBjYi5jYWxsKGNvbnRleHQsIGxheWVyLCB6KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIOiOt+WPluaJgOacieW3suWIm+W7uueahOWxglxuICAgKiBAcGFyYW0ge0FycmF5Ljxtb2R1bGU6enJlbmRlci9MYXllcj59IFtwcmV2TGF5ZXJdXG4gICAqL1xuICBnZXRMYXllcnM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbGF5ZXJzO1xuICB9LFxuICBfdXBkYXRlTGF5ZXJTdGF0dXM6IGZ1bmN0aW9uIChsaXN0KSB7XG4gICAgdGhpcy5lYWNoQnVpbHRpbkxheWVyKGZ1bmN0aW9uIChsYXllciwgeikge1xuICAgICAgbGF5ZXIuX19kaXJ0eSA9IGxheWVyLl9fdXNlZCA9IGZhbHNlO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gdXBkYXRlUHJldkxheWVyKGlkeCkge1xuICAgICAgaWYgKHByZXZMYXllcikge1xuICAgICAgICBpZiAocHJldkxheWVyLl9fZW5kSW5kZXggIT09IGlkeCkge1xuICAgICAgICAgIHByZXZMYXllci5fX2RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZMYXllci5fX2VuZEluZGV4ID0gaWR4O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9zaW5nbGVDYW52YXMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZWwgPSBsaXN0W2ldO1xuXG4gICAgICAgIGlmIChlbC56bGV2ZWwgIT09IGxpc3RbaSAtIDFdLnpsZXZlbCB8fCBlbC5pbmNyZW1lbnRhbCkge1xuICAgICAgICAgIHRoaXMuX25lZWRzTWFudWFsbHlDb21wb3NpdGluZyA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldkxheWVyID0gbnVsbDtcbiAgICB2YXIgaW5jcmVtZW50YWxMYXllckNvdW50ID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGVsID0gbGlzdFtpXTtcbiAgICAgIHZhciB6bGV2ZWwgPSBlbC56bGV2ZWw7XG4gICAgICB2YXIgbGF5ZXI7IC8vIFBFTkRJTkcgSWYgY2hhbmdlIG9uZSBpbmNyZW1lbnRhbCBlbGVtZW50IHN0eWxlID9cbiAgICAgIC8vIFRPRE8gV2hlcmUgdGhlcmUgYXJlIG5vbi1pbmNyZW1lbnRhbCBlbGVtZW50cyBiZXR3ZWVuIGluY3JlbWVudGFsIGVsZW1lbnRzLlxuXG4gICAgICBpZiAoZWwuaW5jcmVtZW50YWwpIHtcbiAgICAgICAgbGF5ZXIgPSB0aGlzLmdldExheWVyKHpsZXZlbCArIElOQ1JFTUVOVEFMX0lOQywgdGhpcy5fbmVlZHNNYW51YWxseUNvbXBvc2l0aW5nKTtcbiAgICAgICAgbGF5ZXIuaW5jcmVtZW50YWwgPSB0cnVlO1xuICAgICAgICBpbmNyZW1lbnRhbExheWVyQ291bnQgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGF5ZXIgPSB0aGlzLmdldExheWVyKHpsZXZlbCArIChpbmNyZW1lbnRhbExheWVyQ291bnQgPiAwID8gRUxfQUZURVJfSU5DUkVNRU5UQUxfSU5DIDogMCksIHRoaXMuX25lZWRzTWFudWFsbHlDb21wb3NpdGluZyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghbGF5ZXIuX19idWlsdGluX18pIHtcbiAgICAgICAgbG9nKCdaTGV2ZWwgJyArIHpsZXZlbCArICcgaGFzIGJlZW4gdXNlZCBieSB1bmtvd24gbGF5ZXIgJyArIGxheWVyLmlkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxheWVyICE9PSBwcmV2TGF5ZXIpIHtcbiAgICAgICAgbGF5ZXIuX191c2VkID0gdHJ1ZTtcblxuICAgICAgICBpZiAobGF5ZXIuX19zdGFydEluZGV4ICE9PSBpKSB7XG4gICAgICAgICAgbGF5ZXIuX19kaXJ0eSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBsYXllci5fX3N0YXJ0SW5kZXggPSBpO1xuXG4gICAgICAgIGlmICghbGF5ZXIuaW5jcmVtZW50YWwpIHtcbiAgICAgICAgICBsYXllci5fX2RyYXdJbmRleCA9IGk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTWFyayBsYXllciBkcmF3IGluZGV4IG5lZWRzIHRvIHVwZGF0ZS5cbiAgICAgICAgICBsYXllci5fX2RyYXdJbmRleCA9IC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlUHJldkxheWVyKGkpO1xuICAgICAgICBwcmV2TGF5ZXIgPSBsYXllcjtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsLl9fZGlydHkpIHtcbiAgICAgICAgbGF5ZXIuX19kaXJ0eSA9IHRydWU7XG5cbiAgICAgICAgaWYgKGxheWVyLmluY3JlbWVudGFsICYmIGxheWVyLl9fZHJhd0luZGV4IDwgMCkge1xuICAgICAgICAgIC8vIFN0YXJ0IGRyYXcgZnJvbSB0aGUgZmlyc3QgZGlydHkgZWxlbWVudC5cbiAgICAgICAgICBsYXllci5fX2RyYXdJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVQcmV2TGF5ZXIoaSk7XG4gICAgdGhpcy5lYWNoQnVpbHRpbkxheWVyKGZ1bmN0aW9uIChsYXllciwgeikge1xuICAgICAgLy8gVXNlZCBpbiBsYXN0IGZyYW1lIGJ1dCBub3QgaW4gdGhpcyBmcmFtZS4gTmVlZHMgY2xlYXJcbiAgICAgIGlmICghbGF5ZXIuX191c2VkICYmIGxheWVyLmdldEVsZW1lbnRDb3VudCgpID4gMCkge1xuICAgICAgICBsYXllci5fX2RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgbGF5ZXIuX19zdGFydEluZGV4ID0gbGF5ZXIuX19lbmRJbmRleCA9IGxheWVyLl9fZHJhd0luZGV4ID0gMDtcbiAgICAgIH0gLy8gRm9yIGluY3JlbWVudGFsIGxheWVyLiBJbiBjYXNlIHN0YXJ0IGluZGV4IGNoYW5nZWQgYW5kIG5vIGVsZW1lbnRzIGFyZSBkaXJ0eS5cblxuXG4gICAgICBpZiAobGF5ZXIuX19kaXJ0eSAmJiBsYXllci5fX2RyYXdJbmRleCA8IDApIHtcbiAgICAgICAgbGF5ZXIuX19kcmF3SW5kZXggPSBsYXllci5fX3N0YXJ0SW5kZXg7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOa4hemZpGhvdmVy5bGC5aSW5omA5pyJ5YaF5a65XG4gICAqL1xuICBjbGVhcjogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZWFjaEJ1aWx0aW5MYXllcih0aGlzLl9jbGVhckxheWVyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgX2NsZWFyTGF5ZXI6IGZ1bmN0aW9uIChsYXllcikge1xuICAgIGxheWVyLmNsZWFyKCk7XG4gIH0sXG4gIHNldEJhY2tncm91bmRDb2xvcjogZnVuY3Rpb24gKGJhY2tncm91bmRDb2xvcikge1xuICAgIHRoaXMuX2JhY2tncm91bmRDb2xvciA9IGJhY2tncm91bmRDb2xvcjtcbiAgfSxcblxuICAvKipcbiAgICog5L+u5pS55oyH5a6aemxldmVs55qE57uY5Yi25Y+C5pWwXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB6bGV2ZWxcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyDphY3nva7lr7nosaFcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtjb25maWcuY2xlYXJDb2xvcj0wXSDmr4/mrKHmuIXnqbrnlLvluIPnmoTpopzoibJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtjb25maWcubW90aW9uQmx1cj1mYWxzZV0g5piv5ZCm5byA5ZCv5Yqo5oCB5qih57OKXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbY29uZmlnLmxhc3RGcmFtZUFscGhhPTAuN11cbiAgICogICAgICAgICAgICAgICAgIOWcqOW8gOWQr+WKqOaAgeaooeeziueahOaXtuWAmeS9v+eUqO+8jOS4juS4iuS4gOW4p+a3t+WQiOeahGFscGhh5YC877yM5YC86LaK5aSn5bC+6L+56LaK5piO5pi+XG4gICAqL1xuICBjb25maWdMYXllcjogZnVuY3Rpb24gKHpsZXZlbCwgY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZykge1xuICAgICAgdmFyIGxheWVyQ29uZmlnID0gdGhpcy5fbGF5ZXJDb25maWc7XG5cbiAgICAgIGlmICghbGF5ZXJDb25maWdbemxldmVsXSkge1xuICAgICAgICBsYXllckNvbmZpZ1t6bGV2ZWxdID0gY29uZmlnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXRpbC5tZXJnZShsYXllckNvbmZpZ1t6bGV2ZWxdLCBjb25maWcsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3psZXZlbExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIF96bGV2ZWwgPSB0aGlzLl96bGV2ZWxMaXN0W2ldO1xuXG4gICAgICAgIGlmIChfemxldmVsID09PSB6bGV2ZWwgfHwgX3psZXZlbCA9PT0gemxldmVsICsgRUxfQUZURVJfSU5DUkVNRU5UQUxfSU5DKSB7XG4gICAgICAgICAgdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJzW196bGV2ZWxdO1xuICAgICAgICAgIHV0aWwubWVyZ2UobGF5ZXIsIGxheWVyQ29uZmlnW3psZXZlbF0sIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiDliKDpmaTmjIflrprlsYJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHpsZXZlbCDlsYLmiYDlnKjnmoR6bGV2ZWxcbiAgICovXG4gIGRlbExheWVyOiBmdW5jdGlvbiAoemxldmVsKSB7XG4gICAgdmFyIGxheWVycyA9IHRoaXMuX2xheWVycztcbiAgICB2YXIgemxldmVsTGlzdCA9IHRoaXMuX3psZXZlbExpc3Q7XG4gICAgdmFyIGxheWVyID0gbGF5ZXJzW3psZXZlbF07XG5cbiAgICBpZiAoIWxheWVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGF5ZXIuZG9tLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGF5ZXIuZG9tKTtcbiAgICBkZWxldGUgbGF5ZXJzW3psZXZlbF07XG4gICAgemxldmVsTGlzdC5zcGxpY2UodXRpbC5pbmRleE9mKHpsZXZlbExpc3QsIHpsZXZlbCksIDEpO1xuICB9LFxuXG4gIC8qKlxuICAgKiDljLrln5/lpKflsI/lj5jljJblkI7ph43nu5hcbiAgICovXG4gIHJlc2l6ZTogZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcbiAgICBpZiAoIXRoaXMuX2RvbVJvb3Quc3R5bGUpIHtcbiAgICAgIC8vIE1heWJlIGluIG5vZGUgb3Igd29ya2VyXG4gICAgICBpZiAod2lkdGggPT0gbnVsbCB8fCBoZWlnaHQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XG4gICAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICB0aGlzLmdldExheWVyKENBTlZBU19aTEVWRUwpLnJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGRvbVJvb3QgPSB0aGlzLl9kb21Sb290OyAvLyBGSVhNRSBXaHkgP1xuXG4gICAgICBkb21Sb290LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7IC8vIFNhdmUgaW5wdXQgdy9oXG5cbiAgICAgIHZhciBvcHRzID0gdGhpcy5fb3B0cztcbiAgICAgIHdpZHRoICE9IG51bGwgJiYgKG9wdHMud2lkdGggPSB3aWR0aCk7XG4gICAgICBoZWlnaHQgIT0gbnVsbCAmJiAob3B0cy5oZWlnaHQgPSBoZWlnaHQpO1xuICAgICAgd2lkdGggPSB0aGlzLl9nZXRTaXplKDApO1xuICAgICAgaGVpZ2h0ID0gdGhpcy5fZ2V0U2l6ZSgxKTtcbiAgICAgIGRvbVJvb3Quc3R5bGUuZGlzcGxheSA9ICcnOyAvLyDkvJjljJbmsqHmnInlrp7pmYXmlLnlj5jnmoRyZXNpemVcblxuICAgICAgaWYgKHRoaXMuX3dpZHRoICE9IHdpZHRoIHx8IGhlaWdodCAhPSB0aGlzLl9oZWlnaHQpIHtcbiAgICAgICAgZG9tUm9vdC5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4JztcbiAgICAgICAgZG9tUm9vdC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuXG4gICAgICAgIGZvciAodmFyIGlkIGluIHRoaXMuX2xheWVycykge1xuICAgICAgICAgIGlmICh0aGlzLl9sYXllcnMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICB0aGlzLl9sYXllcnNbaWRdLnJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB1dGlsLmVhY2godGhpcy5fcHJvZ3Jlc3NpdmVMYXllcnMsIGZ1bmN0aW9uIChsYXllcikge1xuICAgICAgICAgIGxheWVyLnJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmVmcmVzaCh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fd2lkdGggPSB3aWR0aDtcbiAgICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICog5riF6Zmk5Y2V54us55qE5LiA5Liq5bGCXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB6bGV2ZWxcbiAgICovXG4gIGNsZWFyTGF5ZXI6IGZ1bmN0aW9uICh6bGV2ZWwpIHtcbiAgICB2YXIgbGF5ZXIgPSB0aGlzLl9sYXllcnNbemxldmVsXTtcblxuICAgIGlmIChsYXllcikge1xuICAgICAgbGF5ZXIuY2xlYXIoKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIOmHiuaUvlxuICAgKi9cbiAgZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucm9vdC5pbm5lckhUTUwgPSAnJztcbiAgICB0aGlzLnJvb3QgPSB0aGlzLnN0b3JhZ2UgPSB0aGlzLl9kb21Sb290ID0gdGhpcy5fbGF5ZXJzID0gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IGNhbnZhcyB3aGljaCBoYXMgYWxsIHRoaW5nIHJlbmRlcmVkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5iYWNrZ3JvdW5kQ29sb3JdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5waXhlbFJhdGlvXVxuICAgKi9cbiAgZ2V0UmVuZGVyZWRDYW52YXM6IGZ1bmN0aW9uIChvcHRzKSB7XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgICBpZiAodGhpcy5fc2luZ2xlQ2FudmFzICYmICF0aGlzLl9jb21wb3NpdGVNYW51YWxseSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2xheWVyc1tDQU5WQVNfWkxFVkVMXS5kb207XG4gICAgfVxuXG4gICAgdmFyIGltYWdlTGF5ZXIgPSBuZXcgTGF5ZXIoJ2ltYWdlJywgdGhpcywgb3B0cy5waXhlbFJhdGlvIHx8IHRoaXMuZHByKTtcbiAgICBpbWFnZUxheWVyLmluaXRDb250ZXh0KCk7XG4gICAgaW1hZ2VMYXllci5jbGVhcihmYWxzZSwgb3B0cy5iYWNrZ3JvdW5kQ29sb3IgfHwgdGhpcy5fYmFja2dyb3VuZENvbG9yKTtcblxuICAgIGlmIChvcHRzLnBpeGVsUmF0aW8gPD0gdGhpcy5kcHIpIHtcbiAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgdmFyIHdpZHRoID0gaW1hZ2VMYXllci5kb20ud2lkdGg7XG4gICAgICB2YXIgaGVpZ2h0ID0gaW1hZ2VMYXllci5kb20uaGVpZ2h0O1xuICAgICAgdmFyIGN0eCA9IGltYWdlTGF5ZXIuY3R4O1xuICAgICAgdGhpcy5lYWNoTGF5ZXIoZnVuY3Rpb24gKGxheWVyKSB7XG4gICAgICAgIGlmIChsYXllci5fX2J1aWx0aW5fXykge1xuICAgICAgICAgIGN0eC5kcmF3SW1hZ2UobGF5ZXIuZG9tLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfSBlbHNlIGlmIChsYXllci5yZW5kZXJUb0NhbnZhcykge1xuICAgICAgICAgIGltYWdlTGF5ZXIuY3R4LnNhdmUoKTtcbiAgICAgICAgICBsYXllci5yZW5kZXJUb0NhbnZhcyhpbWFnZUxheWVyLmN0eCk7XG4gICAgICAgICAgaW1hZ2VMYXllci5jdHgucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUEVORElORywgZWNoYXJ0cy1nbCBhbmQgaW5jcmVtZW50YWwgcmVuZGVyaW5nLlxuICAgICAgdmFyIHNjb3BlID0ge307XG4gICAgICB2YXIgZGlzcGxheUxpc3QgPSB0aGlzLnN0b3JhZ2UuZ2V0RGlzcGxheUxpc3QodHJ1ZSk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlzcGxheUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGVsID0gZGlzcGxheUxpc3RbaV07XG5cbiAgICAgICAgdGhpcy5fZG9QYWludEVsKGVsLCBpbWFnZUxheWVyLCB0cnVlLCBzY29wZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGltYWdlTGF5ZXIuZG9tO1xuICB9LFxuXG4gIC8qKlxuICAgKiDojrflj5bnu5jlm77ljLrln5/lrr3luqZcbiAgICovXG4gIGdldFdpZHRoOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dpZHRoO1xuICB9LFxuXG4gIC8qKlxuICAgKiDojrflj5bnu5jlm77ljLrln5/pq5jluqZcbiAgICovXG4gIGdldEhlaWdodDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XG4gIH0sXG4gIF9nZXRTaXplOiBmdW5jdGlvbiAod2hJZHgpIHtcbiAgICB2YXIgb3B0cyA9IHRoaXMuX29wdHM7XG4gICAgdmFyIHdoID0gWyd3aWR0aCcsICdoZWlnaHQnXVt3aElkeF07XG4gICAgdmFyIGN3aCA9IFsnY2xpZW50V2lkdGgnLCAnY2xpZW50SGVpZ2h0J11bd2hJZHhdO1xuICAgIHZhciBwbHQgPSBbJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdUb3AnXVt3aElkeF07XG4gICAgdmFyIHByYiA9IFsncGFkZGluZ1JpZ2h0JywgJ3BhZGRpbmdCb3R0b20nXVt3aElkeF07XG5cbiAgICBpZiAob3B0c1t3aF0gIT0gbnVsbCAmJiBvcHRzW3doXSAhPT0gJ2F1dG8nKSB7XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdChvcHRzW3doXSk7XG4gICAgfVxuXG4gICAgdmFyIHJvb3QgPSB0aGlzLnJvb3Q7IC8vIElFOCBkb2VzIG5vdCBzdXBwb3J0IGdldENvbXB1dGVkU3R5bGUsIGJ1dCBpdCB1c2UgVk1MLlxuXG4gICAgdmFyIHN0bCA9IGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUocm9vdCk7XG4gICAgcmV0dXJuIChyb290W2N3aF0gfHwgcGFyc2VJbnQxMChzdGxbd2hdKSB8fCBwYXJzZUludDEwKHJvb3Quc3R5bGVbd2hdKSkgLSAocGFyc2VJbnQxMChzdGxbcGx0XSkgfHwgMCkgLSAocGFyc2VJbnQxMChzdGxbcHJiXSkgfHwgMCkgfCAwO1xuICB9LFxuICBwYXRoVG9JbWFnZTogZnVuY3Rpb24gKHBhdGgsIGRwcikge1xuICAgIGRwciA9IGRwciB8fCB0aGlzLmRwcjtcbiAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIHZhciByZWN0ID0gcGF0aC5nZXRCb3VuZGluZ1JlY3QoKTtcbiAgICB2YXIgc3R5bGUgPSBwYXRoLnN0eWxlO1xuICAgIHZhciBzaGFkb3dCbHVyU2l6ZSA9IHN0eWxlLnNoYWRvd0JsdXIgKiBkcHI7XG4gICAgdmFyIHNoYWRvd09mZnNldFggPSBzdHlsZS5zaGFkb3dPZmZzZXRYICogZHByO1xuICAgIHZhciBzaGFkb3dPZmZzZXRZID0gc3R5bGUuc2hhZG93T2Zmc2V0WSAqIGRwcjtcbiAgICB2YXIgbGluZVdpZHRoID0gc3R5bGUuaGFzU3Ryb2tlKCkgPyBzdHlsZS5saW5lV2lkdGggOiAwO1xuICAgIHZhciBsZWZ0TWFyZ2luID0gTWF0aC5tYXgobGluZVdpZHRoIC8gMiwgLXNoYWRvd09mZnNldFggKyBzaGFkb3dCbHVyU2l6ZSk7XG4gICAgdmFyIHJpZ2h0TWFyZ2luID0gTWF0aC5tYXgobGluZVdpZHRoIC8gMiwgc2hhZG93T2Zmc2V0WCArIHNoYWRvd0JsdXJTaXplKTtcbiAgICB2YXIgdG9wTWFyZ2luID0gTWF0aC5tYXgobGluZVdpZHRoIC8gMiwgLXNoYWRvd09mZnNldFkgKyBzaGFkb3dCbHVyU2l6ZSk7XG4gICAgdmFyIGJvdHRvbU1hcmdpbiA9IE1hdGgubWF4KGxpbmVXaWR0aCAvIDIsIHNoYWRvd09mZnNldFkgKyBzaGFkb3dCbHVyU2l6ZSk7XG4gICAgdmFyIHdpZHRoID0gcmVjdC53aWR0aCArIGxlZnRNYXJnaW4gKyByaWdodE1hcmdpbjtcbiAgICB2YXIgaGVpZ2h0ID0gcmVjdC5oZWlnaHQgKyB0b3BNYXJnaW4gKyBib3R0b21NYXJnaW47XG4gICAgY2FudmFzLndpZHRoID0gd2lkdGggKiBkcHI7XG4gICAgY2FudmFzLmhlaWdodCA9IGhlaWdodCAqIGRwcjtcbiAgICBjdHguc2NhbGUoZHByLCBkcHIpO1xuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgY3R4LmRwciA9IGRwcjtcbiAgICB2YXIgcGF0aFRyYW5zZm9ybSA9IHtcbiAgICAgIHBvc2l0aW9uOiBwYXRoLnBvc2l0aW9uLFxuICAgICAgcm90YXRpb246IHBhdGgucm90YXRpb24sXG4gICAgICBzY2FsZTogcGF0aC5zY2FsZVxuICAgIH07XG4gICAgcGF0aC5wb3NpdGlvbiA9IFtsZWZ0TWFyZ2luIC0gcmVjdC54LCB0b3BNYXJnaW4gLSByZWN0LnldO1xuICAgIHBhdGgucm90YXRpb24gPSAwO1xuICAgIHBhdGguc2NhbGUgPSBbMSwgMV07XG4gICAgcGF0aC51cGRhdGVUcmFuc2Zvcm0oKTtcblxuICAgIGlmIChwYXRoKSB7XG4gICAgICBwYXRoLmJydXNoKGN0eCk7XG4gICAgfVxuXG4gICAgdmFyIEltYWdlU2hhcGUgPSBJbWFnZTtcbiAgICB2YXIgaW1nU2hhcGUgPSBuZXcgSW1hZ2VTaGFwZSh7XG4gICAgICBzdHlsZToge1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwLFxuICAgICAgICBpbWFnZTogY2FudmFzXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAocGF0aFRyYW5zZm9ybS5wb3NpdGlvbiAhPSBudWxsKSB7XG4gICAgICBpbWdTaGFwZS5wb3NpdGlvbiA9IHBhdGgucG9zaXRpb24gPSBwYXRoVHJhbnNmb3JtLnBvc2l0aW9uO1xuICAgIH1cblxuICAgIGlmIChwYXRoVHJhbnNmb3JtLnJvdGF0aW9uICE9IG51bGwpIHtcbiAgICAgIGltZ1NoYXBlLnJvdGF0aW9uID0gcGF0aC5yb3RhdGlvbiA9IHBhdGhUcmFuc2Zvcm0ucm90YXRpb247XG4gICAgfVxuXG4gICAgaWYgKHBhdGhUcmFuc2Zvcm0uc2NhbGUgIT0gbnVsbCkge1xuICAgICAgaW1nU2hhcGUuc2NhbGUgPSBwYXRoLnNjYWxlID0gcGF0aFRyYW5zZm9ybS5zY2FsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW1nU2hhcGU7XG4gIH1cbn07XG52YXIgX2RlZmF1bHQgPSBQYWludGVyO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgdXRpbCA9IHJlcXVpcmUoXCIuL2NvcmUvdXRpbFwiKTtcblxudmFyIGVudiA9IHJlcXVpcmUoXCIuL2NvcmUvZW52XCIpO1xuXG52YXIgR3JvdXAgPSByZXF1aXJlKFwiLi9jb250YWluZXIvR3JvdXBcIik7XG5cbnZhciB0aW1zb3J0ID0gcmVxdWlyZShcIi4vY29yZS90aW1zb3J0XCIpO1xuXG4vLyBVc2UgdGltc29ydCBiZWNhdXNlIGluIG1vc3QgY2FzZSBlbGVtZW50cyBhcmUgcGFydGlhbGx5IHNvcnRlZFxuLy8gaHR0cHM6Ly9qc2ZpZGRsZS5uZXQvcGlzc2FuZy9qcjR4N21kbS84L1xuZnVuY3Rpb24gc2hhcGVDb21wYXJlRnVuYyhhLCBiKSB7XG4gIGlmIChhLnpsZXZlbCA9PT0gYi56bGV2ZWwpIHtcbiAgICBpZiAoYS56ID09PSBiLnopIHtcbiAgICAgIC8vIGlmIChhLnoyID09PSBiLnoyKSB7XG4gICAgICAvLyAgICAgLy8gRklYTUUgU2xvdyBoYXMgcmVuZGVyaWR4IGNvbXBhcmVcbiAgICAgIC8vICAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIwODgzNDIxL3NvcnRpbmctaW4tamF2YXNjcmlwdC1zaG91bGQtZXZlcnktY29tcGFyZS1mdW5jdGlvbi1oYXZlLWEtcmV0dXJuLTAtc3RhdGVtZW50XG4gICAgICAvLyAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Y4L3Y4L2Jsb2IvNDdjY2U1NDRhMzFlZDU1NzdmZmUyOTYzZjY3YWNiNDE0NGVlMDIzMi9zcmMvanMvYXJyYXkuanMjTDEwMTJcbiAgICAgIC8vICAgICByZXR1cm4gYS5fX3JlbmRlcmlkeCAtIGIuX19yZW5kZXJpZHg7XG4gICAgICAvLyB9XG4gICAgICByZXR1cm4gYS56MiAtIGIuejI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGEueiAtIGIuejtcbiAgfVxuXG4gIHJldHVybiBhLnpsZXZlbCAtIGIuemxldmVsO1xufVxuLyoqXG4gKiDlhoXlrrnku5PlupMgKE0pXG4gKiBAYWxpYXMgbW9kdWxlOnpyZW5kZXIvU3RvcmFnZVxuICogQGNvbnN0cnVjdG9yXG4gKi9cblxuXG52YXIgU3RvcmFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8ganNoaW50IGlnbm9yZTpsaW5lXG4gIHRoaXMuX3Jvb3RzID0gW107XG4gIHRoaXMuX2Rpc3BsYXlMaXN0ID0gW107XG4gIHRoaXMuX2Rpc3BsYXlMaXN0TGVuID0gMDtcbn07XG5cblN0b3JhZ2UucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU3RvcmFnZSxcblxuICAvKipcbiAgICogQHBhcmFtICB7RnVuY3Rpb259IGNiXG4gICAqXG4gICAqL1xuICB0cmF2ZXJzZTogZnVuY3Rpb24gKGNiLCBjb250ZXh0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9yb290cy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5fcm9vdHNbaV0udHJhdmVyc2UoY2IsIGNvbnRleHQpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICog6L+U5Zue5omA5pyJ5Zu+5b2i55qE57uY5Yi26Zif5YiXXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VwZGF0ZT1mYWxzZV0g5piv5ZCm5Zyo6L+U5Zue5YmN5pu05paw6K+l5pWw57uEXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luY2x1ZGVJZ25vcmU9ZmFsc2VdIOaYr+WQpuWMheWQqyBpZ25vcmUg55qE5pWw57uELCDlnKggdXBkYXRlIOS4uiB0cnVlIOeahOaXtuWAmeacieaViFxuICAgKlxuICAgKiDor6bop4F7QGxpbmsgbW9kdWxlOnpyZW5kZXIvZ3JhcGhpYy9EaXNwbGF5YWJsZS5wcm90b3R5cGUudXBkYXRlRGlzcGxheUxpc3R9XG4gICAqIEByZXR1cm4ge0FycmF5Ljxtb2R1bGU6enJlbmRlci9ncmFwaGljL0Rpc3BsYXlhYmxlPn1cbiAgICovXG4gIGdldERpc3BsYXlMaXN0OiBmdW5jdGlvbiAodXBkYXRlLCBpbmNsdWRlSWdub3JlKSB7XG4gICAgaW5jbHVkZUlnbm9yZSA9IGluY2x1ZGVJZ25vcmUgfHwgZmFsc2U7XG5cbiAgICBpZiAodXBkYXRlKSB7XG4gICAgICB0aGlzLnVwZGF0ZURpc3BsYXlMaXN0KGluY2x1ZGVJZ25vcmUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9kaXNwbGF5TGlzdDtcbiAgfSxcblxuICAvKipcbiAgICog5pu05paw5Zu+5b2i55qE57uY5Yi26Zif5YiX44CCXG4gICAqIOavj+asoee7mOWItuWJjemDveS8muiwg+eUqO+8jOivpeaWueazleS8muWFiOa3seW6puS8mOWFiOmBjeWOhuaVtOS4quagke+8jOabtOaWsOaJgOaciUdyb3Vw5ZKMU2hhcGXnmoTlj5jmjaLlubbkuJTmiormiYDmnInlj6/op4HnmoRTaGFwZeS/neWtmOWIsOaVsOe7hOS4re+8jFxuICAgKiDmnIDlkI7moLnmja7nu5jliLbnmoTkvJjlhYjnuqfvvIh6bGV2ZWwgPiB6ID4g5o+S5YWl6aG65bqP77yJ5o6S5bqP5b6X5Yiw57uY5Yi26Zif5YiXXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luY2x1ZGVJZ25vcmU9ZmFsc2VdIOaYr+WQpuWMheWQqyBpZ25vcmUg55qE5pWw57uEXG4gICAqL1xuICB1cGRhdGVEaXNwbGF5TGlzdDogZnVuY3Rpb24gKGluY2x1ZGVJZ25vcmUpIHtcbiAgICB0aGlzLl9kaXNwbGF5TGlzdExlbiA9IDA7XG4gICAgdmFyIHJvb3RzID0gdGhpcy5fcm9vdHM7XG4gICAgdmFyIGRpc3BsYXlMaXN0ID0gdGhpcy5fZGlzcGxheUxpc3Q7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcm9vdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHRoaXMuX3VwZGF0ZUFuZEFkZERpc3BsYXlhYmxlKHJvb3RzW2ldLCBudWxsLCBpbmNsdWRlSWdub3JlKTtcbiAgICB9XG5cbiAgICBkaXNwbGF5TGlzdC5sZW5ndGggPSB0aGlzLl9kaXNwbGF5TGlzdExlbjtcbiAgICBlbnYuY2FudmFzU3VwcG9ydGVkICYmIHRpbXNvcnQoZGlzcGxheUxpc3QsIHNoYXBlQ29tcGFyZUZ1bmMpO1xuICB9LFxuICBfdXBkYXRlQW5kQWRkRGlzcGxheWFibGU6IGZ1bmN0aW9uIChlbCwgY2xpcFBhdGhzLCBpbmNsdWRlSWdub3JlKSB7XG4gICAgaWYgKGVsLmlnbm9yZSAmJiAhaW5jbHVkZUlnbm9yZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGVsLmJlZm9yZVVwZGF0ZSgpO1xuXG4gICAgaWYgKGVsLl9fZGlydHkpIHtcbiAgICAgIGVsLnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIGVsLmFmdGVyVXBkYXRlKCk7XG4gICAgdmFyIHVzZXJTZXRDbGlwUGF0aCA9IGVsLmNsaXBQYXRoO1xuXG4gICAgaWYgKHVzZXJTZXRDbGlwUGF0aCkge1xuICAgICAgLy8gRklYTUUg5pWI546H5b2x5ZONXG4gICAgICBpZiAoY2xpcFBhdGhzKSB7XG4gICAgICAgIGNsaXBQYXRocyA9IGNsaXBQYXRocy5zbGljZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xpcFBhdGhzID0gW107XG4gICAgICB9XG5cbiAgICAgIHZhciBjdXJyZW50Q2xpcFBhdGggPSB1c2VyU2V0Q2xpcFBhdGg7XG4gICAgICB2YXIgcGFyZW50Q2xpcFBhdGggPSBlbDsgLy8gUmVjdXJzaXZlbHkgYWRkIGNsaXAgcGF0aFxuXG4gICAgICB3aGlsZSAoY3VycmVudENsaXBQYXRoKSB7XG4gICAgICAgIC8vIGNsaXBQYXRoIOeahOWPmOaNouaYr+WfuuS6juS9v+eUqOi/meS4qiBjbGlwUGF0aCDnmoTlhYPntKBcbiAgICAgICAgY3VycmVudENsaXBQYXRoLnBhcmVudCA9IHBhcmVudENsaXBQYXRoO1xuICAgICAgICBjdXJyZW50Q2xpcFBhdGgudXBkYXRlVHJhbnNmb3JtKCk7XG4gICAgICAgIGNsaXBQYXRocy5wdXNoKGN1cnJlbnRDbGlwUGF0aCk7XG4gICAgICAgIHBhcmVudENsaXBQYXRoID0gY3VycmVudENsaXBQYXRoO1xuICAgICAgICBjdXJyZW50Q2xpcFBhdGggPSBjdXJyZW50Q2xpcFBhdGguY2xpcFBhdGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVsLmlzR3JvdXApIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IGVsLl9jaGlsZHJlbjtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTsgLy8gRm9yY2UgdG8gbWFyayBhcyBkaXJ0eSBpZiBncm91cCBpcyBkaXJ0eVxuICAgICAgICAvLyBGSVhNRSBfX2RpcnR5UGF0aCA/XG5cbiAgICAgICAgaWYgKGVsLl9fZGlydHkpIHtcbiAgICAgICAgICBjaGlsZC5fX2RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3VwZGF0ZUFuZEFkZERpc3BsYXlhYmxlKGNoaWxkLCBjbGlwUGF0aHMsIGluY2x1ZGVJZ25vcmUpO1xuICAgICAgfSAvLyBNYXJrIGdyb3VwIGNsZWFuIGhlcmVcblxuXG4gICAgICBlbC5fX2RpcnR5ID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLl9fY2xpcFBhdGhzID0gY2xpcFBhdGhzO1xuICAgICAgdGhpcy5fZGlzcGxheUxpc3RbdGhpcy5fZGlzcGxheUxpc3RMZW4rK10gPSBlbDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIOa3u+WKoOWbvuW9oihTaGFwZSnmiJbogIXnu4QoR3JvdXAp5Yiw5qC56IqC54K5XG4gICAqIEBwYXJhbSB7bW9kdWxlOnpyZW5kZXIvRWxlbWVudH0gZWxcbiAgICovXG4gIGFkZFJvb3Q6IGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbC5fX3N0b3JhZ2UgPT09IHRoaXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWwgaW5zdGFuY2VvZiBHcm91cCkge1xuICAgICAgZWwuYWRkQ2hpbGRyZW5Ub1N0b3JhZ2UodGhpcyk7XG4gICAgfVxuXG4gICAgdGhpcy5hZGRUb1N0b3JhZ2UoZWwpO1xuXG4gICAgdGhpcy5fcm9vdHMucHVzaChlbCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOWIoOmZpOaMh+WumueahOWbvuW9oihTaGFwZSnmiJbogIXnu4QoR3JvdXApXG4gICAqIEBwYXJhbSB7c3RyaW5nfEFycmF5LjxzdHJpbmc+fSBbZWxdIOWmguaenOS4uuepuua4heepuuaVtOS4qlN0b3JhZ2VcbiAgICovXG4gIGRlbFJvb3Q6IGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbCA9PSBudWxsKSB7XG4gICAgICAvLyDkuI3mjIflrpplbOa4heepulxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9yb290cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcm9vdCA9IHRoaXMuX3Jvb3RzW2ldO1xuXG4gICAgICAgIGlmIChyb290IGluc3RhbmNlb2YgR3JvdXApIHtcbiAgICAgICAgICByb290LmRlbENoaWxkcmVuRnJvbVN0b3JhZ2UodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fcm9vdHMgPSBbXTtcbiAgICAgIHRoaXMuX2Rpc3BsYXlMaXN0ID0gW107XG4gICAgICB0aGlzLl9kaXNwbGF5TGlzdExlbiA9IDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGVsIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZWwubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRoaXMuZGVsUm9vdChlbFtpXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaWR4ID0gdXRpbC5pbmRleE9mKHRoaXMuX3Jvb3RzLCBlbCk7XG5cbiAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgIHRoaXMuZGVsRnJvbVN0b3JhZ2UoZWwpO1xuXG4gICAgICB0aGlzLl9yb290cy5zcGxpY2UoaWR4LCAxKTtcblxuICAgICAgaWYgKGVsIGluc3RhbmNlb2YgR3JvdXApIHtcbiAgICAgICAgZWwuZGVsQ2hpbGRyZW5Gcm9tU3RvcmFnZSh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGFkZFRvU3RvcmFnZTogZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbC5fX3N0b3JhZ2UgPSB0aGlzO1xuICAgICAgZWwuZGlydHkoZmFsc2UpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBkZWxGcm9tU3RvcmFnZTogZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbC5fX3N0b3JhZ2UgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiDmuIXnqbrlubbkuJTph4rmlL5TdG9yYWdlXG4gICAqL1xuICBkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fcmVuZGVyTGlzdCA9IHRoaXMuX3Jvb3RzID0gbnVsbDtcbiAgfSxcbiAgZGlzcGxheWFibGVTb3J0RnVuYzogc2hhcGVDb21wYXJlRnVuY1xufTtcbnZhciBfZGVmYXVsdCA9IFN0b3JhZ2U7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciB1dGlsID0gcmVxdWlyZShcIi4uL2NvcmUvdXRpbFwiKTtcblxudmFyIF9ldmVudCA9IHJlcXVpcmUoXCIuLi9jb3JlL2V2ZW50XCIpO1xuXG52YXIgRGlzcGF0Y2hlciA9IF9ldmVudC5EaXNwYXRjaGVyO1xuXG52YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gcmVxdWlyZShcIi4vcmVxdWVzdEFuaW1hdGlvbkZyYW1lXCIpO1xuXG52YXIgQW5pbWF0b3IgPSByZXF1aXJlKFwiLi9BbmltYXRvclwiKTtcblxuLyoqXG4gKiDliqjnlLvkuLvnsbssIOiwg+W6puWSjOeuoeeQhuaJgOacieWKqOeUu+aOp+WItuWZqFxuICpcbiAqIEBtb2R1bGUgenJlbmRlci9hbmltYXRpb24vQW5pbWF0aW9uXG4gKiBAYXV0aG9yIHBpc3NhbmcoaHR0cHM6Ly9naXRodWIuY29tL3Bpc3NhbmcpXG4gKi9cbi8vIFRPRE8gQWRkaXRpdmUgYW5pbWF0aW9uXG4vLyBodHRwOi8vaW9zb3RlcmljLmNvbS9hZGRpdGl2ZS1hbmltYXRpb25zLWFuaW1hdGV3aXRoZHVyYXRpb24taW4taW9zLTgvXG4vLyBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vdmlkZW9zL3d3ZGMyMDE0LyMyMzZcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBJWlJlbmRlclN0YWdlXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSB1cGRhdGVcbiAqL1xuXG4vKipcbiAqIEBhbGlhcyBtb2R1bGU6enJlbmRlci9hbmltYXRpb24vQW5pbWF0aW9uXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLm9uZnJhbWVdXG4gKiBAcGFyYW0ge0laUmVuZGVyU3RhZ2V9IFtvcHRpb25zLnN0YWdlXVxuICogQGV4YW1wbGVcbiAqICAgICB2YXIgYW5pbWF0aW9uID0gbmV3IEFuaW1hdGlvbigpO1xuICogICAgIHZhciBvYmogPSB7XG4gKiAgICAgICAgIHg6IDEwMCxcbiAqICAgICAgICAgeTogMTAwXG4gKiAgICAgfTtcbiAqICAgICBhbmltYXRpb24uYW5pbWF0ZShub2RlLnBvc2l0aW9uKVxuICogICAgICAgICAud2hlbigxMDAwLCB7XG4gKiAgICAgICAgICAgICB4OiA1MDAsXG4gKiAgICAgICAgICAgICB5OiA1MDBcbiAqICAgICAgICAgfSlcbiAqICAgICAgICAgLndoZW4oMjAwMCwge1xuICogICAgICAgICAgICAgeDogMTAwLFxuICogICAgICAgICAgICAgeTogMTAwXG4gKiAgICAgICAgIH0pXG4gKiAgICAgICAgIC5zdGFydCgnc3BsaW5lJyk7XG4gKi9cbnZhciBBbmltYXRpb24gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdGhpcy5zdGFnZSA9IG9wdGlvbnMuc3RhZ2UgfHwge307XG5cbiAgdGhpcy5vbmZyYW1lID0gb3B0aW9ucy5vbmZyYW1lIHx8IGZ1bmN0aW9uICgpIHt9OyAvLyBwcml2YXRlIHByb3BlcnRpZXNcblxuXG4gIHRoaXMuX2NsaXBzID0gW107XG4gIHRoaXMuX3J1bm5pbmcgPSBmYWxzZTtcbiAgdGhpcy5fdGltZTtcbiAgdGhpcy5fcGF1c2VkVGltZTtcbiAgdGhpcy5fcGF1c2VTdGFydDtcbiAgdGhpcy5fcGF1c2VkID0gZmFsc2U7XG4gIERpc3BhdGNoZXIuY2FsbCh0aGlzKTtcbn07XG5cbkFuaW1hdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBBbmltYXRpb24sXG5cbiAgLyoqXG4gICAqIOa3u+WKoCBjbGlwXG4gICAqIEBwYXJhbSB7bW9kdWxlOnpyZW5kZXIvYW5pbWF0aW9uL0NsaXB9IGNsaXBcbiAgICovXG4gIGFkZENsaXA6IGZ1bmN0aW9uIChjbGlwKSB7XG4gICAgdGhpcy5fY2xpcHMucHVzaChjbGlwKTtcbiAgfSxcblxuICAvKipcbiAgICog5re75YqgIGFuaW1hdG9yXG4gICAqIEBwYXJhbSB7bW9kdWxlOnpyZW5kZXIvYW5pbWF0aW9uL0FuaW1hdG9yfSBhbmltYXRvclxuICAgKi9cbiAgYWRkQW5pbWF0b3I6IGZ1bmN0aW9uIChhbmltYXRvcikge1xuICAgIGFuaW1hdG9yLmFuaW1hdGlvbiA9IHRoaXM7XG4gICAgdmFyIGNsaXBzID0gYW5pbWF0b3IuZ2V0Q2xpcHMoKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xpcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuYWRkQ2xpcChjbGlwc1tpXSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiDliKDpmaTliqjnlLvniYfmrrVcbiAgICogQHBhcmFtIHttb2R1bGU6enJlbmRlci9hbmltYXRpb24vQ2xpcH0gY2xpcFxuICAgKi9cbiAgcmVtb3ZlQ2xpcDogZnVuY3Rpb24gKGNsaXApIHtcbiAgICB2YXIgaWR4ID0gdXRpbC5pbmRleE9mKHRoaXMuX2NsaXBzLCBjbGlwKTtcblxuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgdGhpcy5fY2xpcHMuc3BsaWNlKGlkeCwgMSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiDliKDpmaTliqjnlLvniYfmrrVcbiAgICogQHBhcmFtIHttb2R1bGU6enJlbmRlci9hbmltYXRpb24vQW5pbWF0b3J9IGFuaW1hdG9yXG4gICAqL1xuICByZW1vdmVBbmltYXRvcjogZnVuY3Rpb24gKGFuaW1hdG9yKSB7XG4gICAgdmFyIGNsaXBzID0gYW5pbWF0b3IuZ2V0Q2xpcHMoKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xpcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2xpcChjbGlwc1tpXSk7XG4gICAgfVxuXG4gICAgYW5pbWF0b3IuYW5pbWF0aW9uID0gbnVsbDtcbiAgfSxcbiAgX3VwZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0aGlzLl9wYXVzZWRUaW1lO1xuXG4gICAgdmFyIGRlbHRhID0gdGltZSAtIHRoaXMuX3RpbWU7XG4gICAgdmFyIGNsaXBzID0gdGhpcy5fY2xpcHM7XG4gICAgdmFyIGxlbiA9IGNsaXBzLmxlbmd0aDtcbiAgICB2YXIgZGVmZXJyZWRFdmVudHMgPSBbXTtcbiAgICB2YXIgZGVmZXJyZWRDbGlwcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGNsaXAgPSBjbGlwc1tpXTtcbiAgICAgIHZhciBlID0gY2xpcC5zdGVwKHRpbWUsIGRlbHRhKTsgLy8gVGhyb3cgb3V0IHRoZSBldmVudHMgbmVlZCB0byBiZSBjYWxsZWQgYWZ0ZXJcbiAgICAgIC8vIHN0YWdlLnVwZGF0ZSwgbGlrZSBkZXN0cm95XG5cbiAgICAgIGlmIChlKSB7XG4gICAgICAgIGRlZmVycmVkRXZlbnRzLnB1c2goZSk7XG4gICAgICAgIGRlZmVycmVkQ2xpcHMucHVzaChjbGlwKTtcbiAgICAgIH1cbiAgICB9IC8vIFJlbW92ZSB0aGUgZmluaXNoZWQgY2xpcFxuXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjspIHtcbiAgICAgIGlmIChjbGlwc1tpXS5fbmVlZHNSZW1vdmUpIHtcbiAgICAgICAgY2xpcHNbaV0gPSBjbGlwc1tsZW4gLSAxXTtcbiAgICAgICAgY2xpcHMucG9wKCk7XG4gICAgICAgIGxlbi0tO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxlbiA9IGRlZmVycmVkRXZlbnRzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGRlZmVycmVkQ2xpcHNbaV0uZmlyZShkZWZlcnJlZEV2ZW50c1tpXSk7XG4gICAgfVxuXG4gICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgdGhpcy5vbmZyYW1lKGRlbHRhKTsgLy8gJ2ZyYW1lJyBzaG91bGQgYmUgdHJpZ2dlcmVkIGJlZm9yZSBzdGFnZSwgYmVjYXVzZSB1cHBlciBhcHBsaWNhdGlvblxuICAgIC8vIGRlcGVuZHMgb24gdGhlIHNlcXVlbmNlIChlLmcuLCBlY2hhcnRzLXN0cmVhbSBhbmQgZmluaXNoXG4gICAgLy8gZXZlbnQganVkZ2UpXG5cbiAgICB0aGlzLnRyaWdnZXIoJ2ZyYW1lJywgZGVsdGEpO1xuXG4gICAgaWYgKHRoaXMuc3RhZ2UudXBkYXRlKSB7XG4gICAgICB0aGlzLnN0YWdlLnVwZGF0ZSgpO1xuICAgIH1cbiAgfSxcbiAgX3N0YXJ0TG9vcDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLl9ydW5uaW5nID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIHN0ZXAoKSB7XG4gICAgICBpZiAoc2VsZi5fcnVubmluZykge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcCk7XG4gICAgICAgICFzZWxmLl9wYXVzZWQgJiYgc2VsZi5fdXBkYXRlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTdGFydCBhbmltYXRpb24uXG4gICAqL1xuICBzdGFydDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3RpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB0aGlzLl9wYXVzZWRUaW1lID0gMDtcblxuICAgIHRoaXMuX3N0YXJ0TG9vcCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTdG9wIGFuaW1hdGlvbi5cbiAgICovXG4gIHN0b3A6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFBhdXNlIGFuaW1hdGlvbi5cbiAgICovXG4gIHBhdXNlOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl9wYXVzZWQpIHtcbiAgICAgIHRoaXMuX3BhdXNlU3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgIHRoaXMuX3BhdXNlZCA9IHRydWU7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZXN1bWUgYW5pbWF0aW9uLlxuICAgKi9cbiAgcmVzdW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3BhdXNlZCkge1xuICAgICAgdGhpcy5fcGF1c2VkVGltZSArPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMuX3BhdXNlU3RhcnQ7XG4gICAgICB0aGlzLl9wYXVzZWQgPSBmYWxzZTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIENsZWFyIGFuaW1hdGlvbi5cbiAgICovXG4gIGNsZWFyOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fY2xpcHMgPSBbXTtcbiAgfSxcblxuICAvKipcbiAgICogV2hldGhlciBhbmltYXRpb24gZmluaXNoZWQuXG4gICAqL1xuICBpc0ZpbmlzaGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICF0aGlzLl9jbGlwcy5sZW5ndGg7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENyZWF0IGFuaW1hdG9yIGZvciBhIHRhcmdldCwgd2hvc2UgcHJvcHMgY2FuIGJlIGFuaW1hdGVkLlxuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IHRhcmdldFxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQHBhcmFtICB7Ym9vbGVhbn0gW29wdGlvbnMubG9vcD1mYWxzZV0gV2hldGhlciBsb29wIGFuaW1hdGlvbi5cbiAgICogQHBhcmFtICB7RnVuY3Rpb259IFtvcHRpb25zLmdldHRlcj1udWxsXSBHZXQgdmFsdWUgZnJvbSB0YXJnZXQuXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBbb3B0aW9ucy5zZXR0ZXI9bnVsbF0gU2V0IHZhbHVlIHRvIHRhcmdldC5cbiAgICogQHJldHVybiB7bW9kdWxlOnpyZW5kZXIvYW5pbWF0aW9uL0FuaW1hdGlvbn5BbmltYXRvcn1cbiAgICovXG4gIC8vIFRPRE8gR2FwXG4gIGFuaW1hdGU6IGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgYW5pbWF0b3IgPSBuZXcgQW5pbWF0b3IodGFyZ2V0LCBvcHRpb25zLmxvb3AsIG9wdGlvbnMuZ2V0dGVyLCBvcHRpb25zLnNldHRlcik7XG4gICAgdGhpcy5hZGRBbmltYXRvcihhbmltYXRvcik7XG4gICAgcmV0dXJuIGFuaW1hdG9yO1xuICB9XG59O1xudXRpbC5taXhpbihBbmltYXRpb24sIERpc3BhdGNoZXIpO1xudmFyIF9kZWZhdWx0ID0gQW5pbWF0aW9uO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgQ2xpcCA9IHJlcXVpcmUoXCIuL0NsaXBcIik7XG5cbnZhciBjb2xvciA9IHJlcXVpcmUoXCIuLi90b29sL2NvbG9yXCIpO1xuXG52YXIgX3V0aWwgPSByZXF1aXJlKFwiLi4vY29yZS91dGlsXCIpO1xuXG52YXIgaXNBcnJheUxpa2UgPSBfdXRpbC5pc0FycmF5TGlrZTtcblxuLyoqXG4gKiBAbW9kdWxlIGVjaGFydHMvYW5pbWF0aW9uL0FuaW1hdG9yXG4gKi9cbnZhciBhcnJheVNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG5mdW5jdGlvbiBkZWZhdWx0R2V0dGVyKHRhcmdldCwga2V5KSB7XG4gIHJldHVybiB0YXJnZXRba2V5XTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFNldHRlcih0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbn1cbi8qKlxuICogQHBhcmFtICB7bnVtYmVyfSBwMFxuICogQHBhcmFtICB7bnVtYmVyfSBwMVxuICogQHBhcmFtICB7bnVtYmVyfSBwZXJjZW50XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZU51bWJlcihwMCwgcDEsIHBlcmNlbnQpIHtcbiAgcmV0dXJuIChwMSAtIHAwKSAqIHBlcmNlbnQgKyBwMDtcbn1cbi8qKlxuICogQHBhcmFtICB7c3RyaW5nfSBwMFxuICogQHBhcmFtICB7c3RyaW5nfSBwMVxuICogQHBhcmFtICB7bnVtYmVyfSBwZXJjZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblxuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZVN0cmluZyhwMCwgcDEsIHBlcmNlbnQpIHtcbiAgcmV0dXJuIHBlcmNlbnQgPiAwLjUgPyBwMSA6IHAwO1xufVxuLyoqXG4gKiBAcGFyYW0gIHtBcnJheX0gcDBcbiAqIEBwYXJhbSAge0FycmF5fSBwMVxuICogQHBhcmFtICB7bnVtYmVyfSBwZXJjZW50XG4gKiBAcGFyYW0gIHtBcnJheX0gb3V0XG4gKiBAcGFyYW0gIHtudW1iZXJ9IGFyckRpbVxuICovXG5cblxuZnVuY3Rpb24gaW50ZXJwb2xhdGVBcnJheShwMCwgcDEsIHBlcmNlbnQsIG91dCwgYXJyRGltKSB7XG4gIHZhciBsZW4gPSBwMC5sZW5ndGg7XG5cbiAgaWYgKGFyckRpbSA9PSAxKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgb3V0W2ldID0gaW50ZXJwb2xhdGVOdW1iZXIocDBbaV0sIHAxW2ldLCBwZXJjZW50KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbjIgPSBsZW4gJiYgcDBbMF0ubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBsZW4yOyBqKyspIHtcbiAgICAgICAgb3V0W2ldW2pdID0gaW50ZXJwb2xhdGVOdW1iZXIocDBbaV1bal0sIHAxW2ldW2pdLCBwZXJjZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0gLy8gYXJyMCBpcyBzb3VyY2UgYXJyYXksIGFycjEgaXMgdGFyZ2V0IGFycmF5LlxuLy8gRG8gc29tZSBwcmVwcm9jZXNzIHRvIGF2b2lkIGVycm9yIGhhcHBlbmVkIHdoZW4gaW50ZXJwb2xhdGluZyBmcm9tIGFycjAgdG8gYXJyMVxuXG5cbmZ1bmN0aW9uIGZpbGxBcnIoYXJyMCwgYXJyMSwgYXJyRGltKSB7XG4gIHZhciBhcnIwTGVuID0gYXJyMC5sZW5ndGg7XG4gIHZhciBhcnIxTGVuID0gYXJyMS5sZW5ndGg7XG5cbiAgaWYgKGFycjBMZW4gIT09IGFycjFMZW4pIHtcbiAgICAvLyBGSVhNRSBOb3Qgd29yayBmb3IgVHlwZWRBcnJheVxuICAgIHZhciBpc1ByZXZpb3VzTGFyZ2VyID0gYXJyMExlbiA+IGFycjFMZW47XG5cbiAgICBpZiAoaXNQcmV2aW91c0xhcmdlcikge1xuICAgICAgLy8gQ3V0IHRoZSBwcmV2aW91c1xuICAgICAgYXJyMC5sZW5ndGggPSBhcnIxTGVuO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGaWxsIHRoZSBwcmV2aW91c1xuICAgICAgZm9yICh2YXIgaSA9IGFycjBMZW47IGkgPCBhcnIxTGVuOyBpKyspIHtcbiAgICAgICAgYXJyMC5wdXNoKGFyckRpbSA9PT0gMSA/IGFycjFbaV0gOiBhcnJheVNsaWNlLmNhbGwoYXJyMVtpXSkpO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBIYW5kbGluZyBOYU4gdmFsdWVcblxuXG4gIHZhciBsZW4yID0gYXJyMFswXSAmJiBhcnIwWzBdLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFycjAubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyRGltID09PSAxKSB7XG4gICAgICBpZiAoaXNOYU4oYXJyMFtpXSkpIHtcbiAgICAgICAgYXJyMFtpXSA9IGFycjFbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGVuMjsgaisrKSB7XG4gICAgICAgIGlmIChpc05hTihhcnIwW2ldW2pdKSkge1xuICAgICAgICAgIGFycjBbaV1bal0gPSBhcnIxW2ldW2pdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4vKipcbiAqIEBwYXJhbSAge0FycmF5fSBhcnIwXG4gKiBAcGFyYW0gIHtBcnJheX0gYXJyMVxuICogQHBhcmFtICB7bnVtYmVyfSBhcnJEaW1cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cblxuXG5mdW5jdGlvbiBpc0FycmF5U2FtZShhcnIwLCBhcnIxLCBhcnJEaW0pIHtcbiAgaWYgKGFycjAgPT09IGFycjEpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBsZW4gPSBhcnIwLmxlbmd0aDtcblxuICBpZiAobGVuICE9PSBhcnIxLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChhcnJEaW0gPT09IDEpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoYXJyMFtpXSAhPT0gYXJyMVtpXSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBsZW4yID0gYXJyMFswXS5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxlbjI7IGorKykge1xuICAgICAgICBpZiAoYXJyMFtpXVtqXSAhPT0gYXJyMVtpXVtqXSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBDYXRtdWxsIFJvbSBpbnRlcnBvbGF0ZSBhcnJheVxuICogQHBhcmFtICB7QXJyYXl9IHAwXG4gKiBAcGFyYW0gIHtBcnJheX0gcDFcbiAqIEBwYXJhbSAge0FycmF5fSBwMlxuICogQHBhcmFtICB7QXJyYXl9IHAzXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHRcbiAqIEBwYXJhbSAge251bWJlcn0gdDJcbiAqIEBwYXJhbSAge251bWJlcn0gdDNcbiAqIEBwYXJhbSAge0FycmF5fSBvdXRcbiAqIEBwYXJhbSAge251bWJlcn0gYXJyRGltXG4gKi9cblxuXG5mdW5jdGlvbiBjYXRtdWxsUm9tSW50ZXJwb2xhdGVBcnJheShwMCwgcDEsIHAyLCBwMywgdCwgdDIsIHQzLCBvdXQsIGFyckRpbSkge1xuICB2YXIgbGVuID0gcDAubGVuZ3RoO1xuXG4gIGlmIChhcnJEaW0gPT0gMSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIG91dFtpXSA9IGNhdG11bGxSb21JbnRlcnBvbGF0ZShwMFtpXSwgcDFbaV0sIHAyW2ldLCBwM1tpXSwgdCwgdDIsIHQzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbjIgPSBwMFswXS5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxlbjI7IGorKykge1xuICAgICAgICBvdXRbaV1bal0gPSBjYXRtdWxsUm9tSW50ZXJwb2xhdGUocDBbaV1bal0sIHAxW2ldW2pdLCBwMltpXVtqXSwgcDNbaV1bal0sIHQsIHQyLCB0Myk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4vKipcbiAqIENhdG11bGwgUm9tIGludGVycG9sYXRlIG51bWJlclxuICogQHBhcmFtICB7bnVtYmVyfSBwMFxuICogQHBhcmFtICB7bnVtYmVyfSBwMVxuICogQHBhcmFtICB7bnVtYmVyfSBwMlxuICogQHBhcmFtICB7bnVtYmVyfSBwM1xuICogQHBhcmFtICB7bnVtYmVyfSB0XG4gKiBAcGFyYW0gIHtudW1iZXJ9IHQyXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHQzXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuXG5mdW5jdGlvbiBjYXRtdWxsUm9tSW50ZXJwb2xhdGUocDAsIHAxLCBwMiwgcDMsIHQsIHQyLCB0Mykge1xuICB2YXIgdjAgPSAocDIgLSBwMCkgKiAwLjU7XG4gIHZhciB2MSA9IChwMyAtIHAxKSAqIDAuNTtcbiAgcmV0dXJuICgyICogKHAxIC0gcDIpICsgdjAgKyB2MSkgKiB0MyArICgtMyAqIChwMSAtIHAyKSAtIDIgKiB2MCAtIHYxKSAqIHQyICsgdjAgKiB0ICsgcDE7XG59XG5cbmZ1bmN0aW9uIGNsb25lVmFsdWUodmFsdWUpIHtcbiAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgIHZhciBsZW4gPSB2YWx1ZS5sZW5ndGg7XG5cbiAgICBpZiAoaXNBcnJheUxpa2UodmFsdWVbMF0pKSB7XG4gICAgICB2YXIgcmV0ID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgcmV0LnB1c2goYXJyYXlTbGljZS5jYWxsKHZhbHVlW2ldKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHJnYmEyU3RyaW5nKHJnYmEpIHtcbiAgcmdiYVswXSA9IE1hdGguZmxvb3IocmdiYVswXSk7XG4gIHJnYmFbMV0gPSBNYXRoLmZsb29yKHJnYmFbMV0pO1xuICByZ2JhWzJdID0gTWF0aC5mbG9vcihyZ2JhWzJdKTtcbiAgcmV0dXJuICdyZ2JhKCcgKyByZ2JhLmpvaW4oJywnKSArICcpJztcbn1cblxuZnVuY3Rpb24gZ2V0QXJyYXlEaW0oa2V5ZnJhbWVzKSB7XG4gIHZhciBsYXN0VmFsdWUgPSBrZXlmcmFtZXNba2V5ZnJhbWVzLmxlbmd0aCAtIDFdLnZhbHVlO1xuICByZXR1cm4gaXNBcnJheUxpa2UobGFzdFZhbHVlICYmIGxhc3RWYWx1ZVswXSkgPyAyIDogMTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhY2tDbGlwKGFuaW1hdG9yLCBlYXNpbmcsIG9uZVRyYWNrRG9uZSwga2V5ZnJhbWVzLCBwcm9wTmFtZSwgZm9yY2VBbmltYXRlKSB7XG4gIHZhciBnZXR0ZXIgPSBhbmltYXRvci5fZ2V0dGVyO1xuICB2YXIgc2V0dGVyID0gYW5pbWF0b3IuX3NldHRlcjtcbiAgdmFyIHVzZVNwbGluZSA9IGVhc2luZyA9PT0gJ3NwbGluZSc7XG4gIHZhciB0cmFja0xlbiA9IGtleWZyYW1lcy5sZW5ndGg7XG5cbiAgaWYgKCF0cmFja0xlbikge1xuICAgIHJldHVybjtcbiAgfSAvLyBHdWVzcyBkYXRhIHR5cGVcblxuXG4gIHZhciBmaXJzdFZhbCA9IGtleWZyYW1lc1swXS52YWx1ZTtcbiAgdmFyIGlzVmFsdWVBcnJheSA9IGlzQXJyYXlMaWtlKGZpcnN0VmFsKTtcbiAgdmFyIGlzVmFsdWVDb2xvciA9IGZhbHNlO1xuICB2YXIgaXNWYWx1ZVN0cmluZyA9IGZhbHNlOyAvLyBGb3IgdmVydGljZXMgbW9ycGhpbmdcblxuICB2YXIgYXJyRGltID0gaXNWYWx1ZUFycmF5ID8gZ2V0QXJyYXlEaW0oa2V5ZnJhbWVzKSA6IDA7XG4gIHZhciB0cmFja01heFRpbWU7IC8vIFNvcnQga2V5ZnJhbWUgYXMgYXNjZW5kaW5nXG5cbiAga2V5ZnJhbWVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYS50aW1lIC0gYi50aW1lO1xuICB9KTtcbiAgdHJhY2tNYXhUaW1lID0ga2V5ZnJhbWVzW3RyYWNrTGVuIC0gMV0udGltZTsgLy8gUGVyY2VudHMgb2YgZWFjaCBrZXlmcmFtZVxuXG4gIHZhciBrZlBlcmNlbnRzID0gW107IC8vIFZhbHVlIG9mIGVhY2gga2V5ZnJhbWVcblxuICB2YXIga2ZWYWx1ZXMgPSBbXTtcbiAgdmFyIHByZXZWYWx1ZSA9IGtleWZyYW1lc1swXS52YWx1ZTtcbiAgdmFyIGlzQWxsVmFsdWVFcXVhbCA9IHRydWU7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFja0xlbjsgaSsrKSB7XG4gICAga2ZQZXJjZW50cy5wdXNoKGtleWZyYW1lc1tpXS50aW1lIC8gdHJhY2tNYXhUaW1lKTsgLy8gQXNzdW1lIHZhbHVlIGlzIGEgY29sb3Igd2hlbiBpdCBpcyBhIHN0cmluZ1xuXG4gICAgdmFyIHZhbHVlID0ga2V5ZnJhbWVzW2ldLnZhbHVlOyAvLyBDaGVjayBpZiB2YWx1ZSBpcyBlcXVhbCwgZGVlcCBjaGVjayBpZiB2YWx1ZSBpcyBhcnJheVxuXG4gICAgaWYgKCEoaXNWYWx1ZUFycmF5ICYmIGlzQXJyYXlTYW1lKHZhbHVlLCBwcmV2VmFsdWUsIGFyckRpbSkgfHwgIWlzVmFsdWVBcnJheSAmJiB2YWx1ZSA9PT0gcHJldlZhbHVlKSkge1xuICAgICAgaXNBbGxWYWx1ZUVxdWFsID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJldlZhbHVlID0gdmFsdWU7IC8vIFRyeSBjb252ZXJ0aW5nIGEgc3RyaW5nIHRvIGEgY29sb3IgYXJyYXlcblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBjb2xvckFycmF5ID0gY29sb3IucGFyc2UodmFsdWUpO1xuXG4gICAgICBpZiAoY29sb3JBcnJheSkge1xuICAgICAgICB2YWx1ZSA9IGNvbG9yQXJyYXk7XG4gICAgICAgIGlzVmFsdWVDb2xvciA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpc1ZhbHVlU3RyaW5nID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBrZlZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgfVxuXG4gIGlmICghZm9yY2VBbmltYXRlICYmIGlzQWxsVmFsdWVFcXVhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBsYXN0VmFsdWUgPSBrZlZhbHVlc1t0cmFja0xlbiAtIDFdOyAvLyBQb2x5ZmlsbCBhcnJheSBhbmQgTmFOIHZhbHVlXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFja0xlbiAtIDE7IGkrKykge1xuICAgIGlmIChpc1ZhbHVlQXJyYXkpIHtcbiAgICAgIGZpbGxBcnIoa2ZWYWx1ZXNbaV0sIGxhc3RWYWx1ZSwgYXJyRGltKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzTmFOKGtmVmFsdWVzW2ldKSAmJiAhaXNOYU4obGFzdFZhbHVlKSAmJiAhaXNWYWx1ZVN0cmluZyAmJiAhaXNWYWx1ZUNvbG9yKSB7XG4gICAgICAgIGtmVmFsdWVzW2ldID0gbGFzdFZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlzVmFsdWVBcnJheSAmJiBmaWxsQXJyKGdldHRlcihhbmltYXRvci5fdGFyZ2V0LCBwcm9wTmFtZSksIGxhc3RWYWx1ZSwgYXJyRGltKTsgLy8gQ2FjaGUgdGhlIGtleSBvZiBsYXN0IGZyYW1lIHRvIHNwZWVkIHVwIHdoZW5cbiAgLy8gYW5pbWF0aW9uIHBsYXliYWNrIGlzIHNlcXVlbmN5XG5cbiAgdmFyIGxhc3RGcmFtZSA9IDA7XG4gIHZhciBsYXN0RnJhbWVQZXJjZW50ID0gMDtcbiAgdmFyIHN0YXJ0O1xuICB2YXIgdztcbiAgdmFyIHAwO1xuICB2YXIgcDE7XG4gIHZhciBwMjtcbiAgdmFyIHAzO1xuXG4gIGlmIChpc1ZhbHVlQ29sb3IpIHtcbiAgICB2YXIgcmdiYSA9IFswLCAwLCAwLCAwXTtcbiAgfVxuXG4gIHZhciBvbmZyYW1lID0gZnVuY3Rpb24gKHRhcmdldCwgcGVyY2VudCkge1xuICAgIC8vIEZpbmQgdGhlIHJhbmdlIGtleWZyYW1lc1xuICAgIC8vIGtmMS0tLS0ta2YyLS0tLS0tLS0tY3VycmVudC0tLS0tLS0ta2YzXG4gICAgLy8gZmluZCBrZjIgYW5kIGtmMyBhbmQgZG8gaW50ZXJwb2xhdGlvblxuICAgIHZhciBmcmFtZTsgLy8gSW4gdGhlIGVhc2luZyBmdW5jdGlvbiBsaWtlIGVsYXN0aWNPdXQsIHBlcmNlbnQgbWF5IGxlc3MgdGhhbiAwXG5cbiAgICBpZiAocGVyY2VudCA8IDApIHtcbiAgICAgIGZyYW1lID0gMDtcbiAgICB9IGVsc2UgaWYgKHBlcmNlbnQgPCBsYXN0RnJhbWVQZXJjZW50KSB7XG4gICAgICAvLyBTdGFydCBmcm9tIG5leHQga2V5XG4gICAgICAvLyBQRU5ESU5HIHN0YXJ0IGZyb20gbGFzdEZyYW1lID9cbiAgICAgIHN0YXJ0ID0gTWF0aC5taW4obGFzdEZyYW1lICsgMSwgdHJhY2tMZW4gLSAxKTtcblxuICAgICAgZm9yIChmcmFtZSA9IHN0YXJ0OyBmcmFtZSA+PSAwOyBmcmFtZS0tKSB7XG4gICAgICAgIGlmIChrZlBlcmNlbnRzW2ZyYW1lXSA8PSBwZXJjZW50KSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gUEVORElORyByZWFsbHkgbmVlZCB0byBkbyB0aGlzID9cblxuXG4gICAgICBmcmFtZSA9IE1hdGgubWluKGZyYW1lLCB0cmFja0xlbiAtIDIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGZyYW1lID0gbGFzdEZyYW1lOyBmcmFtZSA8IHRyYWNrTGVuOyBmcmFtZSsrKSB7XG4gICAgICAgIGlmIChrZlBlcmNlbnRzW2ZyYW1lXSA+IHBlcmNlbnQpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmcmFtZSA9IE1hdGgubWluKGZyYW1lIC0gMSwgdHJhY2tMZW4gLSAyKTtcbiAgICB9XG5cbiAgICBsYXN0RnJhbWUgPSBmcmFtZTtcbiAgICBsYXN0RnJhbWVQZXJjZW50ID0gcGVyY2VudDtcbiAgICB2YXIgcmFuZ2UgPSBrZlBlcmNlbnRzW2ZyYW1lICsgMV0gLSBrZlBlcmNlbnRzW2ZyYW1lXTtcblxuICAgIGlmIChyYW5nZSA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICB3ID0gKHBlcmNlbnQgLSBrZlBlcmNlbnRzW2ZyYW1lXSkgLyByYW5nZTtcbiAgICB9XG5cbiAgICBpZiAodXNlU3BsaW5lKSB7XG4gICAgICBwMSA9IGtmVmFsdWVzW2ZyYW1lXTtcbiAgICAgIHAwID0ga2ZWYWx1ZXNbZnJhbWUgPT09IDAgPyBmcmFtZSA6IGZyYW1lIC0gMV07XG4gICAgICBwMiA9IGtmVmFsdWVzW2ZyYW1lID4gdHJhY2tMZW4gLSAyID8gdHJhY2tMZW4gLSAxIDogZnJhbWUgKyAxXTtcbiAgICAgIHAzID0ga2ZWYWx1ZXNbZnJhbWUgPiB0cmFja0xlbiAtIDMgPyB0cmFja0xlbiAtIDEgOiBmcmFtZSArIDJdO1xuXG4gICAgICBpZiAoaXNWYWx1ZUFycmF5KSB7XG4gICAgICAgIGNhdG11bGxSb21JbnRlcnBvbGF0ZUFycmF5KHAwLCBwMSwgcDIsIHAzLCB3LCB3ICogdywgdyAqIHcgKiB3LCBnZXR0ZXIodGFyZ2V0LCBwcm9wTmFtZSksIGFyckRpbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdmFsdWU7XG5cbiAgICAgICAgaWYgKGlzVmFsdWVDb2xvcikge1xuICAgICAgICAgIHZhbHVlID0gY2F0bXVsbFJvbUludGVycG9sYXRlQXJyYXkocDAsIHAxLCBwMiwgcDMsIHcsIHcgKiB3LCB3ICogdyAqIHcsIHJnYmEsIDEpO1xuICAgICAgICAgIHZhbHVlID0gcmdiYTJTdHJpbmcocmdiYSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNWYWx1ZVN0cmluZykge1xuICAgICAgICAgIC8vIFN0cmluZyBpcyBzdGVwKDAuNSlcbiAgICAgICAgICByZXR1cm4gaW50ZXJwb2xhdGVTdHJpbmcocDEsIHAyLCB3KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IGNhdG11bGxSb21JbnRlcnBvbGF0ZShwMCwgcDEsIHAyLCBwMywgdywgdyAqIHcsIHcgKiB3ICogdyk7XG4gICAgICAgIH1cblxuICAgICAgICBzZXR0ZXIodGFyZ2V0LCBwcm9wTmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNWYWx1ZUFycmF5KSB7XG4gICAgICAgIGludGVycG9sYXRlQXJyYXkoa2ZWYWx1ZXNbZnJhbWVdLCBrZlZhbHVlc1tmcmFtZSArIDFdLCB3LCBnZXR0ZXIodGFyZ2V0LCBwcm9wTmFtZSksIGFyckRpbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdmFsdWU7XG5cbiAgICAgICAgaWYgKGlzVmFsdWVDb2xvcikge1xuICAgICAgICAgIGludGVycG9sYXRlQXJyYXkoa2ZWYWx1ZXNbZnJhbWVdLCBrZlZhbHVlc1tmcmFtZSArIDFdLCB3LCByZ2JhLCAxKTtcbiAgICAgICAgICB2YWx1ZSA9IHJnYmEyU3RyaW5nKHJnYmEpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzVmFsdWVTdHJpbmcpIHtcbiAgICAgICAgICAvLyBTdHJpbmcgaXMgc3RlcCgwLjUpXG4gICAgICAgICAgcmV0dXJuIGludGVycG9sYXRlU3RyaW5nKGtmVmFsdWVzW2ZyYW1lXSwga2ZWYWx1ZXNbZnJhbWUgKyAxXSwgdyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBpbnRlcnBvbGF0ZU51bWJlcihrZlZhbHVlc1tmcmFtZV0sIGtmVmFsdWVzW2ZyYW1lICsgMV0sIHcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0dGVyKHRhcmdldCwgcHJvcE5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIGNsaXAgPSBuZXcgQ2xpcCh7XG4gICAgdGFyZ2V0OiBhbmltYXRvci5fdGFyZ2V0LFxuICAgIGxpZmU6IHRyYWNrTWF4VGltZSxcbiAgICBsb29wOiBhbmltYXRvci5fbG9vcCxcbiAgICBkZWxheTogYW5pbWF0b3IuX2RlbGF5LFxuICAgIG9uZnJhbWU6IG9uZnJhbWUsXG4gICAgb25kZXN0cm95OiBvbmVUcmFja0RvbmVcbiAgfSk7XG5cbiAgaWYgKGVhc2luZyAmJiBlYXNpbmcgIT09ICdzcGxpbmUnKSB7XG4gICAgY2xpcC5lYXNpbmcgPSBlYXNpbmc7XG4gIH1cblxuICByZXR1cm4gY2xpcDtcbn1cbi8qKlxuICogQGFsaWFzIG1vZHVsZTp6cmVuZGVyL2FuaW1hdGlvbi9BbmltYXRvclxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGxvb3BcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGdldHRlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyXG4gKi9cblxuXG52YXIgQW5pbWF0b3IgPSBmdW5jdGlvbiAodGFyZ2V0LCBsb29wLCBnZXR0ZXIsIHNldHRlcikge1xuICB0aGlzLl90cmFja3MgPSB7fTtcbiAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLl9sb29wID0gbG9vcCB8fCBmYWxzZTtcbiAgdGhpcy5fZ2V0dGVyID0gZ2V0dGVyIHx8IGRlZmF1bHRHZXR0ZXI7XG4gIHRoaXMuX3NldHRlciA9IHNldHRlciB8fCBkZWZhdWx0U2V0dGVyO1xuICB0aGlzLl9jbGlwQ291bnQgPSAwO1xuICB0aGlzLl9kZWxheSA9IDA7XG4gIHRoaXMuX2RvbmVMaXN0ID0gW107XG4gIHRoaXMuX29uZnJhbWVMaXN0ID0gW107XG4gIHRoaXMuX2NsaXBMaXN0ID0gW107XG59O1xuXG5BbmltYXRvci5wcm90b3R5cGUgPSB7XG4gIC8qKlxuICAgKiDorr7nva7liqjnlLvlhbPplK7luKdcbiAgICogQHBhcmFtICB7bnVtYmVyfSB0aW1lIOWFs+mUruW4p+aXtumXtO+8jOWNleS9jeaYr21zXG4gICAqIEBwYXJhbSAge09iamVjdH0gcHJvcHMg5YWz6ZSu5bin55qE5bGe5oCn5YC877yMa2V5LXZhbHVl6KGo56S6XG4gICAqIEByZXR1cm4ge21vZHVsZTp6cmVuZGVyL2FuaW1hdGlvbi9BbmltYXRvcn1cbiAgICovXG4gIHdoZW46IGZ1bmN0aW9uICh0aW1lXG4gIC8qIG1zICovXG4gICwgcHJvcHMpIHtcbiAgICB2YXIgdHJhY2tzID0gdGhpcy5fdHJhY2tzO1xuXG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcHJvcHMpIHtcbiAgICAgIGlmICghcHJvcHMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRyYWNrc1twcm9wTmFtZV0pIHtcbiAgICAgICAgdHJhY2tzW3Byb3BOYW1lXSA9IFtdOyAvLyBJbnZhbGlkIHZhbHVlXG5cbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fZ2V0dGVyKHRoaXMuX3RhcmdldCwgcHJvcE5hbWUpO1xuXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgLy8genJMb2coJ0ludmFsaWQgcHJvcGVydHkgJyArIHByb3BOYW1lKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSAvLyBJZiB0aW1lIGlzIDBcbiAgICAgICAgLy8gIFRoZW4gcHJvcHMgaXMgZ2l2ZW4gaW5pdGlhbGl6ZSB2YWx1ZVxuICAgICAgICAvLyBFbHNlXG4gICAgICAgIC8vICBJbml0aWFsaXplIHZhbHVlIGZyb20gY3VycmVudCBwcm9wIHZhbHVlXG5cblxuICAgICAgICBpZiAodGltZSAhPT0gMCkge1xuICAgICAgICAgIHRyYWNrc1twcm9wTmFtZV0ucHVzaCh7XG4gICAgICAgICAgICB0aW1lOiAwLFxuICAgICAgICAgICAgdmFsdWU6IGNsb25lVmFsdWUodmFsdWUpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdHJhY2tzW3Byb3BOYW1lXS5wdXNoKHtcbiAgICAgICAgdGltZTogdGltZSxcbiAgICAgICAgdmFsdWU6IHByb3BzW3Byb3BOYW1lXVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOa3u+WKoOWKqOeUu+avj+S4gOW4p+eahOWbnuiwg+WHveaVsFxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICogQHJldHVybiB7bW9kdWxlOnpyZW5kZXIvYW5pbWF0aW9uL0FuaW1hdG9yfVxuICAgKi9cbiAgZHVyaW5nOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB0aGlzLl9vbmZyYW1lTGlzdC5wdXNoKGNhbGxiYWNrKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBwYXVzZTogZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fY2xpcExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuX2NsaXBMaXN0W2ldLnBhdXNlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fcGF1c2VkID0gdHJ1ZTtcbiAgfSxcbiAgcmVzdW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9jbGlwTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5fY2xpcExpc3RbaV0ucmVzdW1lKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fcGF1c2VkID0gZmFsc2U7XG4gIH0sXG4gIGlzUGF1c2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5fcGF1c2VkO1xuICB9LFxuICBfZG9uZUNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gQ2xlYXIgYWxsIHRyYWNrc1xuICAgIHRoaXMuX3RyYWNrcyA9IHt9OyAvLyBDbGVhciBhbGwgY2xpcHNcblxuICAgIHRoaXMuX2NsaXBMaXN0Lmxlbmd0aCA9IDA7XG4gICAgdmFyIGRvbmVMaXN0ID0gdGhpcy5fZG9uZUxpc3Q7XG4gICAgdmFyIGxlbiA9IGRvbmVMaXN0Lmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGRvbmVMaXN0W2ldLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiDlvIDlp4vmiafooYzliqjnlLtcbiAgICogQHBhcmFtICB7c3RyaW5nfEZ1bmN0aW9ufSBbZWFzaW5nXVxuICAgKiAgICAgICAgIOWKqOeUu+e8k+WKqOWHveaVsO+8jOivpuingXtAbGluayBtb2R1bGU6enJlbmRlci9hbmltYXRpb24vZWFzaW5nfVxuICAgKiBAcGFyYW0gIHtib29sZWFufSBmb3JjZUFuaW1hdGVcbiAgICogQHJldHVybiB7bW9kdWxlOnpyZW5kZXIvYW5pbWF0aW9uL0FuaW1hdG9yfVxuICAgKi9cbiAgc3RhcnQ6IGZ1bmN0aW9uIChlYXNpbmcsIGZvcmNlQW5pbWF0ZSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgY2xpcENvdW50ID0gMDtcblxuICAgIHZhciBvbmVUcmFja0RvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGlwQ291bnQtLTtcblxuICAgICAgaWYgKCFjbGlwQ291bnQpIHtcbiAgICAgICAgc2VsZi5fZG9uZUNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBsYXN0Q2xpcDtcblxuICAgIGZvciAodmFyIHByb3BOYW1lIGluIHRoaXMuX3RyYWNrcykge1xuICAgICAgaWYgKCF0aGlzLl90cmFja3MuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2xpcCA9IGNyZWF0ZVRyYWNrQ2xpcCh0aGlzLCBlYXNpbmcsIG9uZVRyYWNrRG9uZSwgdGhpcy5fdHJhY2tzW3Byb3BOYW1lXSwgcHJvcE5hbWUsIGZvcmNlQW5pbWF0ZSk7XG5cbiAgICAgIGlmIChjbGlwKSB7XG4gICAgICAgIHRoaXMuX2NsaXBMaXN0LnB1c2goY2xpcCk7XG5cbiAgICAgICAgY2xpcENvdW50Kys7IC8vIElmIHN0YXJ0IGFmdGVyIGFkZGVkIHRvIGFuaW1hdGlvblxuXG4gICAgICAgIGlmICh0aGlzLmFuaW1hdGlvbikge1xuICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLmFkZENsaXAoY2xpcCk7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0Q2xpcCA9IGNsaXA7XG4gICAgICB9XG4gICAgfSAvLyBBZGQgZHVyaW5nIGNhbGxiYWNrIG9uIHRoZSBsYXN0IGNsaXBcblxuXG4gICAgaWYgKGxhc3RDbGlwKSB7XG4gICAgICB2YXIgb2xkT25GcmFtZSA9IGxhc3RDbGlwLm9uZnJhbWU7XG5cbiAgICAgIGxhc3RDbGlwLm9uZnJhbWUgPSBmdW5jdGlvbiAodGFyZ2V0LCBwZXJjZW50KSB7XG4gICAgICAgIG9sZE9uRnJhbWUodGFyZ2V0LCBwZXJjZW50KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuX29uZnJhbWVMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgc2VsZi5fb25mcmFtZUxpc3RbaV0odGFyZ2V0LCBwZXJjZW50KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IC8vIFRoaXMgb3B0aW1pemF0aW9uIHdpbGwgaGVscCB0aGUgY2FzZSB0aGF0IGluIHRoZSB1cHBlciBhcHBsaWNhdGlvblxuICAgIC8vIHRoZSB2aWV3IG1heSBiZSByZWZyZXNoZWQgZnJlcXVlbnRseSwgd2hlcmUgYW5pbWF0aW9uIHdpbGwgYmVcbiAgICAvLyBjYWxsZWQgcmVwZWF0bHkgYnV0IG5vdGhpbmcgY2hhbmdlZC5cblxuXG4gICAgaWYgKCFjbGlwQ291bnQpIHtcbiAgICAgIHRoaXMuX2RvbmVDYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiDlgZzmraLliqjnlLtcbiAgICogQHBhcmFtIHtib29sZWFufSBmb3J3YXJkVG9MYXN0IElmIG1vdmUgdG8gbGFzdCBmcmFtZSBiZWZvcmUgc3RvcFxuICAgKi9cbiAgc3RvcDogZnVuY3Rpb24gKGZvcndhcmRUb0xhc3QpIHtcbiAgICB2YXIgY2xpcExpc3QgPSB0aGlzLl9jbGlwTGlzdDtcbiAgICB2YXIgYW5pbWF0aW9uID0gdGhpcy5hbmltYXRpb247XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsaXBMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2xpcCA9IGNsaXBMaXN0W2ldO1xuXG4gICAgICBpZiAoZm9yd2FyZFRvTGFzdCkge1xuICAgICAgICAvLyBNb3ZlIHRvIGxhc3QgZnJhbWUgYmVmb3JlIHN0b3BcbiAgICAgICAgY2xpcC5vbmZyYW1lKHRoaXMuX3RhcmdldCwgMSk7XG4gICAgICB9XG5cbiAgICAgIGFuaW1hdGlvbiAmJiBhbmltYXRpb24ucmVtb3ZlQ2xpcChjbGlwKTtcbiAgICB9XG5cbiAgICBjbGlwTGlzdC5sZW5ndGggPSAwO1xuICB9LFxuXG4gIC8qKlxuICAgKiDorr7nva7liqjnlLvlu7bov5/lvIDlp4vnmoTml7bpl7RcbiAgICogQHBhcmFtICB7bnVtYmVyfSB0aW1lIOWNleS9jW1zXG4gICAqIEByZXR1cm4ge21vZHVsZTp6cmVuZGVyL2FuaW1hdGlvbi9BbmltYXRvcn1cbiAgICovXG4gIGRlbGF5OiBmdW5jdGlvbiAodGltZSkge1xuICAgIHRoaXMuX2RlbGF5ID0gdGltZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICog5re75Yqg5Yqo55S757uT5p2f55qE5Zue6LCDXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYlxuICAgKiBAcmV0dXJuIHttb2R1bGU6enJlbmRlci9hbmltYXRpb24vQW5pbWF0b3J9XG4gICAqL1xuICBkb25lOiBmdW5jdGlvbiAoY2IpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIHRoaXMuX2RvbmVMaXN0LnB1c2goY2IpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBcnJheS48bW9kdWxlOnpyZW5kZXIvYW5pbWF0aW9uL0NsaXA+fVxuICAgKi9cbiAgZ2V0Q2xpcHM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2xpcExpc3Q7XG4gIH1cbn07XG52YXIgX2RlZmF1bHQgPSBBbmltYXRvcjtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIGVhc2luZ0Z1bmNzID0gcmVxdWlyZShcIi4vZWFzaW5nXCIpO1xuXG4vKipcbiAqIOWKqOeUu+S4u+aOp+WItuWZqFxuICogQGNvbmZpZyB0YXJnZXQg5Yqo55S75a+56LGh77yM5Y+v5Lul5piv5pWw57uE77yM5aaC5p6c5piv5pWw57uE55qE6K+d5Lya5om56YeP5YiG5Y+Rb25mcmFtZeetieS6i+S7tlxuICogQGNvbmZpZyBsaWZlKDEwMDApIOWKqOeUu+aXtumVv1xuICogQGNvbmZpZyBkZWxheSgwKSDliqjnlLvlu7bov5/ml7bpl7RcbiAqIEBjb25maWcgbG9vcCh0cnVlKVxuICogQGNvbmZpZyBnYXAoMCkg5b6q546v55qE6Ze06ZqU5pe26Ze0XG4gKiBAY29uZmlnIG9uZnJhbWVcbiAqIEBjb25maWcgZWFzaW5nKG9wdGlvbmFsKVxuICogQGNvbmZpZyBvbmRlc3Ryb3kob3B0aW9uYWwpXG4gKiBAY29uZmlnIG9ucmVzdGFydChvcHRpb25hbClcbiAqXG4gKiBUT0RPIHBhdXNlXG4gKi9cbmZ1bmN0aW9uIENsaXAob3B0aW9ucykge1xuICB0aGlzLl90YXJnZXQgPSBvcHRpb25zLnRhcmdldDsgLy8g55Sf5ZG95ZGo5pyfXG5cbiAgdGhpcy5fbGlmZSA9IG9wdGlvbnMubGlmZSB8fCAxMDAwOyAvLyDlu7bml7ZcblxuICB0aGlzLl9kZWxheSA9IG9wdGlvbnMuZGVsYXkgfHwgMDsgLy8g5byA5aeL5pe26Ze0XG4gIC8vIHRoaXMuX3N0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgdGhpcy5fZGVsYXk7Ly8g5Y2V5L2N5q+r56eSXG5cbiAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTsgLy8g5piv5ZCm5b6q546vXG5cbiAgdGhpcy5sb29wID0gb3B0aW9ucy5sb29wID09IG51bGwgPyBmYWxzZSA6IG9wdGlvbnMubG9vcDtcbiAgdGhpcy5nYXAgPSBvcHRpb25zLmdhcCB8fCAwO1xuICB0aGlzLmVhc2luZyA9IG9wdGlvbnMuZWFzaW5nIHx8ICdMaW5lYXInO1xuICB0aGlzLm9uZnJhbWUgPSBvcHRpb25zLm9uZnJhbWU7XG4gIHRoaXMub25kZXN0cm95ID0gb3B0aW9ucy5vbmRlc3Ryb3k7XG4gIHRoaXMub25yZXN0YXJ0ID0gb3B0aW9ucy5vbnJlc3RhcnQ7XG4gIHRoaXMuX3BhdXNlZFRpbWUgPSAwO1xuICB0aGlzLl9wYXVzZWQgPSBmYWxzZTtcbn1cblxuQ2xpcC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBDbGlwLFxuICBzdGVwOiBmdW5jdGlvbiAoZ2xvYmFsVGltZSwgZGVsdGFUaW1lKSB7XG4gICAgLy8gU2V0IHN0YXJ0VGltZSBvbiBmaXJzdCBzdGVwLCBvciBfc3RhcnRUaW1lIG1heSBoYXMgbWlsbGVzZWNvbmRzIGRpZmZlcmVudCBiZXR3ZWVuIGNsaXBzXG4gICAgLy8gUEVORElOR1xuICAgIGlmICghdGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRoaXMuX3N0YXJ0VGltZSA9IGdsb2JhbFRpbWUgKyB0aGlzLl9kZWxheTtcbiAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcGF1c2VkKSB7XG4gICAgICB0aGlzLl9wYXVzZWRUaW1lICs9IGRlbHRhVGltZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcGVyY2VudCA9IChnbG9iYWxUaW1lIC0gdGhpcy5fc3RhcnRUaW1lIC0gdGhpcy5fcGF1c2VkVGltZSkgLyB0aGlzLl9saWZlOyAvLyDov5jmsqHlvIDlp4tcblxuICAgIGlmIChwZXJjZW50IDwgMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHBlcmNlbnQgPSBNYXRoLm1pbihwZXJjZW50LCAxKTtcbiAgICB2YXIgZWFzaW5nID0gdGhpcy5lYXNpbmc7XG4gICAgdmFyIGVhc2luZ0Z1bmMgPSB0eXBlb2YgZWFzaW5nID09ICdzdHJpbmcnID8gZWFzaW5nRnVuY3NbZWFzaW5nXSA6IGVhc2luZztcbiAgICB2YXIgc2NoZWR1bGUgPSB0eXBlb2YgZWFzaW5nRnVuYyA9PT0gJ2Z1bmN0aW9uJyA/IGVhc2luZ0Z1bmMocGVyY2VudCkgOiBwZXJjZW50O1xuICAgIHRoaXMuZmlyZSgnZnJhbWUnLCBzY2hlZHVsZSk7IC8vIOe7k+adn1xuXG4gICAgaWYgKHBlcmNlbnQgPT0gMSkge1xuICAgICAgaWYgKHRoaXMubG9vcCkge1xuICAgICAgICB0aGlzLnJlc3RhcnQoZ2xvYmFsVGltZSk7IC8vIOmHjeaWsOW8gOWni+WRqOacn1xuICAgICAgICAvLyDmipvlh7rogIzkuI3mmK/nm7TmjqXosIPnlKjkuovku7bnm7TliLAgc3RhZ2UudXBkYXRlIOWQjuWGjee7n+S4gOiwg+eUqOi/meS6m+S6i+S7tlxuXG4gICAgICAgIHJldHVybiAncmVzdGFydCc7XG4gICAgICB9IC8vIOWKqOeUu+WujOaIkOWwhui/meS4quaOp+WItuWZqOagh+ivhuS4uuW+heWIoOmZpFxuICAgICAgLy8g5ZyoQW5pbWF0aW9uLnVwZGF0ZeS4rei/m+ihjOaJuemHj+WIoOmZpFxuXG5cbiAgICAgIHRoaXMuX25lZWRzUmVtb3ZlID0gdHJ1ZTtcbiAgICAgIHJldHVybiAnZGVzdHJveSc7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIHJlc3RhcnQ6IGZ1bmN0aW9uIChnbG9iYWxUaW1lKSB7XG4gICAgdmFyIHJlbWFpbmRlciA9IChnbG9iYWxUaW1lIC0gdGhpcy5fc3RhcnRUaW1lIC0gdGhpcy5fcGF1c2VkVGltZSkgJSB0aGlzLl9saWZlO1xuICAgIHRoaXMuX3N0YXJ0VGltZSA9IGdsb2JhbFRpbWUgLSByZW1haW5kZXIgKyB0aGlzLmdhcDtcbiAgICB0aGlzLl9wYXVzZWRUaW1lID0gMDtcbiAgICB0aGlzLl9uZWVkc1JlbW92ZSA9IGZhbHNlO1xuICB9LFxuICBmaXJlOiBmdW5jdGlvbiAoZXZlbnRUeXBlLCBhcmcpIHtcbiAgICBldmVudFR5cGUgPSAnb24nICsgZXZlbnRUeXBlO1xuXG4gICAgaWYgKHRoaXNbZXZlbnRUeXBlXSkge1xuICAgICAgdGhpc1tldmVudFR5cGVdKHRoaXMuX3RhcmdldCwgYXJnKTtcbiAgICB9XG4gIH0sXG4gIHBhdXNlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fcGF1c2VkID0gdHJ1ZTtcbiAgfSxcbiAgcmVzdW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fcGF1c2VkID0gZmFsc2U7XG4gIH1cbn07XG52YXIgX2RlZmF1bHQgPSBDbGlwO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCIvKipcbiAqIOe8k+WKqOS7o+eggeadpeiHqiBodHRwczovL2dpdGh1Yi5jb20vc29sZS90d2Vlbi5qcy9ibG9iL21hc3Rlci9zcmMvVHdlZW4uanNcbiAqIEBzZWUgaHR0cDovL3NvbGUuZ2l0aHViLmlvL3R3ZWVuLmpzL2V4YW1wbGVzLzAzX2dyYXBocy5odG1sXG4gKiBAZXhwb3J0cyB6cmVuZGVyL2FuaW1hdGlvbi9lYXNpbmdcbiAqL1xudmFyIGVhc2luZyA9IHtcbiAgLyoqXG4gICogQHBhcmFtIHtudW1iZXJ9IGtcbiAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICovXG4gIGxpbmVhcjogZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gaztcbiAgfSxcblxuICAvKipcbiAgKiBAcGFyYW0ge251bWJlcn0ga1xuICAqIEByZXR1cm4ge251bWJlcn1cbiAgKi9cbiAgcXVhZHJhdGljSW46IGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIGsgKiBrO1xuICB9LFxuXG4gIC8qKlxuICAqIEBwYXJhbSB7bnVtYmVyfSBrXG4gICogQHJldHVybiB7bnVtYmVyfVxuICAqL1xuICBxdWFkcmF0aWNPdXQ6IGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIGsgKiAoMiAtIGspO1xuICB9LFxuXG4gIC8qKlxuICAqIEBwYXJhbSB7bnVtYmVyfSBrXG4gICogQHJldHVybiB7bnVtYmVyfVxuICAqL1xuICBxdWFkcmF0aWNJbk91dDogZnVuY3Rpb24gKGspIHtcbiAgICBpZiAoKGsgKj0gMikgPCAxKSB7XG4gICAgICByZXR1cm4gMC41ICogayAqIGs7XG4gICAgfVxuXG4gICAgcmV0dXJuIC0wLjUgKiAoLS1rICogKGsgLSAyKSAtIDEpO1xuICB9LFxuICAvLyDkuInmrKHmlrnnmoTnvJPliqjvvIh0XjPvvIlcblxuICAvKipcbiAgKiBAcGFyYW0ge251bWJlcn0ga1xuICAqIEByZXR1cm4ge251bWJlcn1cbiAgKi9cbiAgY3ViaWNJbjogZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gayAqIGsgKiBrO1xuICB9LFxuXG4gIC8qKlxuICAqIEBwYXJhbSB7bnVtYmVyfSBrXG4gICogQHJldHVybiB7bnVtYmVyfVxuICAqL1xuICBjdWJpY091dDogZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gLS1rICogayAqIGsgKyAxO1xuICB9LFxuXG4gIC8qKlxuICAqIEBwYXJhbSB7bnVtYmVyfSBrXG4gICogQHJldHVybiB7bnVtYmVyfVxuICAqL1xuICBjdWJpY0luT3V0OiBmdW5jdGlvbiAoaykge1xuICAgIGlmICgoayAqPSAyKSA8IDEpIHtcbiAgICAgIHJldHVybiAwLjUgKiBrICogayAqIGs7XG4gICAgfVxuXG4gICAgcmV0dXJuIDAuNSAqICgoayAtPSAyKSAqIGsgKiBrICsgMik7XG4gIH0sXG4gIC8vIOWbm+asoeaWueeahOe8k+WKqO+8iHReNO+8iVxuXG4gIC8qKlxuICAqIEBwYXJhbSB7bnVtYmVyfSBrXG4gICogQHJldHVybiB7bnVtYmVyfVxuICAqL1xuICBxdWFydGljSW46IGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIGsgKiBrICogayAqIGs7XG4gIH0sXG5cbiAgLyoqXG4gICogQHBhcmFtIHtudW1iZXJ9IGtcbiAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICovXG4gIHF1YXJ0aWNPdXQ6IGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIDEgLSAtLWsgKiBrICogayAqIGs7XG4gIH0sXG5cbiAgLyoqXG4gICogQHBhcmFtIHtudW1iZXJ9IGtcbiAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICovXG4gIHF1YXJ0aWNJbk91dDogZnVuY3Rpb24gKGspIHtcbiAgICBpZiAoKGsgKj0gMikgPCAxKSB7XG4gICAgICByZXR1cm4gMC41ICogayAqIGsgKiBrICogaztcbiAgICB9XG5cbiAgICByZXR1cm4gLTAuNSAqICgoayAtPSAyKSAqIGsgKiBrICogayAtIDIpO1xuICB9LFxuICAvLyDkupTmrKHmlrnnmoTnvJPliqjvvIh0XjXvvIlcblxuICAvKipcbiAgKiBAcGFyYW0ge251bWJlcn0ga1xuICAqIEByZXR1cm4ge251bWJlcn1cbiAgKi9cbiAgcXVpbnRpY0luOiBmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiBrICogayAqIGsgKiBrICogaztcbiAgfSxcblxuICAvKipcbiAgKiBAcGFyYW0ge251bWJlcn0ga1xuICAqIEByZXR1cm4ge251bWJlcn1cbiAgKi9cbiAgcXVpbnRpY091dDogZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gLS1rICogayAqIGsgKiBrICogayArIDE7XG4gIH0sXG5cbiAgLyoqXG4gICogQHBhcmFtIHtudW1iZXJ9IGtcbiAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICovXG4gIHF1aW50aWNJbk91dDogZnVuY3Rpb24gKGspIHtcbiAgICBpZiAoKGsgKj0gMikgPCAxKSB7XG4gICAgICByZXR1cm4gMC41ICogayAqIGsgKiBrICogayAqIGs7XG4gICAgfVxuXG4gICAgcmV0dXJuIDAuNSAqICgoayAtPSAyKSAqIGsgKiBrICogayAqIGsgKyAyKTtcbiAgfSxcbiAgLy8g5q2j5bym5puy57q/55qE57yT5Yqo77yIc2luKHQp77yJXG5cbiAgLyoqXG4gICogQHBhcmFtIHtudW1iZXJ9IGtcbiAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICovXG4gIHNpbnVzb2lkYWxJbjogZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gMSAtIE1hdGguY29zKGsgKiBNYXRoLlBJIC8gMik7XG4gIH0sXG5cbiAgLyoqXG4gICogQHBhcmFtIHtudW1iZXJ9IGtcbiAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICovXG4gIHNpbnVzb2lkYWxPdXQ6IGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIE1hdGguc2luKGsgKiBNYXRoLlBJIC8gMik7XG4gIH0sXG5cbiAgLyoqXG4gICogQHBhcmFtIHtudW1iZXJ9IGtcbiAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICovXG4gIHNpbnVzb2lkYWxJbk91dDogZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gMC41ICogKDEgLSBNYXRoLmNvcyhNYXRoLlBJICogaykpO1xuICB9LFxuICAvLyDmjIfmlbDmm7Lnur/nmoTnvJPliqjvvIgyXnTvvIlcblxuICAvKipcbiAgKiBAcGFyYW0ge251bWJlcn0ga1xuICAqIEByZXR1cm4ge251bWJlcn1cbiAgKi9cbiAgZXhwb25lbnRpYWxJbjogZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gayA9PT0gMCA/IDAgOiBNYXRoLnBvdygxMDI0LCBrIC0gMSk7XG4gIH0sXG5cbiAgLyoqXG4gICogQHBhcmFtIHtudW1iZXJ9IGtcbiAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICovXG4gIGV4cG9uZW50aWFsT3V0OiBmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiBrID09PSAxID8gMSA6IDEgLSBNYXRoLnBvdygyLCAtMTAgKiBrKTtcbiAgfSxcblxuICAvKipcbiAgKiBAcGFyYW0ge251bWJlcn0ga1xuICAqIEByZXR1cm4ge251bWJlcn1cbiAgKi9cbiAgZXhwb25lbnRpYWxJbk91dDogZnVuY3Rpb24gKGspIHtcbiAgICBpZiAoayA9PT0gMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgaWYgKGsgPT09IDEpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIGlmICgoayAqPSAyKSA8IDEpIHtcbiAgICAgIHJldHVybiAwLjUgKiBNYXRoLnBvdygxMDI0LCBrIC0gMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIDAuNSAqICgtTWF0aC5wb3coMiwgLTEwICogKGsgLSAxKSkgKyAyKTtcbiAgfSxcbiAgLy8g5ZyG5b2i5puy57q/55qE57yT5Yqo77yIc3FydCgxLXReMinvvIlcblxuICAvKipcbiAgKiBAcGFyYW0ge251bWJlcn0ga1xuICAqIEByZXR1cm4ge251bWJlcn1cbiAgKi9cbiAgY2lyY3VsYXJJbjogZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gMSAtIE1hdGguc3FydCgxIC0gayAqIGspO1xuICB9LFxuXG4gIC8qKlxuICAqIEBwYXJhbSB7bnVtYmVyfSBrXG4gICogQHJldHVybiB7bnVtYmVyfVxuICAqL1xuICBjaXJjdWxhck91dDogZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KDEgLSAtLWsgKiBrKTtcbiAgfSxcblxuICAvKipcbiAgKiBAcGFyYW0ge251bWJlcn0ga1xuICAqIEByZXR1cm4ge251bWJlcn1cbiAgKi9cbiAgY2lyY3VsYXJJbk91dDogZnVuY3Rpb24gKGspIHtcbiAgICBpZiAoKGsgKj0gMikgPCAxKSB7XG4gICAgICByZXR1cm4gLTAuNSAqIChNYXRoLnNxcnQoMSAtIGsgKiBrKSAtIDEpO1xuICAgIH1cblxuICAgIHJldHVybiAwLjUgKiAoTWF0aC5zcXJ0KDEgLSAoayAtPSAyKSAqIGspICsgMSk7XG4gIH0sXG4gIC8vIOWIm+W7uuexu+S8vOS6juW8ueewp+WcqOWBnOatouWJjeadpeWbnuaMr+iNoeeahOWKqOeUu1xuXG4gIC8qKlxuICAqIEBwYXJhbSB7bnVtYmVyfSBrXG4gICogQHJldHVybiB7bnVtYmVyfVxuICAqL1xuICBlbGFzdGljSW46IGZ1bmN0aW9uIChrKSB7XG4gICAgdmFyIHM7XG4gICAgdmFyIGEgPSAwLjE7XG4gICAgdmFyIHAgPSAwLjQ7XG5cbiAgICBpZiAoayA9PT0gMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgaWYgKGsgPT09IDEpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIGlmICghYSB8fCBhIDwgMSkge1xuICAgICAgYSA9IDE7XG4gICAgICBzID0gcCAvIDQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMgPSBwICogTWF0aC5hc2luKDEgLyBhKSAvICgyICogTWF0aC5QSSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIC0oYSAqIE1hdGgucG93KDIsIDEwICogKGsgLT0gMSkpICogTWF0aC5zaW4oKGsgLSBzKSAqICgyICogTWF0aC5QSSkgLyBwKSk7XG4gIH0sXG5cbiAgLyoqXG4gICogQHBhcmFtIHtudW1iZXJ9IGtcbiAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICovXG4gIGVsYXN0aWNPdXQ6IGZ1bmN0aW9uIChrKSB7XG4gICAgdmFyIHM7XG4gICAgdmFyIGEgPSAwLjE7XG4gICAgdmFyIHAgPSAwLjQ7XG5cbiAgICBpZiAoayA9PT0gMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgaWYgKGsgPT09IDEpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIGlmICghYSB8fCBhIDwgMSkge1xuICAgICAgYSA9IDE7XG4gICAgICBzID0gcCAvIDQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMgPSBwICogTWF0aC5hc2luKDEgLyBhKSAvICgyICogTWF0aC5QSSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGEgKiBNYXRoLnBvdygyLCAtMTAgKiBrKSAqIE1hdGguc2luKChrIC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkgKyAxO1xuICB9LFxuXG4gIC8qKlxuICAqIEBwYXJhbSB7bnVtYmVyfSBrXG4gICogQHJldHVybiB7bnVtYmVyfVxuICAqL1xuICBlbGFzdGljSW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG4gICAgdmFyIHM7XG4gICAgdmFyIGEgPSAwLjE7XG4gICAgdmFyIHAgPSAwLjQ7XG5cbiAgICBpZiAoayA9PT0gMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgaWYgKGsgPT09IDEpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIGlmICghYSB8fCBhIDwgMSkge1xuICAgICAgYSA9IDE7XG4gICAgICBzID0gcCAvIDQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMgPSBwICogTWF0aC5hc2luKDEgLyBhKSAvICgyICogTWF0aC5QSSk7XG4gICAgfVxuXG4gICAgaWYgKChrICo9IDIpIDwgMSkge1xuICAgICAgcmV0dXJuIC0wLjUgKiAoYSAqIE1hdGgucG93KDIsIDEwICogKGsgLT0gMSkpICogTWF0aC5zaW4oKGsgLSBzKSAqICgyICogTWF0aC5QSSkgLyBwKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGEgKiBNYXRoLnBvdygyLCAtMTAgKiAoayAtPSAxKSkgKiBNYXRoLnNpbigoayAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHApICogMC41ICsgMTtcbiAgfSxcbiAgLy8g5Zyo5p+Q5LiA5Yqo55S75byA5aeL5rK/5oyH56S655qE6Lev5b6E6L+b6KGM5Yqo55S75aSE55CG5YmN56iN56iN5pS25Zue6K+l5Yqo55S755qE56e75YqoXG5cbiAgLyoqXG4gICogQHBhcmFtIHtudW1iZXJ9IGtcbiAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICovXG4gIGJhY2tJbjogZnVuY3Rpb24gKGspIHtcbiAgICB2YXIgcyA9IDEuNzAxNTg7XG4gICAgcmV0dXJuIGsgKiBrICogKChzICsgMSkgKiBrIC0gcyk7XG4gIH0sXG5cbiAgLyoqXG4gICogQHBhcmFtIHtudW1iZXJ9IGtcbiAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICovXG4gIGJhY2tPdXQ6IGZ1bmN0aW9uIChrKSB7XG4gICAgdmFyIHMgPSAxLjcwMTU4O1xuICAgIHJldHVybiAtLWsgKiBrICogKChzICsgMSkgKiBrICsgcykgKyAxO1xuICB9LFxuXG4gIC8qKlxuICAqIEBwYXJhbSB7bnVtYmVyfSBrXG4gICogQHJldHVybiB7bnVtYmVyfVxuICAqL1xuICBiYWNrSW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG4gICAgdmFyIHMgPSAxLjcwMTU4ICogMS41MjU7XG5cbiAgICBpZiAoKGsgKj0gMikgPCAxKSB7XG4gICAgICByZXR1cm4gMC41ICogKGsgKiBrICogKChzICsgMSkgKiBrIC0gcykpO1xuICAgIH1cblxuICAgIHJldHVybiAwLjUgKiAoKGsgLT0gMikgKiBrICogKChzICsgMSkgKiBrICsgcykgKyAyKTtcbiAgfSxcbiAgLy8g5Yib5bu65by56Lez5pWI5p6cXG5cbiAgLyoqXG4gICogQHBhcmFtIHtudW1iZXJ9IGtcbiAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICovXG4gIGJvdW5jZUluOiBmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiAxIC0gZWFzaW5nLmJvdW5jZU91dCgxIC0gayk7XG4gIH0sXG5cbiAgLyoqXG4gICogQHBhcmFtIHtudW1iZXJ9IGtcbiAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICovXG4gIGJvdW5jZU91dDogZnVuY3Rpb24gKGspIHtcbiAgICBpZiAoayA8IDEgLyAyLjc1KSB7XG4gICAgICByZXR1cm4gNy41NjI1ICogayAqIGs7XG4gICAgfSBlbHNlIGlmIChrIDwgMiAvIDIuNzUpIHtcbiAgICAgIHJldHVybiA3LjU2MjUgKiAoayAtPSAxLjUgLyAyLjc1KSAqIGsgKyAwLjc1O1xuICAgIH0gZWxzZSBpZiAoayA8IDIuNSAvIDIuNzUpIHtcbiAgICAgIHJldHVybiA3LjU2MjUgKiAoayAtPSAyLjI1IC8gMi43NSkgKiBrICsgMC45Mzc1O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gNy41NjI1ICogKGsgLT0gMi42MjUgLyAyLjc1KSAqIGsgKyAwLjk4NDM3NTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICogQHBhcmFtIHtudW1iZXJ9IGtcbiAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICovXG4gIGJvdW5jZUluT3V0OiBmdW5jdGlvbiAoaykge1xuICAgIGlmIChrIDwgMC41KSB7XG4gICAgICByZXR1cm4gZWFzaW5nLmJvdW5jZUluKGsgKiAyKSAqIDAuNTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWFzaW5nLmJvdW5jZU91dChrICogMiAtIDEpICogMC41ICsgMC41O1xuICB9XG59O1xudmFyIF9kZWZhdWx0ID0gZWFzaW5nO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgX2RlZmF1bHQgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KSB8fCAvLyBodHRwczovL2dpdGh1Yi5jb20vZWNvbWZlL3pyZW5kZXIvaXNzdWVzLzE4OSNpc3N1ZWNvbW1lbnQtMjI0OTE5ODA5XG53aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgJiYgd2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KSB8fCB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHx8IGZ1bmN0aW9uIChmdW5jKSB7XG4gIHNldFRpbWVvdXQoZnVuYywgMTYpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgZHByID0gMTsgLy8gSWYgaW4gYnJvd3NlciBlbnZpcm9ubWVudFxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgZHByID0gTWF0aC5tYXgod2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSwgMSk7XG59XG4vKipcbiAqIGNvbmZpZ+m7mOiupOmFjee9rumhuVxuICogQGV4cG9ydHMgenJlbmRlci9jb25maWdcbiAqIEBhdXRob3IgS2VuZXIgKEBLZW5lci3mnpfls7AsIGtlbmVyLmxpbmZlbmdAZ21haWwuY29tKVxuICovXG5cbi8qKlxuICogZGVidWfml6Xlv5fpgInpobnvvJpjYXRjaEJydXNoRXhjZXB0aW9u5Li6dHJ1ZeS4i+acieaViFxuICogMCA6IOS4jeeUn+aIkGRlYnVn5pWw5o2u77yM5Y+R5biD55SoXG4gKiAxIDog5byC5bi45oqb5Ye677yM6LCD6K+V55SoXG4gKiAyIDog5o6n5Yi25Y+w6L6T5Ye677yM6LCD6K+V55SoXG4gKi9cblxuXG52YXIgZGVidWdNb2RlID0gMDsgLy8gcmV0aW5hIOWxj+W5leS8mOWMllxuXG52YXIgZGV2aWNlUGl4ZWxSYXRpbyA9IGRwcjtcbmV4cG9ydHMuZGVidWdNb2RlID0gZGVidWdNb2RlO1xuZXhwb3J0cy5kZXZpY2VQaXhlbFJhdGlvID0gZGV2aWNlUGl4ZWxSYXRpbzsiLCJ2YXIgX3V0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXG52YXIgbm9ybWFsaXplUmFkaWFuID0gX3V0aWwubm9ybWFsaXplUmFkaWFuO1xudmFyIFBJMiA9IE1hdGguUEkgKiAyO1xuLyoqXG4gKiDlnIblvKfmj4/ovrnljIXlkKvliKTmlq1cbiAqIEBwYXJhbSAge251bWJlcn0gIGN4XG4gKiBAcGFyYW0gIHtudW1iZXJ9ICBjeVxuICogQHBhcmFtICB7bnVtYmVyfSAgclxuICogQHBhcmFtICB7bnVtYmVyfSAgc3RhcnRBbmdsZVxuICogQHBhcmFtICB7bnVtYmVyfSAgZW5kQW5nbGVcbiAqIEBwYXJhbSAge2Jvb2xlYW59ICBhbnRpY2xvY2t3aXNlXG4gKiBAcGFyYW0gIHtudW1iZXJ9IGxpbmVXaWR0aFxuICogQHBhcmFtICB7bnVtYmVyfSAgeFxuICogQHBhcmFtICB7bnVtYmVyfSAgeVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBjb250YWluU3Ryb2tlKGN4LCBjeSwgciwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGFudGljbG9ja3dpc2UsIGxpbmVXaWR0aCwgeCwgeSkge1xuICBpZiAobGluZVdpZHRoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIF9sID0gbGluZVdpZHRoO1xuICB4IC09IGN4O1xuICB5IC09IGN5O1xuICB2YXIgZCA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcblxuICBpZiAoZCAtIF9sID4gciB8fCBkICsgX2wgPCByKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKE1hdGguYWJzKHN0YXJ0QW5nbGUgLSBlbmRBbmdsZSkgJSBQSTIgPCAxZS00KSB7XG4gICAgLy8gSXMgYSBjaXJjbGVcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChhbnRpY2xvY2t3aXNlKSB7XG4gICAgdmFyIHRtcCA9IHN0YXJ0QW5nbGU7XG4gICAgc3RhcnRBbmdsZSA9IG5vcm1hbGl6ZVJhZGlhbihlbmRBbmdsZSk7XG4gICAgZW5kQW5nbGUgPSBub3JtYWxpemVSYWRpYW4odG1wKTtcbiAgfSBlbHNlIHtcbiAgICBzdGFydEFuZ2xlID0gbm9ybWFsaXplUmFkaWFuKHN0YXJ0QW5nbGUpO1xuICAgIGVuZEFuZ2xlID0gbm9ybWFsaXplUmFkaWFuKGVuZEFuZ2xlKTtcbiAgfVxuXG4gIGlmIChzdGFydEFuZ2xlID4gZW5kQW5nbGUpIHtcbiAgICBlbmRBbmdsZSArPSBQSTI7XG4gIH1cblxuICB2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKHksIHgpO1xuXG4gIGlmIChhbmdsZSA8IDApIHtcbiAgICBhbmdsZSArPSBQSTI7XG4gIH1cblxuICByZXR1cm4gYW5nbGUgPj0gc3RhcnRBbmdsZSAmJiBhbmdsZSA8PSBlbmRBbmdsZSB8fCBhbmdsZSArIFBJMiA+PSBzdGFydEFuZ2xlICYmIGFuZ2xlICsgUEkyIDw9IGVuZEFuZ2xlO1xufVxuXG5leHBvcnRzLmNvbnRhaW5TdHJva2UgPSBjb250YWluU3Ryb2tlOyIsInZhciBjdXJ2ZSA9IHJlcXVpcmUoXCIuLi9jb3JlL2N1cnZlXCIpO1xuXG4vKipcbiAqIOS4ieasoei0neWhnuWwlOabsue6v+aPj+i+ueWMheWQq+WIpOaWrVxuICogQHBhcmFtICB7bnVtYmVyfSAgeDBcbiAqIEBwYXJhbSAge251bWJlcn0gIHkwXG4gKiBAcGFyYW0gIHtudW1iZXJ9ICB4MVxuICogQHBhcmFtICB7bnVtYmVyfSAgeTFcbiAqIEBwYXJhbSAge251bWJlcn0gIHgyXG4gKiBAcGFyYW0gIHtudW1iZXJ9ICB5MlxuICogQHBhcmFtICB7bnVtYmVyfSAgeDNcbiAqIEBwYXJhbSAge251bWJlcn0gIHkzXG4gKiBAcGFyYW0gIHtudW1iZXJ9ICBsaW5lV2lkdGhcbiAqIEBwYXJhbSAge251bWJlcn0gIHhcbiAqIEBwYXJhbSAge251bWJlcn0gIHlcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5TdHJva2UoeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCBsaW5lV2lkdGgsIHgsIHkpIHtcbiAgaWYgKGxpbmVXaWR0aCA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBfbCA9IGxpbmVXaWR0aDsgLy8gUXVpY2sgcmVqZWN0XG5cbiAgaWYgKHkgPiB5MCArIF9sICYmIHkgPiB5MSArIF9sICYmIHkgPiB5MiArIF9sICYmIHkgPiB5MyArIF9sIHx8IHkgPCB5MCAtIF9sICYmIHkgPCB5MSAtIF9sICYmIHkgPCB5MiAtIF9sICYmIHkgPCB5MyAtIF9sIHx8IHggPiB4MCArIF9sICYmIHggPiB4MSArIF9sICYmIHggPiB4MiArIF9sICYmIHggPiB4MyArIF9sIHx8IHggPCB4MCAtIF9sICYmIHggPCB4MSAtIF9sICYmIHggPCB4MiAtIF9sICYmIHggPCB4MyAtIF9sKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGQgPSBjdXJ2ZS5jdWJpY1Byb2plY3RQb2ludCh4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMsIHgsIHksIG51bGwpO1xuICByZXR1cm4gZCA8PSBfbCAvIDI7XG59XG5cbmV4cG9ydHMuY29udGFpblN0cm9rZSA9IGNvbnRhaW5TdHJva2U7IiwiLyoqXG4gKiDnur/mrrXljIXlkKvliKTmlq1cbiAqIEBwYXJhbSAge251bWJlcn0gIHgwXG4gKiBAcGFyYW0gIHtudW1iZXJ9ICB5MFxuICogQHBhcmFtICB7bnVtYmVyfSAgeDFcbiAqIEBwYXJhbSAge251bWJlcn0gIHkxXG4gKiBAcGFyYW0gIHtudW1iZXJ9ICBsaW5lV2lkdGhcbiAqIEBwYXJhbSAge251bWJlcn0gIHhcbiAqIEBwYXJhbSAge251bWJlcn0gIHlcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5TdHJva2UoeDAsIHkwLCB4MSwgeTEsIGxpbmVXaWR0aCwgeCwgeSkge1xuICBpZiAobGluZVdpZHRoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIF9sID0gbGluZVdpZHRoO1xuICB2YXIgX2EgPSAwO1xuICB2YXIgX2IgPSB4MDsgLy8gUXVpY2sgcmVqZWN0XG5cbiAgaWYgKHkgPiB5MCArIF9sICYmIHkgPiB5MSArIF9sIHx8IHkgPCB5MCAtIF9sICYmIHkgPCB5MSAtIF9sIHx8IHggPiB4MCArIF9sICYmIHggPiB4MSArIF9sIHx8IHggPCB4MCAtIF9sICYmIHggPCB4MSAtIF9sKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHgwICE9PSB4MSkge1xuICAgIF9hID0gKHkwIC0geTEpIC8gKHgwIC0geDEpO1xuICAgIF9iID0gKHgwICogeTEgLSB4MSAqIHkwKSAvICh4MCAtIHgxKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCAtIHgwKSA8PSBfbCAvIDI7XG4gIH1cblxuICB2YXIgdG1wID0gX2EgKiB4IC0geSArIF9iO1xuXG4gIHZhciBfcyA9IHRtcCAqIHRtcCAvIChfYSAqIF9hICsgMSk7XG5cbiAgcmV0dXJuIF9zIDw9IF9sIC8gMiAqIF9sIC8gMjtcbn1cblxuZXhwb3J0cy5jb250YWluU3Ryb2tlID0gY29udGFpblN0cm9rZTsiLCJ2YXIgUGF0aFByb3h5ID0gcmVxdWlyZShcIi4uL2NvcmUvUGF0aFByb3h5XCIpO1xuXG52YXIgbGluZSA9IHJlcXVpcmUoXCIuL2xpbmVcIik7XG5cbnZhciBjdWJpYyA9IHJlcXVpcmUoXCIuL2N1YmljXCIpO1xuXG52YXIgcXVhZHJhdGljID0gcmVxdWlyZShcIi4vcXVhZHJhdGljXCIpO1xuXG52YXIgYXJjID0gcmVxdWlyZShcIi4vYXJjXCIpO1xuXG52YXIgX3V0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXG52YXIgbm9ybWFsaXplUmFkaWFuID0gX3V0aWwubm9ybWFsaXplUmFkaWFuO1xuXG52YXIgY3VydmUgPSByZXF1aXJlKFwiLi4vY29yZS9jdXJ2ZVwiKTtcblxudmFyIHdpbmRpbmdMaW5lID0gcmVxdWlyZShcIi4vd2luZGluZ0xpbmVcIik7XG5cbnZhciBDTUQgPSBQYXRoUHJveHkuQ01EO1xudmFyIFBJMiA9IE1hdGguUEkgKiAyO1xudmFyIEVQU0lMT04gPSAxZS00O1xuXG5mdW5jdGlvbiBpc0Fyb3VuZEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIE1hdGguYWJzKGEgLSBiKSA8IEVQU0lMT047XG59IC8vIOS4tOaXtuaVsOe7hFxuXG5cbnZhciByb290cyA9IFstMSwgLTEsIC0xXTtcbnZhciBleHRyZW1hID0gWy0xLCAtMV07XG5cbmZ1bmN0aW9uIHN3YXBFeHRyZW1hKCkge1xuICB2YXIgdG1wID0gZXh0cmVtYVswXTtcbiAgZXh0cmVtYVswXSA9IGV4dHJlbWFbMV07XG4gIGV4dHJlbWFbMV0gPSB0bXA7XG59XG5cbmZ1bmN0aW9uIHdpbmRpbmdDdWJpYyh4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMsIHgsIHkpIHtcbiAgLy8gUXVpY2sgcmVqZWN0XG4gIGlmICh5ID4geTAgJiYgeSA+IHkxICYmIHkgPiB5MiAmJiB5ID4geTMgfHwgeSA8IHkwICYmIHkgPCB5MSAmJiB5IDwgeTIgJiYgeSA8IHkzKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgblJvb3RzID0gY3VydmUuY3ViaWNSb290QXQoeTAsIHkxLCB5MiwgeTMsIHksIHJvb3RzKTtcblxuICBpZiAoblJvb3RzID09PSAwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHcgPSAwO1xuICAgIHZhciBuRXh0cmVtYSA9IC0xO1xuICAgIHZhciB5MF8sIHkxXztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgblJvb3RzOyBpKyspIHtcbiAgICAgIHZhciB0ID0gcm9vdHNbaV07IC8vIEF2b2lkIHdpbmRpbmcgZXJyb3Igd2hlbiBpbnRlcnNlY3Rpb24gcG9pbnQgaXMgdGhlIGNvbm5lY3QgcG9pbnQgb2YgdHdvIGxpbmUgb2YgcG9seWdvblxuXG4gICAgICB2YXIgdW5pdCA9IHQgPT09IDAgfHwgdCA9PT0gMSA/IDAuNSA6IDE7XG4gICAgICB2YXIgeF8gPSBjdXJ2ZS5jdWJpY0F0KHgwLCB4MSwgeDIsIHgzLCB0KTtcblxuICAgICAgaWYgKHhfIDwgeCkge1xuICAgICAgICAvLyBRdWljayByZWplY3RcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChuRXh0cmVtYSA8IDApIHtcbiAgICAgICAgbkV4dHJlbWEgPSBjdXJ2ZS5jdWJpY0V4dHJlbWEoeTAsIHkxLCB5MiwgeTMsIGV4dHJlbWEpO1xuXG4gICAgICAgIGlmIChleHRyZW1hWzFdIDwgZXh0cmVtYVswXSAmJiBuRXh0cmVtYSA+IDEpIHtcbiAgICAgICAgICBzd2FwRXh0cmVtYSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgeTBfID0gY3VydmUuY3ViaWNBdCh5MCwgeTEsIHkyLCB5MywgZXh0cmVtYVswXSk7XG5cbiAgICAgICAgaWYgKG5FeHRyZW1hID4gMSkge1xuICAgICAgICAgIHkxXyA9IGN1cnZlLmN1YmljQXQoeTAsIHkxLCB5MiwgeTMsIGV4dHJlbWFbMV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChuRXh0cmVtYSA9PSAyKSB7XG4gICAgICAgIC8vIOWIhuaIkOS4ieauteWNleiwg+WHveaVsFxuICAgICAgICBpZiAodCA8IGV4dHJlbWFbMF0pIHtcbiAgICAgICAgICB3ICs9IHkwXyA8IHkwID8gdW5pdCA6IC11bml0O1xuICAgICAgICB9IGVsc2UgaWYgKHQgPCBleHRyZW1hWzFdKSB7XG4gICAgICAgICAgdyArPSB5MV8gPCB5MF8gPyB1bml0IDogLXVuaXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdyArPSB5MyA8IHkxXyA/IHVuaXQgOiAtdW5pdDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8g5YiG5oiQ5Lik5q615Y2V6LCD5Ye95pWwXG4gICAgICAgIGlmICh0IDwgZXh0cmVtYVswXSkge1xuICAgICAgICAgIHcgKz0geTBfIDwgeTAgPyB1bml0IDogLXVuaXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdyArPSB5MyA8IHkwXyA/IHVuaXQgOiAtdW5pdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3O1xuICB9XG59XG5cbmZ1bmN0aW9uIHdpbmRpbmdRdWFkcmF0aWMoeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgeCwgeSkge1xuICAvLyBRdWljayByZWplY3RcbiAgaWYgKHkgPiB5MCAmJiB5ID4geTEgJiYgeSA+IHkyIHx8IHkgPCB5MCAmJiB5IDwgeTEgJiYgeSA8IHkyKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgblJvb3RzID0gY3VydmUucXVhZHJhdGljUm9vdEF0KHkwLCB5MSwgeTIsIHksIHJvb3RzKTtcblxuICBpZiAoblJvb3RzID09PSAwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHQgPSBjdXJ2ZS5xdWFkcmF0aWNFeHRyZW11bSh5MCwgeTEsIHkyKTtcblxuICAgIGlmICh0ID49IDAgJiYgdCA8PSAxKSB7XG4gICAgICB2YXIgdyA9IDA7XG4gICAgICB2YXIgeV8gPSBjdXJ2ZS5xdWFkcmF0aWNBdCh5MCwgeTEsIHkyLCB0KTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuUm9vdHM7IGkrKykge1xuICAgICAgICAvLyBSZW1vdmUgb25lIGVuZHBvaW50LlxuICAgICAgICB2YXIgdW5pdCA9IHJvb3RzW2ldID09PSAwIHx8IHJvb3RzW2ldID09PSAxID8gMC41IDogMTtcbiAgICAgICAgdmFyIHhfID0gY3VydmUucXVhZHJhdGljQXQoeDAsIHgxLCB4Miwgcm9vdHNbaV0pO1xuXG4gICAgICAgIGlmICh4XyA8IHgpIHtcbiAgICAgICAgICAvLyBRdWljayByZWplY3RcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyb290c1tpXSA8IHQpIHtcbiAgICAgICAgICB3ICs9IHlfIDwgeTAgPyB1bml0IDogLXVuaXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdyArPSB5MiA8IHlfID8gdW5pdCA6IC11bml0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB3O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZW1vdmUgb25lIGVuZHBvaW50LlxuICAgICAgdmFyIHVuaXQgPSByb290c1swXSA9PT0gMCB8fCByb290c1swXSA9PT0gMSA/IDAuNSA6IDE7XG4gICAgICB2YXIgeF8gPSBjdXJ2ZS5xdWFkcmF0aWNBdCh4MCwgeDEsIHgyLCByb290c1swXSk7XG5cbiAgICAgIGlmICh4XyA8IHgpIHtcbiAgICAgICAgLy8gUXVpY2sgcmVqZWN0XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4geTIgPCB5MCA/IHVuaXQgOiAtdW5pdDtcbiAgICB9XG4gIH1cbn0gLy8gVE9ET1xuLy8gQXJjIOaXi+i9rFxuXG5cbmZ1bmN0aW9uIHdpbmRpbmdBcmMoY3gsIGN5LCByLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgYW50aWNsb2Nrd2lzZSwgeCwgeSkge1xuICB5IC09IGN5O1xuXG4gIGlmICh5ID4gciB8fCB5IDwgLXIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciB0bXAgPSBNYXRoLnNxcnQociAqIHIgLSB5ICogeSk7XG4gIHJvb3RzWzBdID0gLXRtcDtcbiAgcm9vdHNbMV0gPSB0bXA7XG4gIHZhciBkaWZmID0gTWF0aC5hYnMoc3RhcnRBbmdsZSAtIGVuZEFuZ2xlKTtcblxuICBpZiAoZGlmZiA8IDFlLTQpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmIChkaWZmICUgUEkyIDwgMWUtNCkge1xuICAgIC8vIElzIGEgY2lyY2xlXG4gICAgc3RhcnRBbmdsZSA9IDA7XG4gICAgZW5kQW5nbGUgPSBQSTI7XG4gICAgdmFyIGRpciA9IGFudGljbG9ja3dpc2UgPyAxIDogLTE7XG5cbiAgICBpZiAoeCA+PSByb290c1swXSArIGN4ICYmIHggPD0gcm9vdHNbMV0gKyBjeCkge1xuICAgICAgcmV0dXJuIGRpcjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9XG5cbiAgaWYgKGFudGljbG9ja3dpc2UpIHtcbiAgICB2YXIgdG1wID0gc3RhcnRBbmdsZTtcbiAgICBzdGFydEFuZ2xlID0gbm9ybWFsaXplUmFkaWFuKGVuZEFuZ2xlKTtcbiAgICBlbmRBbmdsZSA9IG5vcm1hbGl6ZVJhZGlhbih0bXApO1xuICB9IGVsc2Uge1xuICAgIHN0YXJ0QW5nbGUgPSBub3JtYWxpemVSYWRpYW4oc3RhcnRBbmdsZSk7XG4gICAgZW5kQW5nbGUgPSBub3JtYWxpemVSYWRpYW4oZW5kQW5nbGUpO1xuICB9XG5cbiAgaWYgKHN0YXJ0QW5nbGUgPiBlbmRBbmdsZSkge1xuICAgIGVuZEFuZ2xlICs9IFBJMjtcbiAgfVxuXG4gIHZhciB3ID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDI7IGkrKykge1xuICAgIHZhciB4XyA9IHJvb3RzW2ldO1xuXG4gICAgaWYgKHhfICsgY3ggPiB4KSB7XG4gICAgICB2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKHksIHhfKTtcbiAgICAgIHZhciBkaXIgPSBhbnRpY2xvY2t3aXNlID8gMSA6IC0xO1xuXG4gICAgICBpZiAoYW5nbGUgPCAwKSB7XG4gICAgICAgIGFuZ2xlID0gUEkyICsgYW5nbGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmdsZSA+PSBzdGFydEFuZ2xlICYmIGFuZ2xlIDw9IGVuZEFuZ2xlIHx8IGFuZ2xlICsgUEkyID49IHN0YXJ0QW5nbGUgJiYgYW5nbGUgKyBQSTIgPD0gZW5kQW5nbGUpIHtcbiAgICAgICAgaWYgKGFuZ2xlID4gTWF0aC5QSSAvIDIgJiYgYW5nbGUgPCBNYXRoLlBJICogMS41KSB7XG4gICAgICAgICAgZGlyID0gLWRpcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHcgKz0gZGlyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB3O1xufVxuXG5mdW5jdGlvbiBjb250YWluUGF0aChkYXRhLCBsaW5lV2lkdGgsIGlzU3Ryb2tlLCB4LCB5KSB7XG4gIHZhciB3ID0gMDtcbiAgdmFyIHhpID0gMDtcbiAgdmFyIHlpID0gMDtcbiAgdmFyIHgwID0gMDtcbiAgdmFyIHkwID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOykge1xuICAgIHZhciBjbWQgPSBkYXRhW2krK107IC8vIEJlZ2luIGEgbmV3IHN1YnBhdGhcblxuICAgIGlmIChjbWQgPT09IENNRC5NICYmIGkgPiAxKSB7XG4gICAgICAvLyBDbG9zZSBwcmV2aW91cyBzdWJwYXRoXG4gICAgICBpZiAoIWlzU3Ryb2tlKSB7XG4gICAgICAgIHcgKz0gd2luZGluZ0xpbmUoeGksIHlpLCB4MCwgeTAsIHgsIHkpO1xuICAgICAgfSAvLyDlpoLmnpzooqvku7vkvZXkuIDkuKogc3VicGF0aCDljIXlkKtcbiAgICAgIC8vIGlmICh3ICE9PSAwKSB7XG4gICAgICAvLyAgICAgcmV0dXJuIHRydWU7XG4gICAgICAvLyB9XG5cbiAgICB9XG5cbiAgICBpZiAoaSA9PSAxKSB7XG4gICAgICAvLyDlpoLmnpznrKzkuIDkuKrlkb3ku6TmmK8gTCwgQywgUVxuICAgICAgLy8g5YiZIHByZXZpb3VzIHBvaW50IOWQjOe7mOWItuWRveS7pOeahOesrOS4gOS4qiBwb2ludFxuICAgICAgLy9cbiAgICAgIC8vIOesrOS4gOS4quWRveS7pOS4uiBBcmMg55qE5oOF5Ya15LiL5Lya5Zyo5ZCO6Z2i54m55q6K5aSE55CGXG4gICAgICB4aSA9IGRhdGFbaV07XG4gICAgICB5aSA9IGRhdGFbaSArIDFdO1xuICAgICAgeDAgPSB4aTtcbiAgICAgIHkwID0geWk7XG4gICAgfVxuXG4gICAgc3dpdGNoIChjbWQpIHtcbiAgICAgIGNhc2UgQ01ELk06XG4gICAgICAgIC8vIG1vdmVUbyDlkb3ku6Tph43mlrDliJvlu7rkuIDkuKrmlrDnmoQgc3VicGF0aCwg5bm25LiU5pu05paw5paw55qE6LW354K5XG4gICAgICAgIC8vIOWcqCBjbG9zZVBhdGgg55qE5pe25YCZ5L2/55SoXG4gICAgICAgIHgwID0gZGF0YVtpKytdO1xuICAgICAgICB5MCA9IGRhdGFbaSsrXTtcbiAgICAgICAgeGkgPSB4MDtcbiAgICAgICAgeWkgPSB5MDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgQ01ELkw6XG4gICAgICAgIGlmIChpc1N0cm9rZSkge1xuICAgICAgICAgIGlmIChsaW5lLmNvbnRhaW5TdHJva2UoeGksIHlpLCBkYXRhW2ldLCBkYXRhW2kgKyAxXSwgbGluZVdpZHRoLCB4LCB5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE5PVEUg5Zyo56ys5LiA5Liq5ZG95Luk5Li6IEwsIEMsIFEg55qE5pe25YCZ5Lya6K6h566X5Ye6IE5hTlxuICAgICAgICAgIHcgKz0gd2luZGluZ0xpbmUoeGksIHlpLCBkYXRhW2ldLCBkYXRhW2kgKyAxXSwgeCwgeSkgfHwgMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHhpID0gZGF0YVtpKytdO1xuICAgICAgICB5aSA9IGRhdGFbaSsrXTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgQ01ELkM6XG4gICAgICAgIGlmIChpc1N0cm9rZSkge1xuICAgICAgICAgIGlmIChjdWJpYy5jb250YWluU3Ryb2tlKHhpLCB5aSwgZGF0YVtpKytdLCBkYXRhW2krK10sIGRhdGFbaSsrXSwgZGF0YVtpKytdLCBkYXRhW2ldLCBkYXRhW2kgKyAxXSwgbGluZVdpZHRoLCB4LCB5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHcgKz0gd2luZGluZ0N1YmljKHhpLCB5aSwgZGF0YVtpKytdLCBkYXRhW2krK10sIGRhdGFbaSsrXSwgZGF0YVtpKytdLCBkYXRhW2ldLCBkYXRhW2kgKyAxXSwgeCwgeSkgfHwgMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHhpID0gZGF0YVtpKytdO1xuICAgICAgICB5aSA9IGRhdGFbaSsrXTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgQ01ELlE6XG4gICAgICAgIGlmIChpc1N0cm9rZSkge1xuICAgICAgICAgIGlmIChxdWFkcmF0aWMuY29udGFpblN0cm9rZSh4aSwgeWksIGRhdGFbaSsrXSwgZGF0YVtpKytdLCBkYXRhW2ldLCBkYXRhW2kgKyAxXSwgbGluZVdpZHRoLCB4LCB5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHcgKz0gd2luZGluZ1F1YWRyYXRpYyh4aSwgeWksIGRhdGFbaSsrXSwgZGF0YVtpKytdLCBkYXRhW2ldLCBkYXRhW2kgKyAxXSwgeCwgeSkgfHwgMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHhpID0gZGF0YVtpKytdO1xuICAgICAgICB5aSA9IGRhdGFbaSsrXTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgQ01ELkE6XG4gICAgICAgIC8vIFRPRE8gQXJjIOWIpOaWreeahOW8gOmUgOavlOi+g+Wkp1xuICAgICAgICB2YXIgY3ggPSBkYXRhW2krK107XG4gICAgICAgIHZhciBjeSA9IGRhdGFbaSsrXTtcbiAgICAgICAgdmFyIHJ4ID0gZGF0YVtpKytdO1xuICAgICAgICB2YXIgcnkgPSBkYXRhW2krK107XG4gICAgICAgIHZhciB0aGV0YSA9IGRhdGFbaSsrXTtcbiAgICAgICAgdmFyIGRUaGV0YSA9IGRhdGFbaSsrXTsgLy8gVE9ETyBBcmMg5peL6L2sXG5cbiAgICAgICAgdmFyIHBzaSA9IGRhdGFbaSsrXTtcbiAgICAgICAgdmFyIGFudGljbG9ja3dpc2UgPSAxIC0gZGF0YVtpKytdO1xuICAgICAgICB2YXIgeDEgPSBNYXRoLmNvcyh0aGV0YSkgKiByeCArIGN4O1xuICAgICAgICB2YXIgeTEgPSBNYXRoLnNpbih0aGV0YSkgKiByeSArIGN5OyAvLyDkuI3mmK/nm7TmjqXkvb/nlKggYXJjIOWRveS7pFxuXG4gICAgICAgIGlmIChpID4gMSkge1xuICAgICAgICAgIHcgKz0gd2luZGluZ0xpbmUoeGksIHlpLCB4MSwgeTEsIHgsIHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIOesrOS4gOS4quWRveS7pOi1t+eCuei/mOacquWumuS5iVxuICAgICAgICAgIHgwID0geDE7XG4gICAgICAgICAgeTAgPSB5MTtcbiAgICAgICAgfSAvLyB6ciDkvb/nlKhzY2FsZeadpeaooeaLn+akreWchiwg6L+Z6YeM5Lmf5a+5eOWBmuS4gOWumueahOe8qeaUvlxuXG5cbiAgICAgICAgdmFyIF94ID0gKHggLSBjeCkgKiByeSAvIHJ4ICsgY3g7XG5cbiAgICAgICAgaWYgKGlzU3Ryb2tlKSB7XG4gICAgICAgICAgaWYgKGFyYy5jb250YWluU3Ryb2tlKGN4LCBjeSwgcnksIHRoZXRhLCB0aGV0YSArIGRUaGV0YSwgYW50aWNsb2Nrd2lzZSwgbGluZVdpZHRoLCBfeCwgeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3ICs9IHdpbmRpbmdBcmMoY3gsIGN5LCByeSwgdGhldGEsIHRoZXRhICsgZFRoZXRhLCBhbnRpY2xvY2t3aXNlLCBfeCwgeSk7XG4gICAgICAgIH1cblxuICAgICAgICB4aSA9IE1hdGguY29zKHRoZXRhICsgZFRoZXRhKSAqIHJ4ICsgY3g7XG4gICAgICAgIHlpID0gTWF0aC5zaW4odGhldGEgKyBkVGhldGEpICogcnkgKyBjeTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgQ01ELlI6XG4gICAgICAgIHgwID0geGkgPSBkYXRhW2krK107XG4gICAgICAgIHkwID0geWkgPSBkYXRhW2krK107XG4gICAgICAgIHZhciB3aWR0aCA9IGRhdGFbaSsrXTtcbiAgICAgICAgdmFyIGhlaWdodCA9IGRhdGFbaSsrXTtcbiAgICAgICAgdmFyIHgxID0geDAgKyB3aWR0aDtcbiAgICAgICAgdmFyIHkxID0geTAgKyBoZWlnaHQ7XG5cbiAgICAgICAgaWYgKGlzU3Ryb2tlKSB7XG4gICAgICAgICAgaWYgKGxpbmUuY29udGFpblN0cm9rZSh4MCwgeTAsIHgxLCB5MCwgbGluZVdpZHRoLCB4LCB5KSB8fCBsaW5lLmNvbnRhaW5TdHJva2UoeDEsIHkwLCB4MSwgeTEsIGxpbmVXaWR0aCwgeCwgeSkgfHwgbGluZS5jb250YWluU3Ryb2tlKHgxLCB5MSwgeDAsIHkxLCBsaW5lV2lkdGgsIHgsIHkpIHx8IGxpbmUuY29udGFpblN0cm9rZSh4MCwgeTEsIHgwLCB5MCwgbGluZVdpZHRoLCB4LCB5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEZJWE1FIENsb2Nrd2lzZSA/XG4gICAgICAgICAgdyArPSB3aW5kaW5nTGluZSh4MSwgeTAsIHgxLCB5MSwgeCwgeSk7XG4gICAgICAgICAgdyArPSB3aW5kaW5nTGluZSh4MCwgeTEsIHgwLCB5MCwgeCwgeSk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBDTUQuWjpcbiAgICAgICAgaWYgKGlzU3Ryb2tlKSB7XG4gICAgICAgICAgaWYgKGxpbmUuY29udGFpblN0cm9rZSh4aSwgeWksIHgwLCB5MCwgbGluZVdpZHRoLCB4LCB5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIENsb3NlIGEgc3VicGF0aFxuICAgICAgICAgIHcgKz0gd2luZGluZ0xpbmUoeGksIHlpLCB4MCwgeTAsIHgsIHkpOyAvLyDlpoLmnpzooqvku7vkvZXkuIDkuKogc3VicGF0aCDljIXlkKtcbiAgICAgICAgICAvLyBGSVhNRSBzdWJwYXRocyBtYXkgb3ZlcmxhcFxuICAgICAgICAgIC8vIGlmICh3ICE9PSAwKSB7XG4gICAgICAgICAgLy8gICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIC8vIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHhpID0geDA7XG4gICAgICAgIHlpID0geTA7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICghaXNTdHJva2UgJiYgIWlzQXJvdW5kRXF1YWwoeWksIHkwKSkge1xuICAgIHcgKz0gd2luZGluZ0xpbmUoeGksIHlpLCB4MCwgeTAsIHgsIHkpIHx8IDA7XG4gIH1cblxuICByZXR1cm4gdyAhPT0gMDtcbn1cblxuZnVuY3Rpb24gY29udGFpbihwYXRoRGF0YSwgeCwgeSkge1xuICByZXR1cm4gY29udGFpblBhdGgocGF0aERhdGEsIDAsIGZhbHNlLCB4LCB5KTtcbn1cblxuZnVuY3Rpb24gY29udGFpblN0cm9rZShwYXRoRGF0YSwgbGluZVdpZHRoLCB4LCB5KSB7XG4gIHJldHVybiBjb250YWluUGF0aChwYXRoRGF0YSwgbGluZVdpZHRoLCB0cnVlLCB4LCB5KTtcbn1cblxuZXhwb3J0cy5jb250YWluID0gY29udGFpbjtcbmV4cG9ydHMuY29udGFpblN0cm9rZSA9IGNvbnRhaW5TdHJva2U7IiwidmFyIHdpbmRpbmdMaW5lID0gcmVxdWlyZShcIi4vd2luZGluZ0xpbmVcIik7XG5cbnZhciBFUFNJTE9OID0gMWUtODtcblxuZnVuY3Rpb24gaXNBcm91bmRFcXVhbChhLCBiKSB7XG4gIHJldHVybiBNYXRoLmFicyhhIC0gYikgPCBFUFNJTE9OO1xufVxuXG5mdW5jdGlvbiBjb250YWluKHBvaW50cywgeCwgeSkge1xuICB2YXIgdyA9IDA7XG4gIHZhciBwID0gcG9pbnRzWzBdO1xuXG4gIGlmICghcCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHAyID0gcG9pbnRzW2ldO1xuICAgIHcgKz0gd2luZGluZ0xpbmUocFswXSwgcFsxXSwgcDJbMF0sIHAyWzFdLCB4LCB5KTtcbiAgICBwID0gcDI7XG4gIH0gLy8gQ2xvc2UgcG9seWdvblxuXG5cbiAgdmFyIHAwID0gcG9pbnRzWzBdO1xuXG4gIGlmICghaXNBcm91bmRFcXVhbChwWzBdLCBwMFswXSkgfHwgIWlzQXJvdW5kRXF1YWwocFsxXSwgcDBbMV0pKSB7XG4gICAgdyArPSB3aW5kaW5nTGluZShwWzBdLCBwWzFdLCBwMFswXSwgcDBbMV0sIHgsIHkpO1xuICB9XG5cbiAgcmV0dXJuIHcgIT09IDA7XG59XG5cbmV4cG9ydHMuY29udGFpbiA9IGNvbnRhaW47IiwidmFyIF9jdXJ2ZSA9IHJlcXVpcmUoXCIuLi9jb3JlL2N1cnZlXCIpO1xuXG52YXIgcXVhZHJhdGljUHJvamVjdFBvaW50ID0gX2N1cnZlLnF1YWRyYXRpY1Byb2plY3RQb2ludDtcblxuLyoqXG4gKiDkuozmrKHotJ3loZ7lsJTmm7Lnur/mj4/ovrnljIXlkKvliKTmlq1cbiAqIEBwYXJhbSAge251bWJlcn0gIHgwXG4gKiBAcGFyYW0gIHtudW1iZXJ9ICB5MFxuICogQHBhcmFtICB7bnVtYmVyfSAgeDFcbiAqIEBwYXJhbSAge251bWJlcn0gIHkxXG4gKiBAcGFyYW0gIHtudW1iZXJ9ICB4MlxuICogQHBhcmFtICB7bnVtYmVyfSAgeTJcbiAqIEBwYXJhbSAge251bWJlcn0gIGxpbmVXaWR0aFxuICogQHBhcmFtICB7bnVtYmVyfSAgeFxuICogQHBhcmFtICB7bnVtYmVyfSAgeVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gY29udGFpblN0cm9rZSh4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCBsaW5lV2lkdGgsIHgsIHkpIHtcbiAgaWYgKGxpbmVXaWR0aCA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBfbCA9IGxpbmVXaWR0aDsgLy8gUXVpY2sgcmVqZWN0XG5cbiAgaWYgKHkgPiB5MCArIF9sICYmIHkgPiB5MSArIF9sICYmIHkgPiB5MiArIF9sIHx8IHkgPCB5MCAtIF9sICYmIHkgPCB5MSAtIF9sICYmIHkgPCB5MiAtIF9sIHx8IHggPiB4MCArIF9sICYmIHggPiB4MSArIF9sICYmIHggPiB4MiArIF9sIHx8IHggPCB4MCAtIF9sICYmIHggPCB4MSAtIF9sICYmIHggPCB4MiAtIF9sKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGQgPSBxdWFkcmF0aWNQcm9qZWN0UG9pbnQoeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgeCwgeSwgbnVsbCk7XG4gIHJldHVybiBkIDw9IF9sIC8gMjtcbn1cblxuZXhwb3J0cy5jb250YWluU3Ryb2tlID0gY29udGFpblN0cm9rZTsiLCJ2YXIgQm91bmRpbmdSZWN0ID0gcmVxdWlyZShcIi4uL2NvcmUvQm91bmRpbmdSZWN0XCIpO1xuXG52YXIgaW1hZ2VIZWxwZXIgPSByZXF1aXJlKFwiLi4vZ3JhcGhpYy9oZWxwZXIvaW1hZ2VcIik7XG5cbnZhciBfdXRpbCA9IHJlcXVpcmUoXCIuLi9jb3JlL3V0aWxcIik7XG5cbnZhciBnZXRDb250ZXh0ID0gX3V0aWwuZ2V0Q29udGV4dDtcbnZhciBleHRlbmQgPSBfdXRpbC5leHRlbmQ7XG52YXIgcmV0cmlldmUyID0gX3V0aWwucmV0cmlldmUyO1xudmFyIHJldHJpZXZlMyA9IF91dGlsLnJldHJpZXZlMztcbnZhciB0cmltID0gX3V0aWwudHJpbTtcbnZhciB0ZXh0V2lkdGhDYWNoZSA9IHt9O1xudmFyIHRleHRXaWR0aENhY2hlQ291bnRlciA9IDA7XG52YXIgVEVYVF9DQUNIRV9NQVggPSA1MDAwO1xudmFyIFNUWUxFX1JFRyA9IC9cXHsoW2EtekEtWjAtOV9dKylcXHwoW159XSopXFx9L2c7XG52YXIgREVGQVVMVF9GT05UID0gJzEycHggc2Fucy1zZXJpZic7IC8vIEF2b2lkIGFzc2lnbiB0byBhbiBleHBvcnRlZCB2YXJpYWJsZSwgZm9yIHRyYW5zZm9ybWluZyB0byBjanMuXG5cbnZhciBtZXRob2RzID0ge307XG5cbmZ1bmN0aW9uICRvdmVycmlkZShuYW1lLCBmbikge1xuICBtZXRob2RzW25hbWVdID0gZm47XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAcGFyYW0ge3N0cmluZ30gZm9udFxuICogQHJldHVybiB7bnVtYmVyfSB3aWR0aFxuICovXG5cblxuZnVuY3Rpb24gZ2V0V2lkdGgodGV4dCwgZm9udCkge1xuICBmb250ID0gZm9udCB8fCBERUZBVUxUX0ZPTlQ7XG4gIHZhciBrZXkgPSB0ZXh0ICsgJzonICsgZm9udDtcblxuICBpZiAodGV4dFdpZHRoQ2FjaGVba2V5XSkge1xuICAgIHJldHVybiB0ZXh0V2lkdGhDYWNoZVtrZXldO1xuICB9XG5cbiAgdmFyIHRleHRMaW5lcyA9ICh0ZXh0ICsgJycpLnNwbGl0KCdcXG4nKTtcbiAgdmFyIHdpZHRoID0gMDtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IHRleHRMaW5lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAvLyB0ZXh0Q29udGFpbi5tZWFzdXJlVGV4dCBtYXkgYmUgb3ZlcnJpZGVkIGluIFNWRyBvciBWTUxcbiAgICB3aWR0aCA9IE1hdGgubWF4KG1lYXN1cmVUZXh0KHRleHRMaW5lc1tpXSwgZm9udCkud2lkdGgsIHdpZHRoKTtcbiAgfVxuXG4gIGlmICh0ZXh0V2lkdGhDYWNoZUNvdW50ZXIgPiBURVhUX0NBQ0hFX01BWCkge1xuICAgIHRleHRXaWR0aENhY2hlQ291bnRlciA9IDA7XG4gICAgdGV4dFdpZHRoQ2FjaGUgPSB7fTtcbiAgfVxuXG4gIHRleHRXaWR0aENhY2hlQ291bnRlcisrO1xuICB0ZXh0V2lkdGhDYWNoZVtrZXldID0gd2lkdGg7XG4gIHJldHVybiB3aWR0aDtcbn1cbi8qKlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb250XG4gKiBAcGFyYW0ge3N0cmluZ30gW3RleHRBbGlnbj0nbGVmdCddXG4gKiBAcGFyYW0ge3N0cmluZ30gW3RleHRWZXJ0aWNhbEFsaWduPSd0b3AnXVxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gW3RleHRQYWRkaW5nXVxuICogQHBhcmFtIHtPYmplY3R9IFtyaWNoXVxuICogQHBhcmFtIHtPYmplY3R9IFt0cnVuY2F0ZV1cbiAqIEByZXR1cm4ge09iamVjdH0ge3gsIHksIHdpZHRoLCBoZWlnaHQsIGxpbmVIZWlnaHR9XG4gKi9cblxuXG5mdW5jdGlvbiBnZXRCb3VuZGluZ1JlY3QodGV4dCwgZm9udCwgdGV4dEFsaWduLCB0ZXh0VmVydGljYWxBbGlnbiwgdGV4dFBhZGRpbmcsIHJpY2gsIHRydW5jYXRlKSB7XG4gIHJldHVybiByaWNoID8gZ2V0UmljaFRleHRSZWN0KHRleHQsIGZvbnQsIHRleHRBbGlnbiwgdGV4dFZlcnRpY2FsQWxpZ24sIHRleHRQYWRkaW5nLCByaWNoLCB0cnVuY2F0ZSkgOiBnZXRQbGFpblRleHRSZWN0KHRleHQsIGZvbnQsIHRleHRBbGlnbiwgdGV4dFZlcnRpY2FsQWxpZ24sIHRleHRQYWRkaW5nLCB0cnVuY2F0ZSk7XG59XG5cbmZ1bmN0aW9uIGdldFBsYWluVGV4dFJlY3QodGV4dCwgZm9udCwgdGV4dEFsaWduLCB0ZXh0VmVydGljYWxBbGlnbiwgdGV4dFBhZGRpbmcsIHRydW5jYXRlKSB7XG4gIHZhciBjb250ZW50QmxvY2sgPSBwYXJzZVBsYWluVGV4dCh0ZXh0LCBmb250LCB0ZXh0UGFkZGluZywgdHJ1bmNhdGUpO1xuICB2YXIgb3V0ZXJXaWR0aCA9IGdldFdpZHRoKHRleHQsIGZvbnQpO1xuXG4gIGlmICh0ZXh0UGFkZGluZykge1xuICAgIG91dGVyV2lkdGggKz0gdGV4dFBhZGRpbmdbMV0gKyB0ZXh0UGFkZGluZ1szXTtcbiAgfVxuXG4gIHZhciBvdXRlckhlaWdodCA9IGNvbnRlbnRCbG9jay5vdXRlckhlaWdodDtcbiAgdmFyIHggPSBhZGp1c3RUZXh0WCgwLCBvdXRlcldpZHRoLCB0ZXh0QWxpZ24pO1xuICB2YXIgeSA9IGFkanVzdFRleHRZKDAsIG91dGVySGVpZ2h0LCB0ZXh0VmVydGljYWxBbGlnbik7XG4gIHZhciByZWN0ID0gbmV3IEJvdW5kaW5nUmVjdCh4LCB5LCBvdXRlcldpZHRoLCBvdXRlckhlaWdodCk7XG4gIHJlY3QubGluZUhlaWdodCA9IGNvbnRlbnRCbG9jay5saW5lSGVpZ2h0O1xuICByZXR1cm4gcmVjdDtcbn1cblxuZnVuY3Rpb24gZ2V0UmljaFRleHRSZWN0KHRleHQsIGZvbnQsIHRleHRBbGlnbiwgdGV4dFZlcnRpY2FsQWxpZ24sIHRleHRQYWRkaW5nLCByaWNoLCB0cnVuY2F0ZSkge1xuICB2YXIgY29udGVudEJsb2NrID0gcGFyc2VSaWNoVGV4dCh0ZXh0LCB7XG4gICAgcmljaDogcmljaCxcbiAgICB0cnVuY2F0ZTogdHJ1bmNhdGUsXG4gICAgZm9udDogZm9udCxcbiAgICB0ZXh0QWxpZ246IHRleHRBbGlnbixcbiAgICB0ZXh0UGFkZGluZzogdGV4dFBhZGRpbmdcbiAgfSk7XG4gIHZhciBvdXRlcldpZHRoID0gY29udGVudEJsb2NrLm91dGVyV2lkdGg7XG4gIHZhciBvdXRlckhlaWdodCA9IGNvbnRlbnRCbG9jay5vdXRlckhlaWdodDtcbiAgdmFyIHggPSBhZGp1c3RUZXh0WCgwLCBvdXRlcldpZHRoLCB0ZXh0QWxpZ24pO1xuICB2YXIgeSA9IGFkanVzdFRleHRZKDAsIG91dGVySGVpZ2h0LCB0ZXh0VmVydGljYWxBbGlnbik7XG4gIHJldHVybiBuZXcgQm91bmRpbmdSZWN0KHgsIHksIG91dGVyV2lkdGgsIG91dGVySGVpZ2h0KTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtudW1iZXJ9IHhcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICogQHBhcmFtIHtzdHJpbmd9IFt0ZXh0QWxpZ249J2xlZnQnXVxuICogQHJldHVybiB7bnVtYmVyfSBBZGp1c3RlZCB4LlxuICovXG5cblxuZnVuY3Rpb24gYWRqdXN0VGV4dFgoeCwgd2lkdGgsIHRleHRBbGlnbikge1xuICAvLyBGSVhNRSBSaWdodCB0byBsZWZ0IGxhbmd1YWdlXG4gIGlmICh0ZXh0QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICB4IC09IHdpZHRoO1xuICB9IGVsc2UgaWYgKHRleHRBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICB4IC09IHdpZHRoIC8gMjtcbiAgfVxuXG4gIHJldHVybiB4O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge251bWJlcn0geVxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICogQHBhcmFtIHtzdHJpbmd9IFt0ZXh0VmVydGljYWxBbGlnbj0ndG9wJ11cbiAqIEByZXR1cm4ge251bWJlcn0gQWRqdXN0ZWQgeS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGFkanVzdFRleHRZKHksIGhlaWdodCwgdGV4dFZlcnRpY2FsQWxpZ24pIHtcbiAgaWYgKHRleHRWZXJ0aWNhbEFsaWduID09PSAnbWlkZGxlJykge1xuICAgIHkgLT0gaGVpZ2h0IC8gMjtcbiAgfSBlbHNlIGlmICh0ZXh0VmVydGljYWxBbGlnbiA9PT0gJ2JvdHRvbScpIHtcbiAgICB5IC09IGhlaWdodDtcbiAgfVxuXG4gIHJldHVybiB5O1xufVxuLyoqXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge3N0aXJuZ30gdGV4dFBvc2l0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gcmVjdCB7eCwgeSwgd2lkdGgsIGhlaWdodH1cbiAqIEBwYXJhbSB7bnVtYmVyfSBkaXN0YW5jZVxuICogQHJldHVybiB7T2JqZWN0fSB7eCwgeSwgdGV4dEFsaWduLCB0ZXh0VmVydGljYWxBbGlnbn1cbiAqL1xuXG5cbmZ1bmN0aW9uIGFkanVzdFRleHRQb3NpdGlvbk9uUmVjdCh0ZXh0UG9zaXRpb24sIHJlY3QsIGRpc3RhbmNlKSB7XG4gIHZhciB4ID0gcmVjdC54O1xuICB2YXIgeSA9IHJlY3QueTtcbiAgdmFyIGhlaWdodCA9IHJlY3QuaGVpZ2h0O1xuICB2YXIgd2lkdGggPSByZWN0LndpZHRoO1xuICB2YXIgaGFsZkhlaWdodCA9IGhlaWdodCAvIDI7XG4gIHZhciB0ZXh0QWxpZ24gPSAnbGVmdCc7XG4gIHZhciB0ZXh0VmVydGljYWxBbGlnbiA9ICd0b3AnO1xuXG4gIHN3aXRjaCAodGV4dFBvc2l0aW9uKSB7XG4gICAgY2FzZSAnbGVmdCc6XG4gICAgICB4IC09IGRpc3RhbmNlO1xuICAgICAgeSArPSBoYWxmSGVpZ2h0O1xuICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgIHRleHRWZXJ0aWNhbEFsaWduID0gJ21pZGRsZSc7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgIHggKz0gZGlzdGFuY2UgKyB3aWR0aDtcbiAgICAgIHkgKz0gaGFsZkhlaWdodDtcbiAgICAgIHRleHRWZXJ0aWNhbEFsaWduID0gJ21pZGRsZSc7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3RvcCc6XG4gICAgICB4ICs9IHdpZHRoIC8gMjtcbiAgICAgIHkgLT0gZGlzdGFuY2U7XG4gICAgICB0ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgIHRleHRWZXJ0aWNhbEFsaWduID0gJ2JvdHRvbSc7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICB4ICs9IHdpZHRoIC8gMjtcbiAgICAgIHkgKz0gaGVpZ2h0ICsgZGlzdGFuY2U7XG4gICAgICB0ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaW5zaWRlJzpcbiAgICAgIHggKz0gd2lkdGggLyAyO1xuICAgICAgeSArPSBoYWxmSGVpZ2h0O1xuICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICB0ZXh0VmVydGljYWxBbGlnbiA9ICdtaWRkbGUnO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdpbnNpZGVMZWZ0JzpcbiAgICAgIHggKz0gZGlzdGFuY2U7XG4gICAgICB5ICs9IGhhbGZIZWlnaHQ7XG4gICAgICB0ZXh0VmVydGljYWxBbGlnbiA9ICdtaWRkbGUnO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdpbnNpZGVSaWdodCc6XG4gICAgICB4ICs9IHdpZHRoIC0gZGlzdGFuY2U7XG4gICAgICB5ICs9IGhhbGZIZWlnaHQ7XG4gICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgdGV4dFZlcnRpY2FsQWxpZ24gPSAnbWlkZGxlJztcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaW5zaWRlVG9wJzpcbiAgICAgIHggKz0gd2lkdGggLyAyO1xuICAgICAgeSArPSBkaXN0YW5jZTtcbiAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdpbnNpZGVCb3R0b20nOlxuICAgICAgeCArPSB3aWR0aCAvIDI7XG4gICAgICB5ICs9IGhlaWdodCAtIGRpc3RhbmNlO1xuICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICB0ZXh0VmVydGljYWxBbGlnbiA9ICdib3R0b20nO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdpbnNpZGVUb3BMZWZ0JzpcbiAgICAgIHggKz0gZGlzdGFuY2U7XG4gICAgICB5ICs9IGRpc3RhbmNlO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdpbnNpZGVUb3BSaWdodCc6XG4gICAgICB4ICs9IHdpZHRoIC0gZGlzdGFuY2U7XG4gICAgICB5ICs9IGRpc3RhbmNlO1xuICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaW5zaWRlQm90dG9tTGVmdCc6XG4gICAgICB4ICs9IGRpc3RhbmNlO1xuICAgICAgeSArPSBoZWlnaHQgLSBkaXN0YW5jZTtcbiAgICAgIHRleHRWZXJ0aWNhbEFsaWduID0gJ2JvdHRvbSc7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2luc2lkZUJvdHRvbVJpZ2h0JzpcbiAgICAgIHggKz0gd2lkdGggLSBkaXN0YW5jZTtcbiAgICAgIHkgKz0gaGVpZ2h0IC0gZGlzdGFuY2U7XG4gICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgdGV4dFZlcnRpY2FsQWxpZ24gPSAnYm90dG9tJztcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB4OiB4LFxuICAgIHk6IHksXG4gICAgdGV4dEFsaWduOiB0ZXh0QWxpZ24sXG4gICAgdGV4dFZlcnRpY2FsQWxpZ246IHRleHRWZXJ0aWNhbEFsaWduXG4gIH07XG59XG4vKipcbiAqIFNob3cgZWxsaXBzaXMgaWYgb3ZlcmZsb3cuXG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtICB7c3RyaW5nfSB0ZXh0XG4gKiBAcGFyYW0gIHtzdHJpbmd9IGNvbnRhaW5lcldpZHRoXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGZvbnRcbiAqIEBwYXJhbSAge251bWJlcn0gW2VsbGlwc2lzPScuLi4nXVxuICogQHBhcmFtICB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSAge251bWJlcn0gW29wdGlvbnMubWF4SXRlcmF0aW9ucz0zXVxuICogQHBhcmFtICB7bnVtYmVyfSBbb3B0aW9ucy5taW5DaGFyPTBdIElmIHRydW5jYXRlIHJlc3VsdCBhcmUgbGVzc1xuICogICAgICAgICAgICAgICAgICB0aGVuIG1pbkNoYXIsIGVsbGlwc2lzIHdpbGwgbm90IHNob3csIHdoaWNoIGlzXG4gKiAgICAgICAgICAgICAgICAgIGJldHRlciBmb3IgdXNlciBoaW50IGluIHNvbWUgY2FzZXMuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFtvcHRpb25zLnBsYWNlaG9sZGVyPScnXSBXaGVuIGFsbCB0cnVuY2F0ZWQsIHVzZSB0aGUgcGxhY2Vob2xkZXIuXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblxuXG5mdW5jdGlvbiB0cnVuY2F0ZVRleHQodGV4dCwgY29udGFpbmVyV2lkdGgsIGZvbnQsIGVsbGlwc2lzLCBvcHRpb25zKSB7XG4gIGlmICghY29udGFpbmVyV2lkdGgpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICB2YXIgdGV4dExpbmVzID0gKHRleHQgKyAnJykuc3BsaXQoJ1xcbicpO1xuICBvcHRpb25zID0gcHJlcGFyZVRydW5jYXRlT3B0aW9ucyhjb250YWluZXJXaWR0aCwgZm9udCwgZWxsaXBzaXMsIG9wdGlvbnMpOyAvLyBGSVhNRVxuICAvLyBJdCBpcyBub3QgYXBwcm9wcmlhdGUgdGhhdCBldmVyeSBsaW5lIGhhcyAnLi4uJyB3aGVuIHRydW5jYXRlIG11bHRpcGxlIGxpbmVzLlxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0ZXh0TGluZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB0ZXh0TGluZXNbaV0gPSB0cnVuY2F0ZVNpbmdsZUxpbmUodGV4dExpbmVzW2ldLCBvcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiB0ZXh0TGluZXMuam9pbignXFxuJyk7XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVUcnVuY2F0ZU9wdGlvbnMoY29udGFpbmVyV2lkdGgsIGZvbnQsIGVsbGlwc2lzLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBleHRlbmQoe30sIG9wdGlvbnMpO1xuICBvcHRpb25zLmZvbnQgPSBmb250O1xuICB2YXIgZWxsaXBzaXMgPSByZXRyaWV2ZTIoZWxsaXBzaXMsICcuLi4nKTtcbiAgb3B0aW9ucy5tYXhJdGVyYXRpb25zID0gcmV0cmlldmUyKG9wdGlvbnMubWF4SXRlcmF0aW9ucywgMik7XG4gIHZhciBtaW5DaGFyID0gb3B0aW9ucy5taW5DaGFyID0gcmV0cmlldmUyKG9wdGlvbnMubWluQ2hhciwgMCk7IC8vIEZJWE1FXG4gIC8vIE90aGVyIGxhbmd1YWdlcz9cblxuICBvcHRpb25zLmNuQ2hhcldpZHRoID0gZ2V0V2lkdGgoJ+WbvScsIGZvbnQpOyAvLyBGSVhNRVxuICAvLyBDb25zaWRlciBwcm9wb3J0aW9uYWwgZm9udD9cblxuICB2YXIgYXNjQ2hhcldpZHRoID0gb3B0aW9ucy5hc2NDaGFyV2lkdGggPSBnZXRXaWR0aCgnYScsIGZvbnQpO1xuICBvcHRpb25zLnBsYWNlaG9sZGVyID0gcmV0cmlldmUyKG9wdGlvbnMucGxhY2Vob2xkZXIsICcnKTsgLy8gRXhhbXBsZSAxOiBtaW5DaGFyOiAzLCB0ZXh0OiAnYXNkZnp4Y3YnLCB0cnVuY2F0ZSByZXN1bHQ6ICdhc2RmJywgYnV0IG5vdDogJ2EuLi4nLlxuICAvLyBFeGFtcGxlIDI6IG1pbkNoYXI6IDMsIHRleHQ6ICfnu7TluqYnLCB0cnVuY2F0ZSByZXN1bHQ6ICfnu7QnLCBidXQgbm90OiAnLi4uJy5cblxuICB2YXIgY29udGVudFdpZHRoID0gY29udGFpbmVyV2lkdGggPSBNYXRoLm1heCgwLCBjb250YWluZXJXaWR0aCAtIDEpOyAvLyBSZXNlcnZlIHNvbWUgZ2FwLlxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWluQ2hhciAmJiBjb250ZW50V2lkdGggPj0gYXNjQ2hhcldpZHRoOyBpKyspIHtcbiAgICBjb250ZW50V2lkdGggLT0gYXNjQ2hhcldpZHRoO1xuICB9XG5cbiAgdmFyIGVsbGlwc2lzV2lkdGggPSBnZXRXaWR0aChlbGxpcHNpcyk7XG5cbiAgaWYgKGVsbGlwc2lzV2lkdGggPiBjb250ZW50V2lkdGgpIHtcbiAgICBlbGxpcHNpcyA9ICcnO1xuICAgIGVsbGlwc2lzV2lkdGggPSAwO1xuICB9XG5cbiAgY29udGVudFdpZHRoID0gY29udGFpbmVyV2lkdGggLSBlbGxpcHNpc1dpZHRoO1xuICBvcHRpb25zLmVsbGlwc2lzID0gZWxsaXBzaXM7XG4gIG9wdGlvbnMuZWxsaXBzaXNXaWR0aCA9IGVsbGlwc2lzV2lkdGg7XG4gIG9wdGlvbnMuY29udGVudFdpZHRoID0gY29udGVudFdpZHRoO1xuICBvcHRpb25zLmNvbnRhaW5lcldpZHRoID0gY29udGFpbmVyV2lkdGg7XG4gIHJldHVybiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiB0cnVuY2F0ZVNpbmdsZUxpbmUodGV4dExpbmUsIG9wdGlvbnMpIHtcbiAgdmFyIGNvbnRhaW5lcldpZHRoID0gb3B0aW9ucy5jb250YWluZXJXaWR0aDtcbiAgdmFyIGZvbnQgPSBvcHRpb25zLmZvbnQ7XG4gIHZhciBjb250ZW50V2lkdGggPSBvcHRpb25zLmNvbnRlbnRXaWR0aDtcblxuICBpZiAoIWNvbnRhaW5lcldpZHRoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgdmFyIGxpbmVXaWR0aCA9IGdldFdpZHRoKHRleHRMaW5lLCBmb250KTtcblxuICBpZiAobGluZVdpZHRoIDw9IGNvbnRhaW5lcldpZHRoKSB7XG4gICAgcmV0dXJuIHRleHRMaW5lO1xuICB9XG5cbiAgZm9yICh2YXIgaiA9IDA7OyBqKyspIHtcbiAgICBpZiAobGluZVdpZHRoIDw9IGNvbnRlbnRXaWR0aCB8fCBqID49IG9wdGlvbnMubWF4SXRlcmF0aW9ucykge1xuICAgICAgdGV4dExpbmUgKz0gb3B0aW9ucy5lbGxpcHNpcztcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHZhciBzdWJMZW5ndGggPSBqID09PSAwID8gZXN0aW1hdGVMZW5ndGgodGV4dExpbmUsIGNvbnRlbnRXaWR0aCwgb3B0aW9ucy5hc2NDaGFyV2lkdGgsIG9wdGlvbnMuY25DaGFyV2lkdGgpIDogbGluZVdpZHRoID4gMCA/IE1hdGguZmxvb3IodGV4dExpbmUubGVuZ3RoICogY29udGVudFdpZHRoIC8gbGluZVdpZHRoKSA6IDA7XG4gICAgdGV4dExpbmUgPSB0ZXh0TGluZS5zdWJzdHIoMCwgc3ViTGVuZ3RoKTtcbiAgICBsaW5lV2lkdGggPSBnZXRXaWR0aCh0ZXh0TGluZSwgZm9udCk7XG4gIH1cblxuICBpZiAodGV4dExpbmUgPT09ICcnKSB7XG4gICAgdGV4dExpbmUgPSBvcHRpb25zLnBsYWNlaG9sZGVyO1xuICB9XG5cbiAgcmV0dXJuIHRleHRMaW5lO1xufVxuXG5mdW5jdGlvbiBlc3RpbWF0ZUxlbmd0aCh0ZXh0LCBjb250ZW50V2lkdGgsIGFzY0NoYXJXaWR0aCwgY25DaGFyV2lkdGgpIHtcbiAgdmFyIHdpZHRoID0gMDtcbiAgdmFyIGkgPSAwO1xuXG4gIGZvciAodmFyIGxlbiA9IHRleHQubGVuZ3RoOyBpIDwgbGVuICYmIHdpZHRoIDwgY29udGVudFdpZHRoOyBpKyspIHtcbiAgICB2YXIgY2hhckNvZGUgPSB0ZXh0LmNoYXJDb2RlQXQoaSk7XG4gICAgd2lkdGggKz0gMCA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSAxMjcgPyBhc2NDaGFyV2lkdGggOiBjbkNoYXJXaWR0aDtcbiAgfVxuXG4gIHJldHVybiBpO1xufVxuLyoqXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9udFxuICogQHJldHVybiB7bnVtYmVyfSBsaW5lIGhlaWdodFxuICovXG5cblxuZnVuY3Rpb24gZ2V0TGluZUhlaWdodChmb250KSB7XG4gIC8vIEZJWE1FIEEgcm91Z2ggYXBwcm9hY2guXG4gIHJldHVybiBnZXRXaWR0aCgn5Zu9JywgZm9udCk7XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAcGFyYW0ge3N0cmluZ30gZm9udFxuICogQHJldHVybiB7T2JqZWN0fSB3aWR0aFxuICovXG5cblxuZnVuY3Rpb24gbWVhc3VyZVRleHQodGV4dCwgZm9udCkge1xuICByZXR1cm4gbWV0aG9kcy5tZWFzdXJlVGV4dCh0ZXh0LCBmb250KTtcbn0gLy8gQXZvaWQgYXNzaWduIHRvIGFuIGV4cG9ydGVkIHZhcmlhYmxlLCBmb3IgdHJhbnNmb3JtaW5nIHRvIGNqcy5cblxuXG5tZXRob2RzLm1lYXN1cmVUZXh0ID0gZnVuY3Rpb24gKHRleHQsIGZvbnQpIHtcbiAgdmFyIGN0eCA9IGdldENvbnRleHQoKTtcbiAgY3R4LmZvbnQgPSBmb250IHx8IERFRkFVTFRfRk9OVDtcbiAgcmV0dXJuIGN0eC5tZWFzdXJlVGV4dCh0ZXh0KTtcbn07XG4vKipcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAcGFyYW0ge3N0cmluZ30gZm9udFxuICogQHBhcmFtIHtPYmplY3R9IFt0cnVuY2F0ZV1cbiAqIEByZXR1cm4ge09iamVjdH0gYmxvY2s6IHtsaW5lSGVpZ2h0LCBsaW5lcywgaGVpZ2h0LCBvdXRlckhlaWdodH1cbiAqICBOb3RpY2U6IGZvciBwZXJmb3JtYW5jZSwgZG8gbm90IGNhbGN1bGF0ZSBvdXRlcldpZHRoIHV0aWwgbmVlZGVkLlxuICovXG5cblxuZnVuY3Rpb24gcGFyc2VQbGFpblRleHQodGV4dCwgZm9udCwgcGFkZGluZywgdHJ1bmNhdGUpIHtcbiAgdGV4dCAhPSBudWxsICYmICh0ZXh0ICs9ICcnKTtcbiAgdmFyIGxpbmVIZWlnaHQgPSBnZXRMaW5lSGVpZ2h0KGZvbnQpO1xuICB2YXIgbGluZXMgPSB0ZXh0ID8gdGV4dC5zcGxpdCgnXFxuJykgOiBbXTtcbiAgdmFyIGhlaWdodCA9IGxpbmVzLmxlbmd0aCAqIGxpbmVIZWlnaHQ7XG4gIHZhciBvdXRlckhlaWdodCA9IGhlaWdodDtcblxuICBpZiAocGFkZGluZykge1xuICAgIG91dGVySGVpZ2h0ICs9IHBhZGRpbmdbMF0gKyBwYWRkaW5nWzJdO1xuICB9XG5cbiAgaWYgKHRleHQgJiYgdHJ1bmNhdGUpIHtcbiAgICB2YXIgdHJ1bmNPdXRlckhlaWdodCA9IHRydW5jYXRlLm91dGVySGVpZ2h0O1xuICAgIHZhciB0cnVuY091dGVyV2lkdGggPSB0cnVuY2F0ZS5vdXRlcldpZHRoO1xuXG4gICAgaWYgKHRydW5jT3V0ZXJIZWlnaHQgIT0gbnVsbCAmJiBvdXRlckhlaWdodCA+IHRydW5jT3V0ZXJIZWlnaHQpIHtcbiAgICAgIHRleHQgPSAnJztcbiAgICAgIGxpbmVzID0gW107XG4gICAgfSBlbHNlIGlmICh0cnVuY091dGVyV2lkdGggIT0gbnVsbCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBwcmVwYXJlVHJ1bmNhdGVPcHRpb25zKHRydW5jT3V0ZXJXaWR0aCAtIChwYWRkaW5nID8gcGFkZGluZ1sxXSArIHBhZGRpbmdbM10gOiAwKSwgZm9udCwgdHJ1bmNhdGUuZWxsaXBzaXMsIHtcbiAgICAgICAgbWluQ2hhcjogdHJ1bmNhdGUubWluQ2hhcixcbiAgICAgICAgcGxhY2Vob2xkZXI6IHRydW5jYXRlLnBsYWNlaG9sZGVyXG4gICAgICB9KTsgLy8gRklYTUVcbiAgICAgIC8vIEl0IGlzIG5vdCBhcHByb3ByaWF0ZSB0aGF0IGV2ZXJ5IGxpbmUgaGFzICcuLi4nIHdoZW4gdHJ1bmNhdGUgbXVsdGlwbGUgbGluZXMuXG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsaW5lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBsaW5lc1tpXSA9IHRydW5jYXRlU2luZ2xlTGluZShsaW5lc1tpXSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsaW5lczogbGluZXMsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgb3V0ZXJIZWlnaHQ6IG91dGVySGVpZ2h0LFxuICAgIGxpbmVIZWlnaHQ6IGxpbmVIZWlnaHRcbiAgfTtcbn1cbi8qKlxuICogRm9yIGV4YW1wbGU6ICdzb21lIHRleHQge2F8c29tZSB0ZXh0fW90aGVyIHRleHR7Ynxzb21lIHRleHR9eHh4e2N8fXh4eCdcbiAqIEFsc28gY29uc2lkZXIgJ2JiYmJ7YXx4eHhcXG56enp9eHh4eFxcbmFhYWEnLlxuICpcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcbiAqIEByZXR1cm4ge09iamVjdH0gYmxvY2tcbiAqIHtcbiAqICAgICAgd2lkdGgsXG4gKiAgICAgIGhlaWdodCxcbiAqICAgICAgbGluZXM6IFt7XG4gKiAgICAgICAgICBsaW5lSGVpZ2h0LFxuICogICAgICAgICAgd2lkdGgsXG4gKiAgICAgICAgICB0b2tlbnM6IFtbe1xuICogICAgICAgICAgICAgIHN0eWxlTmFtZSxcbiAqICAgICAgICAgICAgICB0ZXh0LFxuICogICAgICAgICAgICAgIHdpZHRoLCAgICAgIC8vIGluY2x1ZGUgdGV4dFBhZGRpbmdcbiAqICAgICAgICAgICAgICBoZWlnaHQsICAgICAvLyBpbmNsdWRlIHRleHRQYWRkaW5nXG4gKiAgICAgICAgICAgICAgdGV4dFdpZHRoLCAvLyBwdXJlIHRleHQgd2lkdGhcbiAqICAgICAgICAgICAgICB0ZXh0SGVpZ2h0LCAvLyBwdXJlIHRleHQgaGVpZ2h0XG4gKiAgICAgICAgICAgICAgbGluZUhlaWhndCxcbiAqICAgICAgICAgICAgICBmb250LFxuICogICAgICAgICAgICAgIHRleHRBbGlnbixcbiAqICAgICAgICAgICAgICB0ZXh0VmVydGljYWxBbGlnblxuICogICAgICAgICAgfV0sIFsuLi5dLCAuLi5dXG4gKiAgICAgIH0sIC4uLl1cbiAqIH1cbiAqIElmIHN0eWxlTmFtZSBpcyB1bmRlZmluZWQsIGl0IGlzIHBsYWluIHRleHQuXG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZVJpY2hUZXh0KHRleHQsIHN0eWxlKSB7XG4gIHZhciBjb250ZW50QmxvY2sgPSB7XG4gICAgbGluZXM6IFtdLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMFxuICB9O1xuICB0ZXh0ICE9IG51bGwgJiYgKHRleHQgKz0gJycpO1xuXG4gIGlmICghdGV4dCkge1xuICAgIHJldHVybiBjb250ZW50QmxvY2s7XG4gIH1cblxuICB2YXIgbGFzdEluZGV4ID0gU1RZTEVfUkVHLmxhc3RJbmRleCA9IDA7XG4gIHZhciByZXN1bHQ7XG5cbiAgd2hpbGUgKChyZXN1bHQgPSBTVFlMRV9SRUcuZXhlYyh0ZXh0KSkgIT0gbnVsbCkge1xuICAgIHZhciBtYXRjaGVkSW5kZXggPSByZXN1bHQuaW5kZXg7XG5cbiAgICBpZiAobWF0Y2hlZEluZGV4ID4gbGFzdEluZGV4KSB7XG4gICAgICBwdXNoVG9rZW5zKGNvbnRlbnRCbG9jaywgdGV4dC5zdWJzdHJpbmcobGFzdEluZGV4LCBtYXRjaGVkSW5kZXgpKTtcbiAgICB9XG5cbiAgICBwdXNoVG9rZW5zKGNvbnRlbnRCbG9jaywgcmVzdWx0WzJdLCByZXN1bHRbMV0pO1xuICAgIGxhc3RJbmRleCA9IFNUWUxFX1JFRy5sYXN0SW5kZXg7XG4gIH1cblxuICBpZiAobGFzdEluZGV4IDwgdGV4dC5sZW5ndGgpIHtcbiAgICBwdXNoVG9rZW5zKGNvbnRlbnRCbG9jaywgdGV4dC5zdWJzdHJpbmcobGFzdEluZGV4LCB0ZXh0Lmxlbmd0aCkpO1xuICB9XG5cbiAgdmFyIGxpbmVzID0gY29udGVudEJsb2NrLmxpbmVzO1xuICB2YXIgY29udGVudEhlaWdodCA9IDA7XG4gIHZhciBjb250ZW50V2lkdGggPSAwOyAvLyBGb3IgYHRleHRXaWR0aDogMTAwJWBcblxuICB2YXIgcGVuZGluZ0xpc3QgPSBbXTtcbiAgdmFyIHN0bFBhZGRpbmcgPSBzdHlsZS50ZXh0UGFkZGluZztcbiAgdmFyIHRydW5jYXRlID0gc3R5bGUudHJ1bmNhdGU7XG4gIHZhciB0cnVuY2F0ZVdpZHRoID0gdHJ1bmNhdGUgJiYgdHJ1bmNhdGUub3V0ZXJXaWR0aDtcbiAgdmFyIHRydW5jYXRlSGVpZ2h0ID0gdHJ1bmNhdGUgJiYgdHJ1bmNhdGUub3V0ZXJIZWlnaHQ7XG5cbiAgaWYgKHN0bFBhZGRpbmcpIHtcbiAgICB0cnVuY2F0ZVdpZHRoICE9IG51bGwgJiYgKHRydW5jYXRlV2lkdGggLT0gc3RsUGFkZGluZ1sxXSArIHN0bFBhZGRpbmdbM10pO1xuICAgIHRydW5jYXRlSGVpZ2h0ICE9IG51bGwgJiYgKHRydW5jYXRlSGVpZ2h0IC09IHN0bFBhZGRpbmdbMF0gKyBzdGxQYWRkaW5nWzJdKTtcbiAgfSAvLyBDYWxjdWxhdGUgbGF5b3V0IGluZm8gb2YgdG9rZW5zLlxuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBsaW5lID0gbGluZXNbaV07XG4gICAgdmFyIGxpbmVIZWlnaHQgPSAwO1xuICAgIHZhciBsaW5lV2lkdGggPSAwO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBsaW5lLnRva2Vucy5sZW5ndGg7IGorKykge1xuICAgICAgdmFyIHRva2VuID0gbGluZS50b2tlbnNbal07XG4gICAgICB2YXIgdG9rZW5TdHlsZSA9IHRva2VuLnN0eWxlTmFtZSAmJiBzdHlsZS5yaWNoW3Rva2VuLnN0eWxlTmFtZV0gfHwge307IC8vIHRleHRQYWRkaW5nIHNob3VsZCBub3QgaW5oZXJpdCBmcm9tIHN0eWxlLlxuXG4gICAgICB2YXIgdGV4dFBhZGRpbmcgPSB0b2tlbi50ZXh0UGFkZGluZyA9IHRva2VuU3R5bGUudGV4dFBhZGRpbmc7IC8vIHRleHRGb250IGhhcyBiZWVuIGFzaWduZWQgdG8gZm9udCBieSBgbm9ybWFsaXplU3R5bGVgLlxuXG4gICAgICB2YXIgZm9udCA9IHRva2VuLmZvbnQgPSB0b2tlblN0eWxlLmZvbnQgfHwgc3R5bGUuZm9udDsgLy8gdGV4dEhlaWdodCBjYW4gYmUgdXNlZCB3aGVuIHRleHRWZXJ0aWNhbEFsaWduIGlzIHNwZWNpZmllZCBpbiB0b2tlbi5cblxuICAgICAgdmFyIHRva2VuSGVpZ2h0ID0gdG9rZW4udGV4dEhlaWdodCA9IHJldHJpZXZlMiggLy8gdGV4dEhlaWdodCBzaG91bGQgbm90IGJlIGluaGVyaXRlZCwgY29uc2lkZXIgaXQgY2FuIGJlIHNwZWNpZmllZFxuICAgICAgLy8gYXMgYm94IGhlaWdodCBvZiB0aGUgYmxvY2suXG4gICAgICB0b2tlblN0eWxlLnRleHRIZWlnaHQsIGdldExpbmVIZWlnaHQoZm9udCkpO1xuICAgICAgdGV4dFBhZGRpbmcgJiYgKHRva2VuSGVpZ2h0ICs9IHRleHRQYWRkaW5nWzBdICsgdGV4dFBhZGRpbmdbMl0pO1xuICAgICAgdG9rZW4uaGVpZ2h0ID0gdG9rZW5IZWlnaHQ7XG4gICAgICB0b2tlbi5saW5lSGVpZ2h0ID0gcmV0cmlldmUzKHRva2VuU3R5bGUudGV4dExpbmVIZWlnaHQsIHN0eWxlLnRleHRMaW5lSGVpZ2h0LCB0b2tlbkhlaWdodCk7XG4gICAgICB0b2tlbi50ZXh0QWxpZ24gPSB0b2tlblN0eWxlICYmIHRva2VuU3R5bGUudGV4dEFsaWduIHx8IHN0eWxlLnRleHRBbGlnbjtcbiAgICAgIHRva2VuLnRleHRWZXJ0aWNhbEFsaWduID0gdG9rZW5TdHlsZSAmJiB0b2tlblN0eWxlLnRleHRWZXJ0aWNhbEFsaWduIHx8ICdtaWRkbGUnO1xuXG4gICAgICBpZiAodHJ1bmNhdGVIZWlnaHQgIT0gbnVsbCAmJiBjb250ZW50SGVpZ2h0ICsgdG9rZW4ubGluZUhlaWdodCA+IHRydW5jYXRlSGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGluZXM6IFtdLFxuICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgIGhlaWdodDogMFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB0b2tlbi50ZXh0V2lkdGggPSBnZXRXaWR0aCh0b2tlbi50ZXh0LCBmb250KTtcbiAgICAgIHZhciB0b2tlbldpZHRoID0gdG9rZW5TdHlsZS50ZXh0V2lkdGg7XG4gICAgICB2YXIgdG9rZW5XaWR0aE5vdFNwZWNpZmllZCA9IHRva2VuV2lkdGggPT0gbnVsbCB8fCB0b2tlbldpZHRoID09PSAnYXV0byc7IC8vIFBlcmNlbnQgd2lkdGgsIGNhbiBiZSBgMTAwJWAsIGNhbiBiZSB1c2VkIGluIGRyYXdpbmcgc2VwYXJhdGVcbiAgICAgIC8vIGxpbmUgd2hlbiBib3ggd2lkdGggaXMgbmVlZGVkIHRvIGJlIGF1dG8uXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW5XaWR0aCA9PT0gJ3N0cmluZycgJiYgdG9rZW5XaWR0aC5jaGFyQXQodG9rZW5XaWR0aC5sZW5ndGggLSAxKSA9PT0gJyUnKSB7XG4gICAgICAgIHRva2VuLnBlcmNlbnRXaWR0aCA9IHRva2VuV2lkdGg7XG4gICAgICAgIHBlbmRpbmdMaXN0LnB1c2godG9rZW4pO1xuICAgICAgICB0b2tlbldpZHRoID0gMDsgLy8gRG8gbm90IHRydW5jYXRlIGluIHRoaXMgY2FzZSwgYmVjYXVzZSB0aGVyZSBpcyBubyB1c2VyIGNhc2VcbiAgICAgICAgLy8gYW5kIGl0IGlzIHRvbyBjb21wbGljYXRlZC5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0b2tlbldpZHRoTm90U3BlY2lmaWVkKSB7XG4gICAgICAgICAgdG9rZW5XaWR0aCA9IHRva2VuLnRleHRXaWR0aDsgLy8gRklYTUU6IElmIGltYWdlIGlzIG5vdCBsb2FkZWQgYW5kIHRleHRXaWR0aCBpcyBub3Qgc3BlY2lmaWVkLCBjYWxsaW5nXG4gICAgICAgICAgLy8gYGdldEJvdW5kaW5nUmVjdCgpYCB3aWxsIG5vdCBnZXQgY29ycmVjdCByZXN1bHQuXG5cbiAgICAgICAgICB2YXIgdGV4dEJhY2tncm91bmRDb2xvciA9IHRva2VuU3R5bGUudGV4dEJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICB2YXIgYmdJbWcgPSB0ZXh0QmFja2dyb3VuZENvbG9yICYmIHRleHRCYWNrZ3JvdW5kQ29sb3IuaW1hZ2U7IC8vIFVzZSBjYXNlczpcbiAgICAgICAgICAvLyAoMSkgSWYgaW1hZ2UgaXMgbm90IGxvYWRlZCwgaXQgd2lsbCBiZSBsb2FkZWQgYXQgcmVuZGVyIHBoYXNlIGFuZCBjYWxsXG4gICAgICAgICAgLy8gYGRpcnR5KClgIGFuZCBgdGV4dEJhY2tncm91bmRDb2xvci5pbWFnZWAgd2lsbCBiZSByZXBsYWNlZCB3aXRoIHRoZSBsb2FkZWRcbiAgICAgICAgICAvLyBpbWFnZSwgYW5kIHRoZW4gdGhlIHJpZ2h0IHNpemUgd2lsbCBiZSBjYWxjdWxhdGVkIGhlcmUgYXQgdGhlIG5leHQgdGljay5cbiAgICAgICAgICAvLyBTZWUgYGdyYXBoaWMvaGVscGVyL3RleHQuanNgLlxuICAgICAgICAgIC8vICgyKSBJZiBpbWFnZSBsb2FkZWQsIGFuZCBgdGV4dEJhY2tncm91bmRDb2xvci5pbWFnZWAgaXMgaW1hZ2Ugc3JjIHN0cmluZyxcbiAgICAgICAgICAvLyB1c2UgYGltYWdlSGVscGVyLmZpbmRFeGlzdEltYWdlYCB0byBmaW5kIGNhY2hlZCBpbWFnZS5cbiAgICAgICAgICAvLyBgaW1hZ2VIZWxwZXIuZmluZEV4aXN0SW1hZ2VgIHdpbGwgYWx3YXlzIGJlIGNhbGxlZCBoZXJlIGJlZm9yZVxuICAgICAgICAgIC8vIGBpbWFnZUhlbHBlci5jcmVhdGVPclVwZGF0ZUltYWdlYCBpbiBgZ3JhcGhpYy9oZWxwZXIvdGV4dC5qcyNyZW5kZXJSaWNoVGV4dGBcbiAgICAgICAgICAvLyB3aGljaCBlbnN1cmVzIHRoYXQgaW1hZ2Ugd2lsbCBub3QgYmUgcmVuZGVyZWQgYmVmb3JlIGNvcnJlY3Qgc2l6ZSBjYWxjdWFsdGVkLlxuXG4gICAgICAgICAgaWYgKGJnSW1nKSB7XG4gICAgICAgICAgICBiZ0ltZyA9IGltYWdlSGVscGVyLmZpbmRFeGlzdEltYWdlKGJnSW1nKTtcblxuICAgICAgICAgICAgaWYgKGltYWdlSGVscGVyLmlzSW1hZ2VSZWFkeShiZ0ltZykpIHtcbiAgICAgICAgICAgICAgdG9rZW5XaWR0aCA9IE1hdGgubWF4KHRva2VuV2lkdGgsIGJnSW1nLndpZHRoICogdG9rZW5IZWlnaHQgLyBiZ0ltZy5oZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwYWRkaW5nVyA9IHRleHRQYWRkaW5nID8gdGV4dFBhZGRpbmdbMV0gKyB0ZXh0UGFkZGluZ1szXSA6IDA7XG4gICAgICAgIHRva2VuV2lkdGggKz0gcGFkZGluZ1c7XG4gICAgICAgIHZhciByZW1pYW5UcnVuY1dpZHRoID0gdHJ1bmNhdGVXaWR0aCAhPSBudWxsID8gdHJ1bmNhdGVXaWR0aCAtIGxpbmVXaWR0aCA6IG51bGw7XG5cbiAgICAgICAgaWYgKHJlbWlhblRydW5jV2lkdGggIT0gbnVsbCAmJiByZW1pYW5UcnVuY1dpZHRoIDwgdG9rZW5XaWR0aCkge1xuICAgICAgICAgIGlmICghdG9rZW5XaWR0aE5vdFNwZWNpZmllZCB8fCByZW1pYW5UcnVuY1dpZHRoIDwgcGFkZGluZ1cpIHtcbiAgICAgICAgICAgIHRva2VuLnRleHQgPSAnJztcbiAgICAgICAgICAgIHRva2VuLnRleHRXaWR0aCA9IHRva2VuV2lkdGggPSAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b2tlbi50ZXh0ID0gdHJ1bmNhdGVUZXh0KHRva2VuLnRleHQsIHJlbWlhblRydW5jV2lkdGggLSBwYWRkaW5nVywgZm9udCwgdHJ1bmNhdGUuZWxsaXBzaXMsIHtcbiAgICAgICAgICAgICAgbWluQ2hhcjogdHJ1bmNhdGUubWluQ2hhclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0b2tlbi50ZXh0V2lkdGggPSBnZXRXaWR0aCh0b2tlbi50ZXh0LCBmb250KTtcbiAgICAgICAgICAgIHRva2VuV2lkdGggPSB0b2tlbi50ZXh0V2lkdGggKyBwYWRkaW5nVztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGluZVdpZHRoICs9IHRva2VuLndpZHRoID0gdG9rZW5XaWR0aDtcbiAgICAgIHRva2VuU3R5bGUgJiYgKGxpbmVIZWlnaHQgPSBNYXRoLm1heChsaW5lSGVpZ2h0LCB0b2tlbi5saW5lSGVpZ2h0KSk7XG4gICAgfVxuXG4gICAgbGluZS53aWR0aCA9IGxpbmVXaWR0aDtcbiAgICBsaW5lLmxpbmVIZWlnaHQgPSBsaW5lSGVpZ2h0O1xuICAgIGNvbnRlbnRIZWlnaHQgKz0gbGluZUhlaWdodDtcbiAgICBjb250ZW50V2lkdGggPSBNYXRoLm1heChjb250ZW50V2lkdGgsIGxpbmVXaWR0aCk7XG4gIH1cblxuICBjb250ZW50QmxvY2sub3V0ZXJXaWR0aCA9IGNvbnRlbnRCbG9jay53aWR0aCA9IHJldHJpZXZlMihzdHlsZS50ZXh0V2lkdGgsIGNvbnRlbnRXaWR0aCk7XG4gIGNvbnRlbnRCbG9jay5vdXRlckhlaWdodCA9IGNvbnRlbnRCbG9jay5oZWlnaHQgPSByZXRyaWV2ZTIoc3R5bGUudGV4dEhlaWdodCwgY29udGVudEhlaWdodCk7XG5cbiAgaWYgKHN0bFBhZGRpbmcpIHtcbiAgICBjb250ZW50QmxvY2sub3V0ZXJXaWR0aCArPSBzdGxQYWRkaW5nWzFdICsgc3RsUGFkZGluZ1szXTtcbiAgICBjb250ZW50QmxvY2sub3V0ZXJIZWlnaHQgKz0gc3RsUGFkZGluZ1swXSArIHN0bFBhZGRpbmdbMl07XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBlbmRpbmdMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gcGVuZGluZ0xpc3RbaV07XG4gICAgdmFyIHBlcmNlbnRXaWR0aCA9IHRva2VuLnBlcmNlbnRXaWR0aDsgLy8gU2hvdWxkIG5vdCBiYXNlIG9uIG91dGVyV2lkdGgsIGJlY2F1c2UgdG9rZW4gY2FuIG5vdCBiZSBwbGFjZWQgb3V0IG9mIHBhZGRpbmcuXG5cbiAgICB0b2tlbi53aWR0aCA9IHBhcnNlSW50KHBlcmNlbnRXaWR0aCwgMTApIC8gMTAwICogY29udGVudFdpZHRoO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRlbnRCbG9jaztcbn1cblxuZnVuY3Rpb24gcHVzaFRva2VucyhibG9jaywgc3RyLCBzdHlsZU5hbWUpIHtcbiAgdmFyIGlzRW1wdHlTdHIgPSBzdHIgPT09ICcnO1xuICB2YXIgc3RycyA9IHN0ci5zcGxpdCgnXFxuJyk7XG4gIHZhciBsaW5lcyA9IGJsb2NrLmxpbmVzO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3Rycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0ZXh0ID0gc3Ryc1tpXTtcbiAgICB2YXIgdG9rZW4gPSB7XG4gICAgICBzdHlsZU5hbWU6IHN0eWxlTmFtZSxcbiAgICAgIHRleHQ6IHRleHQsXG4gICAgICBpc0xpbmVIb2xkZXI6ICF0ZXh0ICYmICFpc0VtcHR5U3RyXG4gICAgfTsgLy8gVGhlIGZpcnN0IHRva2VuIHNob3VsZCBiZSBhcHBlbmRlZCB0byB0aGUgbGFzdCBsaW5lLlxuXG4gICAgaWYgKCFpKSB7XG4gICAgICB2YXIgdG9rZW5zID0gKGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdIHx8IChsaW5lc1swXSA9IHtcbiAgICAgICAgdG9rZW5zOiBbXVxuICAgICAgfSkpLnRva2VuczsgLy8gQ29uc2lkZXIgY2FzZXM6XG4gICAgICAvLyAoMSkgJycuc3BsaXQoJ1xcbicpID0+IFsnJywgJ1xcbicsICcnXSwgdGhlICcnIGF0IHRoZSBmaXJzdCBpdGVtXG4gICAgICAvLyAod2hpY2ggaXMgYSBwbGFjZWhvbGRlcikgc2hvdWxkIGJlIHJlcGxhY2VkIGJ5IG5ldyB0b2tlbi5cbiAgICAgIC8vICgyKSBBIGltYWdlIGJhY2thZ2UsIHdoZXJlIHRva2VuIGxpa2VzIHthfH0uXG4gICAgICAvLyAoMykgQSByZWR1bmRhbnQgJycgd2lsbCBhZmZlY3QgdGV4dEFsaWduIGluIGxpbmUuXG4gICAgICAvLyAoNCkgdG9rZW5zIHdpdGggdGhlIHNhbWUgdHBsTmFtZSBzaG91bGQgbm90IGJlIG1lcmdlZCwgYmVjYXVzZVxuICAgICAgLy8gdGhleSBzaG91bGQgYmUgZGlzcGxheWVkIGluIGRpZmZlcmVudCBib3ggKHdpdGggYm9yZGVyIGFuZCBwYWRkaW5nKS5cblxuICAgICAgdmFyIHRva2Vuc0xlbiA9IHRva2Vucy5sZW5ndGg7XG4gICAgICB0b2tlbnNMZW4gPT09IDEgJiYgdG9rZW5zWzBdLmlzTGluZUhvbGRlciA/IHRva2Vuc1swXSA9IHRva2VuIDogLy8gQ29uc2lkZXIgdGV4dCBpcyAnJywgb25seSBpbnNlcnQgd2hlbiBpdCBpcyB0aGUgXCJsaW5lSG9sZGVyXCIgb3JcbiAgICAgIC8vIFwiZW1wdHlTdHJcIi4gT3RoZXJ3aXNlIGEgcmVkdW5kYW50ICcnIHdpbGwgYWZmZWN0IHRleHRBbGlnbiBpbiBsaW5lLlxuICAgICAgKHRleHQgfHwgIXRva2Vuc0xlbiB8fCBpc0VtcHR5U3RyKSAmJiB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgfSAvLyBPdGhlciB0b2tlbnMgYWx3YXlzIHN0YXJ0IGEgbmV3IGxpbmUuXG4gICAgZWxzZSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGlzICcnLCBpbnNlcnQgaXQgYXMgYSBwbGFjZWhvbGRlci5cbiAgICAgICAgbGluZXMucHVzaCh7XG4gICAgICAgICAgdG9rZW5zOiBbdG9rZW5dXG4gICAgICAgIH0pO1xuICAgICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VGb250KHN0eWxlKSB7XG4gIC8vIEZJWE1FIGluIG5vZGUtY2FudmFzIGZvbnRXZWlnaHQgaXMgYmVmb3JlIGZvbnRTdHlsZVxuICAvLyBVc2UgYGZvbnRTaXplYCBgZm9udEZhbWlseWAgdG8gY2hlY2sgd2hldGhlciBmb250IHByb3BlcnRpZXMgYXJlIGRlZmluZWQuXG4gIHZhciBmb250ID0gKHN0eWxlLmZvbnRTaXplIHx8IHN0eWxlLmZvbnRGYW1pbHkpICYmIFtzdHlsZS5mb250U3R5bGUsIHN0eWxlLmZvbnRXZWlnaHQsIChzdHlsZS5mb250U2l6ZSB8fCAxMikgKyAncHgnLCAvLyBJZiBmb250IHByb3BlcnRpZXMgYXJlIGRlZmluZWQsIGBmb250RmFtaWx5YCBzaG91bGQgbm90IGJlIGlnbm9yZWQuXG4gIHN0eWxlLmZvbnRGYW1pbHkgfHwgJ3NhbnMtc2VyaWYnXS5qb2luKCcgJyk7XG4gIHJldHVybiBmb250ICYmIHRyaW0oZm9udCkgfHwgc3R5bGUudGV4dEZvbnQgfHwgc3R5bGUuZm9udDtcbn1cblxuZXhwb3J0cy5ERUZBVUxUX0ZPTlQgPSBERUZBVUxUX0ZPTlQ7XG5leHBvcnRzLiRvdmVycmlkZSA9ICRvdmVycmlkZTtcbmV4cG9ydHMuZ2V0V2lkdGggPSBnZXRXaWR0aDtcbmV4cG9ydHMuZ2V0Qm91bmRpbmdSZWN0ID0gZ2V0Qm91bmRpbmdSZWN0O1xuZXhwb3J0cy5hZGp1c3RUZXh0WCA9IGFkanVzdFRleHRYO1xuZXhwb3J0cy5hZGp1c3RUZXh0WSA9IGFkanVzdFRleHRZO1xuZXhwb3J0cy5hZGp1c3RUZXh0UG9zaXRpb25PblJlY3QgPSBhZGp1c3RUZXh0UG9zaXRpb25PblJlY3Q7XG5leHBvcnRzLnRydW5jYXRlVGV4dCA9IHRydW5jYXRlVGV4dDtcbmV4cG9ydHMuZ2V0TGluZUhlaWdodCA9IGdldExpbmVIZWlnaHQ7XG5leHBvcnRzLm1lYXN1cmVUZXh0ID0gbWVhc3VyZVRleHQ7XG5leHBvcnRzLnBhcnNlUGxhaW5UZXh0ID0gcGFyc2VQbGFpblRleHQ7XG5leHBvcnRzLnBhcnNlUmljaFRleHQgPSBwYXJzZVJpY2hUZXh0O1xuZXhwb3J0cy5tYWtlRm9udCA9IG1ha2VGb250OyIsInZhciBQSTIgPSBNYXRoLlBJICogMjtcblxuZnVuY3Rpb24gbm9ybWFsaXplUmFkaWFuKGFuZ2xlKSB7XG4gIGFuZ2xlICU9IFBJMjtcblxuICBpZiAoYW5nbGUgPCAwKSB7XG4gICAgYW5nbGUgKz0gUEkyO1xuICB9XG5cbiAgcmV0dXJuIGFuZ2xlO1xufVxuXG5leHBvcnRzLm5vcm1hbGl6ZVJhZGlhbiA9IG5vcm1hbGl6ZVJhZGlhbjsiLCJmdW5jdGlvbiB3aW5kaW5nTGluZSh4MCwgeTAsIHgxLCB5MSwgeCwgeSkge1xuICBpZiAoeSA+IHkwICYmIHkgPiB5MSB8fCB5IDwgeTAgJiYgeSA8IHkxKSB7XG4gICAgcmV0dXJuIDA7XG4gIH0gLy8gSWdub3JlIGhvcml6b250YWwgbGluZVxuXG5cbiAgaWYgKHkxID09PSB5MCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFyIGRpciA9IHkxIDwgeTAgPyAxIDogLTE7XG4gIHZhciB0ID0gKHkgLSB5MCkgLyAoeTEgLSB5MCk7IC8vIEF2b2lkIHdpbmRpbmcgZXJyb3Igd2hlbiBpbnRlcnNlY3Rpb24gcG9pbnQgaXMgdGhlIGNvbm5lY3QgcG9pbnQgb2YgdHdvIGxpbmUgb2YgcG9seWdvblxuXG4gIGlmICh0ID09PSAxIHx8IHQgPT09IDApIHtcbiAgICBkaXIgPSB5MSA8IHkwID8gMC41IDogLTAuNTtcbiAgfVxuXG4gIHZhciB4XyA9IHQgKiAoeDEgLSB4MCkgKyB4MDsgLy8gSWYgKHgsIHkpIG9uIHRoZSBsaW5lLCBjb25zaWRlcmVkIGFzIFwiY29udGFpblwiLlxuXG4gIHJldHVybiB4XyA9PT0geCA/IEluZmluaXR5IDogeF8gPiB4ID8gZGlyIDogMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3aW5kaW5nTGluZTsiLCJ2YXIgenJVdGlsID0gcmVxdWlyZShcIi4uL2NvcmUvdXRpbFwiKTtcblxudmFyIEVsZW1lbnQgPSByZXF1aXJlKFwiLi4vRWxlbWVudFwiKTtcblxudmFyIEJvdW5kaW5nUmVjdCA9IHJlcXVpcmUoXCIuLi9jb3JlL0JvdW5kaW5nUmVjdFwiKTtcblxuLyoqXG4gKiBHcm91cOaYr+S4gOS4quWuueWZqO+8jOWPr+S7peaPkuWFpeWtkOiKgueCue+8jEdyb3Vw55qE5Y+Y5o2i5Lmf5Lya6KKr5bqU55So5Yiw5a2Q6IqC54K55LiKXG4gKiBAbW9kdWxlIHpyZW5kZXIvZ3JhcGhpYy9Hcm91cFxuICogQGV4YW1wbGVcbiAqICAgICB2YXIgR3JvdXAgPSByZXF1aXJlKCd6cmVuZGVyL2NvbnRhaW5lci9Hcm91cCcpO1xuICogICAgIHZhciBDaXJjbGUgPSByZXF1aXJlKCd6cmVuZGVyL2dyYXBoaWMvc2hhcGUvQ2lyY2xlJyk7XG4gKiAgICAgdmFyIGcgPSBuZXcgR3JvdXAoKTtcbiAqICAgICBnLnBvc2l0aW9uWzBdID0gMTAwO1xuICogICAgIGcucG9zaXRpb25bMV0gPSAxMDA7XG4gKiAgICAgZy5hZGQobmV3IENpcmNsZSh7XG4gKiAgICAgICAgIHN0eWxlOiB7XG4gKiAgICAgICAgICAgICB4OiAxMDAsXG4gKiAgICAgICAgICAgICB5OiAxMDAsXG4gKiAgICAgICAgICAgICByOiAyMCxcbiAqICAgICAgICAgfVxuICogICAgIH0pKTtcbiAqICAgICB6ci5hZGQoZyk7XG4gKi9cblxuLyoqXG4gKiBAYWxpYXMgbW9kdWxlOnpyZW5kZXIvZ3JhcGhpYy9Hcm91cFxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBtb2R1bGU6enJlbmRlci9taXhpbi9UcmFuc2Zvcm1hYmxlXG4gKiBAZXh0ZW5kcyBtb2R1bGU6enJlbmRlci9taXhpbi9FdmVudGZ1bFxuICovXG52YXIgR3JvdXAgPSBmdW5jdGlvbiAob3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgRWxlbWVudC5jYWxsKHRoaXMsIG9wdHMpO1xuXG4gIGZvciAodmFyIGtleSBpbiBvcHRzKSB7XG4gICAgaWYgKG9wdHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgdGhpc1trZXldID0gb3B0c1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuX2NoaWxkcmVuID0gW107XG4gIHRoaXMuX19zdG9yYWdlID0gbnVsbDtcbiAgdGhpcy5fX2RpcnR5ID0gdHJ1ZTtcbn07XG5cbkdyb3VwLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEdyb3VwLFxuICBpc0dyb3VwOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdHlwZTogJ2dyb3VwJyxcblxuICAvKipcbiAgICog5omA5pyJ5a2Q5a2Z5YWD57Sg5piv5ZCm5ZON5bqU6byg5qCH5LqL5Lu2XG4gICAqIEBuYW1lIG1vZHVsZTovenJlbmRlci9jb250YWluZXIvR3JvdXAjc2lsZW50XG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc2lsZW50OiBmYWxzZSxcblxuICAvKipcbiAgICogQHJldHVybiB7QXJyYXkuPG1vZHVsZTp6cmVuZGVyL0VsZW1lbnQ+fVxuICAgKi9cbiAgY2hpbGRyZW46IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW4uc2xpY2UoKTtcbiAgfSxcblxuICAvKipcbiAgICog6I635Y+W5oyH5a6aIGluZGV4IOeahOWEv+WtkOiKgueCuVxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IGlkeFxuICAgKiBAcmV0dXJuIHttb2R1bGU6enJlbmRlci9FbGVtZW50fVxuICAgKi9cbiAgY2hpbGRBdDogZnVuY3Rpb24gKGlkeCkge1xuICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbltpZHhdO1xuICB9LFxuXG4gIC8qKlxuICAgKiDojrflj5bmjIflrprlkI3lrZfnmoTlhL/lrZDoioLngrlcbiAgICogQHBhcmFtICB7c3RyaW5nfSBuYW1lXG4gICAqIEByZXR1cm4ge21vZHVsZTp6cmVuZGVyL0VsZW1lbnR9XG4gICAqL1xuICBjaGlsZE9mTmFtZTogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLl9jaGlsZHJlbjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChjaGlsZHJlbltpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbltpXTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGNoaWxkQ291bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW4ubGVuZ3RoO1xuICB9LFxuXG4gIC8qKlxuICAgKiDmt7vliqDlrZDoioLngrnliLDmnIDlkI5cbiAgICogQHBhcmFtIHttb2R1bGU6enJlbmRlci9FbGVtZW50fSBjaGlsZFxuICAgKi9cbiAgYWRkOiBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQgJiYgY2hpbGQgIT09IHRoaXMgJiYgY2hpbGQucGFyZW50ICE9PSB0aGlzKSB7XG4gICAgICB0aGlzLl9jaGlsZHJlbi5wdXNoKGNoaWxkKTtcblxuICAgICAgdGhpcy5fZG9BZGQoY2hpbGQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiDmt7vliqDlrZDoioLngrnlnKggbmV4dFNpYmxpbmcg5LmL5YmNXG4gICAqIEBwYXJhbSB7bW9kdWxlOnpyZW5kZXIvRWxlbWVudH0gY2hpbGRcbiAgICogQHBhcmFtIHttb2R1bGU6enJlbmRlci9FbGVtZW50fSBuZXh0U2libGluZ1xuICAgKi9cbiAgYWRkQmVmb3JlOiBmdW5jdGlvbiAoY2hpbGQsIG5leHRTaWJsaW5nKSB7XG4gICAgaWYgKGNoaWxkICYmIGNoaWxkICE9PSB0aGlzICYmIGNoaWxkLnBhcmVudCAhPT0gdGhpcyAmJiBuZXh0U2libGluZyAmJiBuZXh0U2libGluZy5wYXJlbnQgPT09IHRoaXMpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuX2NoaWxkcmVuO1xuICAgICAgdmFyIGlkeCA9IGNoaWxkcmVuLmluZGV4T2YobmV4dFNpYmxpbmcpO1xuXG4gICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgY2hpbGRyZW4uc3BsaWNlKGlkeCwgMCwgY2hpbGQpO1xuXG4gICAgICAgIHRoaXMuX2RvQWRkKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgX2RvQWRkOiBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQucGFyZW50KSB7XG4gICAgICBjaGlsZC5wYXJlbnQucmVtb3ZlKGNoaWxkKTtcbiAgICB9XG5cbiAgICBjaGlsZC5wYXJlbnQgPSB0aGlzO1xuICAgIHZhciBzdG9yYWdlID0gdGhpcy5fX3N0b3JhZ2U7XG4gICAgdmFyIHpyID0gdGhpcy5fX3pyO1xuXG4gICAgaWYgKHN0b3JhZ2UgJiYgc3RvcmFnZSAhPT0gY2hpbGQuX19zdG9yYWdlKSB7XG4gICAgICBzdG9yYWdlLmFkZFRvU3RvcmFnZShjaGlsZCk7XG5cbiAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIEdyb3VwKSB7XG4gICAgICAgIGNoaWxkLmFkZENoaWxkcmVuVG9TdG9yYWdlKHN0b3JhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHpyICYmIHpyLnJlZnJlc2goKTtcbiAgfSxcblxuICAvKipcbiAgICog56e76Zmk5a2Q6IqC54K5XG4gICAqIEBwYXJhbSB7bW9kdWxlOnpyZW5kZXIvRWxlbWVudH0gY2hpbGRcbiAgICovXG4gIHJlbW92ZTogZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgdmFyIHpyID0gdGhpcy5fX3pyO1xuICAgIHZhciBzdG9yYWdlID0gdGhpcy5fX3N0b3JhZ2U7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW47XG4gICAgdmFyIGlkeCA9IHpyVXRpbC5pbmRleE9mKGNoaWxkcmVuLCBjaGlsZCk7XG5cbiAgICBpZiAoaWR4IDwgMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG4gICAgY2hpbGQucGFyZW50ID0gbnVsbDtcblxuICAgIGlmIChzdG9yYWdlKSB7XG4gICAgICBzdG9yYWdlLmRlbEZyb21TdG9yYWdlKGNoaWxkKTtcblxuICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgR3JvdXApIHtcbiAgICAgICAgY2hpbGQuZGVsQ2hpbGRyZW5Gcm9tU3RvcmFnZShzdG9yYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB6ciAmJiB6ci5yZWZyZXNoKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOenu+mZpOaJgOacieWtkOiKgueCuVxuICAgKi9cbiAgcmVtb3ZlQWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW47XG4gICAgdmFyIHN0b3JhZ2UgPSB0aGlzLl9fc3RvcmFnZTtcbiAgICB2YXIgY2hpbGQ7XG4gICAgdmFyIGk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG5cbiAgICAgIGlmIChzdG9yYWdlKSB7XG4gICAgICAgIHN0b3JhZ2UuZGVsRnJvbVN0b3JhZ2UoY2hpbGQpO1xuXG4gICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIEdyb3VwKSB7XG4gICAgICAgICAgY2hpbGQuZGVsQ2hpbGRyZW5Gcm9tU3RvcmFnZShzdG9yYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjaGlsZC5wYXJlbnQgPSBudWxsO1xuICAgIH1cblxuICAgIGNoaWxkcmVuLmxlbmd0aCA9IDA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOmBjeWOhuaJgOacieWtkOiKgueCuVxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2JcbiAgICogQHBhcmFtICB7fSAgIGNvbnRleHRcbiAgICovXG4gIGVhY2hDaGlsZDogZnVuY3Rpb24gKGNiLCBjb250ZXh0KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW47XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIGNiLmNhbGwoY29udGV4dCwgY2hpbGQsIGkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiDmt7HluqbkvJjlhYjpgY3ljobmiYDmnInlrZDlrZnoioLngrlcbiAgICogQHBhcmFtICB7RnVuY3Rpb259IGNiXG4gICAqIEBwYXJhbSAge30gICBjb250ZXh0XG4gICAqL1xuICB0cmF2ZXJzZTogZnVuY3Rpb24gKGNiLCBjb250ZXh0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gdGhpcy5fY2hpbGRyZW5baV07XG4gICAgICBjYi5jYWxsKGNvbnRleHQsIGNoaWxkKTtcblxuICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdncm91cCcpIHtcbiAgICAgICAgY2hpbGQudHJhdmVyc2UoY2IsIGNvbnRleHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBhZGRDaGlsZHJlblRvU3RvcmFnZTogZnVuY3Rpb24gKHN0b3JhZ2UpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSB0aGlzLl9jaGlsZHJlbltpXTtcbiAgICAgIHN0b3JhZ2UuYWRkVG9TdG9yYWdlKGNoaWxkKTtcblxuICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgR3JvdXApIHtcbiAgICAgICAgY2hpbGQuYWRkQ2hpbGRyZW5Ub1N0b3JhZ2Uoc3RvcmFnZSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBkZWxDaGlsZHJlbkZyb21TdG9yYWdlOiBmdW5jdGlvbiAoc3RvcmFnZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHRoaXMuX2NoaWxkcmVuW2ldO1xuICAgICAgc3RvcmFnZS5kZWxGcm9tU3RvcmFnZShjaGlsZCk7XG5cbiAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIEdyb3VwKSB7XG4gICAgICAgIGNoaWxkLmRlbENoaWxkcmVuRnJvbVN0b3JhZ2Uoc3RvcmFnZSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBkaXJ0eTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX19kaXJ0eSA9IHRydWU7XG4gICAgdGhpcy5fX3pyICYmIHRoaXMuX196ci5yZWZyZXNoKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge21vZHVsZTp6cmVuZGVyL2NvcmUvQm91bmRpbmdSZWN0fVxuICAgKi9cbiAgZ2V0Qm91bmRpbmdSZWN0OiBmdW5jdGlvbiAoaW5jbHVkZUNoaWxkcmVuKSB7XG4gICAgLy8gVE9ETyBDYWNoaW5nXG4gICAgdmFyIHJlY3QgPSBudWxsO1xuICAgIHZhciB0bXBSZWN0ID0gbmV3IEJvdW5kaW5nUmVjdCgwLCAwLCAwLCAwKTtcbiAgICB2YXIgY2hpbGRyZW4gPSBpbmNsdWRlQ2hpbGRyZW4gfHwgdGhpcy5fY2hpbGRyZW47XG4gICAgdmFyIHRtcE1hdCA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG5cbiAgICAgIGlmIChjaGlsZC5pZ25vcmUgfHwgY2hpbGQuaW52aXNpYmxlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hpbGRSZWN0ID0gY2hpbGQuZ2V0Qm91bmRpbmdSZWN0KCk7XG4gICAgICB2YXIgdHJhbnNmb3JtID0gY2hpbGQuZ2V0TG9jYWxUcmFuc2Zvcm0odG1wTWF0KTsgLy8gVE9ET1xuICAgICAgLy8gVGhlIGJvdW5kaW5nUmVjdCBjYWNsdWF0ZWQgYnkgdHJhbnNmb3JtaW5nIG9yaWdpbmFsXG4gICAgICAvLyByZWN0IG1heSBiZSBiaWdnZXIgdGhhbiB0aGUgYWN0dWFsIGJ1bmRpbmdSZWN0IHdoZW4gcm90YXRpb25cbiAgICAgIC8vIGlzIHVzZWQuIChDb25zaWRlciBhIGNpcmNsZSByb3RhdGVkIGFnaW5zdCBpdHMgY2VudGVyLCB3aGVyZVxuICAgICAgLy8gdGhlIGFjdHVhbCBib3VuZGluZ1JlY3Qgc2hvdWxkIGJlIHRoZSBzYW1lIGFzIHRoYXQgbm90IGJlXG4gICAgICAvLyByb3RhdGVkLikgQnV0IHdlIGNhbiBub3QgZmluZCBiZXR0ZXIgYXBwcm9hY2ggdG8gY2FsY3VsYXRlXG4gICAgICAvLyBhY3R1YWwgYm91bmRpbmdSZWN0IHlldCwgY29uc2lkZXJpbmcgcGVyZm9ybWFuY2UuXG5cbiAgICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgICAgdG1wUmVjdC5jb3B5KGNoaWxkUmVjdCk7XG4gICAgICAgIHRtcFJlY3QuYXBwbHlUcmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICAgICAgcmVjdCA9IHJlY3QgfHwgdG1wUmVjdC5jbG9uZSgpO1xuICAgICAgICByZWN0LnVuaW9uKHRtcFJlY3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVjdCA9IHJlY3QgfHwgY2hpbGRSZWN0LmNsb25lKCk7XG4gICAgICAgIHJlY3QudW5pb24oY2hpbGRSZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVjdCB8fCB0bXBSZWN0O1xuICB9XG59O1xuenJVdGlsLmluaGVyaXRzKEdyb3VwLCBFbGVtZW50KTtcbnZhciBfZGVmYXVsdCA9IEdyb3VwO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgdmVjMiA9IHJlcXVpcmUoXCIuL3ZlY3RvclwiKTtcblxudmFyIG1hdHJpeCA9IHJlcXVpcmUoXCIuL21hdHJpeFwiKTtcblxuLyoqXG4gKiBAbW9kdWxlIGVjaGFydHMvY29yZS9Cb3VuZGluZ1JlY3RcbiAqL1xudmFyIHYyQXBwbHlUcmFuc2Zvcm0gPSB2ZWMyLmFwcGx5VHJhbnNmb3JtO1xudmFyIG1hdGhNaW4gPSBNYXRoLm1pbjtcbnZhciBtYXRoTWF4ID0gTWF0aC5tYXg7XG4vKipcbiAqIEBhbGlhcyBtb2R1bGU6ZWNoYXJ0cy9jb3JlL0JvdW5kaW5nUmVjdFxuICovXG5cbmZ1bmN0aW9uIEJvdW5kaW5nUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gIGlmICh3aWR0aCA8IDApIHtcbiAgICB4ID0geCArIHdpZHRoO1xuICAgIHdpZHRoID0gLXdpZHRoO1xuICB9XG5cbiAgaWYgKGhlaWdodCA8IDApIHtcbiAgICB5ID0geSArIGhlaWdodDtcbiAgICBoZWlnaHQgPSAtaGVpZ2h0O1xuICB9XG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cblxuXG4gIHRoaXMueCA9IHg7XG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cblxuICB0aGlzLnkgPSB5O1xuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cbiAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cbiAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG59XG5cbkJvdW5kaW5nUmVjdC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBCb3VuZGluZ1JlY3QsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bW9kdWxlOmVjaGFydHMvY29yZS9Cb3VuZGluZ1JlY3R9IG90aGVyXG4gICAqL1xuICB1bmlvbjogZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgdmFyIHggPSBtYXRoTWluKG90aGVyLngsIHRoaXMueCk7XG4gICAgdmFyIHkgPSBtYXRoTWluKG90aGVyLnksIHRoaXMueSk7XG4gICAgdGhpcy53aWR0aCA9IG1hdGhNYXgob3RoZXIueCArIG90aGVyLndpZHRoLCB0aGlzLnggKyB0aGlzLndpZHRoKSAtIHg7XG4gICAgdGhpcy5oZWlnaHQgPSBtYXRoTWF4KG90aGVyLnkgKyBvdGhlci5oZWlnaHQsIHRoaXMueSArIHRoaXMuaGVpZ2h0KSAtIHk7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBtXG4gICAqIEBtZXRob2RzXG4gICAqL1xuICBhcHBseVRyYW5zZm9ybTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBsdCA9IFtdO1xuICAgIHZhciByYiA9IFtdO1xuICAgIHZhciBsYiA9IFtdO1xuICAgIHZhciBydCA9IFtdO1xuICAgIHJldHVybiBmdW5jdGlvbiAobSkge1xuICAgICAgLy8gSW4gY2FzZSB1c2FnZSBsaWtlIHRoaXNcbiAgICAgIC8vIGVsLmdldEJvdW5kaW5nUmVjdCgpLmFwcGx5VHJhbnNmb3JtKGVsLnRyYW5zZm9ybSlcbiAgICAgIC8vIEFuZCBlbGVtZW50IGhhcyBubyB0cmFuc2Zvcm1cbiAgICAgIGlmICghbSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGx0WzBdID0gbGJbMF0gPSB0aGlzLng7XG4gICAgICBsdFsxXSA9IHJ0WzFdID0gdGhpcy55O1xuICAgICAgcmJbMF0gPSBydFswXSA9IHRoaXMueCArIHRoaXMud2lkdGg7XG4gICAgICByYlsxXSA9IGxiWzFdID0gdGhpcy55ICsgdGhpcy5oZWlnaHQ7XG4gICAgICB2MkFwcGx5VHJhbnNmb3JtKGx0LCBsdCwgbSk7XG4gICAgICB2MkFwcGx5VHJhbnNmb3JtKHJiLCByYiwgbSk7XG4gICAgICB2MkFwcGx5VHJhbnNmb3JtKGxiLCBsYiwgbSk7XG4gICAgICB2MkFwcGx5VHJhbnNmb3JtKHJ0LCBydCwgbSk7XG4gICAgICB0aGlzLnggPSBtYXRoTWluKGx0WzBdLCByYlswXSwgbGJbMF0sIHJ0WzBdKTtcbiAgICAgIHRoaXMueSA9IG1hdGhNaW4obHRbMV0sIHJiWzFdLCBsYlsxXSwgcnRbMV0pO1xuICAgICAgdmFyIG1heFggPSBtYXRoTWF4KGx0WzBdLCByYlswXSwgbGJbMF0sIHJ0WzBdKTtcbiAgICAgIHZhciBtYXhZID0gbWF0aE1heChsdFsxXSwgcmJbMV0sIGxiWzFdLCBydFsxXSk7XG4gICAgICB0aGlzLndpZHRoID0gbWF4WCAtIHRoaXMueDtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gbWF4WSAtIHRoaXMueTtcbiAgICB9O1xuICB9KCksXG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBtYXRyaXggb2YgdHJhbnNmb3JtaW5nIGZyb20gc2VsZiB0byB0YXJnZXQgcmVjdFxuICAgKiBAcGFyYW0gIHttb2R1bGU6enJlbmRlci9jb3JlL0JvdW5kaW5nUmVjdH0gYlxuICAgKiBAcmV0dXJuIHtBcnJheS48bnVtYmVyPn1cbiAgICovXG4gIGNhbGN1bGF0ZVRyYW5zZm9ybTogZnVuY3Rpb24gKGIpIHtcbiAgICB2YXIgYSA9IHRoaXM7XG4gICAgdmFyIHN4ID0gYi53aWR0aCAvIGEud2lkdGg7XG4gICAgdmFyIHN5ID0gYi5oZWlnaHQgLyBhLmhlaWdodDtcbiAgICB2YXIgbSA9IG1hdHJpeC5jcmVhdGUoKTsgLy8g55+p6Zi15Y+z5LmYXG5cbiAgICBtYXRyaXgudHJhbnNsYXRlKG0sIG0sIFstYS54LCAtYS55XSk7XG4gICAgbWF0cml4LnNjYWxlKG0sIG0sIFtzeCwgc3ldKTtcbiAgICBtYXRyaXgudHJhbnNsYXRlKG0sIG0sIFtiLngsIGIueV0pO1xuICAgIHJldHVybiBtO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyhtb2R1bGU6ZWNoYXJ0cy9jb3JlL0JvdW5kaW5nUmVjdHxPYmplY3QpfSBiXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpbnRlcnNlY3Q6IGZ1bmN0aW9uIChiKSB7XG4gICAgaWYgKCFiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCEoYiBpbnN0YW5jZW9mIEJvdW5kaW5nUmVjdCkpIHtcbiAgICAgIC8vIE5vcm1hbGl6ZSBuZWdhdGl2ZSB3aWR0aC9oZWlnaHQuXG4gICAgICBiID0gQm91bmRpbmdSZWN0LmNyZWF0ZShiKTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IHRoaXM7XG4gICAgdmFyIGF4MCA9IGEueDtcbiAgICB2YXIgYXgxID0gYS54ICsgYS53aWR0aDtcbiAgICB2YXIgYXkwID0gYS55O1xuICAgIHZhciBheTEgPSBhLnkgKyBhLmhlaWdodDtcbiAgICB2YXIgYngwID0gYi54O1xuICAgIHZhciBieDEgPSBiLnggKyBiLndpZHRoO1xuICAgIHZhciBieTAgPSBiLnk7XG4gICAgdmFyIGJ5MSA9IGIueSArIGIuaGVpZ2h0O1xuICAgIHJldHVybiAhKGF4MSA8IGJ4MCB8fCBieDEgPCBheDAgfHwgYXkxIDwgYnkwIHx8IGJ5MSA8IGF5MCk7XG4gIH0sXG4gIGNvbnRhaW46IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgdmFyIHJlY3QgPSB0aGlzO1xuICAgIHJldHVybiB4ID49IHJlY3QueCAmJiB4IDw9IHJlY3QueCArIHJlY3Qud2lkdGggJiYgeSA+PSByZWN0LnkgJiYgeSA8PSByZWN0LnkgKyByZWN0LmhlaWdodDtcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7bW9kdWxlOmVjaGFydHMvY29yZS9Cb3VuZGluZ1JlY3R9XG4gICAqL1xuICBjbG9uZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgQm91bmRpbmdSZWN0KHRoaXMueCwgdGhpcy55LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENvcHkgZnJvbSBhbm90aGVyIHJlY3RcbiAgICovXG4gIGNvcHk6IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHRoaXMueCA9IG90aGVyLng7XG4gICAgdGhpcy55ID0gb3RoZXIueTtcbiAgICB0aGlzLndpZHRoID0gb3RoZXIud2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBvdGhlci5oZWlnaHQ7XG4gIH0sXG4gIHBsYWluOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHRoaXMueCxcbiAgICAgIHk6IHRoaXMueSxcbiAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodFxuICAgIH07XG4gIH1cbn07XG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fG1vZHVsZTp6cmVuZGVyL2NvcmUvQm91bmRpbmdSZWN0fSByZWN0XG4gKiBAcGFyYW0ge251bWJlcn0gcmVjdC54XG4gKiBAcGFyYW0ge251bWJlcn0gcmVjdC55XG4gKiBAcGFyYW0ge251bWJlcn0gcmVjdC53aWR0aFxuICogQHBhcmFtIHtudW1iZXJ9IHJlY3QuaGVpZ2h0XG4gKiBAcmV0dXJuIHttb2R1bGU6enJlbmRlci9jb3JlL0JvdW5kaW5nUmVjdH1cbiAqL1xuXG5Cb3VuZGluZ1JlY3QuY3JlYXRlID0gZnVuY3Rpb24gKHJlY3QpIHtcbiAgcmV0dXJuIG5ldyBCb3VuZGluZ1JlY3QocmVjdC54LCByZWN0LnksIHJlY3Qud2lkdGgsIHJlY3QuaGVpZ2h0KTtcbn07XG5cbnZhciBfZGVmYXVsdCA9IEJvdW5kaW5nUmVjdDtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIGV2ZW50VXRpbCA9IHJlcXVpcmUoXCIuL2V2ZW50XCIpO1xuXG4vKipcbiAqIE9ubHkgaW1wbGVtZW50cyBuZWVkZWQgZ2VzdHVyZXMgZm9yIG1vYmlsZS5cbiAqL1xudmFyIEdlc3R1cmVNZ3IgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdHlwZSB7QXJyYXkuPE9iamVjdD59XG4gICAqL1xuICB0aGlzLl90cmFjayA9IFtdO1xufTtcblxuR2VzdHVyZU1nci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBHZXN0dXJlTWdyLFxuICByZWNvZ25pemU6IGZ1bmN0aW9uIChldmVudCwgdGFyZ2V0LCByb290KSB7XG4gICAgdGhpcy5fZG9UcmFjayhldmVudCwgdGFyZ2V0LCByb290KTtcblxuICAgIHJldHVybiB0aGlzLl9yZWNvZ25pemUoZXZlbnQpO1xuICB9LFxuICBjbGVhcjogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3RyYWNrLmxlbmd0aCA9IDA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIF9kb1RyYWNrOiBmdW5jdGlvbiAoZXZlbnQsIHRhcmdldCwgcm9vdCkge1xuICAgIHZhciB0b3VjaGVzID0gZXZlbnQudG91Y2hlcztcblxuICAgIGlmICghdG91Y2hlcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0cmFja0l0ZW0gPSB7XG4gICAgICBwb2ludHM6IFtdLFxuICAgICAgdG91Y2hlczogW10sXG4gICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgIGV2ZW50OiBldmVudFxuICAgIH07XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdG91Y2hlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIHRvdWNoID0gdG91Y2hlc1tpXTtcbiAgICAgIHZhciBwb3MgPSBldmVudFV0aWwuY2xpZW50VG9Mb2NhbChyb290LCB0b3VjaCwge30pO1xuICAgICAgdHJhY2tJdGVtLnBvaW50cy5wdXNoKFtwb3MuenJYLCBwb3MuenJZXSk7XG4gICAgICB0cmFja0l0ZW0udG91Y2hlcy5wdXNoKHRvdWNoKTtcbiAgICB9XG5cbiAgICB0aGlzLl90cmFjay5wdXNoKHRyYWNrSXRlbSk7XG4gIH0sXG4gIF9yZWNvZ25pemU6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGZvciAodmFyIGV2ZW50TmFtZSBpbiByZWNvZ25pemVycykge1xuICAgICAgaWYgKHJlY29nbml6ZXJzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkpIHtcbiAgICAgICAgdmFyIGdlc3R1cmVJbmZvID0gcmVjb2duaXplcnNbZXZlbnROYW1lXSh0aGlzLl90cmFjaywgZXZlbnQpO1xuXG4gICAgICAgIGlmIChnZXN0dXJlSW5mbykge1xuICAgICAgICAgIHJldHVybiBnZXN0dXJlSW5mbztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gZGlzdChwb2ludFBhaXIpIHtcbiAgdmFyIGR4ID0gcG9pbnRQYWlyWzFdWzBdIC0gcG9pbnRQYWlyWzBdWzBdO1xuICB2YXIgZHkgPSBwb2ludFBhaXJbMV1bMV0gLSBwb2ludFBhaXJbMF1bMV07XG4gIHJldHVybiBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xufVxuXG5mdW5jdGlvbiBjZW50ZXIocG9pbnRQYWlyKSB7XG4gIHJldHVybiBbKHBvaW50UGFpclswXVswXSArIHBvaW50UGFpclsxXVswXSkgLyAyLCAocG9pbnRQYWlyWzBdWzFdICsgcG9pbnRQYWlyWzFdWzFdKSAvIDJdO1xufVxuXG52YXIgcmVjb2duaXplcnMgPSB7XG4gIHBpbmNoOiBmdW5jdGlvbiAodHJhY2ssIGV2ZW50KSB7XG4gICAgdmFyIHRyYWNrTGVuID0gdHJhY2subGVuZ3RoO1xuXG4gICAgaWYgKCF0cmFja0xlbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwaW5jaEVuZCA9ICh0cmFja1t0cmFja0xlbiAtIDFdIHx8IHt9KS5wb2ludHM7XG4gICAgdmFyIHBpbmNoUHJlID0gKHRyYWNrW3RyYWNrTGVuIC0gMl0gfHwge30pLnBvaW50cyB8fCBwaW5jaEVuZDtcblxuICAgIGlmIChwaW5jaFByZSAmJiBwaW5jaFByZS5sZW5ndGggPiAxICYmIHBpbmNoRW5kICYmIHBpbmNoRW5kLmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciBwaW5jaFNjYWxlID0gZGlzdChwaW5jaEVuZCkgLyBkaXN0KHBpbmNoUHJlKTtcbiAgICAgICFpc0Zpbml0ZShwaW5jaFNjYWxlKSAmJiAocGluY2hTY2FsZSA9IDEpO1xuICAgICAgZXZlbnQucGluY2hTY2FsZSA9IHBpbmNoU2NhbGU7XG4gICAgICB2YXIgcGluY2hDZW50ZXIgPSBjZW50ZXIocGluY2hFbmQpO1xuICAgICAgZXZlbnQucGluY2hYID0gcGluY2hDZW50ZXJbMF07XG4gICAgICBldmVudC5waW5jaFkgPSBwaW5jaENlbnRlclsxXTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdwaW5jaCcsXG4gICAgICAgIHRhcmdldDogdHJhY2tbMF0udGFyZ2V0LFxuICAgICAgICBldmVudDogZXZlbnRcbiAgICAgIH07XG4gICAgfVxuICB9IC8vIE9ubHkgcGluY2ggY3VycmVudGx5LlxuXG59O1xudmFyIF9kZWZhdWx0ID0gR2VzdHVyZU1ncjtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwiLy8gU2ltcGxlIExSVSBjYWNoZSB1c2UgZG91Ymx5IGxpbmtlZCBsaXN0XG4vLyBAbW9kdWxlIHpyZW5kZXIvY29yZS9MUlVcblxuLyoqXG4gKiBTaW1wbGUgZG91YmxlIGxpbmtlZCBsaXN0LiBDb21wYXJlZCB3aXRoIGFycmF5LCBpdCBoYXMgTygxKSByZW1vdmUgb3BlcmF0aW9uLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBMaW5rZWRMaXN0ID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHR5cGUge21vZHVsZTp6cmVuZGVyL2NvcmUvTFJVfkVudHJ5fVxuICAgKi9cbiAgdGhpcy5oZWFkID0gbnVsbDtcbiAgLyoqXG4gICAqIEB0eXBlIHttb2R1bGU6enJlbmRlci9jb3JlL0xSVX5FbnRyeX1cbiAgICovXG5cbiAgdGhpcy50YWlsID0gbnVsbDtcbiAgdGhpcy5fbGVuID0gMDtcbn07XG5cbnZhciBsaW5rZWRMaXN0UHJvdG8gPSBMaW5rZWRMaXN0LnByb3RvdHlwZTtcbi8qKlxuICogSW5zZXJ0IGEgbmV3IHZhbHVlIGF0IHRoZSB0YWlsXG4gKiBAcGFyYW0gIHt9IHZhbFxuICogQHJldHVybiB7bW9kdWxlOnpyZW5kZXIvY29yZS9MUlV+RW50cnl9XG4gKi9cblxubGlua2VkTGlzdFByb3RvLmluc2VydCA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgdmFyIGVudHJ5ID0gbmV3IEVudHJ5KHZhbCk7XG4gIHRoaXMuaW5zZXJ0RW50cnkoZW50cnkpO1xuICByZXR1cm4gZW50cnk7XG59O1xuLyoqXG4gKiBJbnNlcnQgYW4gZW50cnkgYXQgdGhlIHRhaWxcbiAqIEBwYXJhbSAge21vZHVsZTp6cmVuZGVyL2NvcmUvTFJVfkVudHJ5fSBlbnRyeVxuICovXG5cblxubGlua2VkTGlzdFByb3RvLmluc2VydEVudHJ5ID0gZnVuY3Rpb24gKGVudHJ5KSB7XG4gIGlmICghdGhpcy5oZWFkKSB7XG4gICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gZW50cnk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtcbiAgICBlbnRyeS5wcmV2ID0gdGhpcy50YWlsO1xuICAgIGVudHJ5Lm5leHQgPSBudWxsO1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICB9XG5cbiAgdGhpcy5fbGVuKys7XG59O1xuLyoqXG4gKiBSZW1vdmUgZW50cnkuXG4gKiBAcGFyYW0gIHttb2R1bGU6enJlbmRlci9jb3JlL0xSVX5FbnRyeX0gZW50cnlcbiAqL1xuXG5cbmxpbmtlZExpc3RQcm90by5yZW1vdmUgPSBmdW5jdGlvbiAoZW50cnkpIHtcbiAgdmFyIHByZXYgPSBlbnRyeS5wcmV2O1xuICB2YXIgbmV4dCA9IGVudHJ5Lm5leHQ7XG5cbiAgaWYgKHByZXYpIHtcbiAgICBwcmV2Lm5leHQgPSBuZXh0O1xuICB9IGVsc2Uge1xuICAgIC8vIElzIGhlYWRcbiAgICB0aGlzLmhlYWQgPSBuZXh0O1xuICB9XG5cbiAgaWYgKG5leHQpIHtcbiAgICBuZXh0LnByZXYgPSBwcmV2O1xuICB9IGVsc2Uge1xuICAgIC8vIElzIHRhaWxcbiAgICB0aGlzLnRhaWwgPSBwcmV2O1xuICB9XG5cbiAgZW50cnkubmV4dCA9IGVudHJ5LnByZXYgPSBudWxsO1xuICB0aGlzLl9sZW4tLTtcbn07XG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuXG5cbmxpbmtlZExpc3RQcm90by5sZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9sZW47XG59O1xuLyoqXG4gKiBDbGVhciBsaXN0XG4gKi9cblxuXG5saW5rZWRMaXN0UHJvdG8uY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gIHRoaXMuX2xlbiA9IDA7XG59O1xuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7fSB2YWxcbiAqL1xuXG5cbnZhciBFbnRyeSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgLyoqXG4gICAqIEB0eXBlIHt9XG4gICAqL1xuICB0aGlzLnZhbHVlID0gdmFsO1xuICAvKipcbiAgICogQHR5cGUge21vZHVsZTp6cmVuZGVyL2NvcmUvTFJVfkVudHJ5fVxuICAgKi9cblxuICB0aGlzLm5leHQ7XG4gIC8qKlxuICAgKiBAdHlwZSB7bW9kdWxlOnpyZW5kZXIvY29yZS9MUlV+RW50cnl9XG4gICAqL1xuXG4gIHRoaXMucHJldjtcbn07XG4vKipcbiAqIExSVSBDYWNoZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAYWxpYXMgbW9kdWxlOnpyZW5kZXIvY29yZS9MUlVcbiAqL1xuXG5cbnZhciBMUlUgPSBmdW5jdGlvbiAobWF4U2l6ZSkge1xuICB0aGlzLl9saXN0ID0gbmV3IExpbmtlZExpc3QoKTtcbiAgdGhpcy5fbWFwID0ge307XG4gIHRoaXMuX21heFNpemUgPSBtYXhTaXplIHx8IDEwO1xuICB0aGlzLl9sYXN0UmVtb3ZlZEVudHJ5ID0gbnVsbDtcbn07XG5cbnZhciBMUlVQcm90byA9IExSVS5wcm90b3R5cGU7XG4vKipcbiAqIEBwYXJhbSAge3N0cmluZ30ga2V5XG4gKiBAcGFyYW0gIHt9IHZhbHVlXG4gKiBAcmV0dXJuIHt9IFJlbW92ZWQgdmFsdWVcbiAqL1xuXG5MUlVQcm90by5wdXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB2YXIgbGlzdCA9IHRoaXMuX2xpc3Q7XG4gIHZhciBtYXAgPSB0aGlzLl9tYXA7XG4gIHZhciByZW1vdmVkID0gbnVsbDtcblxuICBpZiAobWFwW2tleV0gPT0gbnVsbCkge1xuICAgIHZhciBsZW4gPSBsaXN0LmxlbigpOyAvLyBSZXVzZSBsYXN0IHJlbW92ZWQgZW50cnlcblxuICAgIHZhciBlbnRyeSA9IHRoaXMuX2xhc3RSZW1vdmVkRW50cnk7XG5cbiAgICBpZiAobGVuID49IHRoaXMuX21heFNpemUgJiYgbGVuID4gMCkge1xuICAgICAgLy8gUmVtb3ZlIHRoZSBsZWFzdCByZWNlbnRseSB1c2VkXG4gICAgICB2YXIgbGVhc3RVc2VkRW50cnkgPSBsaXN0LmhlYWQ7XG4gICAgICBsaXN0LnJlbW92ZShsZWFzdFVzZWRFbnRyeSk7XG4gICAgICBkZWxldGUgbWFwW2xlYXN0VXNlZEVudHJ5LmtleV07XG4gICAgICByZW1vdmVkID0gbGVhc3RVc2VkRW50cnkudmFsdWU7XG4gICAgICB0aGlzLl9sYXN0UmVtb3ZlZEVudHJ5ID0gbGVhc3RVc2VkRW50cnk7XG4gICAgfVxuXG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBlbnRyeS52YWx1ZSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRyeSA9IG5ldyBFbnRyeSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZW50cnkua2V5ID0ga2V5O1xuICAgIGxpc3QuaW5zZXJ0RW50cnkoZW50cnkpO1xuICAgIG1hcFtrZXldID0gZW50cnk7XG4gIH1cblxuICByZXR1cm4gcmVtb3ZlZDtcbn07XG4vKipcbiAqIEBwYXJhbSAge3N0cmluZ30ga2V5XG4gKiBAcmV0dXJuIHt9XG4gKi9cblxuXG5MUlVQcm90by5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHZhciBlbnRyeSA9IHRoaXMuX21hcFtrZXldO1xuICB2YXIgbGlzdCA9IHRoaXMuX2xpc3Q7XG5cbiAgaWYgKGVudHJ5ICE9IG51bGwpIHtcbiAgICAvLyBQdXQgdGhlIGxhdGVzdCB1c2VkIGVudHJ5IGluIHRoZSB0YWlsXG4gICAgaWYgKGVudHJ5ICE9PSBsaXN0LnRhaWwpIHtcbiAgICAgIGxpc3QucmVtb3ZlKGVudHJ5KTtcbiAgICAgIGxpc3QuaW5zZXJ0RW50cnkoZW50cnkpO1xuICAgIH1cblxuICAgIHJldHVybiBlbnRyeS52YWx1ZTtcbiAgfVxufTtcbi8qKlxuICogQ2xlYXIgdGhlIGNhY2hlXG4gKi9cblxuXG5MUlVQcm90by5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fbGlzdC5jbGVhcigpO1xuXG4gIHRoaXMuX21hcCA9IHt9O1xufTtcblxudmFyIF9kZWZhdWx0ID0gTFJVO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgY3VydmUgPSByZXF1aXJlKFwiLi9jdXJ2ZVwiKTtcblxudmFyIHZlYzIgPSByZXF1aXJlKFwiLi92ZWN0b3JcIik7XG5cbnZhciBiYm94ID0gcmVxdWlyZShcIi4vYmJveFwiKTtcblxudmFyIEJvdW5kaW5nUmVjdCA9IHJlcXVpcmUoXCIuL0JvdW5kaW5nUmVjdFwiKTtcblxudmFyIF9jb25maWcgPSByZXF1aXJlKFwiLi4vY29uZmlnXCIpO1xuXG52YXIgZHByID0gX2NvbmZpZy5kZXZpY2VQaXhlbFJhdGlvO1xuXG4vKipcbiAqIFBhdGgg5Luj55CG77yM5Y+v5Lul5ZyoYGJ1aWxkUGF0aGDkuK3nlKjkuo7mm7/ku6NgY3R4YCwg5Lya5L+d5a2Y5q+P5LiqcGF0aOaTjeS9nOeahOWRveS7pOWIsHBhdGhDb21tYW5kc+WxnuaAp+S4rVxuICog5Y+v5Lul55So5LqOIGlzSW5zaWRlUGF0aCDliKTmlq3ku6Xlj4rojrflj5Zib3VuZGluZ1JlY3RcbiAqXG4gKiBAbW9kdWxlIHpyZW5kZXIvY29yZS9QYXRoUHJveHlcbiAqIEBhdXRob3IgWWkgU2hlbiAoaHR0cDovL3d3dy5naXRodWIuY29tL3Bpc3NhbmcpXG4gKi9cbi8vIFRPRE8gZ2V0VG90YWxMZW5ndGgsIGdldFBvaW50QXRMZW5ndGhcbnZhciBDTUQgPSB7XG4gIE06IDEsXG4gIEw6IDIsXG4gIEM6IDMsXG4gIFE6IDQsXG4gIEE6IDUsXG4gIFo6IDYsXG4gIC8vIFJlY3RcbiAgUjogN1xufTsgLy8gdmFyIENNRF9NRU1fU0laRSA9IHtcbi8vICAgICBNOiAzLFxuLy8gICAgIEw6IDMsXG4vLyAgICAgQzogNyxcbi8vICAgICBROiA1LFxuLy8gICAgIEE6IDksXG4vLyAgICAgUjogNSxcbi8vICAgICBaOiAxXG4vLyB9O1xuXG52YXIgbWluID0gW107XG52YXIgbWF4ID0gW107XG52YXIgbWluMiA9IFtdO1xudmFyIG1heDIgPSBbXTtcbnZhciBtYXRoTWluID0gTWF0aC5taW47XG52YXIgbWF0aE1heCA9IE1hdGgubWF4O1xudmFyIG1hdGhDb3MgPSBNYXRoLmNvcztcbnZhciBtYXRoU2luID0gTWF0aC5zaW47XG52YXIgbWF0aFNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgbWF0aEFicyA9IE1hdGguYWJzO1xudmFyIGhhc1R5cGVkQXJyYXkgPSB0eXBlb2YgRmxvYXQzMkFycmF5ICE9ICd1bmRlZmluZWQnO1xuLyoqXG4gKiBAYWxpYXMgbW9kdWxlOnpyZW5kZXIvY29yZS9QYXRoUHJveHlcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5cbnZhciBQYXRoUHJveHkgPSBmdW5jdGlvbiAobm90U2F2ZURhdGEpIHtcbiAgdGhpcy5fc2F2ZURhdGEgPSAhKG5vdFNhdmVEYXRhIHx8IGZhbHNlKTtcblxuICBpZiAodGhpcy5fc2F2ZURhdGEpIHtcbiAgICAvKipcbiAgICAgKiBQYXRoIGRhdGEuIFN0b3JlZCBhcyBmbGF0IGFycmF5XG4gICAgICogQHR5cGUge0FycmF5LjxPYmplY3Q+fVxuICAgICAqL1xuICAgIHRoaXMuZGF0YSA9IFtdO1xuICB9XG5cbiAgdGhpcy5fY3R4ID0gbnVsbDtcbn07XG4vKipcbiAqIOW/q+mAn+iuoeeul1BhdGjljIXlm7Tnm5LvvIjlubbkuI3mmK/mnIDlsI/ljIXlm7Tnm5LvvIlcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5cblBhdGhQcm94eS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQYXRoUHJveHksXG4gIF94aTogMCxcbiAgX3lpOiAwLFxuICBfeDA6IDAsXG4gIF95MDogMCxcbiAgLy8gVW5pdCB4LCBVbml0IHkuIFByb3ZpZGUgZm9yIGF2b2lkaW5nIGRyYXdpbmcgdGhhdCB0b28gc2hvcnQgbGluZSBzZWdtZW50XG4gIF91eDogMCxcbiAgX3V5OiAwLFxuICBfbGVuOiAwLFxuICBfbGluZURhc2g6IG51bGwsXG4gIF9kYXNoT2Zmc2V0OiAwLFxuICBfZGFzaElkeDogMCxcbiAgX2Rhc2hTdW06IDAsXG5cbiAgLyoqXG4gICAqIEByZWFkT25seVxuICAgKi9cbiAgc2V0U2NhbGU6IGZ1bmN0aW9uIChzeCwgc3kpIHtcbiAgICB0aGlzLl91eCA9IG1hdGhBYnMoMSAvIGRwciAvIHN4KSB8fCAwO1xuICAgIHRoaXMuX3V5ID0gbWF0aEFicygxIC8gZHByIC8gc3kpIHx8IDA7XG4gIH0sXG4gIGdldENvbnRleHQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY3R4O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0gIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eFxuICAgKiBAcmV0dXJuIHttb2R1bGU6enJlbmRlci9jb3JlL1BhdGhQcm94eX1cbiAgICovXG4gIGJlZ2luUGF0aDogZnVuY3Rpb24gKGN0eCkge1xuICAgIHRoaXMuX2N0eCA9IGN0eDtcbiAgICBjdHggJiYgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eCAmJiAodGhpcy5kcHIgPSBjdHguZHByKTsgLy8gUmVzZXRcblxuICAgIGlmICh0aGlzLl9zYXZlRGF0YSkge1xuICAgICAgdGhpcy5fbGVuID0gMDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGluZURhc2gpIHtcbiAgICAgIHRoaXMuX2xpbmVEYXNoID0gbnVsbDtcbiAgICAgIHRoaXMuX2Rhc2hPZmZzZXQgPSAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtICB7bnVtYmVyfSB5XG4gICAqIEByZXR1cm4ge21vZHVsZTp6cmVuZGVyL2NvcmUvUGF0aFByb3h5fVxuICAgKi9cbiAgbW92ZVRvOiBmdW5jdGlvbiAoeCwgeSkge1xuICAgIHRoaXMuYWRkRGF0YShDTUQuTSwgeCwgeSk7XG4gICAgdGhpcy5fY3R4ICYmIHRoaXMuX2N0eC5tb3ZlVG8oeCwgeSk7IC8vIHgwLCB5MCwgeGksIHlpIOaYr+iusOW9leWcqCBfZGFzaGVkWFhYWFRvIOaWueazleS4reS9v+eUqFxuICAgIC8vIHhpLCB5aSDorrDlvZXlvZPliY3ngrksIHgwLCB5MCDlnKggY2xvc2VQYXRoIOeahOaXtuWAmeWbnuWIsOi1t+Wni+eCueOAglxuICAgIC8vIOacieWPr+iDveWcqCBiZWdpblBhdGgg5LmL5ZCO55u05o6l6LCD55SoIGxpbmVUb++8jOi/meaXtuWAmSB4MCwgeTAg6ZyA6KaBXG4gICAgLy8g5ZyoIGxpbmVUbyDmlrnms5XkuK3orrDlvZXvvIzov5nph4zlhYjkuI3ogIPomZHov5nnp43mg4XlhrXvvIxkYXNoZWQgbGluZSDkuZ/lj6rlnKggSUUxMC0g5Lit5LiN5pSv5oyBXG5cbiAgICB0aGlzLl94MCA9IHg7XG4gICAgdGhpcy5feTAgPSB5O1xuICAgIHRoaXMuX3hpID0geDtcbiAgICB0aGlzLl95aSA9IHk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSAge251bWJlcn0geFxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IHlcbiAgICogQHJldHVybiB7bW9kdWxlOnpyZW5kZXIvY29yZS9QYXRoUHJveHl9XG4gICAqL1xuICBsaW5lVG86IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgdmFyIGV4Y2VlZFVuaXQgPSBtYXRoQWJzKHggLSB0aGlzLl94aSkgPiB0aGlzLl91eCB8fCBtYXRoQWJzKHkgLSB0aGlzLl95aSkgPiB0aGlzLl91eSAvLyBGb3JjZSBkcmF3IHRoZSBmaXJzdCBzZWdtZW50XG4gICAgfHwgdGhpcy5fbGVuIDwgNTtcbiAgICB0aGlzLmFkZERhdGEoQ01ELkwsIHgsIHkpO1xuXG4gICAgaWYgKHRoaXMuX2N0eCAmJiBleGNlZWRVbml0KSB7XG4gICAgICB0aGlzLl9uZWVkc0Rhc2goKSA/IHRoaXMuX2Rhc2hlZExpbmVUbyh4LCB5KSA6IHRoaXMuX2N0eC5saW5lVG8oeCwgeSk7XG4gICAgfVxuXG4gICAgaWYgKGV4Y2VlZFVuaXQpIHtcbiAgICAgIHRoaXMuX3hpID0geDtcbiAgICAgIHRoaXMuX3lpID0geTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtICB7bnVtYmVyfSB4MVxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IHkxXG4gICAqIEBwYXJhbSAge251bWJlcn0geDJcbiAgICogQHBhcmFtICB7bnVtYmVyfSB5MlxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IHgzXG4gICAqIEBwYXJhbSAge251bWJlcn0geTNcbiAgICogQHJldHVybiB7bW9kdWxlOnpyZW5kZXIvY29yZS9QYXRoUHJveHl9XG4gICAqL1xuICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbiAoeDEsIHkxLCB4MiwgeTIsIHgzLCB5Mykge1xuICAgIHRoaXMuYWRkRGF0YShDTUQuQywgeDEsIHkxLCB4MiwgeTIsIHgzLCB5Myk7XG5cbiAgICBpZiAodGhpcy5fY3R4KSB7XG4gICAgICB0aGlzLl9uZWVkc0Rhc2goKSA/IHRoaXMuX2Rhc2hlZEJlemllclRvKHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIDogdGhpcy5fY3R4LmJlemllckN1cnZlVG8oeDEsIHkxLCB4MiwgeTIsIHgzLCB5Myk7XG4gICAgfVxuXG4gICAgdGhpcy5feGkgPSB4MztcbiAgICB0aGlzLl95aSA9IHkzO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IHgxXG4gICAqIEBwYXJhbSAge251bWJlcn0geTFcbiAgICogQHBhcmFtICB7bnVtYmVyfSB4MlxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IHkyXG4gICAqIEByZXR1cm4ge21vZHVsZTp6cmVuZGVyL2NvcmUvUGF0aFByb3h5fVxuICAgKi9cbiAgcXVhZHJhdGljQ3VydmVUbzogZnVuY3Rpb24gKHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgdGhpcy5hZGREYXRhKENNRC5RLCB4MSwgeTEsIHgyLCB5Mik7XG5cbiAgICBpZiAodGhpcy5fY3R4KSB7XG4gICAgICB0aGlzLl9uZWVkc0Rhc2goKSA/IHRoaXMuX2Rhc2hlZFF1YWRyYXRpY1RvKHgxLCB5MSwgeDIsIHkyKSA6IHRoaXMuX2N0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgxLCB5MSwgeDIsIHkyKTtcbiAgICB9XG5cbiAgICB0aGlzLl94aSA9IHgyO1xuICAgIHRoaXMuX3lpID0geTI7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSAge251bWJlcn0gY3hcbiAgICogQHBhcmFtICB7bnVtYmVyfSBjeVxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IHJcbiAgICogQHBhcmFtICB7bnVtYmVyfSBzdGFydEFuZ2xlXG4gICAqIEBwYXJhbSAge251bWJlcn0gZW5kQW5nbGVcbiAgICogQHBhcmFtICB7Ym9vbGVhbn0gYW50aWNsb2Nrd2lzZVxuICAgKiBAcmV0dXJuIHttb2R1bGU6enJlbmRlci9jb3JlL1BhdGhQcm94eX1cbiAgICovXG4gIGFyYzogZnVuY3Rpb24gKGN4LCBjeSwgciwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGFudGljbG9ja3dpc2UpIHtcbiAgICB0aGlzLmFkZERhdGEoQ01ELkEsIGN4LCBjeSwgciwgciwgc3RhcnRBbmdsZSwgZW5kQW5nbGUgLSBzdGFydEFuZ2xlLCAwLCBhbnRpY2xvY2t3aXNlID8gMCA6IDEpO1xuICAgIHRoaXMuX2N0eCAmJiB0aGlzLl9jdHguYXJjKGN4LCBjeSwgciwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGFudGljbG9ja3dpc2UpO1xuICAgIHRoaXMuX3hpID0gbWF0aENvcyhlbmRBbmdsZSkgKiByICsgY3g7XG4gICAgdGhpcy5feWkgPSBtYXRoU2luKGVuZEFuZ2xlKSAqIHIgKyBjeDtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgLy8gVE9ET1xuICBhcmNUbzogZnVuY3Rpb24gKHgxLCB5MSwgeDIsIHkyLCByYWRpdXMpIHtcbiAgICBpZiAodGhpcy5fY3R4KSB7XG4gICAgICB0aGlzLl9jdHguYXJjVG8oeDEsIHkxLCB4MiwgeTIsIHJhZGl1cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIC8vIFRPRE9cbiAgcmVjdDogZnVuY3Rpb24gKHgsIHksIHcsIGgpIHtcbiAgICB0aGlzLl9jdHggJiYgdGhpcy5fY3R4LnJlY3QoeCwgeSwgdywgaCk7XG4gICAgdGhpcy5hZGREYXRhKENNRC5SLCB4LCB5LCB3LCBoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7bW9kdWxlOnpyZW5kZXIvY29yZS9QYXRoUHJveHl9XG4gICAqL1xuICBjbG9zZVBhdGg6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmFkZERhdGEoQ01ELlopO1xuICAgIHZhciBjdHggPSB0aGlzLl9jdHg7XG4gICAgdmFyIHgwID0gdGhpcy5feDA7XG4gICAgdmFyIHkwID0gdGhpcy5feTA7XG5cbiAgICBpZiAoY3R4KSB7XG4gICAgICB0aGlzLl9uZWVkc0Rhc2goKSAmJiB0aGlzLl9kYXNoZWRMaW5lVG8oeDAsIHkwKTtcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICB9XG5cbiAgICB0aGlzLl94aSA9IHgwO1xuICAgIHRoaXMuX3lpID0geTA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbnRleHQg5LuO5aSW6YOo5Lyg5YWl77yM5Zug5Li65pyJ5Y+v6IO95pivIHJlYnVpbGRQYXRoIOWujOS5i+WQjuWGjSBmaWxs44CCXG4gICAqIHN0cm9rZSDlkIzmoLdcbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eFxuICAgKiBAcmV0dXJuIHttb2R1bGU6enJlbmRlci9jb3JlL1BhdGhQcm94eX1cbiAgICovXG4gIGZpbGw6IGZ1bmN0aW9uIChjdHgpIHtcbiAgICBjdHggJiYgY3R4LmZpbGwoKTtcbiAgICB0aGlzLnRvU3RhdGljKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHhcbiAgICogQHJldHVybiB7bW9kdWxlOnpyZW5kZXIvY29yZS9QYXRoUHJveHl9XG4gICAqL1xuICBzdHJva2U6IGZ1bmN0aW9uIChjdHgpIHtcbiAgICBjdHggJiYgY3R4LnN0cm9rZSgpO1xuICAgIHRoaXMudG9TdGF0aWMoKTtcbiAgfSxcblxuICAvKipcbiAgICog5b+F6aG75Zyo5YW25a6D57uY5Yi25ZG95Luk5YmN6LCD55SoXG4gICAqIE11c3QgYmUgaW52b2tlZCBiZWZvcmUgYWxsIG90aGVyIHBhdGggZHJhd2luZyBtZXRob2RzXG4gICAqIEByZXR1cm4ge21vZHVsZTp6cmVuZGVyL2NvcmUvUGF0aFByb3h5fVxuICAgKi9cbiAgc2V0TGluZURhc2g6IGZ1bmN0aW9uIChsaW5lRGFzaCkge1xuICAgIGlmIChsaW5lRGFzaCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICB0aGlzLl9saW5lRGFzaCA9IGxpbmVEYXNoO1xuICAgICAgdGhpcy5fZGFzaElkeCA9IDA7XG4gICAgICB2YXIgbGluZURhc2hTdW0gPSAwO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVEYXNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxpbmVEYXNoU3VtICs9IGxpbmVEYXNoW2ldO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9kYXNoU3VtID0gbGluZURhc2hTdW07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOW/hemhu+WcqOWFtuWug+e7mOWItuWRveS7pOWJjeiwg+eUqFxuICAgKiBNdXN0IGJlIGludm9rZWQgYmVmb3JlIGFsbCBvdGhlciBwYXRoIGRyYXdpbmcgbWV0aG9kc1xuICAgKiBAcmV0dXJuIHttb2R1bGU6enJlbmRlci9jb3JlL1BhdGhQcm94eX1cbiAgICovXG4gIHNldExpbmVEYXNoT2Zmc2V0OiBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgdGhpcy5fZGFzaE9mZnNldCA9IG9mZnNldDtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGxlbjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9sZW47XG4gIH0sXG5cbiAgLyoqXG4gICAqIOebtOaOpeiuvue9riBQYXRoIOaVsOaNrlxuICAgKi9cbiAgc2V0RGF0YTogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgbGVuID0gZGF0YS5sZW5ndGg7XG5cbiAgICBpZiAoISh0aGlzLmRhdGEgJiYgdGhpcy5kYXRhLmxlbmd0aCA9PSBsZW4pICYmIGhhc1R5cGVkQXJyYXkpIHtcbiAgICAgIHRoaXMuZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkobGVuKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB0aGlzLmRhdGFbaV0gPSBkYXRhW2ldO1xuICAgIH1cblxuICAgIHRoaXMuX2xlbiA9IGxlbjtcbiAgfSxcblxuICAvKipcbiAgICog5re75Yqg5a2Q6Lev5b6EXG4gICAqIEBwYXJhbSB7bW9kdWxlOnpyZW5kZXIvY29yZS9QYXRoUHJveHl8QXJyYXkuPG1vZHVsZTp6cmVuZGVyL2NvcmUvUGF0aFByb3h5Pn0gcGF0aFxuICAgKi9cbiAgYXBwZW5kUGF0aDogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICBpZiAoIShwYXRoIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICBwYXRoID0gW3BhdGhdO1xuICAgIH1cblxuICAgIHZhciBsZW4gPSBwYXRoLmxlbmd0aDtcbiAgICB2YXIgYXBwZW5kU2l6ZSA9IDA7XG4gICAgdmFyIG9mZnNldCA9IHRoaXMuX2xlbjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFwcGVuZFNpemUgKz0gcGF0aFtpXS5sZW4oKTtcbiAgICB9XG5cbiAgICBpZiAoaGFzVHlwZWRBcnJheSAmJiB0aGlzLmRhdGEgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkpIHtcbiAgICAgIHRoaXMuZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkob2Zmc2V0ICsgYXBwZW5kU2l6ZSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGFwcGVuZFBhdGhEYXRhID0gcGF0aFtpXS5kYXRhO1xuXG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGFwcGVuZFBhdGhEYXRhLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHRoaXMuZGF0YVtvZmZzZXQrK10gPSBhcHBlbmRQYXRoRGF0YVtrXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9sZW4gPSBvZmZzZXQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOWhq+WFhSBQYXRoIOaVsOaNruOAglxuICAgKiDlsL3ph4/lpI3nlKjogIzkuI3nlLPmmI7mlrDnmoTmlbDnu4TjgILlpKfpg6jliIblm77lvaLph43nu5jnmoTmjIfku6TmlbDmja7plb/luqbpg73mmK/kuI3lj5jnmoTjgIJcbiAgICovXG4gIGFkZERhdGE6IGZ1bmN0aW9uIChjbWQpIHtcbiAgICBpZiAoIXRoaXMuX3NhdmVEYXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7XG5cbiAgICBpZiAodGhpcy5fbGVuICsgYXJndW1lbnRzLmxlbmd0aCA+IGRhdGEubGVuZ3RoKSB7XG4gICAgICAvLyDlm6DkuLrkuYvliY3nmoTmlbDnu4Tlt7Lnu4/ovazmjaLmiJDpnZnmgIHnmoQgRmxvYXQzMkFycmF5XG4gICAgICAvLyDmiYDku6XkuI3lpJ/nlKjml7bpnIDopoHmianlsZXkuIDkuKrmlrDnmoTliqjmgIHmlbDnu4RcbiAgICAgIHRoaXMuX2V4cGFuZERhdGEoKTtcblxuICAgICAgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgZGF0YVt0aGlzLl9sZW4rK10gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgdGhpcy5fcHJldkNtZCA9IGNtZDtcbiAgfSxcbiAgX2V4cGFuZERhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBPbmx5IGlmIGRhdGEgaXMgRmxvYXQzMkFycmF5XG4gICAgaWYgKCEodGhpcy5kYXRhIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICB2YXIgbmV3RGF0YSA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2xlbjsgaSsrKSB7XG4gICAgICAgIG5ld0RhdGFbaV0gPSB0aGlzLmRhdGFbaV07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZGF0YSA9IG5ld0RhdGE7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBJZiBuZWVkcyBqcyBpbXBsZW1lbnRlZCBkYXNoZWQgbGluZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX25lZWRzRGFzaDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9saW5lRGFzaDtcbiAgfSxcbiAgX2Rhc2hlZExpbmVUbzogZnVuY3Rpb24gKHgxLCB5MSkge1xuICAgIHZhciBkYXNoU3VtID0gdGhpcy5fZGFzaFN1bTtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fZGFzaE9mZnNldDtcbiAgICB2YXIgbGluZURhc2ggPSB0aGlzLl9saW5lRGFzaDtcbiAgICB2YXIgY3R4ID0gdGhpcy5fY3R4O1xuICAgIHZhciB4MCA9IHRoaXMuX3hpO1xuICAgIHZhciB5MCA9IHRoaXMuX3lpO1xuICAgIHZhciBkeCA9IHgxIC0geDA7XG4gICAgdmFyIGR5ID0geTEgLSB5MDtcbiAgICB2YXIgZGlzdCA9IG1hdGhTcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICB2YXIgeCA9IHgwO1xuICAgIHZhciB5ID0geTA7XG4gICAgdmFyIGRhc2g7XG4gICAgdmFyIG5EYXNoID0gbGluZURhc2gubGVuZ3RoO1xuICAgIHZhciBpZHg7XG4gICAgZHggLz0gZGlzdDtcbiAgICBkeSAvPSBkaXN0O1xuXG4gICAgaWYgKG9mZnNldCA8IDApIHtcbiAgICAgIC8vIENvbnZlcnQgdG8gcG9zaXRpdmUgb2Zmc2V0XG4gICAgICBvZmZzZXQgPSBkYXNoU3VtICsgb2Zmc2V0O1xuICAgIH1cblxuICAgIG9mZnNldCAlPSBkYXNoU3VtO1xuICAgIHggLT0gb2Zmc2V0ICogZHg7XG4gICAgeSAtPSBvZmZzZXQgKiBkeTtcblxuICAgIHdoaWxlIChkeCA+IDAgJiYgeCA8PSB4MSB8fCBkeCA8IDAgJiYgeCA+PSB4MSB8fCBkeCA9PSAwICYmIChkeSA+IDAgJiYgeSA8PSB5MSB8fCBkeSA8IDAgJiYgeSA+PSB5MSkpIHtcbiAgICAgIGlkeCA9IHRoaXMuX2Rhc2hJZHg7XG4gICAgICBkYXNoID0gbGluZURhc2hbaWR4XTtcbiAgICAgIHggKz0gZHggKiBkYXNoO1xuICAgICAgeSArPSBkeSAqIGRhc2g7XG4gICAgICB0aGlzLl9kYXNoSWR4ID0gKGlkeCArIDEpICUgbkRhc2g7IC8vIFNraXAgcG9zaXRpdmUgb2Zmc2V0XG5cbiAgICAgIGlmIChkeCA+IDAgJiYgeCA8IHgwIHx8IGR4IDwgMCAmJiB4ID4geDAgfHwgZHkgPiAwICYmIHkgPCB5MCB8fCBkeSA8IDAgJiYgeSA+IHkwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjdHhbaWR4ICUgMiA/ICdtb3ZlVG8nIDogJ2xpbmVUbyddKGR4ID49IDAgPyBtYXRoTWluKHgsIHgxKSA6IG1hdGhNYXgoeCwgeDEpLCBkeSA+PSAwID8gbWF0aE1pbih5LCB5MSkgOiBtYXRoTWF4KHksIHkxKSk7XG4gICAgfSAvLyBPZmZzZXQgZm9yIG5leHQgbGluZVRvXG5cblxuICAgIGR4ID0geCAtIHgxO1xuICAgIGR5ID0geSAtIHkxO1xuICAgIHRoaXMuX2Rhc2hPZmZzZXQgPSAtbWF0aFNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuICB9LFxuICAvLyBOb3QgYWNjdXJhdGUgZGFzaGVkIGxpbmUgdG9cbiAgX2Rhc2hlZEJlemllclRvOiBmdW5jdGlvbiAoeDEsIHkxLCB4MiwgeTIsIHgzLCB5Mykge1xuICAgIHZhciBkYXNoU3VtID0gdGhpcy5fZGFzaFN1bTtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fZGFzaE9mZnNldDtcbiAgICB2YXIgbGluZURhc2ggPSB0aGlzLl9saW5lRGFzaDtcbiAgICB2YXIgY3R4ID0gdGhpcy5fY3R4O1xuICAgIHZhciB4MCA9IHRoaXMuX3hpO1xuICAgIHZhciB5MCA9IHRoaXMuX3lpO1xuICAgIHZhciB0O1xuICAgIHZhciBkeDtcbiAgICB2YXIgZHk7XG4gICAgdmFyIGN1YmljQXQgPSBjdXJ2ZS5jdWJpY0F0O1xuICAgIHZhciBiZXppZXJMZW4gPSAwO1xuICAgIHZhciBpZHggPSB0aGlzLl9kYXNoSWR4O1xuICAgIHZhciBuRGFzaCA9IGxpbmVEYXNoLmxlbmd0aDtcbiAgICB2YXIgeDtcbiAgICB2YXIgeTtcbiAgICB2YXIgdG1wTGVuID0gMDtcblxuICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICAvLyBDb252ZXJ0IHRvIHBvc2l0aXZlIG9mZnNldFxuICAgICAgb2Zmc2V0ID0gZGFzaFN1bSArIG9mZnNldDtcbiAgICB9XG5cbiAgICBvZmZzZXQgJT0gZGFzaFN1bTsgLy8gQmV6aWVyIGFwcHJveCBsZW5ndGhcblxuICAgIGZvciAodCA9IDA7IHQgPCAxOyB0ICs9IDAuMSkge1xuICAgICAgZHggPSBjdWJpY0F0KHgwLCB4MSwgeDIsIHgzLCB0ICsgMC4xKSAtIGN1YmljQXQoeDAsIHgxLCB4MiwgeDMsIHQpO1xuICAgICAgZHkgPSBjdWJpY0F0KHkwLCB5MSwgeTIsIHkzLCB0ICsgMC4xKSAtIGN1YmljQXQoeTAsIHkxLCB5MiwgeTMsIHQpO1xuICAgICAgYmV6aWVyTGVuICs9IG1hdGhTcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICB9IC8vIEZpbmQgaWR4IGFmdGVyIGFkZCBvZmZzZXRcblxuXG4gICAgZm9yICg7IGlkeCA8IG5EYXNoOyBpZHgrKykge1xuICAgICAgdG1wTGVuICs9IGxpbmVEYXNoW2lkeF07XG5cbiAgICAgIGlmICh0bXBMZW4gPiBvZmZzZXQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdCA9ICh0bXBMZW4gLSBvZmZzZXQpIC8gYmV6aWVyTGVuO1xuXG4gICAgd2hpbGUgKHQgPD0gMSkge1xuICAgICAgeCA9IGN1YmljQXQoeDAsIHgxLCB4MiwgeDMsIHQpO1xuICAgICAgeSA9IGN1YmljQXQoeTAsIHkxLCB5MiwgeTMsIHQpOyAvLyBVc2UgbGluZSB0byBhcHByb3hpbWF0ZSBkYXNoZWQgYmV6aWVyXG4gICAgICAvLyBCYWQgcmVzdWx0IGlmIGRhc2ggaXMgbG9uZ1xuXG4gICAgICBpZHggJSAyID8gY3R4Lm1vdmVUbyh4LCB5KSA6IGN0eC5saW5lVG8oeCwgeSk7XG4gICAgICB0ICs9IGxpbmVEYXNoW2lkeF0gLyBiZXppZXJMZW47XG4gICAgICBpZHggPSAoaWR4ICsgMSkgJSBuRGFzaDtcbiAgICB9IC8vIEZpbmlzaCB0aGUgbGFzdCBzZWdtZW50IGFuZCBjYWxjdWxhdGUgdGhlIG5ldyBvZmZzZXRcblxuXG4gICAgaWR4ICUgMiAhPT0gMCAmJiBjdHgubGluZVRvKHgzLCB5Myk7XG4gICAgZHggPSB4MyAtIHg7XG4gICAgZHkgPSB5MyAtIHk7XG4gICAgdGhpcy5fZGFzaE9mZnNldCA9IC1tYXRoU3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gIH0sXG4gIF9kYXNoZWRRdWFkcmF0aWNUbzogZnVuY3Rpb24gKHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgLy8gQ29udmVydCBxdWFkcmF0aWMgdG8gY3ViaWMgdXNpbmcgZGVncmVlIGVsZXZhdGlvblxuICAgIHZhciB4MyA9IHgyO1xuICAgIHZhciB5MyA9IHkyO1xuICAgIHgyID0gKHgyICsgMiAqIHgxKSAvIDM7XG4gICAgeTIgPSAoeTIgKyAyICogeTEpIC8gMztcbiAgICB4MSA9ICh0aGlzLl94aSArIDIgKiB4MSkgLyAzO1xuICAgIHkxID0gKHRoaXMuX3lpICsgMiAqIHkxKSAvIDM7XG5cbiAgICB0aGlzLl9kYXNoZWRCZXppZXJUbyh4MSwgeTEsIHgyLCB5MiwgeDMsIHkzKTtcbiAgfSxcblxuICAvKipcbiAgICog6L2s5oiQ6Z2Z5oCB55qEIEZsb2F0MzJBcnJheSDlh4/lsJHloIblhoXlrZjljaDnlKhcbiAgICogQ29udmVydCBkeW5hbWljIGFycmF5IHRvIHN0YXRpYyBGbG9hdDMyQXJyYXlcbiAgICovXG4gIHRvU3RhdGljOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7XG5cbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBkYXRhLmxlbmd0aCA9IHRoaXMuX2xlbjtcblxuICAgICAgaWYgKGhhc1R5cGVkQXJyYXkpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gbmV3IEZsb2F0MzJBcnJheShkYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge21vZHVsZTp6cmVuZGVyL2NvcmUvQm91bmRpbmdSZWN0fVxuICAgKi9cbiAgZ2V0Qm91bmRpbmdSZWN0OiBmdW5jdGlvbiAoKSB7XG4gICAgbWluWzBdID0gbWluWzFdID0gbWluMlswXSA9IG1pbjJbMV0gPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgIG1heFswXSA9IG1heFsxXSA9IG1heDJbMF0gPSBtYXgyWzFdID0gLU51bWJlci5NQVhfVkFMVUU7XG4gICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgdmFyIHhpID0gMDtcbiAgICB2YXIgeWkgPSAwO1xuICAgIHZhciB4MCA9IDA7XG4gICAgdmFyIHkwID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7KSB7XG4gICAgICB2YXIgY21kID0gZGF0YVtpKytdO1xuXG4gICAgICBpZiAoaSA9PSAxKSB7XG4gICAgICAgIC8vIOWmguaenOesrOS4gOS4quWRveS7pOaYryBMLCBDLCBRXG4gICAgICAgIC8vIOWImSBwcmV2aW91cyBwb2ludCDlkIznu5jliLblkb3ku6TnmoTnrKzkuIDkuKogcG9pbnRcbiAgICAgICAgLy9cbiAgICAgICAgLy8g56ys5LiA5Liq5ZG95Luk5Li6IEFyYyDnmoTmg4XlhrXkuIvkvJrlnKjlkI7pnaLnibnmrorlpITnkIZcbiAgICAgICAgeGkgPSBkYXRhW2ldO1xuICAgICAgICB5aSA9IGRhdGFbaSArIDFdO1xuICAgICAgICB4MCA9IHhpO1xuICAgICAgICB5MCA9IHlpO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGNtZCkge1xuICAgICAgICBjYXNlIENNRC5NOlxuICAgICAgICAgIC8vIG1vdmVUbyDlkb3ku6Tph43mlrDliJvlu7rkuIDkuKrmlrDnmoQgc3VicGF0aCwg5bm25LiU5pu05paw5paw55qE6LW354K5XG4gICAgICAgICAgLy8g5ZyoIGNsb3NlUGF0aCDnmoTml7blgJnkvb/nlKhcbiAgICAgICAgICB4MCA9IGRhdGFbaSsrXTtcbiAgICAgICAgICB5MCA9IGRhdGFbaSsrXTtcbiAgICAgICAgICB4aSA9IHgwO1xuICAgICAgICAgIHlpID0geTA7XG4gICAgICAgICAgbWluMlswXSA9IHgwO1xuICAgICAgICAgIG1pbjJbMV0gPSB5MDtcbiAgICAgICAgICBtYXgyWzBdID0geDA7XG4gICAgICAgICAgbWF4MlsxXSA9IHkwO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ01ELkw6XG4gICAgICAgICAgYmJveC5mcm9tTGluZSh4aSwgeWksIGRhdGFbaV0sIGRhdGFbaSArIDFdLCBtaW4yLCBtYXgyKTtcbiAgICAgICAgICB4aSA9IGRhdGFbaSsrXTtcbiAgICAgICAgICB5aSA9IGRhdGFbaSsrXTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIENNRC5DOlxuICAgICAgICAgIGJib3guZnJvbUN1YmljKHhpLCB5aSwgZGF0YVtpKytdLCBkYXRhW2krK10sIGRhdGFbaSsrXSwgZGF0YVtpKytdLCBkYXRhW2ldLCBkYXRhW2kgKyAxXSwgbWluMiwgbWF4Mik7XG4gICAgICAgICAgeGkgPSBkYXRhW2krK107XG4gICAgICAgICAgeWkgPSBkYXRhW2krK107XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDTUQuUTpcbiAgICAgICAgICBiYm94LmZyb21RdWFkcmF0aWMoeGksIHlpLCBkYXRhW2krK10sIGRhdGFbaSsrXSwgZGF0YVtpXSwgZGF0YVtpICsgMV0sIG1pbjIsIG1heDIpO1xuICAgICAgICAgIHhpID0gZGF0YVtpKytdO1xuICAgICAgICAgIHlpID0gZGF0YVtpKytdO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ01ELkE6XG4gICAgICAgICAgLy8gVE9ETyBBcmMg5Yik5pat55qE5byA6ZSA5q+U6L6D5aSnXG4gICAgICAgICAgdmFyIGN4ID0gZGF0YVtpKytdO1xuICAgICAgICAgIHZhciBjeSA9IGRhdGFbaSsrXTtcbiAgICAgICAgICB2YXIgcnggPSBkYXRhW2krK107XG4gICAgICAgICAgdmFyIHJ5ID0gZGF0YVtpKytdO1xuICAgICAgICAgIHZhciBzdGFydEFuZ2xlID0gZGF0YVtpKytdO1xuICAgICAgICAgIHZhciBlbmRBbmdsZSA9IGRhdGFbaSsrXSArIHN0YXJ0QW5nbGU7IC8vIFRPRE8gQXJjIOaXi+i9rFxuXG4gICAgICAgICAgdmFyIHBzaSA9IGRhdGFbaSsrXTtcbiAgICAgICAgICB2YXIgYW50aWNsb2Nrd2lzZSA9IDEgLSBkYXRhW2krK107XG5cbiAgICAgICAgICBpZiAoaSA9PSAxKSB7XG4gICAgICAgICAgICAvLyDnm7TmjqXkvb/nlKggYXJjIOWRveS7pFxuICAgICAgICAgICAgLy8g56ys5LiA5Liq5ZG95Luk6LW354K56L+Y5pyq5a6a5LmJXG4gICAgICAgICAgICB4MCA9IG1hdGhDb3Moc3RhcnRBbmdsZSkgKiByeCArIGN4O1xuICAgICAgICAgICAgeTAgPSBtYXRoU2luKHN0YXJ0QW5nbGUpICogcnkgKyBjeTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBiYm94LmZyb21BcmMoY3gsIGN5LCByeCwgcnksIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBhbnRpY2xvY2t3aXNlLCBtaW4yLCBtYXgyKTtcbiAgICAgICAgICB4aSA9IG1hdGhDb3MoZW5kQW5nbGUpICogcnggKyBjeDtcbiAgICAgICAgICB5aSA9IG1hdGhTaW4oZW5kQW5nbGUpICogcnkgKyBjeTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIENNRC5SOlxuICAgICAgICAgIHgwID0geGkgPSBkYXRhW2krK107XG4gICAgICAgICAgeTAgPSB5aSA9IGRhdGFbaSsrXTtcbiAgICAgICAgICB2YXIgd2lkdGggPSBkYXRhW2krK107XG4gICAgICAgICAgdmFyIGhlaWdodCA9IGRhdGFbaSsrXTsgLy8gVXNlIGZyb21MaW5lXG5cbiAgICAgICAgICBiYm94LmZyb21MaW5lKHgwLCB5MCwgeDAgKyB3aWR0aCwgeTAgKyBoZWlnaHQsIG1pbjIsIG1heDIpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ01ELlo6XG4gICAgICAgICAgeGkgPSB4MDtcbiAgICAgICAgICB5aSA9IHkwO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfSAvLyBVbmlvblxuXG5cbiAgICAgIHZlYzIubWluKG1pbiwgbWluLCBtaW4yKTtcbiAgICAgIHZlYzIubWF4KG1heCwgbWF4LCBtYXgyKTtcbiAgICB9IC8vIE5vIGRhdGFcblxuXG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIG1pblswXSA9IG1pblsxXSA9IG1heFswXSA9IG1heFsxXSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBCb3VuZGluZ1JlY3QobWluWzBdLCBtaW5bMV0sIG1heFswXSAtIG1pblswXSwgbWF4WzFdIC0gbWluWzFdKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVidWlsZCBwYXRoIGZyb20gY3VycmVudCBkYXRhXG4gICAqIFJlYnVpbGQgcGF0aCB3aWxsIG5vdCBjb25zaWRlciBqYXZhc2NyaXB0IGltcGxlbWVudGVkIGxpbmUgZGFzaC5cbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eFxuICAgKi9cbiAgcmVidWlsZFBhdGg6IGZ1bmN0aW9uIChjdHgpIHtcbiAgICB2YXIgZCA9IHRoaXMuZGF0YTtcbiAgICB2YXIgeDAsIHkwO1xuICAgIHZhciB4aSwgeWk7XG4gICAgdmFyIHgsIHk7XG4gICAgdmFyIHV4ID0gdGhpcy5fdXg7XG4gICAgdmFyIHV5ID0gdGhpcy5fdXk7XG4gICAgdmFyIGxlbiA9IHRoaXMuX2xlbjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOykge1xuICAgICAgdmFyIGNtZCA9IGRbaSsrXTtcblxuICAgICAgaWYgKGkgPT0gMSkge1xuICAgICAgICAvLyDlpoLmnpznrKzkuIDkuKrlkb3ku6TmmK8gTCwgQywgUVxuICAgICAgICAvLyDliJkgcHJldmlvdXMgcG9pbnQg5ZCM57uY5Yi25ZG95Luk55qE56ys5LiA5LiqIHBvaW50XG4gICAgICAgIC8vXG4gICAgICAgIC8vIOesrOS4gOS4quWRveS7pOS4uiBBcmMg55qE5oOF5Ya15LiL5Lya5Zyo5ZCO6Z2i54m55q6K5aSE55CGXG4gICAgICAgIHhpID0gZFtpXTtcbiAgICAgICAgeWkgPSBkW2kgKyAxXTtcbiAgICAgICAgeDAgPSB4aTtcbiAgICAgICAgeTAgPSB5aTtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChjbWQpIHtcbiAgICAgICAgY2FzZSBDTUQuTTpcbiAgICAgICAgICB4MCA9IHhpID0gZFtpKytdO1xuICAgICAgICAgIHkwID0geWkgPSBkW2krK107XG4gICAgICAgICAgY3R4Lm1vdmVUbyh4aSwgeWkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ01ELkw6XG4gICAgICAgICAgeCA9IGRbaSsrXTtcbiAgICAgICAgICB5ID0gZFtpKytdOyAvLyBOb3QgZHJhdyB0b28gc21hbGwgc2VnIGJldHdlZW5cblxuICAgICAgICAgIGlmIChtYXRoQWJzKHggLSB4aSkgPiB1eCB8fCBtYXRoQWJzKHkgLSB5aSkgPiB1eSB8fCBpID09PSBsZW4gLSAxKSB7XG4gICAgICAgICAgICBjdHgubGluZVRvKHgsIHkpO1xuICAgICAgICAgICAgeGkgPSB4O1xuICAgICAgICAgICAgeWkgPSB5O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ01ELkM6XG4gICAgICAgICAgY3R4LmJlemllckN1cnZlVG8oZFtpKytdLCBkW2krK10sIGRbaSsrXSwgZFtpKytdLCBkW2krK10sIGRbaSsrXSk7XG4gICAgICAgICAgeGkgPSBkW2kgLSAyXTtcbiAgICAgICAgICB5aSA9IGRbaSAtIDFdO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ01ELlE6XG4gICAgICAgICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oZFtpKytdLCBkW2krK10sIGRbaSsrXSwgZFtpKytdKTtcbiAgICAgICAgICB4aSA9IGRbaSAtIDJdO1xuICAgICAgICAgIHlpID0gZFtpIC0gMV07XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDTUQuQTpcbiAgICAgICAgICB2YXIgY3ggPSBkW2krK107XG4gICAgICAgICAgdmFyIGN5ID0gZFtpKytdO1xuICAgICAgICAgIHZhciByeCA9IGRbaSsrXTtcbiAgICAgICAgICB2YXIgcnkgPSBkW2krK107XG4gICAgICAgICAgdmFyIHRoZXRhID0gZFtpKytdO1xuICAgICAgICAgIHZhciBkVGhldGEgPSBkW2krK107XG4gICAgICAgICAgdmFyIHBzaSA9IGRbaSsrXTtcbiAgICAgICAgICB2YXIgZnMgPSBkW2krK107XG4gICAgICAgICAgdmFyIHIgPSByeCA+IHJ5ID8gcnggOiByeTtcbiAgICAgICAgICB2YXIgc2NhbGVYID0gcnggPiByeSA/IDEgOiByeCAvIHJ5O1xuICAgICAgICAgIHZhciBzY2FsZVkgPSByeCA+IHJ5ID8gcnkgLyByeCA6IDE7XG4gICAgICAgICAgdmFyIGlzRWxsaXBzZSA9IE1hdGguYWJzKHJ4IC0gcnkpID4gMWUtMztcbiAgICAgICAgICB2YXIgZW5kQW5nbGUgPSB0aGV0YSArIGRUaGV0YTtcblxuICAgICAgICAgIGlmIChpc0VsbGlwc2UpIHtcbiAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoY3gsIGN5KTtcbiAgICAgICAgICAgIGN0eC5yb3RhdGUocHNpKTtcbiAgICAgICAgICAgIGN0eC5zY2FsZShzY2FsZVgsIHNjYWxlWSk7XG4gICAgICAgICAgICBjdHguYXJjKDAsIDAsIHIsIHRoZXRhLCBlbmRBbmdsZSwgMSAtIGZzKTtcbiAgICAgICAgICAgIGN0eC5zY2FsZSgxIC8gc2NhbGVYLCAxIC8gc2NhbGVZKTtcbiAgICAgICAgICAgIGN0eC5yb3RhdGUoLXBzaSk7XG4gICAgICAgICAgICBjdHgudHJhbnNsYXRlKC1jeCwgLWN5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4LmFyYyhjeCwgY3ksIHIsIHRoZXRhLCBlbmRBbmdsZSwgMSAtIGZzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaSA9PSAxKSB7XG4gICAgICAgICAgICAvLyDnm7TmjqXkvb/nlKggYXJjIOWRveS7pFxuICAgICAgICAgICAgLy8g56ys5LiA5Liq5ZG95Luk6LW354K56L+Y5pyq5a6a5LmJXG4gICAgICAgICAgICB4MCA9IG1hdGhDb3ModGhldGEpICogcnggKyBjeDtcbiAgICAgICAgICAgIHkwID0gbWF0aFNpbih0aGV0YSkgKiByeSArIGN5O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHhpID0gbWF0aENvcyhlbmRBbmdsZSkgKiByeCArIGN4O1xuICAgICAgICAgIHlpID0gbWF0aFNpbihlbmRBbmdsZSkgKiByeSArIGN5O1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ01ELlI6XG4gICAgICAgICAgeDAgPSB4aSA9IGRbaV07XG4gICAgICAgICAgeTAgPSB5aSA9IGRbaSArIDFdO1xuICAgICAgICAgIGN0eC5yZWN0KGRbaSsrXSwgZFtpKytdLCBkW2krK10sIGRbaSsrXSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDTUQuWjpcbiAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgeGkgPSB4MDtcbiAgICAgICAgICB5aSA9IHkwO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblBhdGhQcm94eS5DTUQgPSBDTUQ7XG52YXIgX2RlZmF1bHQgPSBQYXRoUHJveHk7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciB2ZWMyID0gcmVxdWlyZShcIi4vdmVjdG9yXCIpO1xuXG52YXIgY3VydmUgPSByZXF1aXJlKFwiLi9jdXJ2ZVwiKTtcblxuLyoqXG4gKiBAYXV0aG9yIFlpIFNoZW4oaHR0cHM6Ly9naXRodWIuY29tL3Bpc3NhbmcpXG4gKi9cbnZhciBtYXRoTWluID0gTWF0aC5taW47XG52YXIgbWF0aE1heCA9IE1hdGgubWF4O1xudmFyIG1hdGhTaW4gPSBNYXRoLnNpbjtcbnZhciBtYXRoQ29zID0gTWF0aC5jb3M7XG52YXIgUEkyID0gTWF0aC5QSSAqIDI7XG52YXIgc3RhcnQgPSB2ZWMyLmNyZWF0ZSgpO1xudmFyIGVuZCA9IHZlYzIuY3JlYXRlKCk7XG52YXIgZXh0cmVtaXR5ID0gdmVjMi5jcmVhdGUoKTtcbi8qKlxuICog5LuO6aG254K55pWw57uE5Lit6K6h566X5Ye65pyA5bCP5YyF5Zu055uS77yM5YaZ5YWlYG1pbmDlkoxgbWF4YOS4rVxuICogQG1vZHVsZSB6cmVuZGVyL2NvcmUvYmJveFxuICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBwb2ludHMg6aG254K55pWw57uEXG4gKiBAcGFyYW0ge251bWJlcn0gbWluXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4XG4gKi9cblxuZnVuY3Rpb24gZnJvbVBvaW50cyhwb2ludHMsIG1pbiwgbWF4KSB7XG4gIGlmIChwb2ludHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHAgPSBwb2ludHNbMF07XG4gIHZhciBsZWZ0ID0gcFswXTtcbiAgdmFyIHJpZ2h0ID0gcFswXTtcbiAgdmFyIHRvcCA9IHBbMV07XG4gIHZhciBib3R0b20gPSBwWzFdO1xuICB2YXIgaTtcblxuICBmb3IgKGkgPSAxOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgcCA9IHBvaW50c1tpXTtcbiAgICBsZWZ0ID0gbWF0aE1pbihsZWZ0LCBwWzBdKTtcbiAgICByaWdodCA9IG1hdGhNYXgocmlnaHQsIHBbMF0pO1xuICAgIHRvcCA9IG1hdGhNaW4odG9wLCBwWzFdKTtcbiAgICBib3R0b20gPSBtYXRoTWF4KGJvdHRvbSwgcFsxXSk7XG4gIH1cblxuICBtaW5bMF0gPSBsZWZ0O1xuICBtaW5bMV0gPSB0b3A7XG4gIG1heFswXSA9IHJpZ2h0O1xuICBtYXhbMV0gPSBib3R0b207XG59XG4vKipcbiAqIEBtZW1iZXJPZiBtb2R1bGU6enJlbmRlci9jb3JlL2Jib3hcbiAqIEBwYXJhbSB7bnVtYmVyfSB4MFxuICogQHBhcmFtIHtudW1iZXJ9IHkwXG4gKiBAcGFyYW0ge251bWJlcn0geDFcbiAqIEBwYXJhbSB7bnVtYmVyfSB5MVxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gbWluXG4gKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBtYXhcbiAqL1xuXG5cbmZ1bmN0aW9uIGZyb21MaW5lKHgwLCB5MCwgeDEsIHkxLCBtaW4sIG1heCkge1xuICBtaW5bMF0gPSBtYXRoTWluKHgwLCB4MSk7XG4gIG1pblsxXSA9IG1hdGhNaW4oeTAsIHkxKTtcbiAgbWF4WzBdID0gbWF0aE1heCh4MCwgeDEpO1xuICBtYXhbMV0gPSBtYXRoTWF4KHkwLCB5MSk7XG59XG5cbnZhciB4RGltID0gW107XG52YXIgeURpbSA9IFtdO1xuLyoqXG4gKiDku47kuInpmLbotJ3loZ7lsJTmm7Lnur8ocDAsIHAxLCBwMiwgcDMp5Lit6K6h566X5Ye65pyA5bCP5YyF5Zu055uS77yM5YaZ5YWlYG1pbmDlkoxgbWF4YOS4rVxuICogQG1lbWJlck9mIG1vZHVsZTp6cmVuZGVyL2NvcmUvYmJveFxuICogQHBhcmFtIHtudW1iZXJ9IHgwXG4gKiBAcGFyYW0ge251bWJlcn0geTBcbiAqIEBwYXJhbSB7bnVtYmVyfSB4MVxuICogQHBhcmFtIHtudW1iZXJ9IHkxXG4gKiBAcGFyYW0ge251bWJlcn0geDJcbiAqIEBwYXJhbSB7bnVtYmVyfSB5MlxuICogQHBhcmFtIHtudW1iZXJ9IHgzXG4gKiBAcGFyYW0ge251bWJlcn0geTNcbiAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IG1pblxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gbWF4XG4gKi9cblxuZnVuY3Rpb24gZnJvbUN1YmljKHgwLCB5MCwgeDEsIHkxLCB4MiwgeTIsIHgzLCB5MywgbWluLCBtYXgpIHtcbiAgdmFyIGN1YmljRXh0cmVtYSA9IGN1cnZlLmN1YmljRXh0cmVtYTtcbiAgdmFyIGN1YmljQXQgPSBjdXJ2ZS5jdWJpY0F0O1xuICB2YXIgaTtcbiAgdmFyIG4gPSBjdWJpY0V4dHJlbWEoeDAsIHgxLCB4MiwgeDMsIHhEaW0pO1xuICBtaW5bMF0gPSBJbmZpbml0eTtcbiAgbWluWzFdID0gSW5maW5pdHk7XG4gIG1heFswXSA9IC1JbmZpbml0eTtcbiAgbWF4WzFdID0gLUluZmluaXR5O1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICB2YXIgeCA9IGN1YmljQXQoeDAsIHgxLCB4MiwgeDMsIHhEaW1baV0pO1xuICAgIG1pblswXSA9IG1hdGhNaW4oeCwgbWluWzBdKTtcbiAgICBtYXhbMF0gPSBtYXRoTWF4KHgsIG1heFswXSk7XG4gIH1cblxuICBuID0gY3ViaWNFeHRyZW1hKHkwLCB5MSwgeTIsIHkzLCB5RGltKTtcblxuICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgdmFyIHkgPSBjdWJpY0F0KHkwLCB5MSwgeTIsIHkzLCB5RGltW2ldKTtcbiAgICBtaW5bMV0gPSBtYXRoTWluKHksIG1pblsxXSk7XG4gICAgbWF4WzFdID0gbWF0aE1heCh5LCBtYXhbMV0pO1xuICB9XG5cbiAgbWluWzBdID0gbWF0aE1pbih4MCwgbWluWzBdKTtcbiAgbWF4WzBdID0gbWF0aE1heCh4MCwgbWF4WzBdKTtcbiAgbWluWzBdID0gbWF0aE1pbih4MywgbWluWzBdKTtcbiAgbWF4WzBdID0gbWF0aE1heCh4MywgbWF4WzBdKTtcbiAgbWluWzFdID0gbWF0aE1pbih5MCwgbWluWzFdKTtcbiAgbWF4WzFdID0gbWF0aE1heCh5MCwgbWF4WzFdKTtcbiAgbWluWzFdID0gbWF0aE1pbih5MywgbWluWzFdKTtcbiAgbWF4WzFdID0gbWF0aE1heCh5MywgbWF4WzFdKTtcbn1cbi8qKlxuICog5LuO5LqM6Zi26LSd5aGe5bCU5puy57q/KHAwLCBwMSwgcDIp5Lit6K6h566X5Ye65pyA5bCP5YyF5Zu055uS77yM5YaZ5YWlYG1pbmDlkoxgbWF4YOS4rVxuICogQG1lbWJlck9mIG1vZHVsZTp6cmVuZGVyL2NvcmUvYmJveFxuICogQHBhcmFtIHtudW1iZXJ9IHgwXG4gKiBAcGFyYW0ge251bWJlcn0geTBcbiAqIEBwYXJhbSB7bnVtYmVyfSB4MVxuICogQHBhcmFtIHtudW1iZXJ9IHkxXG4gKiBAcGFyYW0ge251bWJlcn0geDJcbiAqIEBwYXJhbSB7bnVtYmVyfSB5MlxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gbWluXG4gKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBtYXhcbiAqL1xuXG5cbmZ1bmN0aW9uIGZyb21RdWFkcmF0aWMoeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgbWluLCBtYXgpIHtcbiAgdmFyIHF1YWRyYXRpY0V4dHJlbXVtID0gY3VydmUucXVhZHJhdGljRXh0cmVtdW07XG4gIHZhciBxdWFkcmF0aWNBdCA9IGN1cnZlLnF1YWRyYXRpY0F0OyAvLyBGaW5kIGV4dHJlbWl0aWVzLCB3aGVyZSBkZXJpdmF0aXZlIGluIHggZGltIG9yIHkgZGltIGlzIHplcm9cblxuICB2YXIgdHggPSBtYXRoTWF4KG1hdGhNaW4ocXVhZHJhdGljRXh0cmVtdW0oeDAsIHgxLCB4MiksIDEpLCAwKTtcbiAgdmFyIHR5ID0gbWF0aE1heChtYXRoTWluKHF1YWRyYXRpY0V4dHJlbXVtKHkwLCB5MSwgeTIpLCAxKSwgMCk7XG4gIHZhciB4ID0gcXVhZHJhdGljQXQoeDAsIHgxLCB4MiwgdHgpO1xuICB2YXIgeSA9IHF1YWRyYXRpY0F0KHkwLCB5MSwgeTIsIHR5KTtcbiAgbWluWzBdID0gbWF0aE1pbih4MCwgeDIsIHgpO1xuICBtaW5bMV0gPSBtYXRoTWluKHkwLCB5MiwgeSk7XG4gIG1heFswXSA9IG1hdGhNYXgoeDAsIHgyLCB4KTtcbiAgbWF4WzFdID0gbWF0aE1heCh5MCwgeTIsIHkpO1xufVxuLyoqXG4gKiDku47lnIblvKfkuK3orqHnrpflh7rmnIDlsI/ljIXlm7Tnm5LvvIzlhpnlhaVgbWluYOWSjGBtYXhg5LitXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyT2YgbW9kdWxlOnpyZW5kZXIvY29yZS9iYm94XG4gKiBAcGFyYW0ge251bWJlcn0geFxuICogQHBhcmFtIHtudW1iZXJ9IHlcbiAqIEBwYXJhbSB7bnVtYmVyfSByeFxuICogQHBhcmFtIHtudW1iZXJ9IHJ5XG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnRBbmdsZVxuICogQHBhcmFtIHtudW1iZXJ9IGVuZEFuZ2xlXG4gKiBAcGFyYW0ge251bWJlcn0gYW50aWNsb2Nrd2lzZVxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gbWluXG4gKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBtYXhcbiAqL1xuXG5cbmZ1bmN0aW9uIGZyb21BcmMoeCwgeSwgcngsIHJ5LCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgYW50aWNsb2Nrd2lzZSwgbWluLCBtYXgpIHtcbiAgdmFyIHZlYzJNaW4gPSB2ZWMyLm1pbjtcbiAgdmFyIHZlYzJNYXggPSB2ZWMyLm1heDtcbiAgdmFyIGRpZmYgPSBNYXRoLmFicyhzdGFydEFuZ2xlIC0gZW5kQW5nbGUpO1xuXG4gIGlmIChkaWZmICUgUEkyIDwgMWUtNCAmJiBkaWZmID4gMWUtNCkge1xuICAgIC8vIElzIGEgY2lyY2xlXG4gICAgbWluWzBdID0geCAtIHJ4O1xuICAgIG1pblsxXSA9IHkgLSByeTtcbiAgICBtYXhbMF0gPSB4ICsgcng7XG4gICAgbWF4WzFdID0geSArIHJ5O1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN0YXJ0WzBdID0gbWF0aENvcyhzdGFydEFuZ2xlKSAqIHJ4ICsgeDtcbiAgc3RhcnRbMV0gPSBtYXRoU2luKHN0YXJ0QW5nbGUpICogcnkgKyB5O1xuICBlbmRbMF0gPSBtYXRoQ29zKGVuZEFuZ2xlKSAqIHJ4ICsgeDtcbiAgZW5kWzFdID0gbWF0aFNpbihlbmRBbmdsZSkgKiByeSArIHk7XG4gIHZlYzJNaW4obWluLCBzdGFydCwgZW5kKTtcbiAgdmVjMk1heChtYXgsIHN0YXJ0LCBlbmQpOyAvLyBUaHJlc2ggdG8gWzAsIE1hdGguUEkgKiAyXVxuXG4gIHN0YXJ0QW5nbGUgPSBzdGFydEFuZ2xlICUgUEkyO1xuXG4gIGlmIChzdGFydEFuZ2xlIDwgMCkge1xuICAgIHN0YXJ0QW5nbGUgPSBzdGFydEFuZ2xlICsgUEkyO1xuICB9XG5cbiAgZW5kQW5nbGUgPSBlbmRBbmdsZSAlIFBJMjtcblxuICBpZiAoZW5kQW5nbGUgPCAwKSB7XG4gICAgZW5kQW5nbGUgPSBlbmRBbmdsZSArIFBJMjtcbiAgfVxuXG4gIGlmIChzdGFydEFuZ2xlID4gZW5kQW5nbGUgJiYgIWFudGljbG9ja3dpc2UpIHtcbiAgICBlbmRBbmdsZSArPSBQSTI7XG4gIH0gZWxzZSBpZiAoc3RhcnRBbmdsZSA8IGVuZEFuZ2xlICYmIGFudGljbG9ja3dpc2UpIHtcbiAgICBzdGFydEFuZ2xlICs9IFBJMjtcbiAgfVxuXG4gIGlmIChhbnRpY2xvY2t3aXNlKSB7XG4gICAgdmFyIHRtcCA9IGVuZEFuZ2xlO1xuICAgIGVuZEFuZ2xlID0gc3RhcnRBbmdsZTtcbiAgICBzdGFydEFuZ2xlID0gdG1wO1xuICB9IC8vIHZhciBudW1iZXIgPSAwO1xuICAvLyB2YXIgc3RlcCA9IChhbnRpY2xvY2t3aXNlID8gLU1hdGguUEkgOiBNYXRoLlBJKSAvIDI7XG5cblxuICBmb3IgKHZhciBhbmdsZSA9IDA7IGFuZ2xlIDwgZW5kQW5nbGU7IGFuZ2xlICs9IE1hdGguUEkgLyAyKSB7XG4gICAgaWYgKGFuZ2xlID4gc3RhcnRBbmdsZSkge1xuICAgICAgZXh0cmVtaXR5WzBdID0gbWF0aENvcyhhbmdsZSkgKiByeCArIHg7XG4gICAgICBleHRyZW1pdHlbMV0gPSBtYXRoU2luKGFuZ2xlKSAqIHJ5ICsgeTtcbiAgICAgIHZlYzJNaW4obWluLCBleHRyZW1pdHksIG1pbik7XG4gICAgICB2ZWMyTWF4KG1heCwgZXh0cmVtaXR5LCBtYXgpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnRzLmZyb21Qb2ludHMgPSBmcm9tUG9pbnRzO1xuZXhwb3J0cy5mcm9tTGluZSA9IGZyb21MaW5lO1xuZXhwb3J0cy5mcm9tQ3ViaWMgPSBmcm9tQ3ViaWM7XG5leHBvcnRzLmZyb21RdWFkcmF0aWMgPSBmcm9tUXVhZHJhdGljO1xuZXhwb3J0cy5mcm9tQXJjID0gZnJvbUFyYzsiLCJ2YXIgX3ZlY3RvciA9IHJlcXVpcmUoXCIuL3ZlY3RvclwiKTtcblxudmFyIHYyQ3JlYXRlID0gX3ZlY3Rvci5jcmVhdGU7XG52YXIgdjJEaXN0U3F1YXJlID0gX3ZlY3Rvci5kaXN0U3F1YXJlO1xuXG4vKipcbiAqIOabsue6v+i+heWKqeaooeWdl1xuICogQG1vZHVsZSB6cmVuZGVyL2NvcmUvY3VydmVcbiAqIEBhdXRob3IgcGlzc2FuZyhodHRwczovL3d3dy5naXRodWIuY29tL3Bpc3NhbmcpXG4gKi9cbnZhciBtYXRoUG93ID0gTWF0aC5wb3c7XG52YXIgbWF0aFNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgRVBTSUxPTiA9IDFlLTg7XG52YXIgRVBTSUxPTl9OVU1FUklDID0gMWUtNDtcbnZhciBUSFJFRV9TUVJUID0gbWF0aFNxcnQoMyk7XG52YXIgT05FX1RISVJEID0gMSAvIDM7IC8vIOS4tOaXtuWPmOmHj1xuXG52YXIgX3YwID0gdjJDcmVhdGUoKTtcblxudmFyIF92MSA9IHYyQ3JlYXRlKCk7XG5cbnZhciBfdjIgPSB2MkNyZWF0ZSgpO1xuXG5mdW5jdGlvbiBpc0Fyb3VuZFplcm8odmFsKSB7XG4gIHJldHVybiB2YWwgPiAtRVBTSUxPTiAmJiB2YWwgPCBFUFNJTE9OO1xufVxuXG5mdW5jdGlvbiBpc05vdEFyb3VuZFplcm8odmFsKSB7XG4gIHJldHVybiB2YWwgPiBFUFNJTE9OIHx8IHZhbCA8IC1FUFNJTE9OO1xufVxuLyoqXG4gKiDorqHnrpfkuInmrKHotJ3loZ7lsJTlgLxcbiAqIEBtZW1iZXJPZiBtb2R1bGU6enJlbmRlci9jb3JlL2N1cnZlXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHAwXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHAxXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHAyXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHAzXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHRcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuXG5cbmZ1bmN0aW9uIGN1YmljQXQocDAsIHAxLCBwMiwgcDMsIHQpIHtcbiAgdmFyIG9uZXQgPSAxIC0gdDtcbiAgcmV0dXJuIG9uZXQgKiBvbmV0ICogKG9uZXQgKiBwMCArIDMgKiB0ICogcDEpICsgdCAqIHQgKiAodCAqIHAzICsgMyAqIG9uZXQgKiBwMik7XG59XG4vKipcbiAqIOiuoeeul+S4ieasoei0neWhnuWwlOWvvOaVsOWAvFxuICogQG1lbWJlck9mIG1vZHVsZTp6cmVuZGVyL2NvcmUvY3VydmVcbiAqIEBwYXJhbSAge251bWJlcn0gcDBcbiAqIEBwYXJhbSAge251bWJlcn0gcDFcbiAqIEBwYXJhbSAge251bWJlcn0gcDJcbiAqIEBwYXJhbSAge251bWJlcn0gcDNcbiAqIEBwYXJhbSAge251bWJlcn0gdFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5cblxuZnVuY3Rpb24gY3ViaWNEZXJpdmF0aXZlQXQocDAsIHAxLCBwMiwgcDMsIHQpIHtcbiAgdmFyIG9uZXQgPSAxIC0gdDtcbiAgcmV0dXJuIDMgKiAoKChwMSAtIHAwKSAqIG9uZXQgKyAyICogKHAyIC0gcDEpICogdCkgKiBvbmV0ICsgKHAzIC0gcDIpICogdCAqIHQpO1xufVxuLyoqXG4gKiDorqHnrpfkuInmrKHotJ3loZ7lsJTmlrnnqIvmoLnvvIzkvb/nlKjnm5vph5HlhazlvI9cbiAqIEBtZW1iZXJPZiBtb2R1bGU6enJlbmRlci9jb3JlL2N1cnZlXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHAwXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHAxXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHAyXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHAzXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHZhbFxuICogQHBhcmFtICB7QXJyYXkuPG51bWJlcj59IHJvb3RzXG4gKiBAcmV0dXJuIHtudW1iZXJ9IOacieaViOagueaVsOebrlxuICovXG5cblxuZnVuY3Rpb24gY3ViaWNSb290QXQocDAsIHAxLCBwMiwgcDMsIHZhbCwgcm9vdHMpIHtcbiAgLy8gRXZhbHVhdGUgcm9vdHMgb2YgY3ViaWMgZnVuY3Rpb25zXG4gIHZhciBhID0gcDMgKyAzICogKHAxIC0gcDIpIC0gcDA7XG4gIHZhciBiID0gMyAqIChwMiAtIHAxICogMiArIHAwKTtcbiAgdmFyIGMgPSAzICogKHAxIC0gcDApO1xuICB2YXIgZCA9IHAwIC0gdmFsO1xuICB2YXIgQSA9IGIgKiBiIC0gMyAqIGEgKiBjO1xuICB2YXIgQiA9IGIgKiBjIC0gOSAqIGEgKiBkO1xuICB2YXIgQyA9IGMgKiBjIC0gMyAqIGIgKiBkO1xuICB2YXIgbiA9IDA7XG5cbiAgaWYgKGlzQXJvdW5kWmVybyhBKSAmJiBpc0Fyb3VuZFplcm8oQikpIHtcbiAgICBpZiAoaXNBcm91bmRaZXJvKGIpKSB7XG4gICAgICByb290c1swXSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB0MSA9IC1jIC8gYjsgLy90MSwgdDIsIHQzLCBiIGlzIG5vdCB6ZXJvXG5cbiAgICAgIGlmICh0MSA+PSAwICYmIHQxIDw9IDEpIHtcbiAgICAgICAgcm9vdHNbbisrXSA9IHQxO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgZGlzYyA9IEIgKiBCIC0gNCAqIEEgKiBDO1xuXG4gICAgaWYgKGlzQXJvdW5kWmVybyhkaXNjKSkge1xuICAgICAgdmFyIEsgPSBCIC8gQTtcbiAgICAgIHZhciB0MSA9IC1iIC8gYSArIEs7IC8vIHQxLCBhIGlzIG5vdCB6ZXJvXG5cbiAgICAgIHZhciB0MiA9IC1LIC8gMjsgLy8gdDIsIHQzXG5cbiAgICAgIGlmICh0MSA+PSAwICYmIHQxIDw9IDEpIHtcbiAgICAgICAgcm9vdHNbbisrXSA9IHQxO1xuICAgICAgfVxuXG4gICAgICBpZiAodDIgPj0gMCAmJiB0MiA8PSAxKSB7XG4gICAgICAgIHJvb3RzW24rK10gPSB0MjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRpc2MgPiAwKSB7XG4gICAgICB2YXIgZGlzY1NxcnQgPSBtYXRoU3FydChkaXNjKTtcbiAgICAgIHZhciBZMSA9IEEgKiBiICsgMS41ICogYSAqICgtQiArIGRpc2NTcXJ0KTtcbiAgICAgIHZhciBZMiA9IEEgKiBiICsgMS41ICogYSAqICgtQiAtIGRpc2NTcXJ0KTtcblxuICAgICAgaWYgKFkxIDwgMCkge1xuICAgICAgICBZMSA9IC1tYXRoUG93KC1ZMSwgT05FX1RISVJEKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFkxID0gbWF0aFBvdyhZMSwgT05FX1RISVJEKTtcbiAgICAgIH1cblxuICAgICAgaWYgKFkyIDwgMCkge1xuICAgICAgICBZMiA9IC1tYXRoUG93KC1ZMiwgT05FX1RISVJEKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFkyID0gbWF0aFBvdyhZMiwgT05FX1RISVJEKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHQxID0gKC1iIC0gKFkxICsgWTIpKSAvICgzICogYSk7XG5cbiAgICAgIGlmICh0MSA+PSAwICYmIHQxIDw9IDEpIHtcbiAgICAgICAgcm9vdHNbbisrXSA9IHQxO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgVCA9ICgyICogQSAqIGIgLSAzICogYSAqIEIpIC8gKDIgKiBtYXRoU3FydChBICogQSAqIEEpKTtcbiAgICAgIHZhciB0aGV0YSA9IE1hdGguYWNvcyhUKSAvIDM7XG4gICAgICB2YXIgQVNxcnQgPSBtYXRoU3FydChBKTtcbiAgICAgIHZhciB0bXAgPSBNYXRoLmNvcyh0aGV0YSk7XG4gICAgICB2YXIgdDEgPSAoLWIgLSAyICogQVNxcnQgKiB0bXApIC8gKDMgKiBhKTtcbiAgICAgIHZhciB0MiA9ICgtYiArIEFTcXJ0ICogKHRtcCArIFRIUkVFX1NRUlQgKiBNYXRoLnNpbih0aGV0YSkpKSAvICgzICogYSk7XG4gICAgICB2YXIgdDMgPSAoLWIgKyBBU3FydCAqICh0bXAgLSBUSFJFRV9TUVJUICogTWF0aC5zaW4odGhldGEpKSkgLyAoMyAqIGEpO1xuXG4gICAgICBpZiAodDEgPj0gMCAmJiB0MSA8PSAxKSB7XG4gICAgICAgIHJvb3RzW24rK10gPSB0MTtcbiAgICAgIH1cblxuICAgICAgaWYgKHQyID49IDAgJiYgdDIgPD0gMSkge1xuICAgICAgICByb290c1tuKytdID0gdDI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0MyA+PSAwICYmIHQzIDw9IDEpIHtcbiAgICAgICAgcm9vdHNbbisrXSA9IHQzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuO1xufVxuLyoqXG4gKiDorqHnrpfkuInmrKHotJ3loZ7lsJTmlrnnqIvmnoHpmZDlgLznmoTkvY3nva5cbiAqIEBtZW1iZXJPZiBtb2R1bGU6enJlbmRlci9jb3JlL2N1cnZlXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHAwXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHAxXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHAyXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHAzXG4gKiBAcGFyYW0gIHtBcnJheS48bnVtYmVyPn0gZXh0cmVtYVxuICogQHJldHVybiB7bnVtYmVyfSDmnInmlYjmlbDnm65cbiAqL1xuXG5cbmZ1bmN0aW9uIGN1YmljRXh0cmVtYShwMCwgcDEsIHAyLCBwMywgZXh0cmVtYSkge1xuICB2YXIgYiA9IDYgKiBwMiAtIDEyICogcDEgKyA2ICogcDA7XG4gIHZhciBhID0gOSAqIHAxICsgMyAqIHAzIC0gMyAqIHAwIC0gOSAqIHAyO1xuICB2YXIgYyA9IDMgKiBwMSAtIDMgKiBwMDtcbiAgdmFyIG4gPSAwO1xuXG4gIGlmIChpc0Fyb3VuZFplcm8oYSkpIHtcbiAgICBpZiAoaXNOb3RBcm91bmRaZXJvKGIpKSB7XG4gICAgICB2YXIgdDEgPSAtYyAvIGI7XG5cbiAgICAgIGlmICh0MSA+PSAwICYmIHQxIDw9IDEpIHtcbiAgICAgICAgZXh0cmVtYVtuKytdID0gdDE7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBkaXNjID0gYiAqIGIgLSA0ICogYSAqIGM7XG5cbiAgICBpZiAoaXNBcm91bmRaZXJvKGRpc2MpKSB7XG4gICAgICBleHRyZW1hWzBdID0gLWIgLyAoMiAqIGEpO1xuICAgIH0gZWxzZSBpZiAoZGlzYyA+IDApIHtcbiAgICAgIHZhciBkaXNjU3FydCA9IG1hdGhTcXJ0KGRpc2MpO1xuICAgICAgdmFyIHQxID0gKC1iICsgZGlzY1NxcnQpIC8gKDIgKiBhKTtcbiAgICAgIHZhciB0MiA9ICgtYiAtIGRpc2NTcXJ0KSAvICgyICogYSk7XG5cbiAgICAgIGlmICh0MSA+PSAwICYmIHQxIDw9IDEpIHtcbiAgICAgICAgZXh0cmVtYVtuKytdID0gdDE7XG4gICAgICB9XG5cbiAgICAgIGlmICh0MiA+PSAwICYmIHQyIDw9IDEpIHtcbiAgICAgICAgZXh0cmVtYVtuKytdID0gdDI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG47XG59XG4vKipcbiAqIOe7huWIhuS4ieasoei0neWhnuWwlOabsue6v1xuICogQG1lbWJlck9mIG1vZHVsZTp6cmVuZGVyL2NvcmUvY3VydmVcbiAqIEBwYXJhbSAge251bWJlcn0gcDBcbiAqIEBwYXJhbSAge251bWJlcn0gcDFcbiAqIEBwYXJhbSAge251bWJlcn0gcDJcbiAqIEBwYXJhbSAge251bWJlcn0gcDNcbiAqIEBwYXJhbSAge251bWJlcn0gdFxuICogQHBhcmFtICB7QXJyYXkuPG51bWJlcj59IG91dFxuICovXG5cblxuZnVuY3Rpb24gY3ViaWNTdWJkaXZpZGUocDAsIHAxLCBwMiwgcDMsIHQsIG91dCkge1xuICB2YXIgcDAxID0gKHAxIC0gcDApICogdCArIHAwO1xuICB2YXIgcDEyID0gKHAyIC0gcDEpICogdCArIHAxO1xuICB2YXIgcDIzID0gKHAzIC0gcDIpICogdCArIHAyO1xuICB2YXIgcDAxMiA9IChwMTIgLSBwMDEpICogdCArIHAwMTtcbiAgdmFyIHAxMjMgPSAocDIzIC0gcDEyKSAqIHQgKyBwMTI7XG4gIHZhciBwMDEyMyA9IChwMTIzIC0gcDAxMikgKiB0ICsgcDAxMjsgLy8gU2VnMFxuXG4gIG91dFswXSA9IHAwO1xuICBvdXRbMV0gPSBwMDE7XG4gIG91dFsyXSA9IHAwMTI7XG4gIG91dFszXSA9IHAwMTIzOyAvLyBTZWcxXG5cbiAgb3V0WzRdID0gcDAxMjM7XG4gIG91dFs1XSA9IHAxMjM7XG4gIG91dFs2XSA9IHAyMztcbiAgb3V0WzddID0gcDM7XG59XG4vKipcbiAqIOaKleWwhOeCueWIsOS4ieasoei0neWhnuWwlOabsue6v+S4iu+8jOi/lOWbnuaKleWwhOi3neemu+OAglxuICog5oqV5bCE54K55pyJ5Y+v6IO95Lya5pyJ5LiA5Liq5oiW6ICF5aSa5Liq77yM6L+Z6YeM5Y+q6L+U5Zue5YW25Lit6Led56a75pyA55+t55qE5LiA5Liq44CCXG4gKiBAcGFyYW0ge251bWJlcn0geDBcbiAqIEBwYXJhbSB7bnVtYmVyfSB5MFxuICogQHBhcmFtIHtudW1iZXJ9IHgxXG4gKiBAcGFyYW0ge251bWJlcn0geTFcbiAqIEBwYXJhbSB7bnVtYmVyfSB4MlxuICogQHBhcmFtIHtudW1iZXJ9IHkyXG4gKiBAcGFyYW0ge251bWJlcn0geDNcbiAqIEBwYXJhbSB7bnVtYmVyfSB5M1xuICogQHBhcmFtIHtudW1iZXJ9IHhcbiAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBbb3V0XSDmipXlsITngrlcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuXG5cbmZ1bmN0aW9uIGN1YmljUHJvamVjdFBvaW50KHgwLCB5MCwgeDEsIHkxLCB4MiwgeTIsIHgzLCB5MywgeCwgeSwgb3V0KSB7XG4gIC8vIGh0dHA6Ly9wb21heC5naXRodWIuaW8vYmV6aWVyaW5mby8jcHJvamVjdGlvbnNcbiAgdmFyIHQ7XG4gIHZhciBpbnRlcnZhbCA9IDAuMDA1O1xuICB2YXIgZCA9IEluZmluaXR5O1xuICB2YXIgcHJldjtcbiAgdmFyIG5leHQ7XG4gIHZhciBkMTtcbiAgdmFyIGQyO1xuICBfdjBbMF0gPSB4O1xuICBfdjBbMV0gPSB5OyAvLyDlhYjnspfnlaXkvLDorqHkuIDkuIvlj6/og73nmoTmnIDlsI/ot53nprvnmoQgdCDlgLxcbiAgLy8gUEVORElOR1xuXG4gIGZvciAodmFyIF90ID0gMDsgX3QgPCAxOyBfdCArPSAwLjA1KSB7XG4gICAgX3YxWzBdID0gY3ViaWNBdCh4MCwgeDEsIHgyLCB4MywgX3QpO1xuICAgIF92MVsxXSA9IGN1YmljQXQoeTAsIHkxLCB5MiwgeTMsIF90KTtcbiAgICBkMSA9IHYyRGlzdFNxdWFyZShfdjAsIF92MSk7XG5cbiAgICBpZiAoZDEgPCBkKSB7XG4gICAgICB0ID0gX3Q7XG4gICAgICBkID0gZDE7XG4gICAgfVxuICB9XG5cbiAgZCA9IEluZmluaXR5OyAvLyBBdCBtb3N0IDMyIGl0ZXJhdGlvblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkrKykge1xuICAgIGlmIChpbnRlcnZhbCA8IEVQU0lMT05fTlVNRVJJQykge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcHJldiA9IHQgLSBpbnRlcnZhbDtcbiAgICBuZXh0ID0gdCArIGludGVydmFsOyAvLyB0IC0gaW50ZXJ2YWxcblxuICAgIF92MVswXSA9IGN1YmljQXQoeDAsIHgxLCB4MiwgeDMsIHByZXYpO1xuICAgIF92MVsxXSA9IGN1YmljQXQoeTAsIHkxLCB5MiwgeTMsIHByZXYpO1xuICAgIGQxID0gdjJEaXN0U3F1YXJlKF92MSwgX3YwKTtcblxuICAgIGlmIChwcmV2ID49IDAgJiYgZDEgPCBkKSB7XG4gICAgICB0ID0gcHJldjtcbiAgICAgIGQgPSBkMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdCArIGludGVydmFsXG4gICAgICBfdjJbMF0gPSBjdWJpY0F0KHgwLCB4MSwgeDIsIHgzLCBuZXh0KTtcbiAgICAgIF92MlsxXSA9IGN1YmljQXQoeTAsIHkxLCB5MiwgeTMsIG5leHQpO1xuICAgICAgZDIgPSB2MkRpc3RTcXVhcmUoX3YyLCBfdjApO1xuXG4gICAgICBpZiAobmV4dCA8PSAxICYmIGQyIDwgZCkge1xuICAgICAgICB0ID0gbmV4dDtcbiAgICAgICAgZCA9IGQyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW50ZXJ2YWwgKj0gMC41O1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyB0XG5cblxuICBpZiAob3V0KSB7XG4gICAgb3V0WzBdID0gY3ViaWNBdCh4MCwgeDEsIHgyLCB4MywgdCk7XG4gICAgb3V0WzFdID0gY3ViaWNBdCh5MCwgeTEsIHkyLCB5MywgdCk7XG4gIH0gLy8gY29uc29sZS5sb2coaW50ZXJ2YWwsIGkpO1xuXG5cbiAgcmV0dXJuIG1hdGhTcXJ0KGQpO1xufVxuLyoqXG4gKiDorqHnrpfkuozmrKHmlrnotJ3loZ7lsJTlgLxcbiAqIEBwYXJhbSAge251bWJlcn0gcDBcbiAqIEBwYXJhbSAge251bWJlcn0gcDFcbiAqIEBwYXJhbSAge251bWJlcn0gcDJcbiAqIEBwYXJhbSAge251bWJlcn0gdFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5cblxuZnVuY3Rpb24gcXVhZHJhdGljQXQocDAsIHAxLCBwMiwgdCkge1xuICB2YXIgb25ldCA9IDEgLSB0O1xuICByZXR1cm4gb25ldCAqIChvbmV0ICogcDAgKyAyICogdCAqIHAxKSArIHQgKiB0ICogcDI7XG59XG4vKipcbiAqIOiuoeeul+S6jOasoeaWuei0neWhnuWwlOWvvOaVsOWAvFxuICogQHBhcmFtICB7bnVtYmVyfSBwMFxuICogQHBhcmFtICB7bnVtYmVyfSBwMVxuICogQHBhcmFtICB7bnVtYmVyfSBwMlxuICogQHBhcmFtICB7bnVtYmVyfSB0XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuXG5mdW5jdGlvbiBxdWFkcmF0aWNEZXJpdmF0aXZlQXQocDAsIHAxLCBwMiwgdCkge1xuICByZXR1cm4gMiAqICgoMSAtIHQpICogKHAxIC0gcDApICsgdCAqIChwMiAtIHAxKSk7XG59XG4vKipcbiAqIOiuoeeul+S6jOasoeaWuei0neWhnuWwlOaWueeoi+aguVxuICogQHBhcmFtICB7bnVtYmVyfSBwMFxuICogQHBhcmFtICB7bnVtYmVyfSBwMVxuICogQHBhcmFtICB7bnVtYmVyfSBwMlxuICogQHBhcmFtICB7bnVtYmVyfSB0XG4gKiBAcGFyYW0gIHtBcnJheS48bnVtYmVyPn0gcm9vdHNcbiAqIEByZXR1cm4ge251bWJlcn0g5pyJ5pWI5qC55pWw55uuXG4gKi9cblxuXG5mdW5jdGlvbiBxdWFkcmF0aWNSb290QXQocDAsIHAxLCBwMiwgdmFsLCByb290cykge1xuICB2YXIgYSA9IHAwIC0gMiAqIHAxICsgcDI7XG4gIHZhciBiID0gMiAqIChwMSAtIHAwKTtcbiAgdmFyIGMgPSBwMCAtIHZhbDtcbiAgdmFyIG4gPSAwO1xuXG4gIGlmIChpc0Fyb3VuZFplcm8oYSkpIHtcbiAgICBpZiAoaXNOb3RBcm91bmRaZXJvKGIpKSB7XG4gICAgICB2YXIgdDEgPSAtYyAvIGI7XG5cbiAgICAgIGlmICh0MSA+PSAwICYmIHQxIDw9IDEpIHtcbiAgICAgICAgcm9vdHNbbisrXSA9IHQxO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgZGlzYyA9IGIgKiBiIC0gNCAqIGEgKiBjO1xuXG4gICAgaWYgKGlzQXJvdW5kWmVybyhkaXNjKSkge1xuICAgICAgdmFyIHQxID0gLWIgLyAoMiAqIGEpO1xuXG4gICAgICBpZiAodDEgPj0gMCAmJiB0MSA8PSAxKSB7XG4gICAgICAgIHJvb3RzW24rK10gPSB0MTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRpc2MgPiAwKSB7XG4gICAgICB2YXIgZGlzY1NxcnQgPSBtYXRoU3FydChkaXNjKTtcbiAgICAgIHZhciB0MSA9ICgtYiArIGRpc2NTcXJ0KSAvICgyICogYSk7XG4gICAgICB2YXIgdDIgPSAoLWIgLSBkaXNjU3FydCkgLyAoMiAqIGEpO1xuXG4gICAgICBpZiAodDEgPj0gMCAmJiB0MSA8PSAxKSB7XG4gICAgICAgIHJvb3RzW24rK10gPSB0MTtcbiAgICAgIH1cblxuICAgICAgaWYgKHQyID49IDAgJiYgdDIgPD0gMSkge1xuICAgICAgICByb290c1tuKytdID0gdDI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG47XG59XG4vKipcbiAqIOiuoeeul+S6jOasoei0neWhnuWwlOaWueeoi+aegemZkOWAvFxuICogQG1lbWJlck9mIG1vZHVsZTp6cmVuZGVyL2NvcmUvY3VydmVcbiAqIEBwYXJhbSAge251bWJlcn0gcDBcbiAqIEBwYXJhbSAge251bWJlcn0gcDFcbiAqIEBwYXJhbSAge251bWJlcn0gcDJcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuXG5cbmZ1bmN0aW9uIHF1YWRyYXRpY0V4dHJlbXVtKHAwLCBwMSwgcDIpIHtcbiAgdmFyIGRpdmlkZXIgPSBwMCArIHAyIC0gMiAqIHAxO1xuXG4gIGlmIChkaXZpZGVyID09PSAwKSB7XG4gICAgLy8gcDEgaXMgY2VudGVyIG9mIHAwIGFuZCBwMlxuICAgIHJldHVybiAwLjU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChwMCAtIHAxKSAvIGRpdmlkZXI7XG4gIH1cbn1cbi8qKlxuICog57uG5YiG5LqM5qyh6LSd5aGe5bCU5puy57q/XG4gKiBAbWVtYmVyT2YgbW9kdWxlOnpyZW5kZXIvY29yZS9jdXJ2ZVxuICogQHBhcmFtICB7bnVtYmVyfSBwMFxuICogQHBhcmFtICB7bnVtYmVyfSBwMVxuICogQHBhcmFtICB7bnVtYmVyfSBwMlxuICogQHBhcmFtICB7bnVtYmVyfSB0XG4gKiBAcGFyYW0gIHtBcnJheS48bnVtYmVyPn0gb3V0XG4gKi9cblxuXG5mdW5jdGlvbiBxdWFkcmF0aWNTdWJkaXZpZGUocDAsIHAxLCBwMiwgdCwgb3V0KSB7XG4gIHZhciBwMDEgPSAocDEgLSBwMCkgKiB0ICsgcDA7XG4gIHZhciBwMTIgPSAocDIgLSBwMSkgKiB0ICsgcDE7XG4gIHZhciBwMDEyID0gKHAxMiAtIHAwMSkgKiB0ICsgcDAxOyAvLyBTZWcwXG5cbiAgb3V0WzBdID0gcDA7XG4gIG91dFsxXSA9IHAwMTtcbiAgb3V0WzJdID0gcDAxMjsgLy8gU2VnMVxuXG4gIG91dFszXSA9IHAwMTI7XG4gIG91dFs0XSA9IHAxMjtcbiAgb3V0WzVdID0gcDI7XG59XG4vKipcbiAqIOaKleWwhOeCueWIsOS6jOasoei0neWhnuWwlOabsue6v+S4iu+8jOi/lOWbnuaKleWwhOi3neemu+OAglxuICog5oqV5bCE54K55pyJ5Y+v6IO95Lya5pyJ5LiA5Liq5oiW6ICF5aSa5Liq77yM6L+Z6YeM5Y+q6L+U5Zue5YW25Lit6Led56a75pyA55+t55qE5LiA5Liq44CCXG4gKiBAcGFyYW0ge251bWJlcn0geDBcbiAqIEBwYXJhbSB7bnVtYmVyfSB5MFxuICogQHBhcmFtIHtudW1iZXJ9IHgxXG4gKiBAcGFyYW0ge251bWJlcn0geTFcbiAqIEBwYXJhbSB7bnVtYmVyfSB4MlxuICogQHBhcmFtIHtudW1iZXJ9IHkyXG4gKiBAcGFyYW0ge251bWJlcn0geFxuICogQHBhcmFtIHtudW1iZXJ9IHlcbiAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IG91dCDmipXlsITngrlcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuXG5cbmZ1bmN0aW9uIHF1YWRyYXRpY1Byb2plY3RQb2ludCh4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCB4LCB5LCBvdXQpIHtcbiAgLy8gaHR0cDovL3BvbWF4LmdpdGh1Yi5pby9iZXppZXJpbmZvLyNwcm9qZWN0aW9uc1xuICB2YXIgdDtcbiAgdmFyIGludGVydmFsID0gMC4wMDU7XG4gIHZhciBkID0gSW5maW5pdHk7XG4gIF92MFswXSA9IHg7XG4gIF92MFsxXSA9IHk7IC8vIOWFiOeyl+eVpeS8sOiuoeS4gOS4i+WPr+iDveeahOacgOWwj+i3neemu+eahCB0IOWAvFxuICAvLyBQRU5ESU5HXG5cbiAgZm9yICh2YXIgX3QgPSAwOyBfdCA8IDE7IF90ICs9IDAuMDUpIHtcbiAgICBfdjFbMF0gPSBxdWFkcmF0aWNBdCh4MCwgeDEsIHgyLCBfdCk7XG4gICAgX3YxWzFdID0gcXVhZHJhdGljQXQoeTAsIHkxLCB5MiwgX3QpO1xuICAgIHZhciBkMSA9IHYyRGlzdFNxdWFyZShfdjAsIF92MSk7XG5cbiAgICBpZiAoZDEgPCBkKSB7XG4gICAgICB0ID0gX3Q7XG4gICAgICBkID0gZDE7XG4gICAgfVxuICB9XG5cbiAgZCA9IEluZmluaXR5OyAvLyBBdCBtb3N0IDMyIGl0ZXJhdGlvblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkrKykge1xuICAgIGlmIChpbnRlcnZhbCA8IEVQU0lMT05fTlVNRVJJQykge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgdmFyIHByZXYgPSB0IC0gaW50ZXJ2YWw7XG4gICAgdmFyIG5leHQgPSB0ICsgaW50ZXJ2YWw7IC8vIHQgLSBpbnRlcnZhbFxuXG4gICAgX3YxWzBdID0gcXVhZHJhdGljQXQoeDAsIHgxLCB4MiwgcHJldik7XG4gICAgX3YxWzFdID0gcXVhZHJhdGljQXQoeTAsIHkxLCB5MiwgcHJldik7XG4gICAgdmFyIGQxID0gdjJEaXN0U3F1YXJlKF92MSwgX3YwKTtcblxuICAgIGlmIChwcmV2ID49IDAgJiYgZDEgPCBkKSB7XG4gICAgICB0ID0gcHJldjtcbiAgICAgIGQgPSBkMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdCArIGludGVydmFsXG4gICAgICBfdjJbMF0gPSBxdWFkcmF0aWNBdCh4MCwgeDEsIHgyLCBuZXh0KTtcbiAgICAgIF92MlsxXSA9IHF1YWRyYXRpY0F0KHkwLCB5MSwgeTIsIG5leHQpO1xuICAgICAgdmFyIGQyID0gdjJEaXN0U3F1YXJlKF92MiwgX3YwKTtcblxuICAgICAgaWYgKG5leHQgPD0gMSAmJiBkMiA8IGQpIHtcbiAgICAgICAgdCA9IG5leHQ7XG4gICAgICAgIGQgPSBkMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludGVydmFsICo9IDAuNTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gdFxuXG5cbiAgaWYgKG91dCkge1xuICAgIG91dFswXSA9IHF1YWRyYXRpY0F0KHgwLCB4MSwgeDIsIHQpO1xuICAgIG91dFsxXSA9IHF1YWRyYXRpY0F0KHkwLCB5MSwgeTIsIHQpO1xuICB9IC8vIGNvbnNvbGUubG9nKGludGVydmFsLCBpKTtcblxuXG4gIHJldHVybiBtYXRoU3FydChkKTtcbn1cblxuZXhwb3J0cy5jdWJpY0F0ID0gY3ViaWNBdDtcbmV4cG9ydHMuY3ViaWNEZXJpdmF0aXZlQXQgPSBjdWJpY0Rlcml2YXRpdmVBdDtcbmV4cG9ydHMuY3ViaWNSb290QXQgPSBjdWJpY1Jvb3RBdDtcbmV4cG9ydHMuY3ViaWNFeHRyZW1hID0gY3ViaWNFeHRyZW1hO1xuZXhwb3J0cy5jdWJpY1N1YmRpdmlkZSA9IGN1YmljU3ViZGl2aWRlO1xuZXhwb3J0cy5jdWJpY1Byb2plY3RQb2ludCA9IGN1YmljUHJvamVjdFBvaW50O1xuZXhwb3J0cy5xdWFkcmF0aWNBdCA9IHF1YWRyYXRpY0F0O1xuZXhwb3J0cy5xdWFkcmF0aWNEZXJpdmF0aXZlQXQgPSBxdWFkcmF0aWNEZXJpdmF0aXZlQXQ7XG5leHBvcnRzLnF1YWRyYXRpY1Jvb3RBdCA9IHF1YWRyYXRpY1Jvb3RBdDtcbmV4cG9ydHMucXVhZHJhdGljRXh0cmVtdW0gPSBxdWFkcmF0aWNFeHRyZW11bTtcbmV4cG9ydHMucXVhZHJhdGljU3ViZGl2aWRlID0gcXVhZHJhdGljU3ViZGl2aWRlO1xuZXhwb3J0cy5xdWFkcmF0aWNQcm9qZWN0UG9pbnQgPSBxdWFkcmF0aWNQcm9qZWN0UG9pbnQ7IiwiLyoqXG4gKiBlY2hhcnRz6K6+5aSH546v5aKD6K+G5YirXG4gKlxuICogQGRlc2MgZWNoYXJ0c+WfuuS6jkNhbnZhc++8jOe6r0phdmFzY3JpcHTlm77ooajlupPvvIzmj5Dkvpvnm7Top4LvvIznlJ/liqjvvIzlj6/kuqTkupLvvIzlj6/kuKrmgKfljJblrprliLbnmoTmlbDmja7nu5/orqHlm77ooajjgIJcbiAqIEBhdXRob3IgZmlyZWRlW2ZpcmVkZUBmaXJlZGUudXNdXG4gKiBAZGVzYyB0aGFua3MgemVwdG8uXG4gKi9cbnZhciBlbnYgPSB7fTtcblxuaWYgKHR5cGVvZiB3eCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHd4LmdldFN5c3RlbUluZm9TeW5jID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIEluIFdlaXhpbiBBcHBsaWNhdGlvblxuICBlbnYgPSB7XG4gICAgYnJvd3Nlcjoge30sXG4gICAgb3M6IHt9LFxuICAgIG5vZGU6IGZhbHNlLFxuICAgIHd4YTogdHJ1ZSxcbiAgICAvLyBXZWl4aW4gQXBwbGljYXRpb25cbiAgICBjYW52YXNTdXBwb3J0ZWQ6IHRydWUsXG4gICAgc3ZnU3VwcG9ydGVkOiBmYWxzZSxcbiAgICB0b3VjaEV2ZW50c1N1cHBvcnRlZDogdHJ1ZVxuICB9O1xufSBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAvLyBJbiB3b3JrZXJcbiAgZW52ID0ge1xuICAgIGJyb3dzZXI6IHt9LFxuICAgIG9zOiB7fSxcbiAgICBub2RlOiBmYWxzZSxcbiAgICB3b3JrZXI6IHRydWUsXG4gICAgY2FudmFzU3VwcG9ydGVkOiB0cnVlXG4gIH07XG59IGVsc2UgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnKSB7XG4gIC8vIEluIG5vZGVcbiAgZW52ID0ge1xuICAgIGJyb3dzZXI6IHt9LFxuICAgIG9zOiB7fSxcbiAgICBub2RlOiB0cnVlLFxuICAgIHdvcmtlcjogZmFsc2UsXG4gICAgLy8gQXNzdW1lIGNhbnZhcyBpcyBzdXBwb3J0ZWRcbiAgICBjYW52YXNTdXBwb3J0ZWQ6IHRydWUsXG4gICAgc3ZnU3VwcG9ydGVkOiB0cnVlXG4gIH07XG59IGVsc2Uge1xuICBlbnYgPSBkZXRlY3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG59XG5cbnZhciBfZGVmYXVsdCA9IGVudjsgLy8gWmVwdG8uanNcbi8vIChjKSAyMDEwLTIwMTMgVGhvbWFzIEZ1Y2hzXG4vLyBaZXB0by5qcyBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cblxuZnVuY3Rpb24gZGV0ZWN0KHVhKSB7XG4gIHZhciBvcyA9IHt9O1xuICB2YXIgYnJvd3NlciA9IHt9OyAvLyB2YXIgd2Via2l0ID0gdWEubWF0Y2goL1dlYltrS11pdFtcXC9dezAsMX0oW1xcZC5dKykvKTtcbiAgLy8gdmFyIGFuZHJvaWQgPSB1YS5tYXRjaCgvKEFuZHJvaWQpOz9bXFxzXFwvXSsoW1xcZC5dKyk/Lyk7XG4gIC8vIHZhciBpcGFkID0gdWEubWF0Y2goLyhpUGFkKS4qT1NcXHMoW1xcZF9dKykvKTtcbiAgLy8gdmFyIGlwb2QgPSB1YS5tYXRjaCgvKGlQb2QpKC4qT1NcXHMoW1xcZF9dKykpPy8pO1xuICAvLyB2YXIgaXBob25lID0gIWlwYWQgJiYgdWEubWF0Y2goLyhpUGhvbmVcXHNPUylcXHMoW1xcZF9dKykvKTtcbiAgLy8gdmFyIHdlYm9zID0gdWEubWF0Y2goLyh3ZWJPU3xocHdPUylbXFxzXFwvXShbXFxkLl0rKS8pO1xuICAvLyB2YXIgdG91Y2hwYWQgPSB3ZWJvcyAmJiB1YS5tYXRjaCgvVG91Y2hQYWQvKTtcbiAgLy8gdmFyIGtpbmRsZSA9IHVhLm1hdGNoKC9LaW5kbGVcXC8oW1xcZC5dKykvKTtcbiAgLy8gdmFyIHNpbGsgPSB1YS5tYXRjaCgvU2lsa1xcLyhbXFxkLl9dKykvKTtcbiAgLy8gdmFyIGJsYWNrYmVycnkgPSB1YS5tYXRjaCgvKEJsYWNrQmVycnkpLipWZXJzaW9uXFwvKFtcXGQuXSspLyk7XG4gIC8vIHZhciBiYjEwID0gdWEubWF0Y2goLyhCQjEwKS4qVmVyc2lvblxcLyhbXFxkLl0rKS8pO1xuICAvLyB2YXIgcmltdGFibGV0b3MgPSB1YS5tYXRjaCgvKFJJTVxcc1RhYmxldFxcc09TKVxccyhbXFxkLl0rKS8pO1xuICAvLyB2YXIgcGxheWJvb2sgPSB1YS5tYXRjaCgvUGxheUJvb2svKTtcbiAgLy8gdmFyIGNocm9tZSA9IHVhLm1hdGNoKC9DaHJvbWVcXC8oW1xcZC5dKykvKSB8fCB1YS5tYXRjaCgvQ3JpT1NcXC8oW1xcZC5dKykvKTtcblxuICB2YXIgZmlyZWZveCA9IHVhLm1hdGNoKC9GaXJlZm94XFwvKFtcXGQuXSspLyk7IC8vIHZhciBzYWZhcmkgPSB3ZWJraXQgJiYgdWEubWF0Y2goL01vYmlsZVxcLy8pICYmICFjaHJvbWU7XG4gIC8vIHZhciB3ZWJ2aWV3ID0gdWEubWF0Y2goLyhpUGhvbmV8aVBvZHxpUGFkKS4qQXBwbGVXZWJLaXQoPyEuKlNhZmFyaSkvKSAmJiAhY2hyb21lO1xuXG4gIHZhciBpZSA9IHVhLm1hdGNoKC9NU0lFXFxzKFtcXGQuXSspLykgLy8gSUUgMTEgVHJpZGVudC83LjA7IHJ2OjExLjBcbiAgfHwgdWEubWF0Y2goL1RyaWRlbnRcXC8uKz9ydjooKFtcXGQuXSspKS8pO1xuICB2YXIgZWRnZSA9IHVhLm1hdGNoKC9FZGdlXFwvKFtcXGQuXSspLyk7IC8vIElFIDEyIGFuZCAxMitcblxuICB2YXIgd2VDaGF0ID0gL21pY3JvbWVzc2VuZ2VyL2kudGVzdCh1YSk7IC8vIFRvZG86IGNsZWFuIHRoaXMgdXAgd2l0aCBhIGJldHRlciBPUy9icm93c2VyIHNlcGVyYXRpb246XG4gIC8vIC0gZGlzY2VybiAobW9yZSkgYmV0d2VlbiBtdWx0aXBsZSBicm93c2VycyBvbiBhbmRyb2lkXG4gIC8vIC0gZGVjaWRlIGlmIGtpbmRsZSBmaXJlIGluIHNpbGsgbW9kZSBpcyBhbmRyb2lkIG9yIG5vdFxuICAvLyAtIEZpcmVmb3ggb24gQW5kcm9pZCBkb2Vzbid0IHNwZWNpZnkgdGhlIEFuZHJvaWQgdmVyc2lvblxuICAvLyAtIHBvc3NpYmx5IGRldmlkZSBpbiBvcywgZGV2aWNlIGFuZCBicm93c2VyIGhhc2hlc1xuICAvLyBpZiAoYnJvd3Nlci53ZWJraXQgPSAhIXdlYmtpdCkgYnJvd3Nlci52ZXJzaW9uID0gd2Via2l0WzFdO1xuICAvLyBpZiAoYW5kcm9pZCkgb3MuYW5kcm9pZCA9IHRydWUsIG9zLnZlcnNpb24gPSBhbmRyb2lkWzJdO1xuICAvLyBpZiAoaXBob25lICYmICFpcG9kKSBvcy5pb3MgPSBvcy5pcGhvbmUgPSB0cnVlLCBvcy52ZXJzaW9uID0gaXBob25lWzJdLnJlcGxhY2UoL18vZywgJy4nKTtcbiAgLy8gaWYgKGlwYWQpIG9zLmlvcyA9IG9zLmlwYWQgPSB0cnVlLCBvcy52ZXJzaW9uID0gaXBhZFsyXS5yZXBsYWNlKC9fL2csICcuJyk7XG4gIC8vIGlmIChpcG9kKSBvcy5pb3MgPSBvcy5pcG9kID0gdHJ1ZSwgb3MudmVyc2lvbiA9IGlwb2RbM10gPyBpcG9kWzNdLnJlcGxhY2UoL18vZywgJy4nKSA6IG51bGw7XG4gIC8vIGlmICh3ZWJvcykgb3Mud2Vib3MgPSB0cnVlLCBvcy52ZXJzaW9uID0gd2Vib3NbMl07XG4gIC8vIGlmICh0b3VjaHBhZCkgb3MudG91Y2hwYWQgPSB0cnVlO1xuICAvLyBpZiAoYmxhY2tiZXJyeSkgb3MuYmxhY2tiZXJyeSA9IHRydWUsIG9zLnZlcnNpb24gPSBibGFja2JlcnJ5WzJdO1xuICAvLyBpZiAoYmIxMCkgb3MuYmIxMCA9IHRydWUsIG9zLnZlcnNpb24gPSBiYjEwWzJdO1xuICAvLyBpZiAocmltdGFibGV0b3MpIG9zLnJpbXRhYmxldG9zID0gdHJ1ZSwgb3MudmVyc2lvbiA9IHJpbXRhYmxldG9zWzJdO1xuICAvLyBpZiAocGxheWJvb2spIGJyb3dzZXIucGxheWJvb2sgPSB0cnVlO1xuICAvLyBpZiAoa2luZGxlKSBvcy5raW5kbGUgPSB0cnVlLCBvcy52ZXJzaW9uID0ga2luZGxlWzFdO1xuICAvLyBpZiAoc2lsaykgYnJvd3Nlci5zaWxrID0gdHJ1ZSwgYnJvd3Nlci52ZXJzaW9uID0gc2lsa1sxXTtcbiAgLy8gaWYgKCFzaWxrICYmIG9zLmFuZHJvaWQgJiYgdWEubWF0Y2goL0tpbmRsZSBGaXJlLykpIGJyb3dzZXIuc2lsayA9IHRydWU7XG4gIC8vIGlmIChjaHJvbWUpIGJyb3dzZXIuY2hyb21lID0gdHJ1ZSwgYnJvd3Nlci52ZXJzaW9uID0gY2hyb21lWzFdO1xuXG4gIGlmIChmaXJlZm94KSB7XG4gICAgYnJvd3Nlci5maXJlZm94ID0gdHJ1ZTtcbiAgICBicm93c2VyLnZlcnNpb24gPSBmaXJlZm94WzFdO1xuICB9IC8vIGlmIChzYWZhcmkgJiYgKHVhLm1hdGNoKC9TYWZhcmkvKSB8fCAhIW9zLmlvcykpIGJyb3dzZXIuc2FmYXJpID0gdHJ1ZTtcbiAgLy8gaWYgKHdlYnZpZXcpIGJyb3dzZXIud2VidmlldyA9IHRydWU7XG5cblxuICBpZiAoaWUpIHtcbiAgICBicm93c2VyLmllID0gdHJ1ZTtcbiAgICBicm93c2VyLnZlcnNpb24gPSBpZVsxXTtcbiAgfVxuXG4gIGlmIChlZGdlKSB7XG4gICAgYnJvd3Nlci5lZGdlID0gdHJ1ZTtcbiAgICBicm93c2VyLnZlcnNpb24gPSBlZGdlWzFdO1xuICB9IC8vIEl0IGlzIGRpZmZpY3VsdCB0byBkZXRlY3QgV2VDaGF0IGluIFdpbiBQaG9uZSBwcmVjaXNlbHksIGJlY2F1c2UgdWEgY2FuXG4gIC8vIG5vdCBiZSBzZXQgb24gd2luIHBob25lLiBTbyB3ZSBkbyBub3QgY29uc2lkZXIgV2luIFBob25lLlxuXG5cbiAgaWYgKHdlQ2hhdCkge1xuICAgIGJyb3dzZXIud2VDaGF0ID0gdHJ1ZTtcbiAgfSAvLyBvcy50YWJsZXQgPSAhIShpcGFkIHx8IHBsYXlib29rIHx8IChhbmRyb2lkICYmICF1YS5tYXRjaCgvTW9iaWxlLykpIHx8XG4gIC8vICAgICAoZmlyZWZveCAmJiB1YS5tYXRjaCgvVGFibGV0LykpIHx8IChpZSAmJiAhdWEubWF0Y2goL1Bob25lLykgJiYgdWEubWF0Y2goL1RvdWNoLykpKTtcbiAgLy8gb3MucGhvbmUgID0gISEoIW9zLnRhYmxldCAmJiAhb3MuaXBvZCAmJiAoYW5kcm9pZCB8fCBpcGhvbmUgfHwgd2Vib3MgfHxcbiAgLy8gICAgIChjaHJvbWUgJiYgdWEubWF0Y2goL0FuZHJvaWQvKSkgfHwgKGNocm9tZSAmJiB1YS5tYXRjaCgvQ3JpT1NcXC8oW1xcZC5dKykvKSkgfHxcbiAgLy8gICAgIChmaXJlZm94ICYmIHVhLm1hdGNoKC9Nb2JpbGUvKSkgfHwgKGllICYmIHVhLm1hdGNoKC9Ub3VjaC8pKSkpO1xuXG5cbiAgcmV0dXJuIHtcbiAgICBicm93c2VyOiBicm93c2VyLFxuICAgIG9zOiBvcyxcbiAgICBub2RlOiBmYWxzZSxcbiAgICAvLyDljp/nlJ9jYW52YXPmlK/mjIHvvIzmlLnmnoHnq6/ngrnkuoZcbiAgICAvLyBjYW52YXNTdXBwb3J0ZWQgOiAhKGJyb3dzZXIuaWUgJiYgcGFyc2VGbG9hdChicm93c2VyLnZlcnNpb24pIDwgOSlcbiAgICBjYW52YXNTdXBwb3J0ZWQ6ICEhZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykuZ2V0Q29udGV4dCxcbiAgICBzdmdTdXBwb3J0ZWQ6IHR5cGVvZiBTVkdSZWN0ICE9PSAndW5kZWZpbmVkJyxcbiAgICAvLyB3b3JrcyBvbiBtb3N0IGJyb3dzZXJzXG4gICAgLy8gSUUxMC8xMSBkb2VzIG5vdCBzdXBwb3J0IHRvdWNoIGV2ZW50LCBhbmQgTVMgRWRnZSBzdXBwb3J0cyB0aGVtIGJ1dCBub3QgYnlcbiAgICAvLyBkZWZhdWx0LCBzbyB3ZSBkb250IGNoZWNrIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyBmb3IgdGhlbSBoZXJlLlxuICAgIHRvdWNoRXZlbnRzU3VwcG9ydGVkOiAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgJiYgIWJyb3dzZXIuaWUgJiYgIWJyb3dzZXIuZWRnZSxcbiAgICAvLyA8aHR0cDovL2Nhbml1c2UuY29tLyNzZWFyY2g9cG9pbnRlciUyMGV2ZW50Pi5cbiAgICBwb2ludGVyRXZlbnRzU3VwcG9ydGVkOiAnb25wb2ludGVyZG93bicgaW4gd2luZG93IC8vIEZpcmVmb3ggc3VwcG9ydHMgcG9pbnRlciBidXQgbm90IGJ5IGRlZmF1bHQsIG9ubHkgTVMgYnJvd3NlcnMgYXJlIHJlbGlhYmxlIG9uIHBvaW50ZXJcbiAgICAvLyBldmVudHMgY3VycmVudGx5LiBTbyB3ZSBkb250IHVzZSB0aGF0IG9uIG90aGVyIGJyb3dzZXJzIHVubGVzcyB0ZXN0ZWQgc3VmZmljaWVudGx5LlxuICAgIC8vIEFsdGhvdWdoIElFIDEwIHN1cHBvcnRzIHBvaW50ZXIgZXZlbnQsIGl0IHVzZSBvbGQgc3R5bGUgYW5kIGlzIGRpZmZlcmVudCBmcm9tIHRoZVxuICAgIC8vIHN0YW5kYXJkLiBTbyB3ZSBleGNsdWRlIHRoYXQuIChJRSAxMCBpcyBoYXJkbHkgdXNlZCBvbiB0b3VjaCBkZXZpY2UpXG4gICAgJiYgKGJyb3dzZXIuZWRnZSB8fCBicm93c2VyLmllICYmIGJyb3dzZXIudmVyc2lvbiA+PSAxMSkgLy8gcGFzc2l2ZVN1cHBvcnRlZDogZGV0ZWN0UGFzc2l2ZVN1cHBvcnQoKVxuXG4gIH07XG59IC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9FdmVudExpc3RlbmVyT3B0aW9ucy9ibG9iL2doLXBhZ2VzL2V4cGxhaW5lci5tZCNmZWF0dXJlLWRldGVjdGlvblxuLy8gZnVuY3Rpb24gZGV0ZWN0UGFzc2l2ZVN1cHBvcnQoKSB7XG4vLyAgICAgLy8gVGVzdCB2aWEgYSBnZXR0ZXIgaW4gdGhlIG9wdGlvbnMgb2JqZWN0IHRvIHNlZSBpZiB0aGUgcGFzc2l2ZSBwcm9wZXJ0eSBpcyBhY2Nlc3NlZFxuLy8gICAgIHZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbi8vICAgICB0cnkge1xuLy8gICAgICAgICB2YXIgb3B0cyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XG4vLyAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuLy8gICAgICAgICAgICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH0pO1xuLy8gICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdFBhc3NpdmUnLCBmdW5jdGlvbigpIHt9LCBvcHRzKTtcbi8vICAgICB9IGNhdGNoIChlKSB7XG4vLyAgICAgfVxuLy8gICAgIHJldHVybiBzdXBwb3J0c1Bhc3NpdmU7XG4vLyB9XG5cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgRXZlbnRmdWwgPSByZXF1aXJlKFwiLi4vbWl4aW4vRXZlbnRmdWxcIik7XG5cbmV4cG9ydHMuRGlzcGF0Y2hlciA9IEV2ZW50ZnVsO1xuXG52YXIgZW52ID0gcmVxdWlyZShcIi4vZW52XCIpO1xuXG4vKipcbiAqIOS6i+S7tui+heWKqeexu1xuICogQG1vZHVsZSB6cmVuZGVyL2NvcmUvZXZlbnRcbiAqIEBhdXRob3IgS2VuZXIgKEBLZW5lci3mnpfls7AsIGtlbmVyLmxpbmZlbmdAZ21haWwuY29tKVxuICovXG52YXIgaXNEb21MZXZlbDIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAhIXdpbmRvdy5hZGRFdmVudExpc3RlbmVyO1xudmFyIE1PVVNFX0VWRU5UX1JFRyA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLztcblxuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsKSB7XG4gIC8vIEJsYWNrQmVycnkgNSwgaU9TIDMgKG9yaWdpbmFsIGlQaG9uZSkgZG9uJ3QgaGF2ZSBnZXRCb3VuZGluZ1JlY3RcbiAgcmV0dXJuIGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCA/IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDoge1xuICAgIGxlZnQ6IDAsXG4gICAgdG9wOiAwXG4gIH07XG59IC8vIGBjYWxjdWxhdGVgIGlzIG9wdGlvbmFsLCBkZWZhdWx0IGZhbHNlXG5cblxuZnVuY3Rpb24gY2xpZW50VG9Mb2NhbChlbCwgZSwgb3V0LCBjYWxjdWxhdGUpIHtcbiAgb3V0ID0gb3V0IHx8IHt9OyAvLyBBY2NvcmRpbmcgdG8gdGhlIFczQyBXb3JraW5nIERyYWZ0LCBvZmZzZXRYIGFuZCBvZmZzZXRZIHNob3VsZCBiZSByZWxhdGl2ZVxuICAvLyB0byB0aGUgcGFkZGluZyBlZGdlIG9mIHRoZSB0YXJnZXQgZWxlbWVudC4gVGhlIG9ubHkgYnJvd3NlciB1c2luZyB0aGlzIGNvbnZlbnRpb25cbiAgLy8gaXMgSUUuIFdlYmtpdCB1c2VzIHRoZSBib3JkZXIgZWRnZSwgT3BlcmEgdXNlcyB0aGUgY29udGVudCBlZGdlLCBhbmQgRmlyZUZveCBkb2VzXG4gIC8vIG5vdCBzdXBwb3J0IHRoZSBwcm9wZXJ0aWVzLlxuICAvLyAoc2VlIGh0dHA6Ly93d3cuamFja2xtb29yZS5jb20vbm90ZXMvbW91c2UtcG9zaXRpb24vKVxuICAvLyBJbiB6ciBwYWludGVyLmRvbSwgcGFkZGluZyBlZGdlIGVxdWFscyB0byBib3JkZXIgZWRnZS5cbiAgLy8gRklYTUVcbiAgLy8gV2hlbiBtb3VzZW1vdmUgZXZlbnQgdHJpZ2dlcmVkIG9uIGVjIHRvb2x0aXAsIHRhcmdldCBpcyBub3QgenIgcGFpbnRlci5kb20sIGFuZFxuICAvLyBvZmZzZXRYL1kgaXMgcmVsYXRpdmUgdG8gZS50YXJnZXQsIHdoZXJlIHRoZSBjYWxjdWxhdGlvbiBvZiB6clgvWSB2aWEgb2Zmc2V0WC9ZXG4gIC8vIGlzIHRvbyBjb21wbGV4LiBTbyBjc3MtdHJhbnNmcm9tIGRvbnQgc3VwcG9ydCBpbiB0aGlzIGNhc2UgdGVtcG9yYXJpbHkuXG5cbiAgaWYgKGNhbGN1bGF0ZSB8fCAhZW52LmNhbnZhc1N1cHBvcnRlZCkge1xuICAgIGRlZmF1bHRHZXRaclhZKGVsLCBlLCBvdXQpO1xuICB9IC8vIENhdXRpb246IEluIEZpcmVGb3gsIGxheWVyWC9sYXllclkgTW91c2UgcG9zaXRpb24gcmVsYXRpdmUgdG8gdGhlIGNsb3Nlc3QgcG9zaXRpb25lZFxuICAvLyBhbmNlc3RvciBlbGVtZW50LCBzbyB3ZSBzaG91bGQgbWFrZSBzdXJlIGVsIGlzIHBvc2l0aW9uZWQgKGUuZy4sIG5vdCBwb3NpdGlvbjpzdGF0aWMpLlxuICAvLyBCVFcxLCBXZWJraXQgZG9uJ3QgcmV0dXJuIHRoZSBzYW1lIHJlc3VsdHMgYXMgRkYgaW4gbm9uLXNpbXBsZSBjYXNlcyAobGlrZSBhZGRcbiAgLy8gem9vbS1mYWN0b3IsIG92ZXJmbG93IC8gb3BhY2l0eSBsYXllcnMsIHRyYW5zZm9ybXMgLi4uKVxuICAvLyBCVFcyLCAoZXYub2Zmc2V0WSB8fCBldi5wYWdlWSAtICQoZXYudGFyZ2V0KS5vZmZzZXQoKS50b3ApIGlzIG5vdCBjb3JyZWN0IGluIHByZXNlcnZlLTNkLlxuICAvLyA8aHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0Lzg1MjMjY29tbWVudDoxND5cbiAgLy8gQlRXMywgSW4gZmYsIG9mZnNldFgvb2Zmc2V0WSBpcyBhbHdheXMgMC5cbiAgZWxzZSBpZiAoZW52LmJyb3dzZXIuZmlyZWZveCAmJiBlLmxheWVyWCAhPSBudWxsICYmIGUubGF5ZXJYICE9PSBlLm9mZnNldFgpIHtcbiAgICAgIG91dC56clggPSBlLmxheWVyWDtcbiAgICAgIG91dC56clkgPSBlLmxheWVyWTtcbiAgICB9IC8vIEZvciBJRTYrLCBjaHJvbWUsIHNhZmFyaSwgb3BlcmEuIChXaGVuIHdpbGwgZmYgc3VwcG9ydCBvZmZzZXRYPylcbiAgICBlbHNlIGlmIChlLm9mZnNldFggIT0gbnVsbCkge1xuICAgICAgICBvdXQuenJYID0gZS5vZmZzZXRYO1xuICAgICAgICBvdXQuenJZID0gZS5vZmZzZXRZO1xuICAgICAgfSAvLyBGb3Igc29tZSBvdGhlciBkZXZpY2UsIGUuZy4sIElPUyBzYWZhcmkuXG4gICAgICBlbHNlIHtcbiAgICAgICAgICBkZWZhdWx0R2V0WnJYWShlbCwgZSwgb3V0KTtcbiAgICAgICAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRHZXRaclhZKGVsLCBlLCBvdXQpIHtcbiAgLy8gVGhpcyB3ZWxsLWtub3duIG1ldGhvZCBiZWxvdyBkb2VzIG5vdCBzdXBwb3J0IGNzcyB0cmFuc2Zvcm0uXG4gIHZhciBib3ggPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWwpO1xuICBvdXQuenJYID0gZS5jbGllbnRYIC0gYm94LmxlZnQ7XG4gIG91dC56clkgPSBlLmNsaWVudFkgLSBib3gudG9wO1xufVxuLyoqXG4gKiDlpoLmnpzlrZjlnKjnrKzkuInmlrnltYzlhaXnmoTkuIDkuptkb23op6blj5HnmoTkuovku7bvvIzmiJZ0b3VjaOS6i+S7tu+8jOmcgOimgei9rOaNouS4gOS4i+S6i+S7tuWdkOaghy5cbiAqIGBjYWxjdWxhdGVgIGlzIG9wdGlvbmFsLCBkZWZhdWx0IGZhbHNlLlxuICovXG5cblxuZnVuY3Rpb24gbm9ybWFsaXplRXZlbnQoZWwsIGUsIGNhbGN1bGF0ZSkge1xuICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG5cbiAgaWYgKGUuenJYICE9IG51bGwpIHtcbiAgICByZXR1cm4gZTtcbiAgfVxuXG4gIHZhciBldmVudFR5cGUgPSBlLnR5cGU7XG4gIHZhciBpc1RvdWNoID0gZXZlbnRUeXBlICYmIGV2ZW50VHlwZS5pbmRleE9mKCd0b3VjaCcpID49IDA7XG5cbiAgaWYgKCFpc1RvdWNoKSB7XG4gICAgY2xpZW50VG9Mb2NhbChlbCwgZSwgZSwgY2FsY3VsYXRlKTtcbiAgICBlLnpyRGVsdGEgPSBlLndoZWVsRGVsdGEgPyBlLndoZWVsRGVsdGEgLyAxMjAgOiAtKGUuZGV0YWlsIHx8IDApIC8gMztcbiAgfSBlbHNlIHtcbiAgICB2YXIgdG91Y2ggPSBldmVudFR5cGUgIT0gJ3RvdWNoZW5kJyA/IGUudGFyZ2V0VG91Y2hlc1swXSA6IGUuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgdG91Y2ggJiYgY2xpZW50VG9Mb2NhbChlbCwgdG91Y2gsIGUsIGNhbGN1bGF0ZSk7XG4gIH0gLy8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodDsgb3RoZXJ3aXNlOiAwO1xuICAvLyBTZWUgalF1ZXJ5OiBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9ibG9iL21hc3Rlci9zcmMvZXZlbnQuanNcbiAgLy8gSWYgZS53aGljaCBoYXMgYmVlbiBkZWZpbmVkLCBpZiBtYXkgYmUgcmVhZG9ubHksXG4gIC8vIHNlZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL01vdXNlRXZlbnQvd2hpY2hcblxuXG4gIHZhciBidXR0b24gPSBlLmJ1dHRvbjtcblxuICBpZiAoZS53aGljaCA9PSBudWxsICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIE1PVVNFX0VWRU5UX1JFRy50ZXN0KGUudHlwZSkpIHtcbiAgICBlLndoaWNoID0gYnV0dG9uICYgMSA/IDEgOiBidXR0b24gJiAyID8gMyA6IGJ1dHRvbiAmIDQgPyAyIDogMDtcbiAgfVxuXG4gIHJldHVybiBlO1xufVxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcbiAqL1xuXG5cbmZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoZWwsIG5hbWUsIGhhbmRsZXIpIHtcbiAgaWYgKGlzRG9tTGV2ZWwyKSB7XG4gICAgLy8gUmVwcm9kdWN0IHRoZSBjb25zb2xlIHdhcm5pbmc6XG4gICAgLy8gW1Zpb2xhdGlvbl0gQWRkZWQgbm9uLXBhc3NpdmUgZXZlbnQgbGlzdGVuZXIgdG8gYSBzY3JvbGwtYmxvY2tpbmcgPHNvbWU+IGV2ZW50LlxuICAgIC8vIENvbnNpZGVyIG1hcmtpbmcgZXZlbnQgaGFuZGxlciBhcyAncGFzc2l2ZScgdG8gbWFrZSB0aGUgcGFnZSBtb3JlIHJlc3BvbnNpdmUuXG4gICAgLy8gSnVzdCBzZXQgY29uc29sZSBsb2cgbGV2ZWw6IHZlcmJvc2UgaW4gY2hyb21lIGRldiB0b29sLlxuICAgIC8vIHRoZW4gdGhlIHdhcm5pbmcgbG9nIHdpbGwgYmUgcHJpbnRlZCB3aGVuIGFkZEV2ZW50TGlzdGVuZXIgY2FsbGVkLlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9FdmVudExpc3RlbmVyT3B0aW9ucy9ibG9iL2doLXBhZ2VzL2V4cGxhaW5lci5tZFxuICAgIC8vIFdlIGhhdmUgbm90IHlldCBmb3VuZCBhIG5lYXQgd2F5IHRvIHVzaW5nIHBhc3NpdmUuIEJlY2F1c2UgaW4genJlbmRlciB0aGUgZG9tIGV2ZW50XG4gICAgLy8gbGlzdGVuZXIgZGVsZWdhdGUgYWxsIG9mIHRoZSB1cHBlciBldmVudHMgb2YgZWxlbWVudC4gU29tZSBvZiB0aG9zZSBldmVudHMgbmVlZFxuICAgIC8vIHRvIHByZXZlbnQgZGVmYXVsdC4gRm9yIGV4YW1wbGUsIHRoZSBmZWF0dXJlIGBwcmV2ZW50RGVmYXVsdE1vdXNlTW92ZWAgb2YgZWNoYXJ0cy5cbiAgICAvLyBCZWZvcmUgcGFzc2l2ZSBjYW4gYmUgYWRvcHRlZCwgdGhlc2UgaXNzdWVzIHNob3VsZCBiZSBjb25zaWRlcmVkOlxuICAgIC8vICgxKSBXaGV0aGVyIGFuZCBob3cgYSB6cmVuZGVyIHVzZXIgc3BlY2lmaWVzIGFuIGV2ZW50IGxpc3RlbmVyIHBhc3NpdmUuIEFuZCBieSBkZWZhdWx0LFxuICAgIC8vIHBhc3NpdmUgb3Igbm90LlxuICAgIC8vICgyKSBIb3cgdG8gdHJlYWQgdGhhdCBzb21lIHpyZW5kZXIgZXZlbnQgbGlzdGVuZXIgaXMgcGFzc2l2ZSwgYW5kIHNvbWUgaXMgbm90LiBJZlxuICAgIC8vIHdlIHVzZSBvdGhlciB3YXkgYnV0IG5vdCBwcmV2ZW50RGVmYXVsdCBvZiBtb3VzZXdoZWVsIGFuZCB0b3VjaG1vdmUsIGJyb3dzZXJcbiAgICAvLyBjb21wYXRpYmlsaXR5IHNob3VsZCBiZSBoYW5kbGVkLlxuICAgIC8vIHZhciBvcHRzID0gKGVudi5wYXNzaXZlU3VwcG9ydGVkICYmIG5hbWUgPT09ICdtb3VzZXdoZWVsJylcbiAgICAvLyAgICAgPyB7cGFzc2l2ZTogdHJ1ZX1cbiAgICAvLyAgICAgLy8gQnkgZGVmYXVsdCwgdGhlIHRoaXJkIHBhcmFtIG9mIGVsLmFkZEV2ZW50TGlzdGVuZXIgaXMgYGNhcHR1cmU6IGZhbHNlYC5cbiAgICAvLyAgICAgOiB2b2lkIDA7XG4gICAgLy8gZWwuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBoYW5kbGVyIC8qICwgb3B0cyAqLyk7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBoYW5kbGVyKTtcbiAgfSBlbHNlIHtcbiAgICBlbC5hdHRhY2hFdmVudCgnb24nICsgbmFtZSwgaGFuZGxlcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihlbCwgbmFtZSwgaGFuZGxlcikge1xuICBpZiAoaXNEb21MZXZlbDIpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGhhbmRsZXIpO1xuICB9IGVsc2Uge1xuICAgIGVsLmRldGFjaEV2ZW50KCdvbicgKyBuYW1lLCBoYW5kbGVyKTtcbiAgfVxufVxuLyoqXG4gKiBwcmV2ZW50RGVmYXVsdCBhbmQgc3RvcFByb3BhZ2F0aW9uLlxuICogTm90aWNlOiBkbyBub3QgZG8gdGhhdCBpbiB6cmVuZGVyLiBVcHBlciBhcHBsaWNhdGlvblxuICogZG8gdGhhdCBpZiBuZWNlc3NhcnkuXG4gKlxuICogQG1lbWJlck9mIG1vZHVsZTp6cmVuZGVyL2NvcmUvZXZlbnRcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7RXZlbnR9IGUgOiBldmVudOWvueixoVxuICovXG5cblxudmFyIHN0b3AgPSBpc0RvbUxldmVsMiA/IGZ1bmN0aW9uIChlKSB7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbiAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgZS5jYW5jZWxCdWJibGUgPSB0cnVlO1xufSA6IGZ1bmN0aW9uIChlKSB7XG4gIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgZS5jYW5jZWxCdWJibGUgPSB0cnVlO1xufTtcblxuZnVuY3Rpb24gbm90TGVmdE1vdXNlKGUpIHtcbiAgLy8gSWYgZS53aGljaCBpcyB1bmRlZmluZWQsIGNvbnNpZGVyZWQgYXMgbGVmdCBtb3VzZSBldmVudC5cbiAgcmV0dXJuIGUud2hpY2ggPiAxO1xufSAvLyDlgZrlkJHkuIrlhbzlrrlcblxuXG5leHBvcnRzLmNsaWVudFRvTG9jYWwgPSBjbGllbnRUb0xvY2FsO1xuZXhwb3J0cy5ub3JtYWxpemVFdmVudCA9IG5vcm1hbGl6ZUV2ZW50O1xuZXhwb3J0cy5hZGRFdmVudExpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcjtcbmV4cG9ydHMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IHJlbW92ZUV2ZW50TGlzdGVuZXI7XG5leHBvcnRzLnN0b3AgPSBzdG9wO1xuZXhwb3J0cy5ub3RMZWZ0TW91c2UgPSBub3RMZWZ0TW91c2U7IiwiLyoqXG4gKiB6cmVuZGVyOiDnlJ/miJDllK/kuIBpZFxuICpcbiAqIEBhdXRob3IgZXJyb3JyaWsgKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xudmFyIGlkU3RhcnQgPSAweDA5MDc7XG5cbmZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICByZXR1cm4gaWRTdGFydCsrO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBfY29uZmlnID0gcmVxdWlyZShcIi4uL2NvbmZpZ1wiKTtcblxudmFyIGRlYnVnTW9kZSA9IF9jb25maWcuZGVidWdNb2RlO1xuXG52YXIgbG9nID0gZnVuY3Rpb24gKCkge307XG5cbmlmIChkZWJ1Z01vZGUgPT09IDEpIHtcbiAgbG9nID0gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIGsgaW4gYXJndW1lbnRzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYXJndW1lbnRzW2tdKTtcbiAgICB9XG4gIH07XG59IGVsc2UgaWYgKGRlYnVnTW9kZSA+IDEpIHtcbiAgbG9nID0gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIGsgaW4gYXJndW1lbnRzKSB7XG4gICAgICBjb25zb2xlLmxvZyhhcmd1bWVudHNba10pO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIF9kZWZhdWx0ID0gbG9nO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCIvKipcbiAqIDN4MuefqemYteaTjeS9nOexu1xuICogQGV4cG9ydHMgenJlbmRlci90b29sL21hdHJpeFxuICovXG52YXIgQXJyYXlDdG9yID0gdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyBBcnJheSA6IEZsb2F0MzJBcnJheTtcbi8qKlxuICogQ3JlYXRlIGEgaWRlbnRpdHkgbWF0cml4LlxuICogQHJldHVybiB7RmxvYXQzMkFycmF5fEFycmF5LjxudW1iZXI+fVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgdmFyIG91dCA9IG5ldyBBcnJheUN0b3IoNik7XG4gIGlkZW50aXR5KG91dCk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIOiuvue9ruefqemYteS4uuWNleS9jeefqemYtVxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXl8QXJyYXkuPG51bWJlcj59IG91dFxuICovXG5cblxuZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDE7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IDA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIOWkjeWItuefqemYtVxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXl8QXJyYXkuPG51bWJlcj59IG91dFxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXl8QXJyYXkuPG51bWJlcj59IG1cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvcHkob3V0LCBtKSB7XG4gIG91dFswXSA9IG1bMF07XG4gIG91dFsxXSA9IG1bMV07XG4gIG91dFsyXSA9IG1bMl07XG4gIG91dFszXSA9IG1bM107XG4gIG91dFs0XSA9IG1bNF07XG4gIG91dFs1XSA9IG1bNV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIOefqemYteebuOS5mFxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXl8QXJyYXkuPG51bWJlcj59IG91dFxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXl8QXJyYXkuPG51bWJlcj59IG0xXG4gKiBAcGFyYW0ge0Zsb2F0MzJBcnJheXxBcnJheS48bnVtYmVyPn0gbTJcbiAqL1xuXG5cbmZ1bmN0aW9uIG11bChvdXQsIG0xLCBtMikge1xuICAvLyBDb25zaWRlciBtYXRyaXgubXVsKG0sIG0yLCBtKTtcbiAgLy8gd2hlcmUgb3V0IGlzIHRoZSBzYW1lIGFzIG0yLlxuICAvLyBTbyB1c2UgdGVtcCB2YXJpYWJsZSB0byBlc2NhcGUgZXJyb3IuXG4gIHZhciBvdXQwID0gbTFbMF0gKiBtMlswXSArIG0xWzJdICogbTJbMV07XG4gIHZhciBvdXQxID0gbTFbMV0gKiBtMlswXSArIG0xWzNdICogbTJbMV07XG4gIHZhciBvdXQyID0gbTFbMF0gKiBtMlsyXSArIG0xWzJdICogbTJbM107XG4gIHZhciBvdXQzID0gbTFbMV0gKiBtMlsyXSArIG0xWzNdICogbTJbM107XG4gIHZhciBvdXQ0ID0gbTFbMF0gKiBtMls0XSArIG0xWzJdICogbTJbNV0gKyBtMVs0XTtcbiAgdmFyIG91dDUgPSBtMVsxXSAqIG0yWzRdICsgbTFbM10gKiBtMls1XSArIG0xWzVdO1xuICBvdXRbMF0gPSBvdXQwO1xuICBvdXRbMV0gPSBvdXQxO1xuICBvdXRbMl0gPSBvdXQyO1xuICBvdXRbM10gPSBvdXQzO1xuICBvdXRbNF0gPSBvdXQ0O1xuICBvdXRbNV0gPSBvdXQ1O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiDlubPnp7vlj5jmjaJcbiAqIEBwYXJhbSB7RmxvYXQzMkFycmF5fEFycmF5LjxudW1iZXI+fSBvdXRcbiAqIEBwYXJhbSB7RmxvYXQzMkFycmF5fEFycmF5LjxudW1iZXI+fSBhXG4gKiBAcGFyYW0ge0Zsb2F0MzJBcnJheXxBcnJheS48bnVtYmVyPn0gdlxuICovXG5cblxuZnVuY3Rpb24gdHJhbnNsYXRlKG91dCwgYSwgdikge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICBvdXRbNF0gPSBhWzRdICsgdlswXTtcbiAgb3V0WzVdID0gYVs1XSArIHZbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIOaXi+i9rOWPmOaNolxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXl8QXJyYXkuPG51bWJlcj59IG91dFxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXl8QXJyYXkuPG51bWJlcj59IGFcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWRcbiAqL1xuXG5cbmZ1bmN0aW9uIHJvdGF0ZShvdXQsIGEsIHJhZCkge1xuICB2YXIgYWEgPSBhWzBdO1xuICB2YXIgYWMgPSBhWzJdO1xuICB2YXIgYXR4ID0gYVs0XTtcbiAgdmFyIGFiID0gYVsxXTtcbiAgdmFyIGFkID0gYVszXTtcbiAgdmFyIGF0eSA9IGFbNV07XG4gIHZhciBzdCA9IE1hdGguc2luKHJhZCk7XG4gIHZhciBjdCA9IE1hdGguY29zKHJhZCk7XG4gIG91dFswXSA9IGFhICogY3QgKyBhYiAqIHN0O1xuICBvdXRbMV0gPSAtYWEgKiBzdCArIGFiICogY3Q7XG4gIG91dFsyXSA9IGFjICogY3QgKyBhZCAqIHN0O1xuICBvdXRbM10gPSAtYWMgKiBzdCArIGN0ICogYWQ7XG4gIG91dFs0XSA9IGN0ICogYXR4ICsgc3QgKiBhdHk7XG4gIG91dFs1XSA9IGN0ICogYXR5IC0gc3QgKiBhdHg7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIOe8qeaUvuWPmOaNolxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXl8QXJyYXkuPG51bWJlcj59IG91dFxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXl8QXJyYXkuPG51bWJlcj59IGFcbiAqIEBwYXJhbSB7RmxvYXQzMkFycmF5fEFycmF5LjxudW1iZXI+fSB2XG4gKi9cblxuXG5mdW5jdGlvbiBzY2FsZShvdXQsIGEsIHYpIHtcbiAgdmFyIHZ4ID0gdlswXTtcbiAgdmFyIHZ5ID0gdlsxXTtcbiAgb3V0WzBdID0gYVswXSAqIHZ4O1xuICBvdXRbMV0gPSBhWzFdICogdnk7XG4gIG91dFsyXSA9IGFbMl0gKiB2eDtcbiAgb3V0WzNdID0gYVszXSAqIHZ5O1xuICBvdXRbNF0gPSBhWzRdICogdng7XG4gIG91dFs1XSA9IGFbNV0gKiB2eTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICog5rGC6YCG55+p6Zi1XG4gKiBAcGFyYW0ge0Zsb2F0MzJBcnJheXxBcnJheS48bnVtYmVyPn0gb3V0XG4gKiBAcGFyYW0ge0Zsb2F0MzJBcnJheXxBcnJheS48bnVtYmVyPn0gYVxuICovXG5cblxuZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xuICB2YXIgYWEgPSBhWzBdO1xuICB2YXIgYWMgPSBhWzJdO1xuICB2YXIgYXR4ID0gYVs0XTtcbiAgdmFyIGFiID0gYVsxXTtcbiAgdmFyIGFkID0gYVszXTtcbiAgdmFyIGF0eSA9IGFbNV07XG4gIHZhciBkZXQgPSBhYSAqIGFkIC0gYWIgKiBhYztcblxuICBpZiAoIWRldCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZGV0ID0gMS4wIC8gZGV0O1xuICBvdXRbMF0gPSBhZCAqIGRldDtcbiAgb3V0WzFdID0gLWFiICogZGV0O1xuICBvdXRbMl0gPSAtYWMgKiBkZXQ7XG4gIG91dFszXSA9IGFhICogZGV0O1xuICBvdXRbNF0gPSAoYWMgKiBhdHkgLSBhZCAqIGF0eCkgKiBkZXQ7XG4gIG91dFs1XSA9IChhYiAqIGF0eCAtIGFhICogYXR5KSAqIGRldDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2xvbmUgYSBuZXcgbWF0cml4LlxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXl8QXJyYXkuPG51bWJlcj59IGFcbiAqL1xuXG5cbmZ1bmN0aW9uIGNsb25lKGEpIHtcbiAgdmFyIGIgPSBjcmVhdGUoKTtcbiAgY29weShiLCBhKTtcbiAgcmV0dXJuIGI7XG59XG5cbmV4cG9ydHMuY3JlYXRlID0gY3JlYXRlO1xuZXhwb3J0cy5pZGVudGl0eSA9IGlkZW50aXR5O1xuZXhwb3J0cy5jb3B5ID0gY29weTtcbmV4cG9ydHMubXVsID0gbXVsO1xuZXhwb3J0cy50cmFuc2xhdGUgPSB0cmFuc2xhdGU7XG5leHBvcnRzLnJvdGF0ZSA9IHJvdGF0ZTtcbmV4cG9ydHMuc2NhbGUgPSBzY2FsZTtcbmV4cG9ydHMuaW52ZXJ0ID0gaW52ZXJ0O1xuZXhwb3J0cy5jbG9uZSA9IGNsb25lOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9temljY2FyZC9ub2RlLXRpbXNvcnRcbnZhciBERUZBVUxUX01JTl9NRVJHRSA9IDMyO1xudmFyIERFRkFVTFRfTUlOX0dBTExPUElORyA9IDc7XG52YXIgREVGQVVMVF9UTVBfU1RPUkFHRV9MRU5HVEggPSAyNTY7XG5cbmZ1bmN0aW9uIG1pblJ1bkxlbmd0aChuKSB7XG4gIHZhciByID0gMDtcblxuICB3aGlsZSAobiA+PSBERUZBVUxUX01JTl9NRVJHRSkge1xuICAgIHIgfD0gbiAmIDE7XG4gICAgbiA+Pj0gMTtcbiAgfVxuXG4gIHJldHVybiBuICsgcjtcbn1cblxuZnVuY3Rpb24gbWFrZUFzY2VuZGluZ1J1bihhcnJheSwgbG8sIGhpLCBjb21wYXJlKSB7XG4gIHZhciBydW5IaSA9IGxvICsgMTtcblxuICBpZiAocnVuSGkgPT09IGhpKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICBpZiAoY29tcGFyZShhcnJheVtydW5IaSsrXSwgYXJyYXlbbG9dKSA8IDApIHtcbiAgICB3aGlsZSAocnVuSGkgPCBoaSAmJiBjb21wYXJlKGFycmF5W3J1bkhpXSwgYXJyYXlbcnVuSGkgLSAxXSkgPCAwKSB7XG4gICAgICBydW5IaSsrO1xuICAgIH1cblxuICAgIHJldmVyc2VSdW4oYXJyYXksIGxvLCBydW5IaSk7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHJ1bkhpIDwgaGkgJiYgY29tcGFyZShhcnJheVtydW5IaV0sIGFycmF5W3J1bkhpIC0gMV0pID49IDApIHtcbiAgICAgIHJ1bkhpKys7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJ1bkhpIC0gbG87XG59XG5cbmZ1bmN0aW9uIHJldmVyc2VSdW4oYXJyYXksIGxvLCBoaSkge1xuICBoaS0tO1xuXG4gIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgdmFyIHQgPSBhcnJheVtsb107XG4gICAgYXJyYXlbbG8rK10gPSBhcnJheVtoaV07XG4gICAgYXJyYXlbaGktLV0gPSB0O1xuICB9XG59XG5cbmZ1bmN0aW9uIGJpbmFyeUluc2VydGlvblNvcnQoYXJyYXksIGxvLCBoaSwgc3RhcnQsIGNvbXBhcmUpIHtcbiAgaWYgKHN0YXJ0ID09PSBsbykge1xuICAgIHN0YXJ0Kys7XG4gIH1cblxuICBmb3IgKDsgc3RhcnQgPCBoaTsgc3RhcnQrKykge1xuICAgIHZhciBwaXZvdCA9IGFycmF5W3N0YXJ0XTtcbiAgICB2YXIgbGVmdCA9IGxvO1xuICAgIHZhciByaWdodCA9IHN0YXJ0O1xuICAgIHZhciBtaWQ7XG5cbiAgICB3aGlsZSAobGVmdCA8IHJpZ2h0KSB7XG4gICAgICBtaWQgPSBsZWZ0ICsgcmlnaHQgPj4+IDE7XG5cbiAgICAgIGlmIChjb21wYXJlKHBpdm90LCBhcnJheVttaWRdKSA8IDApIHtcbiAgICAgICAgcmlnaHQgPSBtaWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZWZ0ID0gbWlkICsgMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbiA9IHN0YXJ0IC0gbGVmdDtcblxuICAgIHN3aXRjaCAobikge1xuICAgICAgY2FzZSAzOlxuICAgICAgICBhcnJheVtsZWZ0ICsgM10gPSBhcnJheVtsZWZ0ICsgMl07XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgYXJyYXlbbGVmdCArIDJdID0gYXJyYXlbbGVmdCArIDFdO1xuXG4gICAgICBjYXNlIDE6XG4gICAgICAgIGFycmF5W2xlZnQgKyAxXSA9IGFycmF5W2xlZnRdO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgd2hpbGUgKG4gPiAwKSB7XG4gICAgICAgICAgYXJyYXlbbGVmdCArIG5dID0gYXJyYXlbbGVmdCArIG4gLSAxXTtcbiAgICAgICAgICBuLS07XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGFycmF5W2xlZnRdID0gcGl2b3Q7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2FsbG9wTGVmdCh2YWx1ZSwgYXJyYXksIHN0YXJ0LCBsZW5ndGgsIGhpbnQsIGNvbXBhcmUpIHtcbiAgdmFyIGxhc3RPZmZzZXQgPSAwO1xuICB2YXIgbWF4T2Zmc2V0ID0gMDtcbiAgdmFyIG9mZnNldCA9IDE7XG5cbiAgaWYgKGNvbXBhcmUodmFsdWUsIGFycmF5W3N0YXJ0ICsgaGludF0pID4gMCkge1xuICAgIG1heE9mZnNldCA9IGxlbmd0aCAtIGhpbnQ7XG5cbiAgICB3aGlsZSAob2Zmc2V0IDwgbWF4T2Zmc2V0ICYmIGNvbXBhcmUodmFsdWUsIGFycmF5W3N0YXJ0ICsgaGludCArIG9mZnNldF0pID4gMCkge1xuICAgICAgbGFzdE9mZnNldCA9IG9mZnNldDtcbiAgICAgIG9mZnNldCA9IChvZmZzZXQgPDwgMSkgKyAxO1xuXG4gICAgICBpZiAob2Zmc2V0IDw9IDApIHtcbiAgICAgICAgb2Zmc2V0ID0gbWF4T2Zmc2V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvZmZzZXQgPiBtYXhPZmZzZXQpIHtcbiAgICAgIG9mZnNldCA9IG1heE9mZnNldDtcbiAgICB9XG5cbiAgICBsYXN0T2Zmc2V0ICs9IGhpbnQ7XG4gICAgb2Zmc2V0ICs9IGhpbnQ7XG4gIH0gZWxzZSB7XG4gICAgbWF4T2Zmc2V0ID0gaGludCArIDE7XG5cbiAgICB3aGlsZSAob2Zmc2V0IDwgbWF4T2Zmc2V0ICYmIGNvbXBhcmUodmFsdWUsIGFycmF5W3N0YXJ0ICsgaGludCAtIG9mZnNldF0pIDw9IDApIHtcbiAgICAgIGxhc3RPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICBvZmZzZXQgPSAob2Zmc2V0IDw8IDEpICsgMTtcblxuICAgICAgaWYgKG9mZnNldCA8PSAwKSB7XG4gICAgICAgIG9mZnNldCA9IG1heE9mZnNldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob2Zmc2V0ID4gbWF4T2Zmc2V0KSB7XG4gICAgICBvZmZzZXQgPSBtYXhPZmZzZXQ7XG4gICAgfVxuXG4gICAgdmFyIHRtcCA9IGxhc3RPZmZzZXQ7XG4gICAgbGFzdE9mZnNldCA9IGhpbnQgLSBvZmZzZXQ7XG4gICAgb2Zmc2V0ID0gaGludCAtIHRtcDtcbiAgfVxuXG4gIGxhc3RPZmZzZXQrKztcblxuICB3aGlsZSAobGFzdE9mZnNldCA8IG9mZnNldCkge1xuICAgIHZhciBtID0gbGFzdE9mZnNldCArIChvZmZzZXQgLSBsYXN0T2Zmc2V0ID4+PiAxKTtcblxuICAgIGlmIChjb21wYXJlKHZhbHVlLCBhcnJheVtzdGFydCArIG1dKSA+IDApIHtcbiAgICAgIGxhc3RPZmZzZXQgPSBtICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2Zmc2V0ID0gbTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0O1xufVxuXG5mdW5jdGlvbiBnYWxsb3BSaWdodCh2YWx1ZSwgYXJyYXksIHN0YXJ0LCBsZW5ndGgsIGhpbnQsIGNvbXBhcmUpIHtcbiAgdmFyIGxhc3RPZmZzZXQgPSAwO1xuICB2YXIgbWF4T2Zmc2V0ID0gMDtcbiAgdmFyIG9mZnNldCA9IDE7XG5cbiAgaWYgKGNvbXBhcmUodmFsdWUsIGFycmF5W3N0YXJ0ICsgaGludF0pIDwgMCkge1xuICAgIG1heE9mZnNldCA9IGhpbnQgKyAxO1xuXG4gICAgd2hpbGUgKG9mZnNldCA8IG1heE9mZnNldCAmJiBjb21wYXJlKHZhbHVlLCBhcnJheVtzdGFydCArIGhpbnQgLSBvZmZzZXRdKSA8IDApIHtcbiAgICAgIGxhc3RPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICBvZmZzZXQgPSAob2Zmc2V0IDw8IDEpICsgMTtcblxuICAgICAgaWYgKG9mZnNldCA8PSAwKSB7XG4gICAgICAgIG9mZnNldCA9IG1heE9mZnNldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob2Zmc2V0ID4gbWF4T2Zmc2V0KSB7XG4gICAgICBvZmZzZXQgPSBtYXhPZmZzZXQ7XG4gICAgfVxuXG4gICAgdmFyIHRtcCA9IGxhc3RPZmZzZXQ7XG4gICAgbGFzdE9mZnNldCA9IGhpbnQgLSBvZmZzZXQ7XG4gICAgb2Zmc2V0ID0gaGludCAtIHRtcDtcbiAgfSBlbHNlIHtcbiAgICBtYXhPZmZzZXQgPSBsZW5ndGggLSBoaW50O1xuXG4gICAgd2hpbGUgKG9mZnNldCA8IG1heE9mZnNldCAmJiBjb21wYXJlKHZhbHVlLCBhcnJheVtzdGFydCArIGhpbnQgKyBvZmZzZXRdKSA+PSAwKSB7XG4gICAgICBsYXN0T2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgb2Zmc2V0ID0gKG9mZnNldCA8PCAxKSArIDE7XG5cbiAgICAgIGlmIChvZmZzZXQgPD0gMCkge1xuICAgICAgICBvZmZzZXQgPSBtYXhPZmZzZXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9mZnNldCA+IG1heE9mZnNldCkge1xuICAgICAgb2Zmc2V0ID0gbWF4T2Zmc2V0O1xuICAgIH1cblxuICAgIGxhc3RPZmZzZXQgKz0gaGludDtcbiAgICBvZmZzZXQgKz0gaGludDtcbiAgfVxuXG4gIGxhc3RPZmZzZXQrKztcblxuICB3aGlsZSAobGFzdE9mZnNldCA8IG9mZnNldCkge1xuICAgIHZhciBtID0gbGFzdE9mZnNldCArIChvZmZzZXQgLSBsYXN0T2Zmc2V0ID4+PiAxKTtcblxuICAgIGlmIChjb21wYXJlKHZhbHVlLCBhcnJheVtzdGFydCArIG1dKSA8IDApIHtcbiAgICAgIG9mZnNldCA9IG07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3RPZmZzZXQgPSBtICsgMTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0O1xufVxuXG5mdW5jdGlvbiBUaW1Tb3J0KGFycmF5LCBjb21wYXJlKSB7XG4gIHZhciBtaW5HYWxsb3AgPSBERUZBVUxUX01JTl9HQUxMT1BJTkc7XG4gIHZhciBsZW5ndGggPSAwO1xuICB2YXIgdG1wU3RvcmFnZUxlbmd0aCA9IERFRkFVTFRfVE1QX1NUT1JBR0VfTEVOR1RIO1xuICB2YXIgc3RhY2tMZW5ndGggPSAwO1xuICB2YXIgcnVuU3RhcnQ7XG4gIHZhciBydW5MZW5ndGg7XG4gIHZhciBzdGFja1NpemUgPSAwO1xuICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKGxlbmd0aCA8IDIgKiBERUZBVUxUX1RNUF9TVE9SQUdFX0xFTkdUSCkge1xuICAgIHRtcFN0b3JhZ2VMZW5ndGggPSBsZW5ndGggPj4+IDE7XG4gIH1cblxuICB2YXIgdG1wID0gW107XG4gIHN0YWNrTGVuZ3RoID0gbGVuZ3RoIDwgMTIwID8gNSA6IGxlbmd0aCA8IDE1NDIgPyAxMCA6IGxlbmd0aCA8IDExOTE1MSA/IDE5IDogNDA7XG4gIHJ1blN0YXJ0ID0gW107XG4gIHJ1bkxlbmd0aCA9IFtdO1xuXG4gIGZ1bmN0aW9uIHB1c2hSdW4oX3J1blN0YXJ0LCBfcnVuTGVuZ3RoKSB7XG4gICAgcnVuU3RhcnRbc3RhY2tTaXplXSA9IF9ydW5TdGFydDtcbiAgICBydW5MZW5ndGhbc3RhY2tTaXplXSA9IF9ydW5MZW5ndGg7XG4gICAgc3RhY2tTaXplICs9IDE7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZVJ1bnMoKSB7XG4gICAgd2hpbGUgKHN0YWNrU2l6ZSA+IDEpIHtcbiAgICAgIHZhciBuID0gc3RhY2tTaXplIC0gMjtcblxuICAgICAgaWYgKG4gPj0gMSAmJiBydW5MZW5ndGhbbiAtIDFdIDw9IHJ1bkxlbmd0aFtuXSArIHJ1bkxlbmd0aFtuICsgMV0gfHwgbiA+PSAyICYmIHJ1bkxlbmd0aFtuIC0gMl0gPD0gcnVuTGVuZ3RoW25dICsgcnVuTGVuZ3RoW24gLSAxXSkge1xuICAgICAgICBpZiAocnVuTGVuZ3RoW24gLSAxXSA8IHJ1bkxlbmd0aFtuICsgMV0pIHtcbiAgICAgICAgICBuLS07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocnVuTGVuZ3RoW25dID4gcnVuTGVuZ3RoW24gKyAxXSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgbWVyZ2VBdChuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmb3JjZU1lcmdlUnVucygpIHtcbiAgICB3aGlsZSAoc3RhY2tTaXplID4gMSkge1xuICAgICAgdmFyIG4gPSBzdGFja1NpemUgLSAyO1xuXG4gICAgICBpZiAobiA+IDAgJiYgcnVuTGVuZ3RoW24gLSAxXSA8IHJ1bkxlbmd0aFtuICsgMV0pIHtcbiAgICAgICAgbi0tO1xuICAgICAgfVxuXG4gICAgICBtZXJnZUF0KG4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlQXQoaSkge1xuICAgIHZhciBzdGFydDEgPSBydW5TdGFydFtpXTtcbiAgICB2YXIgbGVuZ3RoMSA9IHJ1bkxlbmd0aFtpXTtcbiAgICB2YXIgc3RhcnQyID0gcnVuU3RhcnRbaSArIDFdO1xuICAgIHZhciBsZW5ndGgyID0gcnVuTGVuZ3RoW2kgKyAxXTtcbiAgICBydW5MZW5ndGhbaV0gPSBsZW5ndGgxICsgbGVuZ3RoMjtcblxuICAgIGlmIChpID09PSBzdGFja1NpemUgLSAzKSB7XG4gICAgICBydW5TdGFydFtpICsgMV0gPSBydW5TdGFydFtpICsgMl07XG4gICAgICBydW5MZW5ndGhbaSArIDFdID0gcnVuTGVuZ3RoW2kgKyAyXTtcbiAgICB9XG5cbiAgICBzdGFja1NpemUtLTtcbiAgICB2YXIgayA9IGdhbGxvcFJpZ2h0KGFycmF5W3N0YXJ0Ml0sIGFycmF5LCBzdGFydDEsIGxlbmd0aDEsIDAsIGNvbXBhcmUpO1xuICAgIHN0YXJ0MSArPSBrO1xuICAgIGxlbmd0aDEgLT0gaztcblxuICAgIGlmIChsZW5ndGgxID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGVuZ3RoMiA9IGdhbGxvcExlZnQoYXJyYXlbc3RhcnQxICsgbGVuZ3RoMSAtIDFdLCBhcnJheSwgc3RhcnQyLCBsZW5ndGgyLCBsZW5ndGgyIC0gMSwgY29tcGFyZSk7XG5cbiAgICBpZiAobGVuZ3RoMiA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChsZW5ndGgxIDw9IGxlbmd0aDIpIHtcbiAgICAgIG1lcmdlTG93KHN0YXJ0MSwgbGVuZ3RoMSwgc3RhcnQyLCBsZW5ndGgyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVyZ2VIaWdoKHN0YXJ0MSwgbGVuZ3RoMSwgc3RhcnQyLCBsZW5ndGgyKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZUxvdyhzdGFydDEsIGxlbmd0aDEsIHN0YXJ0MiwgbGVuZ3RoMikge1xuICAgIHZhciBpID0gMDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGgxOyBpKyspIHtcbiAgICAgIHRtcFtpXSA9IGFycmF5W3N0YXJ0MSArIGldO1xuICAgIH1cblxuICAgIHZhciBjdXJzb3IxID0gMDtcbiAgICB2YXIgY3Vyc29yMiA9IHN0YXJ0MjtcbiAgICB2YXIgZGVzdCA9IHN0YXJ0MTtcbiAgICBhcnJheVtkZXN0KytdID0gYXJyYXlbY3Vyc29yMisrXTtcblxuICAgIGlmICgtLWxlbmd0aDIgPT09IDApIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGgxOyBpKyspIHtcbiAgICAgICAgYXJyYXlbZGVzdCArIGldID0gdG1wW2N1cnNvcjEgKyBpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChsZW5ndGgxID09PSAxKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoMjsgaSsrKSB7XG4gICAgICAgIGFycmF5W2Rlc3QgKyBpXSA9IGFycmF5W2N1cnNvcjIgKyBpXTtcbiAgICAgIH1cblxuICAgICAgYXJyYXlbZGVzdCArIGxlbmd0aDJdID0gdG1wW2N1cnNvcjFdO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBfbWluR2FsbG9wID0gbWluR2FsbG9wO1xuICAgIHZhciBjb3VudDEsIGNvdW50MiwgZXhpdDtcblxuICAgIHdoaWxlICgxKSB7XG4gICAgICBjb3VudDEgPSAwO1xuICAgICAgY291bnQyID0gMDtcbiAgICAgIGV4aXQgPSBmYWxzZTtcblxuICAgICAgZG8ge1xuICAgICAgICBpZiAoY29tcGFyZShhcnJheVtjdXJzb3IyXSwgdG1wW2N1cnNvcjFdKSA8IDApIHtcbiAgICAgICAgICBhcnJheVtkZXN0KytdID0gYXJyYXlbY3Vyc29yMisrXTtcbiAgICAgICAgICBjb3VudDIrKztcbiAgICAgICAgICBjb3VudDEgPSAwO1xuXG4gICAgICAgICAgaWYgKC0tbGVuZ3RoMiA9PT0gMCkge1xuICAgICAgICAgICAgZXhpdCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXJyYXlbZGVzdCsrXSA9IHRtcFtjdXJzb3IxKytdO1xuICAgICAgICAgIGNvdW50MSsrO1xuICAgICAgICAgIGNvdW50MiA9IDA7XG5cbiAgICAgICAgICBpZiAoLS1sZW5ndGgxID09PSAxKSB7XG4gICAgICAgICAgICBleGl0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAoKGNvdW50MSB8IGNvdW50MikgPCBfbWluR2FsbG9wKTtcblxuICAgICAgaWYgKGV4aXQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGRvIHtcbiAgICAgICAgY291bnQxID0gZ2FsbG9wUmlnaHQoYXJyYXlbY3Vyc29yMl0sIHRtcCwgY3Vyc29yMSwgbGVuZ3RoMSwgMCwgY29tcGFyZSk7XG5cbiAgICAgICAgaWYgKGNvdW50MSAhPT0gMCkge1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDE7IGkrKykge1xuICAgICAgICAgICAgYXJyYXlbZGVzdCArIGldID0gdG1wW2N1cnNvcjEgKyBpXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkZXN0ICs9IGNvdW50MTtcbiAgICAgICAgICBjdXJzb3IxICs9IGNvdW50MTtcbiAgICAgICAgICBsZW5ndGgxIC09IGNvdW50MTtcblxuICAgICAgICAgIGlmIChsZW5ndGgxIDw9IDEpIHtcbiAgICAgICAgICAgIGV4aXQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYXJyYXlbZGVzdCsrXSA9IGFycmF5W2N1cnNvcjIrK107XG5cbiAgICAgICAgaWYgKC0tbGVuZ3RoMiA9PT0gMCkge1xuICAgICAgICAgIGV4aXQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgY291bnQyID0gZ2FsbG9wTGVmdCh0bXBbY3Vyc29yMV0sIGFycmF5LCBjdXJzb3IyLCBsZW5ndGgyLCAwLCBjb21wYXJlKTtcblxuICAgICAgICBpZiAoY291bnQyICE9PSAwKSB7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvdW50MjsgaSsrKSB7XG4gICAgICAgICAgICBhcnJheVtkZXN0ICsgaV0gPSBhcnJheVtjdXJzb3IyICsgaV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVzdCArPSBjb3VudDI7XG4gICAgICAgICAgY3Vyc29yMiArPSBjb3VudDI7XG4gICAgICAgICAgbGVuZ3RoMiAtPSBjb3VudDI7XG5cbiAgICAgICAgICBpZiAobGVuZ3RoMiA9PT0gMCkge1xuICAgICAgICAgICAgZXhpdCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhcnJheVtkZXN0KytdID0gdG1wW2N1cnNvcjErK107XG5cbiAgICAgICAgaWYgKC0tbGVuZ3RoMSA9PT0gMSkge1xuICAgICAgICAgIGV4aXQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgX21pbkdhbGxvcC0tO1xuICAgICAgfSB3aGlsZSAoY291bnQxID49IERFRkFVTFRfTUlOX0dBTExPUElORyB8fCBjb3VudDIgPj0gREVGQVVMVF9NSU5fR0FMTE9QSU5HKTtcblxuICAgICAgaWYgKGV4aXQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChfbWluR2FsbG9wIDwgMCkge1xuICAgICAgICBfbWluR2FsbG9wID0gMDtcbiAgICAgIH1cblxuICAgICAgX21pbkdhbGxvcCArPSAyO1xuICAgIH1cblxuICAgIG1pbkdhbGxvcCA9IF9taW5HYWxsb3A7XG4gICAgbWluR2FsbG9wIDwgMSAmJiAobWluR2FsbG9wID0gMSk7XG5cbiAgICBpZiAobGVuZ3RoMSA9PT0gMSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDI7IGkrKykge1xuICAgICAgICBhcnJheVtkZXN0ICsgaV0gPSBhcnJheVtjdXJzb3IyICsgaV07XG4gICAgICB9XG5cbiAgICAgIGFycmF5W2Rlc3QgKyBsZW5ndGgyXSA9IHRtcFtjdXJzb3IxXTtcbiAgICB9IGVsc2UgaWYgKGxlbmd0aDEgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigpOyAvLyB0aHJvdyBuZXcgRXJyb3IoJ21lcmdlTG93IHByZWNvbmRpdGlvbnMgd2VyZSBub3QgcmVzcGVjdGVkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGgxOyBpKyspIHtcbiAgICAgICAgYXJyYXlbZGVzdCArIGldID0gdG1wW2N1cnNvcjEgKyBpXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZUhpZ2goc3RhcnQxLCBsZW5ndGgxLCBzdGFydDIsIGxlbmd0aDIpIHtcbiAgICB2YXIgaSA9IDA7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoMjsgaSsrKSB7XG4gICAgICB0bXBbaV0gPSBhcnJheVtzdGFydDIgKyBpXTtcbiAgICB9XG5cbiAgICB2YXIgY3Vyc29yMSA9IHN0YXJ0MSArIGxlbmd0aDEgLSAxO1xuICAgIHZhciBjdXJzb3IyID0gbGVuZ3RoMiAtIDE7XG4gICAgdmFyIGRlc3QgPSBzdGFydDIgKyBsZW5ndGgyIC0gMTtcbiAgICB2YXIgY3VzdG9tQ3Vyc29yID0gMDtcbiAgICB2YXIgY3VzdG9tRGVzdCA9IDA7XG4gICAgYXJyYXlbZGVzdC0tXSA9IGFycmF5W2N1cnNvcjEtLV07XG5cbiAgICBpZiAoLS1sZW5ndGgxID09PSAwKSB7XG4gICAgICBjdXN0b21DdXJzb3IgPSBkZXN0IC0gKGxlbmd0aDIgLSAxKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDI7IGkrKykge1xuICAgICAgICBhcnJheVtjdXN0b21DdXJzb3IgKyBpXSA9IHRtcFtpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChsZW5ndGgyID09PSAxKSB7XG4gICAgICBkZXN0IC09IGxlbmd0aDE7XG4gICAgICBjdXJzb3IxIC09IGxlbmd0aDE7XG4gICAgICBjdXN0b21EZXN0ID0gZGVzdCArIDE7XG4gICAgICBjdXN0b21DdXJzb3IgPSBjdXJzb3IxICsgMTtcblxuICAgICAgZm9yIChpID0gbGVuZ3RoMSAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGFycmF5W2N1c3RvbURlc3QgKyBpXSA9IGFycmF5W2N1c3RvbUN1cnNvciArIGldO1xuICAgICAgfVxuXG4gICAgICBhcnJheVtkZXN0XSA9IHRtcFtjdXJzb3IyXTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgX21pbkdhbGxvcCA9IG1pbkdhbGxvcDtcblxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICB2YXIgY291bnQxID0gMDtcbiAgICAgIHZhciBjb3VudDIgPSAwO1xuICAgICAgdmFyIGV4aXQgPSBmYWxzZTtcblxuICAgICAgZG8ge1xuICAgICAgICBpZiAoY29tcGFyZSh0bXBbY3Vyc29yMl0sIGFycmF5W2N1cnNvcjFdKSA8IDApIHtcbiAgICAgICAgICBhcnJheVtkZXN0LS1dID0gYXJyYXlbY3Vyc29yMS0tXTtcbiAgICAgICAgICBjb3VudDErKztcbiAgICAgICAgICBjb3VudDIgPSAwO1xuXG4gICAgICAgICAgaWYgKC0tbGVuZ3RoMSA9PT0gMCkge1xuICAgICAgICAgICAgZXhpdCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXJyYXlbZGVzdC0tXSA9IHRtcFtjdXJzb3IyLS1dO1xuICAgICAgICAgIGNvdW50MisrO1xuICAgICAgICAgIGNvdW50MSA9IDA7XG5cbiAgICAgICAgICBpZiAoLS1sZW5ndGgyID09PSAxKSB7XG4gICAgICAgICAgICBleGl0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAoKGNvdW50MSB8IGNvdW50MikgPCBfbWluR2FsbG9wKTtcblxuICAgICAgaWYgKGV4aXQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGRvIHtcbiAgICAgICAgY291bnQxID0gbGVuZ3RoMSAtIGdhbGxvcFJpZ2h0KHRtcFtjdXJzb3IyXSwgYXJyYXksIHN0YXJ0MSwgbGVuZ3RoMSwgbGVuZ3RoMSAtIDEsIGNvbXBhcmUpO1xuXG4gICAgICAgIGlmIChjb3VudDEgIT09IDApIHtcbiAgICAgICAgICBkZXN0IC09IGNvdW50MTtcbiAgICAgICAgICBjdXJzb3IxIC09IGNvdW50MTtcbiAgICAgICAgICBsZW5ndGgxIC09IGNvdW50MTtcbiAgICAgICAgICBjdXN0b21EZXN0ID0gZGVzdCArIDE7XG4gICAgICAgICAgY3VzdG9tQ3Vyc29yID0gY3Vyc29yMSArIDE7XG5cbiAgICAgICAgICBmb3IgKGkgPSBjb3VudDEgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgYXJyYXlbY3VzdG9tRGVzdCArIGldID0gYXJyYXlbY3VzdG9tQ3Vyc29yICsgaV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGxlbmd0aDEgPT09IDApIHtcbiAgICAgICAgICAgIGV4aXQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYXJyYXlbZGVzdC0tXSA9IHRtcFtjdXJzb3IyLS1dO1xuXG4gICAgICAgIGlmICgtLWxlbmd0aDIgPT09IDEpIHtcbiAgICAgICAgICBleGl0ID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvdW50MiA9IGxlbmd0aDIgLSBnYWxsb3BMZWZ0KGFycmF5W2N1cnNvcjFdLCB0bXAsIDAsIGxlbmd0aDIsIGxlbmd0aDIgLSAxLCBjb21wYXJlKTtcblxuICAgICAgICBpZiAoY291bnQyICE9PSAwKSB7XG4gICAgICAgICAgZGVzdCAtPSBjb3VudDI7XG4gICAgICAgICAgY3Vyc29yMiAtPSBjb3VudDI7XG4gICAgICAgICAgbGVuZ3RoMiAtPSBjb3VudDI7XG4gICAgICAgICAgY3VzdG9tRGVzdCA9IGRlc3QgKyAxO1xuICAgICAgICAgIGN1c3RvbUN1cnNvciA9IGN1cnNvcjIgKyAxO1xuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvdW50MjsgaSsrKSB7XG4gICAgICAgICAgICBhcnJheVtjdXN0b21EZXN0ICsgaV0gPSB0bXBbY3VzdG9tQ3Vyc29yICsgaV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGxlbmd0aDIgPD0gMSkge1xuICAgICAgICAgICAgZXhpdCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhcnJheVtkZXN0LS1dID0gYXJyYXlbY3Vyc29yMS0tXTtcblxuICAgICAgICBpZiAoLS1sZW5ndGgxID09PSAwKSB7XG4gICAgICAgICAgZXhpdCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBfbWluR2FsbG9wLS07XG4gICAgICB9IHdoaWxlIChjb3VudDEgPj0gREVGQVVMVF9NSU5fR0FMTE9QSU5HIHx8IGNvdW50MiA+PSBERUZBVUxUX01JTl9HQUxMT1BJTkcpO1xuXG4gICAgICBpZiAoZXhpdCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKF9taW5HYWxsb3AgPCAwKSB7XG4gICAgICAgIF9taW5HYWxsb3AgPSAwO1xuICAgICAgfVxuXG4gICAgICBfbWluR2FsbG9wICs9IDI7XG4gICAgfVxuXG4gICAgbWluR2FsbG9wID0gX21pbkdhbGxvcDtcblxuICAgIGlmIChtaW5HYWxsb3AgPCAxKSB7XG4gICAgICBtaW5HYWxsb3AgPSAxO1xuICAgIH1cblxuICAgIGlmIChsZW5ndGgyID09PSAxKSB7XG4gICAgICBkZXN0IC09IGxlbmd0aDE7XG4gICAgICBjdXJzb3IxIC09IGxlbmd0aDE7XG4gICAgICBjdXN0b21EZXN0ID0gZGVzdCArIDE7XG4gICAgICBjdXN0b21DdXJzb3IgPSBjdXJzb3IxICsgMTtcblxuICAgICAgZm9yIChpID0gbGVuZ3RoMSAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGFycmF5W2N1c3RvbURlc3QgKyBpXSA9IGFycmF5W2N1c3RvbUN1cnNvciArIGldO1xuICAgICAgfVxuXG4gICAgICBhcnJheVtkZXN0XSA9IHRtcFtjdXJzb3IyXTtcbiAgICB9IGVsc2UgaWYgKGxlbmd0aDIgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigpOyAvLyB0aHJvdyBuZXcgRXJyb3IoJ21lcmdlSGlnaCBwcmVjb25kaXRpb25zIHdlcmUgbm90IHJlc3BlY3RlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXN0b21DdXJzb3IgPSBkZXN0IC0gKGxlbmd0aDIgLSAxKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDI7IGkrKykge1xuICAgICAgICBhcnJheVtjdXN0b21DdXJzb3IgKyBpXSA9IHRtcFtpXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLm1lcmdlUnVucyA9IG1lcmdlUnVucztcbiAgdGhpcy5mb3JjZU1lcmdlUnVucyA9IGZvcmNlTWVyZ2VSdW5zO1xuICB0aGlzLnB1c2hSdW4gPSBwdXNoUnVuO1xufVxuXG5mdW5jdGlvbiBzb3J0KGFycmF5LCBjb21wYXJlLCBsbywgaGkpIHtcbiAgaWYgKCFsbykge1xuICAgIGxvID0gMDtcbiAgfVxuXG4gIGlmICghaGkpIHtcbiAgICBoaSA9IGFycmF5Lmxlbmd0aDtcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSBoaSAtIGxvO1xuXG4gIGlmIChyZW1haW5pbmcgPCAyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHJ1bkxlbmd0aCA9IDA7XG5cbiAgaWYgKHJlbWFpbmluZyA8IERFRkFVTFRfTUlOX01FUkdFKSB7XG4gICAgcnVuTGVuZ3RoID0gbWFrZUFzY2VuZGluZ1J1bihhcnJheSwgbG8sIGhpLCBjb21wYXJlKTtcbiAgICBiaW5hcnlJbnNlcnRpb25Tb3J0KGFycmF5LCBsbywgaGksIGxvICsgcnVuTGVuZ3RoLCBjb21wYXJlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdHMgPSBuZXcgVGltU29ydChhcnJheSwgY29tcGFyZSk7XG4gIHZhciBtaW5SdW4gPSBtaW5SdW5MZW5ndGgocmVtYWluaW5nKTtcblxuICBkbyB7XG4gICAgcnVuTGVuZ3RoID0gbWFrZUFzY2VuZGluZ1J1bihhcnJheSwgbG8sIGhpLCBjb21wYXJlKTtcblxuICAgIGlmIChydW5MZW5ndGggPCBtaW5SdW4pIHtcbiAgICAgIHZhciBmb3JjZSA9IHJlbWFpbmluZztcblxuICAgICAgaWYgKGZvcmNlID4gbWluUnVuKSB7XG4gICAgICAgIGZvcmNlID0gbWluUnVuO1xuICAgICAgfVxuXG4gICAgICBiaW5hcnlJbnNlcnRpb25Tb3J0KGFycmF5LCBsbywgbG8gKyBmb3JjZSwgbG8gKyBydW5MZW5ndGgsIGNvbXBhcmUpO1xuICAgICAgcnVuTGVuZ3RoID0gZm9yY2U7XG4gICAgfVxuXG4gICAgdHMucHVzaFJ1bihsbywgcnVuTGVuZ3RoKTtcbiAgICB0cy5tZXJnZVJ1bnMoKTtcbiAgICByZW1haW5pbmcgLT0gcnVuTGVuZ3RoO1xuICAgIGxvICs9IHJ1bkxlbmd0aDtcbiAgfSB3aGlsZSAocmVtYWluaW5nICE9PSAwKTtcblxuICB0cy5mb3JjZU1lcmdlUnVucygpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNvcnQ7IiwiLyoqXG4gKiBAbW9kdWxlIHpyZW5kZXIvY29yZS91dGlsXG4gKi9cbi8vIOeUqOS6juWkhOeQhm1lcmdl5pe25peg5rOV6YGN5Y6GRGF0ZeetieWvueixoeeahOmXrumimFxudmFyIEJVSUxUSU5fT0JKRUNUID0ge1xuICAnW29iamVjdCBGdW5jdGlvbl0nOiAxLFxuICAnW29iamVjdCBSZWdFeHBdJzogMSxcbiAgJ1tvYmplY3QgRGF0ZV0nOiAxLFxuICAnW29iamVjdCBFcnJvcl0nOiAxLFxuICAnW29iamVjdCBDYW52YXNHcmFkaWVudF0nOiAxLFxuICAnW29iamVjdCBDYW52YXNQYXR0ZXJuXSc6IDEsXG4gIC8vIEZvciBub2RlLWNhbnZhc1xuICAnW29iamVjdCBJbWFnZV0nOiAxLFxuICAnW29iamVjdCBDYW52YXNdJzogMVxufTtcbnZhciBUWVBFRF9BUlJBWSA9IHtcbiAgJ1tvYmplY3QgSW50OEFycmF5XSc6IDEsXG4gICdbb2JqZWN0IFVpbnQ4QXJyYXldJzogMSxcbiAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJzogMSxcbiAgJ1tvYmplY3QgSW50MTZBcnJheV0nOiAxLFxuICAnW29iamVjdCBVaW50MTZBcnJheV0nOiAxLFxuICAnW29iamVjdCBJbnQzMkFycmF5XSc6IDEsXG4gICdbb2JqZWN0IFVpbnQzMkFycmF5XSc6IDEsXG4gICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nOiAxLFxuICAnW29iamVjdCBGbG9hdDY0QXJyYXldJzogMVxufTtcbnZhciBvYmpUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbnZhciBuYXRpdmVGb3JFYWNoID0gYXJyYXlQcm90by5mb3JFYWNoO1xudmFyIG5hdGl2ZUZpbHRlciA9IGFycmF5UHJvdG8uZmlsdGVyO1xudmFyIG5hdGl2ZVNsaWNlID0gYXJyYXlQcm90by5zbGljZTtcbnZhciBuYXRpdmVNYXAgPSBhcnJheVByb3RvLm1hcDtcbnZhciBuYXRpdmVSZWR1Y2UgPSBhcnJheVByb3RvLnJlZHVjZTsgLy8gQXZvaWQgYXNzaWduIHRvIGFuIGV4cG9ydGVkIHZhcmlhYmxlLCBmb3IgdHJhbnNmb3JtaW5nIHRvIGNqcy5cblxudmFyIG1ldGhvZHMgPSB7fTtcblxuZnVuY3Rpb24gJG92ZXJyaWRlKG5hbWUsIGZuKSB7XG4gIC8vIENsZWFyIGN0eCBpbnN0YW5jZSBmb3IgZGlmZmVyZW50IGVudmlyb25tZW50XG4gIGlmIChuYW1lID09PSAnY3JlYXRlQ2FudmFzJykge1xuICAgIF9jdHggPSBudWxsO1xuICB9XG5cbiAgbWV0aG9kc1tuYW1lXSA9IGZuO1xufVxuLyoqXG4gKiBUaG9zZSBkYXRhIHR5cGVzIGNhbiBiZSBjbG9uZWQ6XG4gKiAgICAgUGxhaW4gb2JqZWN0LCBBcnJheSwgVHlwZWRBcnJheSwgbnVtYmVyLCBzdHJpbmcsIG51bGwsIHVuZGVmaW5lZC5cbiAqIFRob3NlIGRhdGEgdHlwZXMgd2lsbCBiZSBhc3NnaW5lZCB1c2luZyB0aGUgb3JnaW5hbCBkYXRhOlxuICogICAgIEJVSUxUSU5fT0JKRUNUXG4gKiBJbnN0YW5jZSBvZiB1c2VyIGRlZmluZWQgY2xhc3Mgd2lsbCBiZSBjbG9uZWQgdG8gYSBwbGFpbiBvYmplY3QsIHdpdGhvdXRcbiAqIHByb3BlcnRpZXMgaW4gcHJvdG90eXBlLlxuICogT3RoZXIgZGF0YSB0eXBlcyBpcyBub3Qgc3VwcG9ydGVkIChub3Qgc3VyZSB3aGF0IHdpbGwgaGFwcGVuKS5cbiAqXG4gKiBDYXV0aW9uOiBkbyBub3Qgc3VwcG9ydCBjbG9uZSBEYXRlLCBmb3IgcGVyZm9ybWFuY2UgY29uc2lkZXJhdGlvbi5cbiAqIChUaGVyZSBtaWdodCBiZSBhIGxhcmdlIG51bWJlciBvZiBkYXRlIGluIGBzZXJpZXMuZGF0YWApLlxuICogU28gZGF0ZSBzaG91bGQgbm90IGJlIG1vZGlmaWVkIGluIGFuZCBvdXQgb2YgZWNoYXJ0cy5cbiAqXG4gKiBAcGFyYW0geyp9IHNvdXJjZVxuICogQHJldHVybiB7Kn0gbmV3XG4gKi9cblxuXG5mdW5jdGlvbiBjbG9uZShzb3VyY2UpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsIHx8IHR5cGVvZiBzb3VyY2UgIT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IHNvdXJjZTtcbiAgdmFyIHR5cGVTdHIgPSBvYmpUb1N0cmluZy5jYWxsKHNvdXJjZSk7XG5cbiAgaWYgKHR5cGVTdHIgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICBpZiAoIWlzUHJpbWl0aXZlKHNvdXJjZSkpIHtcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc291cmNlLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHJlc3VsdFtpXSA9IGNsb25lKHNvdXJjZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKFRZUEVEX0FSUkFZW3R5cGVTdHJdKSB7XG4gICAgaWYgKCFpc1ByaW1pdGl2ZShzb3VyY2UpKSB7XG4gICAgICB2YXIgQ3RvciA9IHNvdXJjZS5jb25zdHJ1Y3RvcjtcblxuICAgICAgaWYgKHNvdXJjZS5jb25zdHJ1Y3Rvci5mcm9tKSB7XG4gICAgICAgIHJlc3VsdCA9IEN0b3IuZnJvbShzb3VyY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gbmV3IEN0b3Ioc291cmNlLmxlbmd0aCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNvdXJjZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHJlc3VsdFtpXSA9IGNsb25lKHNvdXJjZVtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoIUJVSUxUSU5fT0JKRUNUW3R5cGVTdHJdICYmICFpc1ByaW1pdGl2ZShzb3VyY2UpICYmICFpc0RvbShzb3VyY2UpKSB7XG4gICAgcmVzdWx0ID0ge307XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBjbG9uZShzb3VyY2Vba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogQG1lbWJlck9mIG1vZHVsZTp6cmVuZGVyL2NvcmUvdXRpbFxuICogQHBhcmFtIHsqfSB0YXJnZXRcbiAqIEBwYXJhbSB7Kn0gc291cmNlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvdmVyd3JpdGU9ZmFsc2VdXG4gKi9cblxuXG5mdW5jdGlvbiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3ZlcndyaXRlKSB7XG4gIC8vIFdlIHNob3VsZCBlc2NhcHNlIHRoYXQgc291cmNlIGlzIHN0cmluZ1xuICAvLyBhbmQgZW50ZXIgZm9yIC4uLiBpbiAuLi5cbiAgaWYgKCFpc09iamVjdChzb3VyY2UpIHx8ICFpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgcmV0dXJuIG92ZXJ3cml0ZSA/IGNsb25lKHNvdXJjZSkgOiB0YXJnZXQ7XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICB2YXIgdGFyZ2V0UHJvcCA9IHRhcmdldFtrZXldO1xuICAgICAgdmFyIHNvdXJjZVByb3AgPSBzb3VyY2Vba2V5XTtcblxuICAgICAgaWYgKGlzT2JqZWN0KHNvdXJjZVByb3ApICYmIGlzT2JqZWN0KHRhcmdldFByb3ApICYmICFpc0FycmF5KHNvdXJjZVByb3ApICYmICFpc0FycmF5KHRhcmdldFByb3ApICYmICFpc0RvbShzb3VyY2VQcm9wKSAmJiAhaXNEb20odGFyZ2V0UHJvcCkgJiYgIWlzQnVpbHRJbk9iamVjdChzb3VyY2VQcm9wKSAmJiAhaXNCdWlsdEluT2JqZWN0KHRhcmdldFByb3ApICYmICFpc1ByaW1pdGl2ZShzb3VyY2VQcm9wKSAmJiAhaXNQcmltaXRpdmUodGFyZ2V0UHJvcCkpIHtcbiAgICAgICAgLy8g5aaC5p6c6ZyA6KaB6YCS5b2S6KaG55uW77yM5bCx6YCS5b2S6LCD55SobWVyZ2VcbiAgICAgICAgbWVyZ2UodGFyZ2V0UHJvcCwgc291cmNlUHJvcCwgb3ZlcndyaXRlKTtcbiAgICAgIH0gZWxzZSBpZiAob3ZlcndyaXRlIHx8ICEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgLy8g5ZCm5YiZ5Y+q5aSE55CGb3ZlcndyaXRl5Li6dHJ1Ze+8jOaIluiAheWcqOebruagh+WvueixoeS4reayoeacieatpOWxnuaAp+eahOaDheWGtVxuICAgICAgICAvLyBOT1RF77yM5ZyoIHRhcmdldFtrZXldIOS4jeWtmOWcqOeahOaXtuWAmeS5n+aYr+ebtOaOpeimhuebllxuICAgICAgICB0YXJnZXRba2V5XSA9IGNsb25lKHNvdXJjZVtrZXldLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuLyoqXG4gKiBAcGFyYW0ge0FycmF5fSB0YXJnZXRBbmRTb3VyY2VzIFRoZSBmaXJzdCBpdGVtIGlzIHRhcmdldCwgYW5kIHRoZSByZXN0cyBhcmUgc291cmNlLlxuICogQHBhcmFtIHtib29sZWFufSBbb3ZlcndyaXRlPWZhbHNlXVxuICogQHJldHVybiB7Kn0gdGFyZ2V0XG4gKi9cblxuXG5mdW5jdGlvbiBtZXJnZUFsbCh0YXJnZXRBbmRTb3VyY2VzLCBvdmVyd3JpdGUpIHtcbiAgdmFyIHJlc3VsdCA9IHRhcmdldEFuZFNvdXJjZXNbMF07XG5cbiAgZm9yICh2YXIgaSA9IDEsIGxlbiA9IHRhcmdldEFuZFNvdXJjZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICByZXN1bHQgPSBtZXJnZShyZXN1bHQsIHRhcmdldEFuZFNvdXJjZXNbaV0sIG92ZXJ3cml0ZSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBAcGFyYW0geyp9IHRhcmdldFxuICogQHBhcmFtIHsqfSBzb3VyY2VcbiAqIEBtZW1iZXJPZiBtb2R1bGU6enJlbmRlci9jb3JlL3V0aWxcbiAqL1xuXG5cbmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQsIHNvdXJjZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG4vKipcbiAqIEBwYXJhbSB7Kn0gdGFyZ2V0XG4gKiBAcGFyYW0geyp9IHNvdXJjZVxuICogQHBhcmFtIHtib29sZWFufSBbb3ZlcmxheT1mYWxzZV1cbiAqIEBtZW1iZXJPZiBtb2R1bGU6enJlbmRlci9jb3JlL3V0aWxcbiAqL1xuXG5cbmZ1bmN0aW9uIGRlZmF1bHRzKHRhcmdldCwgc291cmNlLCBvdmVybGF5KSB7XG4gIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KGtleSkgJiYgKG92ZXJsYXkgPyBzb3VyY2Vba2V5XSAhPSBudWxsIDogdGFyZ2V0W2tleV0gPT0gbnVsbCkpIHtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxudmFyIGNyZWF0ZUNhbnZhcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG1ldGhvZHMuY3JlYXRlQ2FudmFzKCk7XG59O1xuXG5tZXRob2RzLmNyZWF0ZUNhbnZhcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xufTsgLy8gRklYTUVcblxuXG52YXIgX2N0eDtcblxuZnVuY3Rpb24gZ2V0Q29udGV4dCgpIHtcbiAgaWYgKCFfY3R4KSB7XG4gICAgLy8gVXNlIHV0aWwuY3JlYXRlQ2FudmFzIGluc3RlYWQgb2YgY3JlYXRlQ2FudmFzXG4gICAgLy8gYmVjYXVzZSBjcmVhdGVDYW52YXMgbWF5IGJlIG92ZXJ3cml0dGVuIGluIGRpZmZlcmVudCBlbnZpcm9ubWVudFxuICAgIF9jdHggPSBjcmVhdGVDYW52YXMoKS5nZXRDb250ZXh0KCcyZCcpO1xuICB9XG5cbiAgcmV0dXJuIF9jdHg7XG59XG4vKipcbiAqIOafpeivouaVsOe7hOS4reWFg+e0oOeahGluZGV4XG4gKiBAbWVtYmVyT2YgbW9kdWxlOnpyZW5kZXIvY29yZS91dGlsXG4gKi9cblxuXG5mdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICBpZiAoYXJyYXkpIHtcbiAgICBpZiAoYXJyYXkuaW5kZXhPZikge1xuICAgICAgcmV0dXJuIGFycmF5LmluZGV4T2YodmFsdWUpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKGFycmF5W2ldID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTE7XG59XG4vKipcbiAqIOaehOmAoOexu+e7p+aJv+WFs+ezu1xuICpcbiAqIEBtZW1iZXJPZiBtb2R1bGU6enJlbmRlci9jb3JlL3V0aWxcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNsYXp6IOa6kOexu1xuICogQHBhcmFtIHtGdW5jdGlvbn0gYmFzZUNsYXp6IOWfuuexu1xuICovXG5cblxuZnVuY3Rpb24gaW5oZXJpdHMoY2xhenosIGJhc2VDbGF6eikge1xuICB2YXIgY2xhenpQcm90b3R5cGUgPSBjbGF6ei5wcm90b3R5cGU7XG5cbiAgZnVuY3Rpb24gRigpIHt9XG5cbiAgRi5wcm90b3R5cGUgPSBiYXNlQ2xhenoucHJvdG90eXBlO1xuICBjbGF6ei5wcm90b3R5cGUgPSBuZXcgRigpO1xuXG4gIGZvciAodmFyIHByb3AgaW4gY2xhenpQcm90b3R5cGUpIHtcbiAgICBjbGF6ei5wcm90b3R5cGVbcHJvcF0gPSBjbGF6elByb3RvdHlwZVtwcm9wXTtcbiAgfVxuXG4gIGNsYXp6LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNsYXp6O1xuICBjbGF6ei5zdXBlckNsYXNzID0gYmFzZUNsYXp6O1xufVxuLyoqXG4gKiBAbWVtYmVyT2YgbW9kdWxlOnpyZW5kZXIvY29yZS91dGlsXG4gKiBAcGFyYW0ge09iamVjdHxGdW5jdGlvbn0gdGFyZ2V0XG4gKiBAcGFyYW0ge09iamVjdHxGdW5jdGlvbn0gc29yY2VcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3ZlcmxheVxuICovXG5cblxuZnVuY3Rpb24gbWl4aW4odGFyZ2V0LCBzb3VyY2UsIG92ZXJsYXkpIHtcbiAgdGFyZ2V0ID0gJ3Byb3RvdHlwZScgaW4gdGFyZ2V0ID8gdGFyZ2V0LnByb3RvdHlwZSA6IHRhcmdldDtcbiAgc291cmNlID0gJ3Byb3RvdHlwZScgaW4gc291cmNlID8gc291cmNlLnByb3RvdHlwZSA6IHNvdXJjZTtcbiAgZGVmYXVsdHModGFyZ2V0LCBzb3VyY2UsIG92ZXJsYXkpO1xufVxuLyoqXG4gKiBDb25zaWRlciB0eXBlZCBhcnJheS5cbiAqIEBwYXJhbSB7QXJyYXl8VHlwZWRBcnJheX0gZGF0YVxuICovXG5cblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoZGF0YSkge1xuICBpZiAoIWRhdGEpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIGRhdGEgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHlwZW9mIGRhdGEubGVuZ3RoID09ICdudW1iZXInO1xufVxuLyoqXG4gKiDmlbDnu4TmiJblr7nosaHpgY3ljoZcbiAqIEBtZW1iZXJPZiBtb2R1bGU6enJlbmRlci9jb3JlL3V0aWxcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNiXG4gKiBAcGFyYW0geyp9IFtjb250ZXh0XVxuICovXG5cblxuZnVuY3Rpb24gZWFjaChvYmosIGNiLCBjb250ZXh0KSB7XG4gIGlmICghKG9iaiAmJiBjYikpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAob2JqLmZvckVhY2ggJiYgb2JqLmZvckVhY2ggPT09IG5hdGl2ZUZvckVhY2gpIHtcbiAgICBvYmouZm9yRWFjaChjYiwgY29udGV4dCk7XG4gIH0gZWxzZSBpZiAob2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGgpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gb2JqLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjYi5jYWxsKGNvbnRleHQsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGNiLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbi8qKlxuICog5pWw57uE5pig5bCEXG4gKiBAbWVtYmVyT2YgbW9kdWxlOnpyZW5kZXIvY29yZS91dGlsXG4gKiBAcGFyYW0ge0FycmF5fSBvYmpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNiXG4gKiBAcGFyYW0geyp9IFtjb250ZXh0XVxuICogQHJldHVybiB7QXJyYXl9XG4gKi9cblxuXG5mdW5jdGlvbiBtYXAob2JqLCBjYiwgY29udGV4dCkge1xuICBpZiAoIShvYmogJiYgY2IpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKG9iai5tYXAgJiYgb2JqLm1hcCA9PT0gbmF0aXZlTWFwKSB7XG4gICAgcmV0dXJuIG9iai5tYXAoY2IsIGNvbnRleHQpO1xuICB9IGVsc2Uge1xuICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBvYmoubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHJlc3VsdC5wdXNoKGNiLmNhbGwoY29udGV4dCwgb2JqW2ldLCBpLCBvYmopKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4vKipcbiAqIEBtZW1iZXJPZiBtb2R1bGU6enJlbmRlci9jb3JlL3V0aWxcbiAqIEBwYXJhbSB7QXJyYXl9IG9ialxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2JcbiAqIEBwYXJhbSB7T2JqZWN0fSBbbWVtb11cbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHRdXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqL1xuXG5cbmZ1bmN0aW9uIHJlZHVjZShvYmosIGNiLCBtZW1vLCBjb250ZXh0KSB7XG4gIGlmICghKG9iaiAmJiBjYikpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAob2JqLnJlZHVjZSAmJiBvYmoucmVkdWNlID09PSBuYXRpdmVSZWR1Y2UpIHtcbiAgICByZXR1cm4gb2JqLnJlZHVjZShjYiwgbWVtbywgY29udGV4dCk7XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG9iai5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbWVtbyA9IGNiLmNhbGwoY29udGV4dCwgbWVtbywgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9XG59XG4vKipcbiAqIOaVsOe7hOi/h+a7pFxuICogQG1lbWJlck9mIG1vZHVsZTp6cmVuZGVyL2NvcmUvdXRpbFxuICogQHBhcmFtIHtBcnJheX0gb2JqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYlxuICogQHBhcmFtIHsqfSBbY29udGV4dF1cbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5cblxuZnVuY3Rpb24gZmlsdGVyKG9iaiwgY2IsIGNvbnRleHQpIHtcbiAgaWYgKCEob2JqICYmIGNiKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChvYmouZmlsdGVyICYmIG9iai5maWx0ZXIgPT09IG5hdGl2ZUZpbHRlcikge1xuICAgIHJldHVybiBvYmouZmlsdGVyKGNiLCBjb250ZXh0KTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gb2JqLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoY2IuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaikpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gob2JqW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4vKipcbiAqIOaVsOe7hOmhueafpeaJvlxuICogQG1lbWJlck9mIG1vZHVsZTp6cmVuZGVyL2NvcmUvdXRpbFxuICogQHBhcmFtIHtBcnJheX0gb2JqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYlxuICogQHBhcmFtIHsqfSBbY29udGV4dF1cbiAqIEByZXR1cm4geyp9XG4gKi9cblxuXG5mdW5jdGlvbiBmaW5kKG9iaiwgY2IsIGNvbnRleHQpIHtcbiAgaWYgKCEob2JqICYmIGNiKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBvYmoubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoY2IuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaikpIHtcbiAgICAgIHJldHVybiBvYmpbaV07XG4gICAgfVxuICB9XG59XG4vKipcbiAqIEBtZW1iZXJPZiBtb2R1bGU6enJlbmRlci9jb3JlL3V0aWxcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmNcbiAqIEBwYXJhbSB7Kn0gY29udGV4dFxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kKGZ1bmMsIGNvbnRleHQpIHtcbiAgdmFyIGFyZ3MgPSBuYXRpdmVTbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncy5jb25jYXQobmF0aXZlU2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gIH07XG59XG4vKipcbiAqIEBtZW1iZXJPZiBtb2R1bGU6enJlbmRlci9jb3JlL3V0aWxcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmNcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5cblxuZnVuY3Rpb24gY3VycnkoZnVuYykge1xuICB2YXIgYXJncyA9IG5hdGl2ZVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzLmNvbmNhdChuYXRpdmVTbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgfTtcbn1cbi8qKlxuICogQG1lbWJlck9mIG1vZHVsZTp6cmVuZGVyL2NvcmUvdXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG5cbmZ1bmN0aW9uIGlzQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIG9ialRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuLyoqXG4gKiBAbWVtYmVyT2YgbW9kdWxlOnpyZW5kZXIvY29yZS91dGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5cblxuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufVxuLyoqXG4gKiBAbWVtYmVyT2YgbW9kdWxlOnpyZW5kZXIvY29yZS91dGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5cblxuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG9ialRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBTdHJpbmddJztcbn1cbi8qKlxuICogQG1lbWJlck9mIG1vZHVsZTp6cmVuZGVyL2NvcmUvdXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG5cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIC8vIEF2b2lkIGEgVjggSklUIGJ1ZyBpbiBDaHJvbWUgMTktMjAuXG4gIC8vIFNlZSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjI5MSBmb3IgbW9yZSBkZXRhaWxzLlxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHR5cGUgPT09ICdmdW5jdGlvbicgfHwgISF2YWx1ZSAmJiB0eXBlID09ICdvYmplY3QnO1xufVxuLyoqXG4gKiBAbWVtYmVyT2YgbW9kdWxlOnpyZW5kZXIvY29yZS91dGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5cblxuZnVuY3Rpb24gaXNCdWlsdEluT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiAhIUJVSUxUSU5fT0JKRUNUW29ialRvU3RyaW5nLmNhbGwodmFsdWUpXTtcbn1cbi8qKlxuICogQG1lbWJlck9mIG1vZHVsZTp6cmVuZGVyL2NvcmUvdXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG5cbmZ1bmN0aW9uIGlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gISFUWVBFRF9BUlJBWVtvYmpUb1N0cmluZy5jYWxsKHZhbHVlKV07XG59XG4vKipcbiAqIEBtZW1iZXJPZiBtb2R1bGU6enJlbmRlci9jb3JlL3V0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cblxuXG5mdW5jdGlvbiBpc0RvbSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUubm9kZVR5cGUgPT09ICdudW1iZXInICYmIHR5cGVvZiB2YWx1ZS5vd25lckRvY3VtZW50ID09PSAnb2JqZWN0Jztcbn1cbi8qKlxuICogV2hldGhlciBpcyBleGFjdGx5IE5hTi4gTm90aWNlIGlzTmFOKCdhJykgcmV0dXJucyB0cnVlLlxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG5cbmZ1bmN0aW9uIGVxTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG4vKipcbiAqIElmIHZhbHVlMSBpcyBub3QgbnVsbCwgdGhlbiByZXR1cm4gdmFsdWUxLCBvdGhlcndpc2UganVkZ2V0IHJlc3Qgb2YgdmFsdWVzLlxuICogTG93IHBlcmZvcm1hbmNlLlxuICogQG1lbWJlck9mIG1vZHVsZTp6cmVuZGVyL2NvcmUvdXRpbFxuICogQHJldHVybiB7Kn0gRmluYWwgdmFsdWVcbiAqL1xuXG5cbmZ1bmN0aW9uIHJldHJpZXZlKHZhbHVlcykge1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGFyZ3VtZW50c1tpXSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXRyaWV2ZTIodmFsdWUwLCB2YWx1ZTEpIHtcbiAgcmV0dXJuIHZhbHVlMCAhPSBudWxsID8gdmFsdWUwIDogdmFsdWUxO1xufVxuXG5mdW5jdGlvbiByZXRyaWV2ZTModmFsdWUwLCB2YWx1ZTEsIHZhbHVlMikge1xuICByZXR1cm4gdmFsdWUwICE9IG51bGwgPyB2YWx1ZTAgOiB2YWx1ZTEgIT0gbnVsbCA/IHZhbHVlMSA6IHZhbHVlMjtcbn1cbi8qKlxuICogQG1lbWJlck9mIG1vZHVsZTp6cmVuZGVyL2NvcmUvdXRpbFxuICogQHBhcmFtIHtBcnJheX0gYXJyXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnRJbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IGVuZEluZGV4XG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqL1xuXG5cbmZ1bmN0aW9uIHNsaWNlKCkge1xuICByZXR1cm4gRnVuY3Rpb24uY2FsbC5hcHBseShuYXRpdmVTbGljZSwgYXJndW1lbnRzKTtcbn1cbi8qKlxuICogTm9ybWFsaXplIGNzcyBsaWtlZCBhcnJheSBjb25maWd1cmF0aW9uXG4gKiBlLmcuXG4gKiAgMyA9PiBbMywgMywgMywgM11cbiAqICBbNCwgMl0gPT4gWzQsIDIsIDQsIDJdXG4gKiAgWzQsIDMsIDJdID0+IFs0LCAzLCAyLCAzXVxuICogQHBhcmFtIHtudW1iZXJ8QXJyYXkuPG51bWJlcj59IHZhbFxuICogQHJldHVybiB7QXJyYXkuPG51bWJlcj59XG4gKi9cblxuXG5mdW5jdGlvbiBub3JtYWxpemVDc3NBcnJheSh2YWwpIHtcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIFt2YWwsIHZhbCwgdmFsLCB2YWxdO1xuICB9XG5cbiAgdmFyIGxlbiA9IHZhbC5sZW5ndGg7XG5cbiAgaWYgKGxlbiA9PT0gMikge1xuICAgIC8vIHZlcnRpY2FsIHwgaG9yaXpvbnRhbFxuICAgIHJldHVybiBbdmFsWzBdLCB2YWxbMV0sIHZhbFswXSwgdmFsWzFdXTtcbiAgfSBlbHNlIGlmIChsZW4gPT09IDMpIHtcbiAgICAvLyB0b3AgfCBob3Jpem9udGFsIHwgYm90dG9tXG4gICAgcmV0dXJuIFt2YWxbMF0sIHZhbFsxXSwgdmFsWzJdLCB2YWxbMV1dO1xuICB9XG5cbiAgcmV0dXJuIHZhbDtcbn1cbi8qKlxuICogQG1lbWJlck9mIG1vZHVsZTp6cmVuZGVyL2NvcmUvdXRpbFxuICogQHBhcmFtIHtib29sZWFufSBjb25kaXRpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXG4gKi9cblxuXG5mdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9XG59XG4vKipcbiAqIEBtZW1iZXJPZiBtb2R1bGU6enJlbmRlci9jb3JlL3V0aWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgc3RyaW5nIHRvIGJlIHRyaW1lZFxuICogQHJldHVybiB7c3RyaW5nfSB0cmltZWQgc3RyaW5nXG4gKi9cblxuXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICBpZiAoc3RyID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc3RyLnRyaW0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gc3RyLnRyaW0oKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLCAnJyk7XG4gIH1cbn1cblxudmFyIHByaW1pdGl2ZUtleSA9ICdfX2VjX3ByaW1pdGl2ZV9fJztcbi8qKlxuICogU2V0IGFuIG9iamVjdCBhcyBwcmltaXRpdmUgdG8gYmUgaWdub3JlZCB0cmF2ZXJzaW5nIGNoaWxkcmVuIGluIGNsb25lIG9yIG1lcmdlXG4gKi9cblxuZnVuY3Rpb24gc2V0QXNQcmltaXRpdmUob2JqKSB7XG4gIG9ialtwcmltaXRpdmVLZXldID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXNQcmltaXRpdmUob2JqKSB7XG4gIHJldHVybiBvYmpbcHJpbWl0aXZlS2V5XTtcbn1cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIE9ubHkgYXBwbHkgYG93blByb3BlcnR5YC5cbiAqL1xuXG5cbmZ1bmN0aW9uIEhhc2hNYXAob2JqKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkob2JqKTtcbiAgdmFyIHRoaXNNYXAgPSB0aGlzO1xuICBvYmogaW5zdGFuY2VvZiBIYXNoTWFwID8gb2JqLmVhY2godmlzaXQpIDogb2JqICYmIGVhY2gob2JqLCB2aXNpdCk7XG5cbiAgZnVuY3Rpb24gdmlzaXQodmFsdWUsIGtleSkge1xuICAgIGlzQXJyID8gdGhpc01hcC5zZXQodmFsdWUsIGtleSkgOiB0aGlzTWFwLnNldChrZXksIHZhbHVlKTtcbiAgfVxufSAvLyBBZGQgcHJlZml4IHRvIGF2b2lkIGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZS5cblxuXG5IYXNoTWFwLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEhhc2hNYXAsXG4gIC8vIERvIG5vdCBwcm92aWRlIGBoYXNgIG1ldGhvZCB0byBhdm9pZCBkZWZpbmluZyB3aGF0IGlzIGBoYXNgLlxuICAvLyAoV2UgdXN1YWxseSB0cmVhdCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgIGFzIHRoZSBzYW1lLCBkaWZmZXJlbnRcbiAgLy8gZnJvbSBFUzYgTWFwKS5cbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzT3duUHJvcGVydHkoa2V5KSA/IHRoaXNba2V5XSA6IG51bGw7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAvLyBDb21wYXJpbmcgd2l0aCBpbnZvY2F0aW9uIGNoYWluaW5nLCBgcmV0dXJuIHZhbHVlYCBpcyBtb3JlIGNvbW1vbmx5XG4gICAgLy8gdXNlZCBpbiB0aGlzIGNhc2U6IGB2YXIgc29tZVZhbCA9IG1hcC5zZXQoJ2EnLCBnZW5WYWwoKSk7YFxuICAgIHJldHVybiB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgfSxcbiAgLy8gQWx0aG91Z2ggdXRpbC5lYWNoIGNhbiBiZSBwZXJmb3JtZWQgb24gdGhpcyBoYXNoTWFwIGRpcmVjdGx5LCB1c2VyXG4gIC8vIHNob3VsZCBub3QgdXNlIHRoZSBleHBvc2VkIGtleXMsIHdobyBhcmUgcHJlZml4ZWQuXG4gIGVhY2g6IGZ1bmN0aW9uIChjYiwgY29udGV4dCkge1xuICAgIGNvbnRleHQgIT09IHZvaWQgMCAmJiAoY2IgPSBiaW5kKGNiLCBjb250ZXh0KSk7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcykge1xuICAgICAgdGhpcy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGNiKHRoaXNba2V5XSwga2V5KTtcbiAgICB9XG4gIH0sXG4gIC8vIERvIG5vdCB1c2UgdGhpcyBtZXRob2QgaWYgcGVyZm9ybWFuY2Ugc2Vuc2l0aXZlLlxuICByZW1vdmVLZXk6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBkZWxldGUgdGhpc1trZXldO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVIYXNoTWFwKG9iaikge1xuICByZXR1cm4gbmV3IEhhc2hNYXAob2JqKTtcbn1cblxuZnVuY3Rpb24gY29uY2F0QXJyYXkoYSwgYikge1xuICB2YXIgbmV3QXJyYXkgPSBuZXcgYS5jb25zdHJ1Y3RvcihhLmxlbmd0aCArIGIubGVuZ3RoKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICBuZXdBcnJheVtpXSA9IGFbaV07XG4gIH1cblxuICB2YXIgb2Zmc2V0ID0gYS5sZW5ndGg7XG5cbiAgZm9yIChpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICBuZXdBcnJheVtpICsgb2Zmc2V0XSA9IGJbaV07XG4gIH1cblxuICByZXR1cm4gbmV3QXJyYXk7XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5leHBvcnRzLiRvdmVycmlkZSA9ICRvdmVycmlkZTtcbmV4cG9ydHMuY2xvbmUgPSBjbG9uZTtcbmV4cG9ydHMubWVyZ2UgPSBtZXJnZTtcbmV4cG9ydHMubWVyZ2VBbGwgPSBtZXJnZUFsbDtcbmV4cG9ydHMuZXh0ZW5kID0gZXh0ZW5kO1xuZXhwb3J0cy5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuZXhwb3J0cy5jcmVhdGVDYW52YXMgPSBjcmVhdGVDYW52YXM7XG5leHBvcnRzLmdldENvbnRleHQgPSBnZXRDb250ZXh0O1xuZXhwb3J0cy5pbmRleE9mID0gaW5kZXhPZjtcbmV4cG9ydHMuaW5oZXJpdHMgPSBpbmhlcml0cztcbmV4cG9ydHMubWl4aW4gPSBtaXhpbjtcbmV4cG9ydHMuaXNBcnJheUxpa2UgPSBpc0FycmF5TGlrZTtcbmV4cG9ydHMuZWFjaCA9IGVhY2g7XG5leHBvcnRzLm1hcCA9IG1hcDtcbmV4cG9ydHMucmVkdWNlID0gcmVkdWNlO1xuZXhwb3J0cy5maWx0ZXIgPSBmaWx0ZXI7XG5leHBvcnRzLmZpbmQgPSBmaW5kO1xuZXhwb3J0cy5iaW5kID0gYmluZDtcbmV4cG9ydHMuY3VycnkgPSBjdXJyeTtcbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuZXhwb3J0cy5pc0J1aWx0SW5PYmplY3QgPSBpc0J1aWx0SW5PYmplY3Q7XG5leHBvcnRzLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtcbmV4cG9ydHMuaXNEb20gPSBpc0RvbTtcbmV4cG9ydHMuZXFOYU4gPSBlcU5hTjtcbmV4cG9ydHMucmV0cmlldmUgPSByZXRyaWV2ZTtcbmV4cG9ydHMucmV0cmlldmUyID0gcmV0cmlldmUyO1xuZXhwb3J0cy5yZXRyaWV2ZTMgPSByZXRyaWV2ZTM7XG5leHBvcnRzLnNsaWNlID0gc2xpY2U7XG5leHBvcnRzLm5vcm1hbGl6ZUNzc0FycmF5ID0gbm9ybWFsaXplQ3NzQXJyYXk7XG5leHBvcnRzLmFzc2VydCA9IGFzc2VydDtcbmV4cG9ydHMudHJpbSA9IHRyaW07XG5leHBvcnRzLnNldEFzUHJpbWl0aXZlID0gc2V0QXNQcmltaXRpdmU7XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5leHBvcnRzLmNyZWF0ZUhhc2hNYXAgPSBjcmVhdGVIYXNoTWFwO1xuZXhwb3J0cy5jb25jYXRBcnJheSA9IGNvbmNhdEFycmF5O1xuZXhwb3J0cy5ub29wID0gbm9vcDsiLCJ2YXIgQXJyYXlDdG9yID0gdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyBBcnJheSA6IEZsb2F0MzJBcnJheTtcbi8qKlxuICog5Yib5bu65LiA5Liq5ZCR6YePXG4gKiBAcGFyYW0ge251bWJlcn0gW3g9MF1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbeT0wXVxuICogQHJldHVybiB7VmVjdG9yMn1cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGUoeCwgeSkge1xuICB2YXIgb3V0ID0gbmV3IEFycmF5Q3RvcigyKTtcblxuICBpZiAoeCA9PSBudWxsKSB7XG4gICAgeCA9IDA7XG4gIH1cblxuICBpZiAoeSA9PSBudWxsKSB7XG4gICAgeSA9IDA7XG4gIH1cblxuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiDlpI3liLblkJHph4/mlbDmja5cbiAqIEBwYXJhbSB7VmVjdG9yMn0gb3V0XG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IHZcbiAqIEByZXR1cm4ge1ZlY3RvcjJ9XG4gKi9cblxuXG5mdW5jdGlvbiBjb3B5KG91dCwgdikge1xuICBvdXRbMF0gPSB2WzBdO1xuICBvdXRbMV0gPSB2WzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiDlhYvpmobkuIDkuKrlkJHph49cbiAqIEBwYXJhbSB7VmVjdG9yMn0gdlxuICogQHJldHVybiB7VmVjdG9yMn1cbiAqL1xuXG5cbmZ1bmN0aW9uIGNsb25lKHYpIHtcbiAgdmFyIG91dCA9IG5ldyBBcnJheUN0b3IoMik7XG4gIG91dFswXSA9IHZbMF07XG4gIG91dFsxXSA9IHZbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIOiuvue9ruWQkemHj+eahOS4pOS4qumhuVxuICogQHBhcmFtIHtWZWN0b3IyfSBvdXRcbiAqIEBwYXJhbSB7bnVtYmVyfSBhXG4gKiBAcGFyYW0ge251bWJlcn0gYlxuICogQHJldHVybiB7VmVjdG9yMn0g57uT5p6cXG4gKi9cblxuXG5mdW5jdGlvbiBzZXQob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGE7XG4gIG91dFsxXSA9IGI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIOWQkemHj+ebuOWKoFxuICogQHBhcmFtIHtWZWN0b3IyfSBvdXRcbiAqIEBwYXJhbSB7VmVjdG9yMn0gdjFcbiAqIEBwYXJhbSB7VmVjdG9yMn0gdjJcbiAqL1xuXG5cbmZ1bmN0aW9uIGFkZChvdXQsIHYxLCB2Mikge1xuICBvdXRbMF0gPSB2MVswXSArIHYyWzBdO1xuICBvdXRbMV0gPSB2MVsxXSArIHYyWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiDlkJHph4/nvKnmlL7lkI7nm7jliqBcbiAqIEBwYXJhbSB7VmVjdG9yMn0gb3V0XG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IHYxXG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IHYyXG4gKiBAcGFyYW0ge251bWJlcn0gYVxuICovXG5cblxuZnVuY3Rpb24gc2NhbGVBbmRBZGQob3V0LCB2MSwgdjIsIGEpIHtcbiAgb3V0WzBdID0gdjFbMF0gKyB2MlswXSAqIGE7XG4gIG91dFsxXSA9IHYxWzFdICsgdjJbMV0gKiBhO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiDlkJHph4/nm7jlh49cbiAqIEBwYXJhbSB7VmVjdG9yMn0gb3V0XG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IHYxXG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IHYyXG4gKi9cblxuXG5mdW5jdGlvbiBzdWIob3V0LCB2MSwgdjIpIHtcbiAgb3V0WzBdID0gdjFbMF0gLSB2MlswXTtcbiAgb3V0WzFdID0gdjFbMV0gLSB2MlsxXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICog5ZCR6YeP6ZW/5bqmXG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IHZcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuXG5cbmZ1bmN0aW9uIGxlbih2KSB7XG4gIHJldHVybiBNYXRoLnNxcnQobGVuU3F1YXJlKHYpKTtcbn1cblxudmFyIGxlbmd0aCA9IGxlbjsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG5cbi8qKlxuICog5ZCR6YeP6ZW/5bqm5bmz5pa5XG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IHZcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuXG5mdW5jdGlvbiBsZW5TcXVhcmUodikge1xuICByZXR1cm4gdlswXSAqIHZbMF0gKyB2WzFdICogdlsxXTtcbn1cblxudmFyIGxlbmd0aFNxdWFyZSA9IGxlblNxdWFyZTtcbi8qKlxuICog5ZCR6YeP5LmY5rOVXG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IG91dFxuICogQHBhcmFtIHtWZWN0b3IyfSB2MVxuICogQHBhcmFtIHtWZWN0b3IyfSB2MlxuICovXG5cbmZ1bmN0aW9uIG11bChvdXQsIHYxLCB2Mikge1xuICBvdXRbMF0gPSB2MVswXSAqIHYyWzBdO1xuICBvdXRbMV0gPSB2MVsxXSAqIHYyWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiDlkJHph4/pmaTms5VcbiAqIEBwYXJhbSB7VmVjdG9yMn0gb3V0XG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IHYxXG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IHYyXG4gKi9cblxuXG5mdW5jdGlvbiBkaXYob3V0LCB2MSwgdjIpIHtcbiAgb3V0WzBdID0gdjFbMF0gLyB2MlswXTtcbiAgb3V0WzFdID0gdjFbMV0gLyB2MlsxXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICog5ZCR6YeP54K55LmYXG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IHYxXG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IHYyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuXG5mdW5jdGlvbiBkb3QodjEsIHYyKSB7XG4gIHJldHVybiB2MVswXSAqIHYyWzBdICsgdjFbMV0gKiB2MlsxXTtcbn1cbi8qKlxuICog5ZCR6YeP57yp5pS+XG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IG91dFxuICogQHBhcmFtIHtWZWN0b3IyfSB2XG4gKiBAcGFyYW0ge251bWJlcn0gc1xuICovXG5cblxuZnVuY3Rpb24gc2NhbGUob3V0LCB2LCBzKSB7XG4gIG91dFswXSA9IHZbMF0gKiBzO1xuICBvdXRbMV0gPSB2WzFdICogcztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICog5ZCR6YeP5b2S5LiA5YyWXG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IG91dFxuICogQHBhcmFtIHtWZWN0b3IyfSB2XG4gKi9cblxuXG5mdW5jdGlvbiBub3JtYWxpemUob3V0LCB2KSB7XG4gIHZhciBkID0gbGVuKHYpO1xuXG4gIGlmIChkID09PSAwKSB7XG4gICAgb3V0WzBdID0gMDtcbiAgICBvdXRbMV0gPSAwO1xuICB9IGVsc2Uge1xuICAgIG91dFswXSA9IHZbMF0gLyBkO1xuICAgIG91dFsxXSA9IHZbMV0gLyBkO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICog6K6h566X5ZCR6YeP6Ze06Led56a7XG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IHYxXG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IHYyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuXG5mdW5jdGlvbiBkaXN0YW5jZSh2MSwgdjIpIHtcbiAgcmV0dXJuIE1hdGguc3FydCgodjFbMF0gLSB2MlswXSkgKiAodjFbMF0gLSB2MlswXSkgKyAodjFbMV0gLSB2MlsxXSkgKiAodjFbMV0gLSB2MlsxXSkpO1xufVxuXG52YXIgZGlzdCA9IGRpc3RhbmNlO1xuLyoqXG4gKiDlkJHph4/ot53nprvlubPmlrlcbiAqIEBwYXJhbSB7VmVjdG9yMn0gdjFcbiAqIEBwYXJhbSB7VmVjdG9yMn0gdjJcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuXG5mdW5jdGlvbiBkaXN0YW5jZVNxdWFyZSh2MSwgdjIpIHtcbiAgcmV0dXJuICh2MVswXSAtIHYyWzBdKSAqICh2MVswXSAtIHYyWzBdKSArICh2MVsxXSAtIHYyWzFdKSAqICh2MVsxXSAtIHYyWzFdKTtcbn1cblxudmFyIGRpc3RTcXVhcmUgPSBkaXN0YW5jZVNxdWFyZTtcbi8qKlxuICog5rGC6LSf5ZCR6YePXG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IG91dFxuICogQHBhcmFtIHtWZWN0b3IyfSB2XG4gKi9cblxuZnVuY3Rpb24gbmVnYXRlKG91dCwgdikge1xuICBvdXRbMF0gPSAtdlswXTtcbiAgb3V0WzFdID0gLXZbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIOaPkuWAvOS4pOS4queCuVxuICogQHBhcmFtIHtWZWN0b3IyfSBvdXRcbiAqIEBwYXJhbSB7VmVjdG9yMn0gdjFcbiAqIEBwYXJhbSB7VmVjdG9yMn0gdjJcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKi9cblxuXG5mdW5jdGlvbiBsZXJwKG91dCwgdjEsIHYyLCB0KSB7XG4gIG91dFswXSA9IHYxWzBdICsgdCAqICh2MlswXSAtIHYxWzBdKTtcbiAgb3V0WzFdID0gdjFbMV0gKyB0ICogKHYyWzFdIC0gdjFbMV0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiDnn6npmLXlt6bkuZjlkJHph49cbiAqIEBwYXJhbSB7VmVjdG9yMn0gb3V0XG4gKiBAcGFyYW0ge1ZlY3RvcjJ9IHZcbiAqIEBwYXJhbSB7VmVjdG9yMn0gbVxuICovXG5cblxuZnVuY3Rpb24gYXBwbHlUcmFuc2Zvcm0ob3V0LCB2LCBtKSB7XG4gIHZhciB4ID0gdlswXTtcbiAgdmFyIHkgPSB2WzFdO1xuICBvdXRbMF0gPSBtWzBdICogeCArIG1bMl0gKiB5ICsgbVs0XTtcbiAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzNdICogeSArIG1bNV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIOaxguS4pOS4quWQkemHj+acgOWwj+WAvFxuICogQHBhcmFtICB7VmVjdG9yMn0gb3V0XG4gKiBAcGFyYW0gIHtWZWN0b3IyfSB2MVxuICogQHBhcmFtICB7VmVjdG9yMn0gdjJcbiAqL1xuXG5cbmZ1bmN0aW9uIG1pbihvdXQsIHYxLCB2Mikge1xuICBvdXRbMF0gPSBNYXRoLm1pbih2MVswXSwgdjJbMF0pO1xuICBvdXRbMV0gPSBNYXRoLm1pbih2MVsxXSwgdjJbMV0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiDmsYLkuKTkuKrlkJHph4/mnIDlpKflgLxcbiAqIEBwYXJhbSAge1ZlY3RvcjJ9IG91dFxuICogQHBhcmFtICB7VmVjdG9yMn0gdjFcbiAqIEBwYXJhbSAge1ZlY3RvcjJ9IHYyXG4gKi9cblxuXG5mdW5jdGlvbiBtYXgob3V0LCB2MSwgdjIpIHtcbiAgb3V0WzBdID0gTWF0aC5tYXgodjFbMF0sIHYyWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5tYXgodjFbMV0sIHYyWzFdKTtcbiAgcmV0dXJuIG91dDtcbn1cblxuZXhwb3J0cy5jcmVhdGUgPSBjcmVhdGU7XG5leHBvcnRzLmNvcHkgPSBjb3B5O1xuZXhwb3J0cy5jbG9uZSA9IGNsb25lO1xuZXhwb3J0cy5zZXQgPSBzZXQ7XG5leHBvcnRzLmFkZCA9IGFkZDtcbmV4cG9ydHMuc2NhbGVBbmRBZGQgPSBzY2FsZUFuZEFkZDtcbmV4cG9ydHMuc3ViID0gc3ViO1xuZXhwb3J0cy5sZW4gPSBsZW47XG5leHBvcnRzLmxlbmd0aCA9IGxlbmd0aDtcbmV4cG9ydHMubGVuU3F1YXJlID0gbGVuU3F1YXJlO1xuZXhwb3J0cy5sZW5ndGhTcXVhcmUgPSBsZW5ndGhTcXVhcmU7XG5leHBvcnRzLm11bCA9IG11bDtcbmV4cG9ydHMuZGl2ID0gZGl2O1xuZXhwb3J0cy5kb3QgPSBkb3Q7XG5leHBvcnRzLnNjYWxlID0gc2NhbGU7XG5leHBvcnRzLm5vcm1hbGl6ZSA9IG5vcm1hbGl6ZTtcbmV4cG9ydHMuZGlzdGFuY2UgPSBkaXN0YW5jZTtcbmV4cG9ydHMuZGlzdCA9IGRpc3Q7XG5leHBvcnRzLmRpc3RhbmNlU3F1YXJlID0gZGlzdGFuY2VTcXVhcmU7XG5leHBvcnRzLmRpc3RTcXVhcmUgPSBkaXN0U3F1YXJlO1xuZXhwb3J0cy5uZWdhdGUgPSBuZWdhdGU7XG5leHBvcnRzLmxlcnAgPSBsZXJwO1xuZXhwb3J0cy5hcHBseVRyYW5zZm9ybSA9IGFwcGx5VHJhbnNmb3JtO1xuZXhwb3J0cy5taW4gPSBtaW47XG5leHBvcnRzLm1heCA9IG1heDsiLCJ2YXIgX2V2ZW50ID0gcmVxdWlyZShcIi4uL2NvcmUvZXZlbnRcIik7XG5cbnZhciBhZGRFdmVudExpc3RlbmVyID0gX2V2ZW50LmFkZEV2ZW50TGlzdGVuZXI7XG52YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IF9ldmVudC5yZW1vdmVFdmVudExpc3RlbmVyO1xudmFyIG5vcm1hbGl6ZUV2ZW50ID0gX2V2ZW50Lm5vcm1hbGl6ZUV2ZW50O1xuXG52YXIgenJVdGlsID0gcmVxdWlyZShcIi4uL2NvcmUvdXRpbFwiKTtcblxudmFyIEV2ZW50ZnVsID0gcmVxdWlyZShcIi4uL21peGluL0V2ZW50ZnVsXCIpO1xuXG52YXIgZW52ID0gcmVxdWlyZShcIi4uL2NvcmUvZW52XCIpO1xuXG52YXIgR2VzdHVyZU1nciA9IHJlcXVpcmUoXCIuLi9jb3JlL0dlc3R1cmVNZ3JcIik7XG5cbnZhciBUT1VDSF9DTElDS19ERUxBWSA9IDMwMDtcbnZhciBtb3VzZUhhbmRsZXJOYW1lcyA9IFsnY2xpY2snLCAnZGJsY2xpY2snLCAnbW91c2V3aGVlbCcsICdtb3VzZW91dCcsICdtb3VzZXVwJywgJ21vdXNlZG93bicsICdtb3VzZW1vdmUnLCAnY29udGV4dG1lbnUnXTtcbnZhciB0b3VjaEhhbmRsZXJOYW1lcyA9IFsndG91Y2hzdGFydCcsICd0b3VjaGVuZCcsICd0b3VjaG1vdmUnXTtcbnZhciBwb2ludGVyRXZlbnROYW1lcyA9IHtcbiAgcG9pbnRlcmRvd246IDEsXG4gIHBvaW50ZXJ1cDogMSxcbiAgcG9pbnRlcm1vdmU6IDEsXG4gIHBvaW50ZXJvdXQ6IDFcbn07XG52YXIgcG9pbnRlckhhbmRsZXJOYW1lcyA9IHpyVXRpbC5tYXAobW91c2VIYW5kbGVyTmFtZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciBubSA9IG5hbWUucmVwbGFjZSgnbW91c2UnLCAncG9pbnRlcicpO1xuICByZXR1cm4gcG9pbnRlckV2ZW50TmFtZXNbbm1dID8gbm0gOiBuYW1lO1xufSk7XG5cbmZ1bmN0aW9uIGV2ZW50TmFtZUZpeChuYW1lKSB7XG4gIHJldHVybiBuYW1lID09PSAnbW91c2V3aGVlbCcgJiYgZW52LmJyb3dzZXIuZmlyZWZveCA/ICdET01Nb3VzZVNjcm9sbCcgOiBuYW1lO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzR2VzdHVyZShwcm94eSwgZXZlbnQsIHN0YWdlKSB7XG4gIHZhciBnZXN0dXJlTWdyID0gcHJveHkuX2dlc3R1cmVNZ3I7XG4gIHN0YWdlID09PSAnc3RhcnQnICYmIGdlc3R1cmVNZ3IuY2xlYXIoKTtcbiAgdmFyIGdlc3R1cmVJbmZvID0gZ2VzdHVyZU1nci5yZWNvZ25pemUoZXZlbnQsIHByb3h5LmhhbmRsZXIuZmluZEhvdmVyKGV2ZW50LnpyWCwgZXZlbnQuenJZLCBudWxsKS50YXJnZXQsIHByb3h5LmRvbSk7XG4gIHN0YWdlID09PSAnZW5kJyAmJiBnZXN0dXJlTWdyLmNsZWFyKCk7IC8vIERvIG5vdCBkbyBhbnkgcHJldmVudERlZmF1bHQgaGVyZS4gVXBwZXIgYXBwbGljYXRpb24gZG8gdGhhdCBpZiBuZWNlc3NhcnkuXG5cbiAgaWYgKGdlc3R1cmVJbmZvKSB7XG4gICAgdmFyIHR5cGUgPSBnZXN0dXJlSW5mby50eXBlO1xuICAgIGV2ZW50Lmdlc3R1cmVFdmVudCA9IHR5cGU7XG4gICAgcHJveHkuaGFuZGxlci5kaXNwYXRjaFRvRWxlbWVudCh7XG4gICAgICB0YXJnZXQ6IGdlc3R1cmVJbmZvLnRhcmdldFxuICAgIH0sIHR5cGUsIGdlc3R1cmVJbmZvLmV2ZW50KTtcbiAgfVxufSAvLyBmdW5jdGlvbiBvbk1TR2VzdHVyZUNoYW5nZShwcm94eSwgZXZlbnQpIHtcbi8vICAgICBpZiAoZXZlbnQudHJhbnNsYXRpb25YIHx8IGV2ZW50LnRyYW5zbGF0aW9uWSkge1xuLy8gICAgICAgICAvLyBtb3VzZW1vdmUgaXMgY2FycmllZCBieSBNU0dlc3R1cmUgdG8gcmVkdWNlIHRoZSBzZW5zaXRpdml0eS5cbi8vICAgICAgICAgcHJveHkuaGFuZGxlci5kaXNwYXRjaFRvRWxlbWVudChldmVudC50YXJnZXQsICdtb3VzZW1vdmUnLCBldmVudCk7XG4vLyAgICAgfVxuLy8gICAgIGlmIChldmVudC5zY2FsZSAhPT0gMSkge1xuLy8gICAgICAgICBldmVudC5waW5jaFggPSBldmVudC5vZmZzZXRYO1xuLy8gICAgICAgICBldmVudC5waW5jaFkgPSBldmVudC5vZmZzZXRZO1xuLy8gICAgICAgICBldmVudC5waW5jaFNjYWxlID0gZXZlbnQuc2NhbGU7XG4vLyAgICAgICAgIHByb3h5LmhhbmRsZXIuZGlzcGF0Y2hUb0VsZW1lbnQoZXZlbnQudGFyZ2V0LCAncGluY2gnLCBldmVudCk7XG4vLyAgICAgfVxuLy8gfVxuXG4vKipcbiAqIFByZXZlbnQgbW91c2UgZXZlbnQgZnJvbSBiZWluZyBkaXNwYXRjaGVkIGFmdGVyIFRvdWNoIEV2ZW50cyBhY3Rpb25cbiAqIEBzZWUgPGh0dHBzOi8vZ2l0aHViLmNvbS9kZWx0YWtvc2gvaGFuZGpzL2Jsb2IvbWFzdGVyL3NyYy9oYW5kLmJhc2UuanM+XG4gKiAxLiBNb2JpbGUgYnJvd3NlcnMgZGlzcGF0Y2ggbW91c2UgZXZlbnRzIDMwMG1zIGFmdGVyIHRvdWNoZW5kLlxuICogMi4gQ2hyb21lIGZvciBBbmRyb2lkIGRpc3BhdGNoIG1vdXNlZG93biBmb3IgbG9uZy10b3VjaCBhYm91dCA2NTBtc1xuICogUmVzdWx0OiBCbG9ja2luZyBNb3VzZSBFdmVudHMgZm9yIDcwMG1zLlxuICovXG5cblxuZnVuY3Rpb24gc2V0VG91Y2hUaW1lcihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5fdG91Y2hpbmcgPSB0cnVlO1xuICBjbGVhclRpbWVvdXQoaW5zdGFuY2UuX3RvdWNoVGltZXIpO1xuICBpbnN0YW5jZS5fdG91Y2hUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGluc3RhbmNlLl90b3VjaGluZyA9IGZhbHNlO1xuICB9LCA3MDApO1xufVxuXG52YXIgZG9tSGFuZGxlcnMgPSB7XG4gIC8qKlxuICAgKiBNb3VzZSBtb3ZlIGhhbmRsZXJcbiAgICogQGlubmVyXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqL1xuICBtb3VzZW1vdmU6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQodGhpcy5kb20sIGV2ZW50KTtcbiAgICB0aGlzLnRyaWdnZXIoJ21vdXNlbW92ZScsIGV2ZW50KTtcbiAgfSxcblxuICAvKipcbiAgICogTW91c2Ugb3V0IGhhbmRsZXJcbiAgICogQGlubmVyXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqL1xuICBtb3VzZW91dDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudCh0aGlzLmRvbSwgZXZlbnQpO1xuICAgIHZhciBlbGVtZW50ID0gZXZlbnQudG9FbGVtZW50IHx8IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG5cbiAgICBpZiAoZWxlbWVudCAhPSB0aGlzLmRvbSkge1xuICAgICAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSAhPSA5KSB7XG4gICAgICAgIC8vIOW/veeVpeWMheWQq+WcqHJvb3TkuK3nmoRkb23lvJXotbfnmoRtb3VzZU91dFxuICAgICAgICBpZiAoZWxlbWVudCA9PT0gdGhpcy5kb20pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudHJpZ2dlcignbW91c2VvdXQnLCBldmVudCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRvdWNo5byA5aeL5ZON5bqU5Ye95pWwXG4gICAqIEBpbm5lclxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICAgKi9cbiAgdG91Y2hzdGFydDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gRGVmYXVsdCBtb3VzZSBiZWhhdmlvdXIgc2hvdWxkIG5vdCBiZSBkaXNhYmxlZCBoZXJlLlxuICAgIC8vIEZvciBleGFtcGxlLCBwYWdlIG1heSBuZWVkcyB0byBiZSBzbGlkZWQuXG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudCh0aGlzLmRvbSwgZXZlbnQpOyAvLyBNYXJrIHRvdWNoLCB3aGljaCBpcyB1c2VmdWwgaW4gZGlzdGluZ3Vpc2ggdG91Y2ggYW5kXG4gICAgLy8gbW91c2UgZXZlbnQgaW4gdXBwZXIgYXBwbGljYXRvaW4uXG5cbiAgICBldmVudC56ckJ5VG91Y2ggPSB0cnVlO1xuICAgIHRoaXMuX2xhc3RUb3VjaE1vbWVudCA9IG5ldyBEYXRlKCk7XG4gICAgcHJvY2Vzc0dlc3R1cmUodGhpcywgZXZlbnQsICdzdGFydCcpOyAvLyBJbiB0b3VjaCBkZXZpY2UsIHRyaWdnZXIgYG1vdXNlbW92ZWAoYG1vdXNlb3ZlcmApIHNob3VsZFxuICAgIC8vIGJlIHRyaWdnZXJlZCwgYW5kIG11c3QgYmVmb3JlIGBtb3VzZWRvd25gIHRyaWdnZXJlZC5cblxuICAgIGRvbUhhbmRsZXJzLm1vdXNlbW92ZS5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICBkb21IYW5kbGVycy5tb3VzZWRvd24uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgc2V0VG91Y2hUaW1lcih0aGlzKTtcbiAgfSxcblxuICAvKipcbiAgICogVG91Y2jnp7vliqjlk43lupTlh73mlbBcbiAgICogQGlubmVyXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqL1xuICB0b3VjaG1vdmU6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQodGhpcy5kb20sIGV2ZW50KTsgLy8gTWFyayB0b3VjaCwgd2hpY2ggaXMgdXNlZnVsIGluIGRpc3Rpbmd1aXNoIHRvdWNoIGFuZFxuICAgIC8vIG1vdXNlIGV2ZW50IGluIHVwcGVyIGFwcGxpY2F0b2luLlxuXG4gICAgZXZlbnQuenJCeVRvdWNoID0gdHJ1ZTtcbiAgICBwcm9jZXNzR2VzdHVyZSh0aGlzLCBldmVudCwgJ2NoYW5nZScpOyAvLyBNb3VzZSBtb3ZlIHNob3VsZCBhbHdheXMgYmUgdHJpZ2dlcmVkIG5vIG1hdHRlciB3aGV0aGVyXG4gICAgLy8gdGhlcmUgaXMgZ2VzdHJ1ZSBldmVudCwgYmVjYXVzZSBtb3VzZSBtb3ZlIGFuZCBwaW5jaCBtYXlcbiAgICAvLyBiZSB1c2VkIGF0IHRoZSBzYW1lIHRpbWUuXG5cbiAgICBkb21IYW5kbGVycy5tb3VzZW1vdmUuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgc2V0VG91Y2hUaW1lcih0aGlzKTtcbiAgfSxcblxuICAvKipcbiAgICogVG91Y2jnu5PmnZ/lk43lupTlh73mlbBcbiAgICogQGlubmVyXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqL1xuICB0b3VjaGVuZDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudCh0aGlzLmRvbSwgZXZlbnQpOyAvLyBNYXJrIHRvdWNoLCB3aGljaCBpcyB1c2VmdWwgaW4gZGlzdGluZ3Vpc2ggdG91Y2ggYW5kXG4gICAgLy8gbW91c2UgZXZlbnQgaW4gdXBwZXIgYXBwbGljYXRvaW4uXG5cbiAgICBldmVudC56ckJ5VG91Y2ggPSB0cnVlO1xuICAgIHByb2Nlc3NHZXN0dXJlKHRoaXMsIGV2ZW50LCAnZW5kJyk7XG4gICAgZG9tSGFuZGxlcnMubW91c2V1cC5jYWxsKHRoaXMsIGV2ZW50KTsgLy8gRG8gbm90IHRyaWdnZXIgYG1vdXNlb3V0YCBoZXJlLCBpbiBzcGl0ZSBvZiBgbW91c2Vtb3ZlYChgbW91c2VvdmVyYCkgaXNcbiAgICAvLyB0cmlnZ2VyZWQgaW4gYHRvdWNoc3RhcnRgLiBUaGlzIHNlZW1zIHRvIGJlIGlsbG9naWNhbCwgYnV0IGJ5IHRoaXMgbWVjaGFuaXNtLFxuICAgIC8vIHdlIGNhbiBjb252ZW5pZW50bHkgaW1wbGVtZW50IFwiaG92ZXIgc3R5bGVcIiBpbiBib3RoIFBDIGFuZCB0b3VjaCBkZXZpY2UganVzdFxuICAgIC8vIGJ5IGxpc3RlbmluZyB0byBgbW91c2VvdmVyYCB0byBhZGQgXCJob3ZlciBzdHlsZVwiIGFuZCBsaXN0ZW5pbmcgdG8gYG1vdXNlb3V0YFxuICAgIC8vIHRvIHJlbW92ZSBcImhvdmVyIHN0eWxlXCIgb24gYW4gZWxlbWVudCwgd2l0aG91dCBhbnkgYWRkaXRpb25hbCBjb2RlIGZvclxuICAgIC8vIGNvbXBhdGliaWxpdHkuIChgbW91c2VvdXRgIHdpbGwgbm90IGJlIHRyaWdnZXJlZCBpbiBgdG91Y2hlbmRgLCBzbyBcImhvdmVyXG4gICAgLy8gc3R5bGVcIiB3aWxsIHJlbWFpbiBmb3IgdXNlciB2aWV3KVxuICAgIC8vIGNsaWNrIGV2ZW50IHNob3VsZCBhbHdheXMgYmUgdHJpZ2dlcmVkIG5vIG1hdHRlciB3aGV0aGVyXG4gICAgLy8gdGhlcmUgaXMgZ2VzdHJ1ZSBldmVudC4gU3lzdGVtIGNsaWNrIGNhbiBub3QgYmUgcHJldmVudGVkLlxuXG4gICAgaWYgKCtuZXcgRGF0ZSgpIC0gdGhpcy5fbGFzdFRvdWNoTW9tZW50IDwgVE9VQ0hfQ0xJQ0tfREVMQVkpIHtcbiAgICAgIGRvbUhhbmRsZXJzLmNsaWNrLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH1cblxuICAgIHNldFRvdWNoVGltZXIodGhpcyk7XG4gIH0sXG4gIHBvaW50ZXJkb3duOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBkb21IYW5kbGVycy5tb3VzZWRvd24uY2FsbCh0aGlzLCBldmVudCk7IC8vIGlmICh1c2VNU0d1ZXN0dXJlKHRoaXMsIGV2ZW50KSkge1xuICAgIC8vICAgICB0aGlzLl9tc0dlc3R1cmUuYWRkUG9pbnRlcihldmVudC5wb2ludGVySWQpO1xuICAgIC8vIH1cbiAgfSxcbiAgcG9pbnRlcm1vdmU6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIEZJWE1FXG4gICAgLy8gcG9pbnRlcm1vdmUgaXMgc28gc2Vuc2l0aXZlIHRoYXQgaXQgYWx3YXlzIHRyaWdnZXJlZCB3aGVuXG4gICAgLy8gdGFwKGNsaWNrKSBvbiB0b3VjaCBzY3JlZW4sIHdoaWNoIGFmZmVjdCBzb21lIGp1ZGdlbWVudCBpblxuICAgIC8vIHVwcGVyIGFwcGxpY2F0aW9uLiBTbywgd2UgZG9udCBzdXBwb3J0IG1vdXNlbW92ZSBvbiBNUyB0b3VjaFxuICAgIC8vIGRldmljZSB5ZXQuXG4gICAgaWYgKCFpc1BvaW50ZXJGcm9tVG91Y2goZXZlbnQpKSB7XG4gICAgICBkb21IYW5kbGVycy5tb3VzZW1vdmUuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICB9LFxuICBwb2ludGVydXA6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGRvbUhhbmRsZXJzLm1vdXNldXAuY2FsbCh0aGlzLCBldmVudCk7XG4gIH0sXG4gIHBvaW50ZXJvdXQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIHBvaW50ZXJvdXQgd2lsbCBiZSB0cmlnZ2VyZWQgd2hlbiB0YXAgb24gdG91Y2ggc2NyZWVuXG4gICAgLy8gKElFMTErL0VkZ2Ugb24gTVMgU3VyZmFjZSkgYWZ0ZXIgY2xpY2sgZXZlbnQgdHJpZ2dlcmVkLFxuICAgIC8vIHdoaWNoIGlzIGluY29uc2lzdGVudCB3aXRoIHRoZSBtb3Vzb3V0IGJlaGF2aW9yIHdlIGRlZmluZWRcbiAgICAvLyBpbiB0b3VjaGVuZC4gU28gd2UgdW5pZnkgdGhlbS5cbiAgICAvLyAoY2hlY2sgZG9tSGFuZGxlcnMudG91Y2hlbmQgZm9yIGRldGFpbGVkIGV4cGxhbmF0aW9uKVxuICAgIGlmICghaXNQb2ludGVyRnJvbVRvdWNoKGV2ZW50KSkge1xuICAgICAgZG9tSGFuZGxlcnMubW91c2VvdXQuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBpc1BvaW50ZXJGcm9tVG91Y2goZXZlbnQpIHtcbiAgdmFyIHBvaW50ZXJUeXBlID0gZXZlbnQucG9pbnRlclR5cGU7XG4gIHJldHVybiBwb2ludGVyVHlwZSA9PT0gJ3BlbicgfHwgcG9pbnRlclR5cGUgPT09ICd0b3VjaCc7XG59IC8vIGZ1bmN0aW9uIHVzZU1TR3Vlc3R1cmUoaGFuZGxlclByb3h5LCBldmVudCkge1xuLy8gICAgIHJldHVybiBpc1BvaW50ZXJGcm9tVG91Y2goZXZlbnQpICYmICEhaGFuZGxlclByb3h5Ll9tc0dlc3R1cmU7XG4vLyB9XG4vLyBDb21tb24gaGFuZGxlcnNcblxuXG56clV0aWwuZWFjaChbJ2NsaWNrJywgJ21vdXNlZG93bicsICdtb3VzZXVwJywgJ21vdXNld2hlZWwnLCAnZGJsY2xpY2snLCAnY29udGV4dG1lbnUnXSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgZG9tSGFuZGxlcnNbbmFtZV0gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KHRoaXMuZG9tLCBldmVudCk7XG4gICAgdGhpcy50cmlnZ2VyKG5hbWUsIGV2ZW50KTtcbiAgfTtcbn0pO1xuLyoqXG4gKiDkuLrmjqfliLbnsbvlrp7kvovliJ3lp4vljJZkb20g5LqL5Lu25aSE55CG5Ye95pWwXG4gKlxuICogQGlubmVyXG4gKiBAcGFyYW0ge21vZHVsZTp6cmVuZGVyL0hhbmRsZXJ9IGluc3RhbmNlIOaOp+WItuexu+WunuS+i1xuICovXG5cbmZ1bmN0aW9uIGluaXREb21IYW5kbGVyKGluc3RhbmNlKSB7XG4gIHpyVXRpbC5lYWNoKHRvdWNoSGFuZGxlck5hbWVzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIGluc3RhbmNlLl9oYW5kbGVyc1tuYW1lXSA9IHpyVXRpbC5iaW5kKGRvbUhhbmRsZXJzW25hbWVdLCBpbnN0YW5jZSk7XG4gIH0pO1xuICB6clV0aWwuZWFjaChwb2ludGVySGFuZGxlck5hbWVzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIGluc3RhbmNlLl9oYW5kbGVyc1tuYW1lXSA9IHpyVXRpbC5iaW5kKGRvbUhhbmRsZXJzW25hbWVdLCBpbnN0YW5jZSk7XG4gIH0pO1xuICB6clV0aWwuZWFjaChtb3VzZUhhbmRsZXJOYW1lcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpbnN0YW5jZS5faGFuZGxlcnNbbmFtZV0gPSBtYWtlTW91c2VIYW5kbGVyKGRvbUhhbmRsZXJzW25hbWVdLCBpbnN0YW5jZSk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIG1ha2VNb3VzZUhhbmRsZXIoZm4sIGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpbnN0YW5jZS5fdG91Y2hpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm4uYXBwbHkoaW5zdGFuY2UsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBIYW5kbGVyRG9tUHJveHkoZG9tKSB7XG4gIEV2ZW50ZnVsLmNhbGwodGhpcyk7XG4gIHRoaXMuZG9tID0gZG9tO1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuXG4gIHRoaXMuX3RvdWNoaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cblxuICB0aGlzLl90b3VjaFRpbWVyO1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHR5cGUge21vZHVsZTp6cmVuZGVyL2NvcmUvR2VzdHVyZU1ncn1cbiAgICovXG5cbiAgdGhpcy5fZ2VzdHVyZU1nciA9IG5ldyBHZXN0dXJlTWdyKCk7XG4gIHRoaXMuX2hhbmRsZXJzID0ge307XG4gIGluaXREb21IYW5kbGVyKHRoaXMpO1xuXG4gIGlmIChlbnYucG9pbnRlckV2ZW50c1N1cHBvcnRlZCkge1xuICAgIC8vIE9ubHkgSUUxMSsvRWRnZVxuICAgIC8vIDEuIE9uIGRldmljZXMgdGhhdCBib3RoIGVuYWJsZSB0b3VjaCBhbmQgbW91c2UgKGUuZy4sIE1TIFN1cmZhY2UgYW5kIGxlbm92byBYMjQwKSxcbiAgICAvLyBJRTExKy9FZGdlIGRvIG5vdCB0cmlnZ2VyIHRvdWNoIGV2ZW50LCBidXQgdHJpZ2dlciBwb2ludGVyIGV2ZW50IGFuZCBtb3VzZSBldmVudFxuICAgIC8vIGF0IHRoZSBzYW1lIHRpbWUuXG4gICAgLy8gMi4gT24gTVMgU3VyZmFjZSwgaXQgcHJvYmFibGVseSBvbmx5IHRyaWdnZXIgbW91c2Vkb3duIGJ1dCBubyBtb3VzZXVwIHdoZW4gdGFwIG9uXG4gICAgLy8gc2NyZWVuLCB3aGljaCBkbyBub3Qgb2NjdXJzIGluIHBvaW50ZXIgZXZlbnQuXG4gICAgLy8gU28gd2UgdXNlIHBvaW50ZXIgZXZlbnQgdG8gYm90aCBkZXRlY3QgdG91Y2ggZ2VzdHVyZSBhbmQgbW91c2UgYmVoYXZpb3IuXG4gICAgbW91bnRIYW5kbGVycyhwb2ludGVySGFuZGxlck5hbWVzLCB0aGlzKTsgLy8gRklYTUVcbiAgICAvLyBOb3RlOiBNUyBHZXN0dXJlIHJlcXVpcmUgQ1NTIHRvdWNoLWFjdGlvbiBzZXQuIEJ1dCB0b3VjaC1hY3Rpb24gaXMgbm90IHJlbGlhYmxlLFxuICAgIC8vIHdoaWNoIGRvZXMgbm90IHByZXZlbnQgZGVmdWF1bHQgYmVoYXZpb3Igb2NjYXNpb25hbGx5ICh3aGljaCBtYXkgY2F1c2UgdmlldyBwb3J0XG4gICAgLy8gem9vbWVkIGluIGJ1dCB1c2UgY2FuIG5vdCB6b29tIGl0IGJhY2spLiBBbmQgZXZlbnQucHJldmVudERlZmF1bHQoKSBkb2VzIG5vdCB3b3JrLlxuICAgIC8vIFNvIHdlIGhhdmUgdG8gbm90IHRvIHVzZSBNU0dlc3R1cmUgYW5kIG5vdCB0byBzdXBwb3J0IHRvdWNobW92ZSBhbmQgcGluY2ggb24gTVNcbiAgICAvLyB0b3VjaCBzY3JlZW4uIEFuZCB3ZSBvbmx5IHN1cHBvcnQgY2xpY2sgYmVoYXZpb3Igb24gTVMgdG91Y2ggc2NyZWVuIG5vdy5cbiAgICAvLyBNUyBHZXN0dXJlIEV2ZW50IGlzIG9ubHkgc3VwcG9ydGVkIG9uIElFMTErL0VkZ2UgYW5kIG9uIFdpbmRvd3MgOCsuXG4gICAgLy8gV2UgZG9udCBzdXBwb3J0IHRvdWNoIG9uIElFIG9uIHdpbjcuXG4gICAgLy8gU2VlIDxodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2RuNDMzMjQzKHY9dnMuODUpLmFzcHg+XG4gICAgLy8gaWYgKHR5cGVvZiBNU0dlc3R1cmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyAgICAgKHRoaXMuX21zR2VzdHVyZSA9IG5ldyBNU0dlc3R1cmUoKSkudGFyZ2V0ID0gZG9tOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgICAvLyAgICAgZG9tLmFkZEV2ZW50TGlzdGVuZXIoJ01TR2VzdHVyZUNoYW5nZScsIG9uTVNHZXN0dXJlQ2hhbmdlKTtcbiAgICAvLyB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGVudi50b3VjaEV2ZW50c1N1cHBvcnRlZCkge1xuICAgICAgbW91bnRIYW5kbGVycyh0b3VjaEhhbmRsZXJOYW1lcywgdGhpcyk7IC8vIEhhbmRsZXIgb2YgJ21vdXNlb3V0JyBldmVudCBpcyBuZWVkZWQgaW4gdG91Y2ggbW9kZSwgd2hpY2ggd2lsbCBiZSBtb3VudGVkIGJlbG93LlxuICAgICAgLy8gYWRkRXZlbnRMaXN0ZW5lcihyb290LCAnbW91c2VvdXQnLCB0aGlzLl9tb3VzZW91dEhhbmRsZXIpO1xuICAgIH0gLy8gMS4gQ29uc2lkZXJpbmcgc29tZSBkZXZpY2VzIHRoYXQgYm90aCBlbmFibGUgdG91Y2ggYW5kIG1vdXNlIGV2ZW50IChsaWtlIG9uIE1TIFN1cmZhY2VcbiAgICAvLyBhbmQgbGVub3ZvIFgyNDAsIEBzZWUgIzIzNTApLCB3ZSBtYWtlIG1vdXNlIGV2ZW50IGJlIGFsd2F5cyBsaXN0ZW5lZCwgb3RoZXJ3aXNlXG4gICAgLy8gbW91c2UgZXZlbnQgY2FuIG5vdCBiZSBoYW5kbGUgaW4gdGhvc2UgZGV2aWNlcy5cbiAgICAvLyAyLiBPbiBNUyBTdXJmYWNlLCBDaHJvbWUgd2lsbCB0cmlnZ2VyIGJvdGggdG91Y2ggZXZlbnQgYW5kIG1vdXNlIGV2ZW50LiBIb3cgdG8gcHJldmVudFxuICAgIC8vIG1vdXNlZXZlbnQgYWZ0ZXIgdG91Y2ggZXZlbnQgdHJpZ2dlcmVkLCBzZWUgYHNldFRvdWNoVGltZXJgLlxuXG5cbiAgICBtb3VudEhhbmRsZXJzKG1vdXNlSGFuZGxlck5hbWVzLCB0aGlzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdW50SGFuZGxlcnMoaGFuZGxlck5hbWVzLCBpbnN0YW5jZSkge1xuICAgIHpyVXRpbC5lYWNoKGhhbmRsZXJOYW1lcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZG9tLCBldmVudE5hbWVGaXgobmFtZSksIGluc3RhbmNlLl9oYW5kbGVyc1tuYW1lXSk7XG4gICAgfSwgaW5zdGFuY2UpO1xuICB9XG59XG5cbnZhciBoYW5kbGVyRG9tUHJveHlQcm90byA9IEhhbmRsZXJEb21Qcm94eS5wcm90b3R5cGU7XG5cbmhhbmRsZXJEb21Qcm94eVByb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoYW5kbGVyTmFtZXMgPSBtb3VzZUhhbmRsZXJOYW1lcy5jb25jYXQodG91Y2hIYW5kbGVyTmFtZXMpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlck5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5hbWUgPSBoYW5kbGVyTmFtZXNbaV07XG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLmRvbSwgZXZlbnROYW1lRml4KG5hbWUpLCB0aGlzLl9oYW5kbGVyc1tuYW1lXSk7XG4gIH1cbn07XG5cbmhhbmRsZXJEb21Qcm94eVByb3RvLnNldEN1cnNvciA9IGZ1bmN0aW9uIChjdXJzb3JTdHlsZSkge1xuICB0aGlzLmRvbS5zdHlsZSAmJiAodGhpcy5kb20uc3R5bGUuY3Vyc29yID0gY3Vyc29yU3R5bGUgfHwgJ2RlZmF1bHQnKTtcbn07XG5cbnpyVXRpbC5taXhpbihIYW5kbGVyRG9tUHJveHksIEV2ZW50ZnVsKTtcbnZhciBfZGVmYXVsdCA9IEhhbmRsZXJEb21Qcm94eTtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIFBhdGggPSByZXF1aXJlKFwiLi9QYXRoXCIpO1xuXG4vLyBDb21wb3VuZFBhdGggdG8gaW1wcm92ZSBwZXJmb3JtYW5jZVxudmFyIF9kZWZhdWx0ID0gUGF0aC5leHRlbmQoe1xuICB0eXBlOiAnY29tcG91bmQnLFxuICBzaGFwZToge1xuICAgIHBhdGhzOiBudWxsXG4gIH0sXG4gIF91cGRhdGVQYXRoRGlydHk6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGlydHlQYXRoID0gdGhpcy5fX2RpcnR5UGF0aDtcbiAgICB2YXIgcGF0aHMgPSB0aGlzLnNoYXBlLnBhdGhzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRocy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gTWFyayBhcyBkaXJ0eSBpZiBhbnkgc3VicGF0aCBpcyBkaXJ0eVxuICAgICAgZGlydHlQYXRoID0gZGlydHlQYXRoIHx8IHBhdGhzW2ldLl9fZGlydHlQYXRoO1xuICAgIH1cblxuICAgIHRoaXMuX19kaXJ0eVBhdGggPSBkaXJ0eVBhdGg7XG4gICAgdGhpcy5fX2RpcnR5ID0gdGhpcy5fX2RpcnR5IHx8IGRpcnR5UGF0aDtcbiAgfSxcbiAgYmVmb3JlQnJ1c2g6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl91cGRhdGVQYXRoRGlydHkoKTtcblxuICAgIHZhciBwYXRocyA9IHRoaXMuc2hhcGUucGF0aHMgfHwgW107XG4gICAgdmFyIHNjYWxlID0gdGhpcy5nZXRHbG9iYWxTY2FsZSgpOyAvLyBVcGRhdGUgcGF0aCBzY2FsZVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRocy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFwYXRoc1tpXS5wYXRoKSB7XG4gICAgICAgIHBhdGhzW2ldLmNyZWF0ZVBhdGhQcm94eSgpO1xuICAgICAgfVxuXG4gICAgICBwYXRoc1tpXS5wYXRoLnNldFNjYWxlKHNjYWxlWzBdLCBzY2FsZVsxXSk7XG4gICAgfVxuICB9LFxuICBidWlsZFBhdGg6IGZ1bmN0aW9uIChjdHgsIHNoYXBlKSB7XG4gICAgdmFyIHBhdGhzID0gc2hhcGUucGF0aHMgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwYXRoc1tpXS5idWlsZFBhdGgoY3R4LCBwYXRoc1tpXS5zaGFwZSwgdHJ1ZSk7XG4gICAgfVxuICB9LFxuICBhZnRlckJydXNoOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhdGhzID0gdGhpcy5zaGFwZS5wYXRocyB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHBhdGhzW2ldLl9fZGlydHlQYXRoID0gZmFsc2U7XG4gICAgfVxuICB9LFxuICBnZXRCb3VuZGluZ1JlY3Q6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl91cGRhdGVQYXRoRGlydHkoKTtcblxuICAgIHJldHVybiBQYXRoLnByb3RvdHlwZS5nZXRCb3VuZGluZ1JlY3QuY2FsbCh0aGlzKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIHpyVXRpbCA9IHJlcXVpcmUoXCIuLi9jb3JlL3V0aWxcIik7XG5cbnZhciBTdHlsZSA9IHJlcXVpcmUoXCIuL1N0eWxlXCIpO1xuXG52YXIgRWxlbWVudCA9IHJlcXVpcmUoXCIuLi9FbGVtZW50XCIpO1xuXG52YXIgUmVjdFRleHQgPSByZXF1aXJlKFwiLi9taXhpbi9SZWN0VGV4dFwiKTtcblxuLyoqXG4gKiDlj6/nu5jliLbnmoTlm77lvaLln7rnsbtcbiAqIEJhc2UgY2xhc3Mgb2YgYWxsIGRpc3BsYXlhYmxlIGdyYXBoaWMgb2JqZWN0c1xuICogQG1vZHVsZSB6cmVuZGVyL2dyYXBoaWMvRGlzcGxheWFibGVcbiAqL1xuXG4vKipcbiAqIEBhbGlhcyBtb2R1bGU6enJlbmRlci9ncmFwaGljL0Rpc3BsYXlhYmxlXG4gKiBAZXh0ZW5kcyBtb2R1bGU6enJlbmRlci9FbGVtZW50XG4gKiBAZXh0ZW5kcyBtb2R1bGU6enJlbmRlci9ncmFwaGljL21peGluL1JlY3RUZXh0XG4gKi9cbmZ1bmN0aW9uIERpc3BsYXlhYmxlKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIEVsZW1lbnQuY2FsbCh0aGlzLCBvcHRzKTsgLy8gRXh0ZW5kIHByb3BlcnRpZXNcblxuICBmb3IgKHZhciBuYW1lIGluIG9wdHMpIHtcbiAgICBpZiAob3B0cy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiBuYW1lICE9PSAnc3R5bGUnKSB7XG4gICAgICB0aGlzW25hbWVdID0gb3B0c1tuYW1lXTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEB0eXBlIHttb2R1bGU6enJlbmRlci9ncmFwaGljL1N0eWxlfVxuICAgKi9cblxuXG4gIHRoaXMuc3R5bGUgPSBuZXcgU3R5bGUob3B0cy5zdHlsZSwgdGhpcyk7XG4gIHRoaXMuX3JlY3QgPSBudWxsOyAvLyBTaGFwZXMgZm9yIGNhc2NhZGUgY2xpcHBpbmcuXG5cbiAgdGhpcy5fX2NsaXBQYXRocyA9IFtdOyAvLyBGSVhNRSBTdGF0ZWZ1bCBtdXN0IGJlIG1peGluZWQgYWZ0ZXIgc3R5bGUgaXMgc2V0dGVkXG4gIC8vIFN0YXRlZnVsLmNhbGwodGhpcywgb3B0cyk7XG59XG5cbkRpc3BsYXlhYmxlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IERpc3BsYXlhYmxlLFxuICB0eXBlOiAnZGlzcGxheWFibGUnLFxuXG4gIC8qKlxuICAgKiBEaXNwbGF5YWJsZSDmmK/lkKbkuLrohI/vvIxQYWludGVyIOS4reS8muagueaNruivpeagh+iusOWIpOaWreaYr+WQpumcgOimgeaYr+WQpumcgOimgemHjeaWsOe7mOWItlxuICAgKiBEaXJ0eSBmbGFnLiBGcm9tIHdoaWNoIHBhaW50ZXIgd2lsbCBkZXRlcm1pbmUgaWYgdGhpcyBkaXNwbGF5YWJsZSBvYmplY3QgbmVlZHMgYnJ1c2hcbiAgICogQG5hbWUgbW9kdWxlOnpyZW5kZXIvZ3JhcGhpYy9EaXNwbGF5YWJsZSNfX2RpcnR5XG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgX19kaXJ0eTogdHJ1ZSxcblxuICAvKipcbiAgICog5Zu+5b2i5piv5ZCm5Y+v6KeB77yM5Li6dHJ1ZeaXtuS4jee7mOWItuWbvuW9ou+8jOS9huaYr+S7jeiDveinpuWPkem8oOagh+S6i+S7tlxuICAgKiBJZiBpZ25vcmUgZHJhd2luZyBvZiB0aGUgZGlzcGxheWFibGUgb2JqZWN0LiBNb3VzZSBldmVudCB3aWxsIHN0aWxsIGJlIHRyaWdnZXJlZFxuICAgKiBAbmFtZSBtb2R1bGU6L3pyZW5kZXIvZ3JhcGhpYy9EaXNwbGF5YWJsZSNpbnZpc2libGVcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpbnZpc2libGU6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBAbmFtZSBtb2R1bGU6L3pyZW5kZXIvZ3JhcGhpYy9EaXNwbGF5YWJsZSN6XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHo6IDAsXG5cbiAgLyoqXG4gICAqIEBuYW1lIG1vZHVsZTovenJlbmRlci9ncmFwaGljL0Rpc3BsYXlhYmxlI3pcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgejI6IDAsXG5cbiAgLyoqXG4gICAqIHrlsYJsZXZlbO+8jOWGs+Wumue7mOeUu+WcqOWTquWxgmNhbnZhc+S4rVxuICAgKiBAbmFtZSBtb2R1bGU6L3pyZW5kZXIvZ3JhcGhpYy9EaXNwbGF5YWJsZSN6bGV2ZWxcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgemxldmVsOiAwLFxuXG4gIC8qKlxuICAgKiDmmK/lkKblj6/mi5bmi71cbiAgICogQG5hbWUgbW9kdWxlOi96cmVuZGVyL2dyYXBoaWMvRGlzcGxheWFibGUjZHJhZ2dhYmxlXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZHJhZ2dhYmxlOiBmYWxzZSxcblxuICAvKipcbiAgICog5piv5ZCm5q2j5Zyo5ouW5ou9XG4gICAqIEBuYW1lIG1vZHVsZTovenJlbmRlci9ncmFwaGljL0Rpc3BsYXlhYmxlI2RyYWdnYWJsZVxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRyYWdnaW5nOiBmYWxzZSxcblxuICAvKipcbiAgICog5piv5ZCm55u45bqU6byg5qCH5LqL5Lu2XG4gICAqIEBuYW1lIG1vZHVsZTovenJlbmRlci9ncmFwaGljL0Rpc3BsYXlhYmxlI3NpbGVudFxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNpbGVudDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIElmIGVuYWJsZSBjdWxsaW5nXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgY3VsbGluZzogZmFsc2UsXG5cbiAgLyoqXG4gICAqIE1vdXNlIGN1cnNvciB3aGVuIGhvdmVyZWRcbiAgICogQG5hbWUgbW9kdWxlOi96cmVuZGVyL2dyYXBoaWMvRGlzcGxheWFibGUjY3Vyc29yXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBjdXJzb3I6ICdwb2ludGVyJyxcblxuICAvKipcbiAgICogSWYgaG92ZXIgYXJlYSBpcyBib3VuZGluZyByZWN0XG4gICAqIEBuYW1lIG1vZHVsZTovenJlbmRlci9ncmFwaGljL0Rpc3BsYXlhYmxlI3JlY3RIb3ZlclxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgcmVjdEhvdmVyOiBmYWxzZSxcblxuICAvKipcbiAgICogUmVuZGVyIHRoZSBlbGVtZW50IHByb2dyZXNzaXZlbHkgd2hlbiB0aGUgdmFsdWUgPj0gMCxcbiAgICogdXNlZnVsbCBmb3IgbGFyZ2UgZGF0YS5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBwcm9ncmVzc2l2ZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgaW5jcmVtZW50YWw6IGZhbHNlLFxuICAvLyBpbnBsYWNlIGlzIHVzZWQgd2l0aCBpbmNyZW1lbnRhbFxuICBpbnBsYWNlOiBmYWxzZSxcbiAgYmVmb3JlQnJ1c2g6IGZ1bmN0aW9uIChjdHgpIHt9LFxuICBhZnRlckJydXNoOiBmdW5jdGlvbiAoY3R4KSB7fSxcblxuICAvKipcbiAgICog5Zu+5b2i57uY5Yi25pa55rOVXG4gICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHhcbiAgICovXG4gIC8vIEludGVyZmFjZVxuICBicnVzaDogZnVuY3Rpb24gKGN0eCwgcHJldkVsKSB7fSxcblxuICAvKipcbiAgICog6I635Y+W5pyA5bCP5YyF5Zu055uSXG4gICAqIEByZXR1cm4ge21vZHVsZTp6cmVuZGVyL2NvcmUvQm91bmRpbmdSZWN0fVxuICAgKi9cbiAgLy8gSW50ZXJmYWNlXG4gIGdldEJvdW5kaW5nUmVjdDogZnVuY3Rpb24gKCkge30sXG5cbiAgLyoqXG4gICAqIOWIpOaWreWdkOaghyB4LCB5IOaYr+WQpuWcqOWbvuW9ouS4ilxuICAgKiBJZiBkaXNwbGF5YWJsZSBlbGVtZW50IGNvbnRhaW4gY29vcmQgeCwgeVxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtICB7bnVtYmVyfSB5XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBjb250YWluOiBmdW5jdGlvbiAoeCwgeSkge1xuICAgIHJldHVybiB0aGlzLnJlY3RDb250YWluKHgsIHkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2JcbiAgICogQHBhcmFtICB7fSAgIGNvbnRleHRcbiAgICovXG4gIHRyYXZlcnNlOiBmdW5jdGlvbiAoY2IsIGNvbnRleHQpIHtcbiAgICBjYi5jYWxsKGNvbnRleHQsIHRoaXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiDliKTmlq3lnZDmoIcgeCwgeSDmmK/lkKblnKjlm77lvaLnmoTljIXlm7Tnm5LkuIpcbiAgICogSWYgYm91bmRpbmcgcmVjdCBvZiBlbGVtZW50IGNvbnRhaW4gY29vcmQgeCwgeVxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtICB7bnVtYmVyfSB5XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICByZWN0Q29udGFpbjogZnVuY3Rpb24gKHgsIHkpIHtcbiAgICB2YXIgY29vcmQgPSB0aGlzLnRyYW5zZm9ybUNvb3JkVG9Mb2NhbCh4LCB5KTtcbiAgICB2YXIgcmVjdCA9IHRoaXMuZ2V0Qm91bmRpbmdSZWN0KCk7XG4gICAgcmV0dXJuIHJlY3QuY29udGFpbihjb29yZFswXSwgY29vcmRbMV0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiDmoIforrDlm77lvaLlhYPntKDkuLrohI/vvIzlubbkuJTlnKjkuIvkuIDluKfph43nu5hcbiAgICogTWFyayBkaXNwbGF5YWJsZSBlbGVtZW50IGRpcnR5IGFuZCByZWZyZXNoIG5leHQgZnJhbWVcbiAgICovXG4gIGRpcnR5OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fX2RpcnR5ID0gdHJ1ZTtcbiAgICB0aGlzLl9yZWN0ID0gbnVsbDtcbiAgICB0aGlzLl9fenIgJiYgdGhpcy5fX3pyLnJlZnJlc2goKTtcbiAgfSxcblxuICAvKipcbiAgICog5Zu+5b2i5piv5ZCm5Lya6Kem5Y+R5LqL5Lu2XG4gICAqIElmIGRpc3BsYXlhYmxlIG9iamVjdCBiaW5kZWQgYW55IGV2ZW50XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICAvLyBUT0RPLCDpgJrov4cgYmluZCDnu5HlrprnmoTkuovku7ZcbiAgLy8gaXNTaWxlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgLy8gICAgIHJldHVybiAhKFxuICAvLyAgICAgICAgIHRoaXMuaG92ZXJhYmxlIHx8IHRoaXMuZHJhZ2dhYmxlXG4gIC8vICAgICAgICAgfHwgdGhpcy5vbm1vdXNlbW92ZSB8fCB0aGlzLm9ubW91c2VvdmVyIHx8IHRoaXMub25tb3VzZW91dFxuICAvLyAgICAgICAgIHx8IHRoaXMub25tb3VzZWRvd24gfHwgdGhpcy5vbm1vdXNldXAgfHwgdGhpcy5vbmNsaWNrXG4gIC8vICAgICAgICAgfHwgdGhpcy5vbmRyYWdlbnRlciB8fCB0aGlzLm9uZHJhZ292ZXIgfHwgdGhpcy5vbmRyYWdsZWF2ZVxuICAvLyAgICAgICAgIHx8IHRoaXMub25kcm9wXG4gIC8vICAgICApO1xuICAvLyB9LFxuXG4gIC8qKlxuICAgKiBBbGlhcyBmb3IgYW5pbWF0ZSgnc3R5bGUnKVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGxvb3BcbiAgICovXG4gIGFuaW1hdGVTdHlsZTogZnVuY3Rpb24gKGxvb3ApIHtcbiAgICByZXR1cm4gdGhpcy5hbmltYXRlKCdzdHlsZScsIGxvb3ApO1xuICB9LFxuICBhdHRyS1Y6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSAhPT0gJ3N0eWxlJykge1xuICAgICAgRWxlbWVudC5wcm90b3R5cGUuYXR0cktWLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3R5bGUuc2V0KHZhbHVlKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fHN0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICovXG4gIHNldFN0eWxlOiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHRoaXMuc3R5bGUuc2V0KGtleSwgdmFsdWUpO1xuICAgIHRoaXMuZGlydHkoZmFsc2UpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVc2UgZ2l2ZW4gc3R5bGUgb2JqZWN0XG4gICAqIEBwYXJhbSAge09iamVjdH0gb2JqXG4gICAqL1xuICB1c2VTdHlsZTogZnVuY3Rpb24gKG9iaikge1xuICAgIHRoaXMuc3R5bGUgPSBuZXcgU3R5bGUob2JqLCB0aGlzKTtcbiAgICB0aGlzLmRpcnR5KGZhbHNlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcbnpyVXRpbC5pbmhlcml0cyhEaXNwbGF5YWJsZSwgRWxlbWVudCk7XG56clV0aWwubWl4aW4oRGlzcGxheWFibGUsIFJlY3RUZXh0KTsgLy8genJVdGlsLm1peGluKERpc3BsYXlhYmxlLCBTdGF0ZWZ1bCk7XG5cbnZhciBfZGVmYXVsdCA9IERpc3BsYXlhYmxlO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCIvKipcbiAqIEBwYXJhbSB7QXJyYXkuPE9iamVjdD59IGNvbG9yU3RvcHNcbiAqL1xudmFyIEdyYWRpZW50ID0gZnVuY3Rpb24gKGNvbG9yU3RvcHMpIHtcbiAgdGhpcy5jb2xvclN0b3BzID0gY29sb3JTdG9wcyB8fCBbXTtcbn07XG5cbkdyYWRpZW50LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEdyYWRpZW50LFxuICBhZGRDb2xvclN0b3A6IGZ1bmN0aW9uIChvZmZzZXQsIGNvbG9yKSB7XG4gICAgdGhpcy5jb2xvclN0b3BzLnB1c2goe1xuICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICBjb2xvcjogY29sb3JcbiAgICB9KTtcbiAgfVxufTtcbnZhciBfZGVmYXVsdCA9IEdyYWRpZW50O1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgRGlzcGxheWFibGUgPSByZXF1aXJlKFwiLi9EaXNwbGF5YWJsZVwiKTtcblxudmFyIEJvdW5kaW5nUmVjdCA9IHJlcXVpcmUoXCIuLi9jb3JlL0JvdW5kaW5nUmVjdFwiKTtcblxudmFyIHpyVXRpbCA9IHJlcXVpcmUoXCIuLi9jb3JlL3V0aWxcIik7XG5cbnZhciBpbWFnZUhlbHBlciA9IHJlcXVpcmUoXCIuL2hlbHBlci9pbWFnZVwiKTtcblxuLyoqXG4gKiBAYWxpYXMgenJlbmRlci9ncmFwaGljL0ltYWdlXG4gKiBAZXh0ZW5kcyBtb2R1bGU6enJlbmRlci9ncmFwaGljL0Rpc3BsYXlhYmxlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKi9cbmZ1bmN0aW9uIFpJbWFnZShvcHRzKSB7XG4gIERpc3BsYXlhYmxlLmNhbGwodGhpcywgb3B0cyk7XG59XG5cblpJbWFnZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBaSW1hZ2UsXG4gIHR5cGU6ICdpbWFnZScsXG4gIGJydXNoOiBmdW5jdGlvbiAoY3R4LCBwcmV2RWwpIHtcbiAgICB2YXIgc3R5bGUgPSB0aGlzLnN0eWxlO1xuICAgIHZhciBzcmMgPSBzdHlsZS5pbWFnZTsgLy8gTXVzdCBiaW5kIGVhY2ggdGltZVxuXG4gICAgc3R5bGUuYmluZChjdHgsIHRoaXMsIHByZXZFbCk7XG4gICAgdmFyIGltYWdlID0gdGhpcy5faW1hZ2UgPSBpbWFnZUhlbHBlci5jcmVhdGVPclVwZGF0ZUltYWdlKHNyYywgdGhpcy5faW1hZ2UsIHRoaXMsIHRoaXMub25sb2FkKTtcblxuICAgIGlmICghaW1hZ2UgfHwgIWltYWdlSGVscGVyLmlzSW1hZ2VSZWFkeShpbWFnZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIOWbvueJh+W3sue7j+WKoOi9veWujOaIkFxuICAgIC8vIGlmIChpbWFnZS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09ICdJTUcnKSB7XG4gICAgLy8gICAgIGlmICghaW1hZ2UuY29tcGxldGUpIHtcbiAgICAvLyAgICAgICAgIHJldHVybjtcbiAgICAvLyAgICAgfVxuICAgIC8vIH1cbiAgICAvLyBFbHNlIGlzIGNhbnZhc1xuXG5cbiAgICB2YXIgeCA9IHN0eWxlLnggfHwgMDtcbiAgICB2YXIgeSA9IHN0eWxlLnkgfHwgMDtcbiAgICB2YXIgd2lkdGggPSBzdHlsZS53aWR0aDtcbiAgICB2YXIgaGVpZ2h0ID0gc3R5bGUuaGVpZ2h0O1xuICAgIHZhciBhc3BlY3QgPSBpbWFnZS53aWR0aCAvIGltYWdlLmhlaWdodDtcblxuICAgIGlmICh3aWR0aCA9PSBudWxsICYmIGhlaWdodCAhPSBudWxsKSB7XG4gICAgICAvLyBLZWVwIGltYWdlL2hlaWdodCByYXRpb1xuICAgICAgd2lkdGggPSBoZWlnaHQgKiBhc3BlY3Q7XG4gICAgfSBlbHNlIGlmIChoZWlnaHQgPT0gbnVsbCAmJiB3aWR0aCAhPSBudWxsKSB7XG4gICAgICBoZWlnaHQgPSB3aWR0aCAvIGFzcGVjdDtcbiAgICB9IGVsc2UgaWYgKHdpZHRoID09IG51bGwgJiYgaGVpZ2h0ID09IG51bGwpIHtcbiAgICAgIHdpZHRoID0gaW1hZ2Uud2lkdGg7XG4gICAgICBoZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgfSAvLyDorr7nva50cmFuc2Zvcm1cblxuXG4gICAgdGhpcy5zZXRUcmFuc2Zvcm0oY3R4KTtcblxuICAgIGlmIChzdHlsZS5zV2lkdGggJiYgc3R5bGUuc0hlaWdodCkge1xuICAgICAgdmFyIHN4ID0gc3R5bGUuc3ggfHwgMDtcbiAgICAgIHZhciBzeSA9IHN0eWxlLnN5IHx8IDA7XG4gICAgICBjdHguZHJhd0ltYWdlKGltYWdlLCBzeCwgc3ksIHN0eWxlLnNXaWR0aCwgc3R5bGUuc0hlaWdodCwgeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgfSBlbHNlIGlmIChzdHlsZS5zeCAmJiBzdHlsZS5zeSkge1xuICAgICAgdmFyIHN4ID0gc3R5bGUuc3g7XG4gICAgICB2YXIgc3kgPSBzdHlsZS5zeTtcbiAgICAgIHZhciBzV2lkdGggPSB3aWR0aCAtIHN4O1xuICAgICAgdmFyIHNIZWlnaHQgPSBoZWlnaHQgLSBzeTtcbiAgICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIHN4LCBzeSwgc1dpZHRoLCBzSGVpZ2h0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3R4LmRyYXdJbWFnZShpbWFnZSwgeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgfSAvLyBEcmF3IHJlY3QgdGV4dFxuXG5cbiAgICBpZiAoc3R5bGUudGV4dCAhPSBudWxsKSB7XG4gICAgICAvLyBPbmx5IHJlc3RvcmUgdHJhbnNmb3JtIHdoZW4gbmVlZHMgZHJhdyB0ZXh0LlxuICAgICAgdGhpcy5yZXN0b3JlVHJhbnNmb3JtKGN0eCk7XG4gICAgICB0aGlzLmRyYXdSZWN0VGV4dChjdHgsIHRoaXMuZ2V0Qm91bmRpbmdSZWN0KCkpO1xuICAgIH1cbiAgfSxcbiAgZ2V0Qm91bmRpbmdSZWN0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0eWxlID0gdGhpcy5zdHlsZTtcblxuICAgIGlmICghdGhpcy5fcmVjdCkge1xuICAgICAgdGhpcy5fcmVjdCA9IG5ldyBCb3VuZGluZ1JlY3Qoc3R5bGUueCB8fCAwLCBzdHlsZS55IHx8IDAsIHN0eWxlLndpZHRoIHx8IDAsIHN0eWxlLmhlaWdodCB8fCAwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcmVjdDtcbiAgfVxufTtcbnpyVXRpbC5pbmhlcml0cyhaSW1hZ2UsIERpc3BsYXlhYmxlKTtcbnZhciBfZGVmYXVsdCA9IFpJbWFnZTtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIF91dGlsID0gcmVxdWlyZShcIi4uL2NvcmUvdXRpbFwiKTtcblxudmFyIGluaGVyaXRzID0gX3V0aWwuaW5oZXJpdHM7XG5cbnZhciBEaXNwbGF5YmxlID0gcmVxdWlyZShcIi4vRGlzcGxheWFibGVcIik7XG5cbnZhciBCb3VuZGluZ1JlY3QgPSByZXF1aXJlKFwiLi4vY29yZS9Cb3VuZGluZ1JlY3RcIik7XG5cbi8qKlxuICogRGlzcGxheWFibGUgZm9yIGluY3JlbWVudGFsIHJlbmRlcmluZy4gSXQgd2lsbCBiZSByZW5kZXJlZCBpbiBhIHNlcGFyYXRlIGxheWVyXG4gKiBJbmNyZW1lbnRhbERpc3BsYXkgaGF2ZSB0b28gbWFpbiBtZXRob2RzLiBgY2xlYXJEaXNwbGF5YWJsZXNgIGFuZCBgYWRkRGlzcGxheWFibGVzYFxuICogYWRkRGlzcGxheWFibGVzIHdpbGwgcmVuZGVyIHRoZSBhZGRlZCBkaXNwbGF5YWJsZXMgaW5jcmVtZXRhbGx5LlxuICpcbiAqIEl0IHVzZSBhIG5vdCBjbGVhckZsYWcgdG8gdGVsbCB0aGUgcGFpbnRlciBkb24ndCBjbGVhciB0aGUgbGF5ZXIgaWYgaXQncyB0aGUgZmlyc3QgZWxlbWVudC5cbiAqL1xuLy8gVE9ETyBTdHlsZSBvdmVycmlkZSA/XG5mdW5jdGlvbiBJbmNyZW1lbnRhbERpc3BsYXlibGUob3B0cykge1xuICBEaXNwbGF5YmxlLmNhbGwodGhpcywgb3B0cyk7XG4gIHRoaXMuX2Rpc3BsYXlhYmxlcyA9IFtdO1xuICB0aGlzLl90ZW1wb3JhcnlEaXNwbGF5YWJsZXMgPSBbXTtcbiAgdGhpcy5fY3Vyc29yID0gMDtcbiAgdGhpcy5ub3RDbGVhciA9IHRydWU7XG59XG5cbkluY3JlbWVudGFsRGlzcGxheWJsZS5wcm90b3R5cGUuaW5jcmVtZW50YWwgPSB0cnVlO1xuXG5JbmNyZW1lbnRhbERpc3BsYXlibGUucHJvdG90eXBlLmNsZWFyRGlzcGxheWJsZXMgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2Rpc3BsYXlhYmxlcyA9IFtdO1xuICB0aGlzLl90ZW1wb3JhcnlEaXNwbGF5YWJsZXMgPSBbXTtcbiAgdGhpcy5fY3Vyc29yID0gMDtcbiAgdGhpcy5kaXJ0eSgpO1xuICB0aGlzLm5vdENsZWFyID0gZmFsc2U7XG59O1xuXG5JbmNyZW1lbnRhbERpc3BsYXlibGUucHJvdG90eXBlLmFkZERpc3BsYXlhYmxlID0gZnVuY3Rpb24gKGRpc3BsYXlhYmxlLCBub3RQZXJzaXN0ZW50KSB7XG4gIGlmIChub3RQZXJzaXN0ZW50KSB7XG4gICAgdGhpcy5fdGVtcG9yYXJ5RGlzcGxheWFibGVzLnB1c2goZGlzcGxheWFibGUpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2Rpc3BsYXlhYmxlcy5wdXNoKGRpc3BsYXlhYmxlKTtcbiAgfVxuXG4gIHRoaXMuZGlydHkoKTtcbn07XG5cbkluY3JlbWVudGFsRGlzcGxheWJsZS5wcm90b3R5cGUuYWRkRGlzcGxheWFibGVzID0gZnVuY3Rpb24gKGRpc3BsYXlhYmxlcywgbm90UGVyc2lzdGVudCkge1xuICBub3RQZXJzaXN0ZW50ID0gbm90UGVyc2lzdGVudCB8fCBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3BsYXlhYmxlcy5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMuYWRkRGlzcGxheWFibGUoZGlzcGxheWFibGVzW2ldLCBub3RQZXJzaXN0ZW50KTtcbiAgfVxufTtcblxuSW5jcmVtZW50YWxEaXNwbGF5YmxlLnByb3RvdHlwZS5lYWNoUGVuZGluZ0Rpc3BsYXlhYmxlID0gZnVuY3Rpb24gKGNiKSB7XG4gIGZvciAodmFyIGkgPSB0aGlzLl9jdXJzb3I7IGkgPCB0aGlzLl9kaXNwbGF5YWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjYiAmJiBjYih0aGlzLl9kaXNwbGF5YWJsZXNbaV0pO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl90ZW1wb3JhcnlEaXNwbGF5YWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjYiAmJiBjYih0aGlzLl90ZW1wb3JhcnlEaXNwbGF5YWJsZXNbaV0pO1xuICB9XG59O1xuXG5JbmNyZW1lbnRhbERpc3BsYXlibGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy51cGRhdGVUcmFuc2Zvcm0oKTtcblxuICBmb3IgKHZhciBpID0gdGhpcy5fY3Vyc29yOyBpIDwgdGhpcy5fZGlzcGxheWFibGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRpc3BsYXlhYmxlID0gdGhpcy5fZGlzcGxheWFibGVzW2ldOyAvLyBQRU5ESU5HXG5cbiAgICBkaXNwbGF5YWJsZS5wYXJlbnQgPSB0aGlzO1xuICAgIGRpc3BsYXlhYmxlLnVwZGF0ZSgpO1xuICAgIGRpc3BsYXlhYmxlLnBhcmVudCA9IG51bGw7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3RlbXBvcmFyeURpc3BsYXlhYmxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkaXNwbGF5YWJsZSA9IHRoaXMuX3RlbXBvcmFyeURpc3BsYXlhYmxlc1tpXTsgLy8gUEVORElOR1xuXG4gICAgZGlzcGxheWFibGUucGFyZW50ID0gdGhpcztcbiAgICBkaXNwbGF5YWJsZS51cGRhdGUoKTtcbiAgICBkaXNwbGF5YWJsZS5wYXJlbnQgPSBudWxsO1xuICB9XG59O1xuXG5JbmNyZW1lbnRhbERpc3BsYXlibGUucHJvdG90eXBlLmJydXNoID0gZnVuY3Rpb24gKGN0eCwgcHJldkVsKSB7XG4gIC8vIFJlbmRlciBwZXJzaXN0YW50IGRpc3BsYXlhYmxlcy5cbiAgZm9yICh2YXIgaSA9IHRoaXMuX2N1cnNvcjsgaSA8IHRoaXMuX2Rpc3BsYXlhYmxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkaXNwbGF5YWJsZSA9IHRoaXMuX2Rpc3BsYXlhYmxlc1tpXTtcbiAgICBkaXNwbGF5YWJsZS5iZWZvcmVCcnVzaCAmJiBkaXNwbGF5YWJsZS5iZWZvcmVCcnVzaChjdHgpO1xuICAgIGRpc3BsYXlhYmxlLmJydXNoKGN0eCwgaSA9PT0gdGhpcy5fY3Vyc29yID8gbnVsbCA6IHRoaXMuX2Rpc3BsYXlhYmxlc1tpIC0gMV0pO1xuICAgIGRpc3BsYXlhYmxlLmFmdGVyQnJ1c2ggJiYgZGlzcGxheWFibGUuYWZ0ZXJCcnVzaChjdHgpO1xuICB9XG5cbiAgdGhpcy5fY3Vyc29yID0gaTsgLy8gUmVuZGVyIHRlbXBvcmFyeSBkaXNwbGF5YWJsZXMuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl90ZW1wb3JhcnlEaXNwbGF5YWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGlzcGxheWFibGUgPSB0aGlzLl90ZW1wb3JhcnlEaXNwbGF5YWJsZXNbaV07XG4gICAgZGlzcGxheWFibGUuYmVmb3JlQnJ1c2ggJiYgZGlzcGxheWFibGUuYmVmb3JlQnJ1c2goY3R4KTtcbiAgICBkaXNwbGF5YWJsZS5icnVzaChjdHgsIGkgPT09IDAgPyBudWxsIDogdGhpcy5fdGVtcG9yYXJ5RGlzcGxheWFibGVzW2kgLSAxXSk7XG4gICAgZGlzcGxheWFibGUuYWZ0ZXJCcnVzaCAmJiBkaXNwbGF5YWJsZS5hZnRlckJydXNoKGN0eCk7XG4gIH1cblxuICB0aGlzLl90ZW1wb3JhcnlEaXNwbGF5YWJsZXMgPSBbXTtcbiAgdGhpcy5ub3RDbGVhciA9IHRydWU7XG59O1xuXG52YXIgbSA9IFtdO1xuXG5JbmNyZW1lbnRhbERpc3BsYXlibGUucHJvdG90eXBlLmdldEJvdW5kaW5nUmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLl9yZWN0KSB7XG4gICAgdmFyIHJlY3QgPSBuZXcgQm91bmRpbmdSZWN0KEluZmluaXR5LCBJbmZpbml0eSwgLUluZmluaXR5LCAtSW5maW5pdHkpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9kaXNwbGF5YWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkaXNwbGF5YWJsZSA9IHRoaXMuX2Rpc3BsYXlhYmxlc1tpXTtcbiAgICAgIHZhciBjaGlsZFJlY3QgPSBkaXNwbGF5YWJsZS5nZXRCb3VuZGluZ1JlY3QoKS5jbG9uZSgpO1xuXG4gICAgICBpZiAoZGlzcGxheWFibGUubmVlZExvY2FsVHJhbnNmb3JtKCkpIHtcbiAgICAgICAgY2hpbGRSZWN0LmFwcGx5VHJhbnNmb3JtKGRpc3BsYXlhYmxlLmdldExvY2FsVHJhbnNmb3JtKG0pKTtcbiAgICAgIH1cblxuICAgICAgcmVjdC51bmlvbihjaGlsZFJlY3QpO1xuICAgIH1cblxuICAgIHRoaXMuX3JlY3QgPSByZWN0O1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX3JlY3Q7XG59O1xuXG5JbmNyZW1lbnRhbERpc3BsYXlibGUucHJvdG90eXBlLmNvbnRhaW4gPSBmdW5jdGlvbiAoeCwgeSkge1xuICB2YXIgbG9jYWxQb3MgPSB0aGlzLnRyYW5zZm9ybUNvb3JkVG9Mb2NhbCh4LCB5KTtcbiAgdmFyIHJlY3QgPSB0aGlzLmdldEJvdW5kaW5nUmVjdCgpO1xuXG4gIGlmIChyZWN0LmNvbnRhaW4obG9jYWxQb3NbMF0sIGxvY2FsUG9zWzFdKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fZGlzcGxheWFibGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGlzcGxheWFibGUgPSB0aGlzLl9kaXNwbGF5YWJsZXNbaV07XG5cbiAgICAgIGlmIChkaXNwbGF5YWJsZS5jb250YWluKHgsIHkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmluaGVyaXRzKEluY3JlbWVudGFsRGlzcGxheWJsZSwgRGlzcGxheWJsZSk7XG52YXIgX2RlZmF1bHQgPSBJbmNyZW1lbnRhbERpc3BsYXlibGU7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciB6clV0aWwgPSByZXF1aXJlKFwiLi4vY29yZS91dGlsXCIpO1xuXG52YXIgR3JhZGllbnQgPSByZXF1aXJlKFwiLi9HcmFkaWVudFwiKTtcblxuLyoqXG4gKiB4LCB5LCB4MiwgeTIgYXJlIGFsbCBwZXJjZW50IGZyb20gMCB0byAxXG4gKiBAcGFyYW0ge251bWJlcn0gW3g9MF1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbeT0wXVxuICogQHBhcmFtIHtudW1iZXJ9IFt4Mj0xXVxuICogQHBhcmFtIHtudW1iZXJ9IFt5Mj0wXVxuICogQHBhcmFtIHtBcnJheS48T2JqZWN0Pn0gY29sb3JTdG9wc1xuICogQHBhcmFtIHtib29sZWFufSBbZ2xvYmFsQ29vcmQ9ZmFsc2VdXG4gKi9cbnZhciBMaW5lYXJHcmFkaWVudCA9IGZ1bmN0aW9uICh4LCB5LCB4MiwgeTIsIGNvbG9yU3RvcHMsIGdsb2JhbENvb3JkKSB7XG4gIC8vIFNob3VsZCBkbyBub3RoaW5nIG1vcmUgaW4gdGhpcyBjb25zdHJ1Y3Rvci4gQmVjYXVzZSBncmFkaWVudCBjYW4gYmVcbiAgLy8gZGVjbGFyZCBieSBgY29sb3I6IHt0eXBlOiAnbGluZWFyJywgY29sb3JTdG9wczogLi4ufWAsIHdoZXJlXG4gIC8vIHRoaXMgY29uc3RydWN0b3Igd2lsbCBub3QgYmUgY2FsbGVkLlxuICB0aGlzLnggPSB4ID09IG51bGwgPyAwIDogeDtcbiAgdGhpcy55ID0geSA9PSBudWxsID8gMCA6IHk7XG4gIHRoaXMueDIgPSB4MiA9PSBudWxsID8gMSA6IHgyO1xuICB0aGlzLnkyID0geTIgPT0gbnVsbCA/IDAgOiB5MjsgLy8gQ2FuIGJlIGNsb25lZFxuXG4gIHRoaXMudHlwZSA9ICdsaW5lYXInOyAvLyBJZiB1c2UgZ2xvYmFsIGNvb3JkXG5cbiAgdGhpcy5nbG9iYWwgPSBnbG9iYWxDb29yZCB8fCBmYWxzZTtcbiAgR3JhZGllbnQuY2FsbCh0aGlzLCBjb2xvclN0b3BzKTtcbn07XG5cbkxpbmVhckdyYWRpZW50LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IExpbmVhckdyYWRpZW50XG59O1xuenJVdGlsLmluaGVyaXRzKExpbmVhckdyYWRpZW50LCBHcmFkaWVudCk7XG52YXIgX2RlZmF1bHQgPSBMaW5lYXJHcmFkaWVudDtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIERpc3BsYXlhYmxlID0gcmVxdWlyZShcIi4vRGlzcGxheWFibGVcIik7XG5cbnZhciB6clV0aWwgPSByZXF1aXJlKFwiLi4vY29yZS91dGlsXCIpO1xuXG52YXIgUGF0aFByb3h5ID0gcmVxdWlyZShcIi4uL2NvcmUvUGF0aFByb3h5XCIpO1xuXG52YXIgcGF0aENvbnRhaW4gPSByZXF1aXJlKFwiLi4vY29udGFpbi9wYXRoXCIpO1xuXG52YXIgUGF0dGVybiA9IHJlcXVpcmUoXCIuL1BhdHRlcm5cIik7XG5cbnZhciBnZXRDYW52YXNQYXR0ZXJuID0gUGF0dGVybi5wcm90b3R5cGUuZ2V0Q2FudmFzUGF0dGVybjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwYXRoUHJveHlGb3JEcmF3ID0gbmV3IFBhdGhQcm94eSh0cnVlKTtcbi8qKlxuICogQGFsaWFzIG1vZHVsZTp6cmVuZGVyL2dyYXBoaWMvUGF0aFxuICogQGV4dGVuZHMgbW9kdWxlOnpyZW5kZXIvZ3JhcGhpYy9EaXNwbGF5YWJsZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICovXG5cbmZ1bmN0aW9uIFBhdGgob3B0cykge1xuICBEaXNwbGF5YWJsZS5jYWxsKHRoaXMsIG9wdHMpO1xuICAvKipcbiAgICogQHR5cGUge21vZHVsZTp6cmVuZGVyL2NvcmUvUGF0aFByb3h5fVxuICAgKiBAcmVhZE9ubHlcbiAgICovXG5cbiAgdGhpcy5wYXRoID0gbnVsbDtcbn1cblxuUGF0aC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQYXRoLFxuICB0eXBlOiAncGF0aCcsXG4gIF9fZGlydHlQYXRoOiB0cnVlLFxuICBzdHJva2VDb250YWluVGhyZXNob2xkOiA1LFxuICBicnVzaDogZnVuY3Rpb24gKGN0eCwgcHJldkVsKSB7XG4gICAgdmFyIHN0eWxlID0gdGhpcy5zdHlsZTtcbiAgICB2YXIgcGF0aCA9IHRoaXMucGF0aCB8fCBwYXRoUHJveHlGb3JEcmF3O1xuICAgIHZhciBoYXNTdHJva2UgPSBzdHlsZS5oYXNTdHJva2UoKTtcbiAgICB2YXIgaGFzRmlsbCA9IHN0eWxlLmhhc0ZpbGwoKTtcbiAgICB2YXIgZmlsbCA9IHN0eWxlLmZpbGw7XG4gICAgdmFyIHN0cm9rZSA9IHN0eWxlLnN0cm9rZTtcbiAgICB2YXIgaGFzRmlsbEdyYWRpZW50ID0gaGFzRmlsbCAmJiAhIWZpbGwuY29sb3JTdG9wcztcbiAgICB2YXIgaGFzU3Ryb2tlR3JhZGllbnQgPSBoYXNTdHJva2UgJiYgISFzdHJva2UuY29sb3JTdG9wcztcbiAgICB2YXIgaGFzRmlsbFBhdHRlcm4gPSBoYXNGaWxsICYmICEhZmlsbC5pbWFnZTtcbiAgICB2YXIgaGFzU3Ryb2tlUGF0dGVybiA9IGhhc1N0cm9rZSAmJiAhIXN0cm9rZS5pbWFnZTtcbiAgICBzdHlsZS5iaW5kKGN0eCwgdGhpcywgcHJldkVsKTtcbiAgICB0aGlzLnNldFRyYW5zZm9ybShjdHgpO1xuXG4gICAgaWYgKHRoaXMuX19kaXJ0eSkge1xuICAgICAgdmFyIHJlY3Q7IC8vIFVwZGF0ZSBncmFkaWVudCBiZWNhdXNlIGJvdW5kaW5nIHJlY3QgbWF5IGNoYW5nZWRcblxuICAgICAgaWYgKGhhc0ZpbGxHcmFkaWVudCkge1xuICAgICAgICByZWN0ID0gcmVjdCB8fCB0aGlzLmdldEJvdW5kaW5nUmVjdCgpO1xuICAgICAgICB0aGlzLl9maWxsR3JhZGllbnQgPSBzdHlsZS5nZXRHcmFkaWVudChjdHgsIGZpbGwsIHJlY3QpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzU3Ryb2tlR3JhZGllbnQpIHtcbiAgICAgICAgcmVjdCA9IHJlY3QgfHwgdGhpcy5nZXRCb3VuZGluZ1JlY3QoKTtcbiAgICAgICAgdGhpcy5fc3Ryb2tlR3JhZGllbnQgPSBzdHlsZS5nZXRHcmFkaWVudChjdHgsIHN0cm9rZSwgcmVjdCk7XG4gICAgICB9XG4gICAgfSAvLyBVc2UgdGhlIGdyYWRpZW50IG9yIHBhdHRlcm5cblxuXG4gICAgaWYgKGhhc0ZpbGxHcmFkaWVudCkge1xuICAgICAgLy8gUEVORElORyBJZiBtYXkgaGF2ZSBhZmZlY3QgdGhlIHN0YXRlXG4gICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5fZmlsbEdyYWRpZW50O1xuICAgIH0gZWxzZSBpZiAoaGFzRmlsbFBhdHRlcm4pIHtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBnZXRDYW52YXNQYXR0ZXJuLmNhbGwoZmlsbCwgY3R4KTtcbiAgICB9XG5cbiAgICBpZiAoaGFzU3Ryb2tlR3JhZGllbnQpIHtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuX3N0cm9rZUdyYWRpZW50O1xuICAgIH0gZWxzZSBpZiAoaGFzU3Ryb2tlUGF0dGVybikge1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gZ2V0Q2FudmFzUGF0dGVybi5jYWxsKHN0cm9rZSwgY3R4KTtcbiAgICB9XG5cbiAgICB2YXIgbGluZURhc2ggPSBzdHlsZS5saW5lRGFzaDtcbiAgICB2YXIgbGluZURhc2hPZmZzZXQgPSBzdHlsZS5saW5lRGFzaE9mZnNldDtcbiAgICB2YXIgY3R4TGluZURhc2ggPSAhIWN0eC5zZXRMaW5lRGFzaDsgLy8gVXBkYXRlIHBhdGggc3gsIHN5XG5cbiAgICB2YXIgc2NhbGUgPSB0aGlzLmdldEdsb2JhbFNjYWxlKCk7XG4gICAgcGF0aC5zZXRTY2FsZShzY2FsZVswXSwgc2NhbGVbMV0pOyAvLyBQcm94eSBjb250ZXh0XG4gICAgLy8gUmVidWlsZCBwYXRoIGluIGZvbGxvd2luZyAyIGNhc2VzXG4gICAgLy8gMS4gUGF0aCBpcyBkaXJ0eVxuICAgIC8vIDIuIFBhdGggbmVlZHMgamF2YXNjcmlwdCBpbXBsZW1lbnRlZCBsaW5lRGFzaCBzdHJva2luZy5cbiAgICAvLyAgICBJbiB0aGlzIGNhc2UsIGxpbmVEYXNoIGluZm9ybWF0aW9uIHdpbGwgbm90IGJlIHNhdmVkIGluIFBhdGhQcm94eVxuXG4gICAgaWYgKHRoaXMuX19kaXJ0eVBhdGggfHwgbGluZURhc2ggJiYgIWN0eExpbmVEYXNoICYmIGhhc1N0cm9rZSkge1xuICAgICAgcGF0aC5iZWdpblBhdGgoY3R4KTsgLy8gU2V0dGluZyBsaW5lIGRhc2ggYmVmb3JlIGJ1aWxkIHBhdGhcblxuICAgICAgaWYgKGxpbmVEYXNoICYmICFjdHhMaW5lRGFzaCkge1xuICAgICAgICBwYXRoLnNldExpbmVEYXNoKGxpbmVEYXNoKTtcbiAgICAgICAgcGF0aC5zZXRMaW5lRGFzaE9mZnNldChsaW5lRGFzaE9mZnNldCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYnVpbGRQYXRoKHBhdGgsIHRoaXMuc2hhcGUsIGZhbHNlKTsgLy8gQ2xlYXIgcGF0aCBkaXJ0eSBmbGFnXG5cbiAgICAgIGlmICh0aGlzLnBhdGgpIHtcbiAgICAgICAgdGhpcy5fX2RpcnR5UGF0aCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZXBsYXkgcGF0aCBidWlsZGluZ1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgdGhpcy5wYXRoLnJlYnVpbGRQYXRoKGN0eCk7XG4gICAgfVxuXG4gICAgaGFzRmlsbCAmJiBwYXRoLmZpbGwoY3R4KTtcblxuICAgIGlmIChsaW5lRGFzaCAmJiBjdHhMaW5lRGFzaCkge1xuICAgICAgY3R4LnNldExpbmVEYXNoKGxpbmVEYXNoKTtcbiAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IGxpbmVEYXNoT2Zmc2V0O1xuICAgIH1cblxuICAgIGhhc1N0cm9rZSAmJiBwYXRoLnN0cm9rZShjdHgpO1xuXG4gICAgaWYgKGxpbmVEYXNoICYmIGN0eExpbmVEYXNoKSB7XG4gICAgICAvLyBQRU5ESU5HXG4gICAgICAvLyBSZW1vdmUgbGluZURhc2hcbiAgICAgIGN0eC5zZXRMaW5lRGFzaChbXSk7XG4gICAgfSAvLyBEcmF3IHJlY3QgdGV4dFxuXG5cbiAgICBpZiAoc3R5bGUudGV4dCAhPSBudWxsKSB7XG4gICAgICAvLyBPbmx5IHJlc3RvcmUgdHJhbnNmb3JtIHdoZW4gbmVlZHMgZHJhdyB0ZXh0LlxuICAgICAgdGhpcy5yZXN0b3JlVHJhbnNmb3JtKGN0eCk7XG4gICAgICB0aGlzLmRyYXdSZWN0VGV4dChjdHgsIHRoaXMuZ2V0Qm91bmRpbmdSZWN0KCkpO1xuICAgIH1cbiAgfSxcbiAgLy8gV2hlbiBidW5kbGluZyBwYXRoLCBzb21lIHNoYXBlIG1heSBkZWNpZGUgaWYgdXNlIG1vdmVUbyB0byBiZWdpbiBhIG5ldyBzdWJwYXRoIG9yIGNsb3NlUGF0aFxuICAvLyBMaWtlIGluIGNpcmNsZVxuICBidWlsZFBhdGg6IGZ1bmN0aW9uIChjdHgsIHNoYXBlQ2ZnLCBpbkJ1bmRsZSkge30sXG4gIGNyZWF0ZVBhdGhQcm94eTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucGF0aCA9IG5ldyBQYXRoUHJveHkoKTtcbiAgfSxcbiAgZ2V0Qm91bmRpbmdSZWN0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlY3QgPSB0aGlzLl9yZWN0O1xuICAgIHZhciBzdHlsZSA9IHRoaXMuc3R5bGU7XG4gICAgdmFyIG5lZWRzVXBkYXRlUmVjdCA9ICFyZWN0O1xuXG4gICAgaWYgKG5lZWRzVXBkYXRlUmVjdCkge1xuICAgICAgdmFyIHBhdGggPSB0aGlzLnBhdGg7XG5cbiAgICAgIGlmICghcGF0aCkge1xuICAgICAgICAvLyBDcmVhdGUgcGF0aCBvbiBkZW1hbmQuXG4gICAgICAgIHBhdGggPSB0aGlzLnBhdGggPSBuZXcgUGF0aFByb3h5KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9fZGlydHlQYXRoKSB7XG4gICAgICAgIHBhdGguYmVnaW5QYXRoKCk7XG4gICAgICAgIHRoaXMuYnVpbGRQYXRoKHBhdGgsIHRoaXMuc2hhcGUsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgcmVjdCA9IHBhdGguZ2V0Qm91bmRpbmdSZWN0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5fcmVjdCA9IHJlY3Q7XG5cbiAgICBpZiAoc3R5bGUuaGFzU3Ryb2tlKCkpIHtcbiAgICAgIC8vIE5lZWRzIHVwZGF0ZSByZWN0IHdpdGggc3Ryb2tlIGxpbmVXaWR0aCB3aGVuXG4gICAgICAvLyAxLiBFbGVtZW50IGNoYW5nZXMgc2NhbGUgb3IgbGluZVdpZHRoXG4gICAgICAvLyAyLiBTaGFwZSBpcyBjaGFuZ2VkXG4gICAgICB2YXIgcmVjdFdpdGhTdHJva2UgPSB0aGlzLl9yZWN0V2l0aFN0cm9rZSB8fCAodGhpcy5fcmVjdFdpdGhTdHJva2UgPSByZWN0LmNsb25lKCkpO1xuXG4gICAgICBpZiAodGhpcy5fX2RpcnR5IHx8IG5lZWRzVXBkYXRlUmVjdCkge1xuICAgICAgICByZWN0V2l0aFN0cm9rZS5jb3B5KHJlY3QpOyAvLyBGSVhNRSBNdXN0IGFmdGVyIHVwZGF0ZVRyYW5zZm9ybVxuXG4gICAgICAgIHZhciB3ID0gc3R5bGUubGluZVdpZHRoOyAvLyBQRU5ESU5HLCBNaW4gbGluZSB3aWR0aCBpcyBuZWVkZWQgd2hlbiBsaW5lIGlzIGhvcml6b250YWwgb3IgdmVydGljYWxcblxuICAgICAgICB2YXIgbGluZVNjYWxlID0gc3R5bGUuc3Ryb2tlTm9TY2FsZSA/IHRoaXMuZ2V0TGluZVNjYWxlKCkgOiAxOyAvLyBPbmx5IGFkZCBleHRyYSBob3ZlciBsaW5lV2lkdGggd2hlbiB0aGVyZSBhcmUgbm8gZmlsbFxuXG4gICAgICAgIGlmICghc3R5bGUuaGFzRmlsbCgpKSB7XG4gICAgICAgICAgdyA9IE1hdGgubWF4KHcsIHRoaXMuc3Ryb2tlQ29udGFpblRocmVzaG9sZCB8fCA0KTtcbiAgICAgICAgfSAvLyBDb25zaWRlciBsaW5lIHdpZHRoXG4gICAgICAgIC8vIExpbmUgc2NhbGUgY2FuJ3QgYmUgMDtcblxuXG4gICAgICAgIGlmIChsaW5lU2NhbGUgPiAxZS0xMCkge1xuICAgICAgICAgIHJlY3RXaXRoU3Ryb2tlLndpZHRoICs9IHcgLyBsaW5lU2NhbGU7XG4gICAgICAgICAgcmVjdFdpdGhTdHJva2UuaGVpZ2h0ICs9IHcgLyBsaW5lU2NhbGU7XG4gICAgICAgICAgcmVjdFdpdGhTdHJva2UueCAtPSB3IC8gbGluZVNjYWxlIC8gMjtcbiAgICAgICAgICByZWN0V2l0aFN0cm9rZS55IC09IHcgLyBsaW5lU2NhbGUgLyAyO1xuICAgICAgICB9XG4gICAgICB9IC8vIFJldHVybiByZWN0IHdpdGggc3Ryb2tlXG5cblxuICAgICAgcmV0dXJuIHJlY3RXaXRoU3Ryb2tlO1xuICAgIH1cblxuICAgIHJldHVybiByZWN0O1xuICB9LFxuICBjb250YWluOiBmdW5jdGlvbiAoeCwgeSkge1xuICAgIHZhciBsb2NhbFBvcyA9IHRoaXMudHJhbnNmb3JtQ29vcmRUb0xvY2FsKHgsIHkpO1xuICAgIHZhciByZWN0ID0gdGhpcy5nZXRCb3VuZGluZ1JlY3QoKTtcbiAgICB2YXIgc3R5bGUgPSB0aGlzLnN0eWxlO1xuICAgIHggPSBsb2NhbFBvc1swXTtcbiAgICB5ID0gbG9jYWxQb3NbMV07XG5cbiAgICBpZiAocmVjdC5jb250YWluKHgsIHkpKSB7XG4gICAgICB2YXIgcGF0aERhdGEgPSB0aGlzLnBhdGguZGF0YTtcblxuICAgICAgaWYgKHN0eWxlLmhhc1N0cm9rZSgpKSB7XG4gICAgICAgIHZhciBsaW5lV2lkdGggPSBzdHlsZS5saW5lV2lkdGg7XG4gICAgICAgIHZhciBsaW5lU2NhbGUgPSBzdHlsZS5zdHJva2VOb1NjYWxlID8gdGhpcy5nZXRMaW5lU2NhbGUoKSA6IDE7IC8vIExpbmUgc2NhbGUgY2FuJ3QgYmUgMDtcblxuICAgICAgICBpZiAobGluZVNjYWxlID4gMWUtMTApIHtcbiAgICAgICAgICAvLyBPbmx5IGFkZCBleHRyYSBob3ZlciBsaW5lV2lkdGggd2hlbiB0aGVyZSBhcmUgbm8gZmlsbFxuICAgICAgICAgIGlmICghc3R5bGUuaGFzRmlsbCgpKSB7XG4gICAgICAgICAgICBsaW5lV2lkdGggPSBNYXRoLm1heChsaW5lV2lkdGgsIHRoaXMuc3Ryb2tlQ29udGFpblRocmVzaG9sZCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHBhdGhDb250YWluLmNvbnRhaW5TdHJva2UocGF0aERhdGEsIGxpbmVXaWR0aCAvIGxpbmVTY2FsZSwgeCwgeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3R5bGUuaGFzRmlsbCgpKSB7XG4gICAgICAgIHJldHVybiBwYXRoQ29udGFpbi5jb250YWluKHBhdGhEYXRhLCB4LCB5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSAge2Jvb2xlYW59IGRpcnR5UGF0aFxuICAgKi9cbiAgZGlydHk6IGZ1bmN0aW9uIChkaXJ0eVBhdGgpIHtcbiAgICBpZiAoZGlydHlQYXRoID09IG51bGwpIHtcbiAgICAgIGRpcnR5UGF0aCA9IHRydWU7XG4gICAgfSAvLyBPbmx5IG1hcmsgZGlydHksIG5vdCBtYXJrIGNsZWFuXG5cblxuICAgIGlmIChkaXJ0eVBhdGgpIHtcbiAgICAgIHRoaXMuX19kaXJ0eVBhdGggPSBkaXJ0eVBhdGg7XG4gICAgICB0aGlzLl9yZWN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLl9fZGlydHkgPSB0cnVlO1xuICAgIHRoaXMuX196ciAmJiB0aGlzLl9fenIucmVmcmVzaCgpOyAvLyBVc2VkIGFzIGEgY2xpcHBpbmcgcGF0aFxuXG4gICAgaWYgKHRoaXMuX19jbGlwVGFyZ2V0KSB7XG4gICAgICB0aGlzLl9fY2xpcFRhcmdldC5kaXJ0eSgpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQWxpYXMgZm9yIGFuaW1hdGUoJ3NoYXBlJylcbiAgICogQHBhcmFtIHtib29sZWFufSBsb29wXG4gICAqL1xuICBhbmltYXRlU2hhcGU6IGZ1bmN0aW9uIChsb29wKSB7XG4gICAgcmV0dXJuIHRoaXMuYW5pbWF0ZSgnc2hhcGUnLCBsb29wKTtcbiAgfSxcbiAgLy8gT3ZlcndyaXRlIGF0dHJLVlxuICBhdHRyS1Y6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgLy8gRklYTUVcbiAgICBpZiAoa2V5ID09PSAnc2hhcGUnKSB7XG4gICAgICB0aGlzLnNldFNoYXBlKHZhbHVlKTtcbiAgICAgIHRoaXMuX19kaXJ0eVBhdGggPSB0cnVlO1xuICAgICAgdGhpcy5fcmVjdCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIERpc3BsYXlhYmxlLnByb3RvdHlwZS5hdHRyS1YuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fHN0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICovXG4gIHNldFNoYXBlOiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBzaGFwZSA9IHRoaXMuc2hhcGU7IC8vIFBhdGggZnJvbSBzdHJpbmcgbWF5IG5vdCBoYXZlIHNoYXBlXG5cbiAgICBpZiAoc2hhcGUpIHtcbiAgICAgIGlmICh6clV0aWwuaXNPYmplY3Qoa2V5KSkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIGtleSkge1xuICAgICAgICAgIGlmIChrZXkuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgIHNoYXBlW25hbWVdID0ga2V5W25hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2hhcGVba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmRpcnR5KHRydWUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBnZXRMaW5lU2NhbGU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbSA9IHRoaXMudHJhbnNmb3JtOyAvLyBHZXQgdGhlIGxpbmUgc2NhbGUuXG4gICAgLy8gRGV0ZXJtaW5hbnQgb2YgYG1gIG1lYW5zIGhvdyBtdWNoIHRoZSBhcmVhIGlzIGVubGFyZ2VkIGJ5IHRoZVxuICAgIC8vIHRyYW5zZm9ybWF0aW9uLiBTbyBpdHMgc3F1YXJlIHJvb3QgY2FuIGJlIHVzZWQgYXMgYSBzY2FsZSBmYWN0b3JcbiAgICAvLyBmb3Igd2lkdGguXG5cbiAgICByZXR1cm4gbSAmJiBhYnMobVswXSAtIDEpID4gMWUtMTAgJiYgYWJzKG1bM10gLSAxKSA+IDFlLTEwID8gTWF0aC5zcXJ0KGFicyhtWzBdICogbVszXSAtIG1bMl0gKiBtWzFdKSkgOiAxO1xuICB9XG59O1xuLyoqXG4gKiDmianlsZXkuIDkuKogUGF0aCBlbGVtZW50LCDmr5TlpoLmmJ/lvaLvvIzlnIbnrYnjgIJcbiAqIEV4dGVuZCBhIHBhdGggZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcHMudHlwZSBQYXRoIHR5cGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3BzLmluaXQgSW5pdGlhbGl6ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvcHMuYnVpbGRQYXRoIE92ZXJ3cml0ZSBidWlsZFBhdGggbWV0aG9kXG4gKiBAcGFyYW0ge09iamVjdH0gW3Byb3BzLnN0eWxlXSBFeHRlbmRlZCBkZWZhdWx0IHN0eWxlIGNvbmZpZ1xuICogQHBhcmFtIHtPYmplY3R9IFtwcm9wcy5zaGFwZV0gRXh0ZW5kZWQgZGVmYXVsdCBzaGFwZSBjb25maWdcbiAqL1xuXG5QYXRoLmV4dGVuZCA9IGZ1bmN0aW9uIChkZWZhdWx0cykge1xuICB2YXIgU3ViID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgICBQYXRoLmNhbGwodGhpcywgb3B0cyk7XG5cbiAgICBpZiAoZGVmYXVsdHMuc3R5bGUpIHtcbiAgICAgIC8vIEV4dGVuZCBkZWZhdWx0IHN0eWxlXG4gICAgICB0aGlzLnN0eWxlLmV4dGVuZEZyb20oZGVmYXVsdHMuc3R5bGUsIGZhbHNlKTtcbiAgICB9IC8vIEV4dGVuZCBkZWZhdWx0IHNoYXBlXG5cblxuICAgIHZhciBkZWZhdWx0U2hhcGUgPSBkZWZhdWx0cy5zaGFwZTtcblxuICAgIGlmIChkZWZhdWx0U2hhcGUpIHtcbiAgICAgIHRoaXMuc2hhcGUgPSB0aGlzLnNoYXBlIHx8IHt9O1xuICAgICAgdmFyIHRoaXNTaGFwZSA9IHRoaXMuc2hhcGU7XG5cbiAgICAgIGZvciAodmFyIG5hbWUgaW4gZGVmYXVsdFNoYXBlKSB7XG4gICAgICAgIGlmICghdGhpc1NoYXBlLmhhc093blByb3BlcnR5KG5hbWUpICYmIGRlZmF1bHRTaGFwZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgIHRoaXNTaGFwZVtuYW1lXSA9IGRlZmF1bHRTaGFwZVtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGRlZmF1bHRzLmluaXQgJiYgZGVmYXVsdHMuaW5pdC5jYWxsKHRoaXMsIG9wdHMpO1xuICB9O1xuXG4gIHpyVXRpbC5pbmhlcml0cyhTdWIsIFBhdGgpOyAvLyBGSVhNRSDkuI3og70gZXh0ZW5kIHBvc2l0aW9uLCByb3RhdGlvbiDnrYnlvJXnlKjlr7nosaFcblxuICBmb3IgKHZhciBuYW1lIGluIGRlZmF1bHRzKSB7XG4gICAgLy8gRXh0ZW5kaW5nIHByb3RvdHlwZSB2YWx1ZXMgYW5kIG1ldGhvZHNcbiAgICBpZiAobmFtZSAhPT0gJ3N0eWxlJyAmJiBuYW1lICE9PSAnc2hhcGUnKSB7XG4gICAgICBTdWIucHJvdG90eXBlW25hbWVdID0gZGVmYXVsdHNbbmFtZV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFN1Yjtcbn07XG5cbnpyVXRpbC5pbmhlcml0cyhQYXRoLCBEaXNwbGF5YWJsZSk7XG52YXIgX2RlZmF1bHQgPSBQYXRoO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgUGF0dGVybiA9IGZ1bmN0aW9uIChpbWFnZSwgcmVwZWF0KSB7XG4gIC8vIFNob3VsZCBkbyBub3RoaW5nIG1vcmUgaW4gdGhpcyBjb25zdHJ1Y3Rvci4gQmVjYXVzZSBncmFkaWVudCBjYW4gYmVcbiAgLy8gZGVjbGFyZCBieSBgY29sb3I6IHtpbWFnZTogLi4ufWAsIHdoZXJlIHRoaXMgY29uc3RydWN0b3Igd2lsbCBub3QgYmUgY2FsbGVkLlxuICB0aGlzLmltYWdlID0gaW1hZ2U7XG4gIHRoaXMucmVwZWF0ID0gcmVwZWF0OyAvLyBDYW4gYmUgY2xvbmVkXG5cbiAgdGhpcy50eXBlID0gJ3BhdHRlcm4nO1xufTtcblxuUGF0dGVybi5wcm90b3R5cGUuZ2V0Q2FudmFzUGF0dGVybiA9IGZ1bmN0aW9uIChjdHgpIHtcbiAgcmV0dXJuIGN0eC5jcmVhdGVQYXR0ZXJuKHRoaXMuaW1hZ2UsIHRoaXMucmVwZWF0IHx8ICdyZXBlYXQnKTtcbn07XG5cbnZhciBfZGVmYXVsdCA9IFBhdHRlcm47XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciB6clV0aWwgPSByZXF1aXJlKFwiLi4vY29yZS91dGlsXCIpO1xuXG52YXIgR3JhZGllbnQgPSByZXF1aXJlKFwiLi9HcmFkaWVudFwiKTtcblxuLyoqXG4gKiB4LCB5LCByIGFyZSBhbGwgcGVyY2VudCBmcm9tIDAgdG8gMVxuICogQHBhcmFtIHtudW1iZXJ9IFt4PTAuNV1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbeT0wLjVdXG4gKiBAcGFyYW0ge251bWJlcn0gW3I9MC41XVxuICogQHBhcmFtIHtBcnJheS48T2JqZWN0Pn0gW2NvbG9yU3RvcHNdXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtnbG9iYWxDb29yZD1mYWxzZV1cbiAqL1xudmFyIFJhZGlhbEdyYWRpZW50ID0gZnVuY3Rpb24gKHgsIHksIHIsIGNvbG9yU3RvcHMsIGdsb2JhbENvb3JkKSB7XG4gIC8vIFNob3VsZCBkbyBub3RoaW5nIG1vcmUgaW4gdGhpcyBjb25zdHJ1Y3Rvci4gQmVjYXVzZSBncmFkaWVudCBjYW4gYmVcbiAgLy8gZGVjbGFyZCBieSBgY29sb3I6IHt0eXBlOiAncmFkaWFsJywgY29sb3JTdG9wczogLi4ufWAsIHdoZXJlXG4gIC8vIHRoaXMgY29uc3RydWN0b3Igd2lsbCBub3QgYmUgY2FsbGVkLlxuICB0aGlzLnggPSB4ID09IG51bGwgPyAwLjUgOiB4O1xuICB0aGlzLnkgPSB5ID09IG51bGwgPyAwLjUgOiB5O1xuICB0aGlzLnIgPSByID09IG51bGwgPyAwLjUgOiByOyAvLyBDYW4gYmUgY2xvbmVkXG5cbiAgdGhpcy50eXBlID0gJ3JhZGlhbCc7IC8vIElmIHVzZSBnbG9iYWwgY29vcmRcblxuICB0aGlzLmdsb2JhbCA9IGdsb2JhbENvb3JkIHx8IGZhbHNlO1xuICBHcmFkaWVudC5jYWxsKHRoaXMsIGNvbG9yU3RvcHMpO1xufTtcblxuUmFkaWFsR3JhZGllbnQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUmFkaWFsR3JhZGllbnRcbn07XG56clV0aWwuaW5oZXJpdHMoUmFkaWFsR3JhZGllbnQsIEdyYWRpZW50KTtcbnZhciBfZGVmYXVsdCA9IFJhZGlhbEdyYWRpZW50O1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgZml4U2hhZG93ID0gcmVxdWlyZShcIi4vaGVscGVyL2ZpeFNoYWRvd1wiKTtcblxudmFyIFNUWUxFX0NPTU1PTl9QUk9QUyA9IFtbJ3NoYWRvd0JsdXInLCAwXSwgWydzaGFkb3dPZmZzZXRYJywgMF0sIFsnc2hhZG93T2Zmc2V0WScsIDBdLCBbJ3NoYWRvd0NvbG9yJywgJyMwMDAnXSwgWydsaW5lQ2FwJywgJ2J1dHQnXSwgWydsaW5lSm9pbicsICdtaXRlciddLCBbJ21pdGVyTGltaXQnLCAxMF1dOyAvLyB2YXIgU0hBRE9XX1BST1BTID0gU1RZTEVfQ09NTU9OX1BST1BTLnNsaWNlKDAsIDQpO1xuLy8gdmFyIExJTkVfUFJPUFMgPSBTVFlMRV9DT01NT05fUFJPUFMuc2xpY2UoNCk7XG5cbnZhciBTdHlsZSA9IGZ1bmN0aW9uIChvcHRzLCBob3N0KSB7XG4gIHRoaXMuZXh0ZW5kRnJvbShvcHRzLCBmYWxzZSk7XG4gIHRoaXMuaG9zdCA9IGhvc3Q7XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaW5lYXJHcmFkaWVudChjdHgsIG9iaiwgcmVjdCkge1xuICB2YXIgeCA9IG9iai54ID09IG51bGwgPyAwIDogb2JqLng7XG4gIHZhciB4MiA9IG9iai54MiA9PSBudWxsID8gMSA6IG9iai54MjtcbiAgdmFyIHkgPSBvYmoueSA9PSBudWxsID8gMCA6IG9iai55O1xuICB2YXIgeTIgPSBvYmoueTIgPT0gbnVsbCA/IDAgOiBvYmoueTI7XG5cbiAgaWYgKCFvYmouZ2xvYmFsKSB7XG4gICAgeCA9IHggKiByZWN0LndpZHRoICsgcmVjdC54O1xuICAgIHgyID0geDIgKiByZWN0LndpZHRoICsgcmVjdC54O1xuICAgIHkgPSB5ICogcmVjdC5oZWlnaHQgKyByZWN0Lnk7XG4gICAgeTIgPSB5MiAqIHJlY3QuaGVpZ2h0ICsgcmVjdC55O1xuICB9IC8vIEZpeCBOYU4gd2hlbiByZWN0IGlzIEluZmluaXR5XG5cblxuICB4ID0gaXNOYU4oeCkgPyAwIDogeDtcbiAgeDIgPSBpc05hTih4MikgPyAxIDogeDI7XG4gIHkgPSBpc05hTih5KSA/IDAgOiB5O1xuICB5MiA9IGlzTmFOKHkyKSA/IDAgOiB5MjtcbiAgdmFyIGNhbnZhc0dyYWRpZW50ID0gY3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KHgsIHksIHgyLCB5Mik7XG4gIHJldHVybiBjYW52YXNHcmFkaWVudDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmFkaWFsR3JhZGllbnQoY3R4LCBvYmosIHJlY3QpIHtcbiAgdmFyIHdpZHRoID0gcmVjdC53aWR0aDtcbiAgdmFyIGhlaWdodCA9IHJlY3QuaGVpZ2h0O1xuICB2YXIgbWluID0gTWF0aC5taW4od2lkdGgsIGhlaWdodCk7XG4gIHZhciB4ID0gb2JqLnggPT0gbnVsbCA/IDAuNSA6IG9iai54O1xuICB2YXIgeSA9IG9iai55ID09IG51bGwgPyAwLjUgOiBvYmoueTtcbiAgdmFyIHIgPSBvYmouciA9PSBudWxsID8gMC41IDogb2JqLnI7XG5cbiAgaWYgKCFvYmouZ2xvYmFsKSB7XG4gICAgeCA9IHggKiB3aWR0aCArIHJlY3QueDtcbiAgICB5ID0geSAqIGhlaWdodCArIHJlY3QueTtcbiAgICByID0gciAqIG1pbjtcbiAgfVxuXG4gIHZhciBjYW52YXNHcmFkaWVudCA9IGN0eC5jcmVhdGVSYWRpYWxHcmFkaWVudCh4LCB5LCAwLCB4LCB5LCByKTtcbiAgcmV0dXJuIGNhbnZhc0dyYWRpZW50O1xufVxuXG5TdHlsZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTdHlsZSxcblxuICAvKipcbiAgICogQHR5cGUge21vZHVsZTp6cmVuZGVyL2dyYXBoaWMvRGlzcGxheWFibGV9XG4gICAqL1xuICBob3N0OiBudWxsLFxuXG4gIC8qKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZmlsbDogJyMwMDAnLFxuXG4gIC8qKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgc3Ryb2tlOiBudWxsLFxuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgb3BhY2l0eTogMSxcblxuICAvKipcbiAgICogQHR5cGUge0FycmF5LjxudW1iZXI+fVxuICAgKi9cbiAgbGluZURhc2g6IG51bGwsXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBsaW5lRGFzaE9mZnNldDogMCxcblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHNoYWRvd0JsdXI6IDAsXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBzaGFkb3dPZmZzZXRYOiAwLFxuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgc2hhZG93T2Zmc2V0WTogMCxcblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGxpbmVXaWR0aDogMSxcblxuICAvKipcbiAgICogSWYgc3Ryb2tlIGlnbm9yZSBzY2FsZVxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICovXG4gIHN0cm9rZU5vU2NhbGU6IGZhbHNlLFxuICAvLyBCb3VuZGluZyByZWN0IHRleHQgY29uZmlndXJhdGlvblxuICAvLyBOb3QgYWZmZWN0ZWQgYnkgZWxlbWVudCB0cmFuc2Zvcm1cblxuICAvKipcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHRleHQ6IG51bGwsXG5cbiAgLyoqXG4gICAqIElmIGBmb250U2l6ZWAgb3IgYGZvbnRGYW1pbHlgIGV4aXN0cywgYGZvbnRgIHdpbGwgYmUgcmVzZXQgYnlcbiAgICogYGZvbnRTaXplYCwgYGZvbnRTdHlsZWAsIGBmb250V2VpZ2h0YCwgYGZvbnRGYW1pbHlgLlxuICAgKiBTbyBkbyBub3QgdmlzaXQgaXQgZGlyZWN0bHkgaW4gdXBwZXIgYXBwbGljYXRpb24gKGxpa2UgZWNoYXJ0cyksXG4gICAqIGJ1dCB1c2UgYGNvbnRhaW4vdGV4dCNtYWtlRm9udGAgaW5zdGVhZC5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGZvbnQ6IG51bGwsXG5cbiAgLyoqXG4gICAqIFRoZSBzYW1lIGFzIGZvbnQuIFVzZSBmb250IHBsZWFzZS5cbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHRleHRGb250OiBudWxsLFxuXG4gIC8qKlxuICAgKiBJdCBoZWxwcyBtZXJnaW5nIHJlc3BlY3RpdmVseSwgcmF0aGVyIHRoYW4gcGFyc2luZyBhbiBlbnRpcmUgZm9udCBzdHJpbmcuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBmb250U3R5bGU6IG51bGwsXG5cbiAgLyoqXG4gICAqIEl0IGhlbHBzIG1lcmdpbmcgcmVzcGVjdGl2ZWx5LCByYXRoZXIgdGhhbiBwYXJzaW5nIGFuIGVudGlyZSBmb250IHN0cmluZy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGZvbnRXZWlnaHQ6IG51bGwsXG5cbiAgLyoqXG4gICAqIEl0IGhlbHBzIG1lcmdpbmcgcmVzcGVjdGl2ZWx5LCByYXRoZXIgdGhhbiBwYXJzaW5nIGFuIGVudGlyZSBmb250IHN0cmluZy5cbiAgICogU2hvdWxkIGJlIDEyIGJ1dCBub3QgJzEycHgnLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZm9udFNpemU6IG51bGwsXG5cbiAgLyoqXG4gICAqIEl0IGhlbHBzIG1lcmdpbmcgcmVzcGVjdGl2ZWx5LCByYXRoZXIgdGhhbiBwYXJzaW5nIGFuIGVudGlyZSBmb250IHN0cmluZy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGZvbnRGYW1pbHk6IG51bGwsXG5cbiAgLyoqXG4gICAqIFJlc2VydmVkIGZvciBzcGVjaWFsIGZ1bmN0aW5hbGl0eSwgbGlrZSAnaHInLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdGV4dFRhZzogbnVsbCxcblxuICAvKipcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHRleHRGaWxsOiAnIzAwMCcsXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0ZXh0U3Ryb2tlOiBudWxsLFxuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGV4dFdpZHRoOiBudWxsLFxuXG4gIC8qKlxuICAgKiBPbmx5IGZvciB0ZXh0QmFja2dyb3VuZC5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRleHRIZWlnaHQ6IG51bGwsXG5cbiAgLyoqXG4gICAqIHRleHRTdHJva2UgbWF5IGJlIHNldCBhcyBzb21lIGNvbG9yIGFzIGEgZGVmYXVsdFxuICAgKiB2YWx1ZSBpbiB1cHBlciBhcHBsaWNhaW9uLCB3aGVyZSB0aGUgZGVmYXVsdCB2YWx1ZVxuICAgKiBvZiB0ZXh0U3Ryb2tlV2lkdGggc2hvdWxkIGJlIDAgdG8gbWFrZSBzdXJlIHRoYXRcbiAgICogdXNlciBjYW4gY2hvb3NlIHRvIGRvIG5vdCB1c2UgdGV4dCBzdHJva2UuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0ZXh0U3Ryb2tlV2lkdGg6IDAsXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0ZXh0TGluZUhlaWdodDogbnVsbCxcblxuICAvKipcbiAgICogJ2luc2lkZScsICdsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXG4gICAqIFt4LCB5XVxuICAgKiBCYXNlZCBvbiB4LCB5IG9mIHJlY3QuXG4gICAqIEB0eXBlIHtzdHJpbmd8QXJyYXkuPG51bWJlcj59XG4gICAqIEBkZWZhdWx0ICdpbnNpZGUnXG4gICAqL1xuICB0ZXh0UG9zaXRpb246ICdpbnNpZGUnLFxuXG4gIC8qKlxuICAgKiBJZiBub3Qgc3BlY2lmaWVkLCB1c2UgdGhlIGJvdW5kaW5nUmVjdCBvZiBhIGBkaXNwbGF5YWJsZWAuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICB0ZXh0UmVjdDogbnVsbCxcblxuICAvKipcbiAgICogW3gsIHldXG4gICAqIEB0eXBlIHtBcnJheS48bnVtYmVyPn1cbiAgICovXG4gIHRleHRPZmZzZXQ6IG51bGwsXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0ZXh0QWxpZ246IG51bGwsXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0ZXh0VmVydGljYWxBbGlnbjogbnVsbCxcblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRleHREaXN0YW5jZTogNSxcblxuICAvKipcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHRleHRTaGFkb3dDb2xvcjogJ3RyYW5zcGFyZW50JyxcblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRleHRTaGFkb3dCbHVyOiAwLFxuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGV4dFNoYWRvd09mZnNldFg6IDAsXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0ZXh0U2hhZG93T2Zmc2V0WTogMCxcblxuICAvKipcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHRleHRCb3hTaGFkb3dDb2xvcjogJ3RyYW5zcGFyZW50JyxcblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRleHRCb3hTaGFkb3dCbHVyOiAwLFxuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdGV4dEJveFNoYWRvd09mZnNldFg6IDAsXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0ZXh0Qm94U2hhZG93T2Zmc2V0WTogMCxcblxuICAvKipcbiAgICogV2hldGhlciB0cmFuc2Zvcm0gdGV4dC5cbiAgICogT25seSB1c2VmdWwgaW4gUGF0aCBhbmQgSW1hZ2UgZWxlbWVudFxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRyYW5zZm9ybVRleHQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBUZXh0IHJvdGF0ZSBhcm91bmQgcG9zaXRpb24gb2YgUGF0aCBvciBJbWFnZVxuICAgKiBPbmx5IHVzZWZ1bCBpbiBQYXRoIGFuZCBJbWFnZSBlbGVtZW50IGFuZCB0cmFuc2Zvcm1UZXh0IGlzIGZhbHNlLlxuICAgKi9cbiAgdGV4dFJvdGF0aW9uOiAwLFxuXG4gIC8qKlxuICAgKiBUZXh0IG9yaWdpbiBvZiB0ZXh0IHJvdGF0aW9uLCBsaWtlIFsxMCwgNDBdLlxuICAgKiBCYXNlZCBvbiB4LCB5IG9mIHJlY3QuXG4gICAqIFVzZWZ1bCBpbiBsYWJlbCByb3RhdGlvbiBvZiBjaXJjdWxhciBzeW1ib2wuXG4gICAqIEJ5IGRlZmF1bHQsIHRoaXMgb3JpZ2luIGlzIHRleHRQb3NpdGlvbi5cbiAgICogQ2FuIGJlICdjZW50ZXInLlxuICAgKiBAdHlwZSB7c3RyaW5nfEFycmF5LjxudW1iZXI+fVxuICAgKi9cbiAgdGV4dE9yaWdpbjogbnVsbCxcblxuICAvKipcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHRleHRCYWNrZ3JvdW5kQ29sb3I6IG51bGwsXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0ZXh0Qm9yZGVyQ29sb3I6IG51bGwsXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0ZXh0Qm9yZGVyV2lkdGg6IDAsXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0ZXh0Qm9yZGVyUmFkaXVzOiAwLFxuXG4gIC8qKlxuICAgKiBDYW4gYmUgYDJgIG9yIGBbMiwgNF1gIG9yIGBbMiwgMywgNCwgNV1gXG4gICAqIEB0eXBlIHtudW1iZXJ8QXJyYXkuPG51bWJlcj59XG4gICAqL1xuICB0ZXh0UGFkZGluZzogbnVsbCxcblxuICAvKipcbiAgICogVGV4dCBzdHlsZXMgZm9yIHJpY2ggdGV4dC5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHJpY2g6IG51bGwsXG5cbiAgLyoqXG4gICAqIHtvdXRlcldpZHRoLCBvdXRlckhlaWdodCwgZWxsaXBzaXMsIHBsYWNlaG9sZGVyfVxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgdHJ1bmNhdGU6IG51bGwsXG5cbiAgLyoqXG4gICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQvZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBibGVuZDogbnVsbCxcblxuICAvKipcbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eFxuICAgKi9cbiAgYmluZDogZnVuY3Rpb24gKGN0eCwgZWwsIHByZXZFbCkge1xuICAgIHZhciBzdHlsZSA9IHRoaXM7XG4gICAgdmFyIHByZXZTdHlsZSA9IHByZXZFbCAmJiBwcmV2RWwuc3R5bGU7XG4gICAgdmFyIGZpcnN0RHJhdyA9ICFwcmV2U3R5bGU7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IFNUWUxFX0NPTU1PTl9QUk9QUy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHByb3AgPSBTVFlMRV9DT01NT05fUFJPUFNbaV07XG4gICAgICB2YXIgc3R5bGVOYW1lID0gcHJvcFswXTtcblxuICAgICAgaWYgKGZpcnN0RHJhdyB8fCBzdHlsZVtzdHlsZU5hbWVdICE9PSBwcmV2U3R5bGVbc3R5bGVOYW1lXSkge1xuICAgICAgICAvLyBGSVhNRSBJbnZhbGlkIHByb3BlcnR5IHZhbHVlIHdpbGwgY2F1c2Ugc3R5bGUgbGVhayBmcm9tIHByZXZpb3VzIGVsZW1lbnQuXG4gICAgICAgIGN0eFtzdHlsZU5hbWVdID0gZml4U2hhZG93KGN0eCwgc3R5bGVOYW1lLCBzdHlsZVtzdHlsZU5hbWVdIHx8IHByb3BbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmaXJzdERyYXcgfHwgc3R5bGUuZmlsbCAhPT0gcHJldlN0eWxlLmZpbGwpIHtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBzdHlsZS5maWxsO1xuICAgIH1cblxuICAgIGlmIChmaXJzdERyYXcgfHwgc3R5bGUuc3Ryb2tlICE9PSBwcmV2U3R5bGUuc3Ryb2tlKSB7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBzdHlsZS5zdHJva2U7XG4gICAgfVxuXG4gICAgaWYgKGZpcnN0RHJhdyB8fCBzdHlsZS5vcGFjaXR5ICE9PSBwcmV2U3R5bGUub3BhY2l0eSkge1xuICAgICAgY3R4Lmdsb2JhbEFscGhhID0gc3R5bGUub3BhY2l0eSA9PSBudWxsID8gMSA6IHN0eWxlLm9wYWNpdHk7XG4gICAgfVxuXG4gICAgaWYgKGZpcnN0RHJhdyB8fCBzdHlsZS5ibGVuZCAhPT0gcHJldlN0eWxlLmJsZW5kKSB7XG4gICAgICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gc3R5bGUuYmxlbmQgfHwgJ3NvdXJjZS1vdmVyJztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5oYXNTdHJva2UoKSkge1xuICAgICAgdmFyIGxpbmVXaWR0aCA9IHN0eWxlLmxpbmVXaWR0aDtcbiAgICAgIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGggLyAodGhpcy5zdHJva2VOb1NjYWxlICYmIGVsICYmIGVsLmdldExpbmVTY2FsZSA/IGVsLmdldExpbmVTY2FsZSgpIDogMSk7XG4gICAgfVxuICB9LFxuICBoYXNGaWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZpbGwgPSB0aGlzLmZpbGw7XG4gICAgcmV0dXJuIGZpbGwgIT0gbnVsbCAmJiBmaWxsICE9PSAnbm9uZSc7XG4gIH0sXG4gIGhhc1N0cm9rZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdHJva2UgPSB0aGlzLnN0cm9rZTtcbiAgICByZXR1cm4gc3Ryb2tlICE9IG51bGwgJiYgc3Ryb2tlICE9PSAnbm9uZScgJiYgdGhpcy5saW5lV2lkdGggPiAwO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFeHRlbmQgZnJvbSBvdGhlciBzdHlsZVxuICAgKiBAcGFyYW0ge3pyZW5kZXIvZ3JhcGhpYy9TdHlsZX0gb3RoZXJTdHlsZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG92ZXJ3cml0ZSB0cnVlOiBvdmVyd3JpcnRlIGFueSB3YXkuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlOiBvdmVyd3JpdGUgb25seSB3aGVuICF0YXJnZXQuaGFzT3duUHJvcGVydHlcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJzOiBvdmVyd3JpdGUgd2hlbiBwcm9wZXJ0eSBpcyBub3QgbnVsbC91bmRlZmluZWQuXG4gICAqL1xuICBleHRlbmRGcm9tOiBmdW5jdGlvbiAob3RoZXJTdHlsZSwgb3ZlcndyaXRlKSB7XG4gICAgaWYgKG90aGVyU3R5bGUpIHtcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gb3RoZXJTdHlsZSkge1xuICAgICAgICBpZiAob3RoZXJTdHlsZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiAob3ZlcndyaXRlID09PSB0cnVlIHx8IChvdmVyd3JpdGUgPT09IGZhbHNlID8gIXRoaXMuaGFzT3duUHJvcGVydHkobmFtZSkgOiBvdGhlclN0eWxlW25hbWVdICE9IG51bGwpKSkge1xuICAgICAgICAgIHRoaXNbbmFtZV0gPSBvdGhlclN0eWxlW25hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBCYXRjaCBzZXR0aW5nIHN0eWxlIHdpdGggYSBnaXZlbiBvYmplY3RcbiAgICogQHBhcmFtIHtPYmplY3R8c3RyaW5nfSBvYmpcbiAgICogQHBhcmFtIHsqfSBbb2JqXVxuICAgKi9cbiAgc2V0OiBmdW5jdGlvbiAob2JqLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpc1tvYmpdID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXh0ZW5kRnJvbShvYmosIHRydWUpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQ2xvbmVcbiAgICogQHJldHVybiB7enJlbmRlci9ncmFwaGljL1N0eWxlfSBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjbG9uZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBuZXdTdHlsZSA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKCk7XG4gICAgbmV3U3R5bGUuZXh0ZW5kRnJvbSh0aGlzLCB0cnVlKTtcbiAgICByZXR1cm4gbmV3U3R5bGU7XG4gIH0sXG4gIGdldEdyYWRpZW50OiBmdW5jdGlvbiAoY3R4LCBvYmosIHJlY3QpIHtcbiAgICB2YXIgbWV0aG9kID0gb2JqLnR5cGUgPT09ICdyYWRpYWwnID8gY3JlYXRlUmFkaWFsR3JhZGllbnQgOiBjcmVhdGVMaW5lYXJHcmFkaWVudDtcbiAgICB2YXIgY2FudmFzR3JhZGllbnQgPSBtZXRob2QoY3R4LCBvYmosIHJlY3QpO1xuICAgIHZhciBjb2xvclN0b3BzID0gb2JqLmNvbG9yU3RvcHM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbG9yU3RvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNhbnZhc0dyYWRpZW50LmFkZENvbG9yU3RvcChjb2xvclN0b3BzW2ldLm9mZnNldCwgY29sb3JTdG9wc1tpXS5jb2xvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbnZhc0dyYWRpZW50O1xuICB9XG59O1xudmFyIHN0eWxlUHJvdG8gPSBTdHlsZS5wcm90b3R5cGU7XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgU1RZTEVfQ09NTU9OX1BST1BTLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBwcm9wID0gU1RZTEVfQ09NTU9OX1BST1BTW2ldO1xuXG4gIGlmICghKHByb3BbMF0gaW4gc3R5bGVQcm90bykpIHtcbiAgICBzdHlsZVByb3RvW3Byb3BbMF1dID0gcHJvcFsxXTtcbiAgfVxufSAvLyBQcm92aWRlIGZvciBvdGhlcnNcblxuXG5TdHlsZS5nZXRHcmFkaWVudCA9IHN0eWxlUHJvdG8uZ2V0R3JhZGllbnQ7XG52YXIgX2RlZmF1bHQgPSBTdHlsZTtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIERpc3BsYXlhYmxlID0gcmVxdWlyZShcIi4vRGlzcGxheWFibGVcIik7XG5cbnZhciB6clV0aWwgPSByZXF1aXJlKFwiLi4vY29yZS91dGlsXCIpO1xuXG52YXIgdGV4dENvbnRhaW4gPSByZXF1aXJlKFwiLi4vY29udGFpbi90ZXh0XCIpO1xuXG52YXIgdGV4dEhlbHBlciA9IHJlcXVpcmUoXCIuL2hlbHBlci90ZXh0XCIpO1xuXG4vKipcbiAqIEBhbGlhcyB6cmVuZGVyL2dyYXBoaWMvVGV4dFxuICogQGV4dGVuZHMgbW9kdWxlOnpyZW5kZXIvZ3JhcGhpYy9EaXNwbGF5YWJsZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICovXG52YXIgVGV4dCA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIC8vIGpzaGludCBpZ25vcmU6bGluZVxuICBEaXNwbGF5YWJsZS5jYWxsKHRoaXMsIG9wdHMpO1xufTtcblxuVGV4dC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUZXh0LFxuICB0eXBlOiAndGV4dCcsXG4gIGJydXNoOiBmdW5jdGlvbiAoY3R4LCBwcmV2RWwpIHtcbiAgICB2YXIgc3R5bGUgPSB0aGlzLnN0eWxlOyAvLyBPcHRpbWl6ZSwgYXZvaWQgbm9ybWFsaXplIGV2ZXJ5IHRpbWUuXG5cbiAgICB0aGlzLl9fZGlydHkgJiYgdGV4dEhlbHBlci5ub3JtYWxpemVUZXh0U3R5bGUoc3R5bGUsIHRydWUpOyAvLyBVc2UgcHJvcHMgd2l0aCBwcmVmaXggJ3RleHQnLlxuXG4gICAgc3R5bGUuZmlsbCA9IHN0eWxlLnN0cm9rZSA9IHN0eWxlLnNoYWRvd0JsdXIgPSBzdHlsZS5zaGFkb3dDb2xvciA9IHN0eWxlLnNoYWRvd09mZnNldFggPSBzdHlsZS5zaGFkb3dPZmZzZXRZID0gbnVsbDtcbiAgICB2YXIgdGV4dCA9IHN0eWxlLnRleHQ7IC8vIENvbnZlcnQgdG8gc3RyaW5nXG5cbiAgICB0ZXh0ICE9IG51bGwgJiYgKHRleHQgKz0gJycpOyAvLyBBbHdheXMgYmluZCBzdHlsZVxuXG4gICAgc3R5bGUuYmluZChjdHgsIHRoaXMsIHByZXZFbCk7XG5cbiAgICBpZiAoIXRleHRIZWxwZXIubmVlZERyYXdUZXh0KHRleHQsIHN0eWxlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2V0VHJhbnNmb3JtKGN0eCk7XG4gICAgdGV4dEhlbHBlci5yZW5kZXJUZXh0KHRoaXMsIGN0eCwgdGV4dCwgc3R5bGUpO1xuICAgIHRoaXMucmVzdG9yZVRyYW5zZm9ybShjdHgpO1xuICB9LFxuICBnZXRCb3VuZGluZ1JlY3Q6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3R5bGUgPSB0aGlzLnN0eWxlOyAvLyBPcHRpbWl6ZSwgYXZvaWQgbm9ybWFsaXplIGV2ZXJ5IHRpbWUuXG5cbiAgICB0aGlzLl9fZGlydHkgJiYgdGV4dEhlbHBlci5ub3JtYWxpemVUZXh0U3R5bGUoc3R5bGUsIHRydWUpO1xuXG4gICAgaWYgKCF0aGlzLl9yZWN0KSB7XG4gICAgICB2YXIgdGV4dCA9IHN0eWxlLnRleHQ7XG4gICAgICB0ZXh0ICE9IG51bGwgPyB0ZXh0ICs9ICcnIDogdGV4dCA9ICcnO1xuICAgICAgdmFyIHJlY3QgPSB0ZXh0Q29udGFpbi5nZXRCb3VuZGluZ1JlY3Qoc3R5bGUudGV4dCArICcnLCBzdHlsZS5mb250LCBzdHlsZS50ZXh0QWxpZ24sIHN0eWxlLnRleHRWZXJ0aWNhbEFsaWduLCBzdHlsZS50ZXh0UGFkZGluZywgc3R5bGUucmljaCk7XG4gICAgICByZWN0LnggKz0gc3R5bGUueCB8fCAwO1xuICAgICAgcmVjdC55ICs9IHN0eWxlLnkgfHwgMDtcblxuICAgICAgaWYgKHRleHRIZWxwZXIuZ2V0U3Ryb2tlKHN0eWxlLnRleHRTdHJva2UsIHN0eWxlLnRleHRTdHJva2VXaWR0aCkpIHtcbiAgICAgICAgdmFyIHcgPSBzdHlsZS50ZXh0U3Ryb2tlV2lkdGg7XG4gICAgICAgIHJlY3QueCAtPSB3IC8gMjtcbiAgICAgICAgcmVjdC55IC09IHcgLyAyO1xuICAgICAgICByZWN0LndpZHRoICs9IHc7XG4gICAgICAgIHJlY3QuaGVpZ2h0ICs9IHc7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlY3QgPSByZWN0O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yZWN0O1xuICB9XG59O1xuenJVdGlsLmluaGVyaXRzKFRleHQsIERpc3BsYXlhYmxlKTtcbnZhciBfZGVmYXVsdCA9IFRleHQ7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBlbnYgPSByZXF1aXJlKFwiLi4vLi4vY29yZS9lbnZcIik7XG5cbi8vIEZpeCB3ZWlyZCBidWcgaW4gc29tZSB2ZXJzaW9uIG9mIElFMTEgKGxpa2UgMTEuMC45NjAwLjE3OCoqKSxcbi8vIHdoZXJlIGV4Y2VwdGlvbiBcInVuZXhwZWN0ZWQgY2FsbCB0byBtZXRob2Qgb3IgcHJvcGVydHkgYWNjZXNzXCJcbi8vIG1pZ2h0IGJlIHRocm93biB3aGVuIGNhbGxpbmcgY3R4LmZpbGwgb3IgY3R4LnN0cm9rZSBhZnRlciBhIHBhdGhcbi8vIHdob3NlIGFyZWEgc2l6ZSBpcyB6ZXJvIGlzIGRyYXduIGFuZCBjdHguY2xpcCgpIGlzIGNhbGxlZCBhbmRcbi8vIHNoYWRvd0JsdXIgaXMgc2V0LiBTZWUgIzQ1NzIsICMzMTEyLCAjNTc3Ny5cbi8vIChlLmcuLFxuLy8gIGN0eC5tb3ZlVG8oMTAsIDEwKTtcbi8vICBjdHgubGluZVRvKDIwLCAxMCk7XG4vLyAgY3R4LmNsb3NlUGF0aCgpO1xuLy8gIGN0eC5jbGlwKCk7XG4vLyAgY3R4LnNoYWRvd0JsdXIgPSAxMDtcbi8vICAuLi5cbi8vICBjdHguZmlsbCgpO1xuLy8gKVxudmFyIHNoYWRvd1RlbXAgPSBbWydzaGFkb3dCbHVyJywgMF0sIFsnc2hhZG93Q29sb3InLCAnIzAwMCddLCBbJ3NoYWRvd09mZnNldFgnLCAwXSwgWydzaGFkb3dPZmZzZXRZJywgMF1dO1xuXG5mdW5jdGlvbiBfZGVmYXVsdChvcmlnbmFsQnJ1c2gpIHtcbiAgLy8gdmVyc2lvbiBzdHJpbmcgY2FuIGJlOiAnMTEuMCdcbiAgcmV0dXJuIGVudi5icm93c2VyLmllICYmIGVudi5icm93c2VyLnZlcnNpb24gPj0gMTEgPyBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNsaXBQYXRocyA9IHRoaXMuX19jbGlwUGF0aHM7XG4gICAgdmFyIHN0eWxlID0gdGhpcy5zdHlsZTtcbiAgICB2YXIgbW9kaWZpZWQ7XG5cbiAgICBpZiAoY2xpcFBhdGhzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsaXBQYXRocy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2xpcFBhdGggPSBjbGlwUGF0aHNbaV07XG4gICAgICAgIHZhciBzaGFwZSA9IGNsaXBQYXRoICYmIGNsaXBQYXRoLnNoYXBlO1xuICAgICAgICB2YXIgdHlwZSA9IGNsaXBQYXRoICYmIGNsaXBQYXRoLnR5cGU7XG5cbiAgICAgICAgaWYgKHNoYXBlICYmICh0eXBlID09PSAnc2VjdG9yJyAmJiBzaGFwZS5zdGFydEFuZ2xlID09PSBzaGFwZS5lbmRBbmdsZSB8fCB0eXBlID09PSAncmVjdCcgJiYgKCFzaGFwZS53aWR0aCB8fCAhc2hhcGUuaGVpZ2h0KSkpIHtcbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNoYWRvd1RlbXAubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIC8vIEl0IGlzIHNhdmUgdG8gcHV0IHNoYWRvd1RlbXAgc3RhdGljLCBiZWNhdXNlIHNoYWRvd1RlbXBcbiAgICAgICAgICAgIC8vIHdpbGwgYmUgYWxsIG1vZGlmaWVkIGVhY2ggaXRlbSBicnVzaCBjYWxsZWQuXG4gICAgICAgICAgICBzaGFkb3dUZW1wW2pdWzJdID0gc3R5bGVbc2hhZG93VGVtcFtqXVswXV07XG4gICAgICAgICAgICBzdHlsZVtzaGFkb3dUZW1wW2pdWzBdXSA9IHNoYWRvd1RlbXBbal1bMV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbW9kaWZpZWQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgb3JpZ25hbEJydXNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICBpZiAobW9kaWZpZWQpIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2hhZG93VGVtcC5sZW5ndGg7IGorKykge1xuICAgICAgICBzdHlsZVtzaGFkb3dUZW1wW2pdWzBdXSA9IHNoYWRvd1RlbXBbal1bMl07XG4gICAgICB9XG4gICAgfVxuICB9IDogb3JpZ25hbEJydXNoO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBTSEFET1dfUFJPUFMgPSB7XG4gICdzaGFkb3dCbHVyJzogMSxcbiAgJ3NoYWRvd09mZnNldFgnOiAxLFxuICAnc2hhZG93T2Zmc2V0WSc6IDEsXG4gICd0ZXh0U2hhZG93Qmx1cic6IDEsXG4gICd0ZXh0U2hhZG93T2Zmc2V0WCc6IDEsXG4gICd0ZXh0U2hhZG93T2Zmc2V0WSc6IDEsXG4gICd0ZXh0Qm94U2hhZG93Qmx1cic6IDEsXG4gICd0ZXh0Qm94U2hhZG93T2Zmc2V0WCc6IDEsXG4gICd0ZXh0Qm94U2hhZG93T2Zmc2V0WSc6IDFcbn07XG5cbmZ1bmN0aW9uIF9kZWZhdWx0KGN0eCwgcHJvcE5hbWUsIHZhbHVlKSB7XG4gIGlmIChTSEFET1dfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlICo9IGN0eC5kcHI7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIExSVSA9IHJlcXVpcmUoXCIuLi8uLi9jb3JlL0xSVVwiKTtcblxudmFyIGdsb2JhbEltYWdlQ2FjaGUgPSBuZXcgTFJVKDUwKTtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8SFRNTEltYWdlRWxlbWVudHxIVE1MQ2FudmFzRWxlbWVudHxDYW52YXN9IG5ld0ltYWdlT3JTcmNcbiAqIEByZXR1cm4ge0hUTUxJbWFnZUVsZW1lbnR8SFRNTENhbnZhc0VsZW1lbnR8Q2FudmFzfSBpbWFnZVxuICovXG5cbmZ1bmN0aW9uIGZpbmRFeGlzdEltYWdlKG5ld0ltYWdlT3JTcmMpIHtcbiAgaWYgKHR5cGVvZiBuZXdJbWFnZU9yU3JjID09PSAnc3RyaW5nJykge1xuICAgIHZhciBjYWNoZWRJbWdPYmogPSBnbG9iYWxJbWFnZUNhY2hlLmdldChuZXdJbWFnZU9yU3JjKTtcbiAgICByZXR1cm4gY2FjaGVkSW1nT2JqICYmIGNhY2hlZEltZ09iai5pbWFnZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3SW1hZ2VPclNyYztcbiAgfVxufVxuLyoqXG4gKiBDYXV0aW9uOiBVc2VyIHNob3VsZCBjYWNoZSBsb2FkZWQgaW1hZ2VzLCBidXQgbm90IGp1c3QgY291bnQgb24gTFJVLlxuICogQ29uc2lkZXIgaWYgcmVxdWlyZWQgaW1hZ2VzIG1vcmUgdGhhbiBMUlUgc2l6ZSwgd2lsbCBkZWFkIGxvb3Agb2NjdXI/XG4gKlxuICogQHBhcmFtIHtzdHJpbmd8SFRNTEltYWdlRWxlbWVudHxIVE1MQ2FudmFzRWxlbWVudHxDYW52YXN9IG5ld0ltYWdlT3JTcmNcbiAqIEBwYXJhbSB7SFRNTEltYWdlRWxlbWVudHxIVE1MQ2FudmFzRWxlbWVudHxDYW52YXN9IGltYWdlIEV4aXN0ZW50IGltYWdlLlxuICogQHBhcmFtIHttb2R1bGU6enJlbmRlci9FbGVtZW50fSBbaG9zdEVsXSBGb3IgY2FsbGluZyBgZGlydHlgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NiXSBwYXJhbXM6IChpbWFnZSwgY2JQYXlsb2FkKVxuICogQHBhcmFtIHtPYmplY3R9IFtjYlBheWxvYWRdIFBheWxvYWQgb24gY2IgY2FsbGluZy5cbiAqIEByZXR1cm4ge0hUTUxJbWFnZUVsZW1lbnR8SFRNTENhbnZhc0VsZW1lbnR8Q2FudmFzfSBpbWFnZVxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlT3JVcGRhdGVJbWFnZShuZXdJbWFnZU9yU3JjLCBpbWFnZSwgaG9zdEVsLCBjYiwgY2JQYXlsb2FkKSB7XG4gIGlmICghbmV3SW1hZ2VPclNyYykge1xuICAgIHJldHVybiBpbWFnZTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbmV3SW1hZ2VPclNyYyA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBJbWFnZSBzaG91bGQgbm90IGJlIGxvYWRlZCByZXBlYXRseS5cbiAgICBpZiAoaW1hZ2UgJiYgaW1hZ2UuX196ckltYWdlU3JjID09PSBuZXdJbWFnZU9yU3JjIHx8ICFob3N0RWwpIHtcbiAgICAgIHJldHVybiBpbWFnZTtcbiAgICB9IC8vIE9ubHkgd2hlbiB0aGVyZSBpcyBubyBleGlzdGVudCBpbWFnZSBvciBleGlzdGVudCBpbWFnZSBzcmNcbiAgICAvLyBpcyBkaWZmZXJlbnQsIHRoaXMgbWV0aG9kIGlzIHJlc3BvbnNpYmxlIGZvciBsb2FkLlxuXG5cbiAgICB2YXIgY2FjaGVkSW1nT2JqID0gZ2xvYmFsSW1hZ2VDYWNoZS5nZXQobmV3SW1hZ2VPclNyYyk7XG4gICAgdmFyIHBlbmRpbmdXcmFwID0ge1xuICAgICAgaG9zdEVsOiBob3N0RWwsXG4gICAgICBjYjogY2IsXG4gICAgICBjYlBheWxvYWQ6IGNiUGF5bG9hZFxuICAgIH07XG5cbiAgICBpZiAoY2FjaGVkSW1nT2JqKSB7XG4gICAgICBpbWFnZSA9IGNhY2hlZEltZ09iai5pbWFnZTtcbiAgICAgICFpc0ltYWdlUmVhZHkoaW1hZ2UpICYmIGNhY2hlZEltZ09iai5wZW5kaW5nLnB1c2gocGVuZGluZ1dyYXApO1xuICAgIH0gZWxzZSB7XG4gICAgICAhaW1hZ2UgJiYgKGltYWdlID0gbmV3IEltYWdlKCkpO1xuICAgICAgaW1hZ2Uub25sb2FkID0gaW1hZ2VPbkxvYWQ7XG4gICAgICBnbG9iYWxJbWFnZUNhY2hlLnB1dChuZXdJbWFnZU9yU3JjLCBpbWFnZS5fX2NhY2hlZEltZ09iaiA9IHtcbiAgICAgICAgaW1hZ2U6IGltYWdlLFxuICAgICAgICBwZW5kaW5nOiBbcGVuZGluZ1dyYXBdXG4gICAgICB9KTtcbiAgICAgIGltYWdlLnNyYyA9IGltYWdlLl9fenJJbWFnZVNyYyA9IG5ld0ltYWdlT3JTcmM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGltYWdlO1xuICB9IC8vIG5ld0ltYWdlT3JTcmMgaXMgYW4gSFRNTEltYWdlRWxlbWVudCBvciBIVE1MQ2FudmFzRWxlbWVudCBvciBDYW52YXNcbiAgZWxzZSB7XG4gICAgICByZXR1cm4gbmV3SW1hZ2VPclNyYztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGltYWdlT25Mb2FkKCkge1xuICB2YXIgY2FjaGVkSW1nT2JqID0gdGhpcy5fX2NhY2hlZEltZ09iajtcbiAgdGhpcy5vbmxvYWQgPSB0aGlzLl9fY2FjaGVkSW1nT2JqID0gbnVsbDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhY2hlZEltZ09iai5wZW5kaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHBlbmRpbmdXcmFwID0gY2FjaGVkSW1nT2JqLnBlbmRpbmdbaV07XG4gICAgdmFyIGNiID0gcGVuZGluZ1dyYXAuY2I7XG4gICAgY2IgJiYgY2IodGhpcywgcGVuZGluZ1dyYXAuY2JQYXlsb2FkKTtcbiAgICBwZW5kaW5nV3JhcC5ob3N0RWwuZGlydHkoKTtcbiAgfVxuXG4gIGNhY2hlZEltZ09iai5wZW5kaW5nLmxlbmd0aCA9IDA7XG59XG5cbmZ1bmN0aW9uIGlzSW1hZ2VSZWFkeShpbWFnZSkge1xuICByZXR1cm4gaW1hZ2UgJiYgaW1hZ2Uud2lkdGggJiYgaW1hZ2UuaGVpZ2h0O1xufVxuXG5leHBvcnRzLmZpbmRFeGlzdEltYWdlID0gZmluZEV4aXN0SW1hZ2U7XG5leHBvcnRzLmNyZWF0ZU9yVXBkYXRlSW1hZ2UgPSBjcmVhdGVPclVwZGF0ZUltYWdlO1xuZXhwb3J0cy5pc0ltYWdlUmVhZHkgPSBpc0ltYWdlUmVhZHk7IiwidmFyIHNtb290aFNwbGluZSA9IHJlcXVpcmUoXCIuL3Ntb290aFNwbGluZVwiKTtcblxudmFyIHNtb290aEJlemllciA9IHJlcXVpcmUoXCIuL3Ntb290aEJlemllclwiKTtcblxuZnVuY3Rpb24gYnVpbGRQYXRoKGN0eCwgc2hhcGUsIGNsb3NlUGF0aCkge1xuICB2YXIgcG9pbnRzID0gc2hhcGUucG9pbnRzO1xuICB2YXIgc21vb3RoID0gc2hhcGUuc21vb3RoO1xuXG4gIGlmIChwb2ludHMgJiYgcG9pbnRzLmxlbmd0aCA+PSAyKSB7XG4gICAgaWYgKHNtb290aCAmJiBzbW9vdGggIT09ICdzcGxpbmUnKSB7XG4gICAgICB2YXIgY29udHJvbFBvaW50cyA9IHNtb290aEJlemllcihwb2ludHMsIHNtb290aCwgY2xvc2VQYXRoLCBzaGFwZS5zbW9vdGhDb25zdHJhaW50KTtcbiAgICAgIGN0eC5tb3ZlVG8ocG9pbnRzWzBdWzBdLCBwb2ludHNbMF1bMV0pO1xuICAgICAgdmFyIGxlbiA9IHBvaW50cy5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgKGNsb3NlUGF0aCA/IGxlbiA6IGxlbiAtIDEpOyBpKyspIHtcbiAgICAgICAgdmFyIGNwMSA9IGNvbnRyb2xQb2ludHNbaSAqIDJdO1xuICAgICAgICB2YXIgY3AyID0gY29udHJvbFBvaW50c1tpICogMiArIDFdO1xuICAgICAgICB2YXIgcCA9IHBvaW50c1soaSArIDEpICUgbGVuXTtcbiAgICAgICAgY3R4LmJlemllckN1cnZlVG8oY3AxWzBdLCBjcDFbMV0sIGNwMlswXSwgY3AyWzFdLCBwWzBdLCBwWzFdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHNtb290aCA9PT0gJ3NwbGluZScpIHtcbiAgICAgICAgcG9pbnRzID0gc21vb3RoU3BsaW5lKHBvaW50cywgY2xvc2VQYXRoKTtcbiAgICAgIH1cblxuICAgICAgY3R4Lm1vdmVUbyhwb2ludHNbMF1bMF0sIHBvaW50c1swXVsxXSk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAxLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBjdHgubGluZVRvKHBvaW50c1tpXVswXSwgcG9pbnRzW2ldWzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9zZVBhdGggJiYgY3R4LmNsb3NlUGF0aCgpO1xuICB9XG59XG5cbmV4cG9ydHMuYnVpbGRQYXRoID0gYnVpbGRQYXRoOyIsImZ1bmN0aW9uIGJ1aWxkUGF0aChjdHgsIHNoYXBlKSB7XG4gIHZhciB4ID0gc2hhcGUueDtcbiAgdmFyIHkgPSBzaGFwZS55O1xuICB2YXIgd2lkdGggPSBzaGFwZS53aWR0aDtcbiAgdmFyIGhlaWdodCA9IHNoYXBlLmhlaWdodDtcbiAgdmFyIHIgPSBzaGFwZS5yO1xuICB2YXIgcjE7XG4gIHZhciByMjtcbiAgdmFyIHIzO1xuICB2YXIgcjQ7IC8vIENvbnZlcnQgd2lkdGggYW5kIGhlaWdodCB0byBwb3NpdGl2ZSBmb3IgYmV0dGVyIGJvcmRlclJhZGl1c1xuXG4gIGlmICh3aWR0aCA8IDApIHtcbiAgICB4ID0geCArIHdpZHRoO1xuICAgIHdpZHRoID0gLXdpZHRoO1xuICB9XG5cbiAgaWYgKGhlaWdodCA8IDApIHtcbiAgICB5ID0geSArIGhlaWdodDtcbiAgICBoZWlnaHQgPSAtaGVpZ2h0O1xuICB9XG5cbiAgaWYgKHR5cGVvZiByID09PSAnbnVtYmVyJykge1xuICAgIHIxID0gcjIgPSByMyA9IHI0ID0gcjtcbiAgfSBlbHNlIGlmIChyIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBpZiAoci5sZW5ndGggPT09IDEpIHtcbiAgICAgIHIxID0gcjIgPSByMyA9IHI0ID0gclswXTtcbiAgICB9IGVsc2UgaWYgKHIubGVuZ3RoID09PSAyKSB7XG4gICAgICByMSA9IHIzID0gclswXTtcbiAgICAgIHIyID0gcjQgPSByWzFdO1xuICAgIH0gZWxzZSBpZiAoci5sZW5ndGggPT09IDMpIHtcbiAgICAgIHIxID0gclswXTtcbiAgICAgIHIyID0gcjQgPSByWzFdO1xuICAgICAgcjMgPSByWzJdO1xuICAgIH0gZWxzZSB7XG4gICAgICByMSA9IHJbMF07XG4gICAgICByMiA9IHJbMV07XG4gICAgICByMyA9IHJbMl07XG4gICAgICByNCA9IHJbM107XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHIxID0gcjIgPSByMyA9IHI0ID0gMDtcbiAgfVxuXG4gIHZhciB0b3RhbDtcblxuICBpZiAocjEgKyByMiA+IHdpZHRoKSB7XG4gICAgdG90YWwgPSByMSArIHIyO1xuICAgIHIxICo9IHdpZHRoIC8gdG90YWw7XG4gICAgcjIgKj0gd2lkdGggLyB0b3RhbDtcbiAgfVxuXG4gIGlmIChyMyArIHI0ID4gd2lkdGgpIHtcbiAgICB0b3RhbCA9IHIzICsgcjQ7XG4gICAgcjMgKj0gd2lkdGggLyB0b3RhbDtcbiAgICByNCAqPSB3aWR0aCAvIHRvdGFsO1xuICB9XG5cbiAgaWYgKHIyICsgcjMgPiBoZWlnaHQpIHtcbiAgICB0b3RhbCA9IHIyICsgcjM7XG4gICAgcjIgKj0gaGVpZ2h0IC8gdG90YWw7XG4gICAgcjMgKj0gaGVpZ2h0IC8gdG90YWw7XG4gIH1cblxuICBpZiAocjEgKyByNCA+IGhlaWdodCkge1xuICAgIHRvdGFsID0gcjEgKyByNDtcbiAgICByMSAqPSBoZWlnaHQgLyB0b3RhbDtcbiAgICByNCAqPSBoZWlnaHQgLyB0b3RhbDtcbiAgfVxuXG4gIGN0eC5tb3ZlVG8oeCArIHIxLCB5KTtcbiAgY3R4LmxpbmVUbyh4ICsgd2lkdGggLSByMiwgeSk7XG4gIHIyICE9PSAwICYmIGN0eC5hcmMoeCArIHdpZHRoIC0gcjIsIHkgKyByMiwgcjIsIC1NYXRoLlBJIC8gMiwgMCk7XG4gIGN0eC5saW5lVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0IC0gcjMpO1xuICByMyAhPT0gMCAmJiBjdHguYXJjKHggKyB3aWR0aCAtIHIzLCB5ICsgaGVpZ2h0IC0gcjMsIHIzLCAwLCBNYXRoLlBJIC8gMik7XG4gIGN0eC5saW5lVG8oeCArIHI0LCB5ICsgaGVpZ2h0KTtcbiAgcjQgIT09IDAgJiYgY3R4LmFyYyh4ICsgcjQsIHkgKyBoZWlnaHQgLSByNCwgcjQsIE1hdGguUEkgLyAyLCBNYXRoLlBJKTtcbiAgY3R4LmxpbmVUbyh4LCB5ICsgcjEpO1xuICByMSAhPT0gMCAmJiBjdHguYXJjKHggKyByMSwgeSArIHIxLCByMSwgTWF0aC5QSSwgTWF0aC5QSSAqIDEuNSk7XG59XG5cbmV4cG9ydHMuYnVpbGRQYXRoID0gYnVpbGRQYXRoOyIsInZhciBfdmVjdG9yID0gcmVxdWlyZShcIi4uLy4uL2NvcmUvdmVjdG9yXCIpO1xuXG52YXIgdjJNaW4gPSBfdmVjdG9yLm1pbjtcbnZhciB2Mk1heCA9IF92ZWN0b3IubWF4O1xudmFyIHYyU2NhbGUgPSBfdmVjdG9yLnNjYWxlO1xudmFyIHYyRGlzdGFuY2UgPSBfdmVjdG9yLmRpc3RhbmNlO1xudmFyIHYyQWRkID0gX3ZlY3Rvci5hZGQ7XG52YXIgdjJDbG9uZSA9IF92ZWN0b3IuY2xvbmU7XG52YXIgdjJTdWIgPSBfdmVjdG9yLnN1YjtcblxuLyoqXG4gKiDotJ3loZ7lsJTlubPmu5Hmm7Lnur9cbiAqIEBtb2R1bGUgenJlbmRlci9zaGFwZS91dGlsL3Ntb290aEJlemllclxuICogQGF1dGhvciBwaXNzYW5nIChodHRwczovL3d3dy5naXRodWIuY29tL3Bpc3NhbmcpXG4gKiAgICAgICAgIEtlbmVyIChAS2VuZXIt5p6X5bOwLCBrZW5lci5saW5mZW5nQGdtYWlsLmNvbSlcbiAqICAgICAgICAgZXJyb3JyaWsgKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vKipcbiAqIOi0neWhnuWwlOW5s+a7keabsue6v1xuICogQGFsaWFzIG1vZHVsZTp6cmVuZGVyL3NoYXBlL3V0aWwvc21vb3RoQmV6aWVyXG4gKiBAcGFyYW0ge0FycmF5fSBwb2ludHMg57q/5q616aG254K55pWw57uEXG4gKiBAcGFyYW0ge251bWJlcn0gc21vb3RoIOW5s+a7keetiee6pywgMC0xXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzTG9vcFxuICogQHBhcmFtIHtBcnJheX0gY29uc3RyYWludCDlsIborqHnrpflh7rmnaXnmoTmjqfliLbngrnnuqbmnZ/lnKjkuIDkuKrljIXlm7Tnm5LlhoVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAg5q+U5aaCIFtbMCwgMF0sIFsxMDAsIDEwMF1dLCDov5nkuKrljIXlm7Tnm5LkvJrkuI5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAg5pW05Liq5oqY57q/55qE5YyF5Zu055uS5YGa5LiA5Liq5bm26ZuG55So5p2l57qm5p2f5o6n5Yi254K544CCXG4gKiBAcGFyYW0ge0FycmF5fSDorqHnrpflh7rmnaXnmoTmjqfliLbngrnmlbDnu4RcbiAqL1xuZnVuY3Rpb24gX2RlZmF1bHQocG9pbnRzLCBzbW9vdGgsIGlzTG9vcCwgY29uc3RyYWludCkge1xuICB2YXIgY3BzID0gW107XG4gIHZhciB2ID0gW107XG4gIHZhciB2MSA9IFtdO1xuICB2YXIgdjIgPSBbXTtcbiAgdmFyIHByZXZQb2ludDtcbiAgdmFyIG5leHRQb2ludDtcbiAgdmFyIG1pbiwgbWF4O1xuXG4gIGlmIChjb25zdHJhaW50KSB7XG4gICAgbWluID0gW0luZmluaXR5LCBJbmZpbml0eV07XG4gICAgbWF4ID0gWy1JbmZpbml0eSwgLUluZmluaXR5XTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHYyTWluKG1pbiwgbWluLCBwb2ludHNbaV0pO1xuICAgICAgdjJNYXgobWF4LCBtYXgsIHBvaW50c1tpXSk7XG4gICAgfSAvLyDkuI7mjIflrprnmoTljIXlm7Tnm5LlgZrlubbpm4ZcblxuXG4gICAgdjJNaW4obWluLCBtaW4sIGNvbnN0cmFpbnRbMF0pO1xuICAgIHYyTWF4KG1heCwgbWF4LCBjb25zdHJhaW50WzFdKTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgcG9pbnQgPSBwb2ludHNbaV07XG5cbiAgICBpZiAoaXNMb29wKSB7XG4gICAgICBwcmV2UG9pbnQgPSBwb2ludHNbaSA/IGkgLSAxIDogbGVuIC0gMV07XG4gICAgICBuZXh0UG9pbnQgPSBwb2ludHNbKGkgKyAxKSAlIGxlbl07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpID09PSAwIHx8IGkgPT09IGxlbiAtIDEpIHtcbiAgICAgICAgY3BzLnB1c2godjJDbG9uZShwb2ludHNbaV0pKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmV2UG9pbnQgPSBwb2ludHNbaSAtIDFdO1xuICAgICAgICBuZXh0UG9pbnQgPSBwb2ludHNbaSArIDFdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHYyU3ViKHYsIG5leHRQb2ludCwgcHJldlBvaW50KTsgLy8gdXNlIGRlZ3JlZSB0byBzY2FsZSB0aGUgaGFuZGxlIGxlbmd0aFxuXG4gICAgdjJTY2FsZSh2LCB2LCBzbW9vdGgpO1xuICAgIHZhciBkMCA9IHYyRGlzdGFuY2UocG9pbnQsIHByZXZQb2ludCk7XG4gICAgdmFyIGQxID0gdjJEaXN0YW5jZShwb2ludCwgbmV4dFBvaW50KTtcbiAgICB2YXIgc3VtID0gZDAgKyBkMTtcblxuICAgIGlmIChzdW0gIT09IDApIHtcbiAgICAgIGQwIC89IHN1bTtcbiAgICAgIGQxIC89IHN1bTtcbiAgICB9XG5cbiAgICB2MlNjYWxlKHYxLCB2LCAtZDApO1xuICAgIHYyU2NhbGUodjIsIHYsIGQxKTtcbiAgICB2YXIgY3AwID0gdjJBZGQoW10sIHBvaW50LCB2MSk7XG4gICAgdmFyIGNwMSA9IHYyQWRkKFtdLCBwb2ludCwgdjIpO1xuXG4gICAgaWYgKGNvbnN0cmFpbnQpIHtcbiAgICAgIHYyTWF4KGNwMCwgY3AwLCBtaW4pO1xuICAgICAgdjJNaW4oY3AwLCBjcDAsIG1heCk7XG4gICAgICB2Mk1heChjcDEsIGNwMSwgbWluKTtcbiAgICAgIHYyTWluKGNwMSwgY3AxLCBtYXgpO1xuICAgIH1cblxuICAgIGNwcy5wdXNoKGNwMCk7XG4gICAgY3BzLnB1c2goY3AxKTtcbiAgfVxuXG4gIGlmIChpc0xvb3ApIHtcbiAgICBjcHMucHVzaChjcHMuc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gY3BzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBfdmVjdG9yID0gcmVxdWlyZShcIi4uLy4uL2NvcmUvdmVjdG9yXCIpO1xuXG52YXIgdjJEaXN0YW5jZSA9IF92ZWN0b3IuZGlzdGFuY2U7XG5cbi8qKlxuICogQ2F0bXVsbC1Sb20gc3BsaW5lIOaPkuWAvOaKmOe6v1xuICogQG1vZHVsZSB6cmVuZGVyL3NoYXBlL3V0aWwvc21vb3RoU3BsaW5lXG4gKiBAYXV0aG9yIHBpc3NhbmcgKGh0dHBzOi8vd3d3LmdpdGh1Yi5jb20vcGlzc2FuZylcbiAqICAgICAgICAgS2VuZXIgKEBLZW5lci3mnpfls7AsIGtlbmVyLmxpbmZlbmdAZ21haWwuY29tKVxuICogICAgICAgICBlcnJvcnJpayAoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cbi8qKlxuICogQGlubmVyXG4gKi9cbmZ1bmN0aW9uIGludGVycG9sYXRlKHAwLCBwMSwgcDIsIHAzLCB0LCB0MiwgdDMpIHtcbiAgdmFyIHYwID0gKHAyIC0gcDApICogMC41O1xuICB2YXIgdjEgPSAocDMgLSBwMSkgKiAwLjU7XG4gIHJldHVybiAoMiAqIChwMSAtIHAyKSArIHYwICsgdjEpICogdDMgKyAoLTMgKiAocDEgLSBwMikgLSAyICogdjAgLSB2MSkgKiB0MiArIHYwICogdCArIHAxO1xufVxuLyoqXG4gKiBAYWxpYXMgbW9kdWxlOnpyZW5kZXIvc2hhcGUvdXRpbC9zbW9vdGhTcGxpbmVcbiAqIEBwYXJhbSB7QXJyYXl9IHBvaW50cyDnur/mrrXpobbngrnmlbDnu4RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNMb29wXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqL1xuXG5cbmZ1bmN0aW9uIF9kZWZhdWx0KHBvaW50cywgaXNMb29wKSB7XG4gIHZhciBsZW4gPSBwb2ludHMubGVuZ3RoO1xuICB2YXIgcmV0ID0gW107XG4gIHZhciBkaXN0YW5jZSA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBsZW47IGkrKykge1xuICAgIGRpc3RhbmNlICs9IHYyRGlzdGFuY2UocG9pbnRzW2kgLSAxXSwgcG9pbnRzW2ldKTtcbiAgfVxuXG4gIHZhciBzZWdzID0gZGlzdGFuY2UgLyAyO1xuICBzZWdzID0gc2VncyA8IGxlbiA/IGxlbiA6IHNlZ3M7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdzOyBpKyspIHtcbiAgICB2YXIgcG9zID0gaSAvIChzZWdzIC0gMSkgKiAoaXNMb29wID8gbGVuIDogbGVuIC0gMSk7XG4gICAgdmFyIGlkeCA9IE1hdGguZmxvb3IocG9zKTtcbiAgICB2YXIgdyA9IHBvcyAtIGlkeDtcbiAgICB2YXIgcDA7XG4gICAgdmFyIHAxID0gcG9pbnRzW2lkeCAlIGxlbl07XG4gICAgdmFyIHAyO1xuICAgIHZhciBwMztcblxuICAgIGlmICghaXNMb29wKSB7XG4gICAgICBwMCA9IHBvaW50c1tpZHggPT09IDAgPyBpZHggOiBpZHggLSAxXTtcbiAgICAgIHAyID0gcG9pbnRzW2lkeCA+IGxlbiAtIDIgPyBsZW4gLSAxIDogaWR4ICsgMV07XG4gICAgICBwMyA9IHBvaW50c1tpZHggPiBsZW4gLSAzID8gbGVuIC0gMSA6IGlkeCArIDJdO1xuICAgIH0gZWxzZSB7XG4gICAgICBwMCA9IHBvaW50c1soaWR4IC0gMSArIGxlbikgJSBsZW5dO1xuICAgICAgcDIgPSBwb2ludHNbKGlkeCArIDEpICUgbGVuXTtcbiAgICAgIHAzID0gcG9pbnRzWyhpZHggKyAyKSAlIGxlbl07XG4gICAgfVxuXG4gICAgdmFyIHcyID0gdyAqIHc7XG4gICAgdmFyIHczID0gdyAqIHcyO1xuICAgIHJldC5wdXNoKFtpbnRlcnBvbGF0ZShwMFswXSwgcDFbMF0sIHAyWzBdLCBwM1swXSwgdywgdzIsIHczKSwgaW50ZXJwb2xhdGUocDBbMV0sIHAxWzFdLCBwMlsxXSwgcDNbMV0sIHcsIHcyLCB3MyldKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIF91dGlsID0gcmVxdWlyZShcIi4uLy4uL2NvcmUvdXRpbFwiKTtcblxudmFyIHJldHJpZXZlMiA9IF91dGlsLnJldHJpZXZlMjtcbnZhciByZXRyaWV2ZTMgPSBfdXRpbC5yZXRyaWV2ZTM7XG52YXIgZWFjaCA9IF91dGlsLmVhY2g7XG52YXIgbm9ybWFsaXplQ3NzQXJyYXkgPSBfdXRpbC5ub3JtYWxpemVDc3NBcnJheTtcbnZhciBpc1N0cmluZyA9IF91dGlsLmlzU3RyaW5nO1xudmFyIGlzT2JqZWN0ID0gX3V0aWwuaXNPYmplY3Q7XG5cbnZhciB0ZXh0Q29udGFpbiA9IHJlcXVpcmUoXCIuLi8uLi9jb250YWluL3RleHRcIik7XG5cbnZhciByb3VuZFJlY3RIZWxwZXIgPSByZXF1aXJlKFwiLi9yb3VuZFJlY3RcIik7XG5cbnZhciBpbWFnZUhlbHBlciA9IHJlcXVpcmUoXCIuL2ltYWdlXCIpO1xuXG52YXIgZml4U2hhZG93ID0gcmVxdWlyZShcIi4vZml4U2hhZG93XCIpO1xuXG4vLyBUT0RPOiBIYXZlIG5vdCBzdXBwb3J0ICdzdGFydCcsICdlbmQnIHlldC5cbnZhciBWQUxJRF9URVhUX0FMSUdOID0ge1xuICBsZWZ0OiAxLFxuICByaWdodDogMSxcbiAgY2VudGVyOiAxXG59O1xudmFyIFZBTElEX1RFWFRfVkVSVElDQUxfQUxJR04gPSB7XG4gIHRvcDogMSxcbiAgYm90dG9tOiAxLFxuICBtaWRkbGU6IDFcbn07XG4vKipcbiAqIEBwYXJhbSB7bW9kdWxlOnpyZW5kZXIvZ3JhcGhpYy9TdHlsZX0gc3R5bGVcbiAqIEByZXR1cm4ge21vZHVsZTp6cmVuZGVyL2dyYXBoaWMvU3R5bGV9IFRoZSBpbnB1dCBzdHlsZS5cbiAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVUZXh0U3R5bGUoc3R5bGUpIHtcbiAgbm9ybWFsaXplU3R5bGUoc3R5bGUpO1xuICBlYWNoKHN0eWxlLnJpY2gsIG5vcm1hbGl6ZVN0eWxlKTtcbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZShzdHlsZSkge1xuICBpZiAoc3R5bGUpIHtcbiAgICBzdHlsZS5mb250ID0gdGV4dENvbnRhaW4ubWFrZUZvbnQoc3R5bGUpO1xuICAgIHZhciB0ZXh0QWxpZ24gPSBzdHlsZS50ZXh0QWxpZ247XG4gICAgdGV4dEFsaWduID09PSAnbWlkZGxlJyAmJiAodGV4dEFsaWduID0gJ2NlbnRlcicpO1xuICAgIHN0eWxlLnRleHRBbGlnbiA9IHRleHRBbGlnbiA9PSBudWxsIHx8IFZBTElEX1RFWFRfQUxJR05bdGV4dEFsaWduXSA/IHRleHRBbGlnbiA6ICdsZWZ0JzsgLy8gQ29tcGF0aWJsZSB3aXRoIHRleHRCYXNlbGluZS5cblxuICAgIHZhciB0ZXh0VmVydGljYWxBbGlnbiA9IHN0eWxlLnRleHRWZXJ0aWNhbEFsaWduIHx8IHN0eWxlLnRleHRCYXNlbGluZTtcbiAgICB0ZXh0VmVydGljYWxBbGlnbiA9PT0gJ2NlbnRlcicgJiYgKHRleHRWZXJ0aWNhbEFsaWduID0gJ21pZGRsZScpO1xuICAgIHN0eWxlLnRleHRWZXJ0aWNhbEFsaWduID0gdGV4dFZlcnRpY2FsQWxpZ24gPT0gbnVsbCB8fCBWQUxJRF9URVhUX1ZFUlRJQ0FMX0FMSUdOW3RleHRWZXJ0aWNhbEFsaWduXSA/IHRleHRWZXJ0aWNhbEFsaWduIDogJ3RvcCc7XG4gICAgdmFyIHRleHRQYWRkaW5nID0gc3R5bGUudGV4dFBhZGRpbmc7XG5cbiAgICBpZiAodGV4dFBhZGRpbmcpIHtcbiAgICAgIHN0eWxlLnRleHRQYWRkaW5nID0gbm9ybWFsaXplQ3NzQXJyYXkoc3R5bGUudGV4dFBhZGRpbmcpO1xuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4XG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICogQHBhcmFtIHttb2R1bGU6enJlbmRlci9ncmFwaGljL1N0eWxlfSBzdHlsZVxuICogQHBhcmFtIHtPYmplY3R8Ym9vbGVhbn0gW3JlY3RdIHt4LCB5LCB3aWR0aCwgaGVpZ2h0fVxuICogICAgICAgICAgICAgICAgICBJZiBzZXQgZmFsc2UsIHJlY3QgdGV4dCBpcyBub3QgdXNlZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIHJlbmRlclRleHQoaG9zdEVsLCBjdHgsIHRleHQsIHN0eWxlLCByZWN0KSB7XG4gIHN0eWxlLnJpY2ggPyByZW5kZXJSaWNoVGV4dChob3N0RWwsIGN0eCwgdGV4dCwgc3R5bGUsIHJlY3QpIDogcmVuZGVyUGxhaW5UZXh0KGhvc3RFbCwgY3R4LCB0ZXh0LCBzdHlsZSwgcmVjdCk7XG59XG5cbmZ1bmN0aW9uIHJlbmRlclBsYWluVGV4dChob3N0RWwsIGN0eCwgdGV4dCwgc3R5bGUsIHJlY3QpIHtcbiAgdmFyIGZvbnQgPSBzZXRDdHgoY3R4LCAnZm9udCcsIHN0eWxlLmZvbnQgfHwgdGV4dENvbnRhaW4uREVGQVVMVF9GT05UKTtcbiAgdmFyIHRleHRQYWRkaW5nID0gc3R5bGUudGV4dFBhZGRpbmc7XG4gIHZhciBjb250ZW50QmxvY2sgPSBob3N0RWwuX190ZXh0Q290ZW50QmxvY2s7XG5cbiAgaWYgKCFjb250ZW50QmxvY2sgfHwgaG9zdEVsLl9fZGlydHkpIHtcbiAgICBjb250ZW50QmxvY2sgPSBob3N0RWwuX190ZXh0Q290ZW50QmxvY2sgPSB0ZXh0Q29udGFpbi5wYXJzZVBsYWluVGV4dCh0ZXh0LCBmb250LCB0ZXh0UGFkZGluZywgc3R5bGUudHJ1bmNhdGUpO1xuICB9XG5cbiAgdmFyIG91dGVySGVpZ2h0ID0gY29udGVudEJsb2NrLm91dGVySGVpZ2h0O1xuICB2YXIgdGV4dExpbmVzID0gY29udGVudEJsb2NrLmxpbmVzO1xuICB2YXIgbGluZUhlaWdodCA9IGNvbnRlbnRCbG9jay5saW5lSGVpZ2h0O1xuICB2YXIgYm94UG9zID0gZ2V0Qm94UG9zaXRpb24ob3V0ZXJIZWlnaHQsIHN0eWxlLCByZWN0KTtcbiAgdmFyIGJhc2VYID0gYm94UG9zLmJhc2VYO1xuICB2YXIgYmFzZVkgPSBib3hQb3MuYmFzZVk7XG4gIHZhciB0ZXh0QWxpZ24gPSBib3hQb3MudGV4dEFsaWduO1xuICB2YXIgdGV4dFZlcnRpY2FsQWxpZ24gPSBib3hQb3MudGV4dFZlcnRpY2FsQWxpZ247IC8vIE9yaWdpbiBvZiB0ZXh0Um90YXRpb24gc2hvdWxkIGJlIHRoZSBiYXNlIHBvaW50IG9mIHRleHQgZHJhd2luZy5cblxuICBhcHBseVRleHRSb3RhdGlvbihjdHgsIHN0eWxlLCByZWN0LCBiYXNlWCwgYmFzZVkpO1xuICB2YXIgYm94WSA9IHRleHRDb250YWluLmFkanVzdFRleHRZKGJhc2VZLCBvdXRlckhlaWdodCwgdGV4dFZlcnRpY2FsQWxpZ24pO1xuICB2YXIgdGV4dFggPSBiYXNlWDtcbiAgdmFyIHRleHRZID0gYm94WTtcbiAgdmFyIG5lZWREcmF3QmcgPSBuZWVkRHJhd0JhY2tncm91bmQoc3R5bGUpO1xuXG4gIGlmIChuZWVkRHJhd0JnIHx8IHRleHRQYWRkaW5nKSB7XG4gICAgLy8gQ29uc2lkZXIgcGVyZm9ybWFuY2UsIGRvIG5vdCBjYWxsIGdldFRleHRXaWR0aCB1dGlsIG5lY2Vzc2FyeS5cbiAgICB2YXIgdGV4dFdpZHRoID0gdGV4dENvbnRhaW4uZ2V0V2lkdGgodGV4dCwgZm9udCk7XG4gICAgdmFyIG91dGVyV2lkdGggPSB0ZXh0V2lkdGg7XG4gICAgdGV4dFBhZGRpbmcgJiYgKG91dGVyV2lkdGggKz0gdGV4dFBhZGRpbmdbMV0gKyB0ZXh0UGFkZGluZ1szXSk7XG4gICAgdmFyIGJveFggPSB0ZXh0Q29udGFpbi5hZGp1c3RUZXh0WChiYXNlWCwgb3V0ZXJXaWR0aCwgdGV4dEFsaWduKTtcbiAgICBuZWVkRHJhd0JnICYmIGRyYXdCYWNrZ3JvdW5kKGhvc3RFbCwgY3R4LCBzdHlsZSwgYm94WCwgYm94WSwgb3V0ZXJXaWR0aCwgb3V0ZXJIZWlnaHQpO1xuXG4gICAgaWYgKHRleHRQYWRkaW5nKSB7XG4gICAgICB0ZXh0WCA9IGdldFRleHRYRm9yUGFkZGluZyhiYXNlWCwgdGV4dEFsaWduLCB0ZXh0UGFkZGluZyk7XG4gICAgICB0ZXh0WSArPSB0ZXh0UGFkZGluZ1swXTtcbiAgICB9XG4gIH1cblxuICBzZXRDdHgoY3R4LCAndGV4dEFsaWduJywgdGV4dEFsaWduIHx8ICdsZWZ0Jyk7IC8vIEZvcmNlIGJhc2VsaW5lIHRvIGJlIFwibWlkZGxlXCIuIE90aGVyd2lzZSwgaWYgdXNpbmcgXCJ0b3BcIiwgdGhlXG4gIC8vIHRleHQgd2lsbCBvZmZzZXQgZG93bndhcmQgYSBsaXR0bGUgYml0IGluIGZvbnQgXCJNaWNyb3NvZnQgWWFIZWlcIi5cblxuICBzZXRDdHgoY3R4LCAndGV4dEJhc2VsaW5lJywgJ21pZGRsZScpOyAvLyBBbHdheXMgc2V0IHNoYWRvd0JsdXIgYW5kIHNoYWRvd09mZnNldCB0byBhdm9pZCBsZWFrIGZyb20gZGlzcGxheWFibGUuXG5cbiAgc2V0Q3R4KGN0eCwgJ3NoYWRvd0JsdXInLCBzdHlsZS50ZXh0U2hhZG93Qmx1ciB8fCAwKTtcbiAgc2V0Q3R4KGN0eCwgJ3NoYWRvd0NvbG9yJywgc3R5bGUudGV4dFNoYWRvd0NvbG9yIHx8ICd0cmFuc3BhcmVudCcpO1xuICBzZXRDdHgoY3R4LCAnc2hhZG93T2Zmc2V0WCcsIHN0eWxlLnRleHRTaGFkb3dPZmZzZXRYIHx8IDApO1xuICBzZXRDdHgoY3R4LCAnc2hhZG93T2Zmc2V0WScsIHN0eWxlLnRleHRTaGFkb3dPZmZzZXRZIHx8IDApOyAvLyBgdGV4dEJhc2VsaW5lYCBpcyBzZXQgYXMgJ21pZGRsZScuXG5cbiAgdGV4dFkgKz0gbGluZUhlaWdodCAvIDI7XG4gIHZhciB0ZXh0U3Ryb2tlV2lkdGggPSBzdHlsZS50ZXh0U3Ryb2tlV2lkdGg7XG4gIHZhciB0ZXh0U3Ryb2tlID0gZ2V0U3Ryb2tlKHN0eWxlLnRleHRTdHJva2UsIHRleHRTdHJva2VXaWR0aCk7XG4gIHZhciB0ZXh0RmlsbCA9IGdldEZpbGwoc3R5bGUudGV4dEZpbGwpO1xuXG4gIGlmICh0ZXh0U3Ryb2tlKSB7XG4gICAgc2V0Q3R4KGN0eCwgJ2xpbmVXaWR0aCcsIHRleHRTdHJva2VXaWR0aCk7XG4gICAgc2V0Q3R4KGN0eCwgJ3N0cm9rZVN0eWxlJywgdGV4dFN0cm9rZSk7XG4gIH1cblxuICBpZiAodGV4dEZpbGwpIHtcbiAgICBzZXRDdHgoY3R4LCAnZmlsbFN0eWxlJywgdGV4dEZpbGwpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0TGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBGaWxsIGFmdGVyIHN0cm9rZSBzbyB0aGUgb3V0bGluZSB3aWxsIG5vdCBjb3ZlciB0aGUgbWFpbiBwYXJ0LlxuICAgIHRleHRTdHJva2UgJiYgY3R4LnN0cm9rZVRleHQodGV4dExpbmVzW2ldLCB0ZXh0WCwgdGV4dFkpO1xuICAgIHRleHRGaWxsICYmIGN0eC5maWxsVGV4dCh0ZXh0TGluZXNbaV0sIHRleHRYLCB0ZXh0WSk7XG4gICAgdGV4dFkgKz0gbGluZUhlaWdodDtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJSaWNoVGV4dChob3N0RWwsIGN0eCwgdGV4dCwgc3R5bGUsIHJlY3QpIHtcbiAgdmFyIGNvbnRlbnRCbG9jayA9IGhvc3RFbC5fX3RleHRDb3RlbnRCbG9jaztcblxuICBpZiAoIWNvbnRlbnRCbG9jayB8fCBob3N0RWwuX19kaXJ0eSkge1xuICAgIGNvbnRlbnRCbG9jayA9IGhvc3RFbC5fX3RleHRDb3RlbnRCbG9jayA9IHRleHRDb250YWluLnBhcnNlUmljaFRleHQodGV4dCwgc3R5bGUpO1xuICB9XG5cbiAgZHJhd1JpY2hUZXh0KGhvc3RFbCwgY3R4LCBjb250ZW50QmxvY2ssIHN0eWxlLCByZWN0KTtcbn1cblxuZnVuY3Rpb24gZHJhd1JpY2hUZXh0KGhvc3RFbCwgY3R4LCBjb250ZW50QmxvY2ssIHN0eWxlLCByZWN0KSB7XG4gIHZhciBjb250ZW50V2lkdGggPSBjb250ZW50QmxvY2sud2lkdGg7XG4gIHZhciBvdXRlcldpZHRoID0gY29udGVudEJsb2NrLm91dGVyV2lkdGg7XG4gIHZhciBvdXRlckhlaWdodCA9IGNvbnRlbnRCbG9jay5vdXRlckhlaWdodDtcbiAgdmFyIHRleHRQYWRkaW5nID0gc3R5bGUudGV4dFBhZGRpbmc7XG4gIHZhciBib3hQb3MgPSBnZXRCb3hQb3NpdGlvbihvdXRlckhlaWdodCwgc3R5bGUsIHJlY3QpO1xuICB2YXIgYmFzZVggPSBib3hQb3MuYmFzZVg7XG4gIHZhciBiYXNlWSA9IGJveFBvcy5iYXNlWTtcbiAgdmFyIHRleHRBbGlnbiA9IGJveFBvcy50ZXh0QWxpZ247XG4gIHZhciB0ZXh0VmVydGljYWxBbGlnbiA9IGJveFBvcy50ZXh0VmVydGljYWxBbGlnbjsgLy8gT3JpZ2luIG9mIHRleHRSb3RhdGlvbiBzaG91bGQgYmUgdGhlIGJhc2UgcG9pbnQgb2YgdGV4dCBkcmF3aW5nLlxuXG4gIGFwcGx5VGV4dFJvdGF0aW9uKGN0eCwgc3R5bGUsIHJlY3QsIGJhc2VYLCBiYXNlWSk7XG4gIHZhciBib3hYID0gdGV4dENvbnRhaW4uYWRqdXN0VGV4dFgoYmFzZVgsIG91dGVyV2lkdGgsIHRleHRBbGlnbik7XG4gIHZhciBib3hZID0gdGV4dENvbnRhaW4uYWRqdXN0VGV4dFkoYmFzZVksIG91dGVySGVpZ2h0LCB0ZXh0VmVydGljYWxBbGlnbik7XG4gIHZhciB4TGVmdCA9IGJveFg7XG4gIHZhciBsaW5lVG9wID0gYm94WTtcblxuICBpZiAodGV4dFBhZGRpbmcpIHtcbiAgICB4TGVmdCArPSB0ZXh0UGFkZGluZ1szXTtcbiAgICBsaW5lVG9wICs9IHRleHRQYWRkaW5nWzBdO1xuICB9XG5cbiAgdmFyIHhSaWdodCA9IHhMZWZ0ICsgY29udGVudFdpZHRoO1xuICBuZWVkRHJhd0JhY2tncm91bmQoc3R5bGUpICYmIGRyYXdCYWNrZ3JvdW5kKGhvc3RFbCwgY3R4LCBzdHlsZSwgYm94WCwgYm94WSwgb3V0ZXJXaWR0aCwgb3V0ZXJIZWlnaHQpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGVudEJsb2NrLmxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGxpbmUgPSBjb250ZW50QmxvY2subGluZXNbaV07XG4gICAgdmFyIHRva2VucyA9IGxpbmUudG9rZW5zO1xuICAgIHZhciB0b2tlbkNvdW50ID0gdG9rZW5zLmxlbmd0aDtcbiAgICB2YXIgbGluZUhlaWdodCA9IGxpbmUubGluZUhlaWdodDtcbiAgICB2YXIgdXNlZFdpZHRoID0gbGluZS53aWR0aDtcbiAgICB2YXIgbGVmdEluZGV4ID0gMDtcbiAgICB2YXIgbGluZVhMZWZ0ID0geExlZnQ7XG4gICAgdmFyIGxpbmVYUmlnaHQgPSB4UmlnaHQ7XG4gICAgdmFyIHJpZ2h0SW5kZXggPSB0b2tlbkNvdW50IC0gMTtcbiAgICB2YXIgdG9rZW47XG5cbiAgICB3aGlsZSAobGVmdEluZGV4IDwgdG9rZW5Db3VudCAmJiAodG9rZW4gPSB0b2tlbnNbbGVmdEluZGV4XSwgIXRva2VuLnRleHRBbGlnbiB8fCB0b2tlbi50ZXh0QWxpZ24gPT09ICdsZWZ0JykpIHtcbiAgICAgIHBsYWNlVG9rZW4oaG9zdEVsLCBjdHgsIHRva2VuLCBzdHlsZSwgbGluZUhlaWdodCwgbGluZVRvcCwgbGluZVhMZWZ0LCAnbGVmdCcpO1xuICAgICAgdXNlZFdpZHRoIC09IHRva2VuLndpZHRoO1xuICAgICAgbGluZVhMZWZ0ICs9IHRva2VuLndpZHRoO1xuICAgICAgbGVmdEluZGV4Kys7XG4gICAgfVxuXG4gICAgd2hpbGUgKHJpZ2h0SW5kZXggPj0gMCAmJiAodG9rZW4gPSB0b2tlbnNbcmlnaHRJbmRleF0sIHRva2VuLnRleHRBbGlnbiA9PT0gJ3JpZ2h0JykpIHtcbiAgICAgIHBsYWNlVG9rZW4oaG9zdEVsLCBjdHgsIHRva2VuLCBzdHlsZSwgbGluZUhlaWdodCwgbGluZVRvcCwgbGluZVhSaWdodCwgJ3JpZ2h0Jyk7XG4gICAgICB1c2VkV2lkdGggLT0gdG9rZW4ud2lkdGg7XG4gICAgICBsaW5lWFJpZ2h0IC09IHRva2VuLndpZHRoO1xuICAgICAgcmlnaHRJbmRleC0tO1xuICAgIH0gLy8gVGhlIG90aGVyIHRva2VucyBhcmUgcGxhY2VkIGFzIHRleHRBbGlnbiAnY2VudGVyJyBpZiB0aGVyZSBpcyBlbm91Z2ggc3BhY2UuXG5cblxuICAgIGxpbmVYTGVmdCArPSAoY29udGVudFdpZHRoIC0gKGxpbmVYTGVmdCAtIHhMZWZ0KSAtICh4UmlnaHQgLSBsaW5lWFJpZ2h0KSAtIHVzZWRXaWR0aCkgLyAyO1xuXG4gICAgd2hpbGUgKGxlZnRJbmRleCA8PSByaWdodEluZGV4KSB7XG4gICAgICB0b2tlbiA9IHRva2Vuc1tsZWZ0SW5kZXhdOyAvLyBDb25zaWRlciB3aWR0aCBzcGVjaWZpZWQgYnkgdXNlciwgdXNlICdjZW50ZXInIHJhdGhlciB0aGFuICdsZWZ0Jy5cblxuICAgICAgcGxhY2VUb2tlbihob3N0RWwsIGN0eCwgdG9rZW4sIHN0eWxlLCBsaW5lSGVpZ2h0LCBsaW5lVG9wLCBsaW5lWExlZnQgKyB0b2tlbi53aWR0aCAvIDIsICdjZW50ZXInKTtcbiAgICAgIGxpbmVYTGVmdCArPSB0b2tlbi53aWR0aDtcbiAgICAgIGxlZnRJbmRleCsrO1xuICAgIH1cblxuICAgIGxpbmVUb3AgKz0gbGluZUhlaWdodDtcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRleHRSb3RhdGlvbihjdHgsIHN0eWxlLCByZWN0LCB4LCB5KSB7XG4gIC8vIHRleHRSb3RhdGlvbiBvbmx5IGFwcGx5IGluIFJlY3RUZXh0LlxuICBpZiAocmVjdCAmJiBzdHlsZS50ZXh0Um90YXRpb24pIHtcbiAgICB2YXIgb3JpZ2luID0gc3R5bGUudGV4dE9yaWdpbjtcblxuICAgIGlmIChvcmlnaW4gPT09ICdjZW50ZXInKSB7XG4gICAgICB4ID0gcmVjdC53aWR0aCAvIDIgKyByZWN0Lng7XG4gICAgICB5ID0gcmVjdC5oZWlnaHQgLyAyICsgcmVjdC55O1xuICAgIH0gZWxzZSBpZiAob3JpZ2luKSB7XG4gICAgICB4ID0gb3JpZ2luWzBdICsgcmVjdC54O1xuICAgICAgeSA9IG9yaWdpblsxXSArIHJlY3QueTtcbiAgICB9XG5cbiAgICBjdHgudHJhbnNsYXRlKHgsIHkpOyAvLyBQb3NpdGl2ZTogYW50aWNsb2Nrd2lzZVxuXG4gICAgY3R4LnJvdGF0ZSgtc3R5bGUudGV4dFJvdGF0aW9uKTtcbiAgICBjdHgudHJhbnNsYXRlKC14LCAteSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGxhY2VUb2tlbihob3N0RWwsIGN0eCwgdG9rZW4sIHN0eWxlLCBsaW5lSGVpZ2h0LCBsaW5lVG9wLCB4LCB0ZXh0QWxpZ24pIHtcbiAgdmFyIHRva2VuU3R5bGUgPSBzdHlsZS5yaWNoW3Rva2VuLnN0eWxlTmFtZV0gfHwge307IC8vICdjdHgudGV4dEJhc2VsaW5lJyBpcyBhbHdheXMgc2V0IGFzICdtaWRkbGUnLCBmb3Igc2FrZSBvZlxuICAvLyB0aGUgYmlhcyBvZiBcIk1pY3Jvc29mdCBZYUhlaVwiLlxuXG4gIHZhciB0ZXh0VmVydGljYWxBbGlnbiA9IHRva2VuLnRleHRWZXJ0aWNhbEFsaWduO1xuICB2YXIgeSA9IGxpbmVUb3AgKyBsaW5lSGVpZ2h0IC8gMjtcblxuICBpZiAodGV4dFZlcnRpY2FsQWxpZ24gPT09ICd0b3AnKSB7XG4gICAgeSA9IGxpbmVUb3AgKyB0b2tlbi5oZWlnaHQgLyAyO1xuICB9IGVsc2UgaWYgKHRleHRWZXJ0aWNhbEFsaWduID09PSAnYm90dG9tJykge1xuICAgIHkgPSBsaW5lVG9wICsgbGluZUhlaWdodCAtIHRva2VuLmhlaWdodCAvIDI7XG4gIH1cblxuICAhdG9rZW4uaXNMaW5lSG9sZGVyICYmIG5lZWREcmF3QmFja2dyb3VuZCh0b2tlblN0eWxlKSAmJiBkcmF3QmFja2dyb3VuZChob3N0RWwsIGN0eCwgdG9rZW5TdHlsZSwgdGV4dEFsaWduID09PSAncmlnaHQnID8geCAtIHRva2VuLndpZHRoIDogdGV4dEFsaWduID09PSAnY2VudGVyJyA/IHggLSB0b2tlbi53aWR0aCAvIDIgOiB4LCB5IC0gdG9rZW4uaGVpZ2h0IC8gMiwgdG9rZW4ud2lkdGgsIHRva2VuLmhlaWdodCk7XG4gIHZhciB0ZXh0UGFkZGluZyA9IHRva2VuLnRleHRQYWRkaW5nO1xuXG4gIGlmICh0ZXh0UGFkZGluZykge1xuICAgIHggPSBnZXRUZXh0WEZvclBhZGRpbmcoeCwgdGV4dEFsaWduLCB0ZXh0UGFkZGluZyk7XG4gICAgeSAtPSB0b2tlbi5oZWlnaHQgLyAyIC0gdGV4dFBhZGRpbmdbMl0gLSB0b2tlbi50ZXh0SGVpZ2h0IC8gMjtcbiAgfVxuXG4gIHNldEN0eChjdHgsICdzaGFkb3dCbHVyJywgcmV0cmlldmUzKHRva2VuU3R5bGUudGV4dFNoYWRvd0JsdXIsIHN0eWxlLnRleHRTaGFkb3dCbHVyLCAwKSk7XG4gIHNldEN0eChjdHgsICdzaGFkb3dDb2xvcicsIHRva2VuU3R5bGUudGV4dFNoYWRvd0NvbG9yIHx8IHN0eWxlLnRleHRTaGFkb3dDb2xvciB8fCAndHJhbnNwYXJlbnQnKTtcbiAgc2V0Q3R4KGN0eCwgJ3NoYWRvd09mZnNldFgnLCByZXRyaWV2ZTModG9rZW5TdHlsZS50ZXh0U2hhZG93T2Zmc2V0WCwgc3R5bGUudGV4dFNoYWRvd09mZnNldFgsIDApKTtcbiAgc2V0Q3R4KGN0eCwgJ3NoYWRvd09mZnNldFknLCByZXRyaWV2ZTModG9rZW5TdHlsZS50ZXh0U2hhZG93T2Zmc2V0WSwgc3R5bGUudGV4dFNoYWRvd09mZnNldFksIDApKTtcbiAgc2V0Q3R4KGN0eCwgJ3RleHRBbGlnbicsIHRleHRBbGlnbik7IC8vIEZvcmNlIGJhc2VsaW5lIHRvIGJlIFwibWlkZGxlXCIuIE90aGVyd2lzZSwgaWYgdXNpbmcgXCJ0b3BcIiwgdGhlXG4gIC8vIHRleHQgd2lsbCBvZmZzZXQgZG93bndhcmQgYSBsaXR0bGUgYml0IGluIGZvbnQgXCJNaWNyb3NvZnQgWWFIZWlcIi5cblxuICBzZXRDdHgoY3R4LCAndGV4dEJhc2VsaW5lJywgJ21pZGRsZScpO1xuICBzZXRDdHgoY3R4LCAnZm9udCcsIHRva2VuLmZvbnQgfHwgdGV4dENvbnRhaW4uREVGQVVMVF9GT05UKTtcbiAgdmFyIHRleHRTdHJva2UgPSBnZXRTdHJva2UodG9rZW5TdHlsZS50ZXh0U3Ryb2tlIHx8IHN0eWxlLnRleHRTdHJva2UsIHRleHRTdHJva2VXaWR0aCk7XG4gIHZhciB0ZXh0RmlsbCA9IGdldEZpbGwodG9rZW5TdHlsZS50ZXh0RmlsbCB8fCBzdHlsZS50ZXh0RmlsbCk7XG4gIHZhciB0ZXh0U3Ryb2tlV2lkdGggPSByZXRyaWV2ZTIodG9rZW5TdHlsZS50ZXh0U3Ryb2tlV2lkdGgsIHN0eWxlLnRleHRTdHJva2VXaWR0aCk7IC8vIEZpbGwgYWZ0ZXIgc3Ryb2tlIHNvIHRoZSBvdXRsaW5lIHdpbGwgbm90IGNvdmVyIHRoZSBtYWluIHBhcnQuXG5cbiAgaWYgKHRleHRTdHJva2UpIHtcbiAgICBzZXRDdHgoY3R4LCAnbGluZVdpZHRoJywgdGV4dFN0cm9rZVdpZHRoKTtcbiAgICBzZXRDdHgoY3R4LCAnc3Ryb2tlU3R5bGUnLCB0ZXh0U3Ryb2tlKTtcbiAgICBjdHguc3Ryb2tlVGV4dCh0b2tlbi50ZXh0LCB4LCB5KTtcbiAgfVxuXG4gIGlmICh0ZXh0RmlsbCkge1xuICAgIHNldEN0eChjdHgsICdmaWxsU3R5bGUnLCB0ZXh0RmlsbCk7XG4gICAgY3R4LmZpbGxUZXh0KHRva2VuLnRleHQsIHgsIHkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG5lZWREcmF3QmFja2dyb3VuZChzdHlsZSkge1xuICByZXR1cm4gc3R5bGUudGV4dEJhY2tncm91bmRDb2xvciB8fCBzdHlsZS50ZXh0Qm9yZGVyV2lkdGggJiYgc3R5bGUudGV4dEJvcmRlckNvbG9yO1xufSAvLyBzdHlsZToge3RleHRCYWNrZ3JvdW5kQ29sb3IsIHRleHRCb3JkZXJXaWR0aCwgdGV4dEJvcmRlckNvbG9yLCB0ZXh0Qm9yZGVyUmFkaXVzfVxuLy8gc2hhcGU6IHt4LCB5LCB3aWR0aCwgaGVpZ2h0fVxuXG5cbmZ1bmN0aW9uIGRyYXdCYWNrZ3JvdW5kKGhvc3RFbCwgY3R4LCBzdHlsZSwgeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICB2YXIgdGV4dEJhY2tncm91bmRDb2xvciA9IHN0eWxlLnRleHRCYWNrZ3JvdW5kQ29sb3I7XG4gIHZhciB0ZXh0Qm9yZGVyV2lkdGggPSBzdHlsZS50ZXh0Qm9yZGVyV2lkdGg7XG4gIHZhciB0ZXh0Qm9yZGVyQ29sb3IgPSBzdHlsZS50ZXh0Qm9yZGVyQ29sb3I7XG4gIHZhciBpc1BsYWluQmcgPSBpc1N0cmluZyh0ZXh0QmFja2dyb3VuZENvbG9yKTtcbiAgc2V0Q3R4KGN0eCwgJ3NoYWRvd0JsdXInLCBzdHlsZS50ZXh0Qm94U2hhZG93Qmx1ciB8fCAwKTtcbiAgc2V0Q3R4KGN0eCwgJ3NoYWRvd0NvbG9yJywgc3R5bGUudGV4dEJveFNoYWRvd0NvbG9yIHx8ICd0cmFuc3BhcmVudCcpO1xuICBzZXRDdHgoY3R4LCAnc2hhZG93T2Zmc2V0WCcsIHN0eWxlLnRleHRCb3hTaGFkb3dPZmZzZXRYIHx8IDApO1xuICBzZXRDdHgoY3R4LCAnc2hhZG93T2Zmc2V0WScsIHN0eWxlLnRleHRCb3hTaGFkb3dPZmZzZXRZIHx8IDApO1xuXG4gIGlmIChpc1BsYWluQmcgfHwgdGV4dEJvcmRlcldpZHRoICYmIHRleHRCb3JkZXJDb2xvcikge1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICB2YXIgdGV4dEJvcmRlclJhZGl1cyA9IHN0eWxlLnRleHRCb3JkZXJSYWRpdXM7XG5cbiAgICBpZiAoIXRleHRCb3JkZXJSYWRpdXMpIHtcbiAgICAgIGN0eC5yZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByb3VuZFJlY3RIZWxwZXIuYnVpbGRQYXRoKGN0eCwge1xuICAgICAgICB4OiB4LFxuICAgICAgICB5OiB5LFxuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICByOiB0ZXh0Qm9yZGVyUmFkaXVzXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gIH1cblxuICBpZiAoaXNQbGFpbkJnKSB7XG4gICAgc2V0Q3R4KGN0eCwgJ2ZpbGxTdHlsZScsIHRleHRCYWNrZ3JvdW5kQ29sb3IpO1xuICAgIGN0eC5maWxsKCk7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodGV4dEJhY2tncm91bmRDb2xvcikpIHtcbiAgICB2YXIgaW1hZ2UgPSB0ZXh0QmFja2dyb3VuZENvbG9yLmltYWdlO1xuICAgIGltYWdlID0gaW1hZ2VIZWxwZXIuY3JlYXRlT3JVcGRhdGVJbWFnZShpbWFnZSwgbnVsbCwgaG9zdEVsLCBvbkJnSW1hZ2VMb2FkZWQsIHRleHRCYWNrZ3JvdW5kQ29sb3IpO1xuXG4gICAgaWYgKGltYWdlICYmIGltYWdlSGVscGVyLmlzSW1hZ2VSZWFkeShpbWFnZSkpIHtcbiAgICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0ZXh0Qm9yZGVyV2lkdGggJiYgdGV4dEJvcmRlckNvbG9yKSB7XG4gICAgc2V0Q3R4KGN0eCwgJ2xpbmVXaWR0aCcsIHRleHRCb3JkZXJXaWR0aCk7XG4gICAgc2V0Q3R4KGN0eCwgJ3N0cm9rZVN0eWxlJywgdGV4dEJvcmRlckNvbG9yKTtcbiAgICBjdHguc3Ryb2tlKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb25CZ0ltYWdlTG9hZGVkKGltYWdlLCB0ZXh0QmFja2dyb3VuZENvbG9yKSB7XG4gIC8vIFJlcGxhY2UgaW1hZ2UsIHNvIHRoYXQgYGNvbnRhaW4vdGV4dC5qcyNwYXJzZVJpY2hUZXh0YFxuICAvLyB3aWxsIGdldCBjb3JyZWN0IHJlc3VsdCBpbiBuZXh0IHRpY2suXG4gIHRleHRCYWNrZ3JvdW5kQ29sb3IuaW1hZ2UgPSBpbWFnZTtcbn1cblxuZnVuY3Rpb24gZ2V0Qm94UG9zaXRpb24oYmxvY2tIZWlodCwgc3R5bGUsIHJlY3QpIHtcbiAgdmFyIGJhc2VYID0gc3R5bGUueCB8fCAwO1xuICB2YXIgYmFzZVkgPSBzdHlsZS55IHx8IDA7XG4gIHZhciB0ZXh0QWxpZ24gPSBzdHlsZS50ZXh0QWxpZ247XG4gIHZhciB0ZXh0VmVydGljYWxBbGlnbiA9IHN0eWxlLnRleHRWZXJ0aWNhbEFsaWduOyAvLyBUZXh0IHBvc2l0aW9uIHJlcHJlc2VudGVkIGJ5IGNvb3JkXG5cbiAgaWYgKHJlY3QpIHtcbiAgICB2YXIgdGV4dFBvc2l0aW9uID0gc3R5bGUudGV4dFBvc2l0aW9uO1xuXG4gICAgaWYgKHRleHRQb3NpdGlvbiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAvLyBQZXJjZW50XG4gICAgICBiYXNlWCA9IHJlY3QueCArIHBhcnNlUGVyY2VudCh0ZXh0UG9zaXRpb25bMF0sIHJlY3Qud2lkdGgpO1xuICAgICAgYmFzZVkgPSByZWN0LnkgKyBwYXJzZVBlcmNlbnQodGV4dFBvc2l0aW9uWzFdLCByZWN0LmhlaWdodCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciByZXMgPSB0ZXh0Q29udGFpbi5hZGp1c3RUZXh0UG9zaXRpb25PblJlY3QodGV4dFBvc2l0aW9uLCByZWN0LCBzdHlsZS50ZXh0RGlzdGFuY2UpO1xuICAgICAgYmFzZVggPSByZXMueDtcbiAgICAgIGJhc2VZID0gcmVzLnk7IC8vIERlZmF1bHQgYWxpZ24gYW5kIGJhc2VsaW5lIHdoZW4gaGFzIHRleHRQb3NpdGlvblxuXG4gICAgICB0ZXh0QWxpZ24gPSB0ZXh0QWxpZ24gfHwgcmVzLnRleHRBbGlnbjtcbiAgICAgIHRleHRWZXJ0aWNhbEFsaWduID0gdGV4dFZlcnRpY2FsQWxpZ24gfHwgcmVzLnRleHRWZXJ0aWNhbEFsaWduO1xuICAgIH0gLy8gdGV4dE9mZnNldCBpcyBvbmx5IHN1cHBvcnQgaW4gUmVjdFRleHQsIG90aGVyd2lzZVxuICAgIC8vIHdlIGhhdmUgdG8gYWRqdXN0IGJvdW5kaW5nUmVjdCBmb3IgdGV4dE9mZnNldC5cblxuXG4gICAgdmFyIHRleHRPZmZzZXQgPSBzdHlsZS50ZXh0T2Zmc2V0O1xuXG4gICAgaWYgKHRleHRPZmZzZXQpIHtcbiAgICAgIGJhc2VYICs9IHRleHRPZmZzZXRbMF07XG4gICAgICBiYXNlWSArPSB0ZXh0T2Zmc2V0WzFdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYmFzZVg6IGJhc2VYLFxuICAgIGJhc2VZOiBiYXNlWSxcbiAgICB0ZXh0QWxpZ246IHRleHRBbGlnbixcbiAgICB0ZXh0VmVydGljYWxBbGlnbjogdGV4dFZlcnRpY2FsQWxpZ25cbiAgfTtcbn1cblxuZnVuY3Rpb24gc2V0Q3R4KGN0eCwgcHJvcCwgdmFsdWUpIHtcbiAgY3R4W3Byb3BdID0gZml4U2hhZG93KGN0eCwgcHJvcCwgdmFsdWUpO1xuICByZXR1cm4gY3R4W3Byb3BdO1xufVxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cm9rZV0gSWYgc3BlY2lmaWVkLCBkbyBub3QgY2hlY2sgc3R5bGUudGV4dFN0cm9rZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbbGluZVdpZHRoXSBJZiBzcGVjaWZpZWQsIGRvIG5vdCBjaGVjayBzdHlsZS50ZXh0U3Ryb2tlLlxuICogQHBhcmFtIHtudW1iZXJ9IHN0eWxlXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRTdHJva2Uoc3Ryb2tlLCBsaW5lV2lkdGgpIHtcbiAgcmV0dXJuIHN0cm9rZSA9PSBudWxsIHx8IGxpbmVXaWR0aCA8PSAwIHx8IHN0cm9rZSA9PT0gJ3RyYW5zcGFyZW50JyB8fCBzdHJva2UgPT09ICdub25lJyA/IG51bGwgLy8gVE9ETyBwYXR0ZXJuIGFuZCBncmFkaWVudD9cbiAgOiBzdHJva2UuaW1hZ2UgfHwgc3Ryb2tlLmNvbG9yU3RvcHMgPyAnIzAwMCcgOiBzdHJva2U7XG59XG5cbmZ1bmN0aW9uIGdldEZpbGwoZmlsbCkge1xuICByZXR1cm4gZmlsbCA9PSBudWxsIHx8IGZpbGwgPT09ICdub25lJyA/IG51bGwgLy8gVE9ETyBwYXR0ZXJuIGFuZCBncmFkaWVudD9cbiAgOiBmaWxsLmltYWdlIHx8IGZpbGwuY29sb3JTdG9wcyA/ICcjMDAwJyA6IGZpbGw7XG59XG5cbmZ1bmN0aW9uIHBhcnNlUGVyY2VudCh2YWx1ZSwgbWF4VmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodmFsdWUubGFzdEluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSkgLyAxMDAgKiBtYXhWYWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGdldFRleHRYRm9yUGFkZGluZyh4LCB0ZXh0QWxpZ24sIHRleHRQYWRkaW5nKSB7XG4gIHJldHVybiB0ZXh0QWxpZ24gPT09ICdyaWdodCcgPyB4IC0gdGV4dFBhZGRpbmdbMV0gOiB0ZXh0QWxpZ24gPT09ICdjZW50ZXInID8geCArIHRleHRQYWRkaW5nWzNdIC8gMiAtIHRleHRQYWRkaW5nWzFdIC8gMiA6IHggKyB0ZXh0UGFkZGluZ1szXTtcbn1cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqIEBwYXJhbSB7bW9kdWxlOnpyZW5kZXIvU3R5bGV9IHN0eWxlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5cblxuZnVuY3Rpb24gbmVlZERyYXdUZXh0KHRleHQsIHN0eWxlKSB7XG4gIHJldHVybiB0ZXh0ICE9IG51bGwgJiYgKHRleHQgfHwgc3R5bGUudGV4dEJhY2tncm91bmRDb2xvciB8fCBzdHlsZS50ZXh0Qm9yZGVyV2lkdGggJiYgc3R5bGUudGV4dEJvcmRlckNvbG9yIHx8IHN0eWxlLnRleHRQYWRkaW5nKTtcbn1cblxuZXhwb3J0cy5ub3JtYWxpemVUZXh0U3R5bGUgPSBub3JtYWxpemVUZXh0U3R5bGU7XG5leHBvcnRzLnJlbmRlclRleHQgPSByZW5kZXJUZXh0O1xuZXhwb3J0cy5nZXRTdHJva2UgPSBnZXRTdHJva2U7XG5leHBvcnRzLmdldEZpbGwgPSBnZXRGaWxsO1xuZXhwb3J0cy5uZWVkRHJhd1RleHQgPSBuZWVkRHJhd1RleHQ7IiwidmFyIHRleHRIZWxwZXIgPSByZXF1aXJlKFwiLi4vaGVscGVyL3RleHRcIik7XG5cbnZhciBCb3VuZGluZ1JlY3QgPSByZXF1aXJlKFwiLi4vLi4vY29yZS9Cb3VuZGluZ1JlY3RcIik7XG5cbi8qKlxuICogTWl4aW4gZm9yIGRyYXdpbmcgdGV4dCBpbiBhIGVsZW1lbnQgYm91bmRpbmcgcmVjdFxuICogQG1vZHVsZSB6cmVuZGVyL21peGluL1JlY3RUZXh0XG4gKi9cbnZhciB0bXBSZWN0ID0gbmV3IEJvdW5kaW5nUmVjdCgpO1xuXG52YXIgUmVjdFRleHQgPSBmdW5jdGlvbiAoKSB7fTtcblxuUmVjdFRleHQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUmVjdFRleHQsXG5cbiAgLyoqXG4gICAqIERyYXcgdGV4dCBpbiBhIHJlY3Qgd2l0aCBzcGVjaWZpZWQgcG9zaXRpb24uXG4gICAqIEBwYXJhbSAge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4XG4gICAqIEBwYXJhbSAge09iamVjdH0gcmVjdCBEaXNwbGF5YWJsZSByZWN0XG4gICAqL1xuICBkcmF3UmVjdFRleHQ6IGZ1bmN0aW9uIChjdHgsIHJlY3QpIHtcbiAgICB2YXIgc3R5bGUgPSB0aGlzLnN0eWxlO1xuICAgIHJlY3QgPSBzdHlsZS50ZXh0UmVjdCB8fCByZWN0OyAvLyBPcHRpbWl6ZSwgYXZvaWQgbm9ybWFsaXplIGV2ZXJ5IHRpbWUuXG5cbiAgICB0aGlzLl9fZGlydHkgJiYgdGV4dEhlbHBlci5ub3JtYWxpemVUZXh0U3R5bGUoc3R5bGUsIHRydWUpO1xuICAgIHZhciB0ZXh0ID0gc3R5bGUudGV4dDsgLy8gQ29udmVydCB0byBzdHJpbmdcblxuICAgIHRleHQgIT0gbnVsbCAmJiAodGV4dCArPSAnJyk7XG5cbiAgICBpZiAoIXRleHRIZWxwZXIubmVlZERyYXdUZXh0KHRleHQsIHN0eWxlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRklYTUVcblxuXG4gICAgY3R4LnNhdmUoKTsgLy8gVHJhbnNmb3JtIHJlY3QgdG8gdmlldyBzcGFjZVxuXG4gICAgdmFyIHRyYW5zZm9ybSA9IHRoaXMudHJhbnNmb3JtO1xuXG4gICAgaWYgKCFzdHlsZS50cmFuc2Zvcm1UZXh0KSB7XG4gICAgICBpZiAodHJhbnNmb3JtKSB7XG4gICAgICAgIHRtcFJlY3QuY29weShyZWN0KTtcbiAgICAgICAgdG1wUmVjdC5hcHBseVRyYW5zZm9ybSh0cmFuc2Zvcm0pO1xuICAgICAgICByZWN0ID0gdG1wUmVjdDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRUcmFuc2Zvcm0oY3R4KTtcbiAgICB9IC8vIHRyYW5zZm9ybVRleHQgYW5kIHRleHRSb3RhdGlvbiBjYW4gbm90IGJlIHVzZWQgYXQgdGhlIHNhbWUgdGltZS5cblxuXG4gICAgdGV4dEhlbHBlci5yZW5kZXJUZXh0KHRoaXMsIGN0eCwgdGV4dCwgc3R5bGUsIHJlY3QpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cbn07XG52YXIgX2RlZmF1bHQgPSBSZWN0VGV4dDtcbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIFBhdGggPSByZXF1aXJlKFwiLi4vUGF0aFwiKTtcblxuLyoqXG4gKiDlnIblvKdcbiAqIEBtb2R1bGUgenJlbmRlci9ncmFwaGljL3NoYXBlL0FyY1xuICovXG52YXIgX2RlZmF1bHQgPSBQYXRoLmV4dGVuZCh7XG4gIHR5cGU6ICdhcmMnLFxuICBzaGFwZToge1xuICAgIGN4OiAwLFxuICAgIGN5OiAwLFxuICAgIHI6IDAsXG4gICAgc3RhcnRBbmdsZTogMCxcbiAgICBlbmRBbmdsZTogTWF0aC5QSSAqIDIsXG4gICAgY2xvY2t3aXNlOiB0cnVlXG4gIH0sXG4gIHN0eWxlOiB7XG4gICAgc3Ryb2tlOiAnIzAwMCcsXG4gICAgZmlsbDogbnVsbFxuICB9LFxuICBidWlsZFBhdGg6IGZ1bmN0aW9uIChjdHgsIHNoYXBlKSB7XG4gICAgdmFyIHggPSBzaGFwZS5jeDtcbiAgICB2YXIgeSA9IHNoYXBlLmN5O1xuICAgIHZhciByID0gTWF0aC5tYXgoc2hhcGUuciwgMCk7XG4gICAgdmFyIHN0YXJ0QW5nbGUgPSBzaGFwZS5zdGFydEFuZ2xlO1xuICAgIHZhciBlbmRBbmdsZSA9IHNoYXBlLmVuZEFuZ2xlO1xuICAgIHZhciBjbG9ja3dpc2UgPSBzaGFwZS5jbG9ja3dpc2U7XG4gICAgdmFyIHVuaXRYID0gTWF0aC5jb3Moc3RhcnRBbmdsZSk7XG4gICAgdmFyIHVuaXRZID0gTWF0aC5zaW4oc3RhcnRBbmdsZSk7XG4gICAgY3R4Lm1vdmVUbyh1bml0WCAqIHIgKyB4LCB1bml0WSAqIHIgKyB5KTtcbiAgICBjdHguYXJjKHgsIHksIHIsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCAhY2xvY2t3aXNlKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIFBhdGggPSByZXF1aXJlKFwiLi4vUGF0aFwiKTtcblxudmFyIHZlYzIgPSByZXF1aXJlKFwiLi4vLi4vY29yZS92ZWN0b3JcIik7XG5cbnZhciBfY3VydmUgPSByZXF1aXJlKFwiLi4vLi4vY29yZS9jdXJ2ZVwiKTtcblxudmFyIHF1YWRyYXRpY1N1YmRpdmlkZSA9IF9jdXJ2ZS5xdWFkcmF0aWNTdWJkaXZpZGU7XG52YXIgY3ViaWNTdWJkaXZpZGUgPSBfY3VydmUuY3ViaWNTdWJkaXZpZGU7XG52YXIgcXVhZHJhdGljQXQgPSBfY3VydmUucXVhZHJhdGljQXQ7XG52YXIgY3ViaWNBdCA9IF9jdXJ2ZS5jdWJpY0F0O1xudmFyIHF1YWRyYXRpY0Rlcml2YXRpdmVBdCA9IF9jdXJ2ZS5xdWFkcmF0aWNEZXJpdmF0aXZlQXQ7XG52YXIgY3ViaWNEZXJpdmF0aXZlQXQgPSBfY3VydmUuY3ViaWNEZXJpdmF0aXZlQXQ7XG5cbi8qKlxuICog6LSd5aGe5bCU5puy57q/XG4gKiBAbW9kdWxlIHpyZW5kZXIvc2hhcGUvQmV6aWVyQ3VydmVcbiAqL1xudmFyIG91dCA9IFtdO1xuXG5mdW5jdGlvbiBzb21lVmVjdG9yQXQoc2hhcGUsIHQsIGlzVGFuZ2VudCkge1xuICB2YXIgY3B4MiA9IHNoYXBlLmNweDI7XG4gIHZhciBjcHkyID0gc2hhcGUuY3B5MjtcblxuICBpZiAoY3B4MiA9PT0gbnVsbCB8fCBjcHkyID09PSBudWxsKSB7XG4gICAgcmV0dXJuIFsoaXNUYW5nZW50ID8gY3ViaWNEZXJpdmF0aXZlQXQgOiBjdWJpY0F0KShzaGFwZS54MSwgc2hhcGUuY3B4MSwgc2hhcGUuY3B4Miwgc2hhcGUueDIsIHQpLCAoaXNUYW5nZW50ID8gY3ViaWNEZXJpdmF0aXZlQXQgOiBjdWJpY0F0KShzaGFwZS55MSwgc2hhcGUuY3B5MSwgc2hhcGUuY3B5Miwgc2hhcGUueTIsIHQpXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gWyhpc1RhbmdlbnQgPyBxdWFkcmF0aWNEZXJpdmF0aXZlQXQgOiBxdWFkcmF0aWNBdCkoc2hhcGUueDEsIHNoYXBlLmNweDEsIHNoYXBlLngyLCB0KSwgKGlzVGFuZ2VudCA/IHF1YWRyYXRpY0Rlcml2YXRpdmVBdCA6IHF1YWRyYXRpY0F0KShzaGFwZS55MSwgc2hhcGUuY3B5MSwgc2hhcGUueTIsIHQpXTtcbiAgfVxufVxuXG52YXIgX2RlZmF1bHQgPSBQYXRoLmV4dGVuZCh7XG4gIHR5cGU6ICdiZXppZXItY3VydmUnLFxuICBzaGFwZToge1xuICAgIHgxOiAwLFxuICAgIHkxOiAwLFxuICAgIHgyOiAwLFxuICAgIHkyOiAwLFxuICAgIGNweDE6IDAsXG4gICAgY3B5MTogMCxcbiAgICAvLyBjcHgyOiAwLFxuICAgIC8vIGNweTI6IDBcbiAgICAvLyBDdXJ2ZSBzaG93IHBlcmNlbnQsIGZvciBhbmltYXRpbmdcbiAgICBwZXJjZW50OiAxXG4gIH0sXG4gIHN0eWxlOiB7XG4gICAgc3Ryb2tlOiAnIzAwMCcsXG4gICAgZmlsbDogbnVsbFxuICB9LFxuICBidWlsZFBhdGg6IGZ1bmN0aW9uIChjdHgsIHNoYXBlKSB7XG4gICAgdmFyIHgxID0gc2hhcGUueDE7XG4gICAgdmFyIHkxID0gc2hhcGUueTE7XG4gICAgdmFyIHgyID0gc2hhcGUueDI7XG4gICAgdmFyIHkyID0gc2hhcGUueTI7XG4gICAgdmFyIGNweDEgPSBzaGFwZS5jcHgxO1xuICAgIHZhciBjcHkxID0gc2hhcGUuY3B5MTtcbiAgICB2YXIgY3B4MiA9IHNoYXBlLmNweDI7XG4gICAgdmFyIGNweTIgPSBzaGFwZS5jcHkyO1xuICAgIHZhciBwZXJjZW50ID0gc2hhcGUucGVyY2VudDtcblxuICAgIGlmIChwZXJjZW50ID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY3R4Lm1vdmVUbyh4MSwgeTEpO1xuXG4gICAgaWYgKGNweDIgPT0gbnVsbCB8fCBjcHkyID09IG51bGwpIHtcbiAgICAgIGlmIChwZXJjZW50IDwgMSkge1xuICAgICAgICBxdWFkcmF0aWNTdWJkaXZpZGUoeDEsIGNweDEsIHgyLCBwZXJjZW50LCBvdXQpO1xuICAgICAgICBjcHgxID0gb3V0WzFdO1xuICAgICAgICB4MiA9IG91dFsyXTtcbiAgICAgICAgcXVhZHJhdGljU3ViZGl2aWRlKHkxLCBjcHkxLCB5MiwgcGVyY2VudCwgb3V0KTtcbiAgICAgICAgY3B5MSA9IG91dFsxXTtcbiAgICAgICAgeTIgPSBvdXRbMl07XG4gICAgICB9XG5cbiAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKGNweDEsIGNweTEsIHgyLCB5Mik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwZXJjZW50IDwgMSkge1xuICAgICAgICBjdWJpY1N1YmRpdmlkZSh4MSwgY3B4MSwgY3B4MiwgeDIsIHBlcmNlbnQsIG91dCk7XG4gICAgICAgIGNweDEgPSBvdXRbMV07XG4gICAgICAgIGNweDIgPSBvdXRbMl07XG4gICAgICAgIHgyID0gb3V0WzNdO1xuICAgICAgICBjdWJpY1N1YmRpdmlkZSh5MSwgY3B5MSwgY3B5MiwgeTIsIHBlcmNlbnQsIG91dCk7XG4gICAgICAgIGNweTEgPSBvdXRbMV07XG4gICAgICAgIGNweTIgPSBvdXRbMl07XG4gICAgICAgIHkyID0gb3V0WzNdO1xuICAgICAgfVxuXG4gICAgICBjdHguYmV6aWVyQ3VydmVUbyhjcHgxLCBjcHkxLCBjcHgyLCBjcHkyLCB4MiwgeTIpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogR2V0IHBvaW50IGF0IHBlcmNlbnRcbiAgICogQHBhcmFtICB7bnVtYmVyfSB0XG4gICAqIEByZXR1cm4ge0FycmF5LjxudW1iZXI+fVxuICAgKi9cbiAgcG9pbnRBdDogZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gc29tZVZlY3RvckF0KHRoaXMuc2hhcGUsIHQsIGZhbHNlKTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IHRhbmdlbnQgYXQgcGVyY2VudFxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IHRcbiAgICogQHJldHVybiB7QXJyYXkuPG51bWJlcj59XG4gICAqL1xuICB0YW5nZW50QXQ6IGZ1bmN0aW9uICh0KSB7XG4gICAgdmFyIHAgPSBzb21lVmVjdG9yQXQodGhpcy5zaGFwZSwgdCwgdHJ1ZSk7XG4gICAgcmV0dXJuIHZlYzIubm9ybWFsaXplKHAsIHApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgUGF0aCA9IHJlcXVpcmUoXCIuLi9QYXRoXCIpO1xuXG4vKipcbiAqIOWchuW9olxuICogQG1vZHVsZSB6cmVuZGVyL3NoYXBlL0NpcmNsZVxuICovXG52YXIgX2RlZmF1bHQgPSBQYXRoLmV4dGVuZCh7XG4gIHR5cGU6ICdjaXJjbGUnLFxuICBzaGFwZToge1xuICAgIGN4OiAwLFxuICAgIGN5OiAwLFxuICAgIHI6IDBcbiAgfSxcbiAgYnVpbGRQYXRoOiBmdW5jdGlvbiAoY3R4LCBzaGFwZSwgaW5CdW5kbGUpIHtcbiAgICAvLyBCZXR0ZXIgc3Ryb2tpbmcgaW4gU2hhcGVCdW5kbGVcbiAgICAvLyBBbHdheXMgZG8gaXQgbWF5IGhhdmUgcGVyZm9ybWVuY2UgaXNzdWUgKCBmaWxsIG1heSBiZSAyeCBtb3JlIGNvc3QpXG4gICAgaWYgKGluQnVuZGxlKSB7XG4gICAgICBjdHgubW92ZVRvKHNoYXBlLmN4ICsgc2hhcGUuciwgc2hhcGUuY3kpO1xuICAgIH0gLy8gZWxzZSB7XG4gICAgLy8gICAgIGlmIChjdHguYWxsb2NhdGUgJiYgIWN0eC5kYXRhLmxlbmd0aCkge1xuICAgIC8vICAgICAgICAgY3R4LmFsbG9jYXRlKGN0eC5DTURfTUVNX1NJWkUuQSk7XG4gICAgLy8gICAgIH1cbiAgICAvLyB9XG4gICAgLy8gQmV0dGVyIHN0cm9raW5nIGluIFNoYXBlQnVuZGxlXG4gICAgLy8gY3R4Lm1vdmVUbyhzaGFwZS5jeCArIHNoYXBlLnIsIHNoYXBlLmN5KTtcblxuXG4gICAgY3R4LmFyYyhzaGFwZS5jeCwgc2hhcGUuY3ksIHNoYXBlLnIsIDAsIE1hdGguUEkgKiAyLCB0cnVlKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIFBhdGggPSByZXF1aXJlKFwiLi4vUGF0aFwiKTtcblxuLyoqXG4gKiDnm7Tnur9cbiAqIEBtb2R1bGUgenJlbmRlci9ncmFwaGljL3NoYXBlL0xpbmVcbiAqL1xudmFyIF9kZWZhdWx0ID0gUGF0aC5leHRlbmQoe1xuICB0eXBlOiAnbGluZScsXG4gIHNoYXBlOiB7XG4gICAgLy8gU3RhcnQgcG9pbnRcbiAgICB4MTogMCxcbiAgICB5MTogMCxcbiAgICAvLyBFbmQgcG9pbnRcbiAgICB4MjogMCxcbiAgICB5MjogMCxcbiAgICBwZXJjZW50OiAxXG4gIH0sXG4gIHN0eWxlOiB7XG4gICAgc3Ryb2tlOiAnIzAwMCcsXG4gICAgZmlsbDogbnVsbFxuICB9LFxuICBidWlsZFBhdGg6IGZ1bmN0aW9uIChjdHgsIHNoYXBlKSB7XG4gICAgdmFyIHgxID0gc2hhcGUueDE7XG4gICAgdmFyIHkxID0gc2hhcGUueTE7XG4gICAgdmFyIHgyID0gc2hhcGUueDI7XG4gICAgdmFyIHkyID0gc2hhcGUueTI7XG4gICAgdmFyIHBlcmNlbnQgPSBzaGFwZS5wZXJjZW50O1xuXG4gICAgaWYgKHBlcmNlbnQgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjdHgubW92ZVRvKHgxLCB5MSk7XG5cbiAgICBpZiAocGVyY2VudCA8IDEpIHtcbiAgICAgIHgyID0geDEgKiAoMSAtIHBlcmNlbnQpICsgeDIgKiBwZXJjZW50O1xuICAgICAgeTIgPSB5MSAqICgxIC0gcGVyY2VudCkgKyB5MiAqIHBlcmNlbnQ7XG4gICAgfVxuXG4gICAgY3R4LmxpbmVUbyh4MiwgeTIpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgcG9pbnQgYXQgcGVyY2VudFxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IHBlcmNlbnRcbiAgICogQHJldHVybiB7QXJyYXkuPG51bWJlcj59XG4gICAqL1xuICBwb2ludEF0OiBmdW5jdGlvbiAocCkge1xuICAgIHZhciBzaGFwZSA9IHRoaXMuc2hhcGU7XG4gICAgcmV0dXJuIFtzaGFwZS54MSAqICgxIC0gcCkgKyBzaGFwZS54MiAqIHAsIHNoYXBlLnkxICogKDEgLSBwKSArIHNoYXBlLnkyICogcF07XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBQYXRoID0gcmVxdWlyZShcIi4uL1BhdGhcIik7XG5cbnZhciBwb2x5SGVscGVyID0gcmVxdWlyZShcIi4uL2hlbHBlci9wb2x5XCIpO1xuXG4vKipcbiAqIOWkmui+ueW9olxuICogQG1vZHVsZSB6cmVuZGVyL3NoYXBlL1BvbHlnb25cbiAqL1xudmFyIF9kZWZhdWx0ID0gUGF0aC5leHRlbmQoe1xuICB0eXBlOiAncG9seWdvbicsXG4gIHNoYXBlOiB7XG4gICAgcG9pbnRzOiBudWxsLFxuICAgIHNtb290aDogZmFsc2UsXG4gICAgc21vb3RoQ29uc3RyYWludDogbnVsbFxuICB9LFxuICBidWlsZFBhdGg6IGZ1bmN0aW9uIChjdHgsIHNoYXBlKSB7XG4gICAgcG9seUhlbHBlci5idWlsZFBhdGgoY3R4LCBzaGFwZSwgdHJ1ZSk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBQYXRoID0gcmVxdWlyZShcIi4uL1BhdGhcIik7XG5cbnZhciBwb2x5SGVscGVyID0gcmVxdWlyZShcIi4uL2hlbHBlci9wb2x5XCIpO1xuXG4vKipcbiAqIEBtb2R1bGUgenJlbmRlci9ncmFwaGljL3NoYXBlL1BvbHlsaW5lXG4gKi9cbnZhciBfZGVmYXVsdCA9IFBhdGguZXh0ZW5kKHtcbiAgdHlwZTogJ3BvbHlsaW5lJyxcbiAgc2hhcGU6IHtcbiAgICBwb2ludHM6IG51bGwsXG4gICAgc21vb3RoOiBmYWxzZSxcbiAgICBzbW9vdGhDb25zdHJhaW50OiBudWxsXG4gIH0sXG4gIHN0eWxlOiB7XG4gICAgc3Ryb2tlOiAnIzAwMCcsXG4gICAgZmlsbDogbnVsbFxuICB9LFxuICBidWlsZFBhdGg6IGZ1bmN0aW9uIChjdHgsIHNoYXBlKSB7XG4gICAgcG9seUhlbHBlci5idWlsZFBhdGgoY3R4LCBzaGFwZSwgZmFsc2UpO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgUGF0aCA9IHJlcXVpcmUoXCIuLi9QYXRoXCIpO1xuXG52YXIgcm91bmRSZWN0SGVscGVyID0gcmVxdWlyZShcIi4uL2hlbHBlci9yb3VuZFJlY3RcIik7XG5cbi8qKlxuICog55+p5b2iXG4gKiBAbW9kdWxlIHpyZW5kZXIvZ3JhcGhpYy9zaGFwZS9SZWN0XG4gKi9cbnZhciBfZGVmYXVsdCA9IFBhdGguZXh0ZW5kKHtcbiAgdHlwZTogJ3JlY3QnLFxuICBzaGFwZToge1xuICAgIC8vIOW3puS4iuOAgeWPs+S4iuOAgeWPs+S4i+OAgeW3puS4i+inkueahOWNiuW+hOS+neasoeS4unIx44CBcjLjgIFyM+OAgXI0XG4gICAgLy8gcue8qeWGmeS4ujEgICAgICAgICDnm7jlvZPkuo4gWzEsIDEsIDEsIDFdXG4gICAgLy8gcue8qeWGmeS4ulsxXSAgICAgICDnm7jlvZPkuo4gWzEsIDEsIDEsIDFdXG4gICAgLy8gcue8qeWGmeS4ulsxLCAyXSAgICDnm7jlvZPkuo4gWzEsIDIsIDEsIDJdXG4gICAgLy8gcue8qeWGmeS4ulsxLCAyLCAzXSDnm7jlvZPkuo4gWzEsIDIsIDMsIDJdXG4gICAgcjogMCxcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwXG4gIH0sXG4gIGJ1aWxkUGF0aDogZnVuY3Rpb24gKGN0eCwgc2hhcGUpIHtcbiAgICB2YXIgeCA9IHNoYXBlLng7XG4gICAgdmFyIHkgPSBzaGFwZS55O1xuICAgIHZhciB3aWR0aCA9IHNoYXBlLndpZHRoO1xuICAgIHZhciBoZWlnaHQgPSBzaGFwZS5oZWlnaHQ7XG5cbiAgICBpZiAoIXNoYXBlLnIpIHtcbiAgICAgIGN0eC5yZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByb3VuZFJlY3RIZWxwZXIuYnVpbGRQYXRoKGN0eCwgc2hhcGUpO1xuICAgIH1cblxuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICByZXR1cm47XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBQYXRoID0gcmVxdWlyZShcIi4uL1BhdGhcIik7XG5cbi8qKlxuICog5ZyG546vXG4gKiBAbW9kdWxlIHpyZW5kZXIvZ3JhcGhpYy9zaGFwZS9SaW5nXG4gKi9cbnZhciBfZGVmYXVsdCA9IFBhdGguZXh0ZW5kKHtcbiAgdHlwZTogJ3JpbmcnLFxuICBzaGFwZToge1xuICAgIGN4OiAwLFxuICAgIGN5OiAwLFxuICAgIHI6IDAsXG4gICAgcjA6IDBcbiAgfSxcbiAgYnVpbGRQYXRoOiBmdW5jdGlvbiAoY3R4LCBzaGFwZSkge1xuICAgIHZhciB4ID0gc2hhcGUuY3g7XG4gICAgdmFyIHkgPSBzaGFwZS5jeTtcbiAgICB2YXIgUEkyID0gTWF0aC5QSSAqIDI7XG4gICAgY3R4Lm1vdmVUbyh4ICsgc2hhcGUuciwgeSk7XG4gICAgY3R4LmFyYyh4LCB5LCBzaGFwZS5yLCAwLCBQSTIsIGZhbHNlKTtcbiAgICBjdHgubW92ZVRvKHggKyBzaGFwZS5yMCwgeSk7XG4gICAgY3R4LmFyYyh4LCB5LCBzaGFwZS5yMCwgMCwgUEkyLCB0cnVlKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmF1bHQ7IiwidmFyIFBhdGggPSByZXF1aXJlKFwiLi4vUGF0aFwiKTtcblxudmFyIGZpeENsaXBXaXRoU2hhZG93ID0gcmVxdWlyZShcIi4uL2hlbHBlci9maXhDbGlwV2l0aFNoYWRvd1wiKTtcblxuLyoqXG4gKiDmiYflvaJcbiAqIEBtb2R1bGUgenJlbmRlci9ncmFwaGljL3NoYXBlL1NlY3RvclxuICovXG52YXIgX2RlZmF1bHQgPSBQYXRoLmV4dGVuZCh7XG4gIHR5cGU6ICdzZWN0b3InLFxuICBzaGFwZToge1xuICAgIGN4OiAwLFxuICAgIGN5OiAwLFxuICAgIHIwOiAwLFxuICAgIHI6IDAsXG4gICAgc3RhcnRBbmdsZTogMCxcbiAgICBlbmRBbmdsZTogTWF0aC5QSSAqIDIsXG4gICAgY2xvY2t3aXNlOiB0cnVlXG4gIH0sXG4gIGJydXNoOiBmaXhDbGlwV2l0aFNoYWRvdyhQYXRoLnByb3RvdHlwZS5icnVzaCksXG4gIGJ1aWxkUGF0aDogZnVuY3Rpb24gKGN0eCwgc2hhcGUpIHtcbiAgICB2YXIgeCA9IHNoYXBlLmN4O1xuICAgIHZhciB5ID0gc2hhcGUuY3k7XG4gICAgdmFyIHIwID0gTWF0aC5tYXgoc2hhcGUucjAgfHwgMCwgMCk7XG4gICAgdmFyIHIgPSBNYXRoLm1heChzaGFwZS5yLCAwKTtcbiAgICB2YXIgc3RhcnRBbmdsZSA9IHNoYXBlLnN0YXJ0QW5nbGU7XG4gICAgdmFyIGVuZEFuZ2xlID0gc2hhcGUuZW5kQW5nbGU7XG4gICAgdmFyIGNsb2Nrd2lzZSA9IHNoYXBlLmNsb2Nrd2lzZTtcbiAgICB2YXIgdW5pdFggPSBNYXRoLmNvcyhzdGFydEFuZ2xlKTtcbiAgICB2YXIgdW5pdFkgPSBNYXRoLnNpbihzdGFydEFuZ2xlKTtcbiAgICBjdHgubW92ZVRvKHVuaXRYICogcjAgKyB4LCB1bml0WSAqIHIwICsgeSk7XG4gICAgY3R4LmxpbmVUbyh1bml0WCAqIHIgKyB4LCB1bml0WSAqIHIgKyB5KTtcbiAgICBjdHguYXJjKHgsIHksIHIsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCAhY2xvY2t3aXNlKTtcbiAgICBjdHgubGluZVRvKE1hdGguY29zKGVuZEFuZ2xlKSAqIHIwICsgeCwgTWF0aC5zaW4oZW5kQW5nbGUpICogcjAgKyB5KTtcblxuICAgIGlmIChyMCAhPT0gMCkge1xuICAgICAgY3R4LmFyYyh4LCB5LCByMCwgZW5kQW5nbGUsIHN0YXJ0QW5nbGUsIGNsb2Nrd2lzZSk7XG4gICAgfVxuXG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgQW5pbWF0b3IgPSByZXF1aXJlKFwiLi4vYW5pbWF0aW9uL0FuaW1hdG9yXCIpO1xuXG52YXIgbG9nID0gcmVxdWlyZShcIi4uL2NvcmUvbG9nXCIpO1xuXG52YXIgX3V0aWwgPSByZXF1aXJlKFwiLi4vY29yZS91dGlsXCIpO1xuXG52YXIgaXNTdHJpbmcgPSBfdXRpbC5pc1N0cmluZztcbnZhciBpc0Z1bmN0aW9uID0gX3V0aWwuaXNGdW5jdGlvbjtcbnZhciBpc09iamVjdCA9IF91dGlsLmlzT2JqZWN0O1xudmFyIGlzQXJyYXlMaWtlID0gX3V0aWwuaXNBcnJheUxpa2U7XG52YXIgaW5kZXhPZiA9IF91dGlsLmluZGV4T2Y7XG5cbi8qKlxuICogQGFsaWFzIG1vZHVlOnpyZW5kZXIvbWl4aW4vQW5pbWF0YWJsZVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBBbmltYXRhYmxlID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHR5cGUge0FycmF5Ljxtb2R1bGU6enJlbmRlci9hbmltYXRpb24vQW5pbWF0b3I+fVxuICAgKiBAcmVhZE9ubHlcbiAgICovXG4gIHRoaXMuYW5pbWF0b3JzID0gW107XG59O1xuXG5BbmltYXRhYmxlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEFuaW1hdGFibGUsXG5cbiAgLyoqXG4gICAqIOWKqOeUu1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBmZXRjaCB2YWx1ZSBmcm9tIG9iamVjdCwgbGlrZSAnYS5iLmMnLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtsb29wXSBXaGV0aGVyIHRvIGxvb3AgYW5pbWF0aW9uLlxuICAgKiBAcmV0dXJuIHttb2R1bGU6enJlbmRlci9hbmltYXRpb24vQW5pbWF0b3J9XG4gICAqIEBleGFtcGxlOlxuICAgKiAgICAgZWwuYW5pbWF0ZSgnc3R5bGUnLCBmYWxzZSlcbiAgICogICAgICAgICAud2hlbigxMDAwLCB7eDogMTB9IClcbiAgICogICAgICAgICAuZG9uZShmdW5jdGlvbigpeyAvLyBBbmltYXRpb24gZG9uZSB9KVxuICAgKiAgICAgICAgIC5zdGFydCgpXG4gICAqL1xuICBhbmltYXRlOiBmdW5jdGlvbiAocGF0aCwgbG9vcCkge1xuICAgIHZhciB0YXJnZXQ7XG4gICAgdmFyIGFuaW1hdGluZ1NoYXBlID0gZmFsc2U7XG4gICAgdmFyIGVsID0gdGhpcztcbiAgICB2YXIgenIgPSB0aGlzLl9fenI7XG5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdmFyIHBhdGhTcGxpdHRlZCA9IHBhdGguc3BsaXQoJy4nKTtcbiAgICAgIHZhciBwcm9wID0gZWw7IC8vIElmIGFuaW1hdGluZyBzaGFwZVxuXG4gICAgICBhbmltYXRpbmdTaGFwZSA9IHBhdGhTcGxpdHRlZFswXSA9PT0gJ3NoYXBlJztcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXRoU3BsaXR0ZWQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmICghcHJvcCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvcCA9IHByb3BbcGF0aFNwbGl0dGVkW2ldXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb3ApIHtcbiAgICAgICAgdGFyZ2V0ID0gcHJvcDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0ID0gZWw7XG4gICAgfVxuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIGxvZygnUHJvcGVydHkgXCInICsgcGF0aCArICdcIiBpcyBub3QgZXhpc3RlZCBpbiBlbGVtZW50ICcgKyBlbC5pZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGFuaW1hdG9ycyA9IGVsLmFuaW1hdG9ycztcbiAgICB2YXIgYW5pbWF0b3IgPSBuZXcgQW5pbWF0b3IodGFyZ2V0LCBsb29wKTtcbiAgICBhbmltYXRvci5kdXJpbmcoZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgZWwuZGlydHkoYW5pbWF0aW5nU2hhcGUpO1xuICAgIH0pLmRvbmUoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gRklYTUUgQW5pbWF0b3Igd2lsbCBub3QgYmUgcmVtb3ZlZCBpZiB1c2UgYEFuaW1hdG9yI3N0b3BgIHRvIHN0b3AgYW5pbWF0aW9uXG4gICAgICBhbmltYXRvcnMuc3BsaWNlKGluZGV4T2YoYW5pbWF0b3JzLCBhbmltYXRvciksIDEpO1xuICAgIH0pO1xuICAgIGFuaW1hdG9ycy5wdXNoKGFuaW1hdG9yKTsgLy8gSWYgYW5pbWF0ZSBhZnRlciBhZGRlZCB0byB0aGUgenJlbmRlclxuXG4gICAgaWYgKHpyKSB7XG4gICAgICB6ci5hbmltYXRpb24uYWRkQW5pbWF0b3IoYW5pbWF0b3IpO1xuICAgIH1cblxuICAgIHJldHVybiBhbmltYXRvcjtcbiAgfSxcblxuICAvKipcbiAgICog5YGc5q2i5Yqo55S7XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZm9yd2FyZFRvTGFzdCBJZiBtb3ZlIHRvIGxhc3QgZnJhbWUgYmVmb3JlIHN0b3BcbiAgICovXG4gIHN0b3BBbmltYXRpb246IGZ1bmN0aW9uIChmb3J3YXJkVG9MYXN0KSB7XG4gICAgdmFyIGFuaW1hdG9ycyA9IHRoaXMuYW5pbWF0b3JzO1xuICAgIHZhciBsZW4gPSBhbmltYXRvcnMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgYW5pbWF0b3JzW2ldLnN0b3AoZm9yd2FyZFRvTGFzdCk7XG4gICAgfVxuXG4gICAgYW5pbWF0b3JzLmxlbmd0aCA9IDA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhdXRpb246IHRoaXMgbWV0aG9kIHdpbGwgc3RvcCBwcmV2aW91cyBhbmltYXRpb24uXG4gICAqIFNvIGRvIG5vdCB1c2UgdGhpcyBtZXRob2QgdG8gb25lIGVsZW1lbnQgdHdpY2UgYmVmb3JlXG4gICAqIGFuaW1hdGlvbiBzdGFydHMsIHVubGVzcyB5b3Uga25vdyB3aGF0IHlvdSBhcmUgZG9pbmcuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt0aW1lPTUwMF0gVGltZSBpbiBtc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW2Vhc2luZz0nbGluZWFyJ11cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtkZWxheT0wXVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtmb3JjZUFuaW1hdGVdIFByZXZlbnQgc3RvcCBhbmltYXRpb24gYW5kIGNhbGxiYWNrXG4gICAqICAgICAgICBpbW1lZGllbnRseSB3aGVuIHRhcmdldCB2YWx1ZXMgYXJlIHRoZSBzYW1lIGFzIGN1cnJlbnQgdmFsdWVzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgLy8gQW5pbWF0ZSBwb3NpdGlvblxuICAgKiAgZWwuYW5pbWF0ZVRvKHtcbiAgICogICAgICBwb3NpdGlvbjogWzEwLCAxMF1cbiAgICogIH0sIGZ1bmN0aW9uICgpIHsgLy8gZG9uZSB9KVxuICAgKlxuICAgKiAgLy8gQW5pbWF0ZSBzaGFwZSwgc3R5bGUgYW5kIHBvc2l0aW9uIGluIDEwMG1zLCBkZWxheWVkIDEwMG1zLCB3aXRoIGN1YmljT3V0IGVhc2luZ1xuICAgKiAgZWwuYW5pbWF0ZVRvKHtcbiAgICogICAgICBzaGFwZToge1xuICAgKiAgICAgICAgICB3aWR0aDogNTAwXG4gICAqICAgICAgfSxcbiAgICogICAgICBzdHlsZToge1xuICAgKiAgICAgICAgICBmaWxsOiAncmVkJ1xuICAgKiAgICAgIH1cbiAgICogICAgICBwb3NpdGlvbjogWzEwLCAxMF1cbiAgICogIH0sIDEwMCwgMTAwLCAnY3ViaWNPdXQnLCBmdW5jdGlvbiAoKSB7IC8vIGRvbmUgfSlcbiAgICovXG4gIC8vIFRPRE8gUmV0dXJuIGFuaW1hdGlvbiBrZXlcbiAgYW5pbWF0ZVRvOiBmdW5jdGlvbiAodGFyZ2V0LCB0aW1lLCBkZWxheSwgZWFzaW5nLCBjYWxsYmFjaywgZm9yY2VBbmltYXRlKSB7XG4gICAgLy8gYW5pbWF0ZVRvKHRhcmdldCwgdGltZSwgZWFzaW5nLCBjYWxsYmFjayk7XG4gICAgaWYgKGlzU3RyaW5nKGRlbGF5KSkge1xuICAgICAgY2FsbGJhY2sgPSBlYXNpbmc7XG4gICAgICBlYXNpbmcgPSBkZWxheTtcbiAgICAgIGRlbGF5ID0gMDtcbiAgICB9IC8vIGFuaW1hdGVUbyh0YXJnZXQsIHRpbWUsIGRlbGF5LCBjYWxsYmFjayk7XG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbihlYXNpbmcpKSB7XG4gICAgICAgIGNhbGxiYWNrID0gZWFzaW5nO1xuICAgICAgICBlYXNpbmcgPSAnbGluZWFyJztcbiAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgfSAvLyBhbmltYXRlVG8odGFyZ2V0LCB0aW1lLCBjYWxsYmFjayk7XG4gICAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKGRlbGF5KSkge1xuICAgICAgICAgIGNhbGxiYWNrID0gZGVsYXk7XG4gICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9IC8vIGFuaW1hdGVUbyh0YXJnZXQsIGNhbGxiYWNrKVxuICAgICAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHRpbWUpKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IHRpbWU7XG4gICAgICAgICAgICB0aW1lID0gNTAwO1xuICAgICAgICAgIH0gLy8gYW5pbWF0ZVRvKHRhcmdldClcbiAgICAgICAgICBlbHNlIGlmICghdGltZSkge1xuICAgICAgICAgICAgICB0aW1lID0gNTAwO1xuICAgICAgICAgICAgfSAvLyBTdG9wIGFsbCBwcmV2aW91cyBhbmltYXRpb25zXG5cblxuICAgIHRoaXMuc3RvcEFuaW1hdGlvbigpO1xuXG4gICAgdGhpcy5fYW5pbWF0ZVRvU2hhbGxvdygnJywgdGhpcywgdGFyZ2V0LCB0aW1lLCBkZWxheSk7IC8vIEFuaW1hdG9ycyBtYXkgYmUgcmVtb3ZlZCBpbW1lZGlhdGVseSBhZnRlciBzdGFydFxuICAgIC8vIGlmIHRoZXJlIGlzIG5vdGhpbmcgdG8gYW5pbWF0ZVxuXG5cbiAgICB2YXIgYW5pbWF0b3JzID0gdGhpcy5hbmltYXRvcnMuc2xpY2UoKTtcbiAgICB2YXIgY291bnQgPSBhbmltYXRvcnMubGVuZ3RoO1xuXG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIGNvdW50LS07XG5cbiAgICAgIGlmICghY291bnQpIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9IC8vIE5vIGFuaW1hdG9ycy4gVGhpcyBzaG91bGQgYmUgY2hlY2tlZCBiZWZvcmUgYW5pbWF0b3JzW2ldLnN0YXJ0KCksXG4gICAgLy8gYmVjYXVzZSAnZG9uZScgbWF5IGJlIGV4ZWN1dGVkIGltbWVkaWF0ZWx5IGlmIG5vIG5lZWQgdG8gYW5pbWF0ZS5cblxuXG4gICAgaWYgKCFjb3VudCkge1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICB9IC8vIFN0YXJ0IGFmdGVyIGFsbCBhbmltYXRvcnMgY3JlYXRlZFxuICAgIC8vIEluY2FzZSBhbnkgYW5pbWF0b3IgaXMgZG9uZSBpbW1lZGlhdGVseSB3aGVuIGFsbCBhbmltYXRpb24gcHJvcGVydGllcyBhcmUgbm90IGNoYW5nZWRcblxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbmltYXRvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFuaW1hdG9yc1tpXS5kb25lKGRvbmUpLnN0YXJ0KGVhc2luZywgZm9yY2VBbmltYXRlKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoPScnXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2U9dGhpc1xuICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbdGltZT01MDBdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVsYXk9MF1cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogIC8vIEFuaW1hdGUgcG9zaXRpb25cbiAgICogIGVsLl9hbmltYXRlVG9TaGFsbG93KHtcbiAgICogICAgICBwb3NpdGlvbjogWzEwLCAxMF1cbiAgICogIH0pXG4gICAqXG4gICAqICAvLyBBbmltYXRlIHNoYXBlLCBzdHlsZSBhbmQgcG9zaXRpb24gaW4gMTAwbXMsIGRlbGF5ZWQgMTAwbXNcbiAgICogIGVsLl9hbmltYXRlVG9TaGFsbG93KHtcbiAgICogICAgICBzaGFwZToge1xuICAgKiAgICAgICAgICB3aWR0aDogNTAwXG4gICAqICAgICAgfSxcbiAgICogICAgICBzdHlsZToge1xuICAgKiAgICAgICAgICBmaWxsOiAncmVkJ1xuICAgKiAgICAgIH1cbiAgICogICAgICBwb3NpdGlvbjogWzEwLCAxMF1cbiAgICogIH0sIDEwMCwgMTAwKVxuICAgKi9cbiAgX2FuaW1hdGVUb1NoYWxsb3c6IGZ1bmN0aW9uIChwYXRoLCBzb3VyY2UsIHRhcmdldCwgdGltZSwgZGVsYXkpIHtcbiAgICB2YXIgb2JqU2hhbGxvdyA9IHt9O1xuICAgIHZhciBwcm9wZXJ0eUNvdW50ID0gMDtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gdGFyZ2V0KSB7XG4gICAgICBpZiAoIXRhcmdldC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNvdXJjZVtuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpc09iamVjdCh0YXJnZXRbbmFtZV0pICYmICFpc0FycmF5TGlrZSh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICAgICAgdGhpcy5fYW5pbWF0ZVRvU2hhbGxvdyhwYXRoID8gcGF0aCArICcuJyArIG5hbWUgOiBuYW1lLCBzb3VyY2VbbmFtZV0sIHRhcmdldFtuYW1lXSwgdGltZSwgZGVsYXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9ialNoYWxsb3dbbmFtZV0gPSB0YXJnZXRbbmFtZV07XG4gICAgICAgICAgcHJvcGVydHlDb3VudCsrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldFtuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgIC8vIEF0dHIgZGlyZWN0bHkgaWYgbm90IGhhcyBwcm9wZXJ0eVxuICAgICAgICAvLyBGSVhNRSwgaWYgc29tZSBwcm9wZXJ0eSBub3QgbmVlZGVkIGZvciBlbGVtZW50ID9cbiAgICAgICAgaWYgKCFwYXRoKSB7XG4gICAgICAgICAgdGhpcy5hdHRyKG5hbWUsIHRhcmdldFtuYW1lXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gU2hhcGUgb3Igc3R5bGVcbiAgICAgICAgICB2YXIgcHJvcHMgPSB7fTtcbiAgICAgICAgICBwcm9wc1twYXRoXSA9IHt9O1xuICAgICAgICAgIHByb3BzW3BhdGhdW25hbWVdID0gdGFyZ2V0W25hbWVdO1xuICAgICAgICAgIHRoaXMuYXR0cihwcm9wcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJvcGVydHlDb3VudCA+IDApIHtcbiAgICAgIHRoaXMuYW5pbWF0ZShwYXRoLCBmYWxzZSkud2hlbih0aW1lID09IG51bGwgPyA1MDAgOiB0aW1lLCBvYmpTaGFsbG93KS5kZWxheShkZWxheSB8fCAwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcbnZhciBfZGVmYXVsdCA9IEFuaW1hdGFibGU7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsIi8vIFRPRE8gRHJhZ2dhYmxlIGZvciBncm91cFxuLy8gRklYTUUgRHJhZ2dhYmxlIG9uIGVsZW1lbnQgd2hpY2ggaGFzIHBhcmVudCByb3RhdGlvbiBvciBzY2FsZVxuZnVuY3Rpb24gRHJhZ2dhYmxlKCkge1xuICB0aGlzLm9uKCdtb3VzZWRvd24nLCB0aGlzLl9kcmFnU3RhcnQsIHRoaXMpO1xuICB0aGlzLm9uKCdtb3VzZW1vdmUnLCB0aGlzLl9kcmFnLCB0aGlzKTtcbiAgdGhpcy5vbignbW91c2V1cCcsIHRoaXMuX2RyYWdFbmQsIHRoaXMpO1xuICB0aGlzLm9uKCdnbG9iYWxvdXQnLCB0aGlzLl9kcmFnRW5kLCB0aGlzKTsgLy8gdGhpcy5fZHJvcFRhcmdldCA9IG51bGw7XG4gIC8vIHRoaXMuX2RyYWdnaW5nVGFyZ2V0ID0gbnVsbDtcbiAgLy8gdGhpcy5feCA9IDA7XG4gIC8vIHRoaXMuX3kgPSAwO1xufVxuXG5EcmFnZ2FibGUucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRHJhZ2dhYmxlLFxuICBfZHJhZ1N0YXJ0OiBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBkcmFnZ2luZ1RhcmdldCA9IGUudGFyZ2V0O1xuXG4gICAgaWYgKGRyYWdnaW5nVGFyZ2V0ICYmIGRyYWdnaW5nVGFyZ2V0LmRyYWdnYWJsZSkge1xuICAgICAgdGhpcy5fZHJhZ2dpbmdUYXJnZXQgPSBkcmFnZ2luZ1RhcmdldDtcbiAgICAgIGRyYWdnaW5nVGFyZ2V0LmRyYWdnaW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMuX3ggPSBlLm9mZnNldFg7XG4gICAgICB0aGlzLl95ID0gZS5vZmZzZXRZO1xuICAgICAgdGhpcy5kaXNwYXRjaFRvRWxlbWVudChwYXJhbShkcmFnZ2luZ1RhcmdldCwgZSksICdkcmFnc3RhcnQnLCBlLmV2ZW50KTtcbiAgICB9XG4gIH0sXG4gIF9kcmFnOiBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBkcmFnZ2luZ1RhcmdldCA9IHRoaXMuX2RyYWdnaW5nVGFyZ2V0O1xuXG4gICAgaWYgKGRyYWdnaW5nVGFyZ2V0KSB7XG4gICAgICB2YXIgeCA9IGUub2Zmc2V0WDtcbiAgICAgIHZhciB5ID0gZS5vZmZzZXRZO1xuICAgICAgdmFyIGR4ID0geCAtIHRoaXMuX3g7XG4gICAgICB2YXIgZHkgPSB5IC0gdGhpcy5feTtcbiAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgdGhpcy5feSA9IHk7XG4gICAgICBkcmFnZ2luZ1RhcmdldC5kcmlmdChkeCwgZHksIGUpO1xuICAgICAgdGhpcy5kaXNwYXRjaFRvRWxlbWVudChwYXJhbShkcmFnZ2luZ1RhcmdldCwgZSksICdkcmFnJywgZS5ldmVudCk7XG4gICAgICB2YXIgZHJvcFRhcmdldCA9IHRoaXMuZmluZEhvdmVyKHgsIHksIGRyYWdnaW5nVGFyZ2V0KS50YXJnZXQ7XG4gICAgICB2YXIgbGFzdERyb3BUYXJnZXQgPSB0aGlzLl9kcm9wVGFyZ2V0O1xuICAgICAgdGhpcy5fZHJvcFRhcmdldCA9IGRyb3BUYXJnZXQ7XG5cbiAgICAgIGlmIChkcmFnZ2luZ1RhcmdldCAhPT0gZHJvcFRhcmdldCkge1xuICAgICAgICBpZiAobGFzdERyb3BUYXJnZXQgJiYgZHJvcFRhcmdldCAhPT0gbGFzdERyb3BUYXJnZXQpIHtcbiAgICAgICAgICB0aGlzLmRpc3BhdGNoVG9FbGVtZW50KHBhcmFtKGxhc3REcm9wVGFyZ2V0LCBlKSwgJ2RyYWdsZWF2ZScsIGUuZXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRyb3BUYXJnZXQgJiYgZHJvcFRhcmdldCAhPT0gbGFzdERyb3BUYXJnZXQpIHtcbiAgICAgICAgICB0aGlzLmRpc3BhdGNoVG9FbGVtZW50KHBhcmFtKGRyb3BUYXJnZXQsIGUpLCAnZHJhZ2VudGVyJywgZS5ldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIF9kcmFnRW5kOiBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBkcmFnZ2luZ1RhcmdldCA9IHRoaXMuX2RyYWdnaW5nVGFyZ2V0O1xuXG4gICAgaWYgKGRyYWdnaW5nVGFyZ2V0KSB7XG4gICAgICBkcmFnZ2luZ1RhcmdldC5kcmFnZ2luZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuZGlzcGF0Y2hUb0VsZW1lbnQocGFyYW0oZHJhZ2dpbmdUYXJnZXQsIGUpLCAnZHJhZ2VuZCcsIGUuZXZlbnQpO1xuXG4gICAgaWYgKHRoaXMuX2Ryb3BUYXJnZXQpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hUb0VsZW1lbnQocGFyYW0odGhpcy5fZHJvcFRhcmdldCwgZSksICdkcm9wJywgZS5ldmVudCk7XG4gICAgfVxuXG4gICAgdGhpcy5fZHJhZ2dpbmdUYXJnZXQgPSBudWxsO1xuICAgIHRoaXMuX2Ryb3BUYXJnZXQgPSBudWxsO1xuICB9XG59O1xuXG5mdW5jdGlvbiBwYXJhbSh0YXJnZXQsIGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICB0b3BUYXJnZXQ6IGUgJiYgZS50b3BUYXJnZXRcbiAgfTtcbn1cblxudmFyIF9kZWZhdWx0ID0gRHJhZ2dhYmxlO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCIvKipcbiAqIOS6i+S7tuaJqeWxlVxuICogQG1vZHVsZSB6cmVuZGVyL21peGluL0V2ZW50ZnVsXG4gKiBAYXV0aG9yIEtlbmVyIChAS2VuZXIt5p6X5bOwLCBrZW5lci5saW5mZW5nQGdtYWlsLmNvbSlcbiAqICAgICAgICAgcGlzc2FuZyAoaHR0cHM6Ly93d3cuZ2l0aHViLmNvbS9waXNzYW5nKVxuICovXG52YXIgYXJyeVNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuLyoqXG4gKiDkuovku7bliIblj5HlmahcbiAqIEBhbGlhcyBtb2R1bGU6enJlbmRlci9taXhpbi9FdmVudGZ1bFxuICogQGNvbnN0cnVjdG9yXG4gKi9cblxudmFyIEV2ZW50ZnVsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl8kaGFuZGxlcnMgPSB7fTtcbn07XG5cbkV2ZW50ZnVsLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEV2ZW50ZnVsLFxuXG4gIC8qKlxuICAgKiDljZXmrKHop6blj5Hnu5HlrprvvIx0cmlnZ2Vy5ZCO6ZSA5q+BXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCDkuovku7blkI1cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciDlk43lupTlh73mlbBcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcbiAgICovXG4gIG9uZTogZnVuY3Rpb24gKGV2ZW50LCBoYW5kbGVyLCBjb250ZXh0KSB7XG4gICAgdmFyIF9oID0gdGhpcy5fJGhhbmRsZXJzO1xuXG4gICAgaWYgKCFoYW5kbGVyIHx8ICFldmVudCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKCFfaFtldmVudF0pIHtcbiAgICAgIF9oW2V2ZW50XSA9IFtdO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX2hbZXZlbnRdLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoX2hbZXZlbnRdW2ldLmggPT09IGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2hbZXZlbnRdLnB1c2goe1xuICAgICAgaDogaGFuZGxlcixcbiAgICAgIG9uZTogdHJ1ZSxcbiAgICAgIGN0eDogY29udGV4dCB8fCB0aGlzXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICog57uR5a6a5LqL5Lu2XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCDkuovku7blkI1cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciDkuovku7blpITnkIblh73mlbBcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjb250ZXh0XVxuICAgKi9cbiAgb246IGZ1bmN0aW9uIChldmVudCwgaGFuZGxlciwgY29udGV4dCkge1xuICAgIHZhciBfaCA9IHRoaXMuXyRoYW5kbGVycztcblxuICAgIGlmICghaGFuZGxlciB8fCAhZXZlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmICghX2hbZXZlbnRdKSB7XG4gICAgICBfaFtldmVudF0gPSBbXTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IF9oW2V2ZW50XS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKF9oW2V2ZW50XVtpXS5oID09PSBoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9oW2V2ZW50XS5wdXNoKHtcbiAgICAgIGg6IGhhbmRsZXIsXG4gICAgICBvbmU6IGZhbHNlLFxuICAgICAgY3R4OiBjb250ZXh0IHx8IHRoaXNcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiDmmK/lkKbnu5Hlrprkuobkuovku7ZcbiAgICogQHBhcmFtICB7c3RyaW5nfSAgZXZlbnRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzU2lsZW50OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgX2ggPSB0aGlzLl8kaGFuZGxlcnM7XG4gICAgcmV0dXJuIF9oW2V2ZW50XSAmJiBfaFtldmVudF0ubGVuZ3RoO1xuICB9LFxuXG4gIC8qKlxuICAgKiDop6Pnu5Hkuovku7ZcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IOS6i+S7tuWQjVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaGFuZGxlcl0g5LqL5Lu25aSE55CG5Ye95pWwXG4gICAqL1xuICBvZmY6IGZ1bmN0aW9uIChldmVudCwgaGFuZGxlcikge1xuICAgIHZhciBfaCA9IHRoaXMuXyRoYW5kbGVycztcblxuICAgIGlmICghZXZlbnQpIHtcbiAgICAgIHRoaXMuXyRoYW5kbGVycyA9IHt9O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgIGlmIChfaFtldmVudF0pIHtcbiAgICAgICAgdmFyIG5ld0xpc3QgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IF9oW2V2ZW50XS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBpZiAoX2hbZXZlbnRdW2ldWydoJ10gIT0gaGFuZGxlcikge1xuICAgICAgICAgICAgbmV3TGlzdC5wdXNoKF9oW2V2ZW50XVtpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX2hbZXZlbnRdID0gbmV3TGlzdDtcbiAgICAgIH1cblxuICAgICAgaWYgKF9oW2V2ZW50XSAmJiBfaFtldmVudF0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRlbGV0ZSBfaFtldmVudF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSBfaFtldmVudF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOS6i+S7tuWIhuWPkVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSDkuovku7bnsbvlnotcbiAgICovXG4gIHRyaWdnZXI6IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgaWYgKHRoaXMuXyRoYW5kbGVyc1t0eXBlXSkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICB2YXIgYXJnTGVuID0gYXJncy5sZW5ndGg7XG5cbiAgICAgIGlmIChhcmdMZW4gPiAzKSB7XG4gICAgICAgIGFyZ3MgPSBhcnJ5U2xpY2UuY2FsbChhcmdzLCAxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIF9oID0gdGhpcy5fJGhhbmRsZXJzW3R5cGVdO1xuICAgICAgdmFyIGxlbiA9IF9oLmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47KSB7XG4gICAgICAgIC8vIE9wdGltaXplIGFkdmlzZSBmcm9tIGJhY2tib25lXG4gICAgICAgIHN3aXRjaCAoYXJnTGVuKSB7XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgX2hbaV1bJ2gnXS5jYWxsKF9oW2ldWydjdHgnXSk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgX2hbaV1bJ2gnXS5jYWxsKF9oW2ldWydjdHgnXSwgYXJnc1sxXSk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgX2hbaV1bJ2gnXS5jYWxsKF9oW2ldWydjdHgnXSwgYXJnc1sxXSwgYXJnc1syXSk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIC8vIGhhdmUgbW9yZSB0aGFuIDIgZ2l2ZW4gYXJndW1lbnRzXG4gICAgICAgICAgICBfaFtpXVsnaCddLmFwcGx5KF9oW2ldWydjdHgnXSwgYXJncyk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9oW2ldWydvbmUnXSkge1xuICAgICAgICAgIF9oLnNwbGljZShpLCAxKTtcblxuICAgICAgICAgIGxlbi0tO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiDluKbmnIljb250ZXh055qE5LqL5Lu25YiG5Y+RLCDmnIDlkI7kuIDkuKrlj4LmlbDmmK/kuovku7blm57osIPnmoRjb250ZXh0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIOS6i+S7tuexu+Wei1xuICAgKi9cbiAgdHJpZ2dlcldpdGhDb250ZXh0OiBmdW5jdGlvbiAodHlwZSkge1xuICAgIGlmICh0aGlzLl8kaGFuZGxlcnNbdHlwZV0pIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgdmFyIGFyZ0xlbiA9IGFyZ3MubGVuZ3RoO1xuXG4gICAgICBpZiAoYXJnTGVuID4gNCkge1xuICAgICAgICBhcmdzID0gYXJyeVNsaWNlLmNhbGwoYXJncywgMSwgYXJncy5sZW5ndGggLSAxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGN0eCA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICAgIHZhciBfaCA9IHRoaXMuXyRoYW5kbGVyc1t0eXBlXTtcbiAgICAgIHZhciBsZW4gPSBfaC5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOykge1xuICAgICAgICAvLyBPcHRpbWl6ZSBhZHZpc2UgZnJvbSBiYWNrYm9uZVxuICAgICAgICBzd2l0Y2ggKGFyZ0xlbikge1xuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIF9oW2ldWydoJ10uY2FsbChjdHgpO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIF9oW2ldWydoJ10uY2FsbChjdHgsIGFyZ3NbMV0pO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIF9oW2ldWydoJ10uY2FsbChjdHgsIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvLyBoYXZlIG1vcmUgdGhhbiAyIGdpdmVuIGFyZ3VtZW50c1xuICAgICAgICAgICAgX2hbaV1bJ2gnXS5hcHBseShjdHgsIGFyZ3MpO1xuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfaFtpXVsnb25lJ10pIHtcbiAgICAgICAgICBfaC5zcGxpY2UoaSwgMSk7XG5cbiAgICAgICAgICBsZW4tLTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTsgLy8g5a+56LGh5Y+v5Lul6YCa6L+HIG9ueHh4eCDnu5Hlrprkuovku7ZcblxuLyoqXG4gKiBAZXZlbnQgbW9kdWxlOnpyZW5kZXIvbWl4aW4vRXZlbnRmdWwjb25jbGlja1xuICogQHR5cGUge0Z1bmN0aW9ufVxuICogQGRlZmF1bHQgbnVsbFxuICovXG5cbi8qKlxuICogQGV2ZW50IG1vZHVsZTp6cmVuZGVyL21peGluL0V2ZW50ZnVsI29ubW91c2VvdmVyXG4gKiBAdHlwZSB7RnVuY3Rpb259XG4gKiBAZGVmYXVsdCBudWxsXG4gKi9cblxuLyoqXG4gKiBAZXZlbnQgbW9kdWxlOnpyZW5kZXIvbWl4aW4vRXZlbnRmdWwjb25tb3VzZW91dFxuICogQHR5cGUge0Z1bmN0aW9ufVxuICogQGRlZmF1bHQgbnVsbFxuICovXG5cbi8qKlxuICogQGV2ZW50IG1vZHVsZTp6cmVuZGVyL21peGluL0V2ZW50ZnVsI29ubW91c2Vtb3ZlXG4gKiBAdHlwZSB7RnVuY3Rpb259XG4gKiBAZGVmYXVsdCBudWxsXG4gKi9cblxuLyoqXG4gKiBAZXZlbnQgbW9kdWxlOnpyZW5kZXIvbWl4aW4vRXZlbnRmdWwjb25tb3VzZXdoZWVsXG4gKiBAdHlwZSB7RnVuY3Rpb259XG4gKiBAZGVmYXVsdCBudWxsXG4gKi9cblxuLyoqXG4gKiBAZXZlbnQgbW9kdWxlOnpyZW5kZXIvbWl4aW4vRXZlbnRmdWwjb25tb3VzZWRvd25cbiAqIEB0eXBlIHtGdW5jdGlvbn1cbiAqIEBkZWZhdWx0IG51bGxcbiAqL1xuXG4vKipcbiAqIEBldmVudCBtb2R1bGU6enJlbmRlci9taXhpbi9FdmVudGZ1bCNvbm1vdXNldXBcbiAqIEB0eXBlIHtGdW5jdGlvbn1cbiAqIEBkZWZhdWx0IG51bGxcbiAqL1xuXG4vKipcbiAqIEBldmVudCBtb2R1bGU6enJlbmRlci9taXhpbi9FdmVudGZ1bCNvbmRyYWdcbiAqIEB0eXBlIHtGdW5jdGlvbn1cbiAqIEBkZWZhdWx0IG51bGxcbiAqL1xuXG4vKipcbiAqIEBldmVudCBtb2R1bGU6enJlbmRlci9taXhpbi9FdmVudGZ1bCNvbmRyYWdzdGFydFxuICogQHR5cGUge0Z1bmN0aW9ufVxuICogQGRlZmF1bHQgbnVsbFxuICovXG5cbi8qKlxuICogQGV2ZW50IG1vZHVsZTp6cmVuZGVyL21peGluL0V2ZW50ZnVsI29uZHJhZ2VuZFxuICogQHR5cGUge0Z1bmN0aW9ufVxuICogQGRlZmF1bHQgbnVsbFxuICovXG5cbi8qKlxuICogQGV2ZW50IG1vZHVsZTp6cmVuZGVyL21peGluL0V2ZW50ZnVsI29uZHJhZ2VudGVyXG4gKiBAdHlwZSB7RnVuY3Rpb259XG4gKiBAZGVmYXVsdCBudWxsXG4gKi9cblxuLyoqXG4gKiBAZXZlbnQgbW9kdWxlOnpyZW5kZXIvbWl4aW4vRXZlbnRmdWwjb25kcmFnbGVhdmVcbiAqIEB0eXBlIHtGdW5jdGlvbn1cbiAqIEBkZWZhdWx0IG51bGxcbiAqL1xuXG4vKipcbiAqIEBldmVudCBtb2R1bGU6enJlbmRlci9taXhpbi9FdmVudGZ1bCNvbmRyYWdvdmVyXG4gKiBAdHlwZSB7RnVuY3Rpb259XG4gKiBAZGVmYXVsdCBudWxsXG4gKi9cblxuLyoqXG4gKiBAZXZlbnQgbW9kdWxlOnpyZW5kZXIvbWl4aW4vRXZlbnRmdWwjb25kcm9wXG4gKiBAdHlwZSB7RnVuY3Rpb259XG4gKiBAZGVmYXVsdCBudWxsXG4gKi9cblxudmFyIF9kZWZhdWx0ID0gRXZlbnRmdWw7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBtYXRyaXggPSByZXF1aXJlKFwiLi4vY29yZS9tYXRyaXhcIik7XG5cbnZhciB2ZWN0b3IgPSByZXF1aXJlKFwiLi4vY29yZS92ZWN0b3JcIik7XG5cbi8qKlxuICog5o+Q5L6b5Y+Y5o2i5omp5bGVXG4gKiBAbW9kdWxlIHpyZW5kZXIvbWl4aW4vVHJhbnNmb3JtYWJsZVxuICogQGF1dGhvciBwaXNzYW5nIChodHRwczovL3d3dy5naXRodWIuY29tL3Bpc3NhbmcpXG4gKi9cbnZhciBtSWRlbnRpdHkgPSBtYXRyaXguaWRlbnRpdHk7XG52YXIgRVBTSUxPTiA9IDVlLTU7XG5cbmZ1bmN0aW9uIGlzTm90QXJvdW5kWmVybyh2YWwpIHtcbiAgcmV0dXJuIHZhbCA+IEVQU0lMT04gfHwgdmFsIDwgLUVQU0lMT047XG59XG4vKipcbiAqIEBhbGlhcyBtb2R1bGU6enJlbmRlci9taXhpbi9UcmFuc2Zvcm1hYmxlXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuXG5cbnZhciBUcmFuc2Zvcm1hYmxlID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307IC8vIElmIHRoZXJlIGFyZSBubyBnaXZlbiBwb3NpdGlvbiwgcm90YXRpb24sIHNjYWxlXG5cbiAgaWYgKCFvcHRzLnBvc2l0aW9uKSB7XG4gICAgLyoqXG4gICAgICog5bmz56e7XG4gICAgICogQHR5cGUge0FycmF5LjxudW1iZXI+fVxuICAgICAqIEBkZWZhdWx0IFswLCAwXVxuICAgICAqL1xuICAgIHRoaXMucG9zaXRpb24gPSBbMCwgMF07XG4gIH1cblxuICBpZiAob3B0cy5yb3RhdGlvbiA9PSBudWxsKSB7XG4gICAgLyoqXG4gICAgICog5peL6L2sXG4gICAgICogQHR5cGUge0FycmF5LjxudW1iZXI+fVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0aGlzLnJvdGF0aW9uID0gMDtcbiAgfVxuXG4gIGlmICghb3B0cy5zY2FsZSkge1xuICAgIC8qKlxuICAgICAqIOe8qeaUvlxuICAgICAqIEB0eXBlIHtBcnJheS48bnVtYmVyPn1cbiAgICAgKiBAZGVmYXVsdCBbMSwgMV1cbiAgICAgKi9cbiAgICB0aGlzLnNjYWxlID0gWzEsIDFdO1xuICB9XG4gIC8qKlxuICAgKiDml4vovazlkoznvKnmlL7nmoTljp/ngrlcbiAgICogQHR5cGUge0FycmF5LjxudW1iZXI+fVxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuXG5cbiAgdGhpcy5vcmlnaW4gPSB0aGlzLm9yaWdpbiB8fCBudWxsO1xufTtcblxudmFyIHRyYW5zZm9ybWFibGVQcm90byA9IFRyYW5zZm9ybWFibGUucHJvdG90eXBlO1xudHJhbnNmb3JtYWJsZVByb3RvLnRyYW5zZm9ybSA9IG51bGw7XG4vKipcbiAqIOWIpOaWreaYr+WQpumcgOimgeacieWdkOagh+WPmOaNolxuICog5aaC5p6c5pyJ5Z2Q5qCH5Y+Y5o2iLCDliJnku45wb3NpdGlvbiwgcm90YXRpb24sIHNjYWxl5Lul5Y+K54i26IqC54K555qEdHJhbnNmb3Jt6K6h566X5Ye66Ieq6Lqr55qEdHJhbnNmb3Jt55+p6Zi1XG4gKi9cblxudHJhbnNmb3JtYWJsZVByb3RvLm5lZWRMb2NhbFRyYW5zZm9ybSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzTm90QXJvdW5kWmVybyh0aGlzLnJvdGF0aW9uKSB8fCBpc05vdEFyb3VuZFplcm8odGhpcy5wb3NpdGlvblswXSkgfHwgaXNOb3RBcm91bmRaZXJvKHRoaXMucG9zaXRpb25bMV0pIHx8IGlzTm90QXJvdW5kWmVybyh0aGlzLnNjYWxlWzBdIC0gMSkgfHwgaXNOb3RBcm91bmRaZXJvKHRoaXMuc2NhbGVbMV0gLSAxKTtcbn07XG5cbnRyYW5zZm9ybWFibGVQcm90by51cGRhdGVUcmFuc2Zvcm0gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudDtcbiAgdmFyIHBhcmVudEhhc1RyYW5zZm9ybSA9IHBhcmVudCAmJiBwYXJlbnQudHJhbnNmb3JtO1xuICB2YXIgbmVlZExvY2FsVHJhbnNmb3JtID0gdGhpcy5uZWVkTG9jYWxUcmFuc2Zvcm0oKTtcbiAgdmFyIG0gPSB0aGlzLnRyYW5zZm9ybTtcblxuICBpZiAoIShuZWVkTG9jYWxUcmFuc2Zvcm0gfHwgcGFyZW50SGFzVHJhbnNmb3JtKSkge1xuICAgIG0gJiYgbUlkZW50aXR5KG0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIG0gPSBtIHx8IG1hdHJpeC5jcmVhdGUoKTtcblxuICBpZiAobmVlZExvY2FsVHJhbnNmb3JtKSB7XG4gICAgdGhpcy5nZXRMb2NhbFRyYW5zZm9ybShtKTtcbiAgfSBlbHNlIHtcbiAgICBtSWRlbnRpdHkobSk7XG4gIH0gLy8g5bqU55So54i26IqC54K55Y+Y5o2iXG5cblxuICBpZiAocGFyZW50SGFzVHJhbnNmb3JtKSB7XG4gICAgaWYgKG5lZWRMb2NhbFRyYW5zZm9ybSkge1xuICAgICAgbWF0cml4Lm11bChtLCBwYXJlbnQudHJhbnNmb3JtLCBtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWF0cml4LmNvcHkobSwgcGFyZW50LnRyYW5zZm9ybSk7XG4gICAgfVxuICB9IC8vIOS/neWtmOi/meS4quWPmOaNouefqemYtVxuXG5cbiAgdGhpcy50cmFuc2Zvcm0gPSBtO1xuICB0aGlzLmludlRyYW5zZm9ybSA9IHRoaXMuaW52VHJhbnNmb3JtIHx8IG1hdHJpeC5jcmVhdGUoKTtcbiAgbWF0cml4LmludmVydCh0aGlzLmludlRyYW5zZm9ybSwgbSk7XG59O1xuXG50cmFuc2Zvcm1hYmxlUHJvdG8uZ2V0TG9jYWxUcmFuc2Zvcm0gPSBmdW5jdGlvbiAobSkge1xuICByZXR1cm4gVHJhbnNmb3JtYWJsZS5nZXRMb2NhbFRyYW5zZm9ybSh0aGlzLCBtKTtcbn07XG4vKipcbiAqIOWwhuiHquW3seeahHRyYW5zZm9ybeW6lOeUqOWIsGNvbnRleHTkuIpcbiAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHhcbiAqL1xuXG5cbnRyYW5zZm9ybWFibGVQcm90by5zZXRUcmFuc2Zvcm0gPSBmdW5jdGlvbiAoY3R4KSB7XG4gIHZhciBtID0gdGhpcy50cmFuc2Zvcm07XG4gIHZhciBkcHIgPSBjdHguZHByIHx8IDE7XG5cbiAgaWYgKG0pIHtcbiAgICBjdHguc2V0VHJhbnNmb3JtKGRwciAqIG1bMF0sIGRwciAqIG1bMV0sIGRwciAqIG1bMl0sIGRwciAqIG1bM10sIGRwciAqIG1bNF0sIGRwciAqIG1bNV0pO1xuICB9IGVsc2Uge1xuICAgIGN0eC5zZXRUcmFuc2Zvcm0oZHByLCAwLCAwLCBkcHIsIDAsIDApO1xuICB9XG59O1xuXG50cmFuc2Zvcm1hYmxlUHJvdG8ucmVzdG9yZVRyYW5zZm9ybSA9IGZ1bmN0aW9uIChjdHgpIHtcbiAgdmFyIGRwciA9IGN0eC5kcHIgfHwgMTtcbiAgY3R4LnNldFRyYW5zZm9ybShkcHIsIDAsIDAsIGRwciwgMCwgMCk7XG59O1xuXG52YXIgdG1wVHJhbnNmb3JtID0gW107XG4vKipcbiAqIOWIhuino2B0cmFuc2Zvcm1g55+p6Zi15YiwYHBvc2l0aW9uYCwgYHJvdGF0aW9uYCwgYHNjYWxlYFxuICovXG5cbnRyYW5zZm9ybWFibGVQcm90by5kZWNvbXBvc2VUcmFuc2Zvcm0gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy50cmFuc2Zvcm0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG4gIHZhciBtID0gdGhpcy50cmFuc2Zvcm07XG5cbiAgaWYgKHBhcmVudCAmJiBwYXJlbnQudHJhbnNmb3JtKSB7XG4gICAgLy8gR2V0IGxvY2FsIHRyYW5zZm9ybSBhbmQgZGVjb21wb3NlIHRoZW0gdG8gcG9zaXRpb24sIHNjYWxlLCByb3RhdGlvblxuICAgIG1hdHJpeC5tdWwodG1wVHJhbnNmb3JtLCBwYXJlbnQuaW52VHJhbnNmb3JtLCBtKTtcbiAgICBtID0gdG1wVHJhbnNmb3JtO1xuICB9XG5cbiAgdmFyIHN4ID0gbVswXSAqIG1bMF0gKyBtWzFdICogbVsxXTtcbiAgdmFyIHN5ID0gbVsyXSAqIG1bMl0gKyBtWzNdICogbVszXTtcbiAgdmFyIHBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbjtcbiAgdmFyIHNjYWxlID0gdGhpcy5zY2FsZTtcblxuICBpZiAoaXNOb3RBcm91bmRaZXJvKHN4IC0gMSkpIHtcbiAgICBzeCA9IE1hdGguc3FydChzeCk7XG4gIH1cblxuICBpZiAoaXNOb3RBcm91bmRaZXJvKHN5IC0gMSkpIHtcbiAgICBzeSA9IE1hdGguc3FydChzeSk7XG4gIH1cblxuICBpZiAobVswXSA8IDApIHtcbiAgICBzeCA9IC1zeDtcbiAgfVxuXG4gIGlmIChtWzNdIDwgMCkge1xuICAgIHN5ID0gLXN5O1xuICB9XG5cbiAgcG9zaXRpb25bMF0gPSBtWzRdO1xuICBwb3NpdGlvblsxXSA9IG1bNV07XG4gIHNjYWxlWzBdID0gc3g7XG4gIHNjYWxlWzFdID0gc3k7XG4gIHRoaXMucm90YXRpb24gPSBNYXRoLmF0YW4yKC1tWzFdIC8gc3ksIG1bMF0gLyBzeCk7XG59O1xuLyoqXG4gKiBHZXQgZ2xvYmFsIHNjYWxlXG4gKiBAcmV0dXJuIHtBcnJheS48bnVtYmVyPn1cbiAqL1xuXG5cbnRyYW5zZm9ybWFibGVQcm90by5nZXRHbG9iYWxTY2FsZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG0gPSB0aGlzLnRyYW5zZm9ybTtcblxuICBpZiAoIW0pIHtcbiAgICByZXR1cm4gWzEsIDFdO1xuICB9XG5cbiAgdmFyIHN4ID0gTWF0aC5zcXJ0KG1bMF0gKiBtWzBdICsgbVsxXSAqIG1bMV0pO1xuICB2YXIgc3kgPSBNYXRoLnNxcnQobVsyXSAqIG1bMl0gKyBtWzNdICogbVszXSk7XG5cbiAgaWYgKG1bMF0gPCAwKSB7XG4gICAgc3ggPSAtc3g7XG4gIH1cblxuICBpZiAobVszXSA8IDApIHtcbiAgICBzeSA9IC1zeTtcbiAgfVxuXG4gIHJldHVybiBbc3gsIHN5XTtcbn07XG4vKipcbiAqIOWPmOaNouWdkOagh+S9jee9ruWIsCBzaGFwZSDnmoTlsYDpg6jlnZDmoIfnqbrpl7RcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gKiBAcGFyYW0ge251bWJlcn0geVxuICogQHJldHVybiB7QXJyYXkuPG51bWJlcj59XG4gKi9cblxuXG50cmFuc2Zvcm1hYmxlUHJvdG8udHJhbnNmb3JtQ29vcmRUb0xvY2FsID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgdmFyIHYyID0gW3gsIHldO1xuICB2YXIgaW52VHJhbnNmb3JtID0gdGhpcy5pbnZUcmFuc2Zvcm07XG5cbiAgaWYgKGludlRyYW5zZm9ybSkge1xuICAgIHZlY3Rvci5hcHBseVRyYW5zZm9ybSh2MiwgdjIsIGludlRyYW5zZm9ybSk7XG4gIH1cblxuICByZXR1cm4gdjI7XG59O1xuLyoqXG4gKiDlj5jmjaLlsYDpg6jlnZDmoIfkvY3nva7liLDlhajlsYDlnZDmoIfnqbrpl7RcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gKiBAcGFyYW0ge251bWJlcn0geVxuICogQHJldHVybiB7QXJyYXkuPG51bWJlcj59XG4gKi9cblxuXG50cmFuc2Zvcm1hYmxlUHJvdG8udHJhbnNmb3JtQ29vcmRUb0dsb2JhbCA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gIHZhciB2MiA9IFt4LCB5XTtcbiAgdmFyIHRyYW5zZm9ybSA9IHRoaXMudHJhbnNmb3JtO1xuXG4gIGlmICh0cmFuc2Zvcm0pIHtcbiAgICB2ZWN0b3IuYXBwbHlUcmFuc2Zvcm0odjIsIHYyLCB0cmFuc2Zvcm0pO1xuICB9XG5cbiAgcmV0dXJuIHYyO1xufTtcbi8qKlxuICogQHN0YXRpY1xuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gdGFyZ2V0Lm9yaWdpblxuICogQHBhcmFtIHtudW1iZXJ9IHRhcmdldC5yb3RhdGlvblxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gdGFyZ2V0LnBvc2l0aW9uXG4gKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBbbV1cbiAqL1xuXG5cblRyYW5zZm9ybWFibGUuZ2V0TG9jYWxUcmFuc2Zvcm0gPSBmdW5jdGlvbiAodGFyZ2V0LCBtKSB7XG4gIG0gPSBtIHx8IFtdO1xuICBtSWRlbnRpdHkobSk7XG4gIHZhciBvcmlnaW4gPSB0YXJnZXQub3JpZ2luO1xuICB2YXIgc2NhbGUgPSB0YXJnZXQuc2NhbGUgfHwgWzEsIDFdO1xuICB2YXIgcm90YXRpb24gPSB0YXJnZXQucm90YXRpb24gfHwgMDtcbiAgdmFyIHBvc2l0aW9uID0gdGFyZ2V0LnBvc2l0aW9uIHx8IFswLCAwXTtcblxuICBpZiAob3JpZ2luKSB7XG4gICAgLy8gVHJhbnNsYXRlIHRvIG9yaWdpblxuICAgIG1bNF0gLT0gb3JpZ2luWzBdO1xuICAgIG1bNV0gLT0gb3JpZ2luWzFdO1xuICB9XG5cbiAgbWF0cml4LnNjYWxlKG0sIG0sIHNjYWxlKTtcblxuICBpZiAocm90YXRpb24pIHtcbiAgICBtYXRyaXgucm90YXRlKG0sIG0sIHJvdGF0aW9uKTtcbiAgfVxuXG4gIGlmIChvcmlnaW4pIHtcbiAgICAvLyBUcmFuc2xhdGUgYmFjayBmcm9tIG9yaWdpblxuICAgIG1bNF0gKz0gb3JpZ2luWzBdO1xuICAgIG1bNV0gKz0gb3JpZ2luWzFdO1xuICB9XG5cbiAgbVs0XSArPSBwb3NpdGlvblswXTtcbiAgbVs1XSArPSBwb3NpdGlvblsxXTtcbiAgcmV0dXJuIG07XG59O1xuXG52YXIgX2RlZmF1bHQgPSBUcmFuc2Zvcm1hYmxlO1xubW9kdWxlLmV4cG9ydHMgPSBfZGVmYXVsdDsiLCJ2YXIgTFJVID0gcmVxdWlyZShcIi4uL2NvcmUvTFJVXCIpO1xuXG52YXIga0NTU0NvbG9yVGFibGUgPSB7XG4gICd0cmFuc3BhcmVudCc6IFswLCAwLCAwLCAwXSxcbiAgJ2FsaWNlYmx1ZSc6IFsyNDAsIDI0OCwgMjU1LCAxXSxcbiAgJ2FudGlxdWV3aGl0ZSc6IFsyNTAsIDIzNSwgMjE1LCAxXSxcbiAgJ2FxdWEnOiBbMCwgMjU1LCAyNTUsIDFdLFxuICAnYXF1YW1hcmluZSc6IFsxMjcsIDI1NSwgMjEyLCAxXSxcbiAgJ2F6dXJlJzogWzI0MCwgMjU1LCAyNTUsIDFdLFxuICAnYmVpZ2UnOiBbMjQ1LCAyNDUsIDIyMCwgMV0sXG4gICdiaXNxdWUnOiBbMjU1LCAyMjgsIDE5NiwgMV0sXG4gICdibGFjayc6IFswLCAwLCAwLCAxXSxcbiAgJ2JsYW5jaGVkYWxtb25kJzogWzI1NSwgMjM1LCAyMDUsIDFdLFxuICAnYmx1ZSc6IFswLCAwLCAyNTUsIDFdLFxuICAnYmx1ZXZpb2xldCc6IFsxMzgsIDQzLCAyMjYsIDFdLFxuICAnYnJvd24nOiBbMTY1LCA0MiwgNDIsIDFdLFxuICAnYnVybHl3b29kJzogWzIyMiwgMTg0LCAxMzUsIDFdLFxuICAnY2FkZXRibHVlJzogWzk1LCAxNTgsIDE2MCwgMV0sXG4gICdjaGFydHJldXNlJzogWzEyNywgMjU1LCAwLCAxXSxcbiAgJ2Nob2NvbGF0ZSc6IFsyMTAsIDEwNSwgMzAsIDFdLFxuICAnY29yYWwnOiBbMjU1LCAxMjcsIDgwLCAxXSxcbiAgJ2Nvcm5mbG93ZXJibHVlJzogWzEwMCwgMTQ5LCAyMzcsIDFdLFxuICAnY29ybnNpbGsnOiBbMjU1LCAyNDgsIDIyMCwgMV0sXG4gICdjcmltc29uJzogWzIyMCwgMjAsIDYwLCAxXSxcbiAgJ2N5YW4nOiBbMCwgMjU1LCAyNTUsIDFdLFxuICAnZGFya2JsdWUnOiBbMCwgMCwgMTM5LCAxXSxcbiAgJ2RhcmtjeWFuJzogWzAsIDEzOSwgMTM5LCAxXSxcbiAgJ2Rhcmtnb2xkZW5yb2QnOiBbMTg0LCAxMzQsIDExLCAxXSxcbiAgJ2RhcmtncmF5JzogWzE2OSwgMTY5LCAxNjksIDFdLFxuICAnZGFya2dyZWVuJzogWzAsIDEwMCwgMCwgMV0sXG4gICdkYXJrZ3JleSc6IFsxNjksIDE2OSwgMTY5LCAxXSxcbiAgJ2RhcmtraGFraSc6IFsxODksIDE4MywgMTA3LCAxXSxcbiAgJ2RhcmttYWdlbnRhJzogWzEzOSwgMCwgMTM5LCAxXSxcbiAgJ2RhcmtvbGl2ZWdyZWVuJzogWzg1LCAxMDcsIDQ3LCAxXSxcbiAgJ2RhcmtvcmFuZ2UnOiBbMjU1LCAxNDAsIDAsIDFdLFxuICAnZGFya29yY2hpZCc6IFsxNTMsIDUwLCAyMDQsIDFdLFxuICAnZGFya3JlZCc6IFsxMzksIDAsIDAsIDFdLFxuICAnZGFya3NhbG1vbic6IFsyMzMsIDE1MCwgMTIyLCAxXSxcbiAgJ2RhcmtzZWFncmVlbic6IFsxNDMsIDE4OCwgMTQzLCAxXSxcbiAgJ2RhcmtzbGF0ZWJsdWUnOiBbNzIsIDYxLCAxMzksIDFdLFxuICAnZGFya3NsYXRlZ3JheSc6IFs0NywgNzksIDc5LCAxXSxcbiAgJ2RhcmtzbGF0ZWdyZXknOiBbNDcsIDc5LCA3OSwgMV0sXG4gICdkYXJrdHVycXVvaXNlJzogWzAsIDIwNiwgMjA5LCAxXSxcbiAgJ2Rhcmt2aW9sZXQnOiBbMTQ4LCAwLCAyMTEsIDFdLFxuICAnZGVlcHBpbmsnOiBbMjU1LCAyMCwgMTQ3LCAxXSxcbiAgJ2RlZXBza3libHVlJzogWzAsIDE5MSwgMjU1LCAxXSxcbiAgJ2RpbWdyYXknOiBbMTA1LCAxMDUsIDEwNSwgMV0sXG4gICdkaW1ncmV5JzogWzEwNSwgMTA1LCAxMDUsIDFdLFxuICAnZG9kZ2VyYmx1ZSc6IFszMCwgMTQ0LCAyNTUsIDFdLFxuICAnZmlyZWJyaWNrJzogWzE3OCwgMzQsIDM0LCAxXSxcbiAgJ2Zsb3JhbHdoaXRlJzogWzI1NSwgMjUwLCAyNDAsIDFdLFxuICAnZm9yZXN0Z3JlZW4nOiBbMzQsIDEzOSwgMzQsIDFdLFxuICAnZnVjaHNpYSc6IFsyNTUsIDAsIDI1NSwgMV0sXG4gICdnYWluc2Jvcm8nOiBbMjIwLCAyMjAsIDIyMCwgMV0sXG4gICdnaG9zdHdoaXRlJzogWzI0OCwgMjQ4LCAyNTUsIDFdLFxuICAnZ29sZCc6IFsyNTUsIDIxNSwgMCwgMV0sXG4gICdnb2xkZW5yb2QnOiBbMjE4LCAxNjUsIDMyLCAxXSxcbiAgJ2dyYXknOiBbMTI4LCAxMjgsIDEyOCwgMV0sXG4gICdncmVlbic6IFswLCAxMjgsIDAsIDFdLFxuICAnZ3JlZW55ZWxsb3cnOiBbMTczLCAyNTUsIDQ3LCAxXSxcbiAgJ2dyZXknOiBbMTI4LCAxMjgsIDEyOCwgMV0sXG4gICdob25leWRldyc6IFsyNDAsIDI1NSwgMjQwLCAxXSxcbiAgJ2hvdHBpbmsnOiBbMjU1LCAxMDUsIDE4MCwgMV0sXG4gICdpbmRpYW5yZWQnOiBbMjA1LCA5MiwgOTIsIDFdLFxuICAnaW5kaWdvJzogWzc1LCAwLCAxMzAsIDFdLFxuICAnaXZvcnknOiBbMjU1LCAyNTUsIDI0MCwgMV0sXG4gICdraGFraSc6IFsyNDAsIDIzMCwgMTQwLCAxXSxcbiAgJ2xhdmVuZGVyJzogWzIzMCwgMjMwLCAyNTAsIDFdLFxuICAnbGF2ZW5kZXJibHVzaCc6IFsyNTUsIDI0MCwgMjQ1LCAxXSxcbiAgJ2xhd25ncmVlbic6IFsxMjQsIDI1MiwgMCwgMV0sXG4gICdsZW1vbmNoaWZmb24nOiBbMjU1LCAyNTAsIDIwNSwgMV0sXG4gICdsaWdodGJsdWUnOiBbMTczLCAyMTYsIDIzMCwgMV0sXG4gICdsaWdodGNvcmFsJzogWzI0MCwgMTI4LCAxMjgsIDFdLFxuICAnbGlnaHRjeWFuJzogWzIyNCwgMjU1LCAyNTUsIDFdLFxuICAnbGlnaHRnb2xkZW5yb2R5ZWxsb3cnOiBbMjUwLCAyNTAsIDIxMCwgMV0sXG4gICdsaWdodGdyYXknOiBbMjExLCAyMTEsIDIxMSwgMV0sXG4gICdsaWdodGdyZWVuJzogWzE0NCwgMjM4LCAxNDQsIDFdLFxuICAnbGlnaHRncmV5JzogWzIxMSwgMjExLCAyMTEsIDFdLFxuICAnbGlnaHRwaW5rJzogWzI1NSwgMTgyLCAxOTMsIDFdLFxuICAnbGlnaHRzYWxtb24nOiBbMjU1LCAxNjAsIDEyMiwgMV0sXG4gICdsaWdodHNlYWdyZWVuJzogWzMyLCAxNzgsIDE3MCwgMV0sXG4gICdsaWdodHNreWJsdWUnOiBbMTM1LCAyMDYsIDI1MCwgMV0sXG4gICdsaWdodHNsYXRlZ3JheSc6IFsxMTksIDEzNiwgMTUzLCAxXSxcbiAgJ2xpZ2h0c2xhdGVncmV5JzogWzExOSwgMTM2LCAxNTMsIDFdLFxuICAnbGlnaHRzdGVlbGJsdWUnOiBbMTc2LCAxOTYsIDIyMiwgMV0sXG4gICdsaWdodHllbGxvdyc6IFsyNTUsIDI1NSwgMjI0LCAxXSxcbiAgJ2xpbWUnOiBbMCwgMjU1LCAwLCAxXSxcbiAgJ2xpbWVncmVlbic6IFs1MCwgMjA1LCA1MCwgMV0sXG4gICdsaW5lbic6IFsyNTAsIDI0MCwgMjMwLCAxXSxcbiAgJ21hZ2VudGEnOiBbMjU1LCAwLCAyNTUsIDFdLFxuICAnbWFyb29uJzogWzEyOCwgMCwgMCwgMV0sXG4gICdtZWRpdW1hcXVhbWFyaW5lJzogWzEwMiwgMjA1LCAxNzAsIDFdLFxuICAnbWVkaXVtYmx1ZSc6IFswLCAwLCAyMDUsIDFdLFxuICAnbWVkaXVtb3JjaGlkJzogWzE4NiwgODUsIDIxMSwgMV0sXG4gICdtZWRpdW1wdXJwbGUnOiBbMTQ3LCAxMTIsIDIxOSwgMV0sXG4gICdtZWRpdW1zZWFncmVlbic6IFs2MCwgMTc5LCAxMTMsIDFdLFxuICAnbWVkaXVtc2xhdGVibHVlJzogWzEyMywgMTA0LCAyMzgsIDFdLFxuICAnbWVkaXVtc3ByaW5nZ3JlZW4nOiBbMCwgMjUwLCAxNTQsIDFdLFxuICAnbWVkaXVtdHVycXVvaXNlJzogWzcyLCAyMDksIDIwNCwgMV0sXG4gICdtZWRpdW12aW9sZXRyZWQnOiBbMTk5LCAyMSwgMTMzLCAxXSxcbiAgJ21pZG5pZ2h0Ymx1ZSc6IFsyNSwgMjUsIDExMiwgMV0sXG4gICdtaW50Y3JlYW0nOiBbMjQ1LCAyNTUsIDI1MCwgMV0sXG4gICdtaXN0eXJvc2UnOiBbMjU1LCAyMjgsIDIyNSwgMV0sXG4gICdtb2NjYXNpbic6IFsyNTUsIDIyOCwgMTgxLCAxXSxcbiAgJ25hdmFqb3doaXRlJzogWzI1NSwgMjIyLCAxNzMsIDFdLFxuICAnbmF2eSc6IFswLCAwLCAxMjgsIDFdLFxuICAnb2xkbGFjZSc6IFsyNTMsIDI0NSwgMjMwLCAxXSxcbiAgJ29saXZlJzogWzEyOCwgMTI4LCAwLCAxXSxcbiAgJ29saXZlZHJhYic6IFsxMDcsIDE0MiwgMzUsIDFdLFxuICAnb3JhbmdlJzogWzI1NSwgMTY1LCAwLCAxXSxcbiAgJ29yYW5nZXJlZCc6IFsyNTUsIDY5LCAwLCAxXSxcbiAgJ29yY2hpZCc6IFsyMTgsIDExMiwgMjE0LCAxXSxcbiAgJ3BhbGVnb2xkZW5yb2QnOiBbMjM4LCAyMzIsIDE3MCwgMV0sXG4gICdwYWxlZ3JlZW4nOiBbMTUyLCAyNTEsIDE1MiwgMV0sXG4gICdwYWxldHVycXVvaXNlJzogWzE3NSwgMjM4LCAyMzgsIDFdLFxuICAncGFsZXZpb2xldHJlZCc6IFsyMTksIDExMiwgMTQ3LCAxXSxcbiAgJ3BhcGF5YXdoaXAnOiBbMjU1LCAyMzksIDIxMywgMV0sXG4gICdwZWFjaHB1ZmYnOiBbMjU1LCAyMTgsIDE4NSwgMV0sXG4gICdwZXJ1JzogWzIwNSwgMTMzLCA2MywgMV0sXG4gICdwaW5rJzogWzI1NSwgMTkyLCAyMDMsIDFdLFxuICAncGx1bSc6IFsyMjEsIDE2MCwgMjIxLCAxXSxcbiAgJ3Bvd2RlcmJsdWUnOiBbMTc2LCAyMjQsIDIzMCwgMV0sXG4gICdwdXJwbGUnOiBbMTI4LCAwLCAxMjgsIDFdLFxuICAncmVkJzogWzI1NSwgMCwgMCwgMV0sXG4gICdyb3N5YnJvd24nOiBbMTg4LCAxNDMsIDE0MywgMV0sXG4gICdyb3lhbGJsdWUnOiBbNjUsIDEwNSwgMjI1LCAxXSxcbiAgJ3NhZGRsZWJyb3duJzogWzEzOSwgNjksIDE5LCAxXSxcbiAgJ3NhbG1vbic6IFsyNTAsIDEyOCwgMTE0LCAxXSxcbiAgJ3NhbmR5YnJvd24nOiBbMjQ0LCAxNjQsIDk2LCAxXSxcbiAgJ3NlYWdyZWVuJzogWzQ2LCAxMzksIDg3LCAxXSxcbiAgJ3NlYXNoZWxsJzogWzI1NSwgMjQ1LCAyMzgsIDFdLFxuICAnc2llbm5hJzogWzE2MCwgODIsIDQ1LCAxXSxcbiAgJ3NpbHZlcic6IFsxOTIsIDE5MiwgMTkyLCAxXSxcbiAgJ3NreWJsdWUnOiBbMTM1LCAyMDYsIDIzNSwgMV0sXG4gICdzbGF0ZWJsdWUnOiBbMTA2LCA5MCwgMjA1LCAxXSxcbiAgJ3NsYXRlZ3JheSc6IFsxMTIsIDEyOCwgMTQ0LCAxXSxcbiAgJ3NsYXRlZ3JleSc6IFsxMTIsIDEyOCwgMTQ0LCAxXSxcbiAgJ3Nub3cnOiBbMjU1LCAyNTAsIDI1MCwgMV0sXG4gICdzcHJpbmdncmVlbic6IFswLCAyNTUsIDEyNywgMV0sXG4gICdzdGVlbGJsdWUnOiBbNzAsIDEzMCwgMTgwLCAxXSxcbiAgJ3Rhbic6IFsyMTAsIDE4MCwgMTQwLCAxXSxcbiAgJ3RlYWwnOiBbMCwgMTI4LCAxMjgsIDFdLFxuICAndGhpc3RsZSc6IFsyMTYsIDE5MSwgMjE2LCAxXSxcbiAgJ3RvbWF0byc6IFsyNTUsIDk5LCA3MSwgMV0sXG4gICd0dXJxdW9pc2UnOiBbNjQsIDIyNCwgMjA4LCAxXSxcbiAgJ3Zpb2xldCc6IFsyMzgsIDEzMCwgMjM4LCAxXSxcbiAgJ3doZWF0JzogWzI0NSwgMjIyLCAxNzksIDFdLFxuICAnd2hpdGUnOiBbMjU1LCAyNTUsIDI1NSwgMV0sXG4gICd3aGl0ZXNtb2tlJzogWzI0NSwgMjQ1LCAyNDUsIDFdLFxuICAneWVsbG93JzogWzI1NSwgMjU1LCAwLCAxXSxcbiAgJ3llbGxvd2dyZWVuJzogWzE1NCwgMjA1LCA1MCwgMV1cbn07XG5cbmZ1bmN0aW9uIGNsYW1wQ3NzQnl0ZShpKSB7XG4gIC8vIENsYW1wIHRvIGludGVnZXIgMCAuLiAyNTUuXG4gIGkgPSBNYXRoLnJvdW5kKGkpOyAvLyBTZWVtcyB0byBiZSB3aGF0IENocm9tZSBkb2VzICh2cyB0cnVuY2F0aW9uKS5cblxuICByZXR1cm4gaSA8IDAgPyAwIDogaSA+IDI1NSA/IDI1NSA6IGk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wQ3NzQW5nbGUoaSkge1xuICAvLyBDbGFtcCB0byBpbnRlZ2VyIDAgLi4gMzYwLlxuICBpID0gTWF0aC5yb3VuZChpKTsgLy8gU2VlbXMgdG8gYmUgd2hhdCBDaHJvbWUgZG9lcyAodnMgdHJ1bmNhdGlvbikuXG5cbiAgcmV0dXJuIGkgPCAwID8gMCA6IGkgPiAzNjAgPyAzNjAgOiBpO1xufVxuXG5mdW5jdGlvbiBjbGFtcENzc0Zsb2F0KGYpIHtcbiAgLy8gQ2xhbXAgdG8gZmxvYXQgMC4wIC4uIDEuMC5cbiAgcmV0dXJuIGYgPCAwID8gMCA6IGYgPiAxID8gMSA6IGY7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ3NzSW50KHN0cikge1xuICAvLyBpbnQgb3IgcGVyY2VudGFnZS5cbiAgaWYgKHN0ci5sZW5ndGggJiYgc3RyLmNoYXJBdChzdHIubGVuZ3RoIC0gMSkgPT09ICclJykge1xuICAgIHJldHVybiBjbGFtcENzc0J5dGUocGFyc2VGbG9hdChzdHIpIC8gMTAwICogMjU1KTtcbiAgfVxuXG4gIHJldHVybiBjbGFtcENzc0J5dGUocGFyc2VJbnQoc3RyLCAxMCkpO1xufVxuXG5mdW5jdGlvbiBwYXJzZUNzc0Zsb2F0KHN0cikge1xuICAvLyBmbG9hdCBvciBwZXJjZW50YWdlLlxuICBpZiAoc3RyLmxlbmd0aCAmJiBzdHIuY2hhckF0KHN0ci5sZW5ndGggLSAxKSA9PT0gJyUnKSB7XG4gICAgcmV0dXJuIGNsYW1wQ3NzRmxvYXQocGFyc2VGbG9hdChzdHIpIC8gMTAwKTtcbiAgfVxuXG4gIHJldHVybiBjbGFtcENzc0Zsb2F0KHBhcnNlRmxvYXQoc3RyKSk7XG59XG5cbmZ1bmN0aW9uIGNzc0h1ZVRvUmdiKG0xLCBtMiwgaCkge1xuICBpZiAoaCA8IDApIHtcbiAgICBoICs9IDE7XG4gIH0gZWxzZSBpZiAoaCA+IDEpIHtcbiAgICBoIC09IDE7XG4gIH1cblxuICBpZiAoaCAqIDYgPCAxKSB7XG4gICAgcmV0dXJuIG0xICsgKG0yIC0gbTEpICogaCAqIDY7XG4gIH1cblxuICBpZiAoaCAqIDIgPCAxKSB7XG4gICAgcmV0dXJuIG0yO1xuICB9XG5cbiAgaWYgKGggKiAzIDwgMikge1xuICAgIHJldHVybiBtMSArIChtMiAtIG0xKSAqICgyIC8gMyAtIGgpICogNjtcbiAgfVxuXG4gIHJldHVybiBtMTtcbn1cblxuZnVuY3Rpb24gbGVycE51bWJlcihhLCBiLCBwKSB7XG4gIHJldHVybiBhICsgKGIgLSBhKSAqIHA7XG59XG5cbmZ1bmN0aW9uIHNldFJnYmEob3V0LCByLCBnLCBiLCBhKSB7XG4gIG91dFswXSA9IHI7XG4gIG91dFsxXSA9IGc7XG4gIG91dFsyXSA9IGI7XG4gIG91dFszXSA9IGE7XG4gIHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIGNvcHlSZ2JhKG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICByZXR1cm4gb3V0O1xufVxuXG52YXIgY29sb3JDYWNoZSA9IG5ldyBMUlUoMjApO1xudmFyIGxhc3RSZW1vdmVkQXJyID0gbnVsbDtcblxuZnVuY3Rpb24gcHV0VG9DYWNoZShjb2xvclN0ciwgcmdiYUFycikge1xuICAvLyBSZXVzZSByZW1vdmVkIGFycmF5XG4gIGlmIChsYXN0UmVtb3ZlZEFycikge1xuICAgIGNvcHlSZ2JhKGxhc3RSZW1vdmVkQXJyLCByZ2JhQXJyKTtcbiAgfVxuXG4gIGxhc3RSZW1vdmVkQXJyID0gY29sb3JDYWNoZS5wdXQoY29sb3JTdHIsIGxhc3RSZW1vdmVkQXJyIHx8IHJnYmFBcnIuc2xpY2UoKSk7XG59XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvclN0clxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gb3V0XG4gKiBAcmV0dXJuIHtBcnJheS48bnVtYmVyPn1cbiAqIEBtZW1iZXJPZiBtb2R1bGU6enJlbmRlci91dGlsL2NvbG9yXG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZShjb2xvclN0ciwgcmdiYUFycikge1xuICBpZiAoIWNvbG9yU3RyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmdiYUFyciA9IHJnYmFBcnIgfHwgW107XG4gIHZhciBjYWNoZWQgPSBjb2xvckNhY2hlLmdldChjb2xvclN0cik7XG5cbiAgaWYgKGNhY2hlZCkge1xuICAgIHJldHVybiBjb3B5UmdiYShyZ2JhQXJyLCBjYWNoZWQpO1xuICB9IC8vIGNvbG9yU3RyIG1heSBiZSBub3Qgc3RyaW5nXG5cblxuICBjb2xvclN0ciA9IGNvbG9yU3RyICsgJyc7IC8vIFJlbW92ZSBhbGwgd2hpdGVzcGFjZSwgbm90IGNvbXBsaWFudCwgYnV0IHNob3VsZCBqdXN0IGJlIG1vcmUgYWNjZXB0aW5nLlxuXG4gIHZhciBzdHIgPSBjb2xvclN0ci5yZXBsYWNlKC8gL2csICcnKS50b0xvd2VyQ2FzZSgpOyAvLyBDb2xvciBrZXl3b3JkcyAoYW5kIHRyYW5zcGFyZW50KSBsb29rdXAuXG5cbiAgaWYgKHN0ciBpbiBrQ1NTQ29sb3JUYWJsZSkge1xuICAgIGNvcHlSZ2JhKHJnYmFBcnIsIGtDU1NDb2xvclRhYmxlW3N0cl0pO1xuICAgIHB1dFRvQ2FjaGUoY29sb3JTdHIsIHJnYmFBcnIpO1xuICAgIHJldHVybiByZ2JhQXJyO1xuICB9IC8vICNhYmMgYW5kICNhYmMxMjMgc3ludGF4LlxuXG5cbiAgaWYgKHN0ci5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgIGlmIChzdHIubGVuZ3RoID09PSA0KSB7XG4gICAgICB2YXIgaXYgPSBwYXJzZUludChzdHIuc3Vic3RyKDEpLCAxNik7IC8vIFRPRE8oZGVhbm0pOiBTdHJpY3RlciBwYXJzaW5nLlxuXG4gICAgICBpZiAoIShpdiA+PSAwICYmIGl2IDw9IDB4ZmZmKSkge1xuICAgICAgICBzZXRSZ2JhKHJnYmFBcnIsIDAsIDAsIDAsIDEpO1xuICAgICAgICByZXR1cm47IC8vIENvdmVycyBOYU4uXG4gICAgICB9XG5cbiAgICAgIHNldFJnYmEocmdiYUFyciwgKGl2ICYgMHhmMDApID4+IDQgfCAoaXYgJiAweGYwMCkgPj4gOCwgaXYgJiAweGYwIHwgKGl2ICYgMHhmMCkgPj4gNCwgaXYgJiAweGYgfCAoaXYgJiAweGYpIDw8IDQsIDEpO1xuICAgICAgcHV0VG9DYWNoZShjb2xvclN0ciwgcmdiYUFycik7XG4gICAgICByZXR1cm4gcmdiYUFycjtcbiAgICB9IGVsc2UgaWYgKHN0ci5sZW5ndGggPT09IDcpIHtcbiAgICAgIHZhciBpdiA9IHBhcnNlSW50KHN0ci5zdWJzdHIoMSksIDE2KTsgLy8gVE9ETyhkZWFubSk6IFN0cmljdGVyIHBhcnNpbmcuXG5cbiAgICAgIGlmICghKGl2ID49IDAgJiYgaXYgPD0gMHhmZmZmZmYpKSB7XG4gICAgICAgIHNldFJnYmEocmdiYUFyciwgMCwgMCwgMCwgMSk7XG4gICAgICAgIHJldHVybjsgLy8gQ292ZXJzIE5hTi5cbiAgICAgIH1cblxuICAgICAgc2V0UmdiYShyZ2JhQXJyLCAoaXYgJiAweGZmMDAwMCkgPj4gMTYsIChpdiAmIDB4ZmYwMCkgPj4gOCwgaXYgJiAweGZmLCAxKTtcbiAgICAgIHB1dFRvQ2FjaGUoY29sb3JTdHIsIHJnYmFBcnIpO1xuICAgICAgcmV0dXJuIHJnYmFBcnI7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG9wID0gc3RyLmluZGV4T2YoJygnKSxcbiAgICAgIGVwID0gc3RyLmluZGV4T2YoJyknKTtcblxuICBpZiAob3AgIT09IC0xICYmIGVwICsgMSA9PT0gc3RyLmxlbmd0aCkge1xuICAgIHZhciBmbmFtZSA9IHN0ci5zdWJzdHIoMCwgb3ApO1xuICAgIHZhciBwYXJhbXMgPSBzdHIuc3Vic3RyKG9wICsgMSwgZXAgLSAob3AgKyAxKSkuc3BsaXQoJywnKTtcbiAgICB2YXIgYWxwaGEgPSAxOyAvLyBUbyBhbGxvdyBjYXNlIGZhbGx0aHJvdWdoLlxuXG4gICAgc3dpdGNoIChmbmFtZSkge1xuICAgICAgY2FzZSAncmdiYSc6XG4gICAgICAgIGlmIChwYXJhbXMubGVuZ3RoICE9PSA0KSB7XG4gICAgICAgICAgc2V0UmdiYShyZ2JhQXJyLCAwLCAwLCAwLCAxKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhbHBoYSA9IHBhcnNlQ3NzRmxvYXQocGFyYW1zLnBvcCgpKTtcbiAgICAgIC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgICAgLy8gRmFsbCB0aHJvdWdoLlxuXG4gICAgICBjYXNlICdyZ2InOlxuICAgICAgICBpZiAocGFyYW1zLmxlbmd0aCAhPT0gMykge1xuICAgICAgICAgIHNldFJnYmEocmdiYUFyciwgMCwgMCwgMCwgMSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0UmdiYShyZ2JhQXJyLCBwYXJzZUNzc0ludChwYXJhbXNbMF0pLCBwYXJzZUNzc0ludChwYXJhbXNbMV0pLCBwYXJzZUNzc0ludChwYXJhbXNbMl0pLCBhbHBoYSk7XG4gICAgICAgIHB1dFRvQ2FjaGUoY29sb3JTdHIsIHJnYmFBcnIpO1xuICAgICAgICByZXR1cm4gcmdiYUFycjtcblxuICAgICAgY2FzZSAnaHNsYSc6XG4gICAgICAgIGlmIChwYXJhbXMubGVuZ3RoICE9PSA0KSB7XG4gICAgICAgICAgc2V0UmdiYShyZ2JhQXJyLCAwLCAwLCAwLCAxKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBwYXJhbXNbM10gPSBwYXJzZUNzc0Zsb2F0KHBhcmFtc1szXSk7XG4gICAgICAgIGhzbGEycmdiYShwYXJhbXMsIHJnYmFBcnIpO1xuICAgICAgICBwdXRUb0NhY2hlKGNvbG9yU3RyLCByZ2JhQXJyKTtcbiAgICAgICAgcmV0dXJuIHJnYmFBcnI7XG5cbiAgICAgIGNhc2UgJ2hzbCc6XG4gICAgICAgIGlmIChwYXJhbXMubGVuZ3RoICE9PSAzKSB7XG4gICAgICAgICAgc2V0UmdiYShyZ2JhQXJyLCAwLCAwLCAwLCAxKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBoc2xhMnJnYmEocGFyYW1zLCByZ2JhQXJyKTtcbiAgICAgICAgcHV0VG9DYWNoZShjb2xvclN0ciwgcmdiYUFycik7XG4gICAgICAgIHJldHVybiByZ2JhQXJyO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgc2V0UmdiYShyZ2JhQXJyLCAwLCAwLCAwLCAxKTtcbiAgcmV0dXJuO1xufVxuLyoqXG4gKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBoc2xhXG4gKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSByZ2JhXG4gKiBAcmV0dXJuIHtBcnJheS48bnVtYmVyPn0gcmdiYVxuICovXG5cblxuZnVuY3Rpb24gaHNsYTJyZ2JhKGhzbGEsIHJnYmEpIHtcbiAgdmFyIGggPSAocGFyc2VGbG9hdChoc2xhWzBdKSAlIDM2MCArIDM2MCkgJSAzNjAgLyAzNjA7IC8vIDAgLi4gMVxuICAvLyBOT1RFKGRlYW5tKTogQWNjb3JkaW5nIHRvIHRoZSBDU1Mgc3BlYyBzL2wgc2hvdWxkIG9ubHkgYmVcbiAgLy8gcGVyY2VudGFnZXMsIGJ1dCB3ZSBkb24ndCBib3RoZXIgYW5kIGxldCBmbG9hdCBvciBwZXJjZW50YWdlLlxuXG4gIHZhciBzID0gcGFyc2VDc3NGbG9hdChoc2xhWzFdKTtcbiAgdmFyIGwgPSBwYXJzZUNzc0Zsb2F0KGhzbGFbMl0pO1xuICB2YXIgbTIgPSBsIDw9IDAuNSA/IGwgKiAocyArIDEpIDogbCArIHMgLSBsICogcztcbiAgdmFyIG0xID0gbCAqIDIgLSBtMjtcbiAgcmdiYSA9IHJnYmEgfHwgW107XG4gIHNldFJnYmEocmdiYSwgY2xhbXBDc3NCeXRlKGNzc0h1ZVRvUmdiKG0xLCBtMiwgaCArIDEgLyAzKSAqIDI1NSksIGNsYW1wQ3NzQnl0ZShjc3NIdWVUb1JnYihtMSwgbTIsIGgpICogMjU1KSwgY2xhbXBDc3NCeXRlKGNzc0h1ZVRvUmdiKG0xLCBtMiwgaCAtIDEgLyAzKSAqIDI1NSksIDEpO1xuXG4gIGlmIChoc2xhLmxlbmd0aCA9PT0gNCkge1xuICAgIHJnYmFbM10gPSBoc2xhWzNdO1xuICB9XG5cbiAgcmV0dXJuIHJnYmE7XG59XG4vKipcbiAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IHJnYmFcbiAqIEByZXR1cm4ge0FycmF5LjxudW1iZXI+fSBoc2xhXG4gKi9cblxuXG5mdW5jdGlvbiByZ2JhMmhzbGEocmdiYSkge1xuICBpZiAoIXJnYmEpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gUkdCIGZyb20gMCB0byAyNTVcblxuXG4gIHZhciBSID0gcmdiYVswXSAvIDI1NTtcbiAgdmFyIEcgPSByZ2JhWzFdIC8gMjU1O1xuICB2YXIgQiA9IHJnYmFbMl0gLyAyNTU7XG4gIHZhciB2TWluID0gTWF0aC5taW4oUiwgRywgQik7IC8vIE1pbi4gdmFsdWUgb2YgUkdCXG5cbiAgdmFyIHZNYXggPSBNYXRoLm1heChSLCBHLCBCKTsgLy8gTWF4LiB2YWx1ZSBvZiBSR0JcblxuICB2YXIgZGVsdGEgPSB2TWF4IC0gdk1pbjsgLy8gRGVsdGEgUkdCIHZhbHVlXG5cbiAgdmFyIEwgPSAodk1heCArIHZNaW4pIC8gMjtcbiAgdmFyIEg7XG4gIHZhciBTOyAvLyBIU0wgcmVzdWx0cyBmcm9tIDAgdG8gMVxuXG4gIGlmIChkZWx0YSA9PT0gMCkge1xuICAgIEggPSAwO1xuICAgIFMgPSAwO1xuICB9IGVsc2Uge1xuICAgIGlmIChMIDwgMC41KSB7XG4gICAgICBTID0gZGVsdGEgLyAodk1heCArIHZNaW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBTID0gZGVsdGEgLyAoMiAtIHZNYXggLSB2TWluKTtcbiAgICB9XG5cbiAgICB2YXIgZGVsdGFSID0gKCh2TWF4IC0gUikgLyA2ICsgZGVsdGEgLyAyKSAvIGRlbHRhO1xuICAgIHZhciBkZWx0YUcgPSAoKHZNYXggLSBHKSAvIDYgKyBkZWx0YSAvIDIpIC8gZGVsdGE7XG4gICAgdmFyIGRlbHRhQiA9ICgodk1heCAtIEIpIC8gNiArIGRlbHRhIC8gMikgLyBkZWx0YTtcblxuICAgIGlmIChSID09PSB2TWF4KSB7XG4gICAgICBIID0gZGVsdGFCIC0gZGVsdGFHO1xuICAgIH0gZWxzZSBpZiAoRyA9PT0gdk1heCkge1xuICAgICAgSCA9IDEgLyAzICsgZGVsdGFSIC0gZGVsdGFCO1xuICAgIH0gZWxzZSBpZiAoQiA9PT0gdk1heCkge1xuICAgICAgSCA9IDIgLyAzICsgZGVsdGFHIC0gZGVsdGFSO1xuICAgIH1cblxuICAgIGlmIChIIDwgMCkge1xuICAgICAgSCArPSAxO1xuICAgIH1cblxuICAgIGlmIChIID4gMSkge1xuICAgICAgSCAtPSAxO1xuICAgIH1cbiAgfVxuXG4gIHZhciBoc2xhID0gW0ggKiAzNjAsIFMsIExdO1xuXG4gIGlmIChyZ2JhWzNdICE9IG51bGwpIHtcbiAgICBoc2xhLnB1c2gocmdiYVszXSk7XG4gIH1cblxuICByZXR1cm4gaHNsYTtcbn1cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yXG4gKiBAcGFyYW0ge251bWJlcn0gbGV2ZWxcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBtZW1iZXJPZiBtb2R1bGU6enJlbmRlci91dGlsL2NvbG9yXG4gKi9cblxuXG5mdW5jdGlvbiBsaWZ0KGNvbG9yLCBsZXZlbCkge1xuICB2YXIgY29sb3JBcnIgPSBwYXJzZShjb2xvcik7XG5cbiAgaWYgKGNvbG9yQXJyKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgIGlmIChsZXZlbCA8IDApIHtcbiAgICAgICAgY29sb3JBcnJbaV0gPSBjb2xvckFycltpXSAqICgxIC0gbGV2ZWwpIHwgMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbG9yQXJyW2ldID0gKDI1NSAtIGNvbG9yQXJyW2ldKSAqIGxldmVsICsgY29sb3JBcnJbaV0gfCAwO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29sb3JBcnJbaV0gPiAyNTUpIHtcbiAgICAgICAgY29sb3JBcnJbaV0gPSAyNTU7XG4gICAgICB9IGVsc2UgaWYgKGNvbG9yW2ldIDwgMCkge1xuICAgICAgICBjb2xvckFycltpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cmluZ2lmeShjb2xvckFyciwgY29sb3JBcnIubGVuZ3RoID09PSA0ID8gJ3JnYmEnIDogJ3JnYicpO1xuICB9XG59XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvclxuICogQHJldHVybiB7c3RyaW5nfVxuICogQG1lbWJlck9mIG1vZHVsZTp6cmVuZGVyL3V0aWwvY29sb3JcbiAqL1xuXG5cbmZ1bmN0aW9uIHRvSGV4KGNvbG9yKSB7XG4gIHZhciBjb2xvckFyciA9IHBhcnNlKGNvbG9yKTtcblxuICBpZiAoY29sb3JBcnIpIHtcbiAgICByZXR1cm4gKCgxIDw8IDI0KSArIChjb2xvckFyclswXSA8PCAxNikgKyAoY29sb3JBcnJbMV0gPDwgOCkgKyArY29sb3JBcnJbMl0pLnRvU3RyaW5nKDE2KS5zbGljZSgxKTtcbiAgfVxufVxuLyoqXG4gKiBNYXAgdmFsdWUgdG8gY29sb3IuIEZhc3RlciB0aGFuIGxlcnAgbWV0aG9kcyBiZWNhdXNlIGNvbG9yIGlzIHJlcHJlc2VudGVkIGJ5IHJnYmEgYXJyYXkuXG4gKiBAcGFyYW0ge251bWJlcn0gbm9ybWFsaXplZFZhbHVlIEEgZmxvYXQgYmV0d2VlbiAwIGFuZCAxLlxuICogQHBhcmFtIHtBcnJheS48QXJyYXkuPG51bWJlcj4+fSBjb2xvcnMgTGlzdCBvZiByZ2JhIGNvbG9yIGFycmF5XG4gKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBbb3V0XSBNYXBwZWQgZ2JhIGNvbG9yIGFycmF5XG4gKiBAcmV0dXJuIHtBcnJheS48bnVtYmVyPn0gd2lsbCBiZSBudWxsL3VuZGVmaW5lZCBpZiBpbnB1dCBpbGxlZ2FsLlxuICovXG5cblxuZnVuY3Rpb24gZmFzdExlcnAobm9ybWFsaXplZFZhbHVlLCBjb2xvcnMsIG91dCkge1xuICBpZiAoIShjb2xvcnMgJiYgY29sb3JzLmxlbmd0aCkgfHwgIShub3JtYWxpemVkVmFsdWUgPj0gMCAmJiBub3JtYWxpemVkVmFsdWUgPD0gMSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBvdXQgPSBvdXQgfHwgW107XG4gIHZhciB2YWx1ZSA9IG5vcm1hbGl6ZWRWYWx1ZSAqIChjb2xvcnMubGVuZ3RoIC0gMSk7XG4gIHZhciBsZWZ0SW5kZXggPSBNYXRoLmZsb29yKHZhbHVlKTtcbiAgdmFyIHJpZ2h0SW5kZXggPSBNYXRoLmNlaWwodmFsdWUpO1xuICB2YXIgbGVmdENvbG9yID0gY29sb3JzW2xlZnRJbmRleF07XG4gIHZhciByaWdodENvbG9yID0gY29sb3JzW3JpZ2h0SW5kZXhdO1xuICB2YXIgZHYgPSB2YWx1ZSAtIGxlZnRJbmRleDtcbiAgb3V0WzBdID0gY2xhbXBDc3NCeXRlKGxlcnBOdW1iZXIobGVmdENvbG9yWzBdLCByaWdodENvbG9yWzBdLCBkdikpO1xuICBvdXRbMV0gPSBjbGFtcENzc0J5dGUobGVycE51bWJlcihsZWZ0Q29sb3JbMV0sIHJpZ2h0Q29sb3JbMV0sIGR2KSk7XG4gIG91dFsyXSA9IGNsYW1wQ3NzQnl0ZShsZXJwTnVtYmVyKGxlZnRDb2xvclsyXSwgcmlnaHRDb2xvclsyXSwgZHYpKTtcbiAgb3V0WzNdID0gY2xhbXBDc3NGbG9hdChsZXJwTnVtYmVyKGxlZnRDb2xvclszXSwgcmlnaHRDb2xvclszXSwgZHYpKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqL1xuXG5cbnZhciBmYXN0TWFwVG9Db2xvciA9IGZhc3RMZXJwO1xuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gbm9ybWFsaXplZFZhbHVlIEEgZmxvYXQgYmV0d2VlbiAwIGFuZCAxLlxuICogQHBhcmFtIHtBcnJheS48c3RyaW5nPn0gY29sb3JzIENvbG9yIGxpc3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBmdWxsT3V0cHV0IERlZmF1bHQgZmFsc2UuXG4gKiBAcmV0dXJuIHsoc3RyaW5nfE9iamVjdCl9IFJlc3VsdCBjb2xvci4gSWYgZnVsbE91dHB1dCxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtjb2xvcjogLi4uLCBsZWZ0SW5kZXg6IC4uLiwgcmlnaHRJbmRleDogLi4uLCB2YWx1ZTogLi4ufSxcbiAqIEBtZW1iZXJPZiBtb2R1bGU6enJlbmRlci91dGlsL2NvbG9yXG4gKi9cblxuZnVuY3Rpb24gbGVycChub3JtYWxpemVkVmFsdWUsIGNvbG9ycywgZnVsbE91dHB1dCkge1xuICBpZiAoIShjb2xvcnMgJiYgY29sb3JzLmxlbmd0aCkgfHwgIShub3JtYWxpemVkVmFsdWUgPj0gMCAmJiBub3JtYWxpemVkVmFsdWUgPD0gMSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdmFsdWUgPSBub3JtYWxpemVkVmFsdWUgKiAoY29sb3JzLmxlbmd0aCAtIDEpO1xuICB2YXIgbGVmdEluZGV4ID0gTWF0aC5mbG9vcih2YWx1ZSk7XG4gIHZhciByaWdodEluZGV4ID0gTWF0aC5jZWlsKHZhbHVlKTtcbiAgdmFyIGxlZnRDb2xvciA9IHBhcnNlKGNvbG9yc1tsZWZ0SW5kZXhdKTtcbiAgdmFyIHJpZ2h0Q29sb3IgPSBwYXJzZShjb2xvcnNbcmlnaHRJbmRleF0pO1xuICB2YXIgZHYgPSB2YWx1ZSAtIGxlZnRJbmRleDtcbiAgdmFyIGNvbG9yID0gc3RyaW5naWZ5KFtjbGFtcENzc0J5dGUobGVycE51bWJlcihsZWZ0Q29sb3JbMF0sIHJpZ2h0Q29sb3JbMF0sIGR2KSksIGNsYW1wQ3NzQnl0ZShsZXJwTnVtYmVyKGxlZnRDb2xvclsxXSwgcmlnaHRDb2xvclsxXSwgZHYpKSwgY2xhbXBDc3NCeXRlKGxlcnBOdW1iZXIobGVmdENvbG9yWzJdLCByaWdodENvbG9yWzJdLCBkdikpLCBjbGFtcENzc0Zsb2F0KGxlcnBOdW1iZXIobGVmdENvbG9yWzNdLCByaWdodENvbG9yWzNdLCBkdikpXSwgJ3JnYmEnKTtcbiAgcmV0dXJuIGZ1bGxPdXRwdXQgPyB7XG4gICAgY29sb3I6IGNvbG9yLFxuICAgIGxlZnRJbmRleDogbGVmdEluZGV4LFxuICAgIHJpZ2h0SW5kZXg6IHJpZ2h0SW5kZXgsXG4gICAgdmFsdWU6IHZhbHVlXG4gIH0gOiBjb2xvcjtcbn1cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqL1xuXG5cbnZhciBtYXBUb0NvbG9yID0gbGVycDtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yXG4gKiBAcGFyYW0ge251bWJlcj19IGggMCB+IDM2MCwgaWdub3JlIHdoZW4gbnVsbC5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gcyAwIH4gMSwgaWdub3JlIHdoZW4gbnVsbC5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gbCAwIH4gMSwgaWdub3JlIHdoZW4gbnVsbC5cbiAqIEByZXR1cm4ge3N0cmluZ30gQ29sb3Igc3RyaW5nIGluIHJnYmEgZm9ybWF0LlxuICogQG1lbWJlck9mIG1vZHVsZTp6cmVuZGVyL3V0aWwvY29sb3JcbiAqL1xuXG5mdW5jdGlvbiBtb2RpZnlIU0woY29sb3IsIGgsIHMsIGwpIHtcbiAgY29sb3IgPSBwYXJzZShjb2xvcik7XG5cbiAgaWYgKGNvbG9yKSB7XG4gICAgY29sb3IgPSByZ2JhMmhzbGEoY29sb3IpO1xuICAgIGggIT0gbnVsbCAmJiAoY29sb3JbMF0gPSBjbGFtcENzc0FuZ2xlKGgpKTtcbiAgICBzICE9IG51bGwgJiYgKGNvbG9yWzFdID0gcGFyc2VDc3NGbG9hdChzKSk7XG4gICAgbCAhPSBudWxsICYmIChjb2xvclsyXSA9IHBhcnNlQ3NzRmxvYXQobCkpO1xuICAgIHJldHVybiBzdHJpbmdpZnkoaHNsYTJyZ2JhKGNvbG9yKSwgJ3JnYmEnKTtcbiAgfVxufVxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3JcbiAqIEBwYXJhbSB7bnVtYmVyPX0gYWxwaGEgMCB+IDFcbiAqIEByZXR1cm4ge3N0cmluZ30gQ29sb3Igc3RyaW5nIGluIHJnYmEgZm9ybWF0LlxuICogQG1lbWJlck9mIG1vZHVsZTp6cmVuZGVyL3V0aWwvY29sb3JcbiAqL1xuXG5cbmZ1bmN0aW9uIG1vZGlmeUFscGhhKGNvbG9yLCBhbHBoYSkge1xuICBjb2xvciA9IHBhcnNlKGNvbG9yKTtcblxuICBpZiAoY29sb3IgJiYgYWxwaGEgIT0gbnVsbCkge1xuICAgIGNvbG9yWzNdID0gY2xhbXBDc3NGbG9hdChhbHBoYSk7XG4gICAgcmV0dXJuIHN0cmluZ2lmeShjb2xvciwgJ3JnYmEnKTtcbiAgfVxufVxuLyoqXG4gKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBhcnJDb2xvciBsaWtlIFsxMiwzMyw0NCwwLjRdXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAncmdiYScsICdoc3ZhJywgLi4uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFJlc3VsdCBjb2xvci4gKElmIGlucHV0IGlsbGVnYWwsIHJldHVybiB1bmRlZmluZWQpLlxuICovXG5cblxuZnVuY3Rpb24gc3RyaW5naWZ5KGFyckNvbG9yLCB0eXBlKSB7XG4gIGlmICghYXJyQ29sb3IgfHwgIWFyckNvbG9yLmxlbmd0aCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjb2xvclN0ciA9IGFyckNvbG9yWzBdICsgJywnICsgYXJyQ29sb3JbMV0gKyAnLCcgKyBhcnJDb2xvclsyXTtcblxuICBpZiAodHlwZSA9PT0gJ3JnYmEnIHx8IHR5cGUgPT09ICdoc3ZhJyB8fCB0eXBlID09PSAnaHNsYScpIHtcbiAgICBjb2xvclN0ciArPSAnLCcgKyBhcnJDb2xvclszXTtcbiAgfVxuXG4gIHJldHVybiB0eXBlICsgJygnICsgY29sb3JTdHIgKyAnKSc7XG59XG5cbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmV4cG9ydHMubGlmdCA9IGxpZnQ7XG5leHBvcnRzLnRvSGV4ID0gdG9IZXg7XG5leHBvcnRzLmZhc3RMZXJwID0gZmFzdExlcnA7XG5leHBvcnRzLmZhc3RNYXBUb0NvbG9yID0gZmFzdE1hcFRvQ29sb3I7XG5leHBvcnRzLmxlcnAgPSBsZXJwO1xuZXhwb3J0cy5tYXBUb0NvbG9yID0gbWFwVG9Db2xvcjtcbmV4cG9ydHMubW9kaWZ5SFNMID0gbW9kaWZ5SFNMO1xuZXhwb3J0cy5tb2RpZnlBbHBoYSA9IG1vZGlmeUFscGhhO1xuZXhwb3J0cy5zdHJpbmdpZnkgPSBzdHJpbmdpZnk7IiwidmFyIFBhdGggPSByZXF1aXJlKFwiLi4vZ3JhcGhpYy9QYXRoXCIpO1xuXG52YXIgUGF0aFByb3h5ID0gcmVxdWlyZShcIi4uL2NvcmUvUGF0aFByb3h5XCIpO1xuXG52YXIgdHJhbnNmb3JtUGF0aCA9IHJlcXVpcmUoXCIuL3RyYW5zZm9ybVBhdGhcIik7XG5cbi8vIGNvbW1hbmQgY2hhcnNcbnZhciBjYyA9IFsnbScsICdNJywgJ2wnLCAnTCcsICd2JywgJ1YnLCAnaCcsICdIJywgJ3onLCAnWicsICdjJywgJ0MnLCAncScsICdRJywgJ3QnLCAnVCcsICdzJywgJ1MnLCAnYScsICdBJ107XG52YXIgbWF0aFNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgbWF0aFNpbiA9IE1hdGguc2luO1xudmFyIG1hdGhDb3MgPSBNYXRoLmNvcztcbnZhciBQSSA9IE1hdGguUEk7XG5cbnZhciB2TWFnID0gZnVuY3Rpb24gKHYpIHtcbiAgcmV0dXJuIE1hdGguc3FydCh2WzBdICogdlswXSArIHZbMV0gKiB2WzFdKTtcbn07XG5cbnZhciB2UmF0aW8gPSBmdW5jdGlvbiAodSwgdikge1xuICByZXR1cm4gKHVbMF0gKiB2WzBdICsgdVsxXSAqIHZbMV0pIC8gKHZNYWcodSkgKiB2TWFnKHYpKTtcbn07XG5cbnZhciB2QW5nbGUgPSBmdW5jdGlvbiAodSwgdikge1xuICByZXR1cm4gKHVbMF0gKiB2WzFdIDwgdVsxXSAqIHZbMF0gPyAtMSA6IDEpICogTWF0aC5hY29zKHZSYXRpbyh1LCB2KSk7XG59O1xuXG5mdW5jdGlvbiBwcm9jZXNzQXJjKHgxLCB5MSwgeDIsIHkyLCBmYSwgZnMsIHJ4LCByeSwgcHNpRGVnLCBjbWQsIHBhdGgpIHtcbiAgdmFyIHBzaSA9IHBzaURlZyAqIChQSSAvIDE4MC4wKTtcbiAgdmFyIHhwID0gbWF0aENvcyhwc2kpICogKHgxIC0geDIpIC8gMi4wICsgbWF0aFNpbihwc2kpICogKHkxIC0geTIpIC8gMi4wO1xuICB2YXIgeXAgPSAtMSAqIG1hdGhTaW4ocHNpKSAqICh4MSAtIHgyKSAvIDIuMCArIG1hdGhDb3MocHNpKSAqICh5MSAtIHkyKSAvIDIuMDtcbiAgdmFyIGxhbWJkYSA9IHhwICogeHAgLyAocnggKiByeCkgKyB5cCAqIHlwIC8gKHJ5ICogcnkpO1xuXG4gIGlmIChsYW1iZGEgPiAxKSB7XG4gICAgcnggKj0gbWF0aFNxcnQobGFtYmRhKTtcbiAgICByeSAqPSBtYXRoU3FydChsYW1iZGEpO1xuICB9XG5cbiAgdmFyIGYgPSAoZmEgPT09IGZzID8gLTEgOiAxKSAqIG1hdGhTcXJ0KChyeCAqIHJ4ICogKHJ5ICogcnkpIC0gcnggKiByeCAqICh5cCAqIHlwKSAtIHJ5ICogcnkgKiAoeHAgKiB4cCkpIC8gKHJ4ICogcnggKiAoeXAgKiB5cCkgKyByeSAqIHJ5ICogKHhwICogeHApKSkgfHwgMDtcbiAgdmFyIGN4cCA9IGYgKiByeCAqIHlwIC8gcnk7XG4gIHZhciBjeXAgPSBmICogLXJ5ICogeHAgLyByeDtcbiAgdmFyIGN4ID0gKHgxICsgeDIpIC8gMi4wICsgbWF0aENvcyhwc2kpICogY3hwIC0gbWF0aFNpbihwc2kpICogY3lwO1xuICB2YXIgY3kgPSAoeTEgKyB5MikgLyAyLjAgKyBtYXRoU2luKHBzaSkgKiBjeHAgKyBtYXRoQ29zKHBzaSkgKiBjeXA7XG4gIHZhciB0aGV0YSA9IHZBbmdsZShbMSwgMF0sIFsoeHAgLSBjeHApIC8gcngsICh5cCAtIGN5cCkgLyByeV0pO1xuICB2YXIgdSA9IFsoeHAgLSBjeHApIC8gcngsICh5cCAtIGN5cCkgLyByeV07XG4gIHZhciB2ID0gWygtMSAqIHhwIC0gY3hwKSAvIHJ4LCAoLTEgKiB5cCAtIGN5cCkgLyByeV07XG4gIHZhciBkVGhldGEgPSB2QW5nbGUodSwgdik7XG5cbiAgaWYgKHZSYXRpbyh1LCB2KSA8PSAtMSkge1xuICAgIGRUaGV0YSA9IFBJO1xuICB9XG5cbiAgaWYgKHZSYXRpbyh1LCB2KSA+PSAxKSB7XG4gICAgZFRoZXRhID0gMDtcbiAgfVxuXG4gIGlmIChmcyA9PT0gMCAmJiBkVGhldGEgPiAwKSB7XG4gICAgZFRoZXRhID0gZFRoZXRhIC0gMiAqIFBJO1xuICB9XG5cbiAgaWYgKGZzID09PSAxICYmIGRUaGV0YSA8IDApIHtcbiAgICBkVGhldGEgPSBkVGhldGEgKyAyICogUEk7XG4gIH1cblxuICBwYXRoLmFkZERhdGEoY21kLCBjeCwgY3ksIHJ4LCByeSwgdGhldGEsIGRUaGV0YSwgcHNpLCBmcyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhdGhQcm94eUZyb21TdHJpbmcoZGF0YSkge1xuICBpZiAoIWRhdGEpIHtcbiAgICByZXR1cm4gW107XG4gIH0gLy8gY29tbWFuZCBzdHJpbmdcblxuXG4gIHZhciBjcyA9IGRhdGEucmVwbGFjZSgvLS9nLCAnIC0nKS5yZXBsYWNlKC8gIC9nLCAnICcpLnJlcGxhY2UoLyAvZywgJywnKS5yZXBsYWNlKC8sLC9nLCAnLCcpO1xuICB2YXIgbjsgLy8gY3JlYXRlIHBpcGVzIHNvIHRoYXQgd2UgY2FuIHNwbGl0IHRoZSBkYXRhXG5cbiAgZm9yIChuID0gMDsgbiA8IGNjLmxlbmd0aDsgbisrKSB7XG4gICAgY3MgPSBjcy5yZXBsYWNlKG5ldyBSZWdFeHAoY2Nbbl0sICdnJyksICd8JyArIGNjW25dKTtcbiAgfSAvLyBjcmVhdGUgYXJyYXlcblxuXG4gIHZhciBhcnIgPSBjcy5zcGxpdCgnfCcpOyAvLyBpbml0IGNvbnRleHQgcG9pbnRcblxuICB2YXIgY3B4ID0gMDtcbiAgdmFyIGNweSA9IDA7XG4gIHZhciBwYXRoID0gbmV3IFBhdGhQcm94eSgpO1xuICB2YXIgQ01EID0gUGF0aFByb3h5LkNNRDtcbiAgdmFyIHByZXZDbWQ7XG5cbiAgZm9yIChuID0gMTsgbiA8IGFyci5sZW5ndGg7IG4rKykge1xuICAgIHZhciBzdHIgPSBhcnJbbl07XG4gICAgdmFyIGMgPSBzdHIuY2hhckF0KDApO1xuICAgIHZhciBvZmYgPSAwO1xuICAgIHZhciBwID0gc3RyLnNsaWNlKDEpLnJlcGxhY2UoL2UsLS9nLCAnZS0nKS5zcGxpdCgnLCcpO1xuICAgIHZhciBjbWQ7XG5cbiAgICBpZiAocC5sZW5ndGggPiAwICYmIHBbMF0gPT09ICcnKSB7XG4gICAgICBwLnNoaWZ0KCk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwW2ldID0gcGFyc2VGbG9hdChwW2ldKTtcbiAgICB9XG5cbiAgICB3aGlsZSAob2ZmIDwgcC5sZW5ndGggJiYgIWlzTmFOKHBbb2ZmXSkpIHtcbiAgICAgIGlmIChpc05hTihwWzBdKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgdmFyIGN0bFB0eDtcbiAgICAgIHZhciBjdGxQdHk7XG4gICAgICB2YXIgcng7XG4gICAgICB2YXIgcnk7XG4gICAgICB2YXIgcHNpO1xuICAgICAgdmFyIGZhO1xuICAgICAgdmFyIGZzO1xuICAgICAgdmFyIHgxID0gY3B4O1xuICAgICAgdmFyIHkxID0gY3B5OyAvLyBjb252ZXJ0IGwsIEgsIGgsIFYsIGFuZCB2IHRvIExcblxuICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgIGNhc2UgJ2wnOlxuICAgICAgICAgIGNweCArPSBwW29mZisrXTtcbiAgICAgICAgICBjcHkgKz0gcFtvZmYrK107XG4gICAgICAgICAgY21kID0gQ01ELkw7XG4gICAgICAgICAgcGF0aC5hZGREYXRhKGNtZCwgY3B4LCBjcHkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0wnOlxuICAgICAgICAgIGNweCA9IHBbb2ZmKytdO1xuICAgICAgICAgIGNweSA9IHBbb2ZmKytdO1xuICAgICAgICAgIGNtZCA9IENNRC5MO1xuICAgICAgICAgIHBhdGguYWRkRGF0YShjbWQsIGNweCwgY3B5KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICBjcHggKz0gcFtvZmYrK107XG4gICAgICAgICAgY3B5ICs9IHBbb2ZmKytdO1xuICAgICAgICAgIGNtZCA9IENNRC5NO1xuICAgICAgICAgIHBhdGguYWRkRGF0YShjbWQsIGNweCwgY3B5KTtcbiAgICAgICAgICBjID0gJ2wnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgIGNweCA9IHBbb2ZmKytdO1xuICAgICAgICAgIGNweSA9IHBbb2ZmKytdO1xuICAgICAgICAgIGNtZCA9IENNRC5NO1xuICAgICAgICAgIHBhdGguYWRkRGF0YShjbWQsIGNweCwgY3B5KTtcbiAgICAgICAgICBjID0gJ0wnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgIGNweCArPSBwW29mZisrXTtcbiAgICAgICAgICBjbWQgPSBDTUQuTDtcbiAgICAgICAgICBwYXRoLmFkZERhdGEoY21kLCBjcHgsIGNweSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnSCc6XG4gICAgICAgICAgY3B4ID0gcFtvZmYrK107XG4gICAgICAgICAgY21kID0gQ01ELkw7XG4gICAgICAgICAgcGF0aC5hZGREYXRhKGNtZCwgY3B4LCBjcHkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3YnOlxuICAgICAgICAgIGNweSArPSBwW29mZisrXTtcbiAgICAgICAgICBjbWQgPSBDTUQuTDtcbiAgICAgICAgICBwYXRoLmFkZERhdGEoY21kLCBjcHgsIGNweSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnVic6XG4gICAgICAgICAgY3B5ID0gcFtvZmYrK107XG4gICAgICAgICAgY21kID0gQ01ELkw7XG4gICAgICAgICAgcGF0aC5hZGREYXRhKGNtZCwgY3B4LCBjcHkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgIGNtZCA9IENNRC5DO1xuICAgICAgICAgIHBhdGguYWRkRGF0YShjbWQsIHBbb2ZmKytdLCBwW29mZisrXSwgcFtvZmYrK10sIHBbb2ZmKytdLCBwW29mZisrXSwgcFtvZmYrK10pO1xuICAgICAgICAgIGNweCA9IHBbb2ZmIC0gMl07XG4gICAgICAgICAgY3B5ID0gcFtvZmYgLSAxXTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdjJzpcbiAgICAgICAgICBjbWQgPSBDTUQuQztcbiAgICAgICAgICBwYXRoLmFkZERhdGEoY21kLCBwW29mZisrXSArIGNweCwgcFtvZmYrK10gKyBjcHksIHBbb2ZmKytdICsgY3B4LCBwW29mZisrXSArIGNweSwgcFtvZmYrK10gKyBjcHgsIHBbb2ZmKytdICsgY3B5KTtcbiAgICAgICAgICBjcHggKz0gcFtvZmYgLSAyXTtcbiAgICAgICAgICBjcHkgKz0gcFtvZmYgLSAxXTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdTJzpcbiAgICAgICAgICBjdGxQdHggPSBjcHg7XG4gICAgICAgICAgY3RsUHR5ID0gY3B5O1xuICAgICAgICAgIHZhciBsZW4gPSBwYXRoLmxlbigpO1xuICAgICAgICAgIHZhciBwYXRoRGF0YSA9IHBhdGguZGF0YTtcblxuICAgICAgICAgIGlmIChwcmV2Q21kID09PSBDTUQuQykge1xuICAgICAgICAgICAgY3RsUHR4ICs9IGNweCAtIHBhdGhEYXRhW2xlbiAtIDRdO1xuICAgICAgICAgICAgY3RsUHR5ICs9IGNweSAtIHBhdGhEYXRhW2xlbiAtIDNdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNtZCA9IENNRC5DO1xuICAgICAgICAgIHgxID0gcFtvZmYrK107XG4gICAgICAgICAgeTEgPSBwW29mZisrXTtcbiAgICAgICAgICBjcHggPSBwW29mZisrXTtcbiAgICAgICAgICBjcHkgPSBwW29mZisrXTtcbiAgICAgICAgICBwYXRoLmFkZERhdGEoY21kLCBjdGxQdHgsIGN0bFB0eSwgeDEsIHkxLCBjcHgsIGNweSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgY3RsUHR4ID0gY3B4O1xuICAgICAgICAgIGN0bFB0eSA9IGNweTtcbiAgICAgICAgICB2YXIgbGVuID0gcGF0aC5sZW4oKTtcbiAgICAgICAgICB2YXIgcGF0aERhdGEgPSBwYXRoLmRhdGE7XG5cbiAgICAgICAgICBpZiAocHJldkNtZCA9PT0gQ01ELkMpIHtcbiAgICAgICAgICAgIGN0bFB0eCArPSBjcHggLSBwYXRoRGF0YVtsZW4gLSA0XTtcbiAgICAgICAgICAgIGN0bFB0eSArPSBjcHkgLSBwYXRoRGF0YVtsZW4gLSAzXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjbWQgPSBDTUQuQztcbiAgICAgICAgICB4MSA9IGNweCArIHBbb2ZmKytdO1xuICAgICAgICAgIHkxID0gY3B5ICsgcFtvZmYrK107XG4gICAgICAgICAgY3B4ICs9IHBbb2ZmKytdO1xuICAgICAgICAgIGNweSArPSBwW29mZisrXTtcbiAgICAgICAgICBwYXRoLmFkZERhdGEoY21kLCBjdGxQdHgsIGN0bFB0eSwgeDEsIHkxLCBjcHgsIGNweSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgeDEgPSBwW29mZisrXTtcbiAgICAgICAgICB5MSA9IHBbb2ZmKytdO1xuICAgICAgICAgIGNweCA9IHBbb2ZmKytdO1xuICAgICAgICAgIGNweSA9IHBbb2ZmKytdO1xuICAgICAgICAgIGNtZCA9IENNRC5RO1xuICAgICAgICAgIHBhdGguYWRkRGF0YShjbWQsIHgxLCB5MSwgY3B4LCBjcHkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3EnOlxuICAgICAgICAgIHgxID0gcFtvZmYrK10gKyBjcHg7XG4gICAgICAgICAgeTEgPSBwW29mZisrXSArIGNweTtcbiAgICAgICAgICBjcHggKz0gcFtvZmYrK107XG4gICAgICAgICAgY3B5ICs9IHBbb2ZmKytdO1xuICAgICAgICAgIGNtZCA9IENNRC5RO1xuICAgICAgICAgIHBhdGguYWRkRGF0YShjbWQsIHgxLCB5MSwgY3B4LCBjcHkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ1QnOlxuICAgICAgICAgIGN0bFB0eCA9IGNweDtcbiAgICAgICAgICBjdGxQdHkgPSBjcHk7XG4gICAgICAgICAgdmFyIGxlbiA9IHBhdGgubGVuKCk7XG4gICAgICAgICAgdmFyIHBhdGhEYXRhID0gcGF0aC5kYXRhO1xuXG4gICAgICAgICAgaWYgKHByZXZDbWQgPT09IENNRC5RKSB7XG4gICAgICAgICAgICBjdGxQdHggKz0gY3B4IC0gcGF0aERhdGFbbGVuIC0gNF07XG4gICAgICAgICAgICBjdGxQdHkgKz0gY3B5IC0gcGF0aERhdGFbbGVuIC0gM107XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3B4ID0gcFtvZmYrK107XG4gICAgICAgICAgY3B5ID0gcFtvZmYrK107XG4gICAgICAgICAgY21kID0gQ01ELlE7XG4gICAgICAgICAgcGF0aC5hZGREYXRhKGNtZCwgY3RsUHR4LCBjdGxQdHksIGNweCwgY3B5KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICd0JzpcbiAgICAgICAgICBjdGxQdHggPSBjcHg7XG4gICAgICAgICAgY3RsUHR5ID0gY3B5O1xuICAgICAgICAgIHZhciBsZW4gPSBwYXRoLmxlbigpO1xuICAgICAgICAgIHZhciBwYXRoRGF0YSA9IHBhdGguZGF0YTtcblxuICAgICAgICAgIGlmIChwcmV2Q21kID09PSBDTUQuUSkge1xuICAgICAgICAgICAgY3RsUHR4ICs9IGNweCAtIHBhdGhEYXRhW2xlbiAtIDRdO1xuICAgICAgICAgICAgY3RsUHR5ICs9IGNweSAtIHBhdGhEYXRhW2xlbiAtIDNdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNweCArPSBwW29mZisrXTtcbiAgICAgICAgICBjcHkgKz0gcFtvZmYrK107XG4gICAgICAgICAgY21kID0gQ01ELlE7XG4gICAgICAgICAgcGF0aC5hZGREYXRhKGNtZCwgY3RsUHR4LCBjdGxQdHksIGNweCwgY3B5KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdBJzpcbiAgICAgICAgICByeCA9IHBbb2ZmKytdO1xuICAgICAgICAgIHJ5ID0gcFtvZmYrK107XG4gICAgICAgICAgcHNpID0gcFtvZmYrK107XG4gICAgICAgICAgZmEgPSBwW29mZisrXTtcbiAgICAgICAgICBmcyA9IHBbb2ZmKytdO1xuICAgICAgICAgIHgxID0gY3B4LCB5MSA9IGNweTtcbiAgICAgICAgICBjcHggPSBwW29mZisrXTtcbiAgICAgICAgICBjcHkgPSBwW29mZisrXTtcbiAgICAgICAgICBjbWQgPSBDTUQuQTtcbiAgICAgICAgICBwcm9jZXNzQXJjKHgxLCB5MSwgY3B4LCBjcHksIGZhLCBmcywgcngsIHJ5LCBwc2ksIGNtZCwgcGF0aCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnYSc6XG4gICAgICAgICAgcnggPSBwW29mZisrXTtcbiAgICAgICAgICByeSA9IHBbb2ZmKytdO1xuICAgICAgICAgIHBzaSA9IHBbb2ZmKytdO1xuICAgICAgICAgIGZhID0gcFtvZmYrK107XG4gICAgICAgICAgZnMgPSBwW29mZisrXTtcbiAgICAgICAgICB4MSA9IGNweCwgeTEgPSBjcHk7XG4gICAgICAgICAgY3B4ICs9IHBbb2ZmKytdO1xuICAgICAgICAgIGNweSArPSBwW29mZisrXTtcbiAgICAgICAgICBjbWQgPSBDTUQuQTtcbiAgICAgICAgICBwcm9jZXNzQXJjKHgxLCB5MSwgY3B4LCBjcHksIGZhLCBmcywgcngsIHJ5LCBwc2ksIGNtZCwgcGF0aCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGMgPT09ICd6JyB8fCBjID09PSAnWicpIHtcbiAgICAgIGNtZCA9IENNRC5aO1xuICAgICAgcGF0aC5hZGREYXRhKGNtZCk7XG4gICAgfVxuXG4gICAgcHJldkNtZCA9IGNtZDtcbiAgfVxuXG4gIHBhdGgudG9TdGF0aWMoKTtcbiAgcmV0dXJuIHBhdGg7XG59IC8vIFRPRE8gT3B0aW1pemUgZG91YmxlIG1lbW9yeSBjb3N0IHByb2JsZW1cblxuXG5mdW5jdGlvbiBjcmVhdGVQYXRoT3B0aW9ucyhzdHIsIG9wdHMpIHtcbiAgdmFyIHBhdGhQcm94eSA9IGNyZWF0ZVBhdGhQcm94eUZyb21TdHJpbmcoc3RyKTtcbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgb3B0cy5idWlsZFBhdGggPSBmdW5jdGlvbiAocGF0aCkge1xuICAgIGlmIChwYXRoLnNldERhdGEpIHtcbiAgICAgIHBhdGguc2V0RGF0YShwYXRoUHJveHkuZGF0YSk7IC8vIFN2ZyBhbmQgdm1sIHJlbmRlcmVyIGRvbid0IGhhdmUgY29udGV4dFxuXG4gICAgICB2YXIgY3R4ID0gcGF0aC5nZXRDb250ZXh0KCk7XG5cbiAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgcGF0aC5yZWJ1aWxkUGF0aChjdHgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY3R4ID0gcGF0aDtcbiAgICAgIHBhdGhQcm94eS5yZWJ1aWxkUGF0aChjdHgpO1xuICAgIH1cbiAgfTtcblxuICBvcHRzLmFwcGx5VHJhbnNmb3JtID0gZnVuY3Rpb24gKG0pIHtcbiAgICB0cmFuc2Zvcm1QYXRoKHBhdGhQcm94eSwgbSk7XG4gICAgdGhpcy5kaXJ0eSh0cnVlKTtcbiAgfTtcblxuICByZXR1cm4gb3B0cztcbn1cbi8qKlxuICogQ3JlYXRlIGEgUGF0aCBvYmplY3QgZnJvbSBwYXRoIHN0cmluZyBkYXRhXG4gKiBodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcvcGF0aHMuaHRtbCNQYXRoRGF0YVxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRzIE90aGVyIG9wdGlvbnNcbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUZyb21TdHJpbmcoc3RyLCBvcHRzKSB7XG4gIHJldHVybiBuZXcgUGF0aChjcmVhdGVQYXRoT3B0aW9ucyhzdHIsIG9wdHMpKTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgUGF0aCBjbGFzcyBmcm9tIHBhdGggc3RyaW5nIGRhdGFcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdHMgT3RoZXIgb3B0aW9uc1xuICovXG5cblxuZnVuY3Rpb24gZXh0ZW5kRnJvbVN0cmluZyhzdHIsIG9wdHMpIHtcbiAgcmV0dXJuIFBhdGguZXh0ZW5kKGNyZWF0ZVBhdGhPcHRpb25zKHN0ciwgb3B0cykpO1xufVxuLyoqXG4gKiBNZXJnZSBtdWx0aXBsZSBwYXRoc1xuICovXG4vLyBUT0RPIEFwcGx5IHRyYW5zZm9ybVxuLy8gVE9ETyBzdHJva2UgZGFzaFxuLy8gVE9ETyBPcHRpbWl6ZSBkb3VibGUgbWVtb3J5IGNvc3QgcHJvYmxlbVxuXG5cbmZ1bmN0aW9uIG1lcmdlUGF0aChwYXRoRWxzLCBvcHRzKSB7XG4gIHZhciBwYXRoTGlzdCA9IFtdO1xuICB2YXIgbGVuID0gcGF0aEVscy5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBwYXRoRWwgPSBwYXRoRWxzW2ldO1xuXG4gICAgaWYgKCFwYXRoRWwucGF0aCkge1xuICAgICAgcGF0aEVsLmNyZWF0ZVBhdGhQcm94eSgpO1xuICAgIH1cblxuICAgIGlmIChwYXRoRWwuX19kaXJ0eVBhdGgpIHtcbiAgICAgIHBhdGhFbC5idWlsZFBhdGgocGF0aEVsLnBhdGgsIHBhdGhFbC5zaGFwZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgcGF0aExpc3QucHVzaChwYXRoRWwucGF0aCk7XG4gIH1cblxuICB2YXIgcGF0aEJ1bmRsZSA9IG5ldyBQYXRoKG9wdHMpOyAvLyBOZWVkIHBhdGggcHJveHkuXG5cbiAgcGF0aEJ1bmRsZS5jcmVhdGVQYXRoUHJveHkoKTtcblxuICBwYXRoQnVuZGxlLmJ1aWxkUGF0aCA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgcGF0aC5hcHBlbmRQYXRoKHBhdGhMaXN0KTsgLy8gU3ZnIGFuZCB2bWwgcmVuZGVyZXIgZG9uJ3QgaGF2ZSBjb250ZXh0XG5cbiAgICB2YXIgY3R4ID0gcGF0aC5nZXRDb250ZXh0KCk7XG5cbiAgICBpZiAoY3R4KSB7XG4gICAgICBwYXRoLnJlYnVpbGRQYXRoKGN0eCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBwYXRoQnVuZGxlO1xufVxuXG5leHBvcnRzLmNyZWF0ZUZyb21TdHJpbmcgPSBjcmVhdGVGcm9tU3RyaW5nO1xuZXhwb3J0cy5leHRlbmRGcm9tU3RyaW5nID0gZXh0ZW5kRnJvbVN0cmluZztcbmV4cG9ydHMubWVyZ2VQYXRoID0gbWVyZ2VQYXRoOyIsInZhciBQYXRoUHJveHkgPSByZXF1aXJlKFwiLi4vY29yZS9QYXRoUHJveHlcIik7XG5cbnZhciBfdmVjdG9yID0gcmVxdWlyZShcIi4uL2NvcmUvdmVjdG9yXCIpO1xuXG52YXIgdjJBcHBseVRyYW5zZm9ybSA9IF92ZWN0b3IuYXBwbHlUcmFuc2Zvcm07XG52YXIgQ01EID0gUGF0aFByb3h5LkNNRDtcbnZhciBwb2ludHMgPSBbW10sIFtdLCBbXV07XG52YXIgbWF0aFNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgbWF0aEF0YW4yID0gTWF0aC5hdGFuMjtcblxuZnVuY3Rpb24gX2RlZmF1bHQocGF0aCwgbSkge1xuICB2YXIgZGF0YSA9IHBhdGguZGF0YTtcbiAgdmFyIGNtZDtcbiAgdmFyIG5Qb2ludDtcbiAgdmFyIGk7XG4gIHZhciBqO1xuICB2YXIgaztcbiAgdmFyIHA7XG4gIHZhciBNID0gQ01ELk07XG4gIHZhciBDID0gQ01ELkM7XG4gIHZhciBMID0gQ01ELkw7XG4gIHZhciBSID0gQ01ELlI7XG4gIHZhciBBID0gQ01ELkE7XG4gIHZhciBRID0gQ01ELlE7XG5cbiAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBkYXRhLmxlbmd0aDspIHtcbiAgICBjbWQgPSBkYXRhW2krK107XG4gICAgaiA9IGk7XG4gICAgblBvaW50ID0gMDtcblxuICAgIHN3aXRjaCAoY21kKSB7XG4gICAgICBjYXNlIE06XG4gICAgICAgIG5Qb2ludCA9IDE7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEw6XG4gICAgICAgIG5Qb2ludCA9IDE7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEM6XG4gICAgICAgIG5Qb2ludCA9IDM7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFE6XG4gICAgICAgIG5Qb2ludCA9IDI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEE6XG4gICAgICAgIHZhciB4ID0gbVs0XTtcbiAgICAgICAgdmFyIHkgPSBtWzVdO1xuICAgICAgICB2YXIgc3ggPSBtYXRoU3FydChtWzBdICogbVswXSArIG1bMV0gKiBtWzFdKTtcbiAgICAgICAgdmFyIHN5ID0gbWF0aFNxcnQobVsyXSAqIG1bMl0gKyBtWzNdICogbVszXSk7XG4gICAgICAgIHZhciBhbmdsZSA9IG1hdGhBdGFuMigtbVsxXSAvIHN5LCBtWzBdIC8gc3gpOyAvLyBjeFxuXG4gICAgICAgIGRhdGFbaV0gKj0gc3g7XG4gICAgICAgIGRhdGFbaSsrXSArPSB4OyAvLyBjeVxuXG4gICAgICAgIGRhdGFbaV0gKj0gc3k7XG4gICAgICAgIGRhdGFbaSsrXSArPSB5OyAvLyBTY2FsZSByeCBhbmQgcnlcbiAgICAgICAgLy8gRklYTUUgQXNzdW1lIHBzaSBpcyAwIGhlcmVcblxuICAgICAgICBkYXRhW2krK10gKj0gc3g7XG4gICAgICAgIGRhdGFbaSsrXSAqPSBzeTsgLy8gU3RhcnQgYW5nbGVcblxuICAgICAgICBkYXRhW2krK10gKz0gYW5nbGU7IC8vIGVuZCBhbmdsZVxuXG4gICAgICAgIGRhdGFbaSsrXSArPSBhbmdsZTsgLy8gRklYTUUgcHNpXG5cbiAgICAgICAgaSArPSAyO1xuICAgICAgICBqID0gaTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgUjpcbiAgICAgICAgLy8geDAsIHkwXG4gICAgICAgIHBbMF0gPSBkYXRhW2krK107XG4gICAgICAgIHBbMV0gPSBkYXRhW2krK107XG4gICAgICAgIHYyQXBwbHlUcmFuc2Zvcm0ocCwgcCwgbSk7XG4gICAgICAgIGRhdGFbaisrXSA9IHBbMF07XG4gICAgICAgIGRhdGFbaisrXSA9IHBbMV07IC8vIHgxLCB5MVxuXG4gICAgICAgIHBbMF0gKz0gZGF0YVtpKytdO1xuICAgICAgICBwWzFdICs9IGRhdGFbaSsrXTtcbiAgICAgICAgdjJBcHBseVRyYW5zZm9ybShwLCBwLCBtKTtcbiAgICAgICAgZGF0YVtqKytdID0gcFswXTtcbiAgICAgICAgZGF0YVtqKytdID0gcFsxXTtcbiAgICB9XG5cbiAgICBmb3IgKGsgPSAwOyBrIDwgblBvaW50OyBrKyspIHtcbiAgICAgIHZhciBwID0gcG9pbnRzW2tdO1xuICAgICAgcFswXSA9IGRhdGFbaSsrXTtcbiAgICAgIHBbMV0gPSBkYXRhW2krK107XG4gICAgICB2MkFwcGx5VHJhbnNmb3JtKHAsIHAsIG0pOyAvLyBXcml0ZSBiYWNrXG5cbiAgICAgIGRhdGFbaisrXSA9IHBbMF07XG4gICAgICBkYXRhW2orK10gPSBwWzFdO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZhdWx0OyIsInZhciBndWlkID0gcmVxdWlyZShcIi4vY29yZS9ndWlkXCIpO1xuXG52YXIgZW52ID0gcmVxdWlyZShcIi4vY29yZS9lbnZcIik7XG5cbnZhciB6clV0aWwgPSByZXF1aXJlKFwiLi9jb3JlL3V0aWxcIik7XG5cbnZhciBIYW5kbGVyID0gcmVxdWlyZShcIi4vSGFuZGxlclwiKTtcblxudmFyIFN0b3JhZ2UgPSByZXF1aXJlKFwiLi9TdG9yYWdlXCIpO1xuXG52YXIgUGFpbnRlciA9IHJlcXVpcmUoXCIuL1BhaW50ZXJcIik7XG5cbnZhciBBbmltYXRpb24gPSByZXF1aXJlKFwiLi9hbmltYXRpb24vQW5pbWF0aW9uXCIpO1xuXG52YXIgSGFuZGxlclByb3h5ID0gcmVxdWlyZShcIi4vZG9tL0hhbmRsZXJQcm94eVwiKTtcblxuLyohXG4qIFpSZW5kZXIsIGEgaGlnaCBwZXJmb3JtYW5jZSAyZCBkcmF3aW5nIGxpYnJhcnkuXG4qXG4qIENvcHlyaWdodCAoYykgMjAxMywgQmFpZHUgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBMSUNFTlNFXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9lY29tZmUvenJlbmRlci9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dFxuKi9cbnZhciB1c2VWTUwgPSAhZW52LmNhbnZhc1N1cHBvcnRlZDtcbnZhciBwYWludGVyQ3RvcnMgPSB7XG4gIGNhbnZhczogUGFpbnRlclxufTtcbnZhciBpbnN0YW5jZXMgPSB7fTsgLy8gWlJlbmRlcuWunuS+i21hcOe0ouW8lVxuXG4vKipcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cblxudmFyIHZlcnNpb24gPSAnNC4wLjQnO1xuLyoqXG4gKiBJbml0aWFsaXppbmcgYSB6cmVuZGVyIGluc3RhbmNlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBkb21cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMucmVuZGVyZXI9J2NhbnZhcyddICdjYW52YXMnIG9yICdzdmcnXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMuZGV2aWNlUGl4ZWxSYXRpb11cbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gW29wdHMud2lkdGhdIENhbiBiZSAnYXV0bycgKHRoZSBzYW1lIGFzIG51bGwvdW5kZWZpbmVkKVxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBbb3B0cy5oZWlnaHRdIENhbiBiZSAnYXV0bycgKHRoZSBzYW1lIGFzIG51bGwvdW5kZWZpbmVkKVxuICogQHJldHVybiB7bW9kdWxlOnpyZW5kZXIvWlJlbmRlcn1cbiAqL1xuXG5mdW5jdGlvbiBpbml0KGRvbSwgb3B0cykge1xuICB2YXIgenIgPSBuZXcgWlJlbmRlcihndWlkKCksIGRvbSwgb3B0cyk7XG4gIGluc3RhbmNlc1t6ci5pZF0gPSB6cjtcbiAgcmV0dXJuIHpyO1xufVxuLyoqXG4gKiBEaXNwb3NlIHpyZW5kZXIgaW5zdGFuY2VcbiAqIEBwYXJhbSB7bW9kdWxlOnpyZW5kZXIvWlJlbmRlcn0genJcbiAqL1xuXG5cbmZ1bmN0aW9uIGRpc3Bvc2UoenIpIHtcbiAgaWYgKHpyKSB7XG4gICAgenIuZGlzcG9zZSgpO1xuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGtleSBpbiBpbnN0YW5jZXMpIHtcbiAgICAgIGlmIChpbnN0YW5jZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBpbnN0YW5jZXNba2V5XS5kaXNwb3NlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW5zdGFuY2VzID0ge307XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbi8qKlxuICogR2V0IHpyZW5kZXIgaW5zdGFuY2UgYnkgaWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCB6cmVuZGVyIGluc3RhbmNlIGlkXG4gKiBAcmV0dXJuIHttb2R1bGU6enJlbmRlci9aUmVuZGVyfVxuICovXG5cblxuZnVuY3Rpb24gZ2V0SW5zdGFuY2UoaWQpIHtcbiAgcmV0dXJuIGluc3RhbmNlc1tpZF07XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUGFpbnRlcihuYW1lLCBDdG9yKSB7XG4gIHBhaW50ZXJDdG9yc1tuYW1lXSA9IEN0b3I7XG59XG5cbmZ1bmN0aW9uIGRlbEluc3RhbmNlKGlkKSB7XG4gIGRlbGV0ZSBpbnN0YW5jZXNbaWRdO1xufVxuLyoqXG4gKiBAbW9kdWxlIHpyZW5kZXIvWlJlbmRlclxuICovXG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYWxpYXMgbW9kdWxlOnpyZW5kZXIvWlJlbmRlclxuICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBkb21cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMucmVuZGVyZXI9J2NhbnZhcyddICdjYW52YXMnIG9yICdzdmcnXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMuZGV2aWNlUGl4ZWxSYXRpb11cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy53aWR0aF0gQ2FuIGJlICdhdXRvJyAodGhlIHNhbWUgYXMgbnVsbC91bmRlZmluZWQpXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMuaGVpZ2h0XSBDYW4gYmUgJ2F1dG8nICh0aGUgc2FtZSBhcyBudWxsL3VuZGVmaW5lZClcbiAqL1xuXG5cbnZhciBaUmVuZGVyID0gZnVuY3Rpb24gKGlkLCBkb20sIG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIC8qKlxuICAgKiBAdHlwZSB7SFRNTERvbUVsZW1lbnR9XG4gICAqL1xuXG4gIHRoaXMuZG9tID0gZG9tO1xuICAvKipcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG5cbiAgdGhpcy5pZCA9IGlkO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzdG9yYWdlID0gbmV3IFN0b3JhZ2UoKTtcbiAgdmFyIHJlbmRlcmVyVHlwZSA9IG9wdHMucmVuZGVyZXI7IC8vIFRPRE8gV2ViR0xcblxuICBpZiAodXNlVk1MKSB7XG4gICAgaWYgKCFwYWludGVyQ3RvcnMudm1sKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBuZWVkIHRvIHJlcXVpcmUgXFwnenJlbmRlci92bWwvdm1sXFwnIHRvIHN1cHBvcnQgSUU4Jyk7XG4gICAgfVxuXG4gICAgcmVuZGVyZXJUeXBlID0gJ3ZtbCc7XG4gIH0gZWxzZSBpZiAoIXJlbmRlcmVyVHlwZSB8fCAhcGFpbnRlckN0b3JzW3JlbmRlcmVyVHlwZV0pIHtcbiAgICByZW5kZXJlclR5cGUgPSAnY2FudmFzJztcbiAgfVxuXG4gIHZhciBwYWludGVyID0gbmV3IHBhaW50ZXJDdG9yc1tyZW5kZXJlclR5cGVdKGRvbSwgc3RvcmFnZSwgb3B0cywgaWQpO1xuICB0aGlzLnN0b3JhZ2UgPSBzdG9yYWdlO1xuICB0aGlzLnBhaW50ZXIgPSBwYWludGVyO1xuICB2YXIgaGFuZGVyUHJveHkgPSAhZW52Lm5vZGUgJiYgIWVudi53b3JrZXIgPyBuZXcgSGFuZGxlclByb3h5KHBhaW50ZXIuZ2V0Vmlld3BvcnRSb290KCkpIDogbnVsbDtcbiAgdGhpcy5oYW5kbGVyID0gbmV3IEhhbmRsZXIoc3RvcmFnZSwgcGFpbnRlciwgaGFuZGVyUHJveHksIHBhaW50ZXIucm9vdCk7XG4gIC8qKlxuICAgKiBAdHlwZSB7bW9kdWxlOnpyZW5kZXIvYW5pbWF0aW9uL0FuaW1hdGlvbn1cbiAgICovXG5cbiAgdGhpcy5hbmltYXRpb24gPSBuZXcgQW5pbWF0aW9uKHtcbiAgICBzdGFnZToge1xuICAgICAgdXBkYXRlOiB6clV0aWwuYmluZCh0aGlzLmZsdXNoLCB0aGlzKVxuICAgIH1cbiAgfSk7XG4gIHRoaXMuYW5pbWF0aW9uLnN0YXJ0KCk7XG4gIC8qKlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgdGhpcy5fbmVlZHNSZWZyZXNoOyAvLyDkv67mlLkgc3RvcmFnZS5kZWxGcm9tU3RvcmFnZSwg5q+P5qyh5Yig6Zmk5YWD57Sg5LmL5YmN5Yig6Zmk5Yqo55S7XG4gIC8vIEZJWE1FIOacieeCuXVnbHlcblxuICB2YXIgb2xkRGVsRnJvbVN0b3JhZ2UgPSBzdG9yYWdlLmRlbEZyb21TdG9yYWdlO1xuICB2YXIgb2xkQWRkVG9TdG9yYWdlID0gc3RvcmFnZS5hZGRUb1N0b3JhZ2U7XG5cbiAgc3RvcmFnZS5kZWxGcm9tU3RvcmFnZSA9IGZ1bmN0aW9uIChlbCkge1xuICAgIG9sZERlbEZyb21TdG9yYWdlLmNhbGwoc3RvcmFnZSwgZWwpO1xuICAgIGVsICYmIGVsLnJlbW92ZVNlbGZGcm9tWnIoc2VsZik7XG4gIH07XG5cbiAgc3RvcmFnZS5hZGRUb1N0b3JhZ2UgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICBvbGRBZGRUb1N0b3JhZ2UuY2FsbChzdG9yYWdlLCBlbCk7XG4gICAgZWwuYWRkU2VsZlRvWnIoc2VsZik7XG4gIH07XG59O1xuXG5aUmVuZGVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFpSZW5kZXIsXG5cbiAgLyoqXG4gICAqIOiOt+WPluWunuS+i+WUr+S4gOagh+ivhlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXRJZDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmlkO1xuICB9LFxuXG4gIC8qKlxuICAgKiDmt7vliqDlhYPntKBcbiAgICogQHBhcmFtICB7bW9kdWxlOnpyZW5kZXIvRWxlbWVudH0gZWxcbiAgICovXG4gIGFkZDogZnVuY3Rpb24gKGVsKSB7XG4gICAgdGhpcy5zdG9yYWdlLmFkZFJvb3QoZWwpO1xuICAgIHRoaXMuX25lZWRzUmVmcmVzaCA9IHRydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOWIoOmZpOWFg+e0oFxuICAgKiBAcGFyYW0gIHttb2R1bGU6enJlbmRlci9FbGVtZW50fSBlbFxuICAgKi9cbiAgcmVtb3ZlOiBmdW5jdGlvbiAoZWwpIHtcbiAgICB0aGlzLnN0b3JhZ2UuZGVsUm9vdChlbCk7XG4gICAgdGhpcy5fbmVlZHNSZWZyZXNoID0gdHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hhbmdlIGNvbmZpZ3VyYXRpb24gb2YgbGF5ZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHpMZXZlbFxuICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbY29uZmlnLmNsZWFyQ29sb3I9MF0gQ2xlYXIgY29sb3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtjb25maWcubW90aW9uQmx1cj1mYWxzZV0gSWYgZW5hYmxlIG1vdGlvbiBibHVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbY29uZmlnLmxhc3RGcmFtZUFscGhhPTAuN10gTW90aW9uIGJsdXIgZmFjdG9yLiBMYXJnZXIgdmFsdWUgY2F1c2UgbG9uZ2VyIHRyYWlsZXJcbiAgKi9cbiAgY29uZmlnTGF5ZXI6IGZ1bmN0aW9uICh6TGV2ZWwsIGNvbmZpZykge1xuICAgIGlmICh0aGlzLnBhaW50ZXIuY29uZmlnTGF5ZXIpIHtcbiAgICAgIHRoaXMucGFpbnRlci5jb25maWdMYXllcih6TGV2ZWwsIGNvbmZpZyk7XG4gICAgfVxuXG4gICAgdGhpcy5fbmVlZHNSZWZyZXNoID0gdHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0IGJhY2tncm91bmQgY29sb3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJhY2tncm91bmRDb2xvclxuICAgKi9cbiAgc2V0QmFja2dyb3VuZENvbG9yOiBmdW5jdGlvbiAoYmFja2dyb3VuZENvbG9yKSB7XG4gICAgaWYgKHRoaXMucGFpbnRlci5zZXRCYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgIHRoaXMucGFpbnRlci5zZXRCYWNrZ3JvdW5kQ29sb3IoYmFja2dyb3VuZENvbG9yKTtcbiAgICB9XG5cbiAgICB0aGlzLl9uZWVkc1JlZnJlc2ggPSB0cnVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBhaW50IHRoZSBjYW52YXMgaW1tZWRpYXRlbHlcbiAgICovXG4gIHJlZnJlc2hJbW1lZGlhdGVseTogZnVuY3Rpb24gKCkge1xuICAgIC8vIHZhciBzdGFydCA9IG5ldyBEYXRlKCk7XG4gICAgLy8gQ2xlYXIgbmVlZHNSZWZyZXNoIGFoZWFkIHRvIGF2b2lkIHNvbWV0aGluZyB3cm9uZyBoYXBwZW5zIGluIHJlZnJlc2hcbiAgICAvLyBPciBpdCB3aWxsIGNhdXNlIHpyZW5kZXIgcmVmcmVzaGVzIGFnYWluIGFuZCBhZ2Fpbi5cbiAgICB0aGlzLl9uZWVkc1JlZnJlc2ggPSBmYWxzZTtcbiAgICB0aGlzLnBhaW50ZXIucmVmcmVzaCgpO1xuICAgIC8qKlxuICAgICAqIEF2b2lkIHRyaWdnZXIgenIucmVmcmVzaCBpbiBFbGVtZW50I2JlZm9yZVVwZGF0ZSBob29rXG4gICAgICovXG5cbiAgICB0aGlzLl9uZWVkc1JlZnJlc2ggPSBmYWxzZTsgLy8gdmFyIGVuZCA9IG5ldyBEYXRlKCk7XG4gICAgLy8gdmFyIGxvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2cnKTtcbiAgICAvLyBpZiAobG9nKSB7XG4gICAgLy8gICAgIGxvZy5pbm5lckhUTUwgPSBsb2cuaW5uZXJIVE1MICsgJzxicj4nICsgKGVuZCAtIHN0YXJ0KTtcbiAgICAvLyB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1hcmsgYW5kIHJlcGFpbnQgdGhlIGNhbnZhcyBpbiB0aGUgbmV4dCBmcmFtZSBvZiBicm93c2VyXG4gICAqL1xuICByZWZyZXNoOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fbmVlZHNSZWZyZXNoID0gdHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogUGVyZm9ybSBhbGwgcmVmcmVzaFxuICAgKi9cbiAgZmx1c2g6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdHJpZ2dlclJlbmRlcmVkO1xuXG4gICAgaWYgKHRoaXMuX25lZWRzUmVmcmVzaCkge1xuICAgICAgdHJpZ2dlclJlbmRlcmVkID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVmcmVzaEltbWVkaWF0ZWx5KCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX25lZWRzUmVmcmVzaEhvdmVyKSB7XG4gICAgICB0cmlnZ2VyUmVuZGVyZWQgPSB0cnVlO1xuICAgICAgdGhpcy5yZWZyZXNoSG92ZXJJbW1lZGlhdGVseSgpO1xuICAgIH1cblxuICAgIHRyaWdnZXJSZW5kZXJlZCAmJiB0aGlzLnRyaWdnZXIoJ3JlbmRlcmVkJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBlbGVtZW50IHRvIGhvdmVyIGxheWVyXG4gICAqIEBwYXJhbSAge21vZHVsZTp6cmVuZGVyL0VsZW1lbnR9IGVsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZVxuICAgKi9cbiAgYWRkSG92ZXI6IGZ1bmN0aW9uIChlbCwgc3R5bGUpIHtcbiAgICBpZiAodGhpcy5wYWludGVyLmFkZEhvdmVyKSB7XG4gICAgICB0aGlzLnBhaW50ZXIuYWRkSG92ZXIoZWwsIHN0eWxlKTtcbiAgICAgIHRoaXMucmVmcmVzaEhvdmVyKCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBBZGQgZWxlbWVudCBmcm9tIGhvdmVyIGxheWVyXG4gICAqIEBwYXJhbSAge21vZHVsZTp6cmVuZGVyL0VsZW1lbnR9IGVsXG4gICAqL1xuICByZW1vdmVIb3ZlcjogZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKHRoaXMucGFpbnRlci5yZW1vdmVIb3Zlcikge1xuICAgICAgdGhpcy5wYWludGVyLnJlbW92ZUhvdmVyKGVsKTtcbiAgICAgIHRoaXMucmVmcmVzaEhvdmVyKCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgaG92ZXIgZWxlbWVudHMgaW4gaG92ZXIgbGF5ZXJcbiAgICogQHBhcmFtICB7bW9kdWxlOnpyZW5kZXIvRWxlbWVudH0gZWxcbiAgICovXG4gIGNsZWFySG92ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5wYWludGVyLmNsZWFySG92ZXIpIHtcbiAgICAgIHRoaXMucGFpbnRlci5jbGVhckhvdmVyKCk7XG4gICAgICB0aGlzLnJlZnJlc2hIb3ZlcigpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUmVmcmVzaCBob3ZlciBpbiBuZXh0IGZyYW1lXG4gICAqL1xuICByZWZyZXNoSG92ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9uZWVkc1JlZnJlc2hIb3ZlciA9IHRydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlZnJlc2ggaG92ZXIgaW1tZWRpYXRlbHlcbiAgICovXG4gIHJlZnJlc2hIb3ZlckltbWVkaWF0ZWx5OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fbmVlZHNSZWZyZXNoSG92ZXIgPSBmYWxzZTtcbiAgICB0aGlzLnBhaW50ZXIucmVmcmVzaEhvdmVyICYmIHRoaXMucGFpbnRlci5yZWZyZXNoSG92ZXIoKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVzaXplIHRoZSBjYW52YXMuXG4gICAqIFNob3VsZCBiZSBpbnZva2VkIHdoZW4gY29udGFpbmVyIHNpemUgaXMgY2hhbmdlZFxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHNdXG4gICAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gW29wdHMud2lkdGhdIENhbiBiZSAnYXV0bycgKHRoZSBzYW1lIGFzIG51bGwvdW5kZWZpbmVkKVxuICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IFtvcHRzLmhlaWdodF0gQ2FuIGJlICdhdXRvJyAodGhlIHNhbWUgYXMgbnVsbC91bmRlZmluZWQpXG4gICAqL1xuICByZXNpemU6IGZ1bmN0aW9uIChvcHRzKSB7XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgdGhpcy5wYWludGVyLnJlc2l6ZShvcHRzLndpZHRoLCBvcHRzLmhlaWdodCk7XG4gICAgdGhpcy5oYW5kbGVyLnJlc2l6ZSgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTdG9wIGFuZCBjbGVhciBhbGwgYW5pbWF0aW9uIGltbWVkaWF0ZWx5XG4gICAqL1xuICBjbGVhckFuaW1hdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYW5pbWF0aW9uLmNsZWFyKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCBjb250YWluZXIgd2lkdGhcbiAgICovXG4gIGdldFdpZHRoOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFpbnRlci5nZXRXaWR0aCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgY29udGFpbmVyIGhlaWdodFxuICAgKi9cbiAgZ2V0SGVpZ2h0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFpbnRlci5nZXRIZWlnaHQoKTtcbiAgfSxcblxuICAvKipcbiAgICogRXhwb3J0IHRoZSBjYW52YXMgYXMgQmFzZTY0IFVSTFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2JhY2tncm91bmRDb2xvcj0nI2ZmZiddXG4gICAqIEByZXR1cm4ge3N0cmluZ30gQmFzZTY0IFVSTFxuICAgKi9cbiAgLy8gdG9EYXRhVVJMOiBmdW5jdGlvbih0eXBlLCBiYWNrZ3JvdW5kQ29sb3IpIHtcbiAgLy8gICAgIHJldHVybiB0aGlzLnBhaW50ZXIuZ2V0UmVuZGVyZWRDYW52YXMoe1xuICAvLyAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yXG4gIC8vICAgICB9KS50b0RhdGFVUkwodHlwZSk7XG4gIC8vIH0sXG5cbiAgLyoqXG4gICAqIENvbnZlcnRpbmcgYSBwYXRoIHRvIGltYWdlLlxuICAgKiBJdCBoYXMgbXVjaCBiZXR0ZXIgcGVyZm9ybWFuY2Ugb2YgZHJhd2luZyBpbWFnZSByYXRoZXIgdGhhbiBkcmF3aW5nIGEgdmVjdG9yIHBhdGguXG4gICAqIEBwYXJhbSB7bW9kdWxlOnpyZW5kZXIvZ3JhcGhpYy9QYXRofSBlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqL1xuICBwYXRoVG9JbWFnZTogZnVuY3Rpb24gKGUsIGRwcikge1xuICAgIHJldHVybiB0aGlzLnBhaW50ZXIucGF0aFRvSW1hZ2UoZSwgZHByKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0IGRlZmF1bHQgY3Vyc29yXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbY3Vyc29yU3R5bGU9J2RlZmF1bHQnXSDkvovlpoIgY3Jvc3NoYWlyXG4gICAqL1xuICBzZXRDdXJzb3JTdHlsZTogZnVuY3Rpb24gKGN1cnNvclN0eWxlKSB7XG4gICAgdGhpcy5oYW5kbGVyLnNldEN1cnNvclN0eWxlKGN1cnNvclN0eWxlKTtcbiAgfSxcblxuICAvKipcbiAgICogRmluZCBob3ZlcmVkIGVsZW1lbnRcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHJldHVybiB7T2JqZWN0fSB7dGFyZ2V0LCB0b3BUYXJnZXR9XG4gICAqL1xuICBmaW5kSG92ZXI6IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5maW5kSG92ZXIoeCwgeSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEJpbmQgZXZlbnRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBFdmVudCBuYW1lXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGV2ZW50SGFuZGxlciBIYW5kbGVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dF0gQ29udGV4dCBvYmplY3RcbiAgICovXG4gIG9uOiBmdW5jdGlvbiAoZXZlbnROYW1lLCBldmVudEhhbmRsZXIsIGNvbnRleHQpIHtcbiAgICB0aGlzLmhhbmRsZXIub24oZXZlbnROYW1lLCBldmVudEhhbmRsZXIsIGNvbnRleHQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVbmJpbmQgZXZlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBFdmVudCBuYW1lXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtldmVudEhhbmRsZXJdIEhhbmRsZXIgZnVuY3Rpb25cbiAgICovXG4gIG9mZjogZnVuY3Rpb24gKGV2ZW50TmFtZSwgZXZlbnRIYW5kbGVyKSB7XG4gICAgdGhpcy5oYW5kbGVyLm9mZihldmVudE5hbWUsIGV2ZW50SGFuZGxlcik7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyaWdnZXIgZXZlbnQgbWFudWFsbHlcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBFdmVudCBuYW1lXG4gICAqIEBwYXJhbSB7ZXZlbnQ9fSBldmVudCBFdmVudCBvYmplY3RcbiAgICovXG4gIHRyaWdnZXI6IGZ1bmN0aW9uIChldmVudE5hbWUsIGV2ZW50KSB7XG4gICAgdGhpcy5oYW5kbGVyLnRyaWdnZXIoZXZlbnROYW1lLCBldmVudCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENsZWFyIGFsbCBvYmplY3RzIGFuZCB0aGUgY2FudmFzLlxuICAgKi9cbiAgY2xlYXI6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnN0b3JhZ2UuZGVsUm9vdCgpO1xuICAgIHRoaXMucGFpbnRlci5jbGVhcigpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEaXNwb3NlIHNlbGYuXG4gICAqL1xuICBkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hbmltYXRpb24uc3RvcCgpO1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgICB0aGlzLnN0b3JhZ2UuZGlzcG9zZSgpO1xuICAgIHRoaXMucGFpbnRlci5kaXNwb3NlKCk7XG4gICAgdGhpcy5oYW5kbGVyLmRpc3Bvc2UoKTtcbiAgICB0aGlzLmFuaW1hdGlvbiA9IHRoaXMuc3RvcmFnZSA9IHRoaXMucGFpbnRlciA9IHRoaXMuaGFuZGxlciA9IG51bGw7XG4gICAgZGVsSW5zdGFuY2UodGhpcy5pZCk7XG4gIH1cbn07XG5leHBvcnRzLnZlcnNpb24gPSB2ZXJzaW9uO1xuZXhwb3J0cy5pbml0ID0gaW5pdDtcbmV4cG9ydHMuZGlzcG9zZSA9IGRpc3Bvc2U7XG5leHBvcnRzLmdldEluc3RhbmNlID0gZ2V0SW5zdGFuY2U7XG5leHBvcnRzLnJlZ2lzdGVyUGFpbnRlciA9IHJlZ2lzdGVyUGFpbnRlcjsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9pY29uZm9udC5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vaWNvbmZvbnQuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9pY29uZm9udC5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIyMzMyYjZhNzQzOWQ4NjUxNTc0YjI3ZGUzMWYyMTIxYi5lb3RcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI2MDgwODdlMjIxNDk2N2VkOTJkNDM3YmJjZWRkNzc4Mi5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI2MWFkYzdjNGE5NWNlZGI1NzIxMmEyYjBiNGU4MjEwYS50dGZcIjsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9pbmRleC5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vaW5kZXguY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9pbmRleC5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnkvZGlzdC9qcXVlcnkubWluJztcclxuXHJcbmxldCB1cmwgPSBgJHt3aW5kb3cubG9jYXRpb24ucHJvdG9jb2x9Ly8ke3dpbmRvdy5sb2NhdGlvbi5ob3N0fWA7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbG9naW4oZm4pIHtcclxuICB2YXIgbmFtZSA9ICQoJyN1c2VybmFtZScpLnZhbCgpLCBwYXNzd29yZCA9ICQoJyNwYXNzd29yZCcpLnZhbCgpO1xyXG4gIGlmICghbmFtZSkge1xyXG4gICAgYWxlcnQoJ+ivt+i+k+WFpeeUqOaIt+WQjScpO1xyXG4gIH07XHJcbiAgaWYgKCFwYXNzd29yZCkge1xyXG4gICAgYWxlcnQoJ+ivt+i+k+WFpeWvhueggScpO1xyXG4gIH07XHJcbiAgdmFyIGNpcGhlciA9IHdpbmRvdy5idG9hKG5hbWUgKyAnOicgKyBwYXNzd29yZCk7XHJcbiAgJC5hamF4KHtcclxuICAgIHR5cGU6ICdnZXQnLFxyXG4gICAgaGVhZGVyczoge1xyXG4gICAgICBVc2VYQmFzaWM6IHRydWUsXHJcbiAgICAgIEF1dGhvcml6YXRpb246ICdCYXNpYyAnICsgY2lwaGVyXHJcbiAgICB9LFxyXG4gICAgdXJsOiB1cmwgKyAnL3VzZXIvY3VycmVudFVzZXI/YXV0aCcsXHJcbiAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ190Y3k4JywgY2lwaGVyKTtcclxuICAgICAgZm4oZGF0YSk7XHJcbiAgICB9LFxyXG4gICAgZXJyb3I6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgYWxlcnQoJ+eUqOaIt+WQjeaIluWvhueggemUmeivr++8jOivt+mHjeaWsOi+k+WFpScpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59IiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5L2Rpc3QvanF1ZXJ5Lm1pbic7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGV2aWNlKHEsIGZuKSB7XHJcbiAgdmFyIGRhdGEgPSB7fTtcclxuICB2YXIgdXJsID0gYCR7d2luZG93LmxvY2F0aW9uLnByb3RvY29sfS8vJHt3aW5kb3cubG9jYXRpb24uaG9zdH1gICsgJy9pbnZlbnRvcnkvbWFuYWdlZE9iamVjdHMnO1xyXG4gIGRhdGEuZnJhZ21lbnRUeXBlID0gJ2M4eV9Jc0RldmljZSc7XHJcbiAgZGF0YS5wYWdlU2l6ZSA9IDIwMDA7XHJcbiAgaWYgKHEpe1xyXG4gICAgZGF0YS5xID0gcTtcclxuICB9O1xyXG4gICQuYWpheCh7XHJcbiAgICB0eXBlOiAnZ2V0JyxcclxuICAgIHVybDogdXJsLFxyXG4gICAgYXN5bmM6IGZhbHNlLFxyXG4gICAgaGVhZGVyczoge1xyXG4gICAgICBBdXRob3JpemF0aW9uOiAnQmFzaWMgJyArIHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ190Y3k4JylcclxuICAgIH0sXHJcbiAgICBkYXRhOiBkYXRhLFxyXG4gICAgc3VjY2VzczogKHJlcykgPT4ge1xyXG4gICAgICBmbihyZXMubWFuYWdlZE9iamVjdHMpO1xyXG4gICAgfVxyXG4gIH0pXHJcbn0iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnkvZGlzdC9qcXVlcnkubWluJztcclxuaW1wb3J0ICcuL2ljb25mb250L2ljb25mb250LmNzcyc7XHJcbmltcG9ydCAnLi9pbmRleC5jc3MnO1xyXG5pbXBvcnQge2xvZ2lufSBmcm9tIFwiLi9sb2dpblwiO1xyXG5pbXBvcnQge2dldERldmljZX0gZnJvbSBcIi4vZ2V0RGV2aWNlXCI7XHJcbi8vIOW8leWFpSBFQ2hhcnRzIOS4u+aooeWdl1xyXG5jb25zdCBlY2hhcnRzID0gcmVxdWlyZSgnZWNoYXJ0cy9saWIvZWNoYXJ0cycpO1xyXG4vLyDlvJXlhaXmn7Hnirblm75cclxucmVxdWlyZSgnZWNoYXJ0cy9saWIvY2hhcnQvcGllJyk7XHJcbi8vIOW8leWFpeaPkOekuuahhuWSjOagh+mimOe7hOS7tlxyXG5yZXF1aXJlKCdlY2hhcnRzL2xpYi9jb21wb25lbnQvdG9vbHRpcCcpO1xyXG5yZXF1aXJlKCdlY2hhcnRzL2xpYi9jb21wb25lbnQvdGl0bGUnKTtcclxucmVxdWlyZSgnZWNoYXJ0cy9saWIvY29tcG9uZW50L2xlZ2VuZCcpO1xyXG5cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4gIGlmIChzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdfdGN5OCcpKSB7XHJcbiAgICBnZXRDb250ZW50KCk7XHJcbiAgfSBlbHNlIHtcclxuICAgICQoJyNsb2dpbicpLnNob3coKTtcclxuICAgICQoJyNsb2FkaW5nJykuaGlkZSgpO1xyXG4gICAgJCgnI2NvbnRlbnQnKS5oaWRlKCk7XHJcbiAgfVxyXG5cclxuICBsZXQgdXJsID0gYCR7d2luZG93LmxvY2F0aW9uLnByb3RvY29sfS8vJHt3aW5kb3cubG9jYXRpb24uaG9zdH1gO1xyXG5cclxuICAkKCcuaW5wdXQtZ3JvdXAnKS5vbignYmx1cicsICcuZm9ybS1jb250cm9sJywgZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gJCh0aGlzKTtcclxuICAgIGlmICghX3RoaXMudmFsKCkpIHtcclxuICAgICAgX3RoaXMuY3NzKHtcclxuICAgICAgICBib3JkZXJDb2xvcjogJ3JlZCdcclxuICAgICAgfSk7XHJcbiAgICAgIF90aGlzLnByZXYoKS5jc3Moe1xyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JlZCcsXHJcbiAgICAgICAgY29sb3I6ICcjZmZmJyxcclxuICAgICAgICBib3JkZXJDb2xvcjogJ3JlZCdcclxuICAgICAgfSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIF90aGlzLmNzcyh7XHJcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjRTVFN0U3J1xyXG4gICAgICB9KTtcclxuICAgICAgX3RoaXMucHJldigpLmNzcyh7XHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI0U1RTdFNycsXHJcbiAgICAgICAgY29sb3I6ICcjMzMzJyxcclxuICAgICAgICBib3JkZXJDb2xvcjogJyNFNUU3RTcnXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gICQoJy5idG4nKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICBsb2dpbigoZGF0YSkgPT4ge1xyXG4gICAgICBnZXRDb250ZW50KCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgJCgnI3Bhc3N3b3JkJykua2V5cHJlc3MoZnVuY3Rpb24gKGUpIHtcclxuICAgIGlmIChlLmtleUNvZGUgPT09IDEzKSB7XHJcbiAgICAgIGxvZ2luKChkYXRhKSA9PiB7XHJcbiAgICAgICAgZ2V0Q29udGVudCgpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgZnVuY3Rpb24gZ2V0Q29udGVudCgpIHtcclxuICAgICQoJyNsb2dpbicpLmhpZGUoKTtcclxuICAgICQoJyNsb2FkaW5nJykuc2hvdygpO1xyXG4gICAgJC5nZXRTY3JpcHQoJ2h0dHBzOi8vd2ViYXBpLmFtYXAuY29tL21hcHM/dj0xLjQuOCZrZXk9NDUwYWFjYzlkODYxZjEwNWRjZDY0NWQzODVjMGEzMTMmcGx1Z2luPUFNYXAuTWFya2VyQ2x1c3RlcmVyJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAkKCcjbG9hZGluZycpLmhpZGUoKTtcclxuICAgICAgJCgnI2NvbnRlbnQnKS5zaG93KCk7XHJcbiAgICAgIHZhciBtYXJrZXJzID0gW107XHJcbiAgICAgIHZhciBtYXAgPSBuZXcgQU1hcC5NYXAoXCJtYXBcIiwge1xyXG4gICAgICAgIHJlc2l6ZUVuYWJsZTogdHJ1ZSxcclxuICAgICAgICBleHBhbmRab29tUmFuZ2U6IHRydWUsXHJcbiAgICAgICAgem9vbTogMTIsXHJcbiAgICAgICAgem9vbXM6IFszLCAyMF0sXHJcbiAgICAgICAgbWFwU3R5bGU6ICdhbWFwOi8vc3R5bGVzL2RhcmtibHVlJ1xyXG4gICAgICB9KTtcclxuICAgICAgLy/pu5jorqTmoLflvI9cclxuICAgICAgY29uc3QgaGFpID0gbmV3IEFNYXAuTWFya2VyQ2x1c3RlcmVyKG1hcCwgbWFya2Vycywge2dyaWRTaXplOiA4MH0pO1xyXG4gICAgICAvLyDlj7PkuIrppbzlm75cclxuICAgICAgdmFyIHRvcENoYXJ0ID0gZWNoYXJ0cy5pbml0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyaWdodC10b3AnKSwgJ2RhcmsnKTtcclxuICAgICAgLy/lj7PkuIvppbzlm75cclxuICAgICAgdmFyIGJvdHRvbUNoYXJ0ID0gZWNoYXJ0cy5pbml0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyaWdodC1ib3R0b20nKSwgJ2RhcmsnKTtcclxuXHJcbiAgICAgIHRvcENoYXJ0LnNob3dMb2FkaW5nKCk7XHJcbiAgICAgIGJvdHRvbUNoYXJ0LnNob3dMb2FkaW5nKCk7XHJcbiAgICAgIGdldERldmljZSgnJywgKHJlcykgPT4ge1xyXG4gICAgICAgIHZhciBsZW4gPSByZXMubGVuZ3RoO1xyXG4gICAgICAgIGdldERldmljZSgnJGZpbHRlcj0oYzh5X0F2YWlsYWJpbGl0eS5zdGF0dXMgZXEgXFwnQVZBSUxBQkxFXFwnKScsIChhYmxlUmVzKSA9PiB7IC8vIOiOt+WPluWPr+eUqOiuvuWkh1xyXG4gICAgICAgICAgdG9wQ2hhcnQuaGlkZUxvYWRpbmcoKTtcclxuICAgICAgICAgIHRvcENoYXJ0LnNldE9wdGlvbih7XHJcbiAgICAgICAgICAgIHRpdGxlOiB7XHJcbiAgICAgICAgICAgICAgdGV4dDogJ+WPr+eUqOiuvuWkhycsXHJcbiAgICAgICAgICAgICAgeDogJ2NlbnRlcidcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgIHRyaWdnZXI6ICdpdGVtJyxcclxuICAgICAgICAgICAgICBmb3JtYXR0ZXI6IFwie2F9IDxici8+e2J9OiB7Y30gKHtkfSUpXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwKScsXHJcbiAgICAgICAgICAgIGxlZ2VuZDoge1xyXG4gICAgICAgICAgICAgIG9yaWVudDogJ3ZlcnRpY2FsJyxcclxuICAgICAgICAgICAgICB4OiAnbGVmdCcsXHJcbiAgICAgICAgICAgICAgZGF0YTogWyflj6/nlKjorr7lpIcnLCAn5LiN5Y+v55So6K6+5aSHJ11cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2VyaWVzOiBbXHJcbiAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ+iuvuWkh+aAu+mHjycsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAncGllJyxcclxuICAgICAgICAgICAgICAgIHJhZGl1czogWyc1MCUnLCAnNzAlJ10sXHJcbiAgICAgICAgICAgICAgICBhdm9pZExhYmVsT3ZlcmxhcDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBsYWJlbDoge1xyXG4gICAgICAgICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2NlbnRlcidcclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgZW1waGFzaXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRleHRTdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICczMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBsYWJlbExpbmU6IHtcclxuICAgICAgICAgICAgICAgICAgbm9ybWFsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFtcclxuICAgICAgICAgICAgICAgICAge3ZhbHVlOiBhYmxlUmVzLmxlbmd0aCwgbmFtZTogJ+WPr+eUqOiuvuWkhyd9LFxyXG4gICAgICAgICAgICAgICAgICB7dmFsdWU6IGxlbiAtIGFibGVSZXMubGVuZ3RoLCBuYW1lOiAn5LiN5Y+v55So6K6+5aSHJ31cclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGdldERldmljZSgnJGZpbHRlcj0oYzh5X0Nvbm5lY3Rpb24uc3RhdHVzIGVxIFxcJ0NPTk5FQ1RFRFxcJyknLCAoY29uUmVzKSA9PiB7IC8vIOiOt+WPluWcqOe6v+iuvuWkh1xyXG4gICAgICAgICAgYm90dG9tQ2hhcnQuaGlkZUxvYWRpbmcoKTtcclxuICAgICAgICAgIGJvdHRvbUNoYXJ0LnNldE9wdGlvbih7XHJcbiAgICAgICAgICAgIHRpdGxlOiB7XHJcbiAgICAgICAgICAgICAgdGV4dDogJ+iuvuWkhycsXHJcbiAgICAgICAgICAgICAgeDogJ2NlbnRlcidcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgIHRyaWdnZXI6ICdpdGVtJyxcclxuICAgICAgICAgICAgICBmb3JtYXR0ZXI6IFwie2F9IDxici8+e2J9OiB7Y30gKHtkfSUpXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwKScsXHJcbiAgICAgICAgICAgIGxlZ2VuZDoge1xyXG4gICAgICAgICAgICAgIG9yaWVudDogJ3ZlcnRpY2FsJyxcclxuICAgICAgICAgICAgICB4OiAnbGVmdCcsXHJcbiAgICAgICAgICAgICAgZGF0YTogWyflnKjnur/orr7lpIcnLCAn5LiN5Zyo57q/6K6+5aSHJ11cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2VyaWVzOiBbXHJcbiAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ+iuvuWkhycsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAncGllJyxcclxuICAgICAgICAgICAgICAgIHJhZGl1czogWyc1MCUnLCAnNzAlJ10sXHJcbiAgICAgICAgICAgICAgICBhdm9pZExhYmVsT3ZlcmxhcDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBsYWJlbDoge1xyXG4gICAgICAgICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2NlbnRlcidcclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgZW1waGFzaXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRleHRTdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICczMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBsYWJlbExpbmU6IHtcclxuICAgICAgICAgICAgICAgICAgbm9ybWFsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFtcclxuICAgICAgICAgICAgICAgICAge3ZhbHVlOiBjb25SZXMubGVuZ3RoLCBuYW1lOiAn5Zyo57q/6K6+5aSHJ30sXHJcbiAgICAgICAgICAgICAgICAgIHt2YWx1ZTogbGVuIC0gY29uUmVzLmxlbmd0aCwgbmFtZTogJ+S4jeWcqOe6v+iuvuWkhyd9XHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICBpZiAocmVzW2ldLmM4eV9Qb3NpdGlvbikge1xyXG4gICAgICAgICAgICB2YXIgZ3BzID0gW3Jlc1tpXS5jOHlfUG9zaXRpb24ubG5nLCByZXNbaV0uYzh5X1Bvc2l0aW9uLmxhdF07XHJcbiAgICAgICAgICAgIEFNYXAuY29udmVydEZyb20oZ3BzLCAnZ3BzJywgZnVuY3Rpb24gKHN0YXR1cywgcmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgaWYgKHJlc3VsdC5pbmZvID09PSAnb2snKSB7XHJcbiAgICAgICAgICAgICAgICBoYWkuYWRkTWFya2VyKG5ldyBBTWFwLk1hcmtlcih7XHJcbiAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBbcmVzdWx0LmxvY2F0aW9uc1swXS5QLCByZXN1bHQubG9jYXRpb25zWzBdLk9dLFxyXG4gICAgICAgICAgICAgICAgICBjb250ZW50OiAnPGEgaHJlZj1cIicgKyB1cmwgKyAnL2FwcHMvZGV2aWNlbWFuYWdlbWVudC9pbmRleC5odG1sIy9kZXZpY2UvJyArIHJlc1tpXS5pZCArICcvaW5mb1wiIHN0eWxlPVwiZGlzcGxheTogYmxvY2s7IGJhY2tncm91bmQtY29sb3I6IGhzbGEoMTgwLCAxMDAlLCA1MCUsIDAuNyk7IGhlaWdodDogMjRweDsgd2lkdGg6IDI0cHg7IGJvcmRlcjogMXB4IHNvbGlkIGhzbCgxODAsIDEwMCUsIDQwJSk7IGJvcmRlci1yYWRpdXM6IDEycHg7IGJveC1zaGFkb3c6IGhzbCgxODAsIDEwMCUsIDUwJSkgMHB4IDBweCAxcHg7XCI+PC9hPicsXHJcbiAgICAgICAgICAgICAgICAgIG9mZnNldDogbmV3IEFNYXAuUGl4ZWwoLTE1LCAtMTUpXHJcbiAgICAgICAgICAgICAgICB9KSlcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICB9XHJcbn0pO1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI4ZmE5YjhkOGQzZTJjOWJkNmJlM2E4MmJkNzIzNTRkNC5naWZcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJlYjllMWRiOTBhNDViZDhkYWVlZTg4Y2E5MThhZWE5Zi5zdmdcIjsiXSwic291cmNlUm9vdCI6IiJ9